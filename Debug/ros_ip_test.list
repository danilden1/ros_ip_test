
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015360  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e2c  08015560  08015560  00025560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801838c  0801838c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801838c  0801838c  0002838c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018394  08018394  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018394  08018394  00028394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018398  08018398  00028398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801839c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b8f4  20000080  0801841c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b974  0801841c  0003b974  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00048161  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008320  00000000  00000000  0007820f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002450  00000000  00000000  00080530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022e0  00000000  00000000  00082980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010dff  00000000  00000000  00084c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037c76  00000000  00000000  00095a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124335  00000000  00000000  000cd6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f1a0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a190  00000000  00000000  001f1a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001fbbf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001fbc2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08015548 	.word	0x08015548

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08015548 	.word	0x08015548

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SCB_EnableICache+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f6:	f3bf 8f6f 	isb	sy
}
 80005fa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCB_EnableICache+0x48>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SCB_EnableICache+0x48>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SCB_EnableDCache+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SCB_EnableDCache+0x84>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b5b      	lsrs	r3, r3, #13
 8000644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000648:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000652:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	015a      	lsls	r2, r3, #5
 8000658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000664:	4313      	orrs	r3, r2
 8000666:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60fa      	str	r2, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e5      	bne.n	800064a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SCB_EnableDCache+0x84>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b0:	f7ff ff92 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b4:	f7ff ffb6 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fcad 	bl	8001016 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f838 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f928 	bl	8000914 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f8c8 	bl	8000858 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f8f6 	bl	80008b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <main+0x60>)
 80006ce:	f000 fa15 	bl	8000afc <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fc5b 	bl	8005f8c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  strout_Queue = osMessageQueueNew(MAIL_SIZE, sizeof(struct_out), &strout_Queue_attr);
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <main+0x64>)
 80006d8:	2144      	movs	r1, #68	; 0x44
 80006da:	2005      	movs	r0, #5
 80006dc:	f006 f85e 	bl	800679c <osMessageQueueNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <main+0x68>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e6:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <main+0x6c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <main+0x70>)
 80006ec:	f005 fce0 	bl	80060b0 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a0b      	ldr	r2, [pc, #44]	; (8000720 <main+0x74>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  TaskStringOutHandle = osThreadNew(TaskStringOut, NULL, &myString_attributes);
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <main+0x78>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480b      	ldr	r0, [pc, #44]	; (8000728 <main+0x7c>)
 80006fc:	f005 fcd8 	bl	80060b0 <osThreadNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0a      	ldr	r2, [pc, #40]	; (800072c <main+0x80>)
 8000704:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000706:	f005 fc75 	bl	8005ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0x5e>
 800070c:	20004b5c 	.word	0x20004b5c
 8000710:	080180ec 	.word	0x080180ec
 8000714:	20004be0 	.word	0x20004be0
 8000718:	080180a4 	.word	0x080180a4
 800071c:	08000a9d 	.word	0x08000a9d
 8000720:	20004b58 	.word	0x20004b58
 8000724:	080180c8 	.word	0x080180c8
 8000728:	08000a59 	.word	0x08000a59
 800072c:	20005024 	.word	0x20005024

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b0b8      	sub	sp, #224	; 0xe0
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800073a:	2234      	movs	r2, #52	; 0x34
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f013 fc5e 	bl	8014000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2290      	movs	r2, #144	; 0x90
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f013 fc4f 	bl	8014000 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b3a      	ldr	r3, [pc, #232]	; (800084c <SystemClock_Config+0x11c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	4a39      	ldr	r2, [pc, #228]	; (800084c <SystemClock_Config+0x11c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	; 0x40
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <SystemClock_Config+0x11c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800077a:	4b35      	ldr	r3, [pc, #212]	; (8000850 <SystemClock_Config+0x120>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000782:	4a33      	ldr	r2, [pc, #204]	; (8000850 <SystemClock_Config+0x120>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6013      	str	r3, [r2, #0]
 800078a:	4b31      	ldr	r3, [pc, #196]	; (8000850 <SystemClock_Config+0x120>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000796:	2301      	movs	r3, #1
 8000798:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a4:	2302      	movs	r3, #2
 80007a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007b2:	2304      	movs	r3, #4
 80007b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fa36 	bl	8002c40 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007da:	f000 f989 	bl	8000af0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007de:	f002 f9df 	bl	8002ba0 <HAL_PWREx_EnableOverDrive>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007e8:	f000 f982 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ec:	230f      	movs	r3, #15
 80007ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f2:	2302      	movs	r3, #2
 80007f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800080c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000810:	2103      	movs	r1, #3
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fcc2 	bl	800319c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800081e:	f000 f967 	bl	8000af0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <SystemClock_Config+0x124>)
 8000824:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000826:	2300      	movs	r3, #0
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800082a:	2300      	movs	r3, #0
 800082c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fee5 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000840:	f000 f956 	bl	8000af0 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	37e0      	adds	r7, #224	; 0xe0
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000
 8000854:	00200100 	.word	0x00200100

08000858 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART3_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART3_UART_Init+0x58>)
 800089c:	f003 fdba 	bl	8004414 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f000 f923 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20004b5c 	.word	0x20004b5c
 80008b4:	40004800 	.word	0x40004800

080008b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2202      	movs	r2, #2
 80008da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2201      	movs	r2, #1
 80008e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	f002 f807 	bl	800290e <HAL_PCD_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f8f3 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20004be4 	.word	0x20004be4

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	; 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b46      	ldr	r3, [pc, #280]	; (8000a44 <MX_GPIO_Init+0x130>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a45      	ldr	r2, [pc, #276]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b40      	ldr	r3, [pc, #256]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x130>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a33      	ldr	r2, [pc, #204]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x130>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2d      	ldr	r2, [pc, #180]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_GPIO_Init+0x130>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a2:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x130>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_GPIO_Init+0x134>)
 80009c2:	f001 ff8b 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	; 0x40
 80009ca:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x138>)
 80009cc:	f001 ff86 	bl	80028dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	4b1e      	ldr	r3, [pc, #120]	; (8000a50 <MX_GPIO_Init+0x13c>)
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481b      	ldr	r0, [pc, #108]	; (8000a54 <MX_GPIO_Init+0x140>)
 80009e6:	f001 fdcd 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_GPIO_Init+0x134>)
 8000a04:	f001 fdbe 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a20:	f001 fdb0 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_GPIO_Init+0x138>)
 8000a38:	f001 fda4 	bl	8002584 <HAL_GPIO_Init>

}
 8000a3c:	bf00      	nop
 8000a3e:	3730      	adds	r7, #48	; 0x30
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40021800 	.word	0x40021800
 8000a50:	10110000 	.word	0x10110000
 8000a54:	40020800 	.word	0x40020800

08000a58 <TaskStringOut>:

/* USER CODE BEGIN 4 */
void TaskStringOut(void const * argument)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b096      	sub	sp, #88	; 0x58
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  osEvent event;
  struct_out *qstruct;
  struct_out loc_struct_out;
  for(;;)
  {
    if(osMessageQueueGet(strout_Queue, &loc_struct_out, 0, 2000)){
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <TaskStringOut+0x38>)
 8000a62:	6818      	ldr	r0, [r3, #0]
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f005 ff8f 	bl	8006990 <osMessageQueueGet>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f3      	beq.n	8000a60 <TaskStringOut+0x8>
      sprintf(str1,"%s", loc_struct_out.str);
 8000a78:	f107 0308 	add.w	r3, r7, #8
 8000a7c:	3306      	adds	r3, #6
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <TaskStringOut+0x3c>)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <TaskStringOut+0x40>)
 8000a84:	f013 fbe2 	bl	801424c <siprintf>
      //TFT_DisplayString(50, qstruct->y_pos, (uint8_t *)str1, LEFT_MODE);
      printf(str1);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <TaskStringOut+0x40>)
 8000a8a:	f013 fac1 	bl	8014010 <iprintf>
    if(osMessageQueueGet(strout_Queue, &loc_struct_out, 0, 2000)){
 8000a8e:	e7e7      	b.n	8000a60 <TaskStringOut+0x8>
 8000a90:	20004be0 	.word	0x20004be0
 8000a94:	08015584 	.word	0x08015584
 8000a98:	20004fe8 	.word	0x20004fe8

08000a9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000aa4:	f004 fcea 	bl	800547c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <StartDefaultTask+0x28>)
 8000aaa:	f012 f9bd 	bl	8012e28 <ip4addr_ntoa>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <StartDefaultTask+0x2c>)
 8000ab4:	f013 faac 	bl	8014010 <iprintf>
    osDelay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f005 fb9e 	bl	80061fc <osDelay>
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000ac0:	e7f2      	b.n	8000aa8 <StartDefaultTask+0xc>
 8000ac2:	bf00      	nop
 8000ac4:	200050c0 	.word	0x200050c0
 8000ac8:	08015588 	.word	0x08015588

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 faa7 	bl	8001030 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40001000 	.word	0x40001000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <RetargetInit+0x28>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <RetargetInit+0x2c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6898      	ldr	r0, [r3, #8]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2202      	movs	r2, #2
 8000b14:	2100      	movs	r1, #0
 8000b16:	f013 fad3 	bl	80140c0 <setvbuf>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20005038 	.word	0x20005038
 8000b28:	2000001c 	.word	0x2000001c

08000b2c <_isatty>:

int _isatty(int fd) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db04      	blt.n	8000b44 <_isatty+0x18>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	dc01      	bgt.n	8000b44 <_isatty+0x18>
    return 1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e003      	b.n	8000b4c <_isatty+0x20>

  errno = EBADF;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <_isatty+0x2c>)
 8000b46:	2209      	movs	r2, #9
 8000b48:	601a      	str	r2, [r3, #0]
  return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	2000b960 	.word	0x2000b960

08000b5c <_write>:

int _write(int fd, char* ptr, int len) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d002      	beq.n	8000b74 <_write+0x18>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d111      	bne.n	8000b98 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <_write+0x50>)
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	f003 fc95 	bl	80044b0 <HAL_UART_Transmit>
 8000b86:	4603      	mov	r3, r0
 8000b88:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <_write+0x38>
      return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	e006      	b.n	8000ba2 <_write+0x46>
    else
      return EIO;
 8000b94:	2305      	movs	r3, #5
 8000b96:	e004      	b.n	8000ba2 <_write+0x46>
  }
  errno = EBADF;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <_write+0x54>)
 8000b9a:	2209      	movs	r2, #9
 8000b9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20005038 	.word	0x20005038
 8000bb0:	2000b960 	.word	0x2000b960

08000bb4 <_close>:

int _close(int fd) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db04      	blt.n	8000bcc <_close+0x18>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	dc01      	bgt.n	8000bcc <_close+0x18>
    return 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e004      	b.n	8000bd6 <_close+0x22>

  errno = EBADF;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_close+0x30>)
 8000bce:	2209      	movs	r2, #9
 8000bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	2000b960 	.word	0x2000b960

08000be8 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <_lseek+0x24>)
 8000bf6:	2209      	movs	r2, #9
 8000bf8:	601a      	str	r2, [r3, #0]
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000b960 	.word	0x2000b960

08000c10 <_read>:

int _read(int fd, char* ptr, int len) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d110      	bne.n	8000c44 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <_read+0x48>)
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	f003 fcd2 	bl	80045d6 <HAL_UART_Receive>
 8000c32:	4603      	mov	r3, r0
 8000c34:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <_read+0x30>
      return 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e006      	b.n	8000c4e <_read+0x3e>
    else
      return EIO;
 8000c40:	2305      	movs	r3, #5
 8000c42:	e004      	b.n	8000c4e <_read+0x3e>
  }
  errno = EBADF;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <_read+0x4c>)
 8000c46:	2209      	movs	r2, #9
 8000c48:	601a      	str	r2, [r3, #0]
  return -1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20005038 	.word	0x20005038
 8000c5c:	2000b960 	.word	0x2000b960

08000c60 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db08      	blt.n	8000c82 <_fstat+0x22>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc05      	bgt.n	8000c82 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c7c:	605a      	str	r2, [r3, #4]
    return 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e003      	b.n	8000c8a <_fstat+0x2a>
  }

  errno = EBADF;
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <_fstat+0x38>)
 8000c84:	2209      	movs	r2, #9
 8000c86:	601a      	str	r2, [r3, #0]
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	2000b960 	.word	0x2000b960

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	210f      	movs	r1, #15
 8000cd6:	f06f 0001 	mvn.w	r0, #1
 8000cda:	f000 faa5 	bl	8001228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0x7c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d128      	bne.n	8000d60 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_UART_MspInit+0x80>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d50:	2307      	movs	r3, #7
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x84>)
 8000d5c:	f001 fc12 	bl	8002584 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40004800 	.word	0x40004800
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020c00 	.word	0x40020c00

08000d74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d94:	d141      	bne.n	8000e1a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dae:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4817      	ldr	r0, [pc, #92]	; (8000e28 <HAL_PCD_MspInit+0xb4>)
 8000dcc:	f001 fbda 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4810      	ldr	r0, [pc, #64]	; (8000e28 <HAL_PCD_MspInit+0xb4>)
 8000de6:	f001 fbcd 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6353      	str	r3, [r2, #52]	; 0x34
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_PCD_MspInit+0xb0>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	2036      	movs	r0, #54	; 0x36
 8000e42:	f000 f9f1 	bl	8001228 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e46:	2036      	movs	r0, #54	; 0x36
 8000e48:	f000 fa0a 	bl	8001260 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e50:	4a1e      	ldr	r2, [pc, #120]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6413      	str	r3, [r2, #64]	; 0x40
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_InitTick+0xa0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e64:	f107 0210 	add.w	r2, r7, #16
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fb96 	bl	80035a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000e74:	f002 fb6c 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_InitTick+0xa4>)
 8000e82:	fba2 2303 	umull	r2, r3, r2, r3
 8000e86:	0c9b      	lsrs	r3, r3, #18
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <HAL_InitTick+0xac>)
 8000e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000eae:	f002 ffd1 	bl	8003e54 <HAL_TIM_Base_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d104      	bne.n	8000ec2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <HAL_InitTick+0xa8>)
 8000eba:	f003 f82d 	bl	8003f18 <HAL_TIM_Base_Start_IT>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3730      	adds	r7, #48	; 0x30
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	431bde83 	.word	0x431bde83
 8000ed4:	2000503c 	.word	0x2000503c
 8000ed8:	40001000 	.word	0x40001000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM6_DAC_IRQHandler+0x10>)
 8000f0e:	f003 f87b 	bl	8004008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000503c 	.word	0x2000503c

08000f1c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <ETH_IRQHandler+0x10>)
 8000f22:	f000 fd8d 	bl	8001a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200069d4 	.word	0x200069d4

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d205      	bcs.n	8000f6c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <_sbrk+0x6c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	e009      	b.n	8000f80 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <_sbrk+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	371c      	adds	r7, #28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20080000 	.word	0x20080000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	2000009c 	.word	0x2000009c
 8000f98:	2000b978 	.word	0x2000b978
 8000f9c:	2000b960 	.word	0x2000b960

08000fa0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <SystemInit+0x20>)
 8000fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <SystemInit+0x20>)
 8000fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc8:	480d      	ldr	r0, [pc, #52]	; (8001000 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fca:	490e      	ldr	r1, [pc, #56]	; (8001004 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	; (8001008 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fe0:	4c0b      	ldr	r4, [pc, #44]	; (8001010 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fee:	f7ff ffd7 	bl	8000fa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f012 ffab 	bl	8013f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fb59 	bl	80006ac <main>
  bx  lr    
 8000ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ffc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001008:	0801839c 	.word	0x0801839c
  ldr r2, =_sbss
 800100c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001010:	2000b974 	.word	0x2000b974

08001014 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC_IRQHandler>

08001016 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f8f9 	bl	8001212 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff03 	bl	8000e2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001026:	f7ff fe39 	bl	8000c9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008
 8001054:	20005088 	.word	0x20005088

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20005088 	.word	0x20005088

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008

080010b8 <__NVIC_SetPriorityGrouping>:
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x40>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00
 80010fc:	05fa0000 	.word	0x05fa0000

08001100 <__NVIC_GetPriorityGrouping>:
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <__NVIC_GetPriorityGrouping+0x18>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	0a1b      	lsrs	r3, r3, #8
 800110a:	f003 0307 	and.w	r3, r3, #7
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_EnableIRQ>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db0b      	blt.n	8001146 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 021f 	and.w	r2, r3, #31
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <__NVIC_EnableIRQ+0x38>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	095b      	lsrs	r3, r3, #5
 800113c:	2001      	movs	r0, #1
 800113e:	fa00 f202 	lsl.w	r2, r0, r2
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_SetPriority>:
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	6039      	str	r1, [r7, #0]
 8001162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	2b00      	cmp	r3, #0
 800116a:	db0a      	blt.n	8001182 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	490c      	ldr	r1, [pc, #48]	; (80011a4 <__NVIC_SetPriority+0x4c>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	0112      	lsls	r2, r2, #4
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	440b      	add	r3, r1
 800117c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001180:	e00a      	b.n	8001198 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4908      	ldr	r1, [pc, #32]	; (80011a8 <__NVIC_SetPriority+0x50>)
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	3b04      	subs	r3, #4
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	440b      	add	r3, r1
 8001196:	761a      	strb	r2, [r3, #24]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <NVIC_EncodePriority>:
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	bf28      	it	cs
 80011ca:	2304      	movcs	r3, #4
 80011cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3304      	adds	r3, #4
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d902      	bls.n	80011dc <NVIC_EncodePriority+0x30>
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3b03      	subs	r3, #3
 80011da:	e000      	b.n	80011de <NVIC_EncodePriority+0x32>
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	f04f 32ff 	mov.w	r2, #4294967295
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43da      	mvns	r2, r3
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	401a      	ands	r2, r3
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	f04f 31ff 	mov.w	r1, #4294967295
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	43d9      	mvns	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	4313      	orrs	r3, r2
}
 8001206:	4618      	mov	r0, r3
 8001208:	3724      	adds	r7, #36	; 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff4c 	bl	80010b8 <__NVIC_SetPriorityGrouping>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123a:	f7ff ff61 	bl	8001100 <__NVIC_GetPriorityGrouping>
 800123e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	6978      	ldr	r0, [r7, #20]
 8001246:	f7ff ffb1 	bl	80011ac <NVIC_EncodePriority>
 800124a:	4602      	mov	r2, r0
 800124c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff80 	bl	8001158 <__NVIC_SetPriority>
}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff54 	bl	800111c <__NVIC_EnableIRQ>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800128c:	4ba9      	ldr	r3, [pc, #676]	; (8001534 <HAL_ETH_Init+0x2b8>)
 800128e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e181      	b.n	80015a6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f004 fa42 	bl	8005740 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012bc:	4b9e      	ldr	r3, [pc, #632]	; (8001538 <HAL_ETH_Init+0x2bc>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	4a9d      	ldr	r2, [pc, #628]	; (8001538 <HAL_ETH_Init+0x2bc>)
 80012c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c6:	6453      	str	r3, [r2, #68]	; 0x44
 80012c8:	4b9b      	ldr	r3, [pc, #620]	; (8001538 <HAL_ETH_Init+0x2bc>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012d4:	4b99      	ldr	r3, [pc, #612]	; (800153c <HAL_ETH_Init+0x2c0>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a98      	ldr	r2, [pc, #608]	; (800153c <HAL_ETH_Init+0x2c0>)
 80012da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012de:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012e0:	4b96      	ldr	r3, [pc, #600]	; (800153c <HAL_ETH_Init+0x2c0>)
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	4994      	ldr	r1, [pc, #592]	; (800153c <HAL_ETH_Init+0x2c0>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001306:	f7ff fea7 	bl	8001058 <HAL_GetTick>
 800130a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800130c:	e011      	b.n	8001332 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800130e:	f7ff fea3 	bl	8001058 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800131c:	d909      	bls.n	8001332 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e139      	b.n	80015a6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1e4      	bne.n	800130e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f023 031c 	bic.w	r3, r3, #28
 8001352:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001354:	f002 f8f0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8001358:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4a78      	ldr	r2, [pc, #480]	; (8001540 <HAL_ETH_Init+0x2c4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d908      	bls.n	8001374 <HAL_ETH_Init+0xf8>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a77      	ldr	r2, [pc, #476]	; (8001544 <HAL_ETH_Init+0x2c8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d804      	bhi.n	8001374 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e027      	b.n	80013c4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	4a73      	ldr	r2, [pc, #460]	; (8001544 <HAL_ETH_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d908      	bls.n	800138e <HAL_ETH_Init+0x112>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <HAL_ETH_Init+0x2b8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d204      	bcs.n	800138e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f043 030c 	orr.w	r3, r3, #12
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	e01a      	b.n	80013c4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4a68      	ldr	r2, [pc, #416]	; (8001534 <HAL_ETH_Init+0x2b8>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d303      	bcc.n	800139e <HAL_ETH_Init+0x122>
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4a6b      	ldr	r2, [pc, #428]	; (8001548 <HAL_ETH_Init+0x2cc>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d911      	bls.n	80013c2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4a69      	ldr	r2, [pc, #420]	; (8001548 <HAL_ETH_Init+0x2cc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d908      	bls.n	80013b8 <HAL_ETH_Init+0x13c>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4a68      	ldr	r2, [pc, #416]	; (800154c <HAL_ETH_Init+0x2d0>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d804      	bhi.n	80013b8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e005      	b.n	80013c4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f043 0310 	orr.w	r3, r3, #16
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e000      	b.n	80013c4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80013c2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80013cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 fc17 	bl	8001c06 <HAL_ETH_WritePHYRegister>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80013e2:	6939      	ldr	r1, [r7, #16]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fdcd 	bl	8001f84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0d7      	b.n	80015a6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013f6:	20ff      	movs	r0, #255	; 0xff
 80013f8:	f7ff fe3a 	bl	8001070 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a5 	beq.w	8001550 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001406:	f7ff fe27 	bl	8001058 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	461a      	mov	r2, r3
 8001412:	2101      	movs	r1, #1
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 fb8e 	bl	8001b36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800141a:	f7ff fe1d 	bl	8001058 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d90f      	bls.n	800144c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001430:	6939      	ldr	r1, [r7, #16]
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fda6 	bl	8001f84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e0ac      	b.n	80015a6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0da      	beq.n	800140c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800145a:	2100      	movs	r1, #0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fbd2 	bl	8001c06 <HAL_ETH_WritePHYRegister>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00b      	beq.n	8001480 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800146c:	6939      	ldr	r1, [r7, #16]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fd88 	bl	8001f84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800147c:	2301      	movs	r3, #1
 800147e:	e092      	b.n	80015a6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fdea 	bl	8001058 <HAL_GetTick>
 8001484:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001486:	f107 030c 	add.w	r3, r7, #12
 800148a:	461a      	mov	r2, r3
 800148c:	2101      	movs	r1, #1
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fb51 	bl	8001b36 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001494:	f7ff fde0 	bl	8001058 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d90f      	bls.n	80014c6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014aa:	6939      	ldr	r1, [r7, #16]
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fd69 	bl	8001f84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e06f      	b.n	80015a6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0da      	beq.n	8001486 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	461a      	mov	r2, r3
 80014d6:	2110      	movs	r1, #16
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 fb2c 	bl	8001b36 <HAL_ETH_ReadPHYRegister>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fd4a 	bl	8001f84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014f8:	2301      	movs	r3, #1
 80014fa:	e054      	b.n	80015a6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d004      	beq.n	8001510 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	e002      	b.n	8001516 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	e035      	b.n	8001594 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e030      	b.n	8001594 <HAL_ETH_Init+0x318>
 8001532:	bf00      	nop
 8001534:	03938700 	.word	0x03938700
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	01312cff 	.word	0x01312cff
 8001544:	02160ebf 	.word	0x02160ebf
 8001548:	05f5e0ff 	.word	0x05f5e0ff
 800154c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	08db      	lsrs	r3, r3, #3
 8001556:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	085b      	lsrs	r3, r3, #1
 800155e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001560:	4313      	orrs	r3, r2
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 fb4c 	bl	8001c06 <HAL_ETH_WritePHYRegister>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00b      	beq.n	800158c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 fd02 	bl	8001f84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e00c      	b.n	80015a6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800158c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001590:	f7ff fd6e 	bl	8001070 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fcf4 	bl	8001f84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop

080015b0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_ETH_DMATxDescListInit+0x20>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e052      	b.n	8001676 <HAL_ETH_DMATxDescListInit+0xc6>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e030      	b.n	800164e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	4413      	add	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015fc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	461a      	mov	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d105      	bne.n	8001626 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	429a      	cmp	r2, r3
 800162e:	d208      	bcs.n	8001642 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	015b      	lsls	r3, r3, #5
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	461a      	mov	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	e002      	b.n	8001648 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d3ca      	bcc.n	80015ec <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001660:	440b      	add	r3, r1
 8001662:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001682:	b480      	push	{r7}
 8001684:	b087      	sub	sp, #28
 8001686:	af00      	add	r7, sp, #0
 8001688:	60f8      	str	r0, [r7, #12]
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800169a:	2b01      	cmp	r3, #1
 800169c:	d101      	bne.n	80016a2 <HAL_ETH_DMARxDescListInit+0x20>
 800169e:	2302      	movs	r3, #2
 80016a0:	e056      	b.n	8001750 <HAL_ETH_DMARxDescListInit+0xce>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e034      	b.n	8001728 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	015b      	lsls	r3, r3, #5
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	4413      	add	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016ce:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80016d6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	461a      	mov	r2, r3
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d105      	bne.n	8001700 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	429a      	cmp	r2, r3
 8001708:	d208      	bcs.n	800171c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	e002      	b.n	8001722 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	429a      	cmp	r2, r3
 800172e:	d3c6      	bcc.n	80016be <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6819      	ldr	r1, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	f241 030c 	movw	r3, #4108	; 0x100c
 800173a:	440b      	add	r3, r1
 800173c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	371c      	adds	r7, #28
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <HAL_ETH_TransmitFrame+0x24>
 800177c:	2302      	movs	r3, #2
 800177e:	e0cd      	b.n	800191c <HAL_ETH_TransmitFrame+0x1c0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80017a6:	2301      	movs	r3, #1
 80017a8:	e0b8      	b.n	800191c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da09      	bge.n	80017c8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2212      	movs	r2, #18
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0a9      	b.n	800191c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d915      	bls.n	80017fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_ETH_TransmitFrame+0x1cc>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a9b      	lsrs	r3, r3, #10
 80017dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_ETH_TransmitFrame+0x1cc>)
 80017e2:	fba3 1302 	umull	r1, r3, r3, r2
 80017e6:	0a9b      	lsrs	r3, r3, #10
 80017e8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e001      	b.n	8001802 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80017fe:	2301      	movs	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d11c      	bne.n	8001842 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001816:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001822:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001832:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	461a      	mov	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001840:	e04b      	b.n	80018da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e044      	b.n	80018d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001856:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800186c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001876:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3b01      	subs	r3, #1
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	429a      	cmp	r2, r3
 8001880:	d116      	bne.n	80018b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001890:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4a25      	ldr	r2, [pc, #148]	; (800192c <HAL_ETH_TransmitFrame+0x1d0>)
 8001896:	fb02 f203 	mul.w	r2, r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4413      	add	r3, r2
 800189e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80018a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018ae:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3b6      	bcc.n	8001848 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	f241 0314 	movw	r3, #4116	; 0x1014
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00d      	beq.n	800190a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80018f6:	4413      	add	r3, r2
 80018f8:	2204      	movs	r2, #4
 80018fa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f241 0304 	movw	r3, #4100	; 0x1004
 8001904:	4413      	add	r3, r2
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	371c      	adds	r7, #28
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	ac02b00b 	.word	0xac02b00b
 800192c:	fffffa0c 	.word	0xfffffa0c

08001930 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001946:	2302      	movs	r3, #2
 8001948:	e074      	b.n	8001a34 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800195a:	e05a      	b.n	8001a12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	3301      	adds	r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d10d      	bne.n	800198e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
 800198c:	e041      	b.n	8001a12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001998:	2b00      	cmp	r3, #0
 800199a:	d10b      	bne.n	80019b4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
 80019b2:	e02e      	b.n	8001a12 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d103      	bne.n	80019d6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	0c1b      	lsrs	r3, r3, #16
 80019de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019e2:	1f1a      	subs	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e010      	b.n	8001a34 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db02      	blt.n	8001a22 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d99c      	bls.n	800195c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a50:	4413      	add	r3, r2
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a58:	2b40      	cmp	r3, #64	; 0x40
 8001a5a:	d112      	bne.n	8001a82 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f003 ff2f 	bl	80058c0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a6a:	4413      	add	r3, r2
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a80:	e01b      	b.n	8001aba <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a8a:	4413      	add	r3, r2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d111      	bne.n	8001aba <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f839 	bl	8001b0e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f241 0314 	movw	r3, #4116	; 0x1014
 8001aa4:	4413      	add	r3, r2
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ac8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ad2:	4413      	add	r3, r2
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ade:	d112      	bne.n	8001b06 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 f81e 	bl	8001b22 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	f241 0314 	movw	r3, #4116	; 0x1014
 8001aee:	4413      	add	r3, r2
 8001af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001af4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	607a      	str	r2, [r7, #4]
 8001b42:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b82      	cmp	r3, #130	; 0x82
 8001b56:	d101      	bne.n	8001b5c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e050      	b.n	8001bfe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2282      	movs	r2, #130	; 0x82
 8001b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 031c 	and.w	r3, r3, #28
 8001b72:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8a1b      	ldrh	r3, [r3, #16]
 8001b78:	02db      	lsls	r3, r3, #11
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f023 0302 	bic.w	r3, r3, #2
 8001b96:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba8:	f7ff fa56 	bl	8001058 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bae:	e015      	b.n	8001bdc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bb0:	f7ff fa52 	bl	8001058 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bbe:	d309      	bcc.n	8001bd4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e014      	b.n	8001bfe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e4      	bne.n	8001bb0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b42      	cmp	r3, #66	; 0x42
 8001c26:	d101      	bne.n	8001c2c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e04e      	b.n	8001cca <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2242      	movs	r2, #66	; 0x42
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 031c 	and.w	r3, r3, #28
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8a1b      	ldrh	r3, [r3, #16]
 8001c48:	02db      	lsls	r3, r3, #11
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c52:	897b      	ldrh	r3, [r7, #10]
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f043 0302 	orr.w	r3, r3, #2
 8001c66:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c82:	f7ff f9e9 	bl	8001058 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c88:	e015      	b.n	8001cb6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c8a:	f7ff f9e5 	bl	8001058 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d309      	bcc.n	8001cae <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e00d      	b.n	8001cca <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e4      	bne.n	8001c8a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ETH_Start+0x16>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e01f      	b.n	8001d28 <HAL_ETH_Start+0x56>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fb45 	bl	8002388 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 fb7c 	bl	80023fc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fc13 	bl	8002530 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fbb0 	bl	8002470 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fbdd 	bl	80024d0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_ETH_Stop+0x16>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e01f      	b.n	8001d86 <HAL_ETH_Stop+0x56>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2202      	movs	r2, #2
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fba2 	bl	80024a0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fbcf 	bl	8002500 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fb67 	bl	8002436 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fbe1 	bl	8002530 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fb27 	bl	80023c2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ETH_ConfigMAC+0x1c>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0e4      	b.n	8001f76 <HAL_ETH_ConfigMAC+0x1e6>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80b1 	beq.w	8001f26 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <HAL_ETH_ConfigMAC+0x1f0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ddc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001de2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001de8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001dee:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001df4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001dfa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001e00:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001e06:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001e0c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001e12:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001e18:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001e1e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f7ff f91a 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e4c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e52:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e58:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e5e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e64:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e76:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e78:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f7ff f8f4 	bl	8001070 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e98:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ea2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001ec0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001ec6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001ecc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001ed2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001ed8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f7ff f8bd 	bl	8001070 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff f8aa 	bl	8001070 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	61da      	str	r2, [r3, #28]
 8001f24:	e01e      	b.n	8001f64 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001f34:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f7ff f88a 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	ff20810f 	.word	0xff20810f

08001f84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0b0      	sub	sp, #192	; 0xc0
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fa0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fce:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd0:	e001      	b.n	8001fd6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fda:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ff0:	2340      	movs	r3, #64	; 0x40
 8001ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800202a:	2300      	movs	r3, #0
 800202c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002058:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205c:	4bab      	ldr	r3, [pc, #684]	; (800230c <ETH_MACDMAConfig+0x388>)
 800205e:	4013      	ands	r3, r2
 8002060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002064:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002068:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800206a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800206c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800206e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002070:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002076:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002078:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800207a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800207c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800207e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002084:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002088:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800208a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800208c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800208e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002090:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002094:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002098:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800209a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7fe ffd9 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80020ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020cc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80020ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80020d0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80020d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80020d6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80020d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80020dc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80020de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80020e2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80020e8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020f4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020f6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002102:	2001      	movs	r0, #1
 8002104:	f7fe ffb4 	bl	8001070 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002110:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800211a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002124:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002134:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002138:	4013      	ands	r3, r2
 800213a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800213e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002142:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002144:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002148:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800214a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800214e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002154:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800215a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800215c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002160:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002162:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002174:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002180:	2001      	movs	r0, #1
 8002182:	f7fe ff75 	bl	8001070 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800218e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002190:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002194:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7fe ff60 	bl	8001070 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80021c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021cc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80021de:	2304      	movs	r3, #4
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80021fe:	2300      	movs	r3, #0
 8002200:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002202:	2300      	movs	r3, #0
 8002204:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	f241 0318 	movw	r3, #4120	; 0x1018
 800220e:	4413      	add	r3, r2
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002216:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <ETH_MACDMAConfig+0x38c>)
 800221c:	4013      	ands	r3, r2
 800221e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002222:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002224:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002226:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002228:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800222a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800222c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800222e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002230:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002232:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002234:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002236:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002238:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800223a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800223e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002242:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002244:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f241 0318 	movw	r3, #4120	; 0x1018
 8002256:	4413      	add	r3, r2
 8002258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	f241 0318 	movw	r3, #4120	; 0x1018
 8002266:	4413      	add	r3, r2
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800226e:	2001      	movs	r0, #1
 8002270:	f7fe fefe 	bl	8001070 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	f241 0318 	movw	r3, #4120	; 0x1018
 800227c:	4413      	add	r3, r2
 800227e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002282:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002288:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800228c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800228e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002290:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002294:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002298:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800229a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800229c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800229e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80022a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7fe fed7 	bl	8001070 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10d      	bne.n	80022f4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f241 031c 	movw	r3, #4124	; 0x101c
 80022e0:	4413      	add	r3, r2
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6811      	ldr	r1, [r2, #0]
 80022e8:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <ETH_MACDMAConfig+0x390>)
 80022ea:	431a      	orrs	r2, r3
 80022ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80022f0:	440b      	add	r3, r1
 80022f2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	461a      	mov	r2, r3
 80022fa:	2100      	movs	r1, #0
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f80b 	bl	8002318 <ETH_MACAddressConfig>
}
 8002302:	bf00      	nop
 8002304:	37c0      	adds	r7, #192	; 0xc0
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	ff20810f 	.word	0xff20810f
 8002310:	f8de3f23 	.word	0xf8de3f23
 8002314:	00010040 	.word	0x00010040

08002318 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3305      	adds	r3, #5
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	3204      	adds	r2, #4
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	4b11      	ldr	r3, [pc, #68]	; (8002380 <ETH_MACAddressConfig+0x68>)
 800233a:	4413      	add	r3, r2
 800233c:	461a      	mov	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3303      	adds	r3, #3
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	061a      	lsls	r2, r3, #24
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3302      	adds	r3, #2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	4313      	orrs	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <ETH_MACAddressConfig+0x6c>)
 800236a:	4413      	add	r3, r2
 800236c:	461a      	mov	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	6013      	str	r3, [r2, #0]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40028040 	.word	0x40028040
 8002384:	40028044 	.word	0x40028044

08002388 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7fe fe5f 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	601a      	str	r2, [r3, #0]
}
 80023ba:	bf00      	nop
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b084      	sub	sp, #16
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7fe fe42 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0204 	orr.w	r2, r2, #4
 8002416:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002420:	2001      	movs	r0, #1
 8002422:	f7fe fe25 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	601a      	str	r2, [r3, #0]
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0204 	bic.w	r2, r2, #4
 8002450:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800245a:	2001      	movs	r0, #1
 800245c:	f7fe fe08 	bl	8001070 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002480:	4413      	add	r3, r2
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6811      	ldr	r1, [r2, #0]
 8002488:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800248c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002490:	440b      	add	r3, r1
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	f241 0318 	movw	r3, #4120	; 0x1018
 80024b0:	4413      	add	r3, r2
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6811      	ldr	r1, [r2, #0]
 80024b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80024c0:	440b      	add	r3, r1
 80024c2:	601a      	str	r2, [r3, #0]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6811      	ldr	r1, [r2, #0]
 80024e8:	f043 0202 	orr.w	r2, r3, #2
 80024ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80024f0:	440b      	add	r3, r1
 80024f2:	601a      	str	r2, [r3, #0]
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002510:	4413      	add	r3, r2
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6811      	ldr	r1, [r2, #0]
 8002518:	f023 0202 	bic.w	r2, r3, #2
 800251c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002520:	440b      	add	r3, r1
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f241 0318 	movw	r3, #4120	; 0x1018
 8002544:	4413      	add	r3, r2
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6811      	ldr	r1, [r2, #0]
 800254c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002550:	f241 0318 	movw	r3, #4120	; 0x1018
 8002554:	440b      	add	r3, r1
 8002556:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002560:	4413      	add	r3, r2
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002566:	2001      	movs	r0, #1
 8002568:	f7fe fd82 	bl	8001070 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	f241 0318 	movw	r3, #4120	; 0x1018
 8002576:	440b      	add	r3, r1
 8002578:	601a      	str	r2, [r3, #0]
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	e175      	b.n	8002890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f040 8164 	bne.w	800288a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d00b      	beq.n	80025e2 <HAL_GPIO_Init+0x5e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d007      	beq.n	80025e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d6:	2b11      	cmp	r3, #17
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b12      	cmp	r3, #18
 80025e0:	d130      	bne.n	8002644 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4013      	ands	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0201 	and.w	r2, r3, #1
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x100>
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b12      	cmp	r3, #18
 8002682:	d123      	bne.n	80026cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	08da      	lsrs	r2, r3, #3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3208      	adds	r2, #8
 800268c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	220f      	movs	r2, #15
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	08da      	lsrs	r2, r3, #3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3208      	adds	r2, #8
 80026c6:	69b9      	ldr	r1, [r7, #24]
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0203 	and.w	r2, r3, #3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80be 	beq.w	800288a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <HAL_GPIO_Init+0x324>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	4a65      	ldr	r2, [pc, #404]	; (80028a8 <HAL_GPIO_Init+0x324>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	6453      	str	r3, [r2, #68]	; 0x44
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_GPIO_Init+0x324>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002726:	4a61      	ldr	r2, [pc, #388]	; (80028ac <HAL_GPIO_Init+0x328>)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	089b      	lsrs	r3, r3, #2
 800272c:	3302      	adds	r3, #2
 800272e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	220f      	movs	r2, #15
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d037      	beq.n	80027c2 <HAL_GPIO_Init+0x23e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d031      	beq.n	80027be <HAL_GPIO_Init+0x23a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a56      	ldr	r2, [pc, #344]	; (80028b8 <HAL_GPIO_Init+0x334>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d02b      	beq.n	80027ba <HAL_GPIO_Init+0x236>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x338>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d025      	beq.n	80027b6 <HAL_GPIO_Init+0x232>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a54      	ldr	r2, [pc, #336]	; (80028c0 <HAL_GPIO_Init+0x33c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d01f      	beq.n	80027b2 <HAL_GPIO_Init+0x22e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a53      	ldr	r2, [pc, #332]	; (80028c4 <HAL_GPIO_Init+0x340>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d019      	beq.n	80027ae <HAL_GPIO_Init+0x22a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_GPIO_Init+0x344>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d013      	beq.n	80027aa <HAL_GPIO_Init+0x226>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a51      	ldr	r2, [pc, #324]	; (80028cc <HAL_GPIO_Init+0x348>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00d      	beq.n	80027a6 <HAL_GPIO_Init+0x222>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a50      	ldr	r2, [pc, #320]	; (80028d0 <HAL_GPIO_Init+0x34c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <HAL_GPIO_Init+0x21e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4f      	ldr	r2, [pc, #316]	; (80028d4 <HAL_GPIO_Init+0x350>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_GPIO_Init+0x21a>
 800279a:	2309      	movs	r3, #9
 800279c:	e012      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 800279e:	230a      	movs	r3, #10
 80027a0:	e010      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027a2:	2308      	movs	r3, #8
 80027a4:	e00e      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027a6:	2307      	movs	r3, #7
 80027a8:	e00c      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027aa:	2306      	movs	r3, #6
 80027ac:	e00a      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027ae:	2305      	movs	r3, #5
 80027b0:	e008      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027b2:	2304      	movs	r3, #4
 80027b4:	e006      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027b6:	2303      	movs	r3, #3
 80027b8:	e004      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e002      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_GPIO_Init+0x240>
 80027c2:	2300      	movs	r3, #0
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	f002 0203 	and.w	r2, r2, #3
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	4093      	lsls	r3, r2
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027d4:	4935      	ldr	r1, [pc, #212]	; (80028ac <HAL_GPIO_Init+0x328>)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	089b      	lsrs	r3, r3, #2
 80027da:	3302      	adds	r3, #2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <HAL_GPIO_Init+0x354>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_GPIO_Init+0x354>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002830:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800285a:	4a1f      	ldr	r2, [pc, #124]	; (80028d8 <HAL_GPIO_Init+0x354>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002860:	4b1d      	ldr	r3, [pc, #116]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_GPIO_Init+0x354>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3301      	adds	r3, #1
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	f67f ae86 	bls.w	80025a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40020000 	.word	0x40020000
 80028b4:	40020400 	.word	0x40020400
 80028b8:	40020800 	.word	0x40020800
 80028bc:	40020c00 	.word	0x40020c00
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40021400 	.word	0x40021400
 80028c8:	40021800 	.word	0x40021800
 80028cc:	40021c00 	.word	0x40021c00
 80028d0:	40022000 	.word	0x40022000
 80028d4:	40022400 	.word	0x40022400
 80028d8:	40013c00 	.word	0x40013c00

080028dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
 80028e8:	4613      	mov	r3, r2
 80028ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028ec:	787b      	ldrb	r3, [r7, #1]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028f8:	e003      	b.n	8002902 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	041a      	lsls	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800290e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002910:	b08f      	sub	sp, #60	; 0x3c
 8002912:	af0a      	add	r7, sp, #40	; 0x28
 8002914:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e116      	b.n	8002b4e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fa1a 	bl	8000d74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2203      	movs	r2, #3
 8002944:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f002 fb2c 	bl	8004fbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	603b      	str	r3, [r7, #0]
 800296a:	687e      	ldr	r6, [r7, #4]
 800296c:	466d      	mov	r5, sp
 800296e:	f106 0410 	add.w	r4, r6, #16
 8002972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002978:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800297a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800297e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002982:	1d33      	adds	r3, r6, #4
 8002984:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002986:	6838      	ldr	r0, [r7, #0]
 8002988:	f002 fac0 	bl	8004f0c <USB_CoreInit>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2202      	movs	r2, #2
 8002996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0d7      	b.n	8002b4e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 fb1a 	bl	8004fde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	73fb      	strb	r3, [r7, #15]
 80029ae:	e04a      	b.n	8002a46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b0:	7bfa      	ldrb	r2, [r7, #15]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	333d      	adds	r3, #61	; 0x3d
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	333c      	adds	r3, #60	; 0x3c
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	b298      	uxth	r0, r3
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3342      	adds	r3, #66	; 0x42
 80029ec:	4602      	mov	r2, r0
 80029ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333f      	adds	r3, #63	; 0x3f
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3344      	adds	r3, #68	; 0x44
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3350      	adds	r3, #80	; 0x50
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	3301      	adds	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3af      	bcc.n	80029b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
 8002a54:	e044      	b.n	8002ae0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a56:	7bfa      	ldrb	r2, [r7, #15]
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a82:	7bfa      	ldrb	r2, [r7, #15]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3301      	adds	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3b5      	bcc.n	8002a56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	687e      	ldr	r6, [r7, #4]
 8002af2:	466d      	mov	r5, sp
 8002af4:	f106 0410 	add.w	r4, r6, #16
 8002af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002afc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002afe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b04:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b08:	1d33      	adds	r3, r6, #4
 8002b0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b0c:	6838      	ldr	r0, [r7, #0]
 8002b0e:	f002 fa91 	bl	8005034 <USB_DevInit>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e014      	b.n	8002b4e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f80b 	bl	8002b58 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fc43 	bl	80053d2 <USB_DevDisconnect>

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002b58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_PCDEx_ActivateLPM+0x44>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	10000003 	.word	0x10000003

08002ba0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bce:	f7fe fa43 	bl	8001058 <HAL_GetTick>
 8002bd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bd4:	e009      	b.n	8002bea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002bd6:	f7fe fa3f 	bl	8001058 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be4:	d901      	bls.n	8002bea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e022      	b.n	8002c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c04:	f7fe fa28 	bl	8001058 <HAL_GetTick>
 8002c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c0a:	e009      	b.n	8002c20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0c:	f7fe fa24 	bl	8001058 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1a:	d901      	bls.n	8002c20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e007      	b.n	8002c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40007000 	.word	0x40007000

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e29b      	b.n	800318e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 8087 	beq.w	8002d72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c64:	4b96      	ldr	r3, [pc, #600]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00c      	beq.n	8002c8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c70:	4b93      	ldr	r3, [pc, #588]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 030c 	and.w	r3, r3, #12
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d112      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62>
 8002c7c:	4b90      	ldr	r3, [pc, #576]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c88:	d10b      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8a:	4b8d      	ldr	r3, [pc, #564]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d06c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x130>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d168      	bne.n	8002d70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e275      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x7a>
 8002cac:	4b84      	ldr	r3, [pc, #528]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a83      	ldr	r2, [pc, #524]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e02e      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x9c>
 8002cc2:	4b7f      	ldr	r3, [pc, #508]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a7b      	ldr	r2, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0xc0>
 8002ce6:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a75      	ldr	r2, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a72      	ldr	r2, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xd8>
 8002d00:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b6c      	ldr	r3, [pc, #432]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a6b      	ldr	r2, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f99a 	bl	8001058 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe f996 	bl	8001058 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e229      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe8>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe f986 	bl	8001058 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d50:	f7fe f982 	bl	8001058 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e215      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x110>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d069      	beq.n	8002e52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x190>
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b47      	ldr	r3, [pc, #284]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x17a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1e9      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	493d      	ldr	r1, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e040      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d023      	beq.n	8002e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe f938 	bl	8001058 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe f934 	bl	8001058 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1c7      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4929      	ldr	r1, [pc, #164]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a26      	ldr	r2, [pc, #152]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2c:	f7fe f914 	bl	8001058 <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e34:	f7fe f910 	bl	8001058 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e1a3      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1f0      	bne.n	8002e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d038      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e6a:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e72:	f7fe f8f1 	bl	8001058 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e7a:	f7fe f8ed 	bl	8001058 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e180      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x23a>
 8002e98:	e01a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f8d7 	bl	8001058 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eae:	f7fe f8d3 	bl	8001058 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d903      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e166      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
 8002ec0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec4:	4b92      	ldr	r3, [pc, #584]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1ee      	bne.n	8002eae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a4 	beq.w	8003026 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b8c      	ldr	r3, [pc, #560]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b89      	ldr	r3, [pc, #548]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a88      	ldr	r2, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ef6:	4b86      	ldr	r3, [pc, #536]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <HAL_RCC_OscConfig+0x4d4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x4d4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x4d4>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7fe f89b 	bl	8001058 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7fe f897 	bl	8001058 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e12a      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f38:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCC_OscConfig+0x4d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x31a>
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x33c>
 8002f62:	4b6b      	ldr	r3, [pc, #428]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	4a6a      	ldr	r2, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6e:	4b68      	ldr	r3, [pc, #416]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a67      	ldr	r2, [pc, #412]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x35e>
 8002f84:	4b62      	ldr	r3, [pc, #392]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	4a61      	ldr	r2, [pc, #388]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f90:	4b5f      	ldr	r3, [pc, #380]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	4a5e      	ldr	r2, [pc, #376]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
 8002f9e:	4b5c      	ldr	r3, [pc, #368]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a5b      	ldr	r2, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b59      	ldr	r3, [pc, #356]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a58      	ldr	r2, [pc, #352]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f84b 	bl	8001058 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fe f847 	bl	8001058 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0d8      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x386>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fea:	f7fe f835 	bl	8001058 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f831 	bl	8001058 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0c2      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b41      	ldr	r3, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b3d      	ldr	r3, [pc, #244]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80ae 	beq.w	800318c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	4b37      	ldr	r3, [pc, #220]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d06d      	beq.n	8003118 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d14b      	bne.n	80030dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a31      	ldr	r2, [pc, #196]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe f802 	bl	8001058 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fd fffe 	bl	8001058 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e091      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69da      	ldr	r2, [r3, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	431a      	orrs	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a0:	071b      	lsls	r3, r3, #28
 80030a2:	491b      	ldr	r1, [pc, #108]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a8:	4b19      	ldr	r3, [pc, #100]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a18      	ldr	r2, [pc, #96]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fd ffd0 	bl	8001058 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7fd ffcc 	bl	8001058 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e05f      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f0      	beq.n	80030bc <HAL_RCC_OscConfig+0x47c>
 80030da:	e057      	b.n	800318c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fd ffb6 	bl	8001058 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fd ffb2 	bl	8001058 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e045      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b03      	ldr	r3, [pc, #12]	; (8003110 <HAL_RCC_OscConfig+0x4d0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4b0>
 800310e:	e03d      	b.n	800318c <HAL_RCC_OscConfig+0x54c>
 8003110:	40023800 	.word	0x40023800
 8003114:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003118:	4b1f      	ldr	r3, [pc, #124]	; (8003198 <HAL_RCC_OscConfig+0x558>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d030      	beq.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d129      	bne.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d122      	bne.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d119      	bne.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d10f      	bne.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0d0      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b4:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 030f 	and.w	r3, r3, #15
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d910      	bls.n	80031e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 020f 	bic.w	r2, r3, #15
 80031ca:	4965      	ldr	r1, [pc, #404]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d2:	4b63      	ldr	r3, [pc, #396]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0b8      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d020      	beq.n	8003232 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031fc:	4b59      	ldr	r3, [pc, #356]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	4a58      	ldr	r2, [pc, #352]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003206:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003214:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	4a52      	ldr	r2, [pc, #328]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800321a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800321e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003220:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	494d      	ldr	r1, [pc, #308]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d040      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d107      	bne.n	8003256 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d115      	bne.n	800327e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07f      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325e:	4b41      	ldr	r3, [pc, #260]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e073      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06b      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 0203 	bic.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4936      	ldr	r1, [pc, #216]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	4313      	orrs	r3, r2
 800328e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003290:	f7fd fee2 	bl	8001058 <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003296:	e00a      	b.n	80032ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003298:	f7fd fede 	bl	8001058 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e053      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 020c 	and.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	429a      	cmp	r2, r3
 80032be:	d1eb      	bne.n	8003298 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c0:	4b27      	ldr	r3, [pc, #156]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 030f 	and.w	r3, r3, #15
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d210      	bcs.n	80032f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 020f 	bic.w	r2, r3, #15
 80032d6:	4922      	ldr	r1, [pc, #136]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e032      	b.n	8003356 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fc:	4b19      	ldr	r3, [pc, #100]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	4916      	ldr	r1, [pc, #88]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331a:	4b12      	ldr	r3, [pc, #72]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	490e      	ldr	r1, [pc, #56]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 800332a:	4313      	orrs	r3, r2
 800332c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332e:	f000 f821 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8003332:	4602      	mov	r2, r0
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	091b      	lsrs	r3, r3, #4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	490a      	ldr	r1, [pc, #40]	; (8003368 <HAL_RCC_ClockConfig+0x1cc>)
 8003340:	5ccb      	ldrb	r3, [r1, r3]
 8003342:	fa22 f303 	lsr.w	r3, r2, r3
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCC_ClockConfig+0x1d0>)
 8003348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1d4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fd6c 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023c00 	.word	0x40023c00
 8003364:	40023800 	.word	0x40023800
 8003368:	08018104 	.word	0x08018104
 800336c:	20000000 	.word	0x20000000
 8003370:	20000004 	.word	0x20000004

08003374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800338c:	4b67      	ldr	r3, [pc, #412]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d00d      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003398:	2b08      	cmp	r3, #8
 800339a:	f200 80bd 	bhi.w	8003518 <HAL_RCC_GetSysClockFreq+0x1a4>
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x34>
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x3a>
 80033a6:	e0b7      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033aa:	60bb      	str	r3, [r7, #8]
      break;
 80033ac:	e0b7      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033b0:	60bb      	str	r3, [r7, #8]
      break;
 80033b2:	e0b4      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033b4:	4b5d      	ldr	r3, [pc, #372]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d04d      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ca:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	099b      	lsrs	r3, r3, #6
 80033d0:	461a      	mov	r2, r3
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	ea02 0800 	and.w	r8, r2, r0
 80033e2:	ea03 0901 	and.w	r9, r3, r1
 80033e6:	4640      	mov	r0, r8
 80033e8:	4649      	mov	r1, r9
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	014b      	lsls	r3, r1, #5
 80033f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f8:	0142      	lsls	r2, r0, #5
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	ebb0 0008 	subs.w	r0, r0, r8
 8003402:	eb61 0109 	sbc.w	r1, r1, r9
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003414:	0182      	lsls	r2, r0, #6
 8003416:	1a12      	subs	r2, r2, r0
 8003418:	eb63 0301 	sbc.w	r3, r3, r1
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	00d9      	lsls	r1, r3, #3
 8003426:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800342a:	00d0      	lsls	r0, r2, #3
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	eb12 0208 	adds.w	r2, r2, r8
 8003434:	eb43 0309 	adc.w	r3, r3, r9
 8003438:	f04f 0000 	mov.w	r0, #0
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	0259      	lsls	r1, r3, #9
 8003442:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003446:	0250      	lsls	r0, r2, #9
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	461a      	mov	r2, r3
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	f7fc ff42 	bl	80002e0 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e04a      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b31      	ldr	r3, [pc, #196]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	461a      	mov	r2, r3
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003476:	f04f 0100 	mov.w	r1, #0
 800347a:	ea02 0400 	and.w	r4, r2, r0
 800347e:	ea03 0501 	and.w	r5, r3, r1
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	014b      	lsls	r3, r1, #5
 8003490:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003494:	0142      	lsls	r2, r0, #5
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	1b00      	subs	r0, r0, r4
 800349c:	eb61 0105 	sbc.w	r1, r1, r5
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	018b      	lsls	r3, r1, #6
 80034aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ae:	0182      	lsls	r2, r0, #6
 80034b0:	1a12      	subs	r2, r2, r0
 80034b2:	eb63 0301 	sbc.w	r3, r3, r1
 80034b6:	f04f 0000 	mov.w	r0, #0
 80034ba:	f04f 0100 	mov.w	r1, #0
 80034be:	00d9      	lsls	r1, r3, #3
 80034c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034c4:	00d0      	lsls	r0, r2, #3
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	1912      	adds	r2, r2, r4
 80034cc:	eb45 0303 	adc.w	r3, r5, r3
 80034d0:	f04f 0000 	mov.w	r0, #0
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	0299      	lsls	r1, r3, #10
 80034da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034de:	0290      	lsls	r0, r2, #10
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	f7fc fef6 	bl	80002e0 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	60bb      	str	r3, [r7, #8]
      break;
 8003516:	e002      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800351a:	60bb      	str	r3, [r7, #8]
      break;
 800351c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351e:	68bb      	ldr	r3, [r7, #8]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	00f42400 	.word	0x00f42400
 8003534:	007a1200 	.word	0x007a1200

08003538 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003554:	f7ff fff0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	08018114 	.word	0x08018114

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800357c:	f7ff ffdc 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0b5b      	lsrs	r3, r3, #13
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	08018114 	.word	0x08018114

080035a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	220f      	movs	r2, #15
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0203 	and.w	r2, r3, #3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	08db      	lsrs	r3, r3, #3
 80035da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <HAL_RCC_GetClockConfig+0x60>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 020f 	and.w	r2, r3, #15
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	601a      	str	r2, [r3, #0]
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800
 8003600:	40023c00 	.word	0x40023c00

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d012      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800362c:	4b69      	ldr	r3, [pc, #420]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a68      	ldr	r2, [pc, #416]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	4b66      	ldr	r3, [pc, #408]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003640:	4964      	ldr	r1, [pc, #400]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	4959      	ldr	r1, [pc, #356]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d017      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800369a:	4b4e      	ldr	r3, [pc, #312]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	494a      	ldr	r1, [pc, #296]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b8:	d101      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80036d6:	2301      	movs	r3, #1
 80036d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 808b 	beq.w	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b3a      	ldr	r3, [pc, #232]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	4a39      	ldr	r2, [pc, #228]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6413      	str	r3, [r2, #64]	; 0x40
 80036f4:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003700:	4b35      	ldr	r3, [pc, #212]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a34      	ldr	r2, [pc, #208]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fd fca4 	bl	8001058 <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fd fca0 	bl	8001058 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e38f      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003726:	4b2c      	ldr	r3, [pc, #176]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d035      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	429a      	cmp	r2, r3
 800374e:	d02e      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003766:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a1a      	ldr	r2, [pc, #104]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003772:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d114      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fd fc68 	bl	8001058 <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800378c:	f7fd fc64 	bl	8001058 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	; 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e351      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0ee      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ba:	d111      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80037ca:	400b      	ands	r3, r1
 80037cc:	4901      	ldr	r1, [pc, #4]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
 80037d2:	e00b      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40007000 	.word	0x40007000
 80037dc:	0ffffcff 	.word	0x0ffffcff
 80037e0:	4bb3      	ldr	r3, [pc, #716]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4ab2      	ldr	r2, [pc, #712]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ea:	6093      	str	r3, [r2, #8]
 80037ec:	4bb0      	ldr	r3, [pc, #704]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f8:	49ad      	ldr	r1, [pc, #692]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d010      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800380a:	4ba9      	ldr	r3, [pc, #676]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800380c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003810:	4aa7      	ldr	r2, [pc, #668]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800381a:	4ba5      	ldr	r3, [pc, #660]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	49a2      	ldr	r1, [pc, #648]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003838:	4b9d      	ldr	r3, [pc, #628]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003846:	499a      	ldr	r1, [pc, #616]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800385a:	4b95      	ldr	r3, [pc, #596]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003868:	4991      	ldr	r1, [pc, #580]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800387c:	4b8c      	ldr	r3, [pc, #560]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800388a:	4989      	ldr	r1, [pc, #548]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800389e:	4b84      	ldr	r3, [pc, #528]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4980      	ldr	r1, [pc, #512]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038c0:	4b7b      	ldr	r3, [pc, #492]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f023 0203 	bic.w	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4978      	ldr	r1, [pc, #480]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038e2:	4b73      	ldr	r3, [pc, #460]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f023 020c 	bic.w	r2, r3, #12
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f0:	496f      	ldr	r1, [pc, #444]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003904:	4b6a      	ldr	r3, [pc, #424]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	4967      	ldr	r1, [pc, #412]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003934:	495e      	ldr	r1, [pc, #376]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	4956      	ldr	r1, [pc, #344]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800398c:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	4945      	ldr	r1, [pc, #276]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80039ae:	4b40      	ldr	r3, [pc, #256]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039bc:	493c      	ldr	r1, [pc, #240]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039d0:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	4934      	ldr	r1, [pc, #208]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d011      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039f2:	4b2f      	ldr	r3, [pc, #188]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a00:	492b      	ldr	r1, [pc, #172]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a10:	d101      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a22:	2301      	movs	r3, #1
 8003a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a40:	491b      	ldr	r1, [pc, #108]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a64:	4912      	ldr	r1, [pc, #72]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00b      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a78:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00f      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	e002      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	4986      	ldr	r1, [pc, #536]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003ac8:	4b81      	ldr	r3, [pc, #516]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ace:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad8:	497d      	ldr	r1, [pc, #500]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d006      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80d6 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003af4:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b00:	f7fd faaa 	bl	8001058 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b08:	f7fd faa6 	bl	8001058 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e195      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d021      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d11d      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b3a:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b40:	0c1b      	lsrs	r3, r3, #16
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4e:	0e1b      	lsrs	r3, r3, #24
 8003b50:	f003 030f 	and.w	r3, r3, #15
 8003b54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	019a      	lsls	r2, r3, #6
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	431a      	orrs	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	061b      	lsls	r3, r3, #24
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	071b      	lsls	r3, r3, #28
 8003b6e:	4958      	ldr	r1, [pc, #352]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02e      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba0:	d129      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	0f1b      	lsrs	r3, r3, #28
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	019a      	lsls	r2, r3, #6
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	061b      	lsls	r3, r3, #24
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	071b      	lsls	r3, r3, #28
 8003bd6:	493e      	ldr	r1, [pc, #248]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003bde:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	f023 021f 	bic.w	r2, r3, #31
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	3b01      	subs	r3, #1
 8003bee:	4938      	ldr	r1, [pc, #224]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d01d      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c02:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c08:	0e1b      	lsrs	r3, r3, #24
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c10:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c16:	0f1b      	lsrs	r3, r3, #28
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	019a      	lsls	r2, r3, #6
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	071b      	lsls	r3, r3, #28
 8003c36:	4926      	ldr	r1, [pc, #152]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	019a      	lsls	r2, r3, #6
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	071b      	lsls	r3, r3, #28
 8003c66:	491a      	ldr	r1, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c6e:	4b18      	ldr	r3, [pc, #96]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a17      	ldr	r2, [pc, #92]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7a:	f7fd f9ed 	bl	8001058 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c80:	e008      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c82:	f7fd f9e9 	bl	8001058 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b64      	cmp	r3, #100	; 0x64
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e0d8      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	f040 80ce 	bne.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd f9d0 	bl	8001058 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cbc:	f7fd f9cc 	bl	8001058 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d904      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e0bb      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cce:	bf00      	nop
 8003cd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d0ec      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d02e      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d12a      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d0a:	4b51      	ldr	r3, [pc, #324]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d18:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	0f1b      	lsrs	r3, r3, #28
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	019a      	lsls	r2, r3, #6
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	041b      	lsls	r3, r3, #16
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	061b      	lsls	r3, r3, #24
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	071b      	lsls	r3, r3, #28
 8003d3e:	4944      	ldr	r1, [pc, #272]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d46:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	3b01      	subs	r3, #1
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	493d      	ldr	r1, [pc, #244]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d022      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d74:	d11d      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7c:	0e1b      	lsrs	r3, r3, #24
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d84:	4b32      	ldr	r3, [pc, #200]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	0f1b      	lsrs	r3, r3, #28
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	019a      	lsls	r2, r3, #6
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	041b      	lsls	r3, r3, #16
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	071b      	lsls	r3, r3, #28
 8003daa:	4929      	ldr	r1, [pc, #164]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d028      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dcc:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	019a      	lsls	r2, r3, #6
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	431a      	orrs	r2, r3
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	071b      	lsls	r3, r3, #28
 8003df2:	4917      	ldr	r1, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	4911      	ldr	r1, [pc, #68]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1c:	f7fd f91c 	bl	8001058 <HAL_GetTick>
 8003e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e24:	f7fd f918 	bl	8001058 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e007      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e42:	d1ef      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e049      	b.n	8003efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f841 	bl	8003f02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 fa00 	bl	8004298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e054      	b.n	8003fda <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d022      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5a:	d01d      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a22      	ldr	r2, [pc, #136]	; (8003fec <HAL_TIM_Base_Start_IT+0xd4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a21      	ldr	r2, [pc, #132]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1f      	ldr	r2, [pc, #124]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00e      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1e      	ldr	r2, [pc, #120]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a1c      	ldr	r2, [pc, #112]	; (8003ffc <HAL_TIM_Base_Start_IT+0xe4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x80>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d115      	bne.n	8003fc4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <HAL_TIM_Base_Start_IT+0xec>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d015      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0xbe>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb0:	d011      	beq.n	8003fd6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc2:	e008      	b.n	8003fd6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e000      	b.n	8003fd8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40010400 	.word	0x40010400
 8003ffc:	40014000 	.word	0x40014000
 8004000:	40001800 	.word	0x40001800
 8004004:	00010007 	.word	0x00010007

08004008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d122      	bne.n	8004064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d11b      	bne.n	8004064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0202 	mvn.w	r2, #2
 8004034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f905 	bl	800425a <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8f7 	bl	8004246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f908 	bl	800426e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d122      	bne.n	80040b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d11b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0204 	mvn.w	r2, #4
 8004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f8db 	bl	800425a <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f8cd 	bl	8004246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f8de 	bl	800426e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d122      	bne.n	800410c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d11b      	bne.n	800410c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0208 	mvn.w	r2, #8
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8b1 	bl	800425a <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8a3 	bl	8004246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f8b4 	bl	800426e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b10      	cmp	r3, #16
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0210 	mvn.w	r2, #16
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2208      	movs	r2, #8
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f887 	bl	800425a <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f879 	bl	8004246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f88a 	bl	800426e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0201 	mvn.w	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fc fca0 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f91a 	bl	80043ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d10e      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d107      	bne.n	80041e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f90d 	bl	8004400 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d10e      	bne.n	8004212 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d107      	bne.n	8004212 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800420a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f838 	bl	8004282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b20      	cmp	r3, #32
 800421e:	d10e      	bne.n	800423e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d107      	bne.n	800423e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0220 	mvn.w	r2, #32
 8004236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8cd 	bl	80043d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a40      	ldr	r2, [pc, #256]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d013      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b6:	d00f      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a3d      	ldr	r2, [pc, #244]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00b      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a3c      	ldr	r2, [pc, #240]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d007      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a3b      	ldr	r2, [pc, #236]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_Base_SetConfig+0x40>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a3a      	ldr	r2, [pc, #232]	; (80043bc <TIM_Base_SetConfig+0x124>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d108      	bne.n	80042ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2f      	ldr	r2, [pc, #188]	; (80043ac <TIM_Base_SetConfig+0x114>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d02b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d027      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	; (80043b0 <TIM_Base_SetConfig+0x118>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d023      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	; (80043b4 <TIM_Base_SetConfig+0x11c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d01f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <TIM_Base_SetConfig+0x120>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d01b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	; (80043bc <TIM_Base_SetConfig+0x124>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d017      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <TIM_Base_SetConfig+0x128>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a27      	ldr	r2, [pc, #156]	; (80043c4 <TIM_Base_SetConfig+0x12c>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00f      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a26      	ldr	r2, [pc, #152]	; (80043c8 <TIM_Base_SetConfig+0x130>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00b      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <TIM_Base_SetConfig+0x134>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a24      	ldr	r2, [pc, #144]	; (80043d0 <TIM_Base_SetConfig+0x138>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d003      	beq.n	800434a <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <TIM_Base_SetConfig+0x13c>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d108      	bne.n	800435c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <TIM_Base_SetConfig+0x114>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_Base_SetConfig+0xf8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a0c      	ldr	r2, [pc, #48]	; (80043bc <TIM_Base_SetConfig+0x124>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d103      	bne.n	8004398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	615a      	str	r2, [r3, #20]
}
 800439e:	bf00      	nop
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40001800 	.word	0x40001800
 80043d0:	40001c00 	.word	0x40001c00
 80043d4:	40002000 	.word	0x40002000

080043d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e040      	b.n	80044a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fc fc58 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2224      	movs	r2, #36	; 0x24
 8004440:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f990 	bl	8004778 <UART_SetConfig>
 8004458:	4603      	mov	r3, r0
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e022      	b.n	80044a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fbe6 	bl	8004c3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800447e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800448e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0201 	orr.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fc6d 	bl	8004d80 <UART_CheckIdleState>
 80044a6:	4603      	mov	r3, r0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c4:	2b20      	cmp	r3, #32
 80044c6:	f040 8081 	bne.w	80045cc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_UART_Transmit+0x26>
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e079      	b.n	80045ce <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_UART_Transmit+0x38>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e072      	b.n	80045ce <HAL_UART_Transmit+0x11e>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fe:	f7fc fdab 	bl	8001058 <HAL_GetTick>
 8004502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88fa      	ldrh	r2, [r7, #6]
 8004510:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d108      	bne.n	8004530 <HAL_UART_Transmit+0x80>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004540:	e02c      	b.n	800459c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fc60 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e038      	b.n	80045ce <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e007      	b.n	800458a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1cc      	bne.n	8004542 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	2200      	movs	r2, #0
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 fc2d 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e005      	b.n	80045ce <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b08a      	sub	sp, #40	; 0x28
 80045da:	af02      	add	r7, sp, #8
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	603b      	str	r3, [r7, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	f040 80be 	bne.w	800476c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_Receive+0x26>
 80045f6:	88fb      	ldrh	r3, [r7, #6]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0b6      	b.n	800476e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_UART_Receive+0x38>
 800460a:	2302      	movs	r3, #2
 800460c:	e0af      	b.n	800476e <HAL_UART_Receive+0x198>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2222      	movs	r2, #34	; 0x22
 8004622:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fc fd15 	bl	8001058 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004648:	d10e      	bne.n	8004668 <HAL_UART_Receive+0x92>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d105      	bne.n	800465e <HAL_UART_Receive+0x88>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800465c:	e02d      	b.n	80046ba <HAL_UART_Receive+0xe4>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	; 0xff
 8004662:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004666:	e028      	b.n	80046ba <HAL_UART_Receive+0xe4>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10d      	bne.n	800468c <HAL_UART_Receive+0xb6>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <HAL_UART_Receive+0xac>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	22ff      	movs	r2, #255	; 0xff
 800467c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004680:	e01b      	b.n	80046ba <HAL_UART_Receive+0xe4>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	227f      	movs	r2, #127	; 0x7f
 8004686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800468a:	e016      	b.n	80046ba <HAL_UART_Receive+0xe4>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004694:	d10d      	bne.n	80046b2 <HAL_UART_Receive+0xdc>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <HAL_UART_Receive+0xd2>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	227f      	movs	r2, #127	; 0x7f
 80046a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046a6:	e008      	b.n	80046ba <HAL_UART_Receive+0xe4>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	223f      	movs	r2, #63	; 0x3f
 80046ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b0:	e003      	b.n	80046ba <HAL_UART_Receive+0xe4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046c0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d108      	bne.n	80046de <HAL_UART_Receive+0x108>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e003      	b.n	80046e6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046ee:	e032      	b.n	8004756 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2120      	movs	r1, #32
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fb89 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e031      	b.n	800476e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10c      	bne.n	800472a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	b29a      	uxth	r2, r3
 8004718:	8a7b      	ldrh	r3, [r7, #18]
 800471a:	4013      	ands	r3, r2
 800471c:	b29a      	uxth	r2, r3
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	3302      	adds	r3, #2
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	e00c      	b.n	8004744 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8a7b      	ldrh	r3, [r7, #18]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4013      	ands	r3, r2
 8004738:	b2da      	uxtb	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3301      	adds	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1c6      	bne.n	80046f0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4ba7      	ldr	r3, [pc, #668]	; (8004a40 <UART_SetConfig+0x2c8>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a95      	ldr	r2, [pc, #596]	; (8004a44 <UART_SetConfig+0x2cc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0xbe>
 80047f4:	4b94      	ldr	r3, [pc, #592]	; (8004a48 <UART_SetConfig+0x2d0>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f003 0303 	and.w	r3, r3, #3
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d816      	bhi.n	8004830 <UART_SetConfig+0xb8>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x90>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800481f 	.word	0x0800481f
 8004814:	0800482b 	.word	0x0800482b
 8004818:	2301      	movs	r3, #1
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e14f      	b.n	8004abe <UART_SetConfig+0x346>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e14c      	b.n	8004abe <UART_SetConfig+0x346>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e149      	b.n	8004abe <UART_SetConfig+0x346>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e146      	b.n	8004abe <UART_SetConfig+0x346>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e143      	b.n	8004abe <UART_SetConfig+0x346>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a84      	ldr	r2, [pc, #528]	; (8004a4c <UART_SetConfig+0x2d4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d132      	bne.n	80048a6 <UART_SetConfig+0x12e>
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <UART_SetConfig+0x2d0>)
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d828      	bhi.n	80048a0 <UART_SetConfig+0x128>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <UART_SetConfig+0xdc>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004889 	.word	0x08004889
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	08004895 	.word	0x08004895
 8004868:	080048a1 	.word	0x080048a1
 800486c:	080048a1 	.word	0x080048a1
 8004870:	080048a1 	.word	0x080048a1
 8004874:	0800488f 	.word	0x0800488f
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a1 	.word	0x080048a1
 8004880:	080048a1 	.word	0x080048a1
 8004884:	0800489b 	.word	0x0800489b
 8004888:	2300      	movs	r3, #0
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e117      	b.n	8004abe <UART_SetConfig+0x346>
 800488e:	2302      	movs	r3, #2
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e114      	b.n	8004abe <UART_SetConfig+0x346>
 8004894:	2304      	movs	r3, #4
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e111      	b.n	8004abe <UART_SetConfig+0x346>
 800489a:	2308      	movs	r3, #8
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e10e      	b.n	8004abe <UART_SetConfig+0x346>
 80048a0:	2310      	movs	r3, #16
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e10b      	b.n	8004abe <UART_SetConfig+0x346>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a69      	ldr	r2, [pc, #420]	; (8004a50 <UART_SetConfig+0x2d8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d120      	bne.n	80048f2 <UART_SetConfig+0x17a>
 80048b0:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <UART_SetConfig+0x2d0>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	d013      	beq.n	80048e6 <UART_SetConfig+0x16e>
 80048be:	2b30      	cmp	r3, #48	; 0x30
 80048c0:	d814      	bhi.n	80048ec <UART_SetConfig+0x174>
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d009      	beq.n	80048da <UART_SetConfig+0x162>
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d810      	bhi.n	80048ec <UART_SetConfig+0x174>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <UART_SetConfig+0x15c>
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d006      	beq.n	80048e0 <UART_SetConfig+0x168>
 80048d2:	e00b      	b.n	80048ec <UART_SetConfig+0x174>
 80048d4:	2300      	movs	r3, #0
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0f1      	b.n	8004abe <UART_SetConfig+0x346>
 80048da:	2302      	movs	r3, #2
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0ee      	b.n	8004abe <UART_SetConfig+0x346>
 80048e0:	2304      	movs	r3, #4
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0eb      	b.n	8004abe <UART_SetConfig+0x346>
 80048e6:	2308      	movs	r3, #8
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e0e8      	b.n	8004abe <UART_SetConfig+0x346>
 80048ec:	2310      	movs	r3, #16
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e0e5      	b.n	8004abe <UART_SetConfig+0x346>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a57      	ldr	r2, [pc, #348]	; (8004a54 <UART_SetConfig+0x2dc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d120      	bne.n	800493e <UART_SetConfig+0x1c6>
 80048fc:	4b52      	ldr	r3, [pc, #328]	; (8004a48 <UART_SetConfig+0x2d0>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004906:	2bc0      	cmp	r3, #192	; 0xc0
 8004908:	d013      	beq.n	8004932 <UART_SetConfig+0x1ba>
 800490a:	2bc0      	cmp	r3, #192	; 0xc0
 800490c:	d814      	bhi.n	8004938 <UART_SetConfig+0x1c0>
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d009      	beq.n	8004926 <UART_SetConfig+0x1ae>
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d810      	bhi.n	8004938 <UART_SetConfig+0x1c0>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <UART_SetConfig+0x1a8>
 800491a:	2b40      	cmp	r3, #64	; 0x40
 800491c:	d006      	beq.n	800492c <UART_SetConfig+0x1b4>
 800491e:	e00b      	b.n	8004938 <UART_SetConfig+0x1c0>
 8004920:	2300      	movs	r3, #0
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e0cb      	b.n	8004abe <UART_SetConfig+0x346>
 8004926:	2302      	movs	r3, #2
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e0c8      	b.n	8004abe <UART_SetConfig+0x346>
 800492c:	2304      	movs	r3, #4
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e0c5      	b.n	8004abe <UART_SetConfig+0x346>
 8004932:	2308      	movs	r3, #8
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e0c2      	b.n	8004abe <UART_SetConfig+0x346>
 8004938:	2310      	movs	r3, #16
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e0bf      	b.n	8004abe <UART_SetConfig+0x346>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a45      	ldr	r2, [pc, #276]	; (8004a58 <UART_SetConfig+0x2e0>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d125      	bne.n	8004994 <UART_SetConfig+0x21c>
 8004948:	4b3f      	ldr	r3, [pc, #252]	; (8004a48 <UART_SetConfig+0x2d0>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004956:	d017      	beq.n	8004988 <UART_SetConfig+0x210>
 8004958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800495c:	d817      	bhi.n	800498e <UART_SetConfig+0x216>
 800495e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004962:	d00b      	beq.n	800497c <UART_SetConfig+0x204>
 8004964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004968:	d811      	bhi.n	800498e <UART_SetConfig+0x216>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <UART_SetConfig+0x1fe>
 800496e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004972:	d006      	beq.n	8004982 <UART_SetConfig+0x20a>
 8004974:	e00b      	b.n	800498e <UART_SetConfig+0x216>
 8004976:	2300      	movs	r3, #0
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e0a0      	b.n	8004abe <UART_SetConfig+0x346>
 800497c:	2302      	movs	r3, #2
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e09d      	b.n	8004abe <UART_SetConfig+0x346>
 8004982:	2304      	movs	r3, #4
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e09a      	b.n	8004abe <UART_SetConfig+0x346>
 8004988:	2308      	movs	r3, #8
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e097      	b.n	8004abe <UART_SetConfig+0x346>
 800498e:	2310      	movs	r3, #16
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e094      	b.n	8004abe <UART_SetConfig+0x346>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a30      	ldr	r2, [pc, #192]	; (8004a5c <UART_SetConfig+0x2e4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d125      	bne.n	80049ea <UART_SetConfig+0x272>
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <UART_SetConfig+0x2d0>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ac:	d017      	beq.n	80049de <UART_SetConfig+0x266>
 80049ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049b2:	d817      	bhi.n	80049e4 <UART_SetConfig+0x26c>
 80049b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b8:	d00b      	beq.n	80049d2 <UART_SetConfig+0x25a>
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d811      	bhi.n	80049e4 <UART_SetConfig+0x26c>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <UART_SetConfig+0x254>
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d006      	beq.n	80049d8 <UART_SetConfig+0x260>
 80049ca:	e00b      	b.n	80049e4 <UART_SetConfig+0x26c>
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e075      	b.n	8004abe <UART_SetConfig+0x346>
 80049d2:	2302      	movs	r3, #2
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e072      	b.n	8004abe <UART_SetConfig+0x346>
 80049d8:	2304      	movs	r3, #4
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e06f      	b.n	8004abe <UART_SetConfig+0x346>
 80049de:	2308      	movs	r3, #8
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e06c      	b.n	8004abe <UART_SetConfig+0x346>
 80049e4:	2310      	movs	r3, #16
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e069      	b.n	8004abe <UART_SetConfig+0x346>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <UART_SetConfig+0x2e8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d137      	bne.n	8004a64 <UART_SetConfig+0x2ec>
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <UART_SetConfig+0x2d0>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80049fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a02:	d017      	beq.n	8004a34 <UART_SetConfig+0x2bc>
 8004a04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a08:	d817      	bhi.n	8004a3a <UART_SetConfig+0x2c2>
 8004a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a0e:	d00b      	beq.n	8004a28 <UART_SetConfig+0x2b0>
 8004a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a14:	d811      	bhi.n	8004a3a <UART_SetConfig+0x2c2>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <UART_SetConfig+0x2aa>
 8004a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a1e:	d006      	beq.n	8004a2e <UART_SetConfig+0x2b6>
 8004a20:	e00b      	b.n	8004a3a <UART_SetConfig+0x2c2>
 8004a22:	2300      	movs	r3, #0
 8004a24:	77fb      	strb	r3, [r7, #31]
 8004a26:	e04a      	b.n	8004abe <UART_SetConfig+0x346>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e047      	b.n	8004abe <UART_SetConfig+0x346>
 8004a2e:	2304      	movs	r3, #4
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e044      	b.n	8004abe <UART_SetConfig+0x346>
 8004a34:	2308      	movs	r3, #8
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e041      	b.n	8004abe <UART_SetConfig+0x346>
 8004a3a:	2310      	movs	r3, #16
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e03e      	b.n	8004abe <UART_SetConfig+0x346>
 8004a40:	efff69f3 	.word	0xefff69f3
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	40004800 	.word	0x40004800
 8004a54:	40004c00 	.word	0x40004c00
 8004a58:	40005000 	.word	0x40005000
 8004a5c:	40011400 	.word	0x40011400
 8004a60:	40007800 	.word	0x40007800
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a71      	ldr	r2, [pc, #452]	; (8004c30 <UART_SetConfig+0x4b8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d125      	bne.n	8004aba <UART_SetConfig+0x342>
 8004a6e:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <UART_SetConfig+0x4bc>)
 8004a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a7c:	d017      	beq.n	8004aae <UART_SetConfig+0x336>
 8004a7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a82:	d817      	bhi.n	8004ab4 <UART_SetConfig+0x33c>
 8004a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a88:	d00b      	beq.n	8004aa2 <UART_SetConfig+0x32a>
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d811      	bhi.n	8004ab4 <UART_SetConfig+0x33c>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <UART_SetConfig+0x324>
 8004a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a98:	d006      	beq.n	8004aa8 <UART_SetConfig+0x330>
 8004a9a:	e00b      	b.n	8004ab4 <UART_SetConfig+0x33c>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x346>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e00a      	b.n	8004abe <UART_SetConfig+0x346>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e007      	b.n	8004abe <UART_SetConfig+0x346>
 8004aae:	2308      	movs	r3, #8
 8004ab0:	77fb      	strb	r3, [r7, #31]
 8004ab2:	e004      	b.n	8004abe <UART_SetConfig+0x346>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e001      	b.n	8004abe <UART_SetConfig+0x346>
 8004aba:	2310      	movs	r3, #16
 8004abc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac6:	d15b      	bne.n	8004b80 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004ac8:	7ffb      	ldrb	r3, [r7, #31]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d827      	bhi.n	8004b1e <UART_SetConfig+0x3a6>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x35c>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fd2a 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004afc:	61b8      	str	r0, [r7, #24]
        break;
 8004afe:	e013      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fd3a 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8004b04:	61b8      	str	r0, [r7, #24]
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <UART_SetConfig+0x4c0>)
 8004b0a:	61bb      	str	r3, [r7, #24]
        break;
 8004b0c:	e00c      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fc31 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004b12:	61b8      	str	r0, [r7, #24]
        break;
 8004b14:	e008      	b.n	8004b28 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	61bb      	str	r3, [r7, #24]
        break;
 8004b1c:	e004      	b.n	8004b28 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	77bb      	strb	r3, [r7, #30]
        break;
 8004b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d074      	beq.n	8004c18 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	005a      	lsls	r2, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d916      	bls.n	8004b7a <UART_SetConfig+0x402>
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b52:	d212      	bcs.n	8004b7a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f023 030f 	bic.w	r3, r3, #15
 8004b5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	89fa      	ldrh	r2, [r7, #14]
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	e04e      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77bb      	strb	r3, [r7, #30]
 8004b7e:	e04b      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b80:	7ffb      	ldrb	r3, [r7, #31]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d827      	bhi.n	8004bd6 <UART_SetConfig+0x45e>
 8004b86:	a201      	add	r2, pc, #4	; (adr r2, 8004b8c <UART_SetConfig+0x414>)
 8004b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8c:	08004bb1 	.word	0x08004bb1
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bd7 	.word	0x08004bd7
 8004b9c:	08004bc7 	.word	0x08004bc7
 8004ba0:	08004bd7 	.word	0x08004bd7
 8004ba4:	08004bd7 	.word	0x08004bd7
 8004ba8:	08004bd7 	.word	0x08004bd7
 8004bac:	08004bcf 	.word	0x08004bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb0:	f7fe fcce 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8004bb4:	61b8      	str	r0, [r7, #24]
        break;
 8004bb6:	e013      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb8:	f7fe fcde 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8004bbc:	61b8      	str	r0, [r7, #24]
        break;
 8004bbe:	e00f      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <UART_SetConfig+0x4c0>)
 8004bc2:	61bb      	str	r3, [r7, #24]
        break;
 8004bc4:	e00c      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc6:	f7fe fbd5 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 8004bca:	61b8      	str	r0, [r7, #24]
        break;
 8004bcc:	e008      	b.n	8004be0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd2:	61bb      	str	r3, [r7, #24]
        break;
 8004bd4:	e004      	b.n	8004be0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	77bb      	strb	r3, [r7, #30]
        break;
 8004bde:	bf00      	nop
    }

    if (pclk != 0U)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085a      	lsrs	r2, r3, #1
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	441a      	add	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b0f      	cmp	r3, #15
 8004c00:	d908      	bls.n	8004c14 <UART_SetConfig+0x49c>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c08:	d204      	bcs.n	8004c14 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	60da      	str	r2, [r3, #12]
 8004c12:	e001      	b.n	8004c18 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004c24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	40007c00 	.word	0x40007c00
 8004c34:	40023800 	.word	0x40023800
 8004c38:	00f42400 	.word	0x00f42400

08004c3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	f003 0301 	and.w	r3, r3, #1
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0308 	and.w	r3, r3, #8
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d3a:	d10a      	bne.n	8004d52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d90:	f7fc f962 	bl	8001058 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0308 	and.w	r3, r3, #8
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d10e      	bne.n	8004dc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f82d 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e023      	b.n	8004e0a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d10e      	bne.n	8004dee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd4:	9300      	str	r3, [sp, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f817 	bl	8004e12 <UART_WaitOnFlagUntilTimeout>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e00d      	b.n	8004e0a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2220      	movs	r2, #32
 8004df8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e22:	e05e      	b.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d05a      	beq.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2c:	f7fc f914 	bl	8001058 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d302      	bcc.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d11b      	bne.n	8004e7a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e043      	b.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d02c      	beq.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e96:	d124      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004eb0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0201 	bic.w	r2, r2, #1
 8004ec0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e00f      	b.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	4013      	ands	r3, r2
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d091      	beq.n	8004e24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b084      	sub	sp, #16
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	f107 001c 	add.w	r0, r7, #28
 8004f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d120      	bne.n	8004f66 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	4b20      	ldr	r3, [pc, #128]	; (8004fb8 <USB_CoreInit+0xac>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d105      	bne.n	8004f5a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa5a 	bl	8005414 <USB_CoreReset>
 8004f60:	4603      	mov	r3, r0
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e010      	b.n	8004f88 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fa4e 	bl	8005414 <USB_CoreReset>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10b      	bne.n	8004fa6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f043 0206 	orr.w	r2, r3, #6
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f043 0220 	orr.w	r2, r3, #32
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fb2:	b004      	add	sp, #16
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	ffbdffbf 	.word	0xffbdffbf

08004fbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f023 0201 	bic.w	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b082      	sub	sp, #8
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ff6:	78fb      	ldrb	r3, [r7, #3]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d106      	bne.n	800500a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e00b      	b.n	8005022 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d106      	bne.n	800501e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	e001      	b.n	8005022 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e003      	b.n	800502a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005022:	2032      	movs	r0, #50	; 0x32
 8005024:	f7fc f824 	bl	8001070 <HAL_Delay>

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005034:	b084      	sub	sp, #16
 8005036:	b580      	push	{r7, lr}
 8005038:	b086      	sub	sp, #24
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e009      	b.n	8005068 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3340      	adds	r3, #64	; 0x40
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3301      	adds	r3, #1
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0e      	cmp	r3, #14
 800506c:	d9f2      	bls.n	8005054 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11c      	bne.n	80050ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f043 0302 	orr.w	r3, r3, #2
 8005086:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e005      	b.n	80050ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050c0:	461a      	mov	r2, r3
 80050c2:	2300      	movs	r3, #0
 80050c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050cc:	4619      	mov	r1, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	461a      	mov	r2, r3
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d10c      	bne.n	80050fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050e6:	2100      	movs	r1, #0
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f959 	bl	80053a0 <USB_SetDevSpeed>
 80050ee:	e018      	b.n	8005122 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050f0:	2101      	movs	r1, #1
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f954 	bl	80053a0 <USB_SetDevSpeed>
 80050f8:	e013      	b.n	8005122 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d10c      	bne.n	800511a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d104      	bne.n	8005110 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005106:	2100      	movs	r1, #0
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f949 	bl	80053a0 <USB_SetDevSpeed>
 800510e:	e008      	b.n	8005122 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005110:	2101      	movs	r1, #1
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f944 	bl	80053a0 <USB_SetDevSpeed>
 8005118:	e003      	b.n	8005122 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800511a:	2103      	movs	r1, #3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f93f 	bl	80053a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005122:	2110      	movs	r1, #16
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 f8f3 	bl	8005310 <USB_FlushTxFifo>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f911 	bl	800535c <USB_FlushRxFifo>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	461a      	mov	r2, r3
 800514c:	2300      	movs	r3, #0
 800514e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005162:	461a      	mov	r2, r3
 8005164:	2300      	movs	r3, #0
 8005166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	e043      	b.n	80051f6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005184:	d118      	bne.n	80051b8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	461a      	mov	r2, r3
 800519a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e013      	b.n	80051ca <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	461a      	mov	r2, r3
 80051b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	e008      	b.n	80051ca <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	461a      	mov	r2, r3
 80051ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	3301      	adds	r3, #1
 80051f4:	613b      	str	r3, [r7, #16]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d3b7      	bcc.n	800516e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	e043      	b.n	800528c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800521a:	d118      	bne.n	800524e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e013      	b.n	8005260 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	461a      	mov	r2, r3
 8005246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	e008      	b.n	8005260 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	2300      	movs	r3, #0
 800525e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	461a      	mov	r2, r3
 800526e:	2300      	movs	r3, #0
 8005270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	461a      	mov	r2, r3
 8005280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3301      	adds	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d3b7      	bcc.n	8005204 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	f043 0210 	orr.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <USB_DevInit+0x2d4>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f043 0208 	orr.w	r2, r3, #8
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d105      	bne.n	80052f8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	4b06      	ldr	r3, [pc, #24]	; (800530c <USB_DevInit+0x2d8>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005304:	b004      	add	sp, #16
 8005306:	4770      	bx	lr
 8005308:	803c3800 	.word	0x803c3800
 800530c:	40000004 	.word	0x40000004

08005310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	f043 0220 	orr.w	r2, r3, #32
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	3301      	adds	r3, #1
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <USB_FlushTxFifo+0x48>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0320 	and.w	r3, r3, #32
 8005344:	2b20      	cmp	r3, #32
 8005346:	d0f0      	beq.n	800532a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	00030d40 	.word	0x00030d40

0800535c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2210      	movs	r2, #16
 800536c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a09      	ldr	r2, [pc, #36]	; (800539c <USB_FlushRxFifo+0x40>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d901      	bls.n	8005380 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d0f0      	beq.n	800536e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	00030d40 	.word	0x00030d40

080053a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	460b      	mov	r3, r1
 80053aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	68f9      	ldr	r1, [r7, #12]
 80053bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053ec:	f023 0303 	bic.w	r3, r3, #3
 80053f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a13      	ldr	r2, [pc, #76]	; (8005478 <USB_CoreReset+0x64>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e01b      	b.n	800546a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	daf2      	bge.n	8005420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f043 0201 	orr.w	r2, r3, #1
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <USB_CoreReset+0x64>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d901      	bls.n	800545c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e006      	b.n	800546a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d0f0      	beq.n	800544a <USB_CoreReset+0x36>

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	00030d40 	.word	0x00030d40

0800547c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005482:	4ba0      	ldr	r3, [pc, #640]	; (8005704 <MX_LWIP_Init+0x288>)
 8005484:	22c0      	movs	r2, #192	; 0xc0
 8005486:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005488:	4b9e      	ldr	r3, [pc, #632]	; (8005704 <MX_LWIP_Init+0x288>)
 800548a:	22a8      	movs	r2, #168	; 0xa8
 800548c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800548e:	4b9d      	ldr	r3, [pc, #628]	; (8005704 <MX_LWIP_Init+0x288>)
 8005490:	2201      	movs	r2, #1
 8005492:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 192;
 8005494:	4b9b      	ldr	r3, [pc, #620]	; (8005704 <MX_LWIP_Init+0x288>)
 8005496:	22c0      	movs	r2, #192	; 0xc0
 8005498:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 225;
 800549a:	4b9b      	ldr	r3, [pc, #620]	; (8005708 <MX_LWIP_Init+0x28c>)
 800549c:	22e1      	movs	r2, #225	; 0xe1
 800549e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 225;
 80054a0:	4b99      	ldr	r3, [pc, #612]	; (8005708 <MX_LWIP_Init+0x28c>)
 80054a2:	22e1      	movs	r2, #225	; 0xe1
 80054a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 225;
 80054a6:	4b98      	ldr	r3, [pc, #608]	; (8005708 <MX_LWIP_Init+0x28c>)
 80054a8:	22e1      	movs	r2, #225	; 0xe1
 80054aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80054ac:	4b96      	ldr	r3, [pc, #600]	; (8005708 <MX_LWIP_Init+0x28c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 80054b2:	4b96      	ldr	r3, [pc, #600]	; (800570c <MX_LWIP_Init+0x290>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 80054b8:	4b94      	ldr	r3, [pc, #592]	; (800570c <MX_LWIP_Init+0x290>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80054be:	4b93      	ldr	r3, [pc, #588]	; (800570c <MX_LWIP_Init+0x290>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 80054c4:	4b91      	ldr	r3, [pc, #580]	; (800570c <MX_LWIP_Init+0x290>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80054ca:	2100      	movs	r1, #0
 80054cc:	2000      	movs	r0, #0
 80054ce:	f004 fddd 	bl	800a08c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80054d2:	4b8c      	ldr	r3, [pc, #560]	; (8005704 <MX_LWIP_Init+0x288>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	061a      	lsls	r2, r3, #24
 80054d8:	4b8a      	ldr	r3, [pc, #552]	; (8005704 <MX_LWIP_Init+0x288>)
 80054da:	785b      	ldrb	r3, [r3, #1]
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	431a      	orrs	r2, r3
 80054e0:	4b88      	ldr	r3, [pc, #544]	; (8005704 <MX_LWIP_Init+0x288>)
 80054e2:	789b      	ldrb	r3, [r3, #2]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	4313      	orrs	r3, r2
 80054e8:	4a86      	ldr	r2, [pc, #536]	; (8005704 <MX_LWIP_Init+0x288>)
 80054ea:	78d2      	ldrb	r2, [r2, #3]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	061a      	lsls	r2, r3, #24
 80054f0:	4b84      	ldr	r3, [pc, #528]	; (8005704 <MX_LWIP_Init+0x288>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	0619      	lsls	r1, r3, #24
 80054f6:	4b83      	ldr	r3, [pc, #524]	; (8005704 <MX_LWIP_Init+0x288>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	4319      	orrs	r1, r3
 80054fe:	4b81      	ldr	r3, [pc, #516]	; (8005704 <MX_LWIP_Init+0x288>)
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	430b      	orrs	r3, r1
 8005506:	497f      	ldr	r1, [pc, #508]	; (8005704 <MX_LWIP_Init+0x288>)
 8005508:	78c9      	ldrb	r1, [r1, #3]
 800550a:	430b      	orrs	r3, r1
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005512:	431a      	orrs	r2, r3
 8005514:	4b7b      	ldr	r3, [pc, #492]	; (8005704 <MX_LWIP_Init+0x288>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	0619      	lsls	r1, r3, #24
 800551a:	4b7a      	ldr	r3, [pc, #488]	; (8005704 <MX_LWIP_Init+0x288>)
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	041b      	lsls	r3, r3, #16
 8005520:	4319      	orrs	r1, r3
 8005522:	4b78      	ldr	r3, [pc, #480]	; (8005704 <MX_LWIP_Init+0x288>)
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	430b      	orrs	r3, r1
 800552a:	4976      	ldr	r1, [pc, #472]	; (8005704 <MX_LWIP_Init+0x288>)
 800552c:	78c9      	ldrb	r1, [r1, #3]
 800552e:	430b      	orrs	r3, r1
 8005530:	0a1b      	lsrs	r3, r3, #8
 8005532:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005536:	431a      	orrs	r2, r3
 8005538:	4b72      	ldr	r3, [pc, #456]	; (8005704 <MX_LWIP_Init+0x288>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	0619      	lsls	r1, r3, #24
 800553e:	4b71      	ldr	r3, [pc, #452]	; (8005704 <MX_LWIP_Init+0x288>)
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	4319      	orrs	r1, r3
 8005546:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <MX_LWIP_Init+0x288>)
 8005548:	789b      	ldrb	r3, [r3, #2]
 800554a:	021b      	lsls	r3, r3, #8
 800554c:	430b      	orrs	r3, r1
 800554e:	496d      	ldr	r1, [pc, #436]	; (8005704 <MX_LWIP_Init+0x288>)
 8005550:	78c9      	ldrb	r1, [r1, #3]
 8005552:	430b      	orrs	r3, r1
 8005554:	0e1b      	lsrs	r3, r3, #24
 8005556:	4313      	orrs	r3, r2
 8005558:	4a6d      	ldr	r2, [pc, #436]	; (8005710 <MX_LWIP_Init+0x294>)
 800555a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800555c:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <MX_LWIP_Init+0x28c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	061a      	lsls	r2, r3, #24
 8005562:	4b69      	ldr	r3, [pc, #420]	; (8005708 <MX_LWIP_Init+0x28c>)
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	041b      	lsls	r3, r3, #16
 8005568:	431a      	orrs	r2, r3
 800556a:	4b67      	ldr	r3, [pc, #412]	; (8005708 <MX_LWIP_Init+0x28c>)
 800556c:	789b      	ldrb	r3, [r3, #2]
 800556e:	021b      	lsls	r3, r3, #8
 8005570:	4313      	orrs	r3, r2
 8005572:	4a65      	ldr	r2, [pc, #404]	; (8005708 <MX_LWIP_Init+0x28c>)
 8005574:	78d2      	ldrb	r2, [r2, #3]
 8005576:	4313      	orrs	r3, r2
 8005578:	061a      	lsls	r2, r3, #24
 800557a:	4b63      	ldr	r3, [pc, #396]	; (8005708 <MX_LWIP_Init+0x28c>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	0619      	lsls	r1, r3, #24
 8005580:	4b61      	ldr	r3, [pc, #388]	; (8005708 <MX_LWIP_Init+0x28c>)
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	4319      	orrs	r1, r3
 8005588:	4b5f      	ldr	r3, [pc, #380]	; (8005708 <MX_LWIP_Init+0x28c>)
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	430b      	orrs	r3, r1
 8005590:	495d      	ldr	r1, [pc, #372]	; (8005708 <MX_LWIP_Init+0x28c>)
 8005592:	78c9      	ldrb	r1, [r1, #3]
 8005594:	430b      	orrs	r3, r1
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800559c:	431a      	orrs	r2, r3
 800559e:	4b5a      	ldr	r3, [pc, #360]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	0619      	lsls	r1, r3, #24
 80055a4:	4b58      	ldr	r3, [pc, #352]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	041b      	lsls	r3, r3, #16
 80055aa:	4319      	orrs	r1, r3
 80055ac:	4b56      	ldr	r3, [pc, #344]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055ae:	789b      	ldrb	r3, [r3, #2]
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	430b      	orrs	r3, r1
 80055b4:	4954      	ldr	r1, [pc, #336]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055b6:	78c9      	ldrb	r1, [r1, #3]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	0a1b      	lsrs	r3, r3, #8
 80055bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055c0:	431a      	orrs	r2, r3
 80055c2:	4b51      	ldr	r3, [pc, #324]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	0619      	lsls	r1, r3, #24
 80055c8:	4b4f      	ldr	r3, [pc, #316]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	041b      	lsls	r3, r3, #16
 80055ce:	4319      	orrs	r1, r3
 80055d0:	4b4d      	ldr	r3, [pc, #308]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055d2:	789b      	ldrb	r3, [r3, #2]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	430b      	orrs	r3, r1
 80055d8:	494b      	ldr	r1, [pc, #300]	; (8005708 <MX_LWIP_Init+0x28c>)
 80055da:	78c9      	ldrb	r1, [r1, #3]
 80055dc:	430b      	orrs	r3, r1
 80055de:	0e1b      	lsrs	r3, r3, #24
 80055e0:	4313      	orrs	r3, r2
 80055e2:	4a4c      	ldr	r2, [pc, #304]	; (8005714 <MX_LWIP_Init+0x298>)
 80055e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80055e6:	4b49      	ldr	r3, [pc, #292]	; (800570c <MX_LWIP_Init+0x290>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	061a      	lsls	r2, r3, #24
 80055ec:	4b47      	ldr	r3, [pc, #284]	; (800570c <MX_LWIP_Init+0x290>)
 80055ee:	785b      	ldrb	r3, [r3, #1]
 80055f0:	041b      	lsls	r3, r3, #16
 80055f2:	431a      	orrs	r2, r3
 80055f4:	4b45      	ldr	r3, [pc, #276]	; (800570c <MX_LWIP_Init+0x290>)
 80055f6:	789b      	ldrb	r3, [r3, #2]
 80055f8:	021b      	lsls	r3, r3, #8
 80055fa:	4313      	orrs	r3, r2
 80055fc:	4a43      	ldr	r2, [pc, #268]	; (800570c <MX_LWIP_Init+0x290>)
 80055fe:	78d2      	ldrb	r2, [r2, #3]
 8005600:	4313      	orrs	r3, r2
 8005602:	061a      	lsls	r2, r3, #24
 8005604:	4b41      	ldr	r3, [pc, #260]	; (800570c <MX_LWIP_Init+0x290>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	0619      	lsls	r1, r3, #24
 800560a:	4b40      	ldr	r3, [pc, #256]	; (800570c <MX_LWIP_Init+0x290>)
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	4319      	orrs	r1, r3
 8005612:	4b3e      	ldr	r3, [pc, #248]	; (800570c <MX_LWIP_Init+0x290>)
 8005614:	789b      	ldrb	r3, [r3, #2]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	430b      	orrs	r3, r1
 800561a:	493c      	ldr	r1, [pc, #240]	; (800570c <MX_LWIP_Init+0x290>)
 800561c:	78c9      	ldrb	r1, [r1, #3]
 800561e:	430b      	orrs	r3, r1
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005626:	431a      	orrs	r2, r3
 8005628:	4b38      	ldr	r3, [pc, #224]	; (800570c <MX_LWIP_Init+0x290>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	0619      	lsls	r1, r3, #24
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <MX_LWIP_Init+0x290>)
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	041b      	lsls	r3, r3, #16
 8005634:	4319      	orrs	r1, r3
 8005636:	4b35      	ldr	r3, [pc, #212]	; (800570c <MX_LWIP_Init+0x290>)
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	430b      	orrs	r3, r1
 800563e:	4933      	ldr	r1, [pc, #204]	; (800570c <MX_LWIP_Init+0x290>)
 8005640:	78c9      	ldrb	r1, [r1, #3]
 8005642:	430b      	orrs	r3, r1
 8005644:	0a1b      	lsrs	r3, r3, #8
 8005646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800564a:	431a      	orrs	r2, r3
 800564c:	4b2f      	ldr	r3, [pc, #188]	; (800570c <MX_LWIP_Init+0x290>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	0619      	lsls	r1, r3, #24
 8005652:	4b2e      	ldr	r3, [pc, #184]	; (800570c <MX_LWIP_Init+0x290>)
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	4319      	orrs	r1, r3
 800565a:	4b2c      	ldr	r3, [pc, #176]	; (800570c <MX_LWIP_Init+0x290>)
 800565c:	789b      	ldrb	r3, [r3, #2]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	430b      	orrs	r3, r1
 8005662:	492a      	ldr	r1, [pc, #168]	; (800570c <MX_LWIP_Init+0x290>)
 8005664:	78c9      	ldrb	r1, [r1, #3]
 8005666:	430b      	orrs	r3, r1
 8005668:	0e1b      	lsrs	r3, r3, #24
 800566a:	4313      	orrs	r3, r2
 800566c:	4a2a      	ldr	r2, [pc, #168]	; (8005718 <MX_LWIP_Init+0x29c>)
 800566e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <MX_LWIP_Init+0x2a0>)
 8005672:	9302      	str	r3, [sp, #8]
 8005674:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <MX_LWIP_Init+0x2a4>)
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	2300      	movs	r3, #0
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	4b26      	ldr	r3, [pc, #152]	; (8005718 <MX_LWIP_Init+0x29c>)
 800567e:	4a25      	ldr	r2, [pc, #148]	; (8005714 <MX_LWIP_Init+0x298>)
 8005680:	4923      	ldr	r1, [pc, #140]	; (8005710 <MX_LWIP_Init+0x294>)
 8005682:	4828      	ldr	r0, [pc, #160]	; (8005724 <MX_LWIP_Init+0x2a8>)
 8005684:	f005 fa86 	bl	800ab94 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005688:	4826      	ldr	r0, [pc, #152]	; (8005724 <MX_LWIP_Init+0x2a8>)
 800568a:	f005 fc35 	bl	800aef8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800568e:	4b25      	ldr	r3, [pc, #148]	; (8005724 <MX_LWIP_Init+0x2a8>)
 8005690:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005694:	089b      	lsrs	r3, r3, #2
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80056a0:	4820      	ldr	r0, [pc, #128]	; (8005724 <MX_LWIP_Init+0x2a8>)
 80056a2:	f005 fc39 	bl	800af18 <netif_set_up>
 80056a6:	e002      	b.n	80056ae <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80056a8:	481e      	ldr	r0, [pc, #120]	; (8005724 <MX_LWIP_Init+0x2a8>)
 80056aa:	f005 fca1 	bl	800aff0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80056ae:	491e      	ldr	r1, [pc, #120]	; (8005728 <MX_LWIP_Init+0x2ac>)
 80056b0:	481c      	ldr	r0, [pc, #112]	; (8005724 <MX_LWIP_Init+0x2a8>)
 80056b2:	f005 fd33 	bl	800b11c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80056b6:	2200      	movs	r2, #0
 80056b8:	2101      	movs	r1, #1
 80056ba:	2001      	movs	r0, #1
 80056bc:	f000 ff14 	bl	80064e8 <osSemaphoreNew>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4a1a      	ldr	r2, [pc, #104]	; (800572c <MX_LWIP_Init+0x2b0>)
 80056c4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80056c6:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <MX_LWIP_Init+0x2b4>)
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <MX_LWIP_Init+0x2a8>)
 80056ca:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80056cc:	4b17      	ldr	r3, [pc, #92]	; (800572c <MX_LWIP_Init+0x2b0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a17      	ldr	r2, [pc, #92]	; (8005730 <MX_LWIP_Init+0x2b4>)
 80056d2:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80056d4:	2224      	movs	r2, #36	; 0x24
 80056d6:	2100      	movs	r1, #0
 80056d8:	4816      	ldr	r0, [pc, #88]	; (8005734 <MX_LWIP_Init+0x2b8>)
 80056da:	f00e fc91 	bl	8014000 <memset>
  attributes.name = "LinkThr";
 80056de:	4b15      	ldr	r3, [pc, #84]	; (8005734 <MX_LWIP_Init+0x2b8>)
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <MX_LWIP_Init+0x2bc>)
 80056e2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80056e4:	4b13      	ldr	r3, [pc, #76]	; (8005734 <MX_LWIP_Init+0x2b8>)
 80056e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ea:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80056ec:	4b11      	ldr	r3, [pc, #68]	; (8005734 <MX_LWIP_Init+0x2b8>)
 80056ee:	2210      	movs	r2, #16
 80056f0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <MX_LWIP_Init+0x2b8>)
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <MX_LWIP_Init+0x2b4>)
 80056f6:	4811      	ldr	r0, [pc, #68]	; (800573c <MX_LWIP_Init+0x2c0>)
 80056f8:	f000 fcda 	bl	80060b0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80056fc:	bf00      	nop
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200050f8 	.word	0x200050f8
 8005708:	200050f4 	.word	0x200050f4
 800570c:	20005094 	.word	0x20005094
 8005710:	200050f0 	.word	0x200050f0
 8005714:	200050fc 	.word	0x200050fc
 8005718:	20005100 	.word	0x20005100
 800571c:	08009fc9 	.word	0x08009fc9
 8005720:	08005d8d 	.word	0x08005d8d
 8005724:	200050bc 	.word	0x200050bc
 8005728:	08005e71 	.word	0x08005e71
 800572c:	200000a0 	.word	0x200000a0
 8005730:	2000508c 	.word	0x2000508c
 8005734:	20005098 	.word	0x20005098
 8005738:	080155a0 	.word	0x080155a0
 800573c:	08005df9 	.word	0x08005df9

08005740 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b08e      	sub	sp, #56	; 0x38
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574c:	2200      	movs	r2, #0
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	605a      	str	r2, [r3, #4]
 8005752:	609a      	str	r2, [r3, #8]
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a52      	ldr	r2, [pc, #328]	; (80058a8 <HAL_ETH_MspInit+0x168>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f040 809e 	bne.w	80058a0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005764:	4b51      	ldr	r3, [pc, #324]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a50      	ldr	r2, [pc, #320]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 800576a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800576e:	6313      	str	r3, [r2, #48]	; 0x30
 8005770:	4b4e      	ldr	r3, [pc, #312]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	4b4b      	ldr	r3, [pc, #300]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	4a4a      	ldr	r2, [pc, #296]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 8005782:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005786:	6313      	str	r3, [r2, #48]	; 0x30
 8005788:	4b48      	ldr	r3, [pc, #288]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	4a44      	ldr	r2, [pc, #272]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 800579a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800579e:	6313      	str	r3, [r2, #48]	; 0x30
 80057a0:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b0:	4a3e      	ldr	r2, [pc, #248]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057b2:	f043 0304 	orr.w	r3, r3, #4
 80057b6:	6313      	str	r3, [r2, #48]	; 0x30
 80057b8:	4b3c      	ldr	r3, [pc, #240]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c4:	4b39      	ldr	r3, [pc, #228]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	4a38      	ldr	r2, [pc, #224]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	6313      	str	r3, [r2, #48]	; 0x30
 80057d0:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057dc:	4b33      	ldr	r3, [pc, #204]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	4a32      	ldr	r2, [pc, #200]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	6313      	str	r3, [r2, #48]	; 0x30
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80057f4:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	4a2c      	ldr	r2, [pc, #176]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 80057fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_ETH_MspInit+0x16c>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	60bb      	str	r3, [r7, #8]
 800580a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800580c:	2332      	movs	r3, #50	; 0x32
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005814:	2300      	movs	r3, #0
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005818:	2303      	movs	r3, #3
 800581a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800581c:	230b      	movs	r3, #11
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005824:	4619      	mov	r1, r3
 8005826:	4822      	ldr	r0, [pc, #136]	; (80058b0 <HAL_ETH_MspInit+0x170>)
 8005828:	f7fc feac 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800582c:	2386      	movs	r3, #134	; 0x86
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005830:	2302      	movs	r3, #2
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	2300      	movs	r3, #0
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005838:	2303      	movs	r3, #3
 800583a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800583c:	230b      	movs	r3, #11
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005844:	4619      	mov	r1, r3
 8005846:	481b      	ldr	r0, [pc, #108]	; (80058b4 <HAL_ETH_MspInit+0x174>)
 8005848:	f7fc fe9c 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800584c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005852:	2302      	movs	r3, #2
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800585a:	2303      	movs	r3, #3
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800585e:	230b      	movs	r3, #11
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005866:	4619      	mov	r1, r3
 8005868:	4813      	ldr	r0, [pc, #76]	; (80058b8 <HAL_ETH_MspInit+0x178>)
 800586a:	f7fc fe8b 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800586e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005874:	2302      	movs	r3, #2
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800587c:	2303      	movs	r3, #3
 800587e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005880:	230b      	movs	r3, #11
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005888:	4619      	mov	r1, r3
 800588a:	480c      	ldr	r0, [pc, #48]	; (80058bc <HAL_ETH_MspInit+0x17c>)
 800588c:	f7fc fe7a 	bl	8002584 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005890:	2200      	movs	r2, #0
 8005892:	2105      	movs	r1, #5
 8005894:	203d      	movs	r0, #61	; 0x3d
 8005896:	f7fb fcc7 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800589a:	203d      	movs	r0, #61	; 0x3d
 800589c:	f7fb fce0 	bl	8001260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80058a0:	bf00      	nop
 80058a2:	3738      	adds	r7, #56	; 0x38
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40028000 	.word	0x40028000
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40020800 	.word	0x40020800
 80058b4:	40020000 	.word	0x40020000
 80058b8:	40020400 	.word	0x40020400
 80058bc:	40021800 	.word	0x40021800

080058c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <HAL_ETH_RxCpltCallback+0x1c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 ff0d 	bl	80066ec <osSemaphoreRelease>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	200000a4 	.word	0x200000a4

080058e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b090      	sub	sp, #64	; 0x40
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80058e8:	2300      	movs	r3, #0
 80058ea:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80058ec:	4b5d      	ldr	r3, [pc, #372]	; (8005a64 <low_level_init+0x184>)
 80058ee:	4a5e      	ldr	r2, [pc, #376]	; (8005a68 <low_level_init+0x188>)
 80058f0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80058f2:	4b5c      	ldr	r3, [pc, #368]	; (8005a64 <low_level_init+0x184>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80058f8:	4b5a      	ldr	r3, [pc, #360]	; (8005a64 <low_level_init+0x184>)
 80058fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005900:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <low_level_init+0x184>)
 8005902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005906:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005908:	4b56      	ldr	r3, [pc, #344]	; (8005a64 <low_level_init+0x184>)
 800590a:	2200      	movs	r2, #0
 800590c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800590e:	2300      	movs	r3, #0
 8005910:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8005916:	23e1      	movs	r3, #225	; 0xe1
 8005918:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800591e:	2300      	movs	r3, #0
 8005920:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005922:	2300      	movs	r3, #0
 8005924:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8005926:	4a4f      	ldr	r2, [pc, #316]	; (8005a64 <low_level_init+0x184>)
 8005928:	f107 030c 	add.w	r3, r7, #12
 800592c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800592e:	4b4d      	ldr	r3, [pc, #308]	; (8005a64 <low_level_init+0x184>)
 8005930:	2201      	movs	r2, #1
 8005932:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005934:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <low_level_init+0x184>)
 8005936:	2200      	movs	r2, #0
 8005938:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <low_level_init+0x184>)
 800593c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005940:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005942:	4848      	ldr	r0, [pc, #288]	; (8005a64 <low_level_init+0x184>)
 8005944:	f7fb fc9a 	bl	800127c <HAL_ETH_Init>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800594e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800595c:	f043 0304 	orr.w	r3, r3, #4
 8005960:	b2da      	uxtb	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005968:	2304      	movs	r3, #4
 800596a:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <low_level_init+0x18c>)
 800596c:	4940      	ldr	r1, [pc, #256]	; (8005a70 <low_level_init+0x190>)
 800596e:	483d      	ldr	r0, [pc, #244]	; (8005a64 <low_level_init+0x184>)
 8005970:	f7fb fe1e 	bl	80015b0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005974:	2304      	movs	r3, #4
 8005976:	4a3f      	ldr	r2, [pc, #252]	; (8005a74 <low_level_init+0x194>)
 8005978:	493f      	ldr	r1, [pc, #252]	; (8005a78 <low_level_init+0x198>)
 800597a:	483a      	ldr	r0, [pc, #232]	; (8005a64 <low_level_init+0x184>)
 800597c:	f7fb fe81 	bl	8001682 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2206      	movs	r2, #6
 8005984:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005988:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <low_level_init+0x184>)
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <low_level_init+0x184>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	785a      	ldrb	r2, [r3, #1]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80059a0:	4b30      	ldr	r3, [pc, #192]	; (8005a64 <low_level_init+0x184>)
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	789a      	ldrb	r2, [r3, #2]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <low_level_init+0x184>)
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	78da      	ldrb	r2, [r3, #3]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80059b8:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <low_level_init+0x184>)
 80059ba:	695b      	ldr	r3, [r3, #20]
 80059bc:	791a      	ldrb	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80059c4:	4b27      	ldr	r3, [pc, #156]	; (8005a64 <low_level_init+0x184>)
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	795a      	ldrb	r2, [r3, #5]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80059d6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059de:	f043 030a 	orr.w	r3, r3, #10
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80059ea:	2200      	movs	r2, #0
 80059ec:	2101      	movs	r1, #1
 80059ee:	2001      	movs	r0, #1
 80059f0:	f000 fd7a 	bl	80064e8 <osSemaphoreNew>
 80059f4:	4603      	mov	r3, r0
 80059f6:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <low_level_init+0x19c>)
 80059f8:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80059fa:	f107 0314 	add.w	r3, r7, #20
 80059fe:	2224      	movs	r2, #36	; 0x24
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f00e fafc 	bl	8014000 <memset>
  attributes.name = "EthIf";
 8005a08:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <low_level_init+0x1a0>)
 8005a0a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005a0c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005a10:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005a12:	2330      	movs	r3, #48	; 0x30
 8005a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4819      	ldr	r0, [pc, #100]	; (8005a84 <low_level_init+0x1a4>)
 8005a20:	f000 fb46 	bl	80060b0 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005a24:	480f      	ldr	r0, [pc, #60]	; (8005a64 <low_level_init+0x184>)
 8005a26:	f7fc f954 	bl	8001cd2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a2e:	461a      	mov	r2, r3
 8005a30:	211d      	movs	r1, #29
 8005a32:	480c      	ldr	r0, [pc, #48]	; (8005a64 <low_level_init+0x184>)
 8005a34:	f7fc f87f 	bl	8001b36 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	f043 030b 	orr.w	r3, r3, #11
 8005a3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	461a      	mov	r2, r3
 8005a44:	211d      	movs	r1, #29
 8005a46:	4807      	ldr	r0, [pc, #28]	; (8005a64 <low_level_init+0x184>)
 8005a48:	f7fc f8dd 	bl	8001c06 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005a4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005a50:	461a      	mov	r2, r3
 8005a52:	211d      	movs	r1, #29
 8005a54:	4803      	ldr	r0, [pc, #12]	; (8005a64 <low_level_init+0x184>)
 8005a56:	f7fc f86e 	bl	8001b36 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005a5a:	bf00      	nop
 8005a5c:	3740      	adds	r7, #64	; 0x40
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200069d4 	.word	0x200069d4
 8005a68:	40028000 	.word	0x40028000
 8005a6c:	20006a1c 	.word	0x20006a1c
 8005a70:	20005104 	.word	0x20005104
 8005a74:	20005184 	.word	0x20005184
 8005a78:	20006954 	.word	0x20006954
 8005a7c:	200000a4 	.word	0x200000a4
 8005a80:	080155a8 	.word	0x080155a8
 8005a84:	08005d2d 	.word	0x08005d2d

08005a88 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	; 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005a92:	4b4b      	ldr	r3, [pc, #300]	; (8005bc0 <low_level_output+0x138>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005aaa:	4b45      	ldr	r3, [pc, #276]	; (8005bc0 <low_level_output+0x138>)
 8005aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	e05a      	b.n	8005b70 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	da03      	bge.n	8005aca <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005ac2:	23f8      	movs	r3, #248	; 0xf8
 8005ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005ac8:	e05c      	b.n	8005b84 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	895b      	ldrh	r3, [r3, #10]
 8005ace:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005ad4:	e02f      	b.n	8005b36 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005ad6:	69fa      	ldr	r2, [r7, #28]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	18d0      	adds	r0, r2, r3
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	18d1      	adds	r1, r2, r3
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	f00e fa5f 	bl	8013fb0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da03      	bge.n	8005b08 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005b00:	23f8      	movs	r3, #248	; 0xf8
 8005b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005b06:	e03d      	b.n	8005b84 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005b18:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b24:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005b30:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d8c8      	bhi.n	8005ad6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	18d0      	adds	r0, r2, r3
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	4413      	add	r3, r2
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	4619      	mov	r1, r3
 8005b56:	f00e fa2b 	bl	8013fb0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	623b      	str	r3, [r7, #32]
 8005b70:	6a3b      	ldr	r3, [r7, #32]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1a1      	bne.n	8005aba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005b76:	6979      	ldr	r1, [r7, #20]
 8005b78:	4811      	ldr	r0, [pc, #68]	; (8005bc0 <low_level_output+0x138>)
 8005b7a:	f7fb fdef 	bl	800175c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <low_level_output+0x138>)
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b8c:	4413      	add	r3, r2
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <low_level_output+0x138>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ba0:	4413      	add	r3, r2
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	; (8005bc0 <low_level_output+0x138>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f241 0304 	movw	r3, #4100	; 0x1004
 8005bae:	4413      	add	r3, r2
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005bb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	200069d4 	.word	0x200069d4

08005bc4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b08c      	sub	sp, #48	; 0x30
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005be8:	484f      	ldr	r0, [pc, #316]	; (8005d28 <low_level_input+0x164>)
 8005bea:	f7fb fea1 	bl	8001930 <HAL_ETH_GetReceivedFrame_IT>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <low_level_input+0x34>

    return NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e092      	b.n	8005d1e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005bf8:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <low_level_input+0x164>)
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005bfe:	4b4a      	ldr	r3, [pc, #296]	; (8005d28 <low_level_input+0x164>)
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005c04:	89fb      	ldrh	r3, [r7, #14]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005c0a:	89fb      	ldrh	r3, [r7, #14]
 8005c0c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005c10:	4619      	mov	r1, r3
 8005c12:	2000      	movs	r0, #0
 8005c14:	f005 fb4c 	bl	800b2b0 <pbuf_alloc>
 8005c18:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d04b      	beq.n	8005cb8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c20:	4b41      	ldr	r3, [pc, #260]	; (8005d28 <low_level_input+0x164>)
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2e:	e040      	b.n	8005cb2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	895b      	ldrh	r3, [r3, #10]
 8005c34:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c3a:	e021      	b.n	8005c80 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	18d0      	adds	r0, r2, r3
 8005c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	18d1      	adds	r1, r2, r3
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	461a      	mov	r2, r3
 8005c54:	f00e f9ac 	bl	8013fb0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005c6e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005c7a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d8d6      	bhi.n	8005c3c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	18d0      	adds	r0, r2, r3
 8005c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f00e f986 	bl	8013fb0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1bb      	bne.n	8005c30 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <low_level_input+0x164>)
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
 8005cc2:	e00b      	b.n	8005cdc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <low_level_input+0x164>)
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d3ee      	bcc.n	8005cc4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005ce6:	4b10      	ldr	r3, [pc, #64]	; (8005d28 <low_level_input+0x164>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <low_level_input+0x164>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005cf4:	4413      	add	r3, r2
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005d00:	4b09      	ldr	r3, [pc, #36]	; (8005d28 <low_level_input+0x164>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d08:	4413      	add	r3, r2
 8005d0a:	2280      	movs	r2, #128	; 0x80
 8005d0c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005d0e:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <low_level_input+0x164>)
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f241 0308 	movw	r3, #4104	; 0x1008
 8005d16:	4413      	add	r3, r2
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	200069d4 	.word	0x200069d4

08005d2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d38:	4b12      	ldr	r3, [pc, #72]	; (8005d84 <ethernetif_input+0x58>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fc6d 	bl	8006620 <osSemaphoreAcquire>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f5      	bne.n	8005d38 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005d4c:	480e      	ldr	r0, [pc, #56]	; (8005d88 <ethernetif_input+0x5c>)
 8005d4e:	f00e f8a3 	bl	8013e98 <sys_mutex_lock>
        p = low_level_input( netif );
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7ff ff36 	bl	8005bc4 <low_level_input>
 8005d58:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	68b8      	ldr	r0, [r7, #8]
 8005d68:	4798      	blx	r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005d70:	68b8      	ldr	r0, [r7, #8]
 8005d72:	f005 fd81 	bl	800b878 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005d76:	4804      	ldr	r0, [pc, #16]	; (8005d88 <ethernetif_input+0x5c>)
 8005d78:	f00e f89d 	bl	8013eb6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e4      	bne.n	8005d4c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d82:	e7d9      	b.n	8005d38 <ethernetif_input+0xc>
 8005d84:	200000a4 	.word	0x200000a4
 8005d88:	2000822c 	.word	0x2000822c

08005d8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d106      	bne.n	8005da8 <ethernetif_init+0x1c>
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	; (8005dd4 <ethernetif_init+0x48>)
 8005d9c:	f240 223a 	movw	r2, #570	; 0x23a
 8005da0:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <ethernetif_init+0x4c>)
 8005da2:	480e      	ldr	r0, [pc, #56]	; (8005ddc <ethernetif_init+0x50>)
 8005da4:	f00e f934 	bl	8014010 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2273      	movs	r2, #115	; 0x73
 8005dac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2274      	movs	r2, #116	; 0x74
 8005db4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <ethernetif_init+0x54>)
 8005dbc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <ethernetif_init+0x58>)
 8005dc2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff fd8b 	bl	80058e0 <low_level_init>

  return ERR_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	080155b0 	.word	0x080155b0
 8005dd8:	080155cc 	.word	0x080155cc
 8005ddc:	080155dc 	.word	0x080155dc
 8005de0:	08011f5d 	.word	0x08011f5d
 8005de4:	08005a89 	.word	0x08005a89

08005de8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005dec:	f7fb f934 	bl	8001058 <HAL_GetTick>
 8005df0:	4603      	mov	r3, r0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2101      	movs	r1, #1
 8005e10:	4816      	ldr	r0, [pc, #88]	; (8005e6c <ethernetif_set_link+0x74>)
 8005e12:	f7fb fe90 	bl	8001b36 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <ethernetif_set_link+0x48>
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f005 f90b 	bl	800b054 <netif_set_link_up>
 8005e3e:	e011      	b.n	8005e64 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e48:	089b      	lsrs	r3, r3, #2
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <ethernetif_set_link+0x6c>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d104      	bne.n	8005e64 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f005 f92c 	bl	800b0bc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005e64:	20c8      	movs	r0, #200	; 0xc8
 8005e66:	f000 f9c9 	bl	80061fc <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e6a:	e7cd      	b.n	8005e08 <ethernetif_set_link+0x10>
 8005e6c:	200069d4 	.word	0x200069d4

08005e70 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d05d      	beq.n	8005f4e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005e92:	4b34      	ldr	r3, [pc, #208]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d03f      	beq.n	8005f1a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4830      	ldr	r0, [pc, #192]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005ea2:	f7fb feb0 	bl	8001c06 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005ea6:	f7fb f8d7 	bl	8001058 <HAL_GetTick>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	482b      	ldr	r0, [pc, #172]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005eb8:	f7fb fe3d 	bl	8001b36 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005ebc:	f7fb f8cc 	bl	8001058 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005eca:	d828      	bhi.n	8005f1e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0eb      	beq.n	8005eae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	461a      	mov	r2, r3
 8005edc:	2110      	movs	r1, #16
 8005ede:	4821      	ldr	r0, [pc, #132]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005ee0:	f7fb fe29 	bl	8001b36 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005eee:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	e002      	b.n	8005efe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005f08:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	609a      	str	r2, [r3, #8]
 8005f0e:	e016      	b.n	8005f3e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	e011      	b.n	8005f3e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <ethernetif_update_config+0xb0>
          goto error;
 8005f1e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005f20:	4b10      	ldr	r3, [pc, #64]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	08db      	lsrs	r3, r3, #3
 8005f26:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005f28:	4b0e      	ldr	r3, [pc, #56]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005f30:	4313      	orrs	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	2100      	movs	r1, #0
 8005f38:	480a      	ldr	r0, [pc, #40]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f3a:	f7fb fe64 	bl	8001c06 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4808      	ldr	r0, [pc, #32]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f42:	f7fb ff25 	bl	8001d90 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005f46:	4807      	ldr	r0, [pc, #28]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f48:	f7fb fec3 	bl	8001cd2 <HAL_ETH_Start>
 8005f4c:	e002      	b.n	8005f54 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005f4e:	4805      	ldr	r0, [pc, #20]	; (8005f64 <ethernetif_update_config+0xf4>)
 8005f50:	f7fb feee 	bl	8001d30 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f807 	bl	8005f68 <ethernetif_notify_conn_changed>
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	200069d4 	.word	0x200069d4

08005f68 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
	...

08005f8c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f92:	f3ef 8305 	mrs	r3, IPSR
 8005f96:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f98:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10f      	bne.n	8005fbe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa2:	607b      	str	r3, [r7, #4]
  return(result);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005faa:	f3ef 8311 	mrs	r3, BASEPRI
 8005fae:	603b      	str	r3, [r7, #0]
  return(result);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <osKernelInitialize+0x3a>
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ff0 <osKernelInitialize+0x64>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d103      	bne.n	8005fc6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005fbe:	f06f 0305 	mvn.w	r3, #5
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e00c      	b.n	8005fe0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <osKernelInitialize+0x64>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005fce:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <osKernelInitialize+0x64>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e002      	b.n	8005fe0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005fda:	f04f 33ff 	mov.w	r3, #4294967295
 8005fde:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	200000a8 	.word	0x200000a8

08005ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ffa:	f3ef 8305 	mrs	r3, IPSR
 8005ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8006000:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10f      	bne.n	8006026 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006006:	f3ef 8310 	mrs	r3, PRIMASK
 800600a:	607b      	str	r3, [r7, #4]
  return(result);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d105      	bne.n	800601e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006012:	f3ef 8311 	mrs	r3, BASEPRI
 8006016:	603b      	str	r3, [r7, #0]
  return(result);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <osKernelStart+0x3a>
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <osKernelStart+0x68>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b02      	cmp	r3, #2
 8006024:	d103      	bne.n	800602e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006026:	f06f 0305 	mvn.w	r3, #5
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e010      	b.n	8006050 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <osKernelStart+0x68>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d109      	bne.n	800604a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006036:	f7ff ffa1 	bl	8005f7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <osKernelStart+0x68>)
 800603c:	2202      	movs	r2, #2
 800603e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006040:	f002 f8f0 	bl	8008224 <vTaskStartScheduler>
      stat = osOK;
 8006044:	2300      	movs	r3, #0
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e002      	b.n	8006050 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	200000a8 	.word	0x200000a8

08006060 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006066:	f3ef 8305 	mrs	r3, IPSR
 800606a:	60bb      	str	r3, [r7, #8]
  return(result);
 800606c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10f      	bne.n	8006092 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	607b      	str	r3, [r7, #4]
  return(result);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d105      	bne.n	800608a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800607e:	f3ef 8311 	mrs	r3, BASEPRI
 8006082:	603b      	str	r3, [r7, #0]
  return(result);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d007      	beq.n	800609a <osKernelGetTickCount+0x3a>
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <osKernelGetTickCount+0x4c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d103      	bne.n	800609a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006092:	f002 f9ef 	bl	8008474 <xTaskGetTickCountFromISR>
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	e002      	b.n	80060a0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800609a:	f002 f9db 	bl	8008454 <xTaskGetTickCount>
 800609e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80060a0:	68fb      	ldr	r3, [r7, #12]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	200000a8 	.word	0x200000a8

080060b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af04      	add	r7, sp, #16
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c0:	f3ef 8305 	mrs	r3, IPSR
 80060c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80060c6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f040 808f 	bne.w	80061ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d105      	bne.n	80060e6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060da:	f3ef 8311 	mrs	r3, BASEPRI
 80060de:	617b      	str	r3, [r7, #20]
  return(result);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <osThreadNew+0x3e>
 80060e6:	4b44      	ldr	r3, [pc, #272]	; (80061f8 <osThreadNew+0x148>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d07e      	beq.n	80061ec <osThreadNew+0x13c>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d07b      	beq.n	80061ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80060f8:	2318      	movs	r3, #24
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006100:	f04f 33ff 	mov.w	r3, #4294967295
 8006104:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d045      	beq.n	8006198 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <osThreadNew+0x6a>
        name = attr->name;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <osThreadNew+0x90>
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b38      	cmp	r3, #56	; 0x38
 8006132:	d805      	bhi.n	8006140 <osThreadNew+0x90>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <osThreadNew+0x94>
        return (NULL);
 8006140:	2300      	movs	r3, #0
 8006142:	e054      	b.n	80061ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	089b      	lsrs	r3, r3, #2
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <osThreadNew+0xca>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b5b      	cmp	r3, #91	; 0x5b
 8006162:	d90a      	bls.n	800617a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <osThreadNew+0xca>
        mem = 1;
 8006174:	2301      	movs	r3, #1
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	e010      	b.n	800619c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10c      	bne.n	800619c <osThreadNew+0xec>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d108      	bne.n	800619c <osThreadNew+0xec>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <osThreadNew+0xec>
          mem = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	e001      	b.n	800619c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d110      	bne.n	80061c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80061aa:	9202      	str	r2, [sp, #8]
 80061ac:	9301      	str	r3, [sp, #4]
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f001 fe53 	bl	8007e64 <xTaskCreateStatic>
 80061be:	4603      	mov	r3, r0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e013      	b.n	80061ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d110      	bne.n	80061ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f107 0310 	add.w	r3, r7, #16
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f001 fea4 	bl	8007f2a <xTaskCreate>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d001      	beq.n	80061ec <osThreadNew+0x13c>
          hTask = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80061ec:	693b      	ldr	r3, [r7, #16]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3730      	adds	r7, #48	; 0x30
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	200000a8 	.word	0x200000a8

080061fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006204:	f3ef 8305 	mrs	r3, IPSR
 8006208:	613b      	str	r3, [r7, #16]
  return(result);
 800620a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10f      	bne.n	8006230 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60fb      	str	r3, [r7, #12]
  return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d105      	bne.n	8006228 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800621c:	f3ef 8311 	mrs	r3, BASEPRI
 8006220:	60bb      	str	r3, [r7, #8]
  return(result);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <osDelay+0x3c>
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <osDelay+0x58>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d103      	bne.n	8006238 <osDelay+0x3c>
    stat = osErrorISR;
 8006230:	f06f 0305 	mvn.w	r3, #5
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e007      	b.n	8006248 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006238:	2300      	movs	r3, #0
 800623a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f001 ffb8 	bl	80081b8 <vTaskDelay>
    }
  }

  return (stat);
 8006248:	697b      	ldr	r3, [r7, #20]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	200000a8 	.word	0x200000a8

08006258 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006264:	f3ef 8305 	mrs	r3, IPSR
 8006268:	613b      	str	r3, [r7, #16]
  return(result);
 800626a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800626c:	2b00      	cmp	r3, #0
 800626e:	f040 8085 	bne.w	800637c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006272:	f3ef 8310 	mrs	r3, PRIMASK
 8006276:	60fb      	str	r3, [r7, #12]
  return(result);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627e:	f3ef 8311 	mrs	r3, BASEPRI
 8006282:	60bb      	str	r3, [r7, #8]
  return(result);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <osMutexNew+0x3a>
 800628a:	4b3f      	ldr	r3, [pc, #252]	; (8006388 <osMutexNew+0x130>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d074      	beq.n	800637c <osMutexNew+0x124>
    if (attr != NULL) {
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	e001      	b.n	80062a4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <osMutexNew+0x5c>
      rmtx = 1U;
 80062ae:	2301      	movs	r3, #1
 80062b0:	61fb      	str	r3, [r7, #28]
 80062b2:	e001      	b.n	80062b8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d15c      	bne.n	800637c <osMutexNew+0x124>
      mem = -1;
 80062c2:	f04f 33ff 	mov.w	r3, #4294967295
 80062c6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d015      	beq.n	80062fa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d006      	beq.n	80062e4 <osMutexNew+0x8c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	2b4f      	cmp	r3, #79	; 0x4f
 80062dc:	d902      	bls.n	80062e4 <osMutexNew+0x8c>
          mem = 1;
 80062de:	2301      	movs	r3, #1
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e00c      	b.n	80062fe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <osMutexNew+0xa6>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <osMutexNew+0xa6>
            mem = 0;
 80062f4:	2300      	movs	r3, #0
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e001      	b.n	80062fe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d112      	bne.n	800632a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d007      	beq.n	800631a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4619      	mov	r1, r3
 8006310:	2004      	movs	r0, #4
 8006312:	f000 fe1a 	bl	8006f4a <xQueueCreateMutexStatic>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
 8006318:	e016      	b.n	8006348 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	4619      	mov	r1, r3
 8006320:	2001      	movs	r0, #1
 8006322:	f000 fe12 	bl	8006f4a <xQueueCreateMutexStatic>
 8006326:	6278      	str	r0, [r7, #36]	; 0x24
 8006328:	e00e      	b.n	8006348 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d004      	beq.n	8006340 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006336:	2004      	movs	r0, #4
 8006338:	f000 fdef 	bl	8006f1a <xQueueCreateMutex>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24
 800633e:	e003      	b.n	8006348 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006340:	2001      	movs	r0, #1
 8006342:	f000 fdea 	bl	8006f1a <xQueueCreateMutex>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00c      	beq.n	8006368 <osMutexNew+0x110>
        if (attr != NULL) {
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <osMutexNew+0x104>
          name = attr->name;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e001      	b.n	8006360 <osMutexNew+0x108>
        } else {
          name = NULL;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006364:	f001 fcf6 	bl	8007d54 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <osMutexNew+0x124>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800637e:	4618      	mov	r0, r3
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200000a8 	.word	0x200000a8

0800638c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f023 0301 	bic.w	r3, r3, #1
 800639c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063aa:	f3ef 8305 	mrs	r3, IPSR
 80063ae:	613b      	str	r3, [r7, #16]
  return(result);
 80063b0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10f      	bne.n	80063d6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b6:	f3ef 8310 	mrs	r3, PRIMASK
 80063ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d105      	bne.n	80063ce <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063c2:	f3ef 8311 	mrs	r3, BASEPRI
 80063c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <osMutexAcquire+0x52>
 80063ce:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <osMutexAcquire+0xb8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d103      	bne.n	80063de <osMutexAcquire+0x52>
    stat = osErrorISR;
 80063d6:	f06f 0305 	mvn.w	r3, #5
 80063da:	61fb      	str	r3, [r7, #28]
 80063dc:	e02c      	b.n	8006438 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80063e4:	f06f 0303 	mvn.w	r3, #3
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e025      	b.n	8006438 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d011      	beq.n	8006416 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	69b8      	ldr	r0, [r7, #24]
 80063f6:	f000 fdf9 	bl	8006fec <xQueueTakeMutexRecursive>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d01b      	beq.n	8006438 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006406:	f06f 0301 	mvn.w	r3, #1
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	e014      	b.n	8006438 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800640e:	f06f 0302 	mvn.w	r3, #2
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	e010      	b.n	8006438 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006416:	6839      	ldr	r1, [r7, #0]
 8006418:	69b8      	ldr	r0, [r7, #24]
 800641a:	f001 f9b3 	bl	8007784 <xQueueSemaphoreTake>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d009      	beq.n	8006438 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800642a:	f06f 0301 	mvn.w	r3, #1
 800642e:	61fb      	str	r3, [r7, #28]
 8006430:	e002      	b.n	8006438 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006432:	f06f 0302 	mvn.w	r3, #2
 8006436:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006438:	69fb      	ldr	r3, [r7, #28]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	200000a8 	.word	0x200000a8

08006448 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f023 0301 	bic.w	r3, r3, #1
 8006456:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006464:	f3ef 8305 	mrs	r3, IPSR
 8006468:	613b      	str	r3, [r7, #16]
  return(result);
 800646a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10f      	bne.n	8006490 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006470:	f3ef 8310 	mrs	r3, PRIMASK
 8006474:	60fb      	str	r3, [r7, #12]
  return(result);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800647c:	f3ef 8311 	mrs	r3, BASEPRI
 8006480:	60bb      	str	r3, [r7, #8]
  return(result);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <osMutexRelease+0x50>
 8006488:	4b16      	ldr	r3, [pc, #88]	; (80064e4 <osMutexRelease+0x9c>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d103      	bne.n	8006498 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006490:	f06f 0305 	mvn.w	r3, #5
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e01f      	b.n	80064d8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800649e:	f06f 0303 	mvn.w	r3, #3
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e018      	b.n	80064d8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d009      	beq.n	80064c0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80064ac:	69b8      	ldr	r0, [r7, #24]
 80064ae:	f000 fd67 	bl	8006f80 <xQueueGiveMutexRecursive>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d00f      	beq.n	80064d8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80064b8:	f06f 0302 	mvn.w	r3, #2
 80064bc:	61fb      	str	r3, [r7, #28]
 80064be:	e00b      	b.n	80064d8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80064c0:	2300      	movs	r3, #0
 80064c2:	2200      	movs	r2, #0
 80064c4:	2100      	movs	r1, #0
 80064c6:	69b8      	ldr	r0, [r7, #24]
 80064c8:	f000 fe3a 	bl	8007140 <xQueueGenericSend>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d002      	beq.n	80064d8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80064d2:	f06f 0302 	mvn.w	r3, #2
 80064d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80064d8:	69fb      	ldr	r3, [r7, #28]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	200000a8 	.word	0x200000a8

080064e8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af02      	add	r7, sp, #8
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064f8:	f3ef 8305 	mrs	r3, IPSR
 80064fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80064fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8086 	bne.w	8006612 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006506:	f3ef 8310 	mrs	r3, PRIMASK
 800650a:	617b      	str	r3, [r7, #20]
  return(result);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d105      	bne.n	800651e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006512:	f3ef 8311 	mrs	r3, BASEPRI
 8006516:	613b      	str	r3, [r7, #16]
  return(result);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <osSemaphoreNew+0x3e>
 800651e:	4b3f      	ldr	r3, [pc, #252]	; (800661c <osSemaphoreNew+0x134>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d075      	beq.n	8006612 <osSemaphoreNew+0x12a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d072      	beq.n	8006612 <osSemaphoreNew+0x12a>
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d86e      	bhi.n	8006612 <osSemaphoreNew+0x12a>
    mem = -1;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d015      	beq.n	800656c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <osSemaphoreNew+0x6e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	2b4f      	cmp	r3, #79	; 0x4f
 800654e:	d902      	bls.n	8006556 <osSemaphoreNew+0x6e>
        mem = 1;
 8006550:	2301      	movs	r3, #1
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	e00c      	b.n	8006570 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d108      	bne.n	8006570 <osSemaphoreNew+0x88>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d104      	bne.n	8006570 <osSemaphoreNew+0x88>
          mem = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	623b      	str	r3, [r7, #32]
 800656a:	e001      	b.n	8006570 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006576:	d04c      	beq.n	8006612 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d128      	bne.n	80065d0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d10a      	bne.n	800659a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2203      	movs	r2, #3
 800658a:	9200      	str	r2, [sp, #0]
 800658c:	2200      	movs	r2, #0
 800658e:	2100      	movs	r1, #0
 8006590:	2001      	movs	r0, #1
 8006592:	f000 fbc1 	bl	8006d18 <xQueueGenericCreateStatic>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24
 8006598:	e005      	b.n	80065a6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800659a:	2203      	movs	r2, #3
 800659c:	2100      	movs	r1, #0
 800659e:	2001      	movs	r0, #1
 80065a0:	f000 fc3c 	bl	8006e1c <xQueueGenericCreate>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d022      	beq.n	80065f2 <osSemaphoreNew+0x10a>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d01f      	beq.n	80065f2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80065b2:	2300      	movs	r3, #0
 80065b4:	2200      	movs	r2, #0
 80065b6:	2100      	movs	r1, #0
 80065b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ba:	f000 fdc1 	bl	8007140 <xQueueGenericSend>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d016      	beq.n	80065f2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80065c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065c6:	f001 fa77 	bl	8007ab8 <vQueueDelete>
            hSemaphore = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	627b      	str	r3, [r7, #36]	; 0x24
 80065ce:	e010      	b.n	80065f2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d108      	bne.n	80065e8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	461a      	mov	r2, r3
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fd3c 	bl	800705c <xQueueCreateCountingSemaphoreStatic>
 80065e4:	6278      	str	r0, [r7, #36]	; 0x24
 80065e6:	e004      	b.n	80065f2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80065e8:	68b9      	ldr	r1, [r7, #8]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fd71 	bl	80070d2 <xQueueCreateCountingSemaphore>
 80065f0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00c      	beq.n	8006612 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <osSemaphoreNew+0x11e>
          name = attr->name;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e001      	b.n	800660a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006606:	2300      	movs	r3, #0
 8006608:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800660a:	69f9      	ldr	r1, [r7, #28]
 800660c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800660e:	f001 fba1 	bl	8007d54 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006614:	4618      	mov	r0, r3
 8006616:	3728      	adds	r7, #40	; 0x28
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200000a8 	.word	0x200000a8

08006620 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d103      	bne.n	8006640 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006638:	f06f 0303 	mvn.w	r3, #3
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	e04b      	b.n	80066d8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006640:	f3ef 8305 	mrs	r3, IPSR
 8006644:	617b      	str	r3, [r7, #20]
  return(result);
 8006646:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664c:	f3ef 8310 	mrs	r3, PRIMASK
 8006650:	613b      	str	r3, [r7, #16]
  return(result);
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006658:	f3ef 8311 	mrs	r3, BASEPRI
 800665c:	60fb      	str	r3, [r7, #12]
  return(result);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d026      	beq.n	80066b2 <osSemaphoreAcquire+0x92>
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <osSemaphoreAcquire+0xc4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d122      	bne.n	80066b2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006672:	f06f 0303 	mvn.w	r3, #3
 8006676:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006678:	e02d      	b.n	80066d6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800667a:	2300      	movs	r3, #0
 800667c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800667e:	f107 0308 	add.w	r3, r7, #8
 8006682:	461a      	mov	r2, r3
 8006684:	2100      	movs	r1, #0
 8006686:	69b8      	ldr	r0, [r7, #24]
 8006688:	f001 f990 	bl	80079ac <xQueueReceiveFromISR>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d003      	beq.n	800669a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006692:	f06f 0302 	mvn.w	r3, #2
 8006696:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006698:	e01d      	b.n	80066d6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01a      	beq.n	80066d6 <osSemaphoreAcquire+0xb6>
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <osSemaphoreAcquire+0xc8>)
 80066a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80066b0:	e011      	b.n	80066d6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	69b8      	ldr	r0, [r7, #24]
 80066b6:	f001 f865 	bl	8007784 <xQueueSemaphoreTake>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d00b      	beq.n	80066d8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80066c6:	f06f 0301 	mvn.w	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
 80066cc:	e004      	b.n	80066d8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80066ce:	f06f 0302 	mvn.w	r3, #2
 80066d2:	61fb      	str	r3, [r7, #28]
 80066d4:	e000      	b.n	80066d8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80066d6:	bf00      	nop
      }
    }
  }

  return (stat);
 80066d8:	69fb      	ldr	r3, [r7, #28]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200000a8 	.word	0x200000a8
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d103      	bne.n	800670a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006702:	f06f 0303 	mvn.w	r3, #3
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	e03e      	b.n	8006788 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800670a:	f3ef 8305 	mrs	r3, IPSR
 800670e:	617b      	str	r3, [r7, #20]
  return(result);
 8006710:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10f      	bne.n	8006736 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006716:	f3ef 8310 	mrs	r3, PRIMASK
 800671a:	613b      	str	r3, [r7, #16]
  return(result);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006722:	f3ef 8311 	mrs	r3, BASEPRI
 8006726:	60fb      	str	r3, [r7, #12]
  return(result);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01e      	beq.n	800676c <osSemaphoreRelease+0x80>
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <osSemaphoreRelease+0xa8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d11a      	bne.n	800676c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006736:	2300      	movs	r3, #0
 8006738:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	4619      	mov	r1, r3
 8006740:	69b8      	ldr	r0, [r7, #24]
 8006742:	f000 fea3 	bl	800748c <xQueueGiveFromISR>
 8006746:	4603      	mov	r3, r0
 8006748:	2b01      	cmp	r3, #1
 800674a:	d003      	beq.n	8006754 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800674c:	f06f 0302 	mvn.w	r3, #2
 8006750:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006752:	e018      	b.n	8006786 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d015      	beq.n	8006786 <osSemaphoreRelease+0x9a>
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <osSemaphoreRelease+0xac>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800676a:	e00c      	b.n	8006786 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	69b8      	ldr	r0, [r7, #24]
 8006774:	f000 fce4 	bl	8007140 <xQueueGenericSend>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d004      	beq.n	8006788 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800677e:	f06f 0302 	mvn.w	r3, #2
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e000      	b.n	8006788 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006786:	bf00      	nop
    }
  }

  return (stat);
 8006788:	69fb      	ldr	r3, [r7, #28]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200000a8 	.word	0x200000a8
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b08c      	sub	sp, #48	; 0x30
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067a8:	2300      	movs	r3, #0
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ac:	f3ef 8305 	mrs	r3, IPSR
 80067b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80067b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d16f      	bne.n	8006898 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	617b      	str	r3, [r7, #20]
  return(result);
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c4:	f3ef 8311 	mrs	r3, BASEPRI
 80067c8:	613b      	str	r3, [r7, #16]
  return(result);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <osMessageQueueNew+0x3c>
 80067d0:	4b34      	ldr	r3, [pc, #208]	; (80068a4 <osMessageQueueNew+0x108>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d05f      	beq.n	8006898 <osMessageQueueNew+0xfc>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d05c      	beq.n	8006898 <osMessageQueueNew+0xfc>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d059      	beq.n	8006898 <osMessageQueueNew+0xfc>
    mem = -1;
 80067e4:	f04f 33ff 	mov.w	r3, #4294967295
 80067e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d029      	beq.n	8006844 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d012      	beq.n	800681e <osMessageQueueNew+0x82>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b4f      	cmp	r3, #79	; 0x4f
 80067fe:	d90e      	bls.n	800681e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	429a      	cmp	r2, r3
 8006816:	d302      	bcc.n	800681e <osMessageQueueNew+0x82>
        mem = 1;
 8006818:	2301      	movs	r3, #1
 800681a:	623b      	str	r3, [r7, #32]
 800681c:	e014      	b.n	8006848 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d110      	bne.n	8006848 <osMessageQueueNew+0xac>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <osMessageQueueNew+0xac>
          mem = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	e001      	b.n	8006848 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d10b      	bne.n	8006866 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2100      	movs	r1, #0
 8006858:	9100      	str	r1, [sp, #0]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 fa5b 	bl	8006d18 <xQueueGenericCreateStatic>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
 8006864:	e008      	b.n	8006878 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800686c:	2200      	movs	r2, #0
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 fad3 	bl	8006e1c <xQueueGenericCreate>
 8006876:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <osMessageQueueNew+0xf0>
        name = attr->name;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e001      	b.n	8006890 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006890:	69f9      	ldr	r1, [r7, #28]
 8006892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006894:	f001 fa5e 	bl	8007d54 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800689a:	4618      	mov	r0, r3
 800689c:	3728      	adds	r7, #40	; 0x28
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200000a8 	.word	0x200000a8

080068a8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068bc:	2300      	movs	r3, #0
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068c0:	f3ef 8305 	mrs	r3, IPSR
 80068c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80068c6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068cc:	f3ef 8310 	mrs	r3, PRIMASK
 80068d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d105      	bne.n	80068e4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d8:	f3ef 8311 	mrs	r3, BASEPRI
 80068dc:	617b      	str	r3, [r7, #20]
  return(result);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d02c      	beq.n	800693e <osMessageQueuePut+0x96>
 80068e4:	4b28      	ldr	r3, [pc, #160]	; (8006988 <osMessageQueuePut+0xe0>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d128      	bne.n	800693e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <osMessageQueuePut+0x56>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <osMessageQueuePut+0x56>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d003      	beq.n	8006906 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80068fe:	f06f 0303 	mvn.w	r3, #3
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006904:	e039      	b.n	800697a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800690a:	f107 0210 	add.w	r2, r7, #16
 800690e:	2300      	movs	r3, #0
 8006910:	68b9      	ldr	r1, [r7, #8]
 8006912:	6a38      	ldr	r0, [r7, #32]
 8006914:	f000 fd1a 	bl	800734c <xQueueGenericSendFromISR>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d003      	beq.n	8006926 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800691e:	f06f 0302 	mvn.w	r3, #2
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006924:	e029      	b.n	800697a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d026      	beq.n	800697a <osMessageQueuePut+0xd2>
 800692c:	4b17      	ldr	r3, [pc, #92]	; (800698c <osMessageQueuePut+0xe4>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800693c:	e01d      	b.n	800697a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <osMessageQueuePut+0xa2>
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800694a:	f06f 0303 	mvn.w	r3, #3
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	e014      	b.n	800697c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006952:	2300      	movs	r3, #0
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	6a38      	ldr	r0, [r7, #32]
 800695a:	f000 fbf1 	bl	8007140 <xQueueGenericSend>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d00b      	beq.n	800697c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800696a:	f06f 0301 	mvn.w	r3, #1
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	e004      	b.n	800697c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006972:	f06f 0302 	mvn.w	r3, #2
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
 8006978:	e000      	b.n	800697c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800697a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697e:	4618      	mov	r0, r3
 8006980:	3728      	adds	r7, #40	; 0x28
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	200000a8 	.word	0x200000a8
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a6:	f3ef 8305 	mrs	r3, IPSR
 80069aa:	61fb      	str	r3, [r7, #28]
  return(result);
 80069ac:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10f      	bne.n	80069d2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b2:	f3ef 8310 	mrs	r3, PRIMASK
 80069b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069be:	f3ef 8311 	mrs	r3, BASEPRI
 80069c2:	617b      	str	r3, [r7, #20]
  return(result);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d02c      	beq.n	8006a24 <osMessageQueueGet+0x94>
 80069ca:	4b28      	ldr	r3, [pc, #160]	; (8006a6c <osMessageQueueGet+0xdc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d128      	bne.n	8006a24 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d005      	beq.n	80069e4 <osMessageQueueGet+0x54>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <osMessageQueueGet+0x54>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80069e4:	f06f 0303 	mvn.w	r3, #3
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069ea:	e038      	b.n	8006a5e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80069ec:	2300      	movs	r3, #0
 80069ee:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80069f0:	f107 0310 	add.w	r3, r7, #16
 80069f4:	461a      	mov	r2, r3
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	6a38      	ldr	r0, [r7, #32]
 80069fa:	f000 ffd7 	bl	80079ac <xQueueReceiveFromISR>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d003      	beq.n	8006a0c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006a04:	f06f 0302 	mvn.w	r3, #2
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a0a:	e028      	b.n	8006a5e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d025      	beq.n	8006a5e <osMessageQueueGet+0xce>
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <osMessageQueueGet+0xe0>)
 8006a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a22:	e01c      	b.n	8006a5e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <osMessageQueueGet+0xa0>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d103      	bne.n	8006a38 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006a30:	f06f 0303 	mvn.w	r3, #3
 8006a34:	627b      	str	r3, [r7, #36]	; 0x24
 8006a36:	e013      	b.n	8006a60 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	6a38      	ldr	r0, [r7, #32]
 8006a3e:	f000 fdbb 	bl	80075b8 <xQueueReceive>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d00b      	beq.n	8006a60 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006a4e:	f06f 0301 	mvn.w	r3, #1
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	e004      	b.n	8006a60 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006a56:	f06f 0302 	mvn.w	r3, #2
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	e000      	b.n	8006a60 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3728      	adds	r7, #40	; 0x28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200000a8 	.word	0x200000a8
 8006a70:	e000ed04 	.word	0xe000ed04

08006a74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4a07      	ldr	r2, [pc, #28]	; (8006aa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4a06      	ldr	r2, [pc, #24]	; (8006aa4 <vApplicationGetIdleTaskMemory+0x30>)
 8006a8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	601a      	str	r2, [r3, #0]
}
 8006a92:	bf00      	nop
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	200000ac 	.word	0x200000ac
 8006aa4:	20000108 	.word	0x20000108

08006aa8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ab8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4a06      	ldr	r2, [pc, #24]	; (8006ad8 <vApplicationGetTimerTaskMemory+0x30>)
 8006abe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ac6:	601a      	str	r2, [r3, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20000308 	.word	0x20000308
 8006ad8:	20000364 	.word	0x20000364

08006adc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f103 0208 	add.w	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f04f 32ff 	mov.w	r2, #4294967295
 8006af4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f103 0208 	add.w	r2, r3, #8
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f103 0208 	add.w	r2, r3, #8
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	601a      	str	r2, [r3, #0]
}
 8006b72:	bf00      	nop
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b085      	sub	sp, #20
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b94:	d103      	bne.n	8006b9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	e00c      	b.n	8006bb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	e002      	b.n	8006bac <vListInsert+0x2e>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d2f6      	bcs.n	8006ba6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	601a      	str	r2, [r3, #0]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	6892      	ldr	r2, [r2, #8]
 8006c06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	6852      	ldr	r2, [r2, #4]
 8006c10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d103      	bne.n	8006c24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1e5a      	subs	r2, r3, #1
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10c      	bne.n	8006c72 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	b672      	cpsid	i
 8006c5e:	f383 8811 	msr	BASEPRI, r3
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	b662      	cpsie	i
 8006c6c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c6e:	bf00      	nop
 8006c70:	e7fe      	b.n	8006c70 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006c72:	f002 fda3 	bl	80097bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	441a      	add	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	22ff      	movs	r2, #255	; 0xff
 8006cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d114      	bne.n	8006cf2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01a      	beq.n	8006d06 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 fd4f 	bl	8008778 <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d012      	beq.n	8006d06 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ce0:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <xQueueGenericReset+0xd0>)
 8006ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	e009      	b.n	8006d06 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3310      	adds	r3, #16
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fef0 	bl	8006adc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3324      	adds	r3, #36	; 0x24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff feeb 	bl	8006adc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d06:	f002 fd8d 	bl	8009824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d0a:	2301      	movs	r3, #1
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
 8006d24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10c      	bne.n	8006d46 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	b672      	cpsid	i
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	b662      	cpsie	i
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10c      	bne.n	8006d66 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	b672      	cpsid	i
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	b662      	cpsie	i
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <xQueueGenericCreateStatic+0x5a>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <xQueueGenericCreateStatic+0x5e>
 8006d72:	2301      	movs	r3, #1
 8006d74:	e000      	b.n	8006d78 <xQueueGenericCreateStatic+0x60>
 8006d76:	2300      	movs	r3, #0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10c      	bne.n	8006d96 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	b672      	cpsid	i
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	b662      	cpsie	i
 8006d90:	623b      	str	r3, [r7, #32]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xQueueGenericCreateStatic+0x8a>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <xQueueGenericCreateStatic+0x8e>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e000      	b.n	8006da8 <xQueueGenericCreateStatic+0x90>
 8006da6:	2300      	movs	r3, #0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10c      	bne.n	8006dc6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	b672      	cpsid	i
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	b662      	cpsie	i
 8006dc0:	61fb      	str	r3, [r7, #28]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006dc6:	2350      	movs	r3, #80	; 0x50
 8006dc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2b50      	cmp	r3, #80	; 0x50
 8006dce:	d00c      	beq.n	8006dea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	b672      	cpsid	i
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	b662      	cpsie	i
 8006de4:	61bb      	str	r3, [r7, #24]
}
 8006de6:	bf00      	nop
 8006de8:	e7fe      	b.n	8006de8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00d      	beq.n	8006e12 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 f847 	bl	8006ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3730      	adds	r7, #48	; 0x30
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10c      	bne.n	8006e4a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	b672      	cpsid	i
 8006e36:	f383 8811 	msr	BASEPRI, r3
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	b662      	cpsie	i
 8006e44:	613b      	str	r3, [r7, #16]
}
 8006e46:	bf00      	nop
 8006e48:	e7fe      	b.n	8006e48 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	e004      	b.n	8006e60 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
 8006e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	3350      	adds	r3, #80	; 0x50
 8006e64:	4618      	mov	r0, r3
 8006e66:	f002 fdd5 	bl	8009a14 <pvPortMalloc>
 8006e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d011      	beq.n	8006e96 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	3350      	adds	r3, #80	; 0x50
 8006e7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e84:	79fa      	ldrb	r2, [r7, #7]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f805 	bl	8006ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e96:	69bb      	ldr	r3, [r7, #24]
	}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ece:	2101      	movs	r1, #1
 8006ed0:	69b8      	ldr	r0, [r7, #24]
 8006ed2:	f7ff feb7 	bl	8006c44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	78fa      	ldrb	r2, [r7, #3]
 8006eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006f06:	2300      	movs	r3, #0
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f917 	bl	8007140 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b086      	sub	sp, #24
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	4603      	mov	r3, r0
 8006f22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f24:	2301      	movs	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	6939      	ldr	r1, [r7, #16]
 8006f32:	6978      	ldr	r0, [r7, #20]
 8006f34:	f7ff ff72 	bl	8006e1c <xQueueGenericCreate>
 8006f38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f7ff ffd3 	bl	8006ee6 <prvInitialiseMutex>

		return xNewQueue;
 8006f40:	68fb      	ldr	r3, [r7, #12]
	}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b088      	sub	sp, #32
 8006f4e:	af02      	add	r7, sp, #8
 8006f50:	4603      	mov	r3, r0
 8006f52:	6039      	str	r1, [r7, #0]
 8006f54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2200      	movs	r2, #0
 8006f66:	6939      	ldr	r1, [r7, #16]
 8006f68:	6978      	ldr	r0, [r7, #20]
 8006f6a:	f7ff fed5 	bl	8006d18 <xQueueGenericCreateStatic>
 8006f6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f7ff ffb8 	bl	8006ee6 <prvInitialiseMutex>

		return xNewQueue;
 8006f76:	68fb      	ldr	r3, [r7, #12]
	}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	b672      	cpsid	i
 8006f98:	f383 8811 	msr	BASEPRI, r3
 8006f9c:	f3bf 8f6f 	isb	sy
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	b662      	cpsie	i
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	689c      	ldr	r4, [r3, #8]
 8006fb0:	f001 fda8 	bl	8008b04 <xTaskGetCurrentTaskHandle>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d111      	bne.n	8006fde <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	1e5a      	subs	r2, r3, #1
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d105      	bne.n	8006fd8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006fcc:	2300      	movs	r3, #0
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	6938      	ldr	r0, [r7, #16]
 8006fd4:	f000 f8b4 	bl	8007140 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e001      	b.n	8006fe2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006fe2:	697b      	ldr	r3, [r7, #20]
	}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd90      	pop	{r4, r7, pc}

08006fec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10c      	bne.n	800701a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	b672      	cpsid	i
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	b662      	cpsie	i
 8007014:	60fb      	str	r3, [r7, #12]
}
 8007016:	bf00      	nop
 8007018:	e7fe      	b.n	8007018 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	689c      	ldr	r4, [r3, #8]
 800701e:	f001 fd71 	bl	8008b04 <xTaskGetCurrentTaskHandle>
 8007022:	4603      	mov	r3, r0
 8007024:	429c      	cmp	r4, r3
 8007026:	d107      	bne.n	8007038 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	e00c      	b.n	8007052 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f000 fba2 	bl	8007784 <xQueueSemaphoreTake>
 8007040:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007052:	697b      	ldr	r3, [r7, #20]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	bd90      	pop	{r4, r7, pc}

0800705c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	; 0x28
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10c      	bne.n	8007088 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	b672      	cpsid	i
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	b662      	cpsie	i
 8007082:	61bb      	str	r3, [r7, #24]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	429a      	cmp	r2, r3
 800708e:	d90c      	bls.n	80070aa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	b672      	cpsid	i
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	b662      	cpsie	i
 80070a4:	617b      	str	r3, [r7, #20]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070aa:	2302      	movs	r3, #2
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff fe2f 	bl	8006d18 <xQueueGenericCreateStatic>
 80070ba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070c8:	69fb      	ldr	r3, [r7, #28]
	}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b086      	sub	sp, #24
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10c      	bne.n	80070fc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	b672      	cpsid	i
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	b662      	cpsie	i
 80070f6:	613b      	str	r3, [r7, #16]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d90c      	bls.n	800711e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	b672      	cpsid	i
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	b662      	cpsie	i
 8007118:	60fb      	str	r3, [r7, #12]
}
 800711a:	bf00      	nop
 800711c:	e7fe      	b.n	800711c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800711e:	2202      	movs	r2, #2
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff fe7a 	bl	8006e1c <xQueueGenericCreate>
 8007128:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007136:	697b      	ldr	r3, [r7, #20]
	}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800714e:	2300      	movs	r3, #0
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10c      	bne.n	8007176 <xQueueGenericSend+0x36>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	b672      	cpsid	i
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	b662      	cpsie	i
 8007170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007172:	bf00      	nop
 8007174:	e7fe      	b.n	8007174 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d103      	bne.n	8007184 <xQueueGenericSend+0x44>
 800717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <xQueueGenericSend+0x48>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <xQueueGenericSend+0x4a>
 8007188:	2300      	movs	r3, #0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10c      	bne.n	80071a8 <xQueueGenericSend+0x68>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	b672      	cpsid	i
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	b662      	cpsie	i
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d103      	bne.n	80071b6 <xQueueGenericSend+0x76>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <xQueueGenericSend+0x7a>
 80071b6:	2301      	movs	r3, #1
 80071b8:	e000      	b.n	80071bc <xQueueGenericSend+0x7c>
 80071ba:	2300      	movs	r3, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10c      	bne.n	80071da <xQueueGenericSend+0x9a>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	b672      	cpsid	i
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	b662      	cpsie	i
 80071d4:	623b      	str	r3, [r7, #32]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071da:	f001 fca3 	bl	8008b24 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <xQueueGenericSend+0xaa>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueGenericSend+0xae>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueGenericSend+0xb0>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10c      	bne.n	800720e <xQueueGenericSend+0xce>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	b672      	cpsid	i
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	b662      	cpsie	i
 8007208:	61fb      	str	r3, [r7, #28]
}
 800720a:	bf00      	nop
 800720c:	e7fe      	b.n	800720c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720e:	f002 fad5 	bl	80097bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <xQueueGenericSend+0xe4>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d129      	bne.n	8007278 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722a:	f000 fc82 	bl	8007b32 <prvCopyDataToQueue>
 800722e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	3324      	adds	r3, #36	; 0x24
 800723c:	4618      	mov	r0, r3
 800723e:	f001 fa9b 	bl	8008778 <xTaskRemoveFromEventList>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007248:	4b3f      	ldr	r3, [pc, #252]	; (8007348 <xQueueGenericSend+0x208>)
 800724a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	e00a      	b.n	8007270 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007260:	4b39      	ldr	r3, [pc, #228]	; (8007348 <xQueueGenericSend+0x208>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007270:	f002 fad8 	bl	8009824 <vPortExitCritical>
				return pdPASS;
 8007274:	2301      	movs	r3, #1
 8007276:	e063      	b.n	8007340 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800727e:	f002 fad1 	bl	8009824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007282:	2300      	movs	r3, #0
 8007284:	e05c      	b.n	8007340 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4618      	mov	r0, r3
 8007292:	f001 fad7 	bl	8008844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800729a:	f002 fac3 	bl	8009824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800729e:	f001 f82b 	bl	80082f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072a2:	f002 fa8b 	bl	80097bc <vPortEnterCritical>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072ac:	b25b      	sxtb	r3, r3
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d103      	bne.n	80072bc <xQueueGenericSend+0x17c>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d103      	bne.n	80072d2 <xQueueGenericSend+0x192>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072d2:	f002 faa7 	bl	8009824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d6:	1d3a      	adds	r2, r7, #4
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fac6 	bl	8008870 <xTaskCheckForTimeOut>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d124      	bne.n	8007334 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072ec:	f000 fd19 	bl	8007d22 <prvIsQueueFull>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d018      	beq.n	8007328 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	3310      	adds	r3, #16
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f001 f9e6 	bl	80086d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007306:	f000 fca4 	bl	8007c52 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800730a:	f001 f803 	bl	8008314 <xTaskResumeAll>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f af7c 	bne.w	800720e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007316:	4b0c      	ldr	r3, [pc, #48]	; (8007348 <xQueueGenericSend+0x208>)
 8007318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	e772      	b.n	800720e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800732a:	f000 fc92 	bl	8007c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732e:	f000 fff1 	bl	8008314 <xTaskResumeAll>
 8007332:	e76c      	b.n	800720e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007336:	f000 fc8c 	bl	8007c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800733a:	f000 ffeb 	bl	8008314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800733e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007340:	4618      	mov	r0, r3
 8007342:	3738      	adds	r7, #56	; 0x38
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b08e      	sub	sp, #56	; 0x38
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10c      	bne.n	800737e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	b672      	cpsid	i
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	b662      	cpsie	i
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <xQueueGenericSendFromISR+0x40>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <xQueueGenericSendFromISR+0x44>
 800738c:	2301      	movs	r3, #1
 800738e:	e000      	b.n	8007392 <xQueueGenericSendFromISR+0x46>
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10c      	bne.n	80073b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	623b      	str	r3, [r7, #32]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d103      	bne.n	80073be <xQueueGenericSendFromISR+0x72>
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <xQueueGenericSendFromISR+0x76>
 80073be:	2301      	movs	r3, #1
 80073c0:	e000      	b.n	80073c4 <xQueueGenericSendFromISR+0x78>
 80073c2:	2300      	movs	r3, #0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10c      	bne.n	80073e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	b672      	cpsid	i
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	b662      	cpsie	i
 80073dc:	61fb      	str	r3, [r7, #28]
}
 80073de:	bf00      	nop
 80073e0:	e7fe      	b.n	80073e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073e2:	f002 fad3 	bl	800998c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073e6:	f3ef 8211 	mrs	r2, BASEPRI
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	b672      	cpsid	i
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	b662      	cpsie	i
 80073fe:	61ba      	str	r2, [r7, #24]
 8007400:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007402:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	429a      	cmp	r2, r3
 8007410:	d302      	bcc.n	8007418 <xQueueGenericSendFromISR+0xcc>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d12c      	bne.n	8007472 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007428:	f000 fb83 	bl	8007b32 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800742c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d112      	bne.n	800745c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	2b00      	cmp	r3, #0
 800743c:	d016      	beq.n	800746c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	3324      	adds	r3, #36	; 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f001 f998 	bl	8008778 <xTaskRemoveFromEventList>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00e      	beq.n	800746c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	e007      	b.n	800746c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800745c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007460:	3301      	adds	r3, #1
 8007462:	b2db      	uxtb	r3, r3
 8007464:	b25a      	sxtb	r2, r3
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800746c:	2301      	movs	r3, #1
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007470:	e001      	b.n	8007476 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007472:	2300      	movs	r3, #0
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007480:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007484:	4618      	mov	r0, r3
 8007486:	3738      	adds	r7, #56	; 0x38
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08e      	sub	sp, #56	; 0x38
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10c      	bne.n	80074ba <xQueueGiveFromISR+0x2e>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	623b      	str	r3, [r7, #32]
}
 80074b6:	bf00      	nop
 80074b8:	e7fe      	b.n	80074b8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00c      	beq.n	80074dc <xQueueGiveFromISR+0x50>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	61fb      	str	r3, [r7, #28]
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <xQueueGiveFromISR+0x60>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <xQueueGiveFromISR+0x64>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xQueueGiveFromISR+0x66>
 80074f0:	2300      	movs	r3, #0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10c      	bne.n	8007510 <xQueueGiveFromISR+0x84>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	61bb      	str	r3, [r7, #24]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007510:	f002 fa3c 	bl	800998c <vPortValidateInterruptPriority>
	__asm volatile
 8007514:	f3ef 8211 	mrs	r2, BASEPRI
 8007518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751c:	b672      	cpsid	i
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	b662      	cpsie	i
 800752c:	617a      	str	r2, [r7, #20]
 800752e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007530:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007532:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007540:	429a      	cmp	r2, r3
 8007542:	d22b      	bcs.n	800759c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800754a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007556:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d112      	bne.n	8007586 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	2b00      	cmp	r3, #0
 8007566:	d016      	beq.n	8007596 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	3324      	adds	r3, #36	; 0x24
 800756c:	4618      	mov	r0, r3
 800756e:	f001 f903 	bl	8008778 <xTaskRemoveFromEventList>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00b      	beq.n	8007596 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2201      	movs	r2, #1
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	e007      	b.n	8007596 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758a:	3301      	adds	r3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	b25a      	sxtb	r2, r3
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007596:	2301      	movs	r3, #1
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
 800759a:	e001      	b.n	80075a0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800759c:	2300      	movs	r3, #0
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f383 8811 	msr	BASEPRI, r3
}
 80075aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3738      	adds	r7, #56	; 0x38
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08c      	sub	sp, #48	; 0x30
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10c      	bne.n	80075ec <xQueueReceive+0x34>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	b672      	cpsid	i
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	b662      	cpsie	i
 80075e6:	623b      	str	r3, [r7, #32]
}
 80075e8:	bf00      	nop
 80075ea:	e7fe      	b.n	80075ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d103      	bne.n	80075fa <xQueueReceive+0x42>
 80075f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <xQueueReceive+0x46>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <xQueueReceive+0x48>
 80075fe:	2300      	movs	r3, #0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10c      	bne.n	800761e <xQueueReceive+0x66>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	b672      	cpsid	i
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	b662      	cpsie	i
 8007618:	61fb      	str	r3, [r7, #28]
}
 800761a:	bf00      	nop
 800761c:	e7fe      	b.n	800761c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800761e:	f001 fa81 	bl	8008b24 <xTaskGetSchedulerState>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <xQueueReceive+0x76>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <xQueueReceive+0x7a>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <xQueueReceive+0x7c>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10c      	bne.n	8007652 <xQueueReceive+0x9a>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	b672      	cpsid	i
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	b662      	cpsie	i
 800764c:	61bb      	str	r3, [r7, #24]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007652:	f002 f8b3 	bl	80097bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01f      	beq.n	80076a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007666:	f000 face 	bl	8007c06 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00f      	beq.n	800769a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767c:	3310      	adds	r3, #16
 800767e:	4618      	mov	r0, r3
 8007680:	f001 f87a 	bl	8008778 <xTaskRemoveFromEventList>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800768a:	4b3d      	ldr	r3, [pc, #244]	; (8007780 <xQueueReceive+0x1c8>)
 800768c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007690:	601a      	str	r2, [r3, #0]
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800769a:	f002 f8c3 	bl	8009824 <vPortExitCritical>
				return pdPASS;
 800769e:	2301      	movs	r3, #1
 80076a0:	e069      	b.n	8007776 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d103      	bne.n	80076b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076a8:	f002 f8bc 	bl	8009824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e062      	b.n	8007776 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076b6:	f107 0310 	add.w	r3, r7, #16
 80076ba:	4618      	mov	r0, r3
 80076bc:	f001 f8c2 	bl	8008844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076c4:	f002 f8ae 	bl	8009824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076c8:	f000 fe16 	bl	80082f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076cc:	f002 f876 	bl	80097bc <vPortEnterCritical>
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d103      	bne.n	80076e6 <xQueueReceive+0x12e>
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076ec:	b25b      	sxtb	r3, r3
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d103      	bne.n	80076fc <xQueueReceive+0x144>
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fc:	f002 f892 	bl	8009824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007700:	1d3a      	adds	r2, r7, #4
 8007702:	f107 0310 	add.w	r3, r7, #16
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f001 f8b1 	bl	8008870 <xTaskCheckForTimeOut>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d123      	bne.n	800775c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007716:	f000 faee 	bl	8007cf6 <prvIsQueueEmpty>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d017      	beq.n	8007750 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	3324      	adds	r3, #36	; 0x24
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f000 ffd1 	bl	80086d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800772e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007730:	f000 fa8f 	bl	8007c52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007734:	f000 fdee 	bl	8008314 <xTaskResumeAll>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d189      	bne.n	8007652 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <xQueueReceive+0x1c8>)
 8007740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007744:	601a      	str	r2, [r3, #0]
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	e780      	b.n	8007652 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007752:	f000 fa7e 	bl	8007c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007756:	f000 fddd 	bl	8008314 <xTaskResumeAll>
 800775a:	e77a      	b.n	8007652 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800775c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800775e:	f000 fa78 	bl	8007c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007762:	f000 fdd7 	bl	8008314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007768:	f000 fac5 	bl	8007cf6 <prvIsQueueEmpty>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	f43f af6f 	beq.w	8007652 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007774:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007776:	4618      	mov	r0, r3
 8007778:	3730      	adds	r7, #48	; 0x30
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	e000ed04 	.word	0xe000ed04

08007784 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08e      	sub	sp, #56	; 0x38
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007796:	2300      	movs	r3, #0
 8007798:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10c      	bne.n	80077ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	623b      	str	r3, [r7, #32]
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80077ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00c      	beq.n	80077dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	b672      	cpsid	i
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	b662      	cpsie	i
 80077d6:	61fb      	str	r3, [r7, #28]
}
 80077d8:	bf00      	nop
 80077da:	e7fe      	b.n	80077da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077dc:	f001 f9a2 	bl	8008b24 <xTaskGetSchedulerState>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <xQueueSemaphoreTake+0x68>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <xQueueSemaphoreTake+0x6c>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <xQueueSemaphoreTake+0x6e>
 80077f0:	2300      	movs	r3, #0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10c      	bne.n	8007810 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80077f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fa:	b672      	cpsid	i
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	b662      	cpsie	i
 800780a:	61bb      	str	r3, [r7, #24]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007810:	f001 ffd4 	bl	80097bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	2b00      	cmp	r3, #0
 800781e:	d024      	beq.n	800786a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	1e5a      	subs	r2, r3, #1
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d104      	bne.n	800783a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007830:	f001 faf6 	bl	8008e20 <pvTaskIncrementMutexHeldCount>
 8007834:	4602      	mov	r2, r0
 8007836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007838:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800783a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	3310      	adds	r3, #16
 8007846:	4618      	mov	r0, r3
 8007848:	f000 ff96 	bl	8008778 <xTaskRemoveFromEventList>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d007      	beq.n	8007862 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007852:	4b55      	ldr	r3, [pc, #340]	; (80079a8 <xQueueSemaphoreTake+0x224>)
 8007854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007862:	f001 ffdf 	bl	8009824 <vPortExitCritical>
				return pdPASS;
 8007866:	2301      	movs	r3, #1
 8007868:	e099      	b.n	800799e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d113      	bne.n	8007898 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	b672      	cpsid	i
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	b662      	cpsie	i
 800788a:	617b      	str	r3, [r7, #20]
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007890:	f001 ffc8 	bl	8009824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007894:	2300      	movs	r3, #0
 8007896:	e082      	b.n	800799e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800789e:	f107 030c 	add.w	r3, r7, #12
 80078a2:	4618      	mov	r0, r3
 80078a4:	f000 ffce 	bl	8008844 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078a8:	2301      	movs	r3, #1
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078ac:	f001 ffba 	bl	8009824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078b0:	f000 fd22 	bl	80082f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078b4:	f001 ff82 	bl	80097bc <vPortEnterCritical>
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078be:	b25b      	sxtb	r3, r3
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d103      	bne.n	80078ce <xQueueSemaphoreTake+0x14a>
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078d4:	b25b      	sxtb	r3, r3
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d103      	bne.n	80078e4 <xQueueSemaphoreTake+0x160>
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078e4:	f001 ff9e 	bl	8009824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078e8:	463a      	mov	r2, r7
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 ffbd 	bl	8008870 <xTaskCheckForTimeOut>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d132      	bne.n	8007962 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078fe:	f000 f9fa 	bl	8007cf6 <prvIsQueueEmpty>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d026      	beq.n	8007956 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d109      	bne.n	8007924 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007910:	f001 ff54 	bl	80097bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4618      	mov	r0, r3
 800791a:	f001 f921 	bl	8008b60 <xTaskPriorityInherit>
 800791e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007920:	f001 ff80 	bl	8009824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007926:	3324      	adds	r3, #36	; 0x24
 8007928:	683a      	ldr	r2, [r7, #0]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fecf 	bl	80086d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007934:	f000 f98d 	bl	8007c52 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007938:	f000 fcec 	bl	8008314 <xTaskResumeAll>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	f47f af66 	bne.w	8007810 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007944:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <xQueueSemaphoreTake+0x224>)
 8007946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794a:	601a      	str	r2, [r3, #0]
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	e75c      	b.n	8007810 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007958:	f000 f97b 	bl	8007c52 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800795c:	f000 fcda 	bl	8008314 <xTaskResumeAll>
 8007960:	e756      	b.n	8007810 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007964:	f000 f975 	bl	8007c52 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007968:	f000 fcd4 	bl	8008314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800796c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800796e:	f000 f9c2 	bl	8007cf6 <prvIsQueueEmpty>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	f43f af4b 	beq.w	8007810 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007980:	f001 ff1c 	bl	80097bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007986:	f000 f8bc 	bl	8007b02 <prvGetDisinheritPriorityAfterTimeout>
 800798a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800798c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007992:	4618      	mov	r0, r3
 8007994:	f001 f9be 	bl	8008d14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007998:	f001 ff44 	bl	8009824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800799c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3738      	adds	r7, #56	; 0x38
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	e000ed04 	.word	0xe000ed04

080079ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08e      	sub	sp, #56	; 0x38
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10c      	bne.n	80079dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	b672      	cpsid	i
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	b662      	cpsie	i
 80079d6:	623b      	str	r3, [r7, #32]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d103      	bne.n	80079ea <xQueueReceiveFromISR+0x3e>
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <xQueueReceiveFromISR+0x42>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <xQueueReceiveFromISR+0x44>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10c      	bne.n	8007a0e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f8:	b672      	cpsid	i
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	b662      	cpsie	i
 8007a08:	61fb      	str	r3, [r7, #28]
}
 8007a0a:	bf00      	nop
 8007a0c:	e7fe      	b.n	8007a0c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a0e:	f001 ffbd 	bl	800998c <vPortValidateInterruptPriority>
	__asm volatile
 8007a12:	f3ef 8211 	mrs	r2, BASEPRI
 8007a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1a:	b672      	cpsid	i
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	b662      	cpsie	i
 8007a2a:	61ba      	str	r2, [r7, #24]
 8007a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d02f      	beq.n	8007a9e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a4c:	f000 f8db 	bl	8007c06 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	1e5a      	subs	r2, r3, #1
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d112      	bne.n	8007a88 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fe82 	bl	8008778 <xTaskRemoveFromEventList>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00e      	beq.n	8007a98 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e007      	b.n	8007a98 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	b25a      	sxtb	r2, r3
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9c:	e001      	b.n	8007aa2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f383 8811 	msr	BASEPRI, r3
}
 8007aac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3738      	adds	r7, #56	; 0x38
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10c      	bne.n	8007ae4 <vQueueDelete+0x2c>
	__asm volatile
 8007aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ace:	b672      	cpsid	i
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	b662      	cpsie	i
 8007ade:	60bb      	str	r3, [r7, #8]
}
 8007ae0:	bf00      	nop
 8007ae2:	e7fe      	b.n	8007ae2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f95f 	bl	8007da8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f002 f857 	bl	8009ba8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d006      	beq.n	8007b20 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	e001      	b.n	8007b24 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b20:	2300      	movs	r3, #0
 8007b22:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b24:	68fb      	ldr	r3, [r7, #12]
	}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3714      	adds	r7, #20
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	60b9      	str	r1, [r7, #8]
 8007b3c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b46:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10d      	bne.n	8007b6c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d14d      	bne.n	8007bf4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f001 f867 	bl	8008c30 <xTaskPriorityDisinherit>
 8007b62:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	609a      	str	r2, [r3, #8]
 8007b6a:	e043      	b.n	8007bf4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d119      	bne.n	8007ba6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6858      	ldr	r0, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	f00c fa17 	bl	8013fb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685a      	ldr	r2, [r3, #4]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8a:	441a      	add	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d32b      	bcc.n	8007bf4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	605a      	str	r2, [r3, #4]
 8007ba4:	e026      	b.n	8007bf4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	68d8      	ldr	r0, [r3, #12]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	461a      	mov	r2, r3
 8007bb0:	68b9      	ldr	r1, [r7, #8]
 8007bb2:	f00c f9fd 	bl	8013fb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbe:	425b      	negs	r3, r3
 8007bc0:	441a      	add	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d207      	bcs.n	8007be2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	425b      	negs	r3, r3
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d105      	bne.n	8007bf4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1c5a      	adds	r2, r3, #1
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007bfc:	697b      	ldr	r3, [r7, #20]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d018      	beq.n	8007c4a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c20:	441a      	add	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d303      	bcc.n	8007c3a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68d9      	ldr	r1, [r3, #12]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	461a      	mov	r2, r3
 8007c44:	6838      	ldr	r0, [r7, #0]
 8007c46:	f00c f9b3 	bl	8013fb0 <memcpy>
	}
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b084      	sub	sp, #16
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c5a:	f001 fdaf 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c64:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c66:	e011      	b.n	8007c8c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d012      	beq.n	8007c96 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3324      	adds	r3, #36	; 0x24
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fd7f 	bl	8008778 <xTaskRemoveFromEventList>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c80:	f000 fe5c 	bl	800893c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	dce9      	bgt.n	8007c68 <prvUnlockQueue+0x16>
 8007c94:	e000      	b.n	8007c98 <prvUnlockQueue+0x46>
					break;
 8007c96:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	22ff      	movs	r2, #255	; 0xff
 8007c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ca0:	f001 fdc0 	bl	8009824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ca4:	f001 fd8a 	bl	80097bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cb0:	e011      	b.n	8007cd6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d012      	beq.n	8007ce0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3310      	adds	r3, #16
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fd5a 	bl	8008778 <xTaskRemoveFromEventList>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d001      	beq.n	8007cce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cca:	f000 fe37 	bl	800893c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dce9      	bgt.n	8007cb2 <prvUnlockQueue+0x60>
 8007cde:	e000      	b.n	8007ce2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ce0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	22ff      	movs	r2, #255	; 0xff
 8007ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007cea:	f001 fd9b 	bl	8009824 <vPortExitCritical>
}
 8007cee:	bf00      	nop
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cfe:	f001 fd5d 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	e001      	b.n	8007d14 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d14:	f001 fd86 	bl	8009824 <vPortExitCritical>

	return xReturn;
 8007d18:	68fb      	ldr	r3, [r7, #12]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d2a:	f001 fd47 	bl	80097bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d102      	bne.n	8007d40 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e001      	b.n	8007d44 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d44:	f001 fd6e 	bl	8009824 <vPortExitCritical>

	return xReturn;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
 8007d62:	e014      	b.n	8007d8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d64:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <vQueueAddToRegistry+0x50>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10b      	bne.n	8007d88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d70:	490c      	ldr	r1, [pc, #48]	; (8007da4 <vQueueAddToRegistry+0x50>)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	683a      	ldr	r2, [r7, #0]
 8007d76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d7a:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <vQueueAddToRegistry+0x50>)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	00db      	lsls	r3, r3, #3
 8007d80:	4413      	add	r3, r2
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d86:	e006      	b.n	8007d96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b07      	cmp	r3, #7
 8007d92:	d9e7      	bls.n	8007d64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	200081ec 	.word	0x200081ec

08007da8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007db0:	2300      	movs	r3, #0
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e016      	b.n	8007de4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007db6:	4a10      	ldr	r2, [pc, #64]	; (8007df8 <vQueueUnregisterQueue+0x50>)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d10b      	bne.n	8007dde <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dc6:	4a0c      	ldr	r2, [pc, #48]	; (8007df8 <vQueueUnregisterQueue+0x50>)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007dd0:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <vQueueUnregisterQueue+0x50>)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	2200      	movs	r2, #0
 8007dda:	605a      	str	r2, [r3, #4]
				break;
 8007ddc:	e006      	b.n	8007dec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	3301      	adds	r3, #1
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b07      	cmp	r3, #7
 8007de8:	d9e5      	bls.n	8007db6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	200081ec 	.word	0x200081ec

08007dfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e0c:	f001 fcd6 	bl	80097bc <vPortEnterCritical>
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d103      	bne.n	8007e26 <vQueueWaitForMessageRestricted+0x2a>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e2c:	b25b      	sxtb	r3, r3
 8007e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e32:	d103      	bne.n	8007e3c <vQueueWaitForMessageRestricted+0x40>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e3c:	f001 fcf2 	bl	8009824 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	3324      	adds	r3, #36	; 0x24
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fc63 	bl	800871c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	f7ff fefb 	bl	8007c52 <prvUnlockQueue>
	}
 8007e5c:	bf00      	nop
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08e      	sub	sp, #56	; 0x38
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
 8007e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10c      	bne.n	8007e92 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7c:	b672      	cpsid	i
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	b662      	cpsie	i
 8007e8c:	623b      	str	r3, [r7, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10c      	bne.n	8007eb2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	b672      	cpsid	i
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	b662      	cpsie	i
 8007eac:	61fb      	str	r3, [r7, #28]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007eb2:	235c      	movs	r3, #92	; 0x5c
 8007eb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b5c      	cmp	r3, #92	; 0x5c
 8007eba:	d00c      	beq.n	8007ed6 <xTaskCreateStatic+0x72>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	b672      	cpsid	i
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	b662      	cpsie	i
 8007ed0:	61bb      	str	r3, [r7, #24]
}
 8007ed2:	bf00      	nop
 8007ed4:	e7fe      	b.n	8007ed4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ed6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d01e      	beq.n	8007f1c <xTaskCreateStatic+0xb8>
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01b      	beq.n	8007f1c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	9303      	str	r3, [sp, #12]
 8007efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efc:	9302      	str	r3, [sp, #8]
 8007efe:	f107 0314 	add.w	r3, r7, #20
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f850 	bl	8007fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007f16:	f000 f8df 	bl	80080d8 <prvAddNewTaskToReadyList>
 8007f1a:	e001      	b.n	8007f20 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f20:	697b      	ldr	r3, [r7, #20]
	}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3728      	adds	r7, #40	; 0x28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b08c      	sub	sp, #48	; 0x30
 8007f2e:	af04      	add	r7, sp, #16
 8007f30:	60f8      	str	r0, [r7, #12]
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	4613      	mov	r3, r2
 8007f38:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f001 fd68 	bl	8009a14 <pvPortMalloc>
 8007f44:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00e      	beq.n	8007f6a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f4c:	205c      	movs	r0, #92	; 0x5c
 8007f4e:	f001 fd61 	bl	8009a14 <pvPortMalloc>
 8007f52:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007f60:	e005      	b.n	8007f6e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f62:	6978      	ldr	r0, [r7, #20]
 8007f64:	f001 fe20 	bl	8009ba8 <vPortFree>
 8007f68:	e001      	b.n	8007f6e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d017      	beq.n	8007fa4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	9302      	str	r3, [sp, #8]
 8007f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f88:	9301      	str	r3, [sp, #4]
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68b9      	ldr	r1, [r7, #8]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 f80e 	bl	8007fb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f98:	69f8      	ldr	r0, [r7, #28]
 8007f9a:	f000 f89d 	bl	80080d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e002      	b.n	8007faa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007faa:	69bb      	ldr	r3, [r7, #24]
	}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	461a      	mov	r2, r3
 8007fcc:	21a5      	movs	r1, #165	; 0xa5
 8007fce:	f00c f817 	bl	8014000 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007fdc:	440b      	add	r3, r1
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f023 0307 	bic.w	r3, r3, #7
 8007fea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	f003 0307 	and.w	r3, r3, #7
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00c      	beq.n	8008010 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	b672      	cpsid	i
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	b662      	cpsie	i
 800800a:	617b      	str	r3, [r7, #20]
}
 800800c:	bf00      	nop
 800800e:	e7fe      	b.n	800800e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01f      	beq.n	8008056 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	e012      	b.n	8008042 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	7819      	ldrb	r1, [r3, #0]
 8008024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	3334      	adds	r3, #52	; 0x34
 800802c:	460a      	mov	r2, r1
 800802e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b0f      	cmp	r3, #15
 8008046:	d9e9      	bls.n	800801c <prvInitialiseNewTask+0x68>
 8008048:	e000      	b.n	800804c <prvInitialiseNewTask+0x98>
			{
				break;
 800804a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800804c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008054:	e003      	b.n	800805e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	2b37      	cmp	r3, #55	; 0x37
 8008062:	d901      	bls.n	8008068 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008064:	2337      	movs	r3, #55	; 0x37
 8008066:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800806c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008072:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008076:	2200      	movs	r2, #0
 8008078:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	3304      	adds	r3, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fd4c 	bl	8006b1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008086:	3318      	adds	r3, #24
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd47 	bl	8006b1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008096:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800809a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	2200      	movs	r2, #0
 80080a8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	69b8      	ldr	r0, [r7, #24]
 80080b8:	f001 fa76 	bl	80095a8 <pxPortInitialiseStack>
 80080bc:	4602      	mov	r2, r0
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d002      	beq.n	80080ce <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080ce:	bf00      	nop
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
	...

080080d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080e0:	f001 fb6c 	bl	80097bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080e4:	4b2d      	ldr	r3, [pc, #180]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	4a2c      	ldr	r2, [pc, #176]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080ee:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d109      	bne.n	800810a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080f6:	4a2a      	ldr	r2, [pc, #168]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080fc:	4b27      	ldr	r3, [pc, #156]	; (800819c <prvAddNewTaskToReadyList+0xc4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d110      	bne.n	8008126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008104:	f000 fc3e 	bl	8008984 <prvInitialiseTaskLists>
 8008108:	e00d      	b.n	8008126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <prvAddNewTaskToReadyList+0xcc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d109      	bne.n	8008126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008112:	4b23      	ldr	r3, [pc, #140]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	429a      	cmp	r2, r3
 800811e:	d802      	bhi.n	8008126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008120:	4a1f      	ldr	r2, [pc, #124]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008126:	4b20      	ldr	r3, [pc, #128]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 800812e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008130:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <prvAddNewTaskToReadyList+0xd0>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	4b1b      	ldr	r3, [pc, #108]	; (80081ac <prvAddNewTaskToReadyList+0xd4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	429a      	cmp	r2, r3
 8008142:	d903      	bls.n	800814c <prvAddNewTaskToReadyList+0x74>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	4a18      	ldr	r2, [pc, #96]	; (80081ac <prvAddNewTaskToReadyList+0xd4>)
 800814a:	6013      	str	r3, [r2, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <prvAddNewTaskToReadyList+0xd8>)
 800815a:	441a      	add	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	4619      	mov	r1, r3
 8008162:	4610      	mov	r0, r2
 8008164:	f7fe fce7 	bl	8006b36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008168:	f001 fb5c 	bl	8009824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800816c:	4b0d      	ldr	r3, [pc, #52]	; (80081a4 <prvAddNewTaskToReadyList+0xcc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00e      	beq.n	8008192 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <prvAddNewTaskToReadyList+0xc8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817e:	429a      	cmp	r2, r3
 8008180:	d207      	bcs.n	8008192 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <prvAddNewTaskToReadyList+0xdc>)
 8008184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	20000c38 	.word	0x20000c38
 80081a0:	20000764 	.word	0x20000764
 80081a4:	20000c44 	.word	0x20000c44
 80081a8:	20000c54 	.word	0x20000c54
 80081ac:	20000c40 	.word	0x20000c40
 80081b0:	20000768 	.word	0x20000768
 80081b4:	e000ed04 	.word	0xe000ed04

080081b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d019      	beq.n	80081fe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80081ca:	4b14      	ldr	r3, [pc, #80]	; (800821c <vTaskDelay+0x64>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00c      	beq.n	80081ec <vTaskDelay+0x34>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <vTaskDelay+0x32>
			vTaskSuspendAll();
 80081ec:	f000 f884 	bl	80082f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80081f0:	2100      	movs	r1, #0
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fe28 	bl	8008e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80081f8:	f000 f88c 	bl	8008314 <xTaskResumeAll>
 80081fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d107      	bne.n	8008214 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008204:	4b06      	ldr	r3, [pc, #24]	; (8008220 <vTaskDelay+0x68>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	20000c60 	.word	0x20000c60
 8008220:	e000ed04 	.word	0xe000ed04

08008224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008232:	463a      	mov	r2, r7
 8008234:	1d39      	adds	r1, r7, #4
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fc1a 	bl	8006a74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	9202      	str	r2, [sp, #8]
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	2300      	movs	r3, #0
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	2300      	movs	r3, #0
 8008250:	460a      	mov	r2, r1
 8008252:	4923      	ldr	r1, [pc, #140]	; (80082e0 <vTaskStartScheduler+0xbc>)
 8008254:	4823      	ldr	r0, [pc, #140]	; (80082e4 <vTaskStartScheduler+0xc0>)
 8008256:	f7ff fe05 	bl	8007e64 <xTaskCreateStatic>
 800825a:	4603      	mov	r3, r0
 800825c:	4a22      	ldr	r2, [pc, #136]	; (80082e8 <vTaskStartScheduler+0xc4>)
 800825e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008260:	4b21      	ldr	r3, [pc, #132]	; (80082e8 <vTaskStartScheduler+0xc4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008268:	2301      	movs	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	e001      	b.n	8008272 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800826e:	2300      	movs	r3, #0
 8008270:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d102      	bne.n	800827e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008278:	f000 fe3a 	bl	8008ef0 <xTimerCreateTimerTask>
 800827c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b01      	cmp	r3, #1
 8008282:	d118      	bne.n	80082b6 <vTaskStartScheduler+0x92>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	b672      	cpsid	i
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	b662      	cpsie	i
 8008298:	613b      	str	r3, [r7, #16]
}
 800829a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800829c:	4b13      	ldr	r3, [pc, #76]	; (80082ec <vTaskStartScheduler+0xc8>)
 800829e:	f04f 32ff 	mov.w	r2, #4294967295
 80082a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082a4:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <vTaskStartScheduler+0xcc>)
 80082a6:	2201      	movs	r2, #1
 80082a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082aa:	4b12      	ldr	r3, [pc, #72]	; (80082f4 <vTaskStartScheduler+0xd0>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082b0:	f001 fa06 	bl	80096c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082b4:	e010      	b.n	80082d8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082bc:	d10c      	bne.n	80082d8 <vTaskStartScheduler+0xb4>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	b672      	cpsid	i
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	b662      	cpsie	i
 80082d2:	60fb      	str	r3, [r7, #12]
}
 80082d4:	bf00      	nop
 80082d6:	e7fe      	b.n	80082d6 <vTaskStartScheduler+0xb2>
}
 80082d8:	bf00      	nop
 80082da:	3718      	adds	r7, #24
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	08015604 	.word	0x08015604
 80082e4:	08008955 	.word	0x08008955
 80082e8:	20000c5c 	.word	0x20000c5c
 80082ec:	20000c58 	.word	0x20000c58
 80082f0:	20000c44 	.word	0x20000c44
 80082f4:	20000c3c 	.word	0x20000c3c

080082f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80082fc:	4b04      	ldr	r3, [pc, #16]	; (8008310 <vTaskSuspendAll+0x18>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3301      	adds	r3, #1
 8008302:	4a03      	ldr	r2, [pc, #12]	; (8008310 <vTaskSuspendAll+0x18>)
 8008304:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000c60 	.word	0x20000c60

08008314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800831a:	2300      	movs	r3, #0
 800831c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008322:	4b43      	ldr	r3, [pc, #268]	; (8008430 <xTaskResumeAll+0x11c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <xTaskResumeAll+0x30>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	b672      	cpsid	i
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	b662      	cpsie	i
 800833e:	603b      	str	r3, [r7, #0]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008344:	f001 fa3a 	bl	80097bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008348:	4b39      	ldr	r3, [pc, #228]	; (8008430 <xTaskResumeAll+0x11c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3b01      	subs	r3, #1
 800834e:	4a38      	ldr	r2, [pc, #224]	; (8008430 <xTaskResumeAll+0x11c>)
 8008350:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008352:	4b37      	ldr	r3, [pc, #220]	; (8008430 <xTaskResumeAll+0x11c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d162      	bne.n	8008420 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800835a:	4b36      	ldr	r3, [pc, #216]	; (8008434 <xTaskResumeAll+0x120>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d05e      	beq.n	8008420 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008362:	e02f      	b.n	80083c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008364:	4b34      	ldr	r3, [pc, #208]	; (8008438 <xTaskResumeAll+0x124>)
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	3318      	adds	r3, #24
 8008370:	4618      	mov	r0, r3
 8008372:	f7fe fc3d 	bl	8006bf0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3304      	adds	r3, #4
 800837a:	4618      	mov	r0, r3
 800837c:	f7fe fc38 	bl	8006bf0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4b2d      	ldr	r3, [pc, #180]	; (800843c <xTaskResumeAll+0x128>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d903      	bls.n	8008394 <xTaskResumeAll+0x80>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a2a      	ldr	r2, [pc, #168]	; (800843c <xTaskResumeAll+0x128>)
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4a27      	ldr	r2, [pc, #156]	; (8008440 <xTaskResumeAll+0x12c>)
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f7fe fbc3 	bl	8006b36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	4b23      	ldr	r3, [pc, #140]	; (8008444 <xTaskResumeAll+0x130>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d302      	bcc.n	80083c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80083be:	4b22      	ldr	r3, [pc, #136]	; (8008448 <xTaskResumeAll+0x134>)
 80083c0:	2201      	movs	r2, #1
 80083c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083c4:	4b1c      	ldr	r3, [pc, #112]	; (8008438 <xTaskResumeAll+0x124>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1cb      	bne.n	8008364 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80083d2:	f000 fb77 	bl	8008ac4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80083d6:	4b1d      	ldr	r3, [pc, #116]	; (800844c <xTaskResumeAll+0x138>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d010      	beq.n	8008404 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80083e2:	f000 f859 	bl	8008498 <xTaskIncrementTick>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80083ec:	4b16      	ldr	r3, [pc, #88]	; (8008448 <xTaskResumeAll+0x134>)
 80083ee:	2201      	movs	r2, #1
 80083f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f1      	bne.n	80083e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80083fe:	4b13      	ldr	r3, [pc, #76]	; (800844c <xTaskResumeAll+0x138>)
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008404:	4b10      	ldr	r3, [pc, #64]	; (8008448 <xTaskResumeAll+0x134>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d009      	beq.n	8008420 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800840c:	2301      	movs	r3, #1
 800840e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <xTaskResumeAll+0x13c>)
 8008412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008420:	f001 fa00 	bl	8009824 <vPortExitCritical>

	return xAlreadyYielded;
 8008424:	68bb      	ldr	r3, [r7, #8]
}
 8008426:	4618      	mov	r0, r3
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20000c60 	.word	0x20000c60
 8008434:	20000c38 	.word	0x20000c38
 8008438:	20000bf8 	.word	0x20000bf8
 800843c:	20000c40 	.word	0x20000c40
 8008440:	20000768 	.word	0x20000768
 8008444:	20000764 	.word	0x20000764
 8008448:	20000c4c 	.word	0x20000c4c
 800844c:	20000c48 	.word	0x20000c48
 8008450:	e000ed04 	.word	0xe000ed04

08008454 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800845a:	4b05      	ldr	r3, [pc, #20]	; (8008470 <xTaskGetTickCount+0x1c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008460:	687b      	ldr	r3, [r7, #4]
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	20000c3c 	.word	0x20000c3c

08008474 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800847a:	f001 fa87 	bl	800998c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800847e:	2300      	movs	r3, #0
 8008480:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008482:	4b04      	ldr	r3, [pc, #16]	; (8008494 <xTaskGetTickCountFromISR+0x20>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008488:	683b      	ldr	r3, [r7, #0]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000c3c 	.word	0x20000c3c

08008498 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a2:	4b50      	ldr	r3, [pc, #320]	; (80085e4 <xTaskIncrementTick+0x14c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f040 808b 	bne.w	80085c2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80084ac:	4b4e      	ldr	r3, [pc, #312]	; (80085e8 <xTaskIncrementTick+0x150>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3301      	adds	r3, #1
 80084b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80084b4:	4a4c      	ldr	r2, [pc, #304]	; (80085e8 <xTaskIncrementTick+0x150>)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d122      	bne.n	8008506 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80084c0:	4b4a      	ldr	r3, [pc, #296]	; (80085ec <xTaskIncrementTick+0x154>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00c      	beq.n	80084e4 <xTaskIncrementTick+0x4c>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	b672      	cpsid	i
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	b662      	cpsie	i
 80084de:	603b      	str	r3, [r7, #0]
}
 80084e0:	bf00      	nop
 80084e2:	e7fe      	b.n	80084e2 <xTaskIncrementTick+0x4a>
 80084e4:	4b41      	ldr	r3, [pc, #260]	; (80085ec <xTaskIncrementTick+0x154>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	4b41      	ldr	r3, [pc, #260]	; (80085f0 <xTaskIncrementTick+0x158>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a3f      	ldr	r2, [pc, #252]	; (80085ec <xTaskIncrementTick+0x154>)
 80084f0:	6013      	str	r3, [r2, #0]
 80084f2:	4a3f      	ldr	r2, [pc, #252]	; (80085f0 <xTaskIncrementTick+0x158>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	4b3e      	ldr	r3, [pc, #248]	; (80085f4 <xTaskIncrementTick+0x15c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3301      	adds	r3, #1
 80084fe:	4a3d      	ldr	r2, [pc, #244]	; (80085f4 <xTaskIncrementTick+0x15c>)
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	f000 fadf 	bl	8008ac4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <xTaskIncrementTick+0x160>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	429a      	cmp	r2, r3
 800850e:	d349      	bcc.n	80085a4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008510:	4b36      	ldr	r3, [pc, #216]	; (80085ec <xTaskIncrementTick+0x154>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800851a:	4b37      	ldr	r3, [pc, #220]	; (80085f8 <xTaskIncrementTick+0x160>)
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	601a      	str	r2, [r3, #0]
					break;
 8008522:	e03f      	b.n	80085a4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008524:	4b31      	ldr	r3, [pc, #196]	; (80085ec <xTaskIncrementTick+0x154>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	d203      	bcs.n	8008544 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800853c:	4a2e      	ldr	r2, [pc, #184]	; (80085f8 <xTaskIncrementTick+0x160>)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008542:	e02f      	b.n	80085a4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	3304      	adds	r3, #4
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fb51 	bl	8006bf0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d004      	beq.n	8008560 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3318      	adds	r3, #24
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fb48 	bl	8006bf0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008564:	4b25      	ldr	r3, [pc, #148]	; (80085fc <xTaskIncrementTick+0x164>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	429a      	cmp	r2, r3
 800856a:	d903      	bls.n	8008574 <xTaskIncrementTick+0xdc>
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	4a22      	ldr	r2, [pc, #136]	; (80085fc <xTaskIncrementTick+0x164>)
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <xTaskIncrementTick+0x168>)
 8008582:	441a      	add	r2, r3
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	3304      	adds	r3, #4
 8008588:	4619      	mov	r1, r3
 800858a:	4610      	mov	r0, r2
 800858c:	f7fe fad3 	bl	8006b36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008594:	4b1b      	ldr	r3, [pc, #108]	; (8008604 <xTaskIncrementTick+0x16c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	429a      	cmp	r2, r3
 800859c:	d3b8      	bcc.n	8008510 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a2:	e7b5      	b.n	8008510 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80085a4:	4b17      	ldr	r3, [pc, #92]	; (8008604 <xTaskIncrementTick+0x16c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	4915      	ldr	r1, [pc, #84]	; (8008600 <xTaskIncrementTick+0x168>)
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d907      	bls.n	80085cc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80085bc:	2301      	movs	r3, #1
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e004      	b.n	80085cc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80085c2:	4b11      	ldr	r3, [pc, #68]	; (8008608 <xTaskIncrementTick+0x170>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	3301      	adds	r3, #1
 80085c8:	4a0f      	ldr	r2, [pc, #60]	; (8008608 <xTaskIncrementTick+0x170>)
 80085ca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80085cc:	4b0f      	ldr	r3, [pc, #60]	; (800860c <xTaskIncrementTick+0x174>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80085d8:	697b      	ldr	r3, [r7, #20]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000c60 	.word	0x20000c60
 80085e8:	20000c3c 	.word	0x20000c3c
 80085ec:	20000bf0 	.word	0x20000bf0
 80085f0:	20000bf4 	.word	0x20000bf4
 80085f4:	20000c50 	.word	0x20000c50
 80085f8:	20000c58 	.word	0x20000c58
 80085fc:	20000c40 	.word	0x20000c40
 8008600:	20000768 	.word	0x20000768
 8008604:	20000764 	.word	0x20000764
 8008608:	20000c48 	.word	0x20000c48
 800860c:	20000c4c 	.word	0x20000c4c

08008610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008616:	4b29      	ldr	r3, [pc, #164]	; (80086bc <vTaskSwitchContext+0xac>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800861e:	4b28      	ldr	r3, [pc, #160]	; (80086c0 <vTaskSwitchContext+0xb0>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008624:	e043      	b.n	80086ae <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008626:	4b26      	ldr	r3, [pc, #152]	; (80086c0 <vTaskSwitchContext+0xb0>)
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <vTaskSwitchContext+0xb4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	e012      	b.n	800865a <vTaskSwitchContext+0x4a>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10c      	bne.n	8008654 <vTaskSwitchContext+0x44>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	b672      	cpsid	i
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	b662      	cpsie	i
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <vTaskSwitchContext+0x42>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3b01      	subs	r3, #1
 8008658:	60fb      	str	r3, [r7, #12]
 800865a:	491b      	ldr	r1, [pc, #108]	; (80086c8 <vTaskSwitchContext+0xb8>)
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	440b      	add	r3, r1
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0e2      	beq.n	8008634 <vTaskSwitchContext+0x24>
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	4613      	mov	r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4a13      	ldr	r2, [pc, #76]	; (80086c8 <vTaskSwitchContext+0xb8>)
 800867a:	4413      	add	r3, r2
 800867c:	60bb      	str	r3, [r7, #8]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3308      	adds	r3, #8
 8008690:	429a      	cmp	r2, r3
 8008692:	d104      	bne.n	800869e <vTaskSwitchContext+0x8e>
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	605a      	str	r2, [r3, #4]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4a09      	ldr	r2, [pc, #36]	; (80086cc <vTaskSwitchContext+0xbc>)
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	4a06      	ldr	r2, [pc, #24]	; (80086c4 <vTaskSwitchContext+0xb4>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6013      	str	r3, [r2, #0]
}
 80086ae:	bf00      	nop
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	20000c60 	.word	0x20000c60
 80086c0:	20000c4c 	.word	0x20000c4c
 80086c4:	20000c40 	.word	0x20000c40
 80086c8:	20000768 	.word	0x20000768
 80086cc:	20000764 	.word	0x20000764

080086d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10c      	bne.n	80086fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	60fb      	str	r3, [r7, #12]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086fa:	4b07      	ldr	r3, [pc, #28]	; (8008718 <vTaskPlaceOnEventList+0x48>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3318      	adds	r3, #24
 8008700:	4619      	mov	r1, r3
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fe fa3b 	bl	8006b7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008708:	2101      	movs	r1, #1
 800870a:	6838      	ldr	r0, [r7, #0]
 800870c:	f000 fb9c 	bl	8008e48 <prvAddCurrentTaskToDelayedList>
}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	20000764 	.word	0x20000764

0800871c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10c      	bne.n	8008748 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008732:	b672      	cpsid	i
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	b662      	cpsie	i
 8008742:	617b      	str	r3, [r7, #20]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <vTaskPlaceOnEventListRestricted+0x58>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3318      	adds	r3, #24
 800874e:	4619      	mov	r1, r3
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	f7fe f9f0 	bl	8006b36 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800875c:	f04f 33ff 	mov.w	r3, #4294967295
 8008760:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008762:	6879      	ldr	r1, [r7, #4]
 8008764:	68b8      	ldr	r0, [r7, #8]
 8008766:	f000 fb6f 	bl	8008e48 <prvAddCurrentTaskToDelayedList>
	}
 800876a:	bf00      	nop
 800876c:	3718      	adds	r7, #24
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	20000764 	.word	0x20000764

08008778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10c      	bne.n	80087a8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	b672      	cpsid	i
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	b662      	cpsie	i
 80087a2:	60fb      	str	r3, [r7, #12]
}
 80087a4:	bf00      	nop
 80087a6:	e7fe      	b.n	80087a6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	3318      	adds	r3, #24
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fa1f 	bl	8006bf0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b2:	4b1e      	ldr	r3, [pc, #120]	; (800882c <xTaskRemoveFromEventList+0xb4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d11d      	bne.n	80087f6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	3304      	adds	r3, #4
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fa16 	bl	8006bf0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	4b19      	ldr	r3, [pc, #100]	; (8008830 <xTaskRemoveFromEventList+0xb8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d903      	bls.n	80087d8 <xTaskRemoveFromEventList+0x60>
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a16      	ldr	r2, [pc, #88]	; (8008830 <xTaskRemoveFromEventList+0xb8>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <xTaskRemoveFromEventList+0xbc>)
 80087e6:	441a      	add	r2, r3
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe f9a1 	bl	8006b36 <vListInsertEnd>
 80087f4:	e005      	b.n	8008802 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	3318      	adds	r3, #24
 80087fa:	4619      	mov	r1, r3
 80087fc:	480e      	ldr	r0, [pc, #56]	; (8008838 <xTaskRemoveFromEventList+0xc0>)
 80087fe:	f7fe f99a 	bl	8006b36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <xTaskRemoveFromEventList+0xc4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d905      	bls.n	800881c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <xTaskRemoveFromEventList+0xc8>)
 8008816:	2201      	movs	r2, #1
 8008818:	601a      	str	r2, [r3, #0]
 800881a:	e001      	b.n	8008820 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008820:	697b      	ldr	r3, [r7, #20]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000c60 	.word	0x20000c60
 8008830:	20000c40 	.word	0x20000c40
 8008834:	20000768 	.word	0x20000768
 8008838:	20000bf8 	.word	0x20000bf8
 800883c:	20000764 	.word	0x20000764
 8008840:	20000c4c 	.word	0x20000c4c

08008844 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <vTaskInternalSetTimeOutState+0x24>)
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <vTaskInternalSetTimeOutState+0x28>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	605a      	str	r2, [r3, #4]
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	20000c50 	.word	0x20000c50
 800886c:	20000c3c 	.word	0x20000c3c

08008870 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10c      	bne.n	800889a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	b672      	cpsid	i
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	b662      	cpsie	i
 8008894:	613b      	str	r3, [r7, #16]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10c      	bne.n	80088ba <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	b672      	cpsid	i
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	b662      	cpsie	i
 80088b4:	60fb      	str	r3, [r7, #12]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80088ba:	f000 ff7f 	bl	80097bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088be:	4b1d      	ldr	r3, [pc, #116]	; (8008934 <xTaskCheckForTimeOut+0xc4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	69ba      	ldr	r2, [r7, #24]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d102      	bne.n	80088de <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088d8:	2300      	movs	r3, #0
 80088da:	61fb      	str	r3, [r7, #28]
 80088dc:	e023      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	4b15      	ldr	r3, [pc, #84]	; (8008938 <xTaskCheckForTimeOut+0xc8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d007      	beq.n	80088fa <xTaskCheckForTimeOut+0x8a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d302      	bcc.n	80088fa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	e015      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	429a      	cmp	r2, r3
 8008902:	d20b      	bcs.n	800891c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	1ad2      	subs	r2, r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff ff97 	bl	8008844 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	e004      	b.n	8008926 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2200      	movs	r2, #0
 8008920:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008922:	2301      	movs	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008926:	f000 ff7d 	bl	8009824 <vPortExitCritical>

	return xReturn;
 800892a:	69fb      	ldr	r3, [r7, #28]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3720      	adds	r7, #32
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	20000c3c 	.word	0x20000c3c
 8008938:	20000c50 	.word	0x20000c50

0800893c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008940:	4b03      	ldr	r3, [pc, #12]	; (8008950 <vTaskMissedYield+0x14>)
 8008942:	2201      	movs	r2, #1
 8008944:	601a      	str	r2, [r3, #0]
}
 8008946:	bf00      	nop
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	20000c4c 	.word	0x20000c4c

08008954 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800895c:	f000 f852 	bl	8008a04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008960:	4b06      	ldr	r3, [pc, #24]	; (800897c <prvIdleTask+0x28>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d9f9      	bls.n	800895c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008968:	4b05      	ldr	r3, [pc, #20]	; (8008980 <prvIdleTask+0x2c>)
 800896a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800896e:	601a      	str	r2, [r3, #0]
 8008970:	f3bf 8f4f 	dsb	sy
 8008974:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008978:	e7f0      	b.n	800895c <prvIdleTask+0x8>
 800897a:	bf00      	nop
 800897c:	20000768 	.word	0x20000768
 8008980:	e000ed04 	.word	0xe000ed04

08008984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800898a:	2300      	movs	r3, #0
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	e00c      	b.n	80089aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a12      	ldr	r2, [pc, #72]	; (80089e4 <prvInitialiseTaskLists+0x60>)
 800899c:	4413      	add	r3, r2
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe f89c 	bl	8006adc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3301      	adds	r3, #1
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b37      	cmp	r3, #55	; 0x37
 80089ae:	d9ef      	bls.n	8008990 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089b0:	480d      	ldr	r0, [pc, #52]	; (80089e8 <prvInitialiseTaskLists+0x64>)
 80089b2:	f7fe f893 	bl	8006adc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089b6:	480d      	ldr	r0, [pc, #52]	; (80089ec <prvInitialiseTaskLists+0x68>)
 80089b8:	f7fe f890 	bl	8006adc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089bc:	480c      	ldr	r0, [pc, #48]	; (80089f0 <prvInitialiseTaskLists+0x6c>)
 80089be:	f7fe f88d 	bl	8006adc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089c2:	480c      	ldr	r0, [pc, #48]	; (80089f4 <prvInitialiseTaskLists+0x70>)
 80089c4:	f7fe f88a 	bl	8006adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089c8:	480b      	ldr	r0, [pc, #44]	; (80089f8 <prvInitialiseTaskLists+0x74>)
 80089ca:	f7fe f887 	bl	8006adc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089ce:	4b0b      	ldr	r3, [pc, #44]	; (80089fc <prvInitialiseTaskLists+0x78>)
 80089d0:	4a05      	ldr	r2, [pc, #20]	; (80089e8 <prvInitialiseTaskLists+0x64>)
 80089d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089d4:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <prvInitialiseTaskLists+0x7c>)
 80089d6:	4a05      	ldr	r2, [pc, #20]	; (80089ec <prvInitialiseTaskLists+0x68>)
 80089d8:	601a      	str	r2, [r3, #0]
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000768 	.word	0x20000768
 80089e8:	20000bc8 	.word	0x20000bc8
 80089ec:	20000bdc 	.word	0x20000bdc
 80089f0:	20000bf8 	.word	0x20000bf8
 80089f4:	20000c0c 	.word	0x20000c0c
 80089f8:	20000c24 	.word	0x20000c24
 80089fc:	20000bf0 	.word	0x20000bf0
 8008a00:	20000bf4 	.word	0x20000bf4

08008a04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a0a:	e019      	b.n	8008a40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a0c:	f000 fed6 	bl	80097bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a10:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <prvCheckTasksWaitingTermination+0x50>)
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7fe f8e7 	bl	8006bf0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <prvCheckTasksWaitingTermination+0x54>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	4a0b      	ldr	r2, [pc, #44]	; (8008a58 <prvCheckTasksWaitingTermination+0x54>)
 8008a2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a36:	f000 fef5 	bl	8009824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f810 	bl	8008a60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a40:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <prvCheckTasksWaitingTermination+0x58>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e1      	bne.n	8008a0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	20000c0c 	.word	0x20000c0c
 8008a58:	20000c38 	.word	0x20000c38
 8008a5c:	20000c20 	.word	0x20000c20

08008a60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d108      	bne.n	8008a84 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a76:	4618      	mov	r0, r3
 8008a78:	f001 f896 	bl	8009ba8 <vPortFree>
				vPortFree( pxTCB );
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f001 f893 	bl	8009ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a82:	e01a      	b.n	8008aba <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d103      	bne.n	8008a96 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f001 f88a 	bl	8009ba8 <vPortFree>
	}
 8008a94:	e011      	b.n	8008aba <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d00c      	beq.n	8008aba <prvDeleteTCB+0x5a>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	60fb      	str	r3, [r7, #12]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <prvDeleteTCB+0x58>
	}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aca:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <prvResetNextTaskUnblockTime+0x38>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ad4:	4b0a      	ldr	r3, [pc, #40]	; (8008b00 <prvResetNextTaskUnblockTime+0x3c>)
 8008ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ada:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008adc:	e008      	b.n	8008af0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ade:	4b07      	ldr	r3, [pc, #28]	; (8008afc <prvResetNextTaskUnblockTime+0x38>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	4a04      	ldr	r2, [pc, #16]	; (8008b00 <prvResetNextTaskUnblockTime+0x3c>)
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr
 8008afc:	20000bf0 	.word	0x20000bf0
 8008b00:	20000c58 	.word	0x20000c58

08008b04 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b0a:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <xTaskGetCurrentTaskHandle+0x1c>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008b10:	687b      	ldr	r3, [r7, #4]
	}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	20000764 	.word	0x20000764

08008b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <xTaskGetSchedulerState+0x34>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b32:	2301      	movs	r3, #1
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	e008      	b.n	8008b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b38:	4b08      	ldr	r3, [pc, #32]	; (8008b5c <xTaskGetSchedulerState+0x38>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b40:	2302      	movs	r3, #2
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	e001      	b.n	8008b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b46:	2300      	movs	r3, #0
 8008b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b4a:	687b      	ldr	r3, [r7, #4]
	}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	20000c44 	.word	0x20000c44
 8008b5c:	20000c60 	.word	0x20000c60

08008b60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d051      	beq.n	8008c1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4b2a      	ldr	r3, [pc, #168]	; (8008c24 <xTaskPriorityInherit+0xc4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d241      	bcs.n	8008c08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	db06      	blt.n	8008b9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b8c:	4b25      	ldr	r3, [pc, #148]	; (8008c24 <xTaskPriorityInherit+0xc4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6959      	ldr	r1, [r3, #20]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a1f      	ldr	r2, [pc, #124]	; (8008c28 <xTaskPriorityInherit+0xc8>)
 8008bac:	4413      	add	r3, r2
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	d122      	bne.n	8008bf8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe f81a 	bl	8006bf0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bbc:	4b19      	ldr	r3, [pc, #100]	; (8008c24 <xTaskPriorityInherit+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <xTaskPriorityInherit+0xcc>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d903      	bls.n	8008bda <xTaskPriorityInherit+0x7a>
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	4a15      	ldr	r2, [pc, #84]	; (8008c2c <xTaskPriorityInherit+0xcc>)
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4a10      	ldr	r2, [pc, #64]	; (8008c28 <xTaskPriorityInherit+0xc8>)
 8008be8:	441a      	add	r2, r3
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	3304      	adds	r3, #4
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f7fd ffa0 	bl	8006b36 <vListInsertEnd>
 8008bf6:	e004      	b.n	8008c02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <xTaskPriorityInherit+0xc4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c02:	2301      	movs	r3, #1
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	e008      	b.n	8008c1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c0c:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <xTaskPriorityInherit+0xc4>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d201      	bcs.n	8008c1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	20000764 	.word	0x20000764
 8008c28:	20000768 	.word	0x20000768
 8008c2c:	20000c40 	.word	0x20000c40

08008c30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d05a      	beq.n	8008cfc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c46:	4b30      	ldr	r3, [pc, #192]	; (8008d08 <xTaskPriorityDisinherit+0xd8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d00c      	beq.n	8008c6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	b672      	cpsid	i
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	b662      	cpsie	i
 8008c64:	60fb      	str	r3, [r7, #12]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10c      	bne.n	8008c8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c76:	b672      	cpsid	i
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	b662      	cpsie	i
 8008c86:	60bb      	str	r3, [r7, #8]
}
 8008c88:	bf00      	nop
 8008c8a:	e7fe      	b.n	8008c8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c90:	1e5a      	subs	r2, r3, #1
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d02c      	beq.n	8008cfc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d128      	bne.n	8008cfc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd ff9e 	bl	8006bf0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <xTaskPriorityDisinherit+0xdc>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d903      	bls.n	8008cdc <xTaskPriorityDisinherit+0xac>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	4a0c      	ldr	r2, [pc, #48]	; (8008d0c <xTaskPriorityDisinherit+0xdc>)
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4a09      	ldr	r2, [pc, #36]	; (8008d10 <xTaskPriorityDisinherit+0xe0>)
 8008cea:	441a      	add	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	3304      	adds	r3, #4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4610      	mov	r0, r2
 8008cf4:	f7fd ff1f 	bl	8006b36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cfc:	697b      	ldr	r3, [r7, #20]
	}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	20000764 	.word	0x20000764
 8008d0c:	20000c40 	.word	0x20000c40
 8008d10:	20000768 	.word	0x20000768

08008d14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d06e      	beq.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10c      	bne.n	8008d4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	b672      	cpsid	i
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	b662      	cpsie	i
 8008d48:	60fb      	str	r3, [r7, #12]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d902      	bls.n	8008d5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	61fb      	str	r3, [r7, #28]
 8008d5c:	e002      	b.n	8008d64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d04d      	beq.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d148      	bne.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d78:	4b26      	ldr	r3, [pc, #152]	; (8008e14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d10c      	bne.n	8008d9c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	b672      	cpsid	i
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	b662      	cpsie	i
 8008d96:	60bb      	str	r3, [r7, #8]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	db04      	blt.n	8008dba <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	6959      	ldr	r1, [r3, #20]
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4a13      	ldr	r2, [pc, #76]	; (8008e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008dca:	4413      	add	r3, r2
 8008dcc:	4299      	cmp	r1, r3
 8008dce:	d11c      	bne.n	8008e0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	3304      	adds	r3, #4
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fd ff0b 	bl	8006bf0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dde:	4b0f      	ldr	r3, [pc, #60]	; (8008e1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d903      	bls.n	8008dee <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df2:	4613      	mov	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4a07      	ldr	r2, [pc, #28]	; (8008e18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008dfc:	441a      	add	r2, r3
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	4610      	mov	r0, r2
 8008e06:	f7fd fe96 	bl	8006b36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e0a:	bf00      	nop
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000764 	.word	0x20000764
 8008e18:	20000768 	.word	0x20000768
 8008e1c:	20000c40 	.word	0x20000c40

08008e20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e24:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e32:	3201      	adds	r2, #1
 8008e34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008e36:	4b03      	ldr	r3, [pc, #12]	; (8008e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e38:	681b      	ldr	r3, [r3, #0]
	}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	20000764 	.word	0x20000764

08008e48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e52:	4b21      	ldr	r3, [pc, #132]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e58:	4b20      	ldr	r3, [pc, #128]	; (8008edc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3304      	adds	r3, #4
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fd fec6 	bl	8006bf0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d10a      	bne.n	8008e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e72:	4b1a      	ldr	r3, [pc, #104]	; (8008edc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4819      	ldr	r0, [pc, #100]	; (8008ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e7c:	f7fd fe5b 	bl	8006b36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e80:	e026      	b.n	8008ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4413      	add	r3, r2
 8008e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e92:	68ba      	ldr	r2, [r7, #8]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d209      	bcs.n	8008eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e9a:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3304      	adds	r3, #4
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	f7fd fe69 	bl	8006b7e <vListInsert>
}
 8008eac:	e010      	b.n	8008ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eae:	4b0e      	ldr	r3, [pc, #56]	; (8008ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <prvAddCurrentTaskToDelayedList+0x94>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3304      	adds	r3, #4
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f7fd fe5f 	bl	8006b7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d202      	bcs.n	8008ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eca:	4a08      	ldr	r2, [pc, #32]	; (8008eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	6013      	str	r3, [r2, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000c3c 	.word	0x20000c3c
 8008edc:	20000764 	.word	0x20000764
 8008ee0:	20000c24 	.word	0x20000c24
 8008ee4:	20000bf4 	.word	0x20000bf4
 8008ee8:	20000bf0 	.word	0x20000bf0
 8008eec:	20000c58 	.word	0x20000c58

08008ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008efa:	f000 fb15 	bl	8009528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008efe:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <xTimerCreateTimerTask+0x84>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d021      	beq.n	8008f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	f107 0108 	add.w	r1, r7, #8
 8008f14:	f107 030c 	add.w	r3, r7, #12
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fd fdc5 	bl	8006aa8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	9202      	str	r2, [sp, #8]
 8008f26:	9301      	str	r3, [sp, #4]
 8008f28:	2302      	movs	r3, #2
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	460a      	mov	r2, r1
 8008f30:	4911      	ldr	r1, [pc, #68]	; (8008f78 <xTimerCreateTimerTask+0x88>)
 8008f32:	4812      	ldr	r0, [pc, #72]	; (8008f7c <xTimerCreateTimerTask+0x8c>)
 8008f34:	f7fe ff96 	bl	8007e64 <xTaskCreateStatic>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	4a11      	ldr	r2, [pc, #68]	; (8008f80 <xTimerCreateTimerTask+0x90>)
 8008f3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f3e:	4b10      	ldr	r3, [pc, #64]	; (8008f80 <xTimerCreateTimerTask+0x90>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d001      	beq.n	8008f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f46:	2301      	movs	r3, #1
 8008f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10c      	bne.n	8008f6a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	b672      	cpsid	i
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	b662      	cpsie	i
 8008f64:	613b      	str	r3, [r7, #16]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008f6a:	697b      	ldr	r3, [r7, #20]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20000c94 	.word	0x20000c94
 8008f78:	0801560c 	.word	0x0801560c
 8008f7c:	080090c1 	.word	0x080090c1
 8008f80:	20000c98 	.word	0x20000c98

08008f84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	; 0x28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10c      	bne.n	8008fb6 <xTimerGenericCommand+0x32>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	b672      	cpsid	i
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	b662      	cpsie	i
 8008fb0:	623b      	str	r3, [r7, #32]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <xTimerGenericCommand+0x9c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d02a      	beq.n	8009014 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b05      	cmp	r3, #5
 8008fce:	dc18      	bgt.n	8009002 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fd0:	f7ff fda8 	bl	8008b24 <xTaskGetSchedulerState>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d109      	bne.n	8008fee <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fda:	4b11      	ldr	r3, [pc, #68]	; (8009020 <xTimerGenericCommand+0x9c>)
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f107 0110 	add.w	r1, r7, #16
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	f7fe f8ab 	bl	8007140 <xQueueGenericSend>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24
 8008fec:	e012      	b.n	8009014 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fee:	4b0c      	ldr	r3, [pc, #48]	; (8009020 <xTimerGenericCommand+0x9c>)
 8008ff0:	6818      	ldr	r0, [r3, #0]
 8008ff2:	f107 0110 	add.w	r1, r7, #16
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f7fe f8a1 	bl	8007140 <xQueueGenericSend>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8009000:	e008      	b.n	8009014 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009002:	4b07      	ldr	r3, [pc, #28]	; (8009020 <xTimerGenericCommand+0x9c>)
 8009004:	6818      	ldr	r0, [r3, #0]
 8009006:	f107 0110 	add.w	r1, r7, #16
 800900a:	2300      	movs	r3, #0
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	f7fe f99d 	bl	800734c <xQueueGenericSendFromISR>
 8009012:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009016:	4618      	mov	r0, r3
 8009018:	3728      	adds	r7, #40	; 0x28
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000c94 	.word	0x20000c94

08009024 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af02      	add	r7, sp, #8
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800902e:	4b23      	ldr	r3, [pc, #140]	; (80090bc <prvProcessExpiredTimer+0x98>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	3304      	adds	r3, #4
 800903c:	4618      	mov	r0, r3
 800903e:	f7fd fdd7 	bl	8006bf0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009048:	f003 0304 	and.w	r3, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	d024      	beq.n	800909a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	699a      	ldr	r2, [r3, #24]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	18d1      	adds	r1, r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	6978      	ldr	r0, [r7, #20]
 800905e:	f000 f8d3 	bl	8009208 <prvInsertTimerInActiveList>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d021      	beq.n	80090ac <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009068:	2300      	movs	r3, #0
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	2300      	movs	r3, #0
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	2100      	movs	r1, #0
 8009072:	6978      	ldr	r0, [r7, #20]
 8009074:	f7ff ff86 	bl	8008f84 <xTimerGenericCommand>
 8009078:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d115      	bne.n	80090ac <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	b672      	cpsid	i
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	b662      	cpsie	i
 8009094:	60fb      	str	r3, [r7, #12]
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a0:	f023 0301 	bic.w	r3, r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	6978      	ldr	r0, [r7, #20]
 80090b2:	4798      	blx	r3
}
 80090b4:	bf00      	nop
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	20000c8c 	.word	0x20000c8c

080090c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c8:	f107 0308 	add.w	r3, r7, #8
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f857 	bl	8009180 <prvGetNextExpireTime>
 80090d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4619      	mov	r1, r3
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 f803 	bl	80090e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090de:	f000 f8d5 	bl	800928c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090e2:	e7f1      	b.n	80090c8 <prvTimerTask+0x8>

080090e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090ee:	f7ff f903 	bl	80082f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090f2:	f107 0308 	add.w	r3, r7, #8
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f866 	bl	80091c8 <prvSampleTimeNow>
 80090fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d130      	bne.n	8009166 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10a      	bne.n	8009120 <prvProcessTimerOrBlockTask+0x3c>
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	429a      	cmp	r2, r3
 8009110:	d806      	bhi.n	8009120 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009112:	f7ff f8ff 	bl	8008314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009116:	68f9      	ldr	r1, [r7, #12]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff ff83 	bl	8009024 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800911e:	e024      	b.n	800916a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009126:	4b13      	ldr	r3, [pc, #76]	; (8009174 <prvProcessTimerOrBlockTask+0x90>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d101      	bne.n	8009134 <prvProcessTimerOrBlockTask+0x50>
 8009130:	2301      	movs	r3, #1
 8009132:	e000      	b.n	8009136 <prvProcessTimerOrBlockTask+0x52>
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <prvProcessTimerOrBlockTask+0x94>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4619      	mov	r1, r3
 8009146:	f7fe fe59 	bl	8007dfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800914a:	f7ff f8e3 	bl	8008314 <xTaskResumeAll>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009154:	4b09      	ldr	r3, [pc, #36]	; (800917c <prvProcessTimerOrBlockTask+0x98>)
 8009156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915a:	601a      	str	r2, [r3, #0]
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	f3bf 8f6f 	isb	sy
}
 8009164:	e001      	b.n	800916a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009166:	f7ff f8d5 	bl	8008314 <xTaskResumeAll>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000c90 	.word	0x20000c90
 8009178:	20000c94 	.word	0x20000c94
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009188:	4b0e      	ldr	r3, [pc, #56]	; (80091c4 <prvGetNextExpireTime+0x44>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <prvGetNextExpireTime+0x16>
 8009192:	2201      	movs	r2, #1
 8009194:	e000      	b.n	8009198 <prvGetNextExpireTime+0x18>
 8009196:	2200      	movs	r2, #0
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d105      	bne.n	80091b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091a4:	4b07      	ldr	r3, [pc, #28]	; (80091c4 <prvGetNextExpireTime+0x44>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	e001      	b.n	80091b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80091b4:	68fb      	ldr	r3, [r7, #12]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20000c8c 	.word	0x20000c8c

080091c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091d0:	f7ff f940 	bl	8008454 <xTaskGetTickCount>
 80091d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <prvSampleTimeNow+0x3c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68fa      	ldr	r2, [r7, #12]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d205      	bcs.n	80091ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091e0:	f000 f93c 	bl	800945c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	e002      	b.n	80091f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091f2:	4a04      	ldr	r2, [pc, #16]	; (8009204 <prvSampleTimeNow+0x3c>)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000c9c 	.word	0x20000c9c

08009208 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009216:	2300      	movs	r3, #0
 8009218:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009226:	68ba      	ldr	r2, [r7, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d812      	bhi.n	8009254 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	d302      	bcc.n	8009242 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	e01b      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009242:	4b10      	ldr	r3, [pc, #64]	; (8009284 <prvInsertTimerInActiveList+0x7c>)
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3304      	adds	r3, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f7fd fc96 	bl	8006b7e <vListInsert>
 8009252:	e012      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	429a      	cmp	r2, r3
 800925a:	d206      	bcs.n	800926a <prvInsertTimerInActiveList+0x62>
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	429a      	cmp	r2, r3
 8009262:	d302      	bcc.n	800926a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009264:	2301      	movs	r3, #1
 8009266:	617b      	str	r3, [r7, #20]
 8009268:	e007      	b.n	800927a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800926a:	4b07      	ldr	r3, [pc, #28]	; (8009288 <prvInsertTimerInActiveList+0x80>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fd fc82 	bl	8006b7e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20000c90 	.word	0x20000c90
 8009288:	20000c8c 	.word	0x20000c8c

0800928c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08e      	sub	sp, #56	; 0x38
 8009290:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009292:	e0d0      	b.n	8009436 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	da1a      	bge.n	80092d0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800929a:	1d3b      	adds	r3, r7, #4
 800929c:	3304      	adds	r3, #4
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10c      	bne.n	80092c0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	b672      	cpsid	i
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	b662      	cpsie	i
 80092ba:	61fb      	str	r3, [r7, #28]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c6:	6850      	ldr	r0, [r2, #4]
 80092c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092ca:	6892      	ldr	r2, [r2, #8]
 80092cc:	4611      	mov	r1, r2
 80092ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f2c0 80ae 	blt.w	8009434 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d004      	beq.n	80092ee <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd fc81 	bl	8006bf0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ee:	463b      	mov	r3, r7
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff ff69 	bl	80091c8 <prvSampleTimeNow>
 80092f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b09      	cmp	r3, #9
 80092fc:	f200 809b 	bhi.w	8009436 <prvProcessReceivedCommands+0x1aa>
 8009300:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <prvProcessReceivedCommands+0x7c>)
 8009302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009306:	bf00      	nop
 8009308:	08009331 	.word	0x08009331
 800930c:	08009331 	.word	0x08009331
 8009310:	08009331 	.word	0x08009331
 8009314:	080093a9 	.word	0x080093a9
 8009318:	080093bd 	.word	0x080093bd
 800931c:	0800940b 	.word	0x0800940b
 8009320:	08009331 	.word	0x08009331
 8009324:	08009331 	.word	0x08009331
 8009328:	080093a9 	.word	0x080093a9
 800932c:	080093bd 	.word	0x080093bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	18d1      	adds	r1, r2, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800934e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009350:	f7ff ff5a 	bl	8009208 <prvInsertTimerInActiveList>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d06d      	beq.n	8009436 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009360:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d062      	beq.n	8009436 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	441a      	add	r2, r3
 8009378:	2300      	movs	r3, #0
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2300      	movs	r3, #0
 800937e:	2100      	movs	r1, #0
 8009380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009382:	f7ff fdff 	bl	8008f84 <xTimerGenericCommand>
 8009386:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d153      	bne.n	8009436 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	b672      	cpsid	i
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	b662      	cpsie	i
 80093a2:	61bb      	str	r3, [r7, #24]
}
 80093a4:	bf00      	nop
 80093a6:	e7fe      	b.n	80093a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80093ba:	e03c      	b.n	8009436 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093c2:	f043 0301 	orr.w	r3, r3, #1
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10c      	bne.n	80093f6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	b672      	cpsid	i
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	b662      	cpsie	i
 80093f0:	617b      	str	r3, [r7, #20]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fc:	18d1      	adds	r1, r2, r3
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009404:	f7ff ff00 	bl	8009208 <prvInsertTimerInActiveList>
					break;
 8009408:	e015      	b.n	8009436 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009410:	f003 0302 	and.w	r3, r3, #2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d103      	bne.n	8009420 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800941a:	f000 fbc5 	bl	8009ba8 <vPortFree>
 800941e:	e00a      	b.n	8009436 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009426:	f023 0301 	bic.w	r3, r3, #1
 800942a:	b2da      	uxtb	r2, r3
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009432:	e000      	b.n	8009436 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009434:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009436:	4b08      	ldr	r3, [pc, #32]	; (8009458 <prvProcessReceivedCommands+0x1cc>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	1d39      	adds	r1, r7, #4
 800943c:	2200      	movs	r2, #0
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe f8ba 	bl	80075b8 <xQueueReceive>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	f47f af24 	bne.w	8009294 <prvProcessReceivedCommands+0x8>
	}
}
 800944c:	bf00      	nop
 800944e:	bf00      	nop
 8009450:	3730      	adds	r7, #48	; 0x30
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	20000c94 	.word	0x20000c94

0800945c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b088      	sub	sp, #32
 8009460:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009462:	e04a      	b.n	80094fa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009464:	4b2e      	ldr	r3, [pc, #184]	; (8009520 <prvSwitchTimerLists+0xc4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b2c      	ldr	r3, [pc, #176]	; (8009520 <prvSwitchTimerLists+0xc4>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fd fbb7 	bl	8006bf0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d030      	beq.n	80094fa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	4413      	add	r3, r2
 80094a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d90e      	bls.n	80094c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <prvSwitchTimerLists+0xc4>)
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	3304      	adds	r3, #4
 80094be:	4619      	mov	r1, r3
 80094c0:	4610      	mov	r0, r2
 80094c2:	f7fd fb5c 	bl	8006b7e <vListInsert>
 80094c6:	e018      	b.n	80094fa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094c8:	2300      	movs	r3, #0
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	2300      	movs	r3, #0
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	2100      	movs	r1, #0
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fd56 	bl	8008f84 <xTimerGenericCommand>
 80094d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10c      	bne.n	80094fa <prvSwitchTimerLists+0x9e>
	__asm volatile
 80094e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e4:	b672      	cpsid	i
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	b662      	cpsie	i
 80094f4:	603b      	str	r3, [r7, #0]
}
 80094f6:	bf00      	nop
 80094f8:	e7fe      	b.n	80094f8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094fa:	4b09      	ldr	r3, [pc, #36]	; (8009520 <prvSwitchTimerLists+0xc4>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1af      	bne.n	8009464 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009504:	4b06      	ldr	r3, [pc, #24]	; (8009520 <prvSwitchTimerLists+0xc4>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800950a:	4b06      	ldr	r3, [pc, #24]	; (8009524 <prvSwitchTimerLists+0xc8>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a04      	ldr	r2, [pc, #16]	; (8009520 <prvSwitchTimerLists+0xc4>)
 8009510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009512:	4a04      	ldr	r2, [pc, #16]	; (8009524 <prvSwitchTimerLists+0xc8>)
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	3718      	adds	r7, #24
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20000c8c 	.word	0x20000c8c
 8009524:	20000c90 	.word	0x20000c90

08009528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800952e:	f000 f945 	bl	80097bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <prvCheckForValidListAndQueue+0x60>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d120      	bne.n	800957c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800953a:	4814      	ldr	r0, [pc, #80]	; (800958c <prvCheckForValidListAndQueue+0x64>)
 800953c:	f7fd face 	bl	8006adc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009540:	4813      	ldr	r0, [pc, #76]	; (8009590 <prvCheckForValidListAndQueue+0x68>)
 8009542:	f7fd facb 	bl	8006adc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009546:	4b13      	ldr	r3, [pc, #76]	; (8009594 <prvCheckForValidListAndQueue+0x6c>)
 8009548:	4a10      	ldr	r2, [pc, #64]	; (800958c <prvCheckForValidListAndQueue+0x64>)
 800954a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800954c:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvCheckForValidListAndQueue+0x70>)
 800954e:	4a10      	ldr	r2, [pc, #64]	; (8009590 <prvCheckForValidListAndQueue+0x68>)
 8009550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009552:	2300      	movs	r3, #0
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	4b11      	ldr	r3, [pc, #68]	; (800959c <prvCheckForValidListAndQueue+0x74>)
 8009558:	4a11      	ldr	r2, [pc, #68]	; (80095a0 <prvCheckForValidListAndQueue+0x78>)
 800955a:	2110      	movs	r1, #16
 800955c:	200a      	movs	r0, #10
 800955e:	f7fd fbdb 	bl	8006d18 <xQueueGenericCreateStatic>
 8009562:	4603      	mov	r3, r0
 8009564:	4a08      	ldr	r2, [pc, #32]	; (8009588 <prvCheckForValidListAndQueue+0x60>)
 8009566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009568:	4b07      	ldr	r3, [pc, #28]	; (8009588 <prvCheckForValidListAndQueue+0x60>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <prvCheckForValidListAndQueue+0x60>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	490b      	ldr	r1, [pc, #44]	; (80095a4 <prvCheckForValidListAndQueue+0x7c>)
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe fbec 	bl	8007d54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800957c:	f000 f952 	bl	8009824 <vPortExitCritical>
}
 8009580:	bf00      	nop
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000c94 	.word	0x20000c94
 800958c:	20000c64 	.word	0x20000c64
 8009590:	20000c78 	.word	0x20000c78
 8009594:	20000c8c 	.word	0x20000c8c
 8009598:	20000c90 	.word	0x20000c90
 800959c:	20000d40 	.word	0x20000d40
 80095a0:	20000ca0 	.word	0x20000ca0
 80095a4:	08015614 	.word	0x08015614

080095a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3b04      	subs	r3, #4
 80095b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3b04      	subs	r3, #4
 80095c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	f023 0201 	bic.w	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3b04      	subs	r3, #4
 80095d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095d8:	4a0c      	ldr	r2, [pc, #48]	; (800960c <pxPortInitialiseStack+0x64>)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	3b14      	subs	r3, #20
 80095e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3b04      	subs	r3, #4
 80095ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f06f 0202 	mvn.w	r2, #2
 80095f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3b20      	subs	r3, #32
 80095fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095fe:	68fb      	ldr	r3, [r7, #12]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	08009611 	.word	0x08009611

08009610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009610:	b480      	push	{r7}
 8009612:	b085      	sub	sp, #20
 8009614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800961a:	4b14      	ldr	r3, [pc, #80]	; (800966c <prvTaskExitError+0x5c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009622:	d00c      	beq.n	800963e <prvTaskExitError+0x2e>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	b672      	cpsid	i
 800962a:	f383 8811 	msr	BASEPRI, r3
 800962e:	f3bf 8f6f 	isb	sy
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	b662      	cpsie	i
 8009638:	60fb      	str	r3, [r7, #12]
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <prvTaskExitError+0x2c>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009642:	b672      	cpsid	i
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	b662      	cpsie	i
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009656:	bf00      	nop
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d0fc      	beq.n	8009658 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800965e:	bf00      	nop
 8009660:	bf00      	nop
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	2000000c 	.word	0x2000000c

08009670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009670:	4b07      	ldr	r3, [pc, #28]	; (8009690 <pxCurrentTCBConst2>)
 8009672:	6819      	ldr	r1, [r3, #0]
 8009674:	6808      	ldr	r0, [r1, #0]
 8009676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967a:	f380 8809 	msr	PSP, r0
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f04f 0000 	mov.w	r0, #0
 8009686:	f380 8811 	msr	BASEPRI, r0
 800968a:	4770      	bx	lr
 800968c:	f3af 8000 	nop.w

08009690 <pxCurrentTCBConst2>:
 8009690:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009694:	bf00      	nop
 8009696:	bf00      	nop

08009698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009698:	4808      	ldr	r0, [pc, #32]	; (80096bc <prvPortStartFirstTask+0x24>)
 800969a:	6800      	ldr	r0, [r0, #0]
 800969c:	6800      	ldr	r0, [r0, #0]
 800969e:	f380 8808 	msr	MSP, r0
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8814 	msr	CONTROL, r0
 80096aa:	b662      	cpsie	i
 80096ac:	b661      	cpsie	f
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	df00      	svc	0
 80096b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096ba:	bf00      	nop
 80096bc:	e000ed08 	.word	0xe000ed08

080096c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096c6:	4b37      	ldr	r3, [pc, #220]	; (80097a4 <xPortStartScheduler+0xe4>)
 80096c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	22ff      	movs	r2, #255	; 0xff
 80096d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096e0:	78fb      	ldrb	r3, [r7, #3]
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	4b2f      	ldr	r3, [pc, #188]	; (80097a8 <xPortStartScheduler+0xe8>)
 80096ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096ee:	4b2f      	ldr	r3, [pc, #188]	; (80097ac <xPortStartScheduler+0xec>)
 80096f0:	2207      	movs	r2, #7
 80096f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80096f4:	e009      	b.n	800970a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80096f6:	4b2d      	ldr	r3, [pc, #180]	; (80097ac <xPortStartScheduler+0xec>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	4a2b      	ldr	r2, [pc, #172]	; (80097ac <xPortStartScheduler+0xec>)
 80096fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	005b      	lsls	r3, r3, #1
 8009706:	b2db      	uxtb	r3, r3
 8009708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	2b80      	cmp	r3, #128	; 0x80
 8009714:	d0ef      	beq.n	80096f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009716:	4b25      	ldr	r3, [pc, #148]	; (80097ac <xPortStartScheduler+0xec>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1c3 0307 	rsb	r3, r3, #7
 800971e:	2b04      	cmp	r3, #4
 8009720:	d00c      	beq.n	800973c <xPortStartScheduler+0x7c>
	__asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	b672      	cpsid	i
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	b662      	cpsie	i
 8009736:	60bb      	str	r3, [r7, #8]
}
 8009738:	bf00      	nop
 800973a:	e7fe      	b.n	800973a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <xPortStartScheduler+0xec>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	4a1a      	ldr	r2, [pc, #104]	; (80097ac <xPortStartScheduler+0xec>)
 8009744:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <xPortStartScheduler+0xec>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800974e:	4a17      	ldr	r2, [pc, #92]	; (80097ac <xPortStartScheduler+0xec>)
 8009750:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800975a:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <xPortStartScheduler+0xf0>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <xPortStartScheduler+0xf0>)
 8009760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009764:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009766:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <xPortStartScheduler+0xf0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a11      	ldr	r2, [pc, #68]	; (80097b0 <xPortStartScheduler+0xf0>)
 800976c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009770:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009772:	f000 f8dd 	bl	8009930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009776:	4b0f      	ldr	r3, [pc, #60]	; (80097b4 <xPortStartScheduler+0xf4>)
 8009778:	2200      	movs	r2, #0
 800977a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800977c:	f000 f8fc 	bl	8009978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009780:	4b0d      	ldr	r3, [pc, #52]	; (80097b8 <xPortStartScheduler+0xf8>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a0c      	ldr	r2, [pc, #48]	; (80097b8 <xPortStartScheduler+0xf8>)
 8009786:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800978a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800978c:	f7ff ff84 	bl	8009698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009790:	f7fe ff3e 	bl	8008610 <vTaskSwitchContext>
	prvTaskExitError();
 8009794:	f7ff ff3c 	bl	8009610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	e000e400 	.word	0xe000e400
 80097a8:	20000d90 	.word	0x20000d90
 80097ac:	20000d94 	.word	0x20000d94
 80097b0:	e000ed20 	.word	0xe000ed20
 80097b4:	2000000c 	.word	0x2000000c
 80097b8:	e000ef34 	.word	0xe000ef34

080097bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	607b      	str	r3, [r7, #4]
}
 80097d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <vPortEnterCritical+0x60>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3301      	adds	r3, #1
 80097e0:	4a0e      	ldr	r2, [pc, #56]	; (800981c <vPortEnterCritical+0x60>)
 80097e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097e4:	4b0d      	ldr	r3, [pc, #52]	; (800981c <vPortEnterCritical+0x60>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d111      	bne.n	8009810 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80097ec:	4b0c      	ldr	r3, [pc, #48]	; (8009820 <vPortEnterCritical+0x64>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00c      	beq.n	8009810 <vPortEnterCritical+0x54>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	b672      	cpsid	i
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	b662      	cpsie	i
 800980a:	603b      	str	r3, [r7, #0]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <vPortEnterCritical+0x52>
	}
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	2000000c 	.word	0x2000000c
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800982a:	4b13      	ldr	r3, [pc, #76]	; (8009878 <vPortExitCritical+0x54>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d10c      	bne.n	800984c <vPortExitCritical+0x28>
	__asm volatile
 8009832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009836:	b672      	cpsid	i
 8009838:	f383 8811 	msr	BASEPRI, r3
 800983c:	f3bf 8f6f 	isb	sy
 8009840:	f3bf 8f4f 	dsb	sy
 8009844:	b662      	cpsie	i
 8009846:	607b      	str	r3, [r7, #4]
}
 8009848:	bf00      	nop
 800984a:	e7fe      	b.n	800984a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <vPortExitCritical+0x54>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	3b01      	subs	r3, #1
 8009852:	4a09      	ldr	r2, [pc, #36]	; (8009878 <vPortExitCritical+0x54>)
 8009854:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009856:	4b08      	ldr	r3, [pc, #32]	; (8009878 <vPortExitCritical+0x54>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <vPortExitCritical+0x46>
 800985e:	2300      	movs	r3, #0
 8009860:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	f383 8811 	msr	BASEPRI, r3
}
 8009868:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800986a:	bf00      	nop
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	2000000c 	.word	0x2000000c
 800987c:	00000000 	.word	0x00000000

08009880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009880:	f3ef 8009 	mrs	r0, PSP
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	4b15      	ldr	r3, [pc, #84]	; (80098e0 <pxCurrentTCBConst>)
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	f01e 0f10 	tst.w	lr, #16
 8009890:	bf08      	it	eq
 8009892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	6010      	str	r0, [r2, #0]
 800989c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098a4:	b672      	cpsid	i
 80098a6:	f380 8811 	msr	BASEPRI, r0
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	b662      	cpsie	i
 80098b4:	f7fe feac 	bl	8008610 <vTaskSwitchContext>
 80098b8:	f04f 0000 	mov.w	r0, #0
 80098bc:	f380 8811 	msr	BASEPRI, r0
 80098c0:	bc09      	pop	{r0, r3}
 80098c2:	6819      	ldr	r1, [r3, #0]
 80098c4:	6808      	ldr	r0, [r1, #0]
 80098c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ca:	f01e 0f10 	tst.w	lr, #16
 80098ce:	bf08      	it	eq
 80098d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098d4:	f380 8809 	msr	PSP, r0
 80098d8:	f3bf 8f6f 	isb	sy
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop

080098e0 <pxCurrentTCBConst>:
 80098e0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop

080098e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	607b      	str	r3, [r7, #4]
}
 8009904:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009906:	f7fe fdc7 	bl	8008498 <xTaskIncrementTick>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d003      	beq.n	8009918 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <SysTick_Handler+0x44>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	2300      	movs	r3, #0
 800991a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	f383 8811 	msr	BASEPRI, r3
}
 8009922:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	e000ed04 	.word	0xe000ed04

08009930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009934:	4b0b      	ldr	r3, [pc, #44]	; (8009964 <vPortSetupTimerInterrupt+0x34>)
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800993a:	4b0b      	ldr	r3, [pc, #44]	; (8009968 <vPortSetupTimerInterrupt+0x38>)
 800993c:	2200      	movs	r2, #0
 800993e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <vPortSetupTimerInterrupt+0x3c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a0a      	ldr	r2, [pc, #40]	; (8009970 <vPortSetupTimerInterrupt+0x40>)
 8009946:	fba2 2303 	umull	r2, r3, r2, r3
 800994a:	099b      	lsrs	r3, r3, #6
 800994c:	4a09      	ldr	r2, [pc, #36]	; (8009974 <vPortSetupTimerInterrupt+0x44>)
 800994e:	3b01      	subs	r3, #1
 8009950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <vPortSetupTimerInterrupt+0x34>)
 8009954:	2207      	movs	r2, #7
 8009956:	601a      	str	r2, [r3, #0]
}
 8009958:	bf00      	nop
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	e000e010 	.word	0xe000e010
 8009968:	e000e018 	.word	0xe000e018
 800996c:	20000000 	.word	0x20000000
 8009970:	10624dd3 	.word	0x10624dd3
 8009974:	e000e014 	.word	0xe000e014

08009978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009978:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009988 <vPortEnableVFP+0x10>
 800997c:	6801      	ldr	r1, [r0, #0]
 800997e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009982:	6001      	str	r1, [r0, #0]
 8009984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009986:	bf00      	nop
 8009988:	e000ed88 	.word	0xe000ed88

0800998c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009992:	f3ef 8305 	mrs	r3, IPSR
 8009996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2b0f      	cmp	r3, #15
 800999c:	d916      	bls.n	80099cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800999e:	4a19      	ldr	r2, [pc, #100]	; (8009a04 <vPortValidateInterruptPriority+0x78>)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4413      	add	r3, r2
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099a8:	4b17      	ldr	r3, [pc, #92]	; (8009a08 <vPortValidateInterruptPriority+0x7c>)
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	7afa      	ldrb	r2, [r7, #11]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d20c      	bcs.n	80099cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80099b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b6:	b672      	cpsid	i
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	b662      	cpsie	i
 80099c6:	607b      	str	r3, [r7, #4]
}
 80099c8:	bf00      	nop
 80099ca:	e7fe      	b.n	80099ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099cc:	4b0f      	ldr	r3, [pc, #60]	; (8009a0c <vPortValidateInterruptPriority+0x80>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099d4:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <vPortValidateInterruptPriority+0x84>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d90c      	bls.n	80099f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	b672      	cpsid	i
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	b662      	cpsie	i
 80099f0:	603b      	str	r3, [r7, #0]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <vPortValidateInterruptPriority+0x68>
	}
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	e000e3f0 	.word	0xe000e3f0
 8009a08:	20000d90 	.word	0x20000d90
 8009a0c:	e000ed0c 	.word	0xe000ed0c
 8009a10:	20000d94 	.word	0x20000d94

08009a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a20:	f7fe fc6a 	bl	80082f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a24:	4b5b      	ldr	r3, [pc, #364]	; (8009b94 <pvPortMalloc+0x180>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a2c:	f000 f91a 	bl	8009c64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a30:	4b59      	ldr	r3, [pc, #356]	; (8009b98 <pvPortMalloc+0x184>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4013      	ands	r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	f040 8092 	bne.w	8009b62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01f      	beq.n	8009a84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009a44:	2208      	movs	r2, #8
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4413      	add	r3, r2
 8009a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f003 0307 	and.w	r3, r3, #7
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d016      	beq.n	8009a84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f023 0307 	bic.w	r3, r3, #7
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00c      	beq.n	8009a84 <pvPortMalloc+0x70>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	b672      	cpsid	i
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	b662      	cpsie	i
 8009a7e:	617b      	str	r3, [r7, #20]
}
 8009a80:	bf00      	nop
 8009a82:	e7fe      	b.n	8009a82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d06b      	beq.n	8009b62 <pvPortMalloc+0x14e>
 8009a8a:	4b44      	ldr	r3, [pc, #272]	; (8009b9c <pvPortMalloc+0x188>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d866      	bhi.n	8009b62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a94:	4b42      	ldr	r3, [pc, #264]	; (8009ba0 <pvPortMalloc+0x18c>)
 8009a96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a98:	4b41      	ldr	r3, [pc, #260]	; (8009ba0 <pvPortMalloc+0x18c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a9e:	e004      	b.n	8009aaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d903      	bls.n	8009abc <pvPortMalloc+0xa8>
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1f1      	bne.n	8009aa0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009abc:	4b35      	ldr	r3, [pc, #212]	; (8009b94 <pvPortMalloc+0x180>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d04d      	beq.n	8009b62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2208      	movs	r2, #8
 8009acc:	4413      	add	r3, r2
 8009ace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	1ad2      	subs	r2, r2, r3
 8009ae0:	2308      	movs	r3, #8
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d921      	bls.n	8009b2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4413      	add	r3, r2
 8009aee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	f003 0307 	and.w	r3, r3, #7
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00c      	beq.n	8009b14 <pvPortMalloc+0x100>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	b672      	cpsid	i
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	b662      	cpsie	i
 8009b0e:	613b      	str	r3, [r7, #16]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	685a      	ldr	r2, [r3, #4]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	1ad2      	subs	r2, r2, r3
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b26:	69b8      	ldr	r0, [r7, #24]
 8009b28:	f000 f8fe 	bl	8009d28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b2c:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <pvPortMalloc+0x188>)
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	4a19      	ldr	r2, [pc, #100]	; (8009b9c <pvPortMalloc+0x188>)
 8009b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b3a:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <pvPortMalloc+0x188>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	4b19      	ldr	r3, [pc, #100]	; (8009ba4 <pvPortMalloc+0x190>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d203      	bcs.n	8009b4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b46:	4b15      	ldr	r3, [pc, #84]	; (8009b9c <pvPortMalloc+0x188>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a16      	ldr	r2, [pc, #88]	; (8009ba4 <pvPortMalloc+0x190>)
 8009b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	685a      	ldr	r2, [r3, #4]
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <pvPortMalloc+0x184>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	431a      	orrs	r2, r3
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b62:	f7fe fbd7 	bl	8008314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00c      	beq.n	8009b8a <pvPortMalloc+0x176>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	b672      	cpsid	i
 8009b76:	f383 8811 	msr	BASEPRI, r3
 8009b7a:	f3bf 8f6f 	isb	sy
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	b662      	cpsie	i
 8009b84:	60fb      	str	r3, [r7, #12]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <pvPortMalloc+0x174>
	return pvReturn;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3728      	adds	r7, #40	; 0x28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	200049a0 	.word	0x200049a0
 8009b98:	200049ac 	.word	0x200049ac
 8009b9c:	200049a4 	.word	0x200049a4
 8009ba0:	20004998 	.word	0x20004998
 8009ba4:	200049a8 	.word	0x200049a8

08009ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d04c      	beq.n	8009c54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009bba:	2308      	movs	r3, #8
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	4b23      	ldr	r3, [pc, #140]	; (8009c5c <vPortFree+0xb4>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10c      	bne.n	8009bf0 <vPortFree+0x48>
	__asm volatile
 8009bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bda:	b672      	cpsid	i
 8009bdc:	f383 8811 	msr	BASEPRI, r3
 8009be0:	f3bf 8f6f 	isb	sy
 8009be4:	f3bf 8f4f 	dsb	sy
 8009be8:	b662      	cpsie	i
 8009bea:	60fb      	str	r3, [r7, #12]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <vPortFree+0x6a>
	__asm volatile
 8009bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfc:	b672      	cpsid	i
 8009bfe:	f383 8811 	msr	BASEPRI, r3
 8009c02:	f3bf 8f6f 	isb	sy
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	b662      	cpsie	i
 8009c0c:	60bb      	str	r3, [r7, #8]
}
 8009c0e:	bf00      	nop
 8009c10:	e7fe      	b.n	8009c10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	685a      	ldr	r2, [r3, #4]
 8009c16:	4b11      	ldr	r3, [pc, #68]	; (8009c5c <vPortFree+0xb4>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4013      	ands	r3, r2
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d019      	beq.n	8009c54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d115      	bne.n	8009c54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <vPortFree+0xb4>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	43db      	mvns	r3, r3
 8009c32:	401a      	ands	r2, r3
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c38:	f7fe fb5e 	bl	80082f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <vPortFree+0xb8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4413      	add	r3, r2
 8009c46:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vPortFree+0xb8>)
 8009c48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c4a:	6938      	ldr	r0, [r7, #16]
 8009c4c:	f000 f86c 	bl	8009d28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009c50:	f7fe fb60 	bl	8008314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c54:	bf00      	nop
 8009c56:	3718      	adds	r7, #24
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	200049ac 	.word	0x200049ac
 8009c60:	200049a4 	.word	0x200049a4

08009c64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c70:	4b27      	ldr	r3, [pc, #156]	; (8009d10 <prvHeapInit+0xac>)
 8009c72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00c      	beq.n	8009c98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3307      	adds	r3, #7
 8009c82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <prvHeapInit+0xac>)
 8009c94:	4413      	add	r3, r2
 8009c96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c9c:	4a1d      	ldr	r2, [pc, #116]	; (8009d14 <prvHeapInit+0xb0>)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <prvHeapInit+0xb0>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cb0:	2208      	movs	r2, #8
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f023 0307 	bic.w	r3, r3, #7
 8009cbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4a15      	ldr	r2, [pc, #84]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <prvHeapInit+0xb4>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <prvHeapInit+0xb4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <prvHeapInit+0xb4>)
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	4a0a      	ldr	r2, [pc, #40]	; (8009d1c <prvHeapInit+0xb8>)
 8009cf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <prvHeapInit+0xbc>)
 8009cfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <prvHeapInit+0xc0>)
 8009cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d02:	601a      	str	r2, [r3, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000d98 	.word	0x20000d98
 8009d14:	20004998 	.word	0x20004998
 8009d18:	200049a0 	.word	0x200049a0
 8009d1c:	200049a8 	.word	0x200049a8
 8009d20:	200049a4 	.word	0x200049a4
 8009d24:	200049ac 	.word	0x200049ac

08009d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <prvInsertBlockIntoFreeList+0xac>)
 8009d32:	60fb      	str	r3, [r7, #12]
 8009d34:	e002      	b.n	8009d3c <prvInsertBlockIntoFreeList+0x14>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d8f7      	bhi.n	8009d36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d108      	bne.n	8009d6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	441a      	add	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d118      	bne.n	8009db0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d00d      	beq.n	8009da6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	685a      	ldr	r2, [r3, #4]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	441a      	add	r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]
 8009da4:	e008      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009da6:	4b0c      	ldr	r3, [pc, #48]	; (8009dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e003      	b.n	8009db8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d002      	beq.n	8009dc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dc6:	bf00      	nop
 8009dc8:	3714      	adds	r7, #20
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	20004998 	.word	0x20004998
 8009dd8:	200049a0 	.word	0x200049a0

08009ddc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009de6:	f007 fa7b 	bl	80112e0 <sys_timeouts_sleeptime>
 8009dea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df2:	d10b      	bne.n	8009e0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009df4:	4813      	ldr	r0, [pc, #76]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009df6:	f00a f85e 	bl	8013eb6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f009 ffe6 	bl	8013dd0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009e04:	480f      	ldr	r0, [pc, #60]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e06:	f00a f847 	bl	8013e98 <sys_mutex_lock>
    return;
 8009e0a:	e018      	b.n	8009e3e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009e12:	f007 fa2b 	bl	801126c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e16:	e7e6      	b.n	8009de6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009e18:	480a      	ldr	r0, [pc, #40]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e1a:	f00a f84c 	bl	8013eb6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f009 ffd4 	bl	8013dd0 <sys_arch_mbox_fetch>
 8009e28:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009e2a:	4806      	ldr	r0, [pc, #24]	; (8009e44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009e2c:	f00a f834 	bl	8013e98 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e36:	d102      	bne.n	8009e3e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009e38:	f007 fa18 	bl	801126c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009e3c:	e7d3      	b.n	8009de6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	2000822c 	.word	0x2000822c

08009e48 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009e50:	4810      	ldr	r0, [pc, #64]	; (8009e94 <tcpip_thread+0x4c>)
 8009e52:	f00a f821 	bl	8013e98 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009e56:	4b10      	ldr	r3, [pc, #64]	; (8009e98 <tcpip_thread+0x50>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <tcpip_thread+0x50>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a0e      	ldr	r2, [pc, #56]	; (8009e9c <tcpip_thread+0x54>)
 8009e64:	6812      	ldr	r2, [r2, #0]
 8009e66:	4610      	mov	r0, r2
 8009e68:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e6a:	f107 030c 	add.w	r3, r7, #12
 8009e6e:	4619      	mov	r1, r3
 8009e70:	480b      	ldr	r0, [pc, #44]	; (8009ea0 <tcpip_thread+0x58>)
 8009e72:	f7ff ffb3 	bl	8009ddc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d106      	bne.n	8009e8a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <tcpip_thread+0x5c>)
 8009e7e:	2291      	movs	r2, #145	; 0x91
 8009e80:	4909      	ldr	r1, [pc, #36]	; (8009ea8 <tcpip_thread+0x60>)
 8009e82:	480a      	ldr	r0, [pc, #40]	; (8009eac <tcpip_thread+0x64>)
 8009e84:	f00a f8c4 	bl	8014010 <iprintf>
      continue;
 8009e88:	e003      	b.n	8009e92 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f80f 	bl	8009eb0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e92:	e7ea      	b.n	8009e6a <tcpip_thread+0x22>
 8009e94:	2000822c 	.word	0x2000822c
 8009e98:	200049b0 	.word	0x200049b0
 8009e9c:	200049b4 	.word	0x200049b4
 8009ea0:	200049b8 	.word	0x200049b8
 8009ea4:	0801561c 	.word	0x0801561c
 8009ea8:	0801564c 	.word	0x0801564c
 8009eac:	0801566c 	.word	0x0801566c

08009eb0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d026      	beq.n	8009f0e <tcpip_thread_handle_msg+0x5e>
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	dc2b      	bgt.n	8009f1c <tcpip_thread_handle_msg+0x6c>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d002      	beq.n	8009ece <tcpip_thread_handle_msg+0x1e>
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d015      	beq.n	8009ef8 <tcpip_thread_handle_msg+0x48>
 8009ecc:	e026      	b.n	8009f1c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	6850      	ldr	r0, [r2, #4]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	6892      	ldr	r2, [r2, #8]
 8009eda:	4611      	mov	r1, r2
 8009edc:	4798      	blx	r3
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 fcc5 	bl	800b878 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	2009      	movs	r0, #9
 8009ef2:	f000 fe1d 	bl	800ab30 <memp_free>
      break;
 8009ef6:	e018      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6892      	ldr	r2, [r2, #8]
 8009f00:	4610      	mov	r0, r2
 8009f02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	2008      	movs	r0, #8
 8009f08:	f000 fe12 	bl	800ab30 <memp_free>
      break;
 8009f0c:	e00d      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6892      	ldr	r2, [r2, #8]
 8009f16:	4610      	mov	r0, r2
 8009f18:	4798      	blx	r3
      break;
 8009f1a:	e006      	b.n	8009f2a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f1c:	4b05      	ldr	r3, [pc, #20]	; (8009f34 <tcpip_thread_handle_msg+0x84>)
 8009f1e:	22cf      	movs	r2, #207	; 0xcf
 8009f20:	4905      	ldr	r1, [pc, #20]	; (8009f38 <tcpip_thread_handle_msg+0x88>)
 8009f22:	4806      	ldr	r0, [pc, #24]	; (8009f3c <tcpip_thread_handle_msg+0x8c>)
 8009f24:	f00a f874 	bl	8014010 <iprintf>
      break;
 8009f28:	bf00      	nop
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	0801561c 	.word	0x0801561c
 8009f38:	0801564c 	.word	0x0801564c
 8009f3c:	0801566c 	.word	0x0801566c

08009f40 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009f4c:	481a      	ldr	r0, [pc, #104]	; (8009fb8 <tcpip_inpkt+0x78>)
 8009f4e:	f009 ff70 	bl	8013e32 <sys_mbox_valid>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <tcpip_inpkt+0x24>
 8009f58:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <tcpip_inpkt+0x7c>)
 8009f5a:	22fc      	movs	r2, #252	; 0xfc
 8009f5c:	4918      	ldr	r1, [pc, #96]	; (8009fc0 <tcpip_inpkt+0x80>)
 8009f5e:	4819      	ldr	r0, [pc, #100]	; (8009fc4 <tcpip_inpkt+0x84>)
 8009f60:	f00a f856 	bl	8014010 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009f64:	2009      	movs	r0, #9
 8009f66:	f000 fd91 	bl	800aa8c <memp_malloc>
 8009f6a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295
 8009f76:	e01a      	b.n	8009fae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f90:	6979      	ldr	r1, [r7, #20]
 8009f92:	4809      	ldr	r0, [pc, #36]	; (8009fb8 <tcpip_inpkt+0x78>)
 8009f94:	f009 ff02 	bl	8013d9c <sys_mbox_trypost>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d006      	beq.n	8009fac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f9e:	6979      	ldr	r1, [r7, #20]
 8009fa0:	2009      	movs	r0, #9
 8009fa2:	f000 fdc5 	bl	800ab30 <memp_free>
    return ERR_MEM;
 8009fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8009faa:	e000      	b.n	8009fae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009fac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	200049b8 	.word	0x200049b8
 8009fbc:	0801561c 	.word	0x0801561c
 8009fc0:	08015694 	.word	0x08015694
 8009fc4:	0801566c 	.word	0x0801566c

08009fc8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009fd8:	f003 0318 	and.w	r3, r3, #24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d006      	beq.n	8009fee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009fe0:	4a08      	ldr	r2, [pc, #32]	; (800a004 <tcpip_input+0x3c>)
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7ff ffab 	bl	8009f40 <tcpip_inpkt>
 8009fea:	4603      	mov	r3, r0
 8009fec:	e005      	b.n	8009ffa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009fee:	4a06      	ldr	r2, [pc, #24]	; (800a008 <tcpip_input+0x40>)
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7ff ffa4 	bl	8009f40 <tcpip_inpkt>
 8009ff8:	4603      	mov	r3, r0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	08013bbd 	.word	0x08013bbd
 800a008:	080129ad 	.word	0x080129ad

0800a00c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a016:	4819      	ldr	r0, [pc, #100]	; (800a07c <tcpip_try_callback+0x70>)
 800a018:	f009 ff0b 	bl	8013e32 <sys_mbox_valid>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <tcpip_try_callback+0x24>
 800a022:	4b17      	ldr	r3, [pc, #92]	; (800a080 <tcpip_try_callback+0x74>)
 800a024:	f240 125d 	movw	r2, #349	; 0x15d
 800a028:	4916      	ldr	r1, [pc, #88]	; (800a084 <tcpip_try_callback+0x78>)
 800a02a:	4817      	ldr	r0, [pc, #92]	; (800a088 <tcpip_try_callback+0x7c>)
 800a02c:	f009 fff0 	bl	8014010 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a030:	2008      	movs	r0, #8
 800a032:	f000 fd2b 	bl	800aa8c <memp_malloc>
 800a036:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a03e:	f04f 33ff 	mov.w	r3, #4294967295
 800a042:	e017      	b.n	800a074 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2201      	movs	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a056:	68f9      	ldr	r1, [r7, #12]
 800a058:	4808      	ldr	r0, [pc, #32]	; (800a07c <tcpip_try_callback+0x70>)
 800a05a:	f009 fe9f 	bl	8013d9c <sys_mbox_trypost>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d006      	beq.n	800a072 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	2008      	movs	r0, #8
 800a068:	f000 fd62 	bl	800ab30 <memp_free>
    return ERR_MEM;
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e000      	b.n	800a074 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	200049b8 	.word	0x200049b8
 800a080:	0801561c 	.word	0x0801561c
 800a084:	08015694 	.word	0x08015694
 800a088:	0801566c 	.word	0x0801566c

0800a08c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af02      	add	r7, sp, #8
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a096:	f000 f871 	bl	800a17c <lwip_init>

  tcpip_init_done = initfunc;
 800a09a:	4a17      	ldr	r2, [pc, #92]	; (800a0f8 <tcpip_init+0x6c>)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a0a0:	4a16      	ldr	r2, [pc, #88]	; (800a0fc <tcpip_init+0x70>)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a0a6:	2106      	movs	r1, #6
 800a0a8:	4815      	ldr	r0, [pc, #84]	; (800a100 <tcpip_init+0x74>)
 800a0aa:	f009 fe5d 	bl	8013d68 <sys_mbox_new>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d006      	beq.n	800a0c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a0b4:	4b13      	ldr	r3, [pc, #76]	; (800a104 <tcpip_init+0x78>)
 800a0b6:	f240 2261 	movw	r2, #609	; 0x261
 800a0ba:	4913      	ldr	r1, [pc, #76]	; (800a108 <tcpip_init+0x7c>)
 800a0bc:	4813      	ldr	r0, [pc, #76]	; (800a10c <tcpip_init+0x80>)
 800a0be:	f009 ffa7 	bl	8014010 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a0c2:	4813      	ldr	r0, [pc, #76]	; (800a110 <tcpip_init+0x84>)
 800a0c4:	f009 fed2 	bl	8013e6c <sys_mutex_new>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d006      	beq.n	800a0dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a0ce:	4b0d      	ldr	r3, [pc, #52]	; (800a104 <tcpip_init+0x78>)
 800a0d0:	f240 2265 	movw	r2, #613	; 0x265
 800a0d4:	490f      	ldr	r1, [pc, #60]	; (800a114 <tcpip_init+0x88>)
 800a0d6:	480d      	ldr	r0, [pc, #52]	; (800a10c <tcpip_init+0x80>)
 800a0d8:	f009 ff9a 	bl	8014010 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a0dc:	2318      	movs	r3, #24
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	490c      	ldr	r1, [pc, #48]	; (800a118 <tcpip_init+0x8c>)
 800a0e8:	480c      	ldr	r0, [pc, #48]	; (800a11c <tcpip_init+0x90>)
 800a0ea:	f009 fef1 	bl	8013ed0 <sys_thread_new>
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	200049b0 	.word	0x200049b0
 800a0fc:	200049b4 	.word	0x200049b4
 800a100:	200049b8 	.word	0x200049b8
 800a104:	0801561c 	.word	0x0801561c
 800a108:	080156a4 	.word	0x080156a4
 800a10c:	0801566c 	.word	0x0801566c
 800a110:	2000822c 	.word	0x2000822c
 800a114:	080156c8 	.word	0x080156c8
 800a118:	08009e49 	.word	0x08009e49
 800a11c:	080156ec 	.word	0x080156ec

0800a120 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a12a:	88fb      	ldrh	r3, [r7, #6]
 800a12c:	021b      	lsls	r3, r3, #8
 800a12e:	b21a      	sxth	r2, r3
 800a130:	88fb      	ldrh	r3, [r7, #6]
 800a132:	0a1b      	lsrs	r3, r3, #8
 800a134:	b29b      	uxth	r3, r3
 800a136:	b21b      	sxth	r3, r3
 800a138:	4313      	orrs	r3, r2
 800a13a:	b21b      	sxth	r3, r3
 800a13c:	b29b      	uxth	r3, r3
}
 800a13e:	4618      	mov	r0, r3
 800a140:	370c      	adds	r7, #12
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr

0800a14a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b083      	sub	sp, #12
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	061a      	lsls	r2, r3, #24
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a15e:	431a      	orrs	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	0a1b      	lsrs	r3, r3, #8
 800a164:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a168:	431a      	orrs	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	0e1b      	lsrs	r3, r3, #24
 800a16e:	4313      	orrs	r3, r2
}
 800a170:	4618      	mov	r0, r3
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a186:	f009 fe65 	bl	8013e54 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a18a:	f000 f8d5 	bl	800a338 <mem_init>
  memp_init();
 800a18e:	f000 fc31 	bl	800a9f4 <memp_init>
  pbuf_init();
  netif_init();
 800a192:	f000 fcf7 	bl	800ab84 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a196:	f007 f8db 	bl	8011350 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a19a:	f001 fe07 	bl	800bdac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a19e:	f007 f81d 	bl	80111dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a1a2:	bf00      	nop
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a1b6:	4b05      	ldr	r3, [pc, #20]	; (800a1cc <ptr_to_mem+0x20>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	88fb      	ldrh	r3, [r7, #6]
 800a1bc:	4413      	add	r3, r2
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	370c      	adds	r7, #12
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	200049bc 	.word	0x200049bc

0800a1d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a1d8:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <mem_to_ptr+0x20>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	b29b      	uxth	r3, r3
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	200049bc 	.word	0x200049bc

0800a1f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a1f4:	b590      	push	{r4, r7, lr}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a1fc:	4b45      	ldr	r3, [pc, #276]	; (800a314 <plug_holes+0x120>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d206      	bcs.n	800a214 <plug_holes+0x20>
 800a206:	4b44      	ldr	r3, [pc, #272]	; (800a318 <plug_holes+0x124>)
 800a208:	f240 12df 	movw	r2, #479	; 0x1df
 800a20c:	4943      	ldr	r1, [pc, #268]	; (800a31c <plug_holes+0x128>)
 800a20e:	4844      	ldr	r0, [pc, #272]	; (800a320 <plug_holes+0x12c>)
 800a210:	f009 fefe 	bl	8014010 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a214:	4b43      	ldr	r3, [pc, #268]	; (800a324 <plug_holes+0x130>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d306      	bcc.n	800a22c <plug_holes+0x38>
 800a21e:	4b3e      	ldr	r3, [pc, #248]	; (800a318 <plug_holes+0x124>)
 800a220:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a224:	4940      	ldr	r1, [pc, #256]	; (800a328 <plug_holes+0x134>)
 800a226:	483e      	ldr	r0, [pc, #248]	; (800a320 <plug_holes+0x12c>)
 800a228:	f009 fef2 	bl	8014010 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	791b      	ldrb	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <plug_holes+0x4e>
 800a234:	4b38      	ldr	r3, [pc, #224]	; (800a318 <plug_holes+0x124>)
 800a236:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a23a:	493c      	ldr	r1, [pc, #240]	; (800a32c <plug_holes+0x138>)
 800a23c:	4838      	ldr	r0, [pc, #224]	; (800a320 <plug_holes+0x12c>)
 800a23e:	f009 fee7 	bl	8014010 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a24a:	d906      	bls.n	800a25a <plug_holes+0x66>
 800a24c:	4b32      	ldr	r3, [pc, #200]	; (800a318 <plug_holes+0x124>)
 800a24e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a252:	4937      	ldr	r1, [pc, #220]	; (800a330 <plug_holes+0x13c>)
 800a254:	4832      	ldr	r0, [pc, #200]	; (800a320 <plug_holes+0x12c>)
 800a256:	f009 fedb 	bl	8014010 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f7ff ffa4 	bl	800a1ac <ptr_to_mem>
 800a264:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d024      	beq.n	800a2b8 <plug_holes+0xc4>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	791b      	ldrb	r3, [r3, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d120      	bne.n	800a2b8 <plug_holes+0xc4>
 800a276:	4b2b      	ldr	r3, [pc, #172]	; (800a324 <plug_holes+0x130>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d01b      	beq.n	800a2b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a280:	4b2c      	ldr	r3, [pc, #176]	; (800a334 <plug_holes+0x140>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	429a      	cmp	r2, r3
 800a288:	d102      	bne.n	800a290 <plug_holes+0x9c>
      lfree = mem;
 800a28a:	4a2a      	ldr	r2, [pc, #168]	; (800a334 <plug_holes+0x140>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	881a      	ldrh	r2, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2a0:	d00a      	beq.n	800a2b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7ff ff80 	bl	800a1ac <ptr_to_mem>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff ff8e 	bl	800a1d0 <mem_to_ptr>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	885b      	ldrh	r3, [r3, #2]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff ff75 	bl	800a1ac <ptr_to_mem>
 800a2c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a2c4:	68ba      	ldr	r2, [r7, #8]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d01f      	beq.n	800a30c <plug_holes+0x118>
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	791b      	ldrb	r3, [r3, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d11b      	bne.n	800a30c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a2d4:	4b17      	ldr	r3, [pc, #92]	; (800a334 <plug_holes+0x140>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d102      	bne.n	800a2e4 <plug_holes+0xf0>
      lfree = pmem;
 800a2de:	4a15      	ldr	r2, [pc, #84]	; (800a334 <plug_holes+0x140>)
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	881a      	ldrh	r2, [r3, #0]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2f4:	d00a      	beq.n	800a30c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	881b      	ldrh	r3, [r3, #0]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff ff56 	bl	800a1ac <ptr_to_mem>
 800a300:	4604      	mov	r4, r0
 800a302:	68b8      	ldr	r0, [r7, #8]
 800a304:	f7ff ff64 	bl	800a1d0 <mem_to_ptr>
 800a308:	4603      	mov	r3, r0
 800a30a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a30c:	bf00      	nop
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	bd90      	pop	{r4, r7, pc}
 800a314:	200049bc 	.word	0x200049bc
 800a318:	080156fc 	.word	0x080156fc
 800a31c:	0801572c 	.word	0x0801572c
 800a320:	08015744 	.word	0x08015744
 800a324:	200049c0 	.word	0x200049c0
 800a328:	0801576c 	.word	0x0801576c
 800a32c:	08015788 	.word	0x08015788
 800a330:	080157a4 	.word	0x080157a4
 800a334:	200049c8 	.word	0x200049c8

0800a338 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a33e:	4b1f      	ldr	r3, [pc, #124]	; (800a3bc <mem_init+0x84>)
 800a340:	3303      	adds	r3, #3
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	461a      	mov	r2, r3
 800a348:	4b1d      	ldr	r3, [pc, #116]	; (800a3c0 <mem_init+0x88>)
 800a34a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a34c:	4b1c      	ldr	r3, [pc, #112]	; (800a3c0 <mem_init+0x88>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a358:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a366:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a36a:	f7ff ff1f 	bl	800a1ac <ptr_to_mem>
 800a36e:	4603      	mov	r3, r0
 800a370:	4a14      	ldr	r2, [pc, #80]	; (800a3c4 <mem_init+0x8c>)
 800a372:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a374:	4b13      	ldr	r3, [pc, #76]	; (800a3c4 <mem_init+0x8c>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2201      	movs	r2, #1
 800a37a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <mem_init+0x8c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a384:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <mem_init+0x8c>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a38e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <mem_init+0x88>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a0c      	ldr	r2, [pc, #48]	; (800a3c8 <mem_init+0x90>)
 800a396:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a398:	480c      	ldr	r0, [pc, #48]	; (800a3cc <mem_init+0x94>)
 800a39a:	f009 fd67 	bl	8013e6c <sys_mutex_new>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d006      	beq.n	800a3b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <mem_init+0x98>)
 800a3a6:	f240 221f 	movw	r2, #543	; 0x21f
 800a3aa:	490a      	ldr	r1, [pc, #40]	; (800a3d4 <mem_init+0x9c>)
 800a3ac:	480a      	ldr	r0, [pc, #40]	; (800a3d8 <mem_init+0xa0>)
 800a3ae:	f009 fe2f 	bl	8014010 <iprintf>
  }
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20008248 	.word	0x20008248
 800a3c0:	200049bc 	.word	0x200049bc
 800a3c4:	200049c0 	.word	0x200049c0
 800a3c8:	200049c8 	.word	0x200049c8
 800a3cc:	200049c4 	.word	0x200049c4
 800a3d0:	080156fc 	.word	0x080156fc
 800a3d4:	080157d0 	.word	0x080157d0
 800a3d8:	08015744 	.word	0x08015744

0800a3dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b086      	sub	sp, #24
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff fef3 	bl	800a1d0 <mem_to_ptr>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff feda 	bl	800a1ac <ptr_to_mem>
 800a3f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7ff fed4 	bl	800a1ac <ptr_to_mem>
 800a404:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a40e:	d818      	bhi.n	800a442 <mem_link_valid+0x66>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	885b      	ldrh	r3, [r3, #2]
 800a414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a418:	d813      	bhi.n	800a442 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a41e:	8afa      	ldrh	r2, [r7, #22]
 800a420:	429a      	cmp	r2, r3
 800a422:	d004      	beq.n	800a42e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	8afa      	ldrh	r2, [r7, #22]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d109      	bne.n	800a442 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a42e:	4b08      	ldr	r3, [pc, #32]	; (800a450 <mem_link_valid+0x74>)
 800a430:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	429a      	cmp	r2, r3
 800a436:	d006      	beq.n	800a446 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	885b      	ldrh	r3, [r3, #2]
 800a43c:	8afa      	ldrh	r2, [r7, #22]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d001      	beq.n	800a446 <mem_link_valid+0x6a>
    return 0;
 800a442:	2300      	movs	r3, #0
 800a444:	e000      	b.n	800a448 <mem_link_valid+0x6c>
  }
  return 1;
 800a446:	2301      	movs	r3, #1
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	200049c0 	.word	0x200049c0

0800a454 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d070      	beq.n	800a544 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00d      	beq.n	800a488 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a46c:	4b37      	ldr	r3, [pc, #220]	; (800a54c <mem_free+0xf8>)
 800a46e:	f240 2273 	movw	r2, #627	; 0x273
 800a472:	4937      	ldr	r1, [pc, #220]	; (800a550 <mem_free+0xfc>)
 800a474:	4837      	ldr	r0, [pc, #220]	; (800a554 <mem_free+0x100>)
 800a476:	f009 fdcb 	bl	8014010 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a47a:	f009 fd49 	bl	8013f10 <sys_arch_protect>
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f009 fd53 	bl	8013f2c <sys_arch_unprotect>
    return;
 800a486:	e05e      	b.n	800a546 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3b08      	subs	r3, #8
 800a48c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a48e:	4b32      	ldr	r3, [pc, #200]	; (800a558 <mem_free+0x104>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	429a      	cmp	r2, r3
 800a496:	d306      	bcc.n	800a4a6 <mem_free+0x52>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 020c 	add.w	r2, r3, #12
 800a49e:	4b2f      	ldr	r3, [pc, #188]	; (800a55c <mem_free+0x108>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d90d      	bls.n	800a4c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a4a6:	4b29      	ldr	r3, [pc, #164]	; (800a54c <mem_free+0xf8>)
 800a4a8:	f240 227f 	movw	r2, #639	; 0x27f
 800a4ac:	492c      	ldr	r1, [pc, #176]	; (800a560 <mem_free+0x10c>)
 800a4ae:	4829      	ldr	r0, [pc, #164]	; (800a554 <mem_free+0x100>)
 800a4b0:	f009 fdae 	bl	8014010 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4b4:	f009 fd2c 	bl	8013f10 <sys_arch_protect>
 800a4b8:	6138      	str	r0, [r7, #16]
 800a4ba:	6938      	ldr	r0, [r7, #16]
 800a4bc:	f009 fd36 	bl	8013f2c <sys_arch_unprotect>
    return;
 800a4c0:	e041      	b.n	800a546 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a4c2:	4828      	ldr	r0, [pc, #160]	; (800a564 <mem_free+0x110>)
 800a4c4:	f009 fce8 	bl	8013e98 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	791b      	ldrb	r3, [r3, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d110      	bne.n	800a4f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a4d0:	4b1e      	ldr	r3, [pc, #120]	; (800a54c <mem_free+0xf8>)
 800a4d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a4d6:	4924      	ldr	r1, [pc, #144]	; (800a568 <mem_free+0x114>)
 800a4d8:	481e      	ldr	r0, [pc, #120]	; (800a554 <mem_free+0x100>)
 800a4da:	f009 fd99 	bl	8014010 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a4de:	4821      	ldr	r0, [pc, #132]	; (800a564 <mem_free+0x110>)
 800a4e0:	f009 fce9 	bl	8013eb6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4e4:	f009 fd14 	bl	8013f10 <sys_arch_protect>
 800a4e8:	6178      	str	r0, [r7, #20]
 800a4ea:	6978      	ldr	r0, [r7, #20]
 800a4ec:	f009 fd1e 	bl	8013f2c <sys_arch_unprotect>
    return;
 800a4f0:	e029      	b.n	800a546 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a4f2:	69f8      	ldr	r0, [r7, #28]
 800a4f4:	f7ff ff72 	bl	800a3dc <mem_link_valid>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d110      	bne.n	800a520 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <mem_free+0xf8>)
 800a500:	f240 2295 	movw	r2, #661	; 0x295
 800a504:	4919      	ldr	r1, [pc, #100]	; (800a56c <mem_free+0x118>)
 800a506:	4813      	ldr	r0, [pc, #76]	; (800a554 <mem_free+0x100>)
 800a508:	f009 fd82 	bl	8014010 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a50c:	4815      	ldr	r0, [pc, #84]	; (800a564 <mem_free+0x110>)
 800a50e:	f009 fcd2 	bl	8013eb6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a512:	f009 fcfd 	bl	8013f10 <sys_arch_protect>
 800a516:	61b8      	str	r0, [r7, #24]
 800a518:	69b8      	ldr	r0, [r7, #24]
 800a51a:	f009 fd07 	bl	8013f2c <sys_arch_unprotect>
    return;
 800a51e:	e012      	b.n	800a546 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2200      	movs	r2, #0
 800a524:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <mem_free+0x11c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69fa      	ldr	r2, [r7, #28]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d202      	bcs.n	800a536 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a530:	4a0f      	ldr	r2, [pc, #60]	; (800a570 <mem_free+0x11c>)
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a536:	69f8      	ldr	r0, [r7, #28]
 800a538:	f7ff fe5c 	bl	800a1f4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a53c:	4809      	ldr	r0, [pc, #36]	; (800a564 <mem_free+0x110>)
 800a53e:	f009 fcba 	bl	8013eb6 <sys_mutex_unlock>
 800a542:	e000      	b.n	800a546 <mem_free+0xf2>
    return;
 800a544:	bf00      	nop
}
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	080156fc 	.word	0x080156fc
 800a550:	080157ec 	.word	0x080157ec
 800a554:	08015744 	.word	0x08015744
 800a558:	200049bc 	.word	0x200049bc
 800a55c:	200049c0 	.word	0x200049c0
 800a560:	08015810 	.word	0x08015810
 800a564:	200049c4 	.word	0x200049c4
 800a568:	0801582c 	.word	0x0801582c
 800a56c:	08015854 	.word	0x08015854
 800a570:	200049c8 	.word	0x200049c8

0800a574 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b088      	sub	sp, #32
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	460b      	mov	r3, r1
 800a57e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a580:	887b      	ldrh	r3, [r7, #2]
 800a582:	3303      	adds	r3, #3
 800a584:	b29b      	uxth	r3, r3
 800a586:	f023 0303 	bic.w	r3, r3, #3
 800a58a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a58c:	8bfb      	ldrh	r3, [r7, #30]
 800a58e:	2b0b      	cmp	r3, #11
 800a590:	d801      	bhi.n	800a596 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a592:	230c      	movs	r3, #12
 800a594:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a596:	8bfb      	ldrh	r3, [r7, #30]
 800a598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a59c:	d803      	bhi.n	800a5a6 <mem_trim+0x32>
 800a59e:	8bfa      	ldrh	r2, [r7, #30]
 800a5a0:	887b      	ldrh	r3, [r7, #2]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d201      	bcs.n	800a5aa <mem_trim+0x36>
    return NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e0d8      	b.n	800a75c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a5aa:	4b6e      	ldr	r3, [pc, #440]	; (800a764 <mem_trim+0x1f0>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d304      	bcc.n	800a5be <mem_trim+0x4a>
 800a5b4:	4b6c      	ldr	r3, [pc, #432]	; (800a768 <mem_trim+0x1f4>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d306      	bcc.n	800a5cc <mem_trim+0x58>
 800a5be:	4b6b      	ldr	r3, [pc, #428]	; (800a76c <mem_trim+0x1f8>)
 800a5c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a5c4:	496a      	ldr	r1, [pc, #424]	; (800a770 <mem_trim+0x1fc>)
 800a5c6:	486b      	ldr	r0, [pc, #428]	; (800a774 <mem_trim+0x200>)
 800a5c8:	f009 fd22 	bl	8014010 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a5cc:	4b65      	ldr	r3, [pc, #404]	; (800a764 <mem_trim+0x1f0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d304      	bcc.n	800a5e0 <mem_trim+0x6c>
 800a5d6:	4b64      	ldr	r3, [pc, #400]	; (800a768 <mem_trim+0x1f4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d307      	bcc.n	800a5f0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5e0:	f009 fc96 	bl	8013f10 <sys_arch_protect>
 800a5e4:	60b8      	str	r0, [r7, #8]
 800a5e6:	68b8      	ldr	r0, [r7, #8]
 800a5e8:	f009 fca0 	bl	8013f2c <sys_arch_unprotect>
    return rmem;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	e0b5      	b.n	800a75c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3b08      	subs	r3, #8
 800a5f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a5f6:	69b8      	ldr	r0, [r7, #24]
 800a5f8:	f7ff fdea 	bl	800a1d0 <mem_to_ptr>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	881a      	ldrh	r2, [r3, #0]
 800a604:	8afb      	ldrh	r3, [r7, #22]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	b29b      	uxth	r3, r3
 800a60a:	3b08      	subs	r3, #8
 800a60c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a60e:	8bfa      	ldrh	r2, [r7, #30]
 800a610:	8abb      	ldrh	r3, [r7, #20]
 800a612:	429a      	cmp	r2, r3
 800a614:	d906      	bls.n	800a624 <mem_trim+0xb0>
 800a616:	4b55      	ldr	r3, [pc, #340]	; (800a76c <mem_trim+0x1f8>)
 800a618:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a61c:	4956      	ldr	r1, [pc, #344]	; (800a778 <mem_trim+0x204>)
 800a61e:	4855      	ldr	r0, [pc, #340]	; (800a774 <mem_trim+0x200>)
 800a620:	f009 fcf6 	bl	8014010 <iprintf>
  if (newsize > size) {
 800a624:	8bfa      	ldrh	r2, [r7, #30]
 800a626:	8abb      	ldrh	r3, [r7, #20]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d901      	bls.n	800a630 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e095      	b.n	800a75c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a630:	8bfa      	ldrh	r2, [r7, #30]
 800a632:	8abb      	ldrh	r3, [r7, #20]
 800a634:	429a      	cmp	r2, r3
 800a636:	d101      	bne.n	800a63c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	e08f      	b.n	800a75c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a63c:	484f      	ldr	r0, [pc, #316]	; (800a77c <mem_trim+0x208>)
 800a63e:	f009 fc2b 	bl	8013e98 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	4618      	mov	r0, r3
 800a648:	f7ff fdb0 	bl	800a1ac <ptr_to_mem>
 800a64c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	791b      	ldrb	r3, [r3, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d13f      	bne.n	800a6d6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	881b      	ldrh	r3, [r3, #0]
 800a65a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a65e:	d106      	bne.n	800a66e <mem_trim+0xfa>
 800a660:	4b42      	ldr	r3, [pc, #264]	; (800a76c <mem_trim+0x1f8>)
 800a662:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a666:	4946      	ldr	r1, [pc, #280]	; (800a780 <mem_trim+0x20c>)
 800a668:	4842      	ldr	r0, [pc, #264]	; (800a774 <mem_trim+0x200>)
 800a66a:	f009 fcd1 	bl	8014010 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	881b      	ldrh	r3, [r3, #0]
 800a672:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a674:	8afa      	ldrh	r2, [r7, #22]
 800a676:	8bfb      	ldrh	r3, [r7, #30]
 800a678:	4413      	add	r3, r2
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3308      	adds	r3, #8
 800a67e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a680:	4b40      	ldr	r3, [pc, #256]	; (800a784 <mem_trim+0x210>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	429a      	cmp	r2, r3
 800a688:	d106      	bne.n	800a698 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fd8d 	bl	800a1ac <ptr_to_mem>
 800a692:	4603      	mov	r3, r0
 800a694:	4a3b      	ldr	r2, [pc, #236]	; (800a784 <mem_trim+0x210>)
 800a696:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a698:	89fb      	ldrh	r3, [r7, #14]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7ff fd86 	bl	800a1ac <ptr_to_mem>
 800a6a0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	89ba      	ldrh	r2, [r7, #12]
 800a6ac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	8afa      	ldrh	r2, [r7, #22]
 800a6b2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	89fa      	ldrh	r2, [r7, #14]
 800a6b8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6c2:	d047      	beq.n	800a754 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7ff fd6f 	bl	800a1ac <ptr_to_mem>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	89fb      	ldrh	r3, [r7, #14]
 800a6d2:	8053      	strh	r3, [r2, #2]
 800a6d4:	e03e      	b.n	800a754 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a6d6:	8bfb      	ldrh	r3, [r7, #30]
 800a6d8:	f103 0214 	add.w	r2, r3, #20
 800a6dc:	8abb      	ldrh	r3, [r7, #20]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d838      	bhi.n	800a754 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6e2:	8afa      	ldrh	r2, [r7, #22]
 800a6e4:	8bfb      	ldrh	r3, [r7, #30]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	3308      	adds	r3, #8
 800a6ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	881b      	ldrh	r3, [r3, #0]
 800a6f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6f6:	d106      	bne.n	800a706 <mem_trim+0x192>
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	; (800a76c <mem_trim+0x1f8>)
 800a6fa:	f240 3216 	movw	r2, #790	; 0x316
 800a6fe:	4920      	ldr	r1, [pc, #128]	; (800a780 <mem_trim+0x20c>)
 800a700:	481c      	ldr	r0, [pc, #112]	; (800a774 <mem_trim+0x200>)
 800a702:	f009 fc85 	bl	8014010 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff fd4f 	bl	800a1ac <ptr_to_mem>
 800a70e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a710:	4b1c      	ldr	r3, [pc, #112]	; (800a784 <mem_trim+0x210>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	429a      	cmp	r2, r3
 800a718:	d202      	bcs.n	800a720 <mem_trim+0x1ac>
      lfree = mem2;
 800a71a:	4a1a      	ldr	r2, [pc, #104]	; (800a784 <mem_trim+0x210>)
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2200      	movs	r2, #0
 800a724:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	881a      	ldrh	r2, [r3, #0]
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	8afa      	ldrh	r2, [r7, #22]
 800a732:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	89fa      	ldrh	r2, [r7, #14]
 800a738:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a742:	d007      	beq.n	800a754 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff fd2f 	bl	800a1ac <ptr_to_mem>
 800a74e:	4602      	mov	r2, r0
 800a750:	89fb      	ldrh	r3, [r7, #14]
 800a752:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a754:	4809      	ldr	r0, [pc, #36]	; (800a77c <mem_trim+0x208>)
 800a756:	f009 fbae 	bl	8013eb6 <sys_mutex_unlock>
  return rmem;
 800a75a:	687b      	ldr	r3, [r7, #4]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200049bc 	.word	0x200049bc
 800a768:	200049c0 	.word	0x200049c0
 800a76c:	080156fc 	.word	0x080156fc
 800a770:	08015888 	.word	0x08015888
 800a774:	08015744 	.word	0x08015744
 800a778:	080158a0 	.word	0x080158a0
 800a77c:	200049c4 	.word	0x200049c4
 800a780:	080158c0 	.word	0x080158c0
 800a784:	200049c8 	.word	0x200049c8

0800a788 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	4603      	mov	r3, r0
 800a790:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <mem_malloc+0x14>
    return NULL;
 800a798:	2300      	movs	r3, #0
 800a79a:	e0e2      	b.n	800a962 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a79c:	88fb      	ldrh	r3, [r7, #6]
 800a79e:	3303      	adds	r3, #3
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a7a8:	8bbb      	ldrh	r3, [r7, #28]
 800a7aa:	2b0b      	cmp	r3, #11
 800a7ac:	d801      	bhi.n	800a7b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a7ae:	230c      	movs	r3, #12
 800a7b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a7b2:	8bbb      	ldrh	r3, [r7, #28]
 800a7b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7b8:	d803      	bhi.n	800a7c2 <mem_malloc+0x3a>
 800a7ba:	8bba      	ldrh	r2, [r7, #28]
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d201      	bcs.n	800a7c6 <mem_malloc+0x3e>
    return NULL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e0cd      	b.n	800a962 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a7c6:	4869      	ldr	r0, [pc, #420]	; (800a96c <mem_malloc+0x1e4>)
 800a7c8:	f009 fb66 	bl	8013e98 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7cc:	4b68      	ldr	r3, [pc, #416]	; (800a970 <mem_malloc+0x1e8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fcfd 	bl	800a1d0 <mem_to_ptr>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	83fb      	strh	r3, [r7, #30]
 800a7da:	e0b7      	b.n	800a94c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a7dc:	8bfb      	ldrh	r3, [r7, #30]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fce4 	bl	800a1ac <ptr_to_mem>
 800a7e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f040 80a7 	bne.w	800a93e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	8bfb      	ldrh	r3, [r7, #30]
 800a7f8:	1ad3      	subs	r3, r2, r3
 800a7fa:	f1a3 0208 	sub.w	r2, r3, #8
 800a7fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a800:	429a      	cmp	r2, r3
 800a802:	f0c0 809c 	bcc.w	800a93e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	8bfb      	ldrh	r3, [r7, #30]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	f1a3 0208 	sub.w	r2, r3, #8
 800a814:	8bbb      	ldrh	r3, [r7, #28]
 800a816:	3314      	adds	r3, #20
 800a818:	429a      	cmp	r2, r3
 800a81a:	d333      	bcc.n	800a884 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a81c:	8bfa      	ldrh	r2, [r7, #30]
 800a81e:	8bbb      	ldrh	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	b29b      	uxth	r3, r3
 800a824:	3308      	adds	r3, #8
 800a826:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a828:	8a7b      	ldrh	r3, [r7, #18]
 800a82a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a82e:	d106      	bne.n	800a83e <mem_malloc+0xb6>
 800a830:	4b50      	ldr	r3, [pc, #320]	; (800a974 <mem_malloc+0x1ec>)
 800a832:	f240 3287 	movw	r2, #903	; 0x387
 800a836:	4950      	ldr	r1, [pc, #320]	; (800a978 <mem_malloc+0x1f0>)
 800a838:	4850      	ldr	r0, [pc, #320]	; (800a97c <mem_malloc+0x1f4>)
 800a83a:	f009 fbe9 	bl	8014010 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a83e:	8a7b      	ldrh	r3, [r7, #18]
 800a840:	4618      	mov	r0, r3
 800a842:	f7ff fcb3 	bl	800a1ac <ptr_to_mem>
 800a846:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	881a      	ldrh	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8bfa      	ldrh	r2, [r7, #30]
 800a85a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	8a7a      	ldrh	r2, [r7, #18]
 800a860:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2201      	movs	r2, #1
 800a866:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	881b      	ldrh	r3, [r3, #0]
 800a86c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a870:	d00b      	beq.n	800a88a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	4618      	mov	r0, r3
 800a878:	f7ff fc98 	bl	800a1ac <ptr_to_mem>
 800a87c:	4602      	mov	r2, r0
 800a87e:	8a7b      	ldrh	r3, [r7, #18]
 800a880:	8053      	strh	r3, [r2, #2]
 800a882:	e002      	b.n	800a88a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2201      	movs	r2, #1
 800a888:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a88a:	4b39      	ldr	r3, [pc, #228]	; (800a970 <mem_malloc+0x1e8>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	429a      	cmp	r2, r3
 800a892:	d127      	bne.n	800a8e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a894:	4b36      	ldr	r3, [pc, #216]	; (800a970 <mem_malloc+0x1e8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a89a:	e005      	b.n	800a8a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fc83 	bl	800a1ac <ptr_to_mem>
 800a8a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	791b      	ldrb	r3, [r3, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <mem_malloc+0x132>
 800a8b0:	4b33      	ldr	r3, [pc, #204]	; (800a980 <mem_malloc+0x1f8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	69ba      	ldr	r2, [r7, #24]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d1f0      	bne.n	800a89c <mem_malloc+0x114>
          }
          lfree = cur;
 800a8ba:	4a2d      	ldr	r2, [pc, #180]	; (800a970 <mem_malloc+0x1e8>)
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a8c0:	4b2b      	ldr	r3, [pc, #172]	; (800a970 <mem_malloc+0x1e8>)
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	4b2e      	ldr	r3, [pc, #184]	; (800a980 <mem_malloc+0x1f8>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d00b      	beq.n	800a8e4 <mem_malloc+0x15c>
 800a8cc:	4b28      	ldr	r3, [pc, #160]	; (800a970 <mem_malloc+0x1e8>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	791b      	ldrb	r3, [r3, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d006      	beq.n	800a8e4 <mem_malloc+0x15c>
 800a8d6:	4b27      	ldr	r3, [pc, #156]	; (800a974 <mem_malloc+0x1ec>)
 800a8d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a8dc:	4929      	ldr	r1, [pc, #164]	; (800a984 <mem_malloc+0x1fc>)
 800a8de:	4827      	ldr	r0, [pc, #156]	; (800a97c <mem_malloc+0x1f4>)
 800a8e0:	f009 fb96 	bl	8014010 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a8e4:	4821      	ldr	r0, [pc, #132]	; (800a96c <mem_malloc+0x1e4>)
 800a8e6:	f009 fae6 	bl	8013eb6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a8ea:	8bba      	ldrh	r2, [r7, #28]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	4a23      	ldr	r2, [pc, #140]	; (800a980 <mem_malloc+0x1f8>)
 800a8f4:	6812      	ldr	r2, [r2, #0]
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d906      	bls.n	800a908 <mem_malloc+0x180>
 800a8fa:	4b1e      	ldr	r3, [pc, #120]	; (800a974 <mem_malloc+0x1ec>)
 800a8fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a900:	4921      	ldr	r1, [pc, #132]	; (800a988 <mem_malloc+0x200>)
 800a902:	481e      	ldr	r0, [pc, #120]	; (800a97c <mem_malloc+0x1f4>)
 800a904:	f009 fb84 	bl	8014010 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d006      	beq.n	800a920 <mem_malloc+0x198>
 800a912:	4b18      	ldr	r3, [pc, #96]	; (800a974 <mem_malloc+0x1ec>)
 800a914:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a918:	491c      	ldr	r1, [pc, #112]	; (800a98c <mem_malloc+0x204>)
 800a91a:	4818      	ldr	r0, [pc, #96]	; (800a97c <mem_malloc+0x1f4>)
 800a91c:	f009 fb78 	bl	8014010 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d006      	beq.n	800a938 <mem_malloc+0x1b0>
 800a92a:	4b12      	ldr	r3, [pc, #72]	; (800a974 <mem_malloc+0x1ec>)
 800a92c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a930:	4917      	ldr	r1, [pc, #92]	; (800a990 <mem_malloc+0x208>)
 800a932:	4812      	ldr	r0, [pc, #72]	; (800a97c <mem_malloc+0x1f4>)
 800a934:	f009 fb6c 	bl	8014010 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	3308      	adds	r3, #8
 800a93c:	e011      	b.n	800a962 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a93e:	8bfb      	ldrh	r3, [r7, #30]
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fc33 	bl	800a1ac <ptr_to_mem>
 800a946:	4603      	mov	r3, r0
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a94c:	8bfa      	ldrh	r2, [r7, #30]
 800a94e:	8bbb      	ldrh	r3, [r7, #28]
 800a950:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a954:	429a      	cmp	r2, r3
 800a956:	f4ff af41 	bcc.w	800a7dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a95a:	4804      	ldr	r0, [pc, #16]	; (800a96c <mem_malloc+0x1e4>)
 800a95c:	f009 faab 	bl	8013eb6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3720      	adds	r7, #32
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	200049c4 	.word	0x200049c4
 800a970:	200049c8 	.word	0x200049c8
 800a974:	080156fc 	.word	0x080156fc
 800a978:	080158c0 	.word	0x080158c0
 800a97c:	08015744 	.word	0x08015744
 800a980:	200049c0 	.word	0x200049c0
 800a984:	080158d4 	.word	0x080158d4
 800a988:	080158f0 	.word	0x080158f0
 800a98c:	08015920 	.word	0x08015920
 800a990:	08015950 	.word	0x08015950

0800a994 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	3303      	adds	r3, #3
 800a9aa:	f023 0303 	bic.w	r3, r3, #3
 800a9ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60fb      	str	r3, [r7, #12]
 800a9b4:	e011      	b.n	800a9da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	881b      	ldrh	r3, [r3, #0]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	60fb      	str	r3, [r7, #12]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	885b      	ldrh	r3, [r3, #2]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	dbe7      	blt.n	800a9b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a9e6:	bf00      	nop
 800a9e8:	bf00      	nop
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	80fb      	strh	r3, [r7, #6]
 800a9fe:	e009      	b.n	800aa14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aa00:	88fb      	ldrh	r3, [r7, #6]
 800aa02:	4a08      	ldr	r2, [pc, #32]	; (800aa24 <memp_init+0x30>)
 800aa04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff ffc3 	bl	800a994 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aa0e:	88fb      	ldrh	r3, [r7, #6]
 800aa10:	3301      	adds	r3, #1
 800aa12:	80fb      	strh	r3, [r7, #6]
 800aa14:	88fb      	ldrh	r3, [r7, #6]
 800aa16:	2b0c      	cmp	r3, #12
 800aa18:	d9f2      	bls.n	800aa00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	080181b8 	.word	0x080181b8

0800aa28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800aa30:	f009 fa6e 	bl	8013f10 <sys_arch_protect>
 800aa34:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d015      	beq.n	800aa70 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	689b      	ldr	r3, [r3, #8]
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	6812      	ldr	r2, [r2, #0]
 800aa4c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f003 0303 	and.w	r3, r3, #3
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d006      	beq.n	800aa66 <do_memp_malloc_pool+0x3e>
 800aa58:	4b09      	ldr	r3, [pc, #36]	; (800aa80 <do_memp_malloc_pool+0x58>)
 800aa5a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800aa5e:	4909      	ldr	r1, [pc, #36]	; (800aa84 <do_memp_malloc_pool+0x5c>)
 800aa60:	4809      	ldr	r0, [pc, #36]	; (800aa88 <do_memp_malloc_pool+0x60>)
 800aa62:	f009 fad5 	bl	8014010 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f009 fa60 	bl	8013f2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	e003      	b.n	800aa78 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f009 fa5b 	bl	8013f2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	08015974 	.word	0x08015974
 800aa84:	080159a4 	.word	0x080159a4
 800aa88:	080159c8 	.word	0x080159c8

0800aa8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	4603      	mov	r3, r0
 800aa94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa96:	79fb      	ldrb	r3, [r7, #7]
 800aa98:	2b0c      	cmp	r3, #12
 800aa9a:	d908      	bls.n	800aaae <memp_malloc+0x22>
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <memp_malloc+0x3c>)
 800aa9e:	f240 1257 	movw	r2, #343	; 0x157
 800aaa2:	490a      	ldr	r1, [pc, #40]	; (800aacc <memp_malloc+0x40>)
 800aaa4:	480a      	ldr	r0, [pc, #40]	; (800aad0 <memp_malloc+0x44>)
 800aaa6:	f009 fab3 	bl	8014010 <iprintf>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e008      	b.n	800aac0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aaae:	79fb      	ldrb	r3, [r7, #7]
 800aab0:	4a08      	ldr	r2, [pc, #32]	; (800aad4 <memp_malloc+0x48>)
 800aab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ffb6 	bl	800aa28 <do_memp_malloc_pool>
 800aabc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aabe:	68fb      	ldr	r3, [r7, #12]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	08015974 	.word	0x08015974
 800aacc:	08015a04 	.word	0x08015a04
 800aad0:	080159c8 	.word	0x080159c8
 800aad4:	080181b8 	.word	0x080181b8

0800aad8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	f003 0303 	and.w	r3, r3, #3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d006      	beq.n	800aafa <do_memp_free_pool+0x22>
 800aaec:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <do_memp_free_pool+0x4c>)
 800aaee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aaf2:	490d      	ldr	r1, [pc, #52]	; (800ab28 <do_memp_free_pool+0x50>)
 800aaf4:	480d      	ldr	r0, [pc, #52]	; (800ab2c <do_memp_free_pool+0x54>)
 800aaf6:	f009 fa8b 	bl	8014010 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aafe:	f009 fa07 	bl	8013f10 <sys_arch_protect>
 800ab02:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ab16:	68b8      	ldr	r0, [r7, #8]
 800ab18:	f009 fa08 	bl	8013f2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ab1c:	bf00      	nop
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}
 800ab24:	08015974 	.word	0x08015974
 800ab28:	08015a24 	.word	0x08015a24
 800ab2c:	080159c8 	.word	0x080159c8

0800ab30 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ab3c:	79fb      	ldrb	r3, [r7, #7]
 800ab3e:	2b0c      	cmp	r3, #12
 800ab40:	d907      	bls.n	800ab52 <memp_free+0x22>
 800ab42:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <memp_free+0x44>)
 800ab44:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ab48:	490b      	ldr	r1, [pc, #44]	; (800ab78 <memp_free+0x48>)
 800ab4a:	480c      	ldr	r0, [pc, #48]	; (800ab7c <memp_free+0x4c>)
 800ab4c:	f009 fa60 	bl	8014010 <iprintf>
 800ab50:	e00c      	b.n	800ab6c <memp_free+0x3c>

  if (mem == NULL) {
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <memp_free+0x50>)
 800ab5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7ff ffb8 	bl	800aad8 <do_memp_free_pool>
 800ab68:	e000      	b.n	800ab6c <memp_free+0x3c>
    return;
 800ab6a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	08015974 	.word	0x08015974
 800ab78:	08015a44 	.word	0x08015a44
 800ab7c:	080159c8 	.word	0x080159c8
 800ab80:	080181b8 	.word	0x080181b8

0800ab84 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab88:	bf00      	nop
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
	...

0800ab94 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b086      	sub	sp, #24
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d108      	bne.n	800abba <netif_add+0x26>
 800aba8:	4b57      	ldr	r3, [pc, #348]	; (800ad08 <netif_add+0x174>)
 800abaa:	f240 1227 	movw	r2, #295	; 0x127
 800abae:	4957      	ldr	r1, [pc, #348]	; (800ad0c <netif_add+0x178>)
 800abb0:	4857      	ldr	r0, [pc, #348]	; (800ad10 <netif_add+0x17c>)
 800abb2:	f009 fa2d 	bl	8014010 <iprintf>
 800abb6:	2300      	movs	r3, #0
 800abb8:	e0a2      	b.n	800ad00 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <netif_add+0x3e>
 800abc0:	4b51      	ldr	r3, [pc, #324]	; (800ad08 <netif_add+0x174>)
 800abc2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800abc6:	4953      	ldr	r1, [pc, #332]	; (800ad14 <netif_add+0x180>)
 800abc8:	4851      	ldr	r0, [pc, #324]	; (800ad10 <netif_add+0x17c>)
 800abca:	f009 fa21 	bl	8014010 <iprintf>
 800abce:	2300      	movs	r3, #0
 800abd0:	e096      	b.n	800ad00 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d101      	bne.n	800abdc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800abd8:	4b4f      	ldr	r3, [pc, #316]	; (800ad18 <netif_add+0x184>)
 800abda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d101      	bne.n	800abe6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800abe2:	4b4d      	ldr	r3, [pc, #308]	; (800ad18 <netif_add+0x184>)
 800abe4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800abec:	4b4a      	ldr	r3, [pc, #296]	; (800ad18 <netif_add+0x184>)
 800abee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4a45      	ldr	r2, [pc, #276]	; (800ad1c <netif_add+0x188>)
 800ac06:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6a3a      	ldr	r2, [r7, #32]
 800ac20:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ac22:	4b3f      	ldr	r3, [pc, #252]	; (800ad20 <netif_add+0x18c>)
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac30:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	68b9      	ldr	r1, [r7, #8]
 800ac38:	68f8      	ldr	r0, [r7, #12]
 800ac3a:	f000 f913 	bl	800ae64 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	4798      	blx	r3
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <netif_add+0xba>
    return NULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e058      	b.n	800ad00 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac54:	2bff      	cmp	r3, #255	; 0xff
 800ac56:	d103      	bne.n	800ac60 <netif_add+0xcc>
        netif->num = 0;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac64:	4b2f      	ldr	r3, [pc, #188]	; (800ad24 <netif_add+0x190>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	617b      	str	r3, [r7, #20]
 800ac6a:	e02b      	b.n	800acc4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ac6c:	697a      	ldr	r2, [r7, #20]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d106      	bne.n	800ac82 <netif_add+0xee>
 800ac74:	4b24      	ldr	r3, [pc, #144]	; (800ad08 <netif_add+0x174>)
 800ac76:	f240 128b 	movw	r2, #395	; 0x18b
 800ac7a:	492b      	ldr	r1, [pc, #172]	; (800ad28 <netif_add+0x194>)
 800ac7c:	4824      	ldr	r0, [pc, #144]	; (800ad10 <netif_add+0x17c>)
 800ac7e:	f009 f9c7 	bl	8014010 <iprintf>
        num_netifs++;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	3301      	adds	r3, #1
 800ac86:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	2bff      	cmp	r3, #255	; 0xff
 800ac8c:	dd06      	ble.n	800ac9c <netif_add+0x108>
 800ac8e:	4b1e      	ldr	r3, [pc, #120]	; (800ad08 <netif_add+0x174>)
 800ac90:	f240 128d 	movw	r2, #397	; 0x18d
 800ac94:	4925      	ldr	r1, [pc, #148]	; (800ad2c <netif_add+0x198>)
 800ac96:	481e      	ldr	r0, [pc, #120]	; (800ad10 <netif_add+0x17c>)
 800ac98:	f009 f9ba 	bl	8014010 <iprintf>
        if (netif2->num == netif->num) {
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d108      	bne.n	800acbe <netif_add+0x12a>
          netif->num++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acb2:	3301      	adds	r3, #1
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800acbc:	e005      	b.n	800acca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	617b      	str	r3, [r7, #20]
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1d0      	bne.n	800ac6c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1be      	bne.n	800ac4e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acd6:	2bfe      	cmp	r3, #254	; 0xfe
 800acd8:	d103      	bne.n	800ace2 <netif_add+0x14e>
    netif_num = 0;
 800acda:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <netif_add+0x18c>)
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e006      	b.n	800acf0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ace8:	3301      	adds	r3, #1
 800acea:	b2da      	uxtb	r2, r3
 800acec:	4b0c      	ldr	r3, [pc, #48]	; (800ad20 <netif_add+0x18c>)
 800acee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800acf0:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <netif_add+0x190>)
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800acf8:	4a0a      	ldr	r2, [pc, #40]	; (800ad24 <netif_add+0x190>)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800acfe:	68fb      	ldr	r3, [r7, #12]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3718      	adds	r7, #24
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	08015a60 	.word	0x08015a60
 800ad0c:	08015af4 	.word	0x08015af4
 800ad10:	08015ab0 	.word	0x08015ab0
 800ad14:	08015b10 	.word	0x08015b10
 800ad18:	0801822c 	.word	0x0801822c
 800ad1c:	0800b13f 	.word	0x0800b13f
 800ad20:	20004a00 	.word	0x20004a00
 800ad24:	2000b934 	.word	0x2000b934
 800ad28:	08015b34 	.word	0x08015b34
 800ad2c:	08015b48 	.word	0x08015b48

0800ad30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f002 fb7d 	bl	800d43c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f006 fc8d 	bl	8011664 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
	...

0800ad54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <netif_do_set_ipaddr+0x20>
 800ad66:	4b1d      	ldr	r3, [pc, #116]	; (800addc <netif_do_set_ipaddr+0x88>)
 800ad68:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ad6c:	491c      	ldr	r1, [pc, #112]	; (800ade0 <netif_do_set_ipaddr+0x8c>)
 800ad6e:	481d      	ldr	r0, [pc, #116]	; (800ade4 <netif_do_set_ipaddr+0x90>)
 800ad70:	f009 f94e 	bl	8014010 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <netif_do_set_ipaddr+0x34>
 800ad7a:	4b18      	ldr	r3, [pc, #96]	; (800addc <netif_do_set_ipaddr+0x88>)
 800ad7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ad80:	4917      	ldr	r1, [pc, #92]	; (800ade0 <netif_do_set_ipaddr+0x8c>)
 800ad82:	4818      	ldr	r0, [pc, #96]	; (800ade4 <netif_do_set_ipaddr+0x90>)
 800ad84:	f009 f944 	bl	8014010 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d01c      	beq.n	800add0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ada6:	f107 0314 	add.w	r3, r7, #20
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ffbf 	bl	800ad30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <netif_do_set_ipaddr+0x6a>
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	e000      	b.n	800adc0 <netif_do_set_ipaddr+0x6c>
 800adbe:	2300      	movs	r3, #0
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800adc4:	2101      	movs	r1, #1
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 f8d2 	bl	800af70 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800adcc:	2301      	movs	r3, #1
 800adce:	e000      	b.n	800add2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3718      	adds	r7, #24
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	08015a60 	.word	0x08015a60
 800ade0:	08015b78 	.word	0x08015b78
 800ade4:	08015ab0 	.word	0x08015ab0

0800ade8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3308      	adds	r3, #8
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	429a      	cmp	r2, r3
 800ae00:	d00a      	beq.n	800ae18 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <netif_do_set_netmask+0x26>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	e000      	b.n	800ae10 <netif_do_set_netmask+0x28>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3714      	adds	r7, #20
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr

0800ae26 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ae26:	b480      	push	{r7}
 800ae28:	b085      	sub	sp, #20
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	60f8      	str	r0, [r7, #12]
 800ae2e:	60b9      	str	r1, [r7, #8]
 800ae30:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	330c      	adds	r3, #12
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d00a      	beq.n	800ae56 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <netif_do_set_gw+0x26>
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	e000      	b.n	800ae4e <netif_do_set_gw+0x28>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ae52:	2301      	movs	r3, #1
 800ae54:	e000      	b.n	800ae58 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
 800ae70:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ae80:	4b1c      	ldr	r3, [pc, #112]	; (800aef4 <netif_set_addr+0x90>)
 800ae82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d101      	bne.n	800ae8e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ae8a:	4b1a      	ldr	r3, [pc, #104]	; (800aef4 <netif_set_addr+0x90>)
 800ae8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ae94:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <netif_set_addr+0x90>)
 800ae96:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d003      	beq.n	800aea6 <netif_set_addr+0x42>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d101      	bne.n	800aeaa <netif_set_addr+0x46>
 800aea6:	2301      	movs	r3, #1
 800aea8:	e000      	b.n	800aeac <netif_set_addr+0x48>
 800aeaa:	2300      	movs	r3, #0
 800aeac:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aeb4:	f107 0310 	add.w	r3, r7, #16
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7ff ff49 	bl	800ad54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aec2:	69fa      	ldr	r2, [r7, #28]
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7ff ff8e 	bl	800ade8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff ffa8 	bl	800ae26 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d106      	bne.n	800aeea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aedc:	f107 0310 	add.w	r3, r7, #16
 800aee0:	461a      	mov	r2, r3
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f7ff ff35 	bl	800ad54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aeea:	bf00      	nop
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	0801822c 	.word	0x0801822c

0800aef8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800af00:	4a04      	ldr	r2, [pc, #16]	; (800af14 <netif_set_default+0x1c>)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800af06:	bf00      	nop
 800af08:	370c      	adds	r7, #12
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	2000b938 	.word	0x2000b938

0800af18 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d107      	bne.n	800af36 <netif_set_up+0x1e>
 800af26:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <netif_set_up+0x4c>)
 800af28:	f44f 7254 	mov.w	r2, #848	; 0x350
 800af2c:	490e      	ldr	r1, [pc, #56]	; (800af68 <netif_set_up+0x50>)
 800af2e:	480f      	ldr	r0, [pc, #60]	; (800af6c <netif_set_up+0x54>)
 800af30:	f009 f86e 	bl	8014010 <iprintf>
 800af34:	e013      	b.n	800af5e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10c      	bne.n	800af5e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af4a:	f043 0301 	orr.w	r3, r3, #1
 800af4e:	b2da      	uxtb	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af56:	2103      	movs	r1, #3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 f809 	bl	800af70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	08015a60 	.word	0x08015a60
 800af68:	08015be8 	.word	0x08015be8
 800af6c:	08015ab0 	.word	0x08015ab0

0800af70 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <netif_issue_reports+0x20>
 800af82:	4b18      	ldr	r3, [pc, #96]	; (800afe4 <netif_issue_reports+0x74>)
 800af84:	f240 326d 	movw	r2, #877	; 0x36d
 800af88:	4917      	ldr	r1, [pc, #92]	; (800afe8 <netif_issue_reports+0x78>)
 800af8a:	4818      	ldr	r0, [pc, #96]	; (800afec <netif_issue_reports+0x7c>)
 800af8c:	f009 f840 	bl	8014010 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af96:	f003 0304 	and.w	r3, r3, #4
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d01e      	beq.n	800afdc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afa4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d017      	beq.n	800afdc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afac:	78fb      	ldrb	r3, [r7, #3]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d013      	beq.n	800afde <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3304      	adds	r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00e      	beq.n	800afde <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afc6:	f003 0308 	and.w	r3, r3, #8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d007      	beq.n	800afde <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3304      	adds	r3, #4
 800afd2:	4619      	mov	r1, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f007 faaf 	bl	8012538 <etharp_request>
 800afda:	e000      	b.n	800afde <netif_issue_reports+0x6e>
    return;
 800afdc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	08015a60 	.word	0x08015a60
 800afe8:	08015c04 	.word	0x08015c04
 800afec:	08015ab0 	.word	0x08015ab0

0800aff0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d107      	bne.n	800b00e <netif_set_down+0x1e>
 800affe:	4b12      	ldr	r3, [pc, #72]	; (800b048 <netif_set_down+0x58>)
 800b000:	f240 329b 	movw	r2, #923	; 0x39b
 800b004:	4911      	ldr	r1, [pc, #68]	; (800b04c <netif_set_down+0x5c>)
 800b006:	4812      	ldr	r0, [pc, #72]	; (800b050 <netif_set_down+0x60>)
 800b008:	f009 f802 	bl	8014010 <iprintf>
 800b00c:	e019      	b.n	800b042 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d012      	beq.n	800b042 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b022:	f023 0301 	bic.w	r3, r3, #1
 800b026:	b2da      	uxtb	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b034:	f003 0308 	and.w	r3, r3, #8
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f006 fe39 	bl	8011cb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	08015a60 	.word	0x08015a60
 800b04c:	08015c28 	.word	0x08015c28
 800b050:	08015ab0 	.word	0x08015ab0

0800b054 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d107      	bne.n	800b072 <netif_set_link_up+0x1e>
 800b062:	4b13      	ldr	r3, [pc, #76]	; (800b0b0 <netif_set_link_up+0x5c>)
 800b064:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b068:	4912      	ldr	r1, [pc, #72]	; (800b0b4 <netif_set_link_up+0x60>)
 800b06a:	4813      	ldr	r0, [pc, #76]	; (800b0b8 <netif_set_link_up+0x64>)
 800b06c:	f008 ffd0 	bl	8014010 <iprintf>
 800b070:	e01b      	b.n	800b0aa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b078:	f003 0304 	and.w	r3, r3, #4
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d114      	bne.n	800b0aa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b086:	f043 0304 	orr.w	r3, r3, #4
 800b08a:	b2da      	uxtb	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b092:	2103      	movs	r1, #3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f7ff ff6b 	bl	800af70 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <netif_set_link_up+0x56>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	08015a60 	.word	0x08015a60
 800b0b4:	08015c48 	.word	0x08015c48
 800b0b8:	08015ab0 	.word	0x08015ab0

0800b0bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d107      	bne.n	800b0da <netif_set_link_down+0x1e>
 800b0ca:	4b11      	ldr	r3, [pc, #68]	; (800b110 <netif_set_link_down+0x54>)
 800b0cc:	f240 4206 	movw	r2, #1030	; 0x406
 800b0d0:	4910      	ldr	r1, [pc, #64]	; (800b114 <netif_set_link_down+0x58>)
 800b0d2:	4811      	ldr	r0, [pc, #68]	; (800b118 <netif_set_link_down+0x5c>)
 800b0d4:	f008 ff9c 	bl	8014010 <iprintf>
 800b0d8:	e017      	b.n	800b10a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0e0:	f003 0304 	and.w	r3, r3, #4
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d010      	beq.n	800b10a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0ee:	f023 0304 	bic.w	r3, r3, #4
 800b0f2:	b2da      	uxtb	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	69db      	ldr	r3, [r3, #28]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <netif_set_link_down+0x4e>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	08015a60 	.word	0x08015a60
 800b114:	08015c6c 	.word	0x08015c6c
 800b118:	08015ab0 	.word	0x08015ab0

0800b11c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	61da      	str	r2, [r3, #28]
  }
}
 800b132:	bf00      	nop
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	60f8      	str	r0, [r7, #12]
 800b146:	60b9      	str	r1, [r7, #8]
 800b148:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b14a:	f06f 030b 	mvn.w	r3, #11
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
	...

0800b15c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d013      	beq.n	800b194 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b16c:	4b0d      	ldr	r3, [pc, #52]	; (800b1a4 <netif_get_by_index+0x48>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e00c      	b.n	800b18e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	79fa      	ldrb	r2, [r7, #7]
 800b180:	429a      	cmp	r2, r3
 800b182:	d101      	bne.n	800b188 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	e006      	b.n	800b196 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1ef      	bne.n	800b174 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	2000b934 	.word	0x2000b934

0800b1a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b1ae:	f008 feaf 	bl	8013f10 <sys_arch_protect>
 800b1b2:	6038      	str	r0, [r7, #0]
 800b1b4:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <pbuf_free_ooseq+0x44>)
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	6838      	ldr	r0, [r7, #0]
 800b1bc:	f008 feb6 	bl	8013f2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1c0:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <pbuf_free_ooseq+0x48>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	607b      	str	r3, [r7, #4]
 800b1c6:	e00a      	b.n	800b1de <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f002 f971 	bl	800d4b8 <tcp_free_ooseq>
      return;
 800b1d6:	e005      	b.n	800b1e4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	607b      	str	r3, [r7, #4]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1f1      	bne.n	800b1c8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	2000b93c 	.word	0x2000b93c
 800b1f0:	2000b944 	.word	0x2000b944

0800b1f4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b1fc:	f7ff ffd4 	bl	800b1a8 <pbuf_free_ooseq>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b20e:	f008 fe7f 	bl	8013f10 <sys_arch_protect>
 800b212:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b214:	4b0f      	ldr	r3, [pc, #60]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b21a:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b21c:	2201      	movs	r2, #1
 800b21e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f008 fe83 	bl	8013f2c <sys_arch_unprotect>

  if (!queued) {
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10f      	bne.n	800b24c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b22c:	2100      	movs	r1, #0
 800b22e:	480a      	ldr	r0, [pc, #40]	; (800b258 <pbuf_pool_is_empty+0x50>)
 800b230:	f7fe feec 	bl	800a00c <tcpip_try_callback>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <pbuf_pool_is_empty+0x44>
 800b23a:	f008 fe69 	bl	8013f10 <sys_arch_protect>
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <pbuf_pool_is_empty+0x4c>)
 800b242:	2200      	movs	r2, #0
 800b244:	701a      	strb	r2, [r3, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f008 fe70 	bl	8013f2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b24c:	bf00      	nop
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	2000b93c 	.word	0x2000b93c
 800b258:	0800b1f5 	.word	0x0800b1f5

0800b25c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	4611      	mov	r1, r2
 800b268:	461a      	mov	r2, r3
 800b26a:	460b      	mov	r3, r1
 800b26c:	80fb      	strh	r3, [r7, #6]
 800b26e:	4613      	mov	r3, r2
 800b270:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68ba      	ldr	r2, [r7, #8]
 800b27c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	88fa      	ldrh	r2, [r7, #6]
 800b282:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	88ba      	ldrh	r2, [r7, #4]
 800b288:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b28a:	8b3b      	ldrh	r3, [r7, #24]
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	7f3a      	ldrb	r2, [r7, #28]
 800b296:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2201      	movs	r2, #1
 800b29c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	73da      	strb	r2, [r3, #15]
}
 800b2a4:	bf00      	nop
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b08c      	sub	sp, #48	; 0x30
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	80bb      	strh	r3, [r7, #4]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b2c6:	887b      	ldrh	r3, [r7, #2]
 800b2c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b2cc:	d07f      	beq.n	800b3ce <pbuf_alloc+0x11e>
 800b2ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b2d2:	f300 80c8 	bgt.w	800b466 <pbuf_alloc+0x1b6>
 800b2d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b2da:	d010      	beq.n	800b2fe <pbuf_alloc+0x4e>
 800b2dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b2e0:	f300 80c1 	bgt.w	800b466 <pbuf_alloc+0x1b6>
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d002      	beq.n	800b2ee <pbuf_alloc+0x3e>
 800b2e8:	2b41      	cmp	r3, #65	; 0x41
 800b2ea:	f040 80bc 	bne.w	800b466 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b2ee:	887a      	ldrh	r2, [r7, #2]
 800b2f0:	88bb      	ldrh	r3, [r7, #4]
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f000 f8d1 	bl	800b49c <pbuf_alloc_reference>
 800b2fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b2fc:	e0bd      	b.n	800b47a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b306:	88bb      	ldrh	r3, [r7, #4]
 800b308:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b30a:	200c      	movs	r0, #12
 800b30c:	f7ff fbbe 	bl	800aa8c <memp_malloc>
 800b310:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d109      	bne.n	800b32c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b318:	f7ff ff76 	bl	800b208 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b324:	f000 faa8 	bl	800b878 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	e0a7      	b.n	800b47c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b32c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b32e:	3303      	adds	r3, #3
 800b330:	b29b      	uxth	r3, r3
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	b29b      	uxth	r3, r3
 800b338:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	8b7a      	ldrh	r2, [r7, #26]
 800b340:	4293      	cmp	r3, r2
 800b342:	bf28      	it	cs
 800b344:	4613      	movcs	r3, r2
 800b346:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b34a:	3310      	adds	r3, #16
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	4413      	add	r3, r2
 800b350:	3303      	adds	r3, #3
 800b352:	f023 0303 	bic.w	r3, r3, #3
 800b356:	4618      	mov	r0, r3
 800b358:	89f9      	ldrh	r1, [r7, #14]
 800b35a:	8b7a      	ldrh	r2, [r7, #26]
 800b35c:	2300      	movs	r3, #0
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	887b      	ldrh	r3, [r7, #2]
 800b362:	9300      	str	r3, [sp, #0]
 800b364:	460b      	mov	r3, r1
 800b366:	4601      	mov	r1, r0
 800b368:	6938      	ldr	r0, [r7, #16]
 800b36a:	f7ff ff77 	bl	800b25c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	2b00      	cmp	r3, #0
 800b378:	d006      	beq.n	800b388 <pbuf_alloc+0xd8>
 800b37a:	4b42      	ldr	r3, [pc, #264]	; (800b484 <pbuf_alloc+0x1d4>)
 800b37c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b380:	4941      	ldr	r1, [pc, #260]	; (800b488 <pbuf_alloc+0x1d8>)
 800b382:	4842      	ldr	r0, [pc, #264]	; (800b48c <pbuf_alloc+0x1dc>)
 800b384:	f008 fe44 	bl	8014010 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b38a:	3303      	adds	r3, #3
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b394:	d106      	bne.n	800b3a4 <pbuf_alloc+0xf4>
 800b396:	4b3b      	ldr	r3, [pc, #236]	; (800b484 <pbuf_alloc+0x1d4>)
 800b398:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b39c:	493c      	ldr	r1, [pc, #240]	; (800b490 <pbuf_alloc+0x1e0>)
 800b39e:	483b      	ldr	r0, [pc, #236]	; (800b48c <pbuf_alloc+0x1dc>)
 800b3a0:	f008 fe36 	bl	8014010 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d102      	bne.n	800b3b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ae:	e002      	b.n	800b3b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b3ba:	8b7a      	ldrh	r2, [r7, #26]
 800b3bc:	89fb      	ldrh	r3, [r7, #14]
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b3c6:	8b7b      	ldrh	r3, [r7, #26]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d19e      	bne.n	800b30a <pbuf_alloc+0x5a>
      break;
 800b3cc:	e055      	b.n	800b47a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b3ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	f023 0303 	bic.w	r3, r3, #3
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	88bb      	ldrh	r3, [r7, #4]
 800b3dc:	3303      	adds	r3, #3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f023 0303 	bic.w	r3, r3, #3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	4413      	add	r3, r2
 800b3e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b3ea:	8b3b      	ldrh	r3, [r7, #24]
 800b3ec:	3310      	adds	r3, #16
 800b3ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b3f0:	8b3a      	ldrh	r2, [r7, #24]
 800b3f2:	88bb      	ldrh	r3, [r7, #4]
 800b3f4:	3303      	adds	r3, #3
 800b3f6:	f023 0303 	bic.w	r3, r3, #3
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d306      	bcc.n	800b40c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b3fe:	8afa      	ldrh	r2, [r7, #22]
 800b400:	88bb      	ldrh	r3, [r7, #4]
 800b402:	3303      	adds	r3, #3
 800b404:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b408:	429a      	cmp	r2, r3
 800b40a:	d201      	bcs.n	800b410 <pbuf_alloc+0x160>
        return NULL;
 800b40c:	2300      	movs	r3, #0
 800b40e:	e035      	b.n	800b47c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b410:	8afb      	ldrh	r3, [r7, #22]
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff f9b8 	bl	800a788 <mem_malloc>
 800b418:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <pbuf_alloc+0x174>
        return NULL;
 800b420:	2300      	movs	r3, #0
 800b422:	e02b      	b.n	800b47c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b426:	3310      	adds	r3, #16
 800b428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b42a:	4413      	add	r3, r2
 800b42c:	3303      	adds	r3, #3
 800b42e:	f023 0303 	bic.w	r3, r3, #3
 800b432:	4618      	mov	r0, r3
 800b434:	88b9      	ldrh	r1, [r7, #4]
 800b436:	88ba      	ldrh	r2, [r7, #4]
 800b438:	2300      	movs	r3, #0
 800b43a:	9301      	str	r3, [sp, #4]
 800b43c:	887b      	ldrh	r3, [r7, #2]
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	460b      	mov	r3, r1
 800b442:	4601      	mov	r1, r0
 800b444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b446:	f7ff ff09 	bl	800b25c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d010      	beq.n	800b478 <pbuf_alloc+0x1c8>
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <pbuf_alloc+0x1d4>)
 800b458:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b45c:	490d      	ldr	r1, [pc, #52]	; (800b494 <pbuf_alloc+0x1e4>)
 800b45e:	480b      	ldr	r0, [pc, #44]	; (800b48c <pbuf_alloc+0x1dc>)
 800b460:	f008 fdd6 	bl	8014010 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b464:	e008      	b.n	800b478 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b466:	4b07      	ldr	r3, [pc, #28]	; (800b484 <pbuf_alloc+0x1d4>)
 800b468:	f240 1227 	movw	r2, #295	; 0x127
 800b46c:	490a      	ldr	r1, [pc, #40]	; (800b498 <pbuf_alloc+0x1e8>)
 800b46e:	4807      	ldr	r0, [pc, #28]	; (800b48c <pbuf_alloc+0x1dc>)
 800b470:	f008 fdce 	bl	8014010 <iprintf>
      return NULL;
 800b474:	2300      	movs	r3, #0
 800b476:	e001      	b.n	800b47c <pbuf_alloc+0x1cc>
      break;
 800b478:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3728      	adds	r7, #40	; 0x28
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	08015c90 	.word	0x08015c90
 800b488:	08015cc0 	.word	0x08015cc0
 800b48c:	08015cf0 	.word	0x08015cf0
 800b490:	08015d18 	.word	0x08015d18
 800b494:	08015d4c 	.word	0x08015d4c
 800b498:	08015d78 	.word	0x08015d78

0800b49c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af02      	add	r7, sp, #8
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	807b      	strh	r3, [r7, #2]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b4ac:	883b      	ldrh	r3, [r7, #0]
 800b4ae:	2b41      	cmp	r3, #65	; 0x41
 800b4b0:	d009      	beq.n	800b4c6 <pbuf_alloc_reference+0x2a>
 800b4b2:	883b      	ldrh	r3, [r7, #0]
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d006      	beq.n	800b4c6 <pbuf_alloc_reference+0x2a>
 800b4b8:	4b0f      	ldr	r3, [pc, #60]	; (800b4f8 <pbuf_alloc_reference+0x5c>)
 800b4ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b4be:	490f      	ldr	r1, [pc, #60]	; (800b4fc <pbuf_alloc_reference+0x60>)
 800b4c0:	480f      	ldr	r0, [pc, #60]	; (800b500 <pbuf_alloc_reference+0x64>)
 800b4c2:	f008 fda5 	bl	8014010 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b4c6:	200b      	movs	r0, #11
 800b4c8:	f7ff fae0 	bl	800aa8c <memp_malloc>
 800b4cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e00b      	b.n	800b4f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b4d8:	8879      	ldrh	r1, [r7, #2]
 800b4da:	887a      	ldrh	r2, [r7, #2]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	883b      	ldrh	r3, [r7, #0]
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	6879      	ldr	r1, [r7, #4]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff feb7 	bl	800b25c <pbuf_init_alloced_pbuf>
  return p;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	08015c90 	.word	0x08015c90
 800b4fc:	08015d94 	.word	0x08015d94
 800b500:	08015cf0 	.word	0x08015cf0

0800b504 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af02      	add	r7, sp, #8
 800b50a:	607b      	str	r3, [r7, #4]
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
 800b510:	460b      	mov	r3, r1
 800b512:	81bb      	strh	r3, [r7, #12]
 800b514:	4613      	mov	r3, r2
 800b516:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b51c:	8a7b      	ldrh	r3, [r7, #18]
 800b51e:	3303      	adds	r3, #3
 800b520:	f023 0203 	bic.w	r2, r3, #3
 800b524:	89bb      	ldrh	r3, [r7, #12]
 800b526:	441a      	add	r2, r3
 800b528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d901      	bls.n	800b532 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	e018      	b.n	800b564 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b532:	6a3b      	ldr	r3, [r7, #32]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b538:	8a7b      	ldrh	r3, [r7, #18]
 800b53a:	3303      	adds	r3, #3
 800b53c:	f023 0303 	bic.w	r3, r3, #3
 800b540:	6a3a      	ldr	r2, [r7, #32]
 800b542:	4413      	add	r3, r2
 800b544:	617b      	str	r3, [r7, #20]
 800b546:	e001      	b.n	800b54c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	89b9      	ldrh	r1, [r7, #12]
 800b550:	89ba      	ldrh	r2, [r7, #12]
 800b552:	2302      	movs	r3, #2
 800b554:	9301      	str	r3, [sp, #4]
 800b556:	897b      	ldrh	r3, [r7, #10]
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	460b      	mov	r3, r1
 800b55c:	6979      	ldr	r1, [r7, #20]
 800b55e:	f7ff fe7d 	bl	800b25c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b562:	687b      	ldr	r3, [r7, #4]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <pbuf_realloc+0x20>
 800b57e:	4b3a      	ldr	r3, [pc, #232]	; (800b668 <pbuf_realloc+0xfc>)
 800b580:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b584:	4939      	ldr	r1, [pc, #228]	; (800b66c <pbuf_realloc+0x100>)
 800b586:	483a      	ldr	r0, [pc, #232]	; (800b670 <pbuf_realloc+0x104>)
 800b588:	f008 fd42 	bl	8014010 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	887a      	ldrh	r2, [r7, #2]
 800b592:	429a      	cmp	r2, r3
 800b594:	d263      	bcs.n	800b65e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	891a      	ldrh	r2, [r3, #8]
 800b59a:	887b      	ldrh	r3, [r7, #2]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b5a0:	887b      	ldrh	r3, [r7, #2]
 800b5a2:	817b      	strh	r3, [r7, #10]
  q = p;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b5a8:	e018      	b.n	800b5dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	895b      	ldrh	r3, [r3, #10]
 800b5ae:	897a      	ldrh	r2, [r7, #10]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	891a      	ldrh	r2, [r3, #8]
 800b5b8:	893b      	ldrh	r3, [r7, #8]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d106      	bne.n	800b5dc <pbuf_realloc+0x70>
 800b5ce:	4b26      	ldr	r3, [pc, #152]	; (800b668 <pbuf_realloc+0xfc>)
 800b5d0:	f240 12af 	movw	r2, #431	; 0x1af
 800b5d4:	4927      	ldr	r1, [pc, #156]	; (800b674 <pbuf_realloc+0x108>)
 800b5d6:	4826      	ldr	r0, [pc, #152]	; (800b670 <pbuf_realloc+0x104>)
 800b5d8:	f008 fd1a 	bl	8014010 <iprintf>
  while (rem_len > q->len) {
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	895b      	ldrh	r3, [r3, #10]
 800b5e0:	897a      	ldrh	r2, [r7, #10]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d8e1      	bhi.n	800b5aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	7b1b      	ldrb	r3, [r3, #12]
 800b5ea:	f003 030f 	and.w	r3, r3, #15
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d121      	bne.n	800b636 <pbuf_realloc+0xca>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	895b      	ldrh	r3, [r3, #10]
 800b5f6:	897a      	ldrh	r2, [r7, #10]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d01c      	beq.n	800b636 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	7b5b      	ldrb	r3, [r3, #13]
 800b600:	f003 0302 	and.w	r3, r3, #2
 800b604:	2b00      	cmp	r3, #0
 800b606:	d116      	bne.n	800b636 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	b29a      	uxth	r2, r3
 800b612:	897b      	ldrh	r3, [r7, #10]
 800b614:	4413      	add	r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	4619      	mov	r1, r3
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7fe ffaa 	bl	800a574 <mem_trim>
 800b620:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d106      	bne.n	800b636 <pbuf_realloc+0xca>
 800b628:	4b0f      	ldr	r3, [pc, #60]	; (800b668 <pbuf_realloc+0xfc>)
 800b62a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b62e:	4912      	ldr	r1, [pc, #72]	; (800b678 <pbuf_realloc+0x10c>)
 800b630:	480f      	ldr	r0, [pc, #60]	; (800b670 <pbuf_realloc+0x104>)
 800b632:	f008 fced 	bl	8014010 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	897a      	ldrh	r2, [r7, #10]
 800b63a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	895a      	ldrh	r2, [r3, #10]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d004      	beq.n	800b656 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4618      	mov	r0, r3
 800b652:	f000 f911 	bl	800b878 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]
 800b65c:	e000      	b.n	800b660 <pbuf_realloc+0xf4>
    return;
 800b65e:	bf00      	nop

}
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	08015c90 	.word	0x08015c90
 800b66c:	08015da8 	.word	0x08015da8
 800b670:	08015cf0 	.word	0x08015cf0
 800b674:	08015dc0 	.word	0x08015dc0
 800b678:	08015dd8 	.word	0x08015dd8

0800b67c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d106      	bne.n	800b69e <pbuf_add_header_impl+0x22>
 800b690:	4b2b      	ldr	r3, [pc, #172]	; (800b740 <pbuf_add_header_impl+0xc4>)
 800b692:	f240 12df 	movw	r2, #479	; 0x1df
 800b696:	492b      	ldr	r1, [pc, #172]	; (800b744 <pbuf_add_header_impl+0xc8>)
 800b698:	482b      	ldr	r0, [pc, #172]	; (800b748 <pbuf_add_header_impl+0xcc>)
 800b69a:	f008 fcb9 	bl	8014010 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <pbuf_add_header_impl+0x30>
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6aa:	d301      	bcc.n	800b6b0 <pbuf_add_header_impl+0x34>
    return 1;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e043      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <pbuf_add_header_impl+0x3e>
    return 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e03e      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	891a      	ldrh	r2, [r3, #8]
 800b6c2:	8a7b      	ldrh	r3, [r7, #18]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	8a7a      	ldrh	r2, [r7, #18]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d901      	bls.n	800b6d2 <pbuf_add_header_impl+0x56>
    return 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e032      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	7b1b      	ldrb	r3, [r3, #12]
 800b6d6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b6d8:	8a3b      	ldrh	r3, [r7, #16]
 800b6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00c      	beq.n	800b6fc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	685a      	ldr	r2, [r3, #4]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	425b      	negs	r3, r3
 800b6ea:	4413      	add	r3, r2
 800b6ec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3310      	adds	r3, #16
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d20d      	bcs.n	800b714 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e01d      	b.n	800b738 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d006      	beq.n	800b710 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	425b      	negs	r3, r3
 800b70a:	4413      	add	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	e001      	b.n	800b714 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b710:	2301      	movs	r3, #1
 800b712:	e011      	b.n	800b738 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	697a      	ldr	r2, [r7, #20]
 800b718:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	895a      	ldrh	r2, [r3, #10]
 800b71e:	8a7b      	ldrh	r3, [r7, #18]
 800b720:	4413      	add	r3, r2
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	891a      	ldrh	r2, [r3, #8]
 800b72c:	8a7b      	ldrh	r3, [r7, #18]
 800b72e:	4413      	add	r3, r2
 800b730:	b29a      	uxth	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	811a      	strh	r2, [r3, #8]


  return 0;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3718      	adds	r7, #24
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08015c90 	.word	0x08015c90
 800b744:	08015df4 	.word	0x08015df4
 800b748:	08015cf0 	.word	0x08015cf0

0800b74c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b756:	2200      	movs	r2, #0
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff ff8e 	bl	800b67c <pbuf_add_header_impl>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d106      	bne.n	800b78a <pbuf_remove_header+0x1e>
 800b77c:	4b20      	ldr	r3, [pc, #128]	; (800b800 <pbuf_remove_header+0x94>)
 800b77e:	f240 224b 	movw	r2, #587	; 0x24b
 800b782:	4920      	ldr	r1, [pc, #128]	; (800b804 <pbuf_remove_header+0x98>)
 800b784:	4820      	ldr	r0, [pc, #128]	; (800b808 <pbuf_remove_header+0x9c>)
 800b786:	f008 fc43 	bl	8014010 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <pbuf_remove_header+0x2c>
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b796:	d301      	bcc.n	800b79c <pbuf_remove_header+0x30>
    return 1;
 800b798:	2301      	movs	r3, #1
 800b79a:	e02c      	b.n	800b7f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d101      	bne.n	800b7a6 <pbuf_remove_header+0x3a>
    return 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e027      	b.n	800b7f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	895b      	ldrh	r3, [r3, #10]
 800b7ae:	89fa      	ldrh	r2, [r7, #14]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d908      	bls.n	800b7c6 <pbuf_remove_header+0x5a>
 800b7b4:	4b12      	ldr	r3, [pc, #72]	; (800b800 <pbuf_remove_header+0x94>)
 800b7b6:	f240 2255 	movw	r2, #597	; 0x255
 800b7ba:	4914      	ldr	r1, [pc, #80]	; (800b80c <pbuf_remove_header+0xa0>)
 800b7bc:	4812      	ldr	r0, [pc, #72]	; (800b808 <pbuf_remove_header+0x9c>)
 800b7be:	f008 fc27 	bl	8014010 <iprintf>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e017      	b.n	800b7f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	441a      	add	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	895a      	ldrh	r2, [r3, #10]
 800b7dc:	89fb      	ldrh	r3, [r7, #14]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	b29a      	uxth	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	891a      	ldrh	r2, [r3, #8]
 800b7ea:	89fb      	ldrh	r3, [r7, #14]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	08015c90 	.word	0x08015c90
 800b804:	08015df4 	.word	0x08015df4
 800b808:	08015cf0 	.word	0x08015cf0
 800b80c:	08015e00 	.word	0x08015e00

0800b810 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	807b      	strh	r3, [r7, #2]
 800b81c:	4613      	mov	r3, r2
 800b81e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b820:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b824:	2b00      	cmp	r3, #0
 800b826:	da08      	bge.n	800b83a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b82c:	425b      	negs	r3, r3
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff9b 	bl	800b76c <pbuf_remove_header>
 800b836:	4603      	mov	r3, r0
 800b838:	e007      	b.n	800b84a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b83a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b83e:	787a      	ldrb	r2, [r7, #1]
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ff1a 	bl	800b67c <pbuf_add_header_impl>
 800b848:	4603      	mov	r3, r0
  }
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b082      	sub	sp, #8
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	460b      	mov	r3, r1
 800b85c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b85e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b862:	2201      	movs	r2, #1
 800b864:	4619      	mov	r1, r3
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff ffd2 	bl	800b810 <pbuf_header_impl>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
	...

0800b878 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b088      	sub	sp, #32
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10b      	bne.n	800b89e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <pbuf_free+0x22>
 800b88c:	4b3b      	ldr	r3, [pc, #236]	; (800b97c <pbuf_free+0x104>)
 800b88e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b892:	493b      	ldr	r1, [pc, #236]	; (800b980 <pbuf_free+0x108>)
 800b894:	483b      	ldr	r0, [pc, #236]	; (800b984 <pbuf_free+0x10c>)
 800b896:	f008 fbbb 	bl	8014010 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b89a:	2300      	movs	r3, #0
 800b89c:	e069      	b.n	800b972 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b8a2:	e062      	b.n	800b96a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b8a4:	f008 fb34 	bl	8013f10 <sys_arch_protect>
 800b8a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	7b9b      	ldrb	r3, [r3, #14]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d106      	bne.n	800b8c0 <pbuf_free+0x48>
 800b8b2:	4b32      	ldr	r3, [pc, #200]	; (800b97c <pbuf_free+0x104>)
 800b8b4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b8b8:	4933      	ldr	r1, [pc, #204]	; (800b988 <pbuf_free+0x110>)
 800b8ba:	4832      	ldr	r0, [pc, #200]	; (800b984 <pbuf_free+0x10c>)
 800b8bc:	f008 fba8 	bl	8014010 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7b9b      	ldrb	r3, [r3, #14]
 800b8c4:	3b01      	subs	r3, #1
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	739a      	strb	r2, [r3, #14]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7b9b      	ldrb	r3, [r3, #14]
 800b8d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b8d2:	69b8      	ldr	r0, [r7, #24]
 800b8d4:	f008 fb2a 	bl	8013f2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b8d8:	7dfb      	ldrb	r3, [r7, #23]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d143      	bne.n	800b966 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	7b1b      	ldrb	r3, [r3, #12]
 800b8e8:	f003 030f 	and.w	r3, r3, #15
 800b8ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7b5b      	ldrb	r3, [r3, #13]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d011      	beq.n	800b91e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	691b      	ldr	r3, [r3, #16]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d106      	bne.n	800b914 <pbuf_free+0x9c>
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <pbuf_free+0x104>)
 800b908:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b90c:	491f      	ldr	r1, [pc, #124]	; (800b98c <pbuf_free+0x114>)
 800b90e:	481d      	ldr	r0, [pc, #116]	; (800b984 <pbuf_free+0x10c>)
 800b910:	f008 fb7e 	bl	8014010 <iprintf>
        pc->custom_free_function(p);
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	4798      	blx	r3
 800b91c:	e01d      	b.n	800b95a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d104      	bne.n	800b92e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	200c      	movs	r0, #12
 800b928:	f7ff f902 	bl	800ab30 <memp_free>
 800b92c:	e015      	b.n	800b95a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d104      	bne.n	800b93e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	200b      	movs	r0, #11
 800b938:	f7ff f8fa 	bl	800ab30 <memp_free>
 800b93c:	e00d      	b.n	800b95a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b93e:	7bfb      	ldrb	r3, [r7, #15]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d103      	bne.n	800b94c <pbuf_free+0xd4>
          mem_free(p);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f7fe fd85 	bl	800a454 <mem_free>
 800b94a:	e006      	b.n	800b95a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b94c:	4b0b      	ldr	r3, [pc, #44]	; (800b97c <pbuf_free+0x104>)
 800b94e:	f240 320f 	movw	r2, #783	; 0x30f
 800b952:	490f      	ldr	r1, [pc, #60]	; (800b990 <pbuf_free+0x118>)
 800b954:	480b      	ldr	r0, [pc, #44]	; (800b984 <pbuf_free+0x10c>)
 800b956:	f008 fb5b 	bl	8014010 <iprintf>
        }
      }
      count++;
 800b95a:	7ffb      	ldrb	r3, [r7, #31]
 800b95c:	3301      	adds	r3, #1
 800b95e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	607b      	str	r3, [r7, #4]
 800b964:	e001      	b.n	800b96a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d199      	bne.n	800b8a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b970:	7ffb      	ldrb	r3, [r7, #31]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3720      	adds	r7, #32
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	08015c90 	.word	0x08015c90
 800b980:	08015df4 	.word	0x08015df4
 800b984:	08015cf0 	.word	0x08015cf0
 800b988:	08015e20 	.word	0x08015e20
 800b98c:	08015e38 	.word	0x08015e38
 800b990:	08015e5c 	.word	0x08015e5c

0800b994 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b9a0:	e005      	b.n	800b9ae <pbuf_clen+0x1a>
    ++len;
 800b9a2:	89fb      	ldrh	r3, [r7, #14]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1f6      	bne.n	800b9a2 <pbuf_clen+0xe>
  }
  return len;
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3714      	adds	r7, #20
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr
	...

0800b9c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d016      	beq.n	800ba00 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b9d2:	f008 fa9d 	bl	8013f10 <sys_arch_protect>
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	7b9b      	ldrb	r3, [r3, #14]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	b2da      	uxtb	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	739a      	strb	r2, [r3, #14]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f008 faa1 	bl	8013f2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	7b9b      	ldrb	r3, [r3, #14]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d106      	bne.n	800ba00 <pbuf_ref+0x3c>
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <pbuf_ref+0x44>)
 800b9f4:	f240 3242 	movw	r2, #834	; 0x342
 800b9f8:	4904      	ldr	r1, [pc, #16]	; (800ba0c <pbuf_ref+0x48>)
 800b9fa:	4805      	ldr	r0, [pc, #20]	; (800ba10 <pbuf_ref+0x4c>)
 800b9fc:	f008 fb08 	bl	8014010 <iprintf>
  }
}
 800ba00:	bf00      	nop
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	08015c90 	.word	0x08015c90
 800ba0c:	08015e70 	.word	0x08015e70
 800ba10:	08015cf0 	.word	0x08015cf0

0800ba14 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <pbuf_cat+0x16>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d107      	bne.n	800ba3a <pbuf_cat+0x26>
 800ba2a:	4b20      	ldr	r3, [pc, #128]	; (800baac <pbuf_cat+0x98>)
 800ba2c:	f240 3259 	movw	r2, #857	; 0x359
 800ba30:	491f      	ldr	r1, [pc, #124]	; (800bab0 <pbuf_cat+0x9c>)
 800ba32:	4820      	ldr	r0, [pc, #128]	; (800bab4 <pbuf_cat+0xa0>)
 800ba34:	f008 faec 	bl	8014010 <iprintf>
 800ba38:	e034      	b.n	800baa4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	60fb      	str	r3, [r7, #12]
 800ba3e:	e00a      	b.n	800ba56 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	891a      	ldrh	r2, [r3, #8]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	891b      	ldrh	r3, [r3, #8]
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60fb      	str	r3, [r7, #12]
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1f0      	bne.n	800ba40 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	891a      	ldrh	r2, [r3, #8]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	895b      	ldrh	r3, [r3, #10]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d006      	beq.n	800ba78 <pbuf_cat+0x64>
 800ba6a:	4b10      	ldr	r3, [pc, #64]	; (800baac <pbuf_cat+0x98>)
 800ba6c:	f240 3262 	movw	r2, #866	; 0x362
 800ba70:	4911      	ldr	r1, [pc, #68]	; (800bab8 <pbuf_cat+0xa4>)
 800ba72:	4810      	ldr	r0, [pc, #64]	; (800bab4 <pbuf_cat+0xa0>)
 800ba74:	f008 facc 	bl	8014010 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d006      	beq.n	800ba8e <pbuf_cat+0x7a>
 800ba80:	4b0a      	ldr	r3, [pc, #40]	; (800baac <pbuf_cat+0x98>)
 800ba82:	f240 3263 	movw	r2, #867	; 0x363
 800ba86:	490d      	ldr	r1, [pc, #52]	; (800babc <pbuf_cat+0xa8>)
 800ba88:	480a      	ldr	r0, [pc, #40]	; (800bab4 <pbuf_cat+0xa0>)
 800ba8a:	f008 fac1 	bl	8014010 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	891a      	ldrh	r2, [r3, #8]
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	891b      	ldrh	r3, [r3, #8]
 800ba96:	4413      	add	r3, r2
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	08015c90 	.word	0x08015c90
 800bab0:	08015e84 	.word	0x08015e84
 800bab4:	08015cf0 	.word	0x08015cf0
 800bab8:	08015ebc 	.word	0x08015ebc
 800babc:	08015eec 	.word	0x08015eec

0800bac0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800baca:	2300      	movs	r3, #0
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	2300      	movs	r3, #0
 800bad0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d008      	beq.n	800baea <pbuf_copy+0x2a>
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d005      	beq.n	800baea <pbuf_copy+0x2a>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	891a      	ldrh	r2, [r3, #8]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	891b      	ldrh	r3, [r3, #8]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d209      	bcs.n	800bafe <pbuf_copy+0x3e>
 800baea:	4b57      	ldr	r3, [pc, #348]	; (800bc48 <pbuf_copy+0x188>)
 800baec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800baf0:	4956      	ldr	r1, [pc, #344]	; (800bc4c <pbuf_copy+0x18c>)
 800baf2:	4857      	ldr	r0, [pc, #348]	; (800bc50 <pbuf_copy+0x190>)
 800baf4:	f008 fa8c 	bl	8014010 <iprintf>
 800baf8:	f06f 030f 	mvn.w	r3, #15
 800bafc:	e09f      	b.n	800bc3e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	895b      	ldrh	r3, [r3, #10]
 800bb02:	461a      	mov	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	1ad2      	subs	r2, r2, r3
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	895b      	ldrh	r3, [r3, #10]
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	1acb      	subs	r3, r1, r3
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d306      	bcc.n	800bb24 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	895b      	ldrh	r3, [r3, #10]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	60fb      	str	r3, [r7, #12]
 800bb22:	e005      	b.n	800bb30 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	895b      	ldrh	r3, [r3, #10]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	1ad3      	subs	r3, r2, r3
 800bb2e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685a      	ldr	r2, [r3, #4]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	18d0      	adds	r0, r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	4413      	add	r3, r2
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4619      	mov	r1, r3
 800bb44:	f008 fa34 	bl	8013fb0 <memcpy>
    offset_to += len;
 800bb48:	697a      	ldr	r2, [r7, #20]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	4413      	add	r3, r2
 800bb56:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d906      	bls.n	800bb72 <pbuf_copy+0xb2>
 800bb64:	4b38      	ldr	r3, [pc, #224]	; (800bc48 <pbuf_copy+0x188>)
 800bb66:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bb6a:	493a      	ldr	r1, [pc, #232]	; (800bc54 <pbuf_copy+0x194>)
 800bb6c:	4838      	ldr	r0, [pc, #224]	; (800bc50 <pbuf_copy+0x190>)
 800bb6e:	f008 fa4f 	bl	8014010 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	895b      	ldrh	r3, [r3, #10]
 800bb76:	461a      	mov	r2, r3
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d906      	bls.n	800bb8c <pbuf_copy+0xcc>
 800bb7e:	4b32      	ldr	r3, [pc, #200]	; (800bc48 <pbuf_copy+0x188>)
 800bb80:	f240 32da 	movw	r2, #986	; 0x3da
 800bb84:	4934      	ldr	r1, [pc, #208]	; (800bc58 <pbuf_copy+0x198>)
 800bb86:	4832      	ldr	r0, [pc, #200]	; (800bc50 <pbuf_copy+0x190>)
 800bb88:	f008 fa42 	bl	8014010 <iprintf>
    if (offset_from >= p_from->len) {
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	895b      	ldrh	r3, [r3, #10]
 800bb90:	461a      	mov	r2, r3
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d304      	bcc.n	800bba2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb98:	2300      	movs	r3, #0
 800bb9a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	895b      	ldrh	r3, [r3, #10]
 800bba6:	461a      	mov	r2, r3
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d114      	bne.n	800bbd8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10c      	bne.n	800bbd8 <pbuf_copy+0x118>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d009      	beq.n	800bbd8 <pbuf_copy+0x118>
 800bbc4:	4b20      	ldr	r3, [pc, #128]	; (800bc48 <pbuf_copy+0x188>)
 800bbc6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bbca:	4924      	ldr	r1, [pc, #144]	; (800bc5c <pbuf_copy+0x19c>)
 800bbcc:	4820      	ldr	r0, [pc, #128]	; (800bc50 <pbuf_copy+0x190>)
 800bbce:	f008 fa1f 	bl	8014010 <iprintf>
 800bbd2:	f06f 030f 	mvn.w	r3, #15
 800bbd6:	e032      	b.n	800bc3e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d013      	beq.n	800bc06 <pbuf_copy+0x146>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	895a      	ldrh	r2, [r3, #10]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	891b      	ldrh	r3, [r3, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d10d      	bne.n	800bc06 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <pbuf_copy+0x146>
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <pbuf_copy+0x188>)
 800bbf4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bbf8:	4919      	ldr	r1, [pc, #100]	; (800bc60 <pbuf_copy+0x1a0>)
 800bbfa:	4815      	ldr	r0, [pc, #84]	; (800bc50 <pbuf_copy+0x190>)
 800bbfc:	f008 fa08 	bl	8014010 <iprintf>
 800bc00:	f06f 0305 	mvn.w	r3, #5
 800bc04:	e01b      	b.n	800bc3e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d013      	beq.n	800bc34 <pbuf_copy+0x174>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	895a      	ldrh	r2, [r3, #10]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	891b      	ldrh	r3, [r3, #8]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d10d      	bne.n	800bc34 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d009      	beq.n	800bc34 <pbuf_copy+0x174>
 800bc20:	4b09      	ldr	r3, [pc, #36]	; (800bc48 <pbuf_copy+0x188>)
 800bc22:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bc26:	490e      	ldr	r1, [pc, #56]	; (800bc60 <pbuf_copy+0x1a0>)
 800bc28:	4809      	ldr	r0, [pc, #36]	; (800bc50 <pbuf_copy+0x190>)
 800bc2a:	f008 f9f1 	bl	8014010 <iprintf>
 800bc2e:	f06f 0305 	mvn.w	r3, #5
 800bc32:	e004      	b.n	800bc3e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f47f af61 	bne.w	800bafe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	08015c90 	.word	0x08015c90
 800bc4c:	08015f38 	.word	0x08015f38
 800bc50:	08015cf0 	.word	0x08015cf0
 800bc54:	08015f68 	.word	0x08015f68
 800bc58:	08015f80 	.word	0x08015f80
 800bc5c:	08015f9c 	.word	0x08015f9c
 800bc60:	08015fac 	.word	0x08015fac

0800bc64 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4611      	mov	r1, r2
 800bc70:	461a      	mov	r2, r3
 800bc72:	460b      	mov	r3, r1
 800bc74:	80fb      	strh	r3, [r7, #6]
 800bc76:	4613      	mov	r3, r2
 800bc78:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d108      	bne.n	800bc9a <pbuf_copy_partial+0x36>
 800bc88:	4b2b      	ldr	r3, [pc, #172]	; (800bd38 <pbuf_copy_partial+0xd4>)
 800bc8a:	f240 420a 	movw	r2, #1034	; 0x40a
 800bc8e:	492b      	ldr	r1, [pc, #172]	; (800bd3c <pbuf_copy_partial+0xd8>)
 800bc90:	482b      	ldr	r0, [pc, #172]	; (800bd40 <pbuf_copy_partial+0xdc>)
 800bc92:	f008 f9bd 	bl	8014010 <iprintf>
 800bc96:	2300      	movs	r3, #0
 800bc98:	e04a      	b.n	800bd30 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d108      	bne.n	800bcb2 <pbuf_copy_partial+0x4e>
 800bca0:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <pbuf_copy_partial+0xd4>)
 800bca2:	f240 420b 	movw	r2, #1035	; 0x40b
 800bca6:	4927      	ldr	r1, [pc, #156]	; (800bd44 <pbuf_copy_partial+0xe0>)
 800bca8:	4825      	ldr	r0, [pc, #148]	; (800bd40 <pbuf_copy_partial+0xdc>)
 800bcaa:	f008 f9b1 	bl	8014010 <iprintf>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e03e      	b.n	800bd30 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	61fb      	str	r3, [r7, #28]
 800bcb6:	e034      	b.n	800bd22 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bcb8:	88bb      	ldrh	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d00a      	beq.n	800bcd4 <pbuf_copy_partial+0x70>
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	895b      	ldrh	r3, [r3, #10]
 800bcc2:	88ba      	ldrh	r2, [r7, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d305      	bcc.n	800bcd4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	895b      	ldrh	r3, [r3, #10]
 800bccc:	88ba      	ldrh	r2, [r7, #4]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	80bb      	strh	r3, [r7, #4]
 800bcd2:	e023      	b.n	800bd1c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	895a      	ldrh	r2, [r3, #10]
 800bcd8:	88bb      	ldrh	r3, [r7, #4]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bcde:	8b3a      	ldrh	r2, [r7, #24]
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d901      	bls.n	800bcea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bce6:	88fb      	ldrh	r3, [r7, #6]
 800bce8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bcea:	8b7b      	ldrh	r3, [r7, #26]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	18d0      	adds	r0, r2, r3
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	88bb      	ldrh	r3, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	8b3a      	ldrh	r2, [r7, #24]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	f008 f958 	bl	8013fb0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bd00:	8afa      	ldrh	r2, [r7, #22]
 800bd02:	8b3b      	ldrh	r3, [r7, #24]
 800bd04:	4413      	add	r3, r2
 800bd06:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bd08:	8b7a      	ldrh	r2, [r7, #26]
 800bd0a:	8b3b      	ldrh	r3, [r7, #24]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bd10:	88fa      	ldrh	r2, [r7, #6]
 800bd12:	8b3b      	ldrh	r3, [r7, #24]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	61fb      	str	r3, [r7, #28]
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <pbuf_copy_partial+0xca>
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1c4      	bne.n	800bcb8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bd2e:	8afb      	ldrh	r3, [r7, #22]
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3720      	adds	r7, #32
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	08015c90 	.word	0x08015c90
 800bd3c:	08015fd8 	.word	0x08015fd8
 800bd40:	08015cf0 	.word	0x08015cf0
 800bd44:	08015ff8 	.word	0x08015ff8

0800bd48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	4603      	mov	r3, r0
 800bd50:	603a      	str	r2, [r7, #0]
 800bd52:	71fb      	strb	r3, [r7, #7]
 800bd54:	460b      	mov	r3, r1
 800bd56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	8919      	ldrh	r1, [r3, #8]
 800bd5c:	88ba      	ldrh	r2, [r7, #4]
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff faa5 	bl	800b2b0 <pbuf_alloc>
 800bd66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <pbuf_clone+0x2a>
    return NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e011      	b.n	800bd96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd72:	6839      	ldr	r1, [r7, #0]
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f7ff fea3 	bl	800bac0 <pbuf_copy>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d006      	beq.n	800bd94 <pbuf_clone+0x4c>
 800bd86:	4b06      	ldr	r3, [pc, #24]	; (800bda0 <pbuf_clone+0x58>)
 800bd88:	f240 5224 	movw	r2, #1316	; 0x524
 800bd8c:	4905      	ldr	r1, [pc, #20]	; (800bda4 <pbuf_clone+0x5c>)
 800bd8e:	4806      	ldr	r0, [pc, #24]	; (800bda8 <pbuf_clone+0x60>)
 800bd90:	f008 f93e 	bl	8014010 <iprintf>
  return q;
 800bd94:	68fb      	ldr	r3, [r7, #12]
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	08015c90 	.word	0x08015c90
 800bda4:	08016104 	.word	0x08016104
 800bda8:	08015cf0 	.word	0x08015cf0

0800bdac <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdb0:	f008 f946 	bl	8014040 <rand>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bdc2:	b29a      	uxth	r2, r3
 800bdc4:	4b01      	ldr	r3, [pc, #4]	; (800bdcc <tcp_init+0x20>)
 800bdc6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bdc8:	bf00      	nop
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20000010 	.word	0x20000010

0800bdd0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	7d1b      	ldrb	r3, [r3, #20]
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d105      	bne.n	800bdec <tcp_free+0x1c>
 800bde0:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <tcp_free+0x2c>)
 800bde2:	22d4      	movs	r2, #212	; 0xd4
 800bde4:	4906      	ldr	r1, [pc, #24]	; (800be00 <tcp_free+0x30>)
 800bde6:	4807      	ldr	r0, [pc, #28]	; (800be04 <tcp_free+0x34>)
 800bde8:	f008 f912 	bl	8014010 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bdec:	6879      	ldr	r1, [r7, #4]
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f7fe fe9e 	bl	800ab30 <memp_free>
}
 800bdf4:	bf00      	nop
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	08016190 	.word	0x08016190
 800be00:	080161c0 	.word	0x080161c0
 800be04:	080161d4 	.word	0x080161d4

0800be08 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	7d1b      	ldrb	r3, [r3, #20]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d105      	bne.n	800be24 <tcp_free_listen+0x1c>
 800be18:	4b06      	ldr	r3, [pc, #24]	; (800be34 <tcp_free_listen+0x2c>)
 800be1a:	22df      	movs	r2, #223	; 0xdf
 800be1c:	4906      	ldr	r1, [pc, #24]	; (800be38 <tcp_free_listen+0x30>)
 800be1e:	4807      	ldr	r0, [pc, #28]	; (800be3c <tcp_free_listen+0x34>)
 800be20:	f008 f8f6 	bl	8014010 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be24:	6879      	ldr	r1, [r7, #4]
 800be26:	2002      	movs	r0, #2
 800be28:	f7fe fe82 	bl	800ab30 <memp_free>
}
 800be2c:	bf00      	nop
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	08016190 	.word	0x08016190
 800be38:	080161fc 	.word	0x080161fc
 800be3c:	080161d4 	.word	0x080161d4

0800be40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be44:	f000 fea2 	bl	800cb8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be48:	4b07      	ldr	r3, [pc, #28]	; (800be68 <tcp_tmr+0x28>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	4b05      	ldr	r3, [pc, #20]	; (800be68 <tcp_tmr+0x28>)
 800be52:	701a      	strb	r2, [r3, #0]
 800be54:	4b04      	ldr	r3, [pc, #16]	; (800be68 <tcp_tmr+0x28>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be60:	f000 fb54 	bl	800c50c <tcp_slowtmr>
  }
}
 800be64:	bf00      	nop
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20004a01 	.word	0x20004a01

0800be6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d105      	bne.n	800be88 <tcp_remove_listener+0x1c>
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <tcp_remove_listener+0x48>)
 800be7e:	22ff      	movs	r2, #255	; 0xff
 800be80:	490d      	ldr	r1, [pc, #52]	; (800beb8 <tcp_remove_listener+0x4c>)
 800be82:	480e      	ldr	r0, [pc, #56]	; (800bebc <tcp_remove_listener+0x50>)
 800be84:	f008 f8c4 	bl	8014010 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e00a      	b.n	800bea4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	429a      	cmp	r2, r3
 800be96:	d102      	bne.n	800be9e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	68db      	ldr	r3, [r3, #12]
 800bea2:	60fb      	str	r3, [r7, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1f1      	bne.n	800be8e <tcp_remove_listener+0x22>
    }
  }
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	3710      	adds	r7, #16
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	08016190 	.word	0x08016190
 800beb8:	08016218 	.word	0x08016218
 800bebc:	080161d4 	.word	0x080161d4

0800bec0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_listen_closed+0x1c>
 800bece:	4b14      	ldr	r3, [pc, #80]	; (800bf20 <tcp_listen_closed+0x60>)
 800bed0:	f240 1211 	movw	r2, #273	; 0x111
 800bed4:	4913      	ldr	r1, [pc, #76]	; (800bf24 <tcp_listen_closed+0x64>)
 800bed6:	4814      	ldr	r0, [pc, #80]	; (800bf28 <tcp_listen_closed+0x68>)
 800bed8:	f008 f89a 	bl	8014010 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7d1b      	ldrb	r3, [r3, #20]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d006      	beq.n	800bef2 <tcp_listen_closed+0x32>
 800bee4:	4b0e      	ldr	r3, [pc, #56]	; (800bf20 <tcp_listen_closed+0x60>)
 800bee6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800beea:	4910      	ldr	r1, [pc, #64]	; (800bf2c <tcp_listen_closed+0x6c>)
 800beec:	480e      	ldr	r0, [pc, #56]	; (800bf28 <tcp_listen_closed+0x68>)
 800beee:	f008 f88f 	bl	8014010 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bef2:	2301      	movs	r3, #1
 800bef4:	60fb      	str	r3, [r7, #12]
 800bef6:	e00b      	b.n	800bf10 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bef8:	4a0d      	ldr	r2, [pc, #52]	; (800bf30 <tcp_listen_closed+0x70>)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	6879      	ldr	r1, [r7, #4]
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7ff ffb1 	bl	800be6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	60fb      	str	r3, [r7, #12]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2b03      	cmp	r3, #3
 800bf14:	d9f0      	bls.n	800bef8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	08016190 	.word	0x08016190
 800bf24:	08016240 	.word	0x08016240
 800bf28:	080161d4 	.word	0x080161d4
 800bf2c:	0801624c 	.word	0x0801624c
 800bf30:	08018204 	.word	0x08018204

0800bf34 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf34:	b5b0      	push	{r4, r5, r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af04      	add	r7, sp, #16
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <tcp_close_shutdown+0x20>
 800bf46:	4b63      	ldr	r3, [pc, #396]	; (800c0d4 <tcp_close_shutdown+0x1a0>)
 800bf48:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bf4c:	4962      	ldr	r1, [pc, #392]	; (800c0d8 <tcp_close_shutdown+0x1a4>)
 800bf4e:	4863      	ldr	r0, [pc, #396]	; (800c0dc <tcp_close_shutdown+0x1a8>)
 800bf50:	f008 f85e 	bl	8014010 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d066      	beq.n	800c028 <tcp_close_shutdown+0xf4>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7d1b      	ldrb	r3, [r3, #20]
 800bf5e:	2b04      	cmp	r3, #4
 800bf60:	d003      	beq.n	800bf6a <tcp_close_shutdown+0x36>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7d1b      	ldrb	r3, [r3, #20]
 800bf66:	2b07      	cmp	r3, #7
 800bf68:	d15e      	bne.n	800c028 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d104      	bne.n	800bf7c <tcp_close_shutdown+0x48>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf7a:	d055      	beq.n	800c028 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	8b5b      	ldrh	r3, [r3, #26]
 800bf80:	f003 0310 	and.w	r3, r3, #16
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <tcp_close_shutdown+0x62>
 800bf88:	4b52      	ldr	r3, [pc, #328]	; (800c0d4 <tcp_close_shutdown+0x1a0>)
 800bf8a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bf8e:	4954      	ldr	r1, [pc, #336]	; (800c0e0 <tcp_close_shutdown+0x1ac>)
 800bf90:	4852      	ldr	r0, [pc, #328]	; (800c0dc <tcp_close_shutdown+0x1a8>)
 800bf92:	f008 f83d 	bl	8014010 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bf9e:	687d      	ldr	r5, [r7, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	8ad2      	ldrh	r2, [r2, #22]
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	8b09      	ldrh	r1, [r1, #24]
 800bfac:	9102      	str	r1, [sp, #8]
 800bfae:	9201      	str	r2, [sp, #4]
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	462b      	mov	r3, r5
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	4601      	mov	r1, r0
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f004 fe8d 	bl	8010cd8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f001 f8c6 	bl	800d150 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bfc4:	4b47      	ldr	r3, [pc, #284]	; (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d105      	bne.n	800bfda <tcp_close_shutdown+0xa6>
 800bfce:	4b45      	ldr	r3, [pc, #276]	; (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	4a43      	ldr	r2, [pc, #268]	; (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfd6:	6013      	str	r3, [r2, #0]
 800bfd8:	e013      	b.n	800c002 <tcp_close_shutdown+0xce>
 800bfda:	4b42      	ldr	r3, [pc, #264]	; (800c0e4 <tcp_close_shutdown+0x1b0>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	e00c      	b.n	800bffc <tcp_close_shutdown+0xc8>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d104      	bne.n	800bff6 <tcp_close_shutdown+0xc2>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68da      	ldr	r2, [r3, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	60da      	str	r2, [r3, #12]
 800bff4:	e005      	b.n	800c002 <tcp_close_shutdown+0xce>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1ef      	bne.n	800bfe2 <tcp_close_shutdown+0xae>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	60da      	str	r2, [r3, #12]
 800c008:	4b37      	ldr	r3, [pc, #220]	; (800c0e8 <tcp_close_shutdown+0x1b4>)
 800c00a:	2201      	movs	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c00e:	4b37      	ldr	r3, [pc, #220]	; (800c0ec <tcp_close_shutdown+0x1b8>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	429a      	cmp	r2, r3
 800c016:	d102      	bne.n	800c01e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c018:	f003 fd5a 	bl	800fad0 <tcp_trigger_input_pcb_close>
 800c01c:	e002      	b.n	800c024 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fed6 	bl	800bdd0 <tcp_free>
      }
      return ERR_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	e050      	b.n	800c0ca <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7d1b      	ldrb	r3, [r3, #20]
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d03b      	beq.n	800c0a8 <tcp_close_shutdown+0x174>
 800c030:	2b02      	cmp	r3, #2
 800c032:	dc44      	bgt.n	800c0be <tcp_close_shutdown+0x18a>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <tcp_close_shutdown+0x10a>
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d02a      	beq.n	800c092 <tcp_close_shutdown+0x15e>
 800c03c:	e03f      	b.n	800c0be <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	8adb      	ldrh	r3, [r3, #22]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d021      	beq.n	800c08a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c046:	4b2a      	ldr	r3, [pc, #168]	; (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d105      	bne.n	800c05c <tcp_close_shutdown+0x128>
 800c050:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	4a26      	ldr	r2, [pc, #152]	; (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c058:	6013      	str	r3, [r2, #0]
 800c05a:	e013      	b.n	800c084 <tcp_close_shutdown+0x150>
 800c05c:	4b24      	ldr	r3, [pc, #144]	; (800c0f0 <tcp_close_shutdown+0x1bc>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	60bb      	str	r3, [r7, #8]
 800c062:	e00c      	b.n	800c07e <tcp_close_shutdown+0x14a>
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d104      	bne.n	800c078 <tcp_close_shutdown+0x144>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	68da      	ldr	r2, [r3, #12]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	e005      	b.n	800c084 <tcp_close_shutdown+0x150>
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	60bb      	str	r3, [r7, #8]
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d1ef      	bne.n	800c064 <tcp_close_shutdown+0x130>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff fea0 	bl	800bdd0 <tcp_free>
      break;
 800c090:	e01a      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7ff ff14 	bl	800bec0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c098:	6879      	ldr	r1, [r7, #4]
 800c09a:	4816      	ldr	r0, [pc, #88]	; (800c0f4 <tcp_close_shutdown+0x1c0>)
 800c09c:	f001 f8a8 	bl	800d1f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f7ff feb1 	bl	800be08 <tcp_free_listen>
      break;
 800c0a6:	e00f      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	480e      	ldr	r0, [pc, #56]	; (800c0e4 <tcp_close_shutdown+0x1b0>)
 800c0ac:	f001 f8a0 	bl	800d1f0 <tcp_pcb_remove>
 800c0b0:	4b0d      	ldr	r3, [pc, #52]	; (800c0e8 <tcp_close_shutdown+0x1b4>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff fe8a 	bl	800bdd0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c0bc:	e004      	b.n	800c0c8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f81a 	bl	800c0f8 <tcp_close_shutdown_fin>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	e000      	b.n	800c0ca <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	08016190 	.word	0x08016190
 800c0d8:	08016264 	.word	0x08016264
 800c0dc:	080161d4 	.word	0x080161d4
 800c0e0:	08016284 	.word	0x08016284
 800c0e4:	2000b944 	.word	0x2000b944
 800c0e8:	2000b940 	.word	0x2000b940
 800c0ec:	2000b958 	.word	0x2000b958
 800c0f0:	2000b950 	.word	0x2000b950
 800c0f4:	2000b94c 	.word	0x2000b94c

0800c0f8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <tcp_close_shutdown_fin+0x1c>
 800c106:	4b2e      	ldr	r3, [pc, #184]	; (800c1c0 <tcp_close_shutdown_fin+0xc8>)
 800c108:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c10c:	492d      	ldr	r1, [pc, #180]	; (800c1c4 <tcp_close_shutdown_fin+0xcc>)
 800c10e:	482e      	ldr	r0, [pc, #184]	; (800c1c8 <tcp_close_shutdown_fin+0xd0>)
 800c110:	f007 ff7e 	bl	8014010 <iprintf>

  switch (pcb->state) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	7d1b      	ldrb	r3, [r3, #20]
 800c118:	2b07      	cmp	r3, #7
 800c11a:	d020      	beq.n	800c15e <tcp_close_shutdown_fin+0x66>
 800c11c:	2b07      	cmp	r3, #7
 800c11e:	dc2b      	bgt.n	800c178 <tcp_close_shutdown_fin+0x80>
 800c120:	2b03      	cmp	r3, #3
 800c122:	d002      	beq.n	800c12a <tcp_close_shutdown_fin+0x32>
 800c124:	2b04      	cmp	r3, #4
 800c126:	d00d      	beq.n	800c144 <tcp_close_shutdown_fin+0x4c>
 800c128:	e026      	b.n	800c178 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f003 fee2 	bl	800fef4 <tcp_send_fin>
 800c130:	4603      	mov	r3, r0
 800c132:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11f      	bne.n	800c17c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2205      	movs	r2, #5
 800c140:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c142:	e01b      	b.n	800c17c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f003 fed5 	bl	800fef4 <tcp_send_fin>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c14e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d114      	bne.n	800c180 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2205      	movs	r2, #5
 800c15a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c15c:	e010      	b.n	800c180 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f003 fec8 	bl	800fef4 <tcp_send_fin>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d109      	bne.n	800c184 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2209      	movs	r2, #9
 800c174:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c176:	e005      	b.n	800c184 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	e01c      	b.n	800c1b6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c17c:	bf00      	nop
 800c17e:	e002      	b.n	800c186 <tcp_close_shutdown_fin+0x8e>
      break;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <tcp_close_shutdown_fin+0x8e>
      break;
 800c184:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d103      	bne.n	800c196 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f003 ffee 	bl	8010170 <tcp_output>
 800c194:	e00d      	b.n	800c1b2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c19a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19e:	d108      	bne.n	800c1b2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	8b5b      	ldrh	r3, [r3, #26]
 800c1a4:	f043 0308 	orr.w	r3, r3, #8
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	e001      	b.n	800c1b6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	08016190 	.word	0x08016190
 800c1c4:	08016240 	.word	0x08016240
 800c1c8:	080161d4 	.word	0x080161d4

0800c1cc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <tcp_close+0x22>
 800c1da:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <tcp_close+0x4c>)
 800c1dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c1e0:	490e      	ldr	r1, [pc, #56]	; (800c21c <tcp_close+0x50>)
 800c1e2:	480f      	ldr	r0, [pc, #60]	; (800c220 <tcp_close+0x54>)
 800c1e4:	f007 ff14 	bl	8014010 <iprintf>
 800c1e8:	f06f 030f 	mvn.w	r3, #15
 800c1ec:	e00f      	b.n	800c20e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	7d1b      	ldrb	r3, [r3, #20]
 800c1f2:	2b01      	cmp	r3, #1
 800c1f4:	d006      	beq.n	800c204 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	8b5b      	ldrh	r3, [r3, #26]
 800c1fa:	f043 0310 	orr.w	r3, r3, #16
 800c1fe:	b29a      	uxth	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c204:	2101      	movs	r1, #1
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f7ff fe94 	bl	800bf34 <tcp_close_shutdown>
 800c20c:	4603      	mov	r3, r0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	08016190 	.word	0x08016190
 800c21c:	080162a0 	.word	0x080162a0
 800c220:	080161d4 	.word	0x080161d4

0800c224 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08e      	sub	sp, #56	; 0x38
 800c228:	af04      	add	r7, sp, #16
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d107      	bne.n	800c244 <tcp_abandon+0x20>
 800c234:	4b52      	ldr	r3, [pc, #328]	; (800c380 <tcp_abandon+0x15c>)
 800c236:	f240 223d 	movw	r2, #573	; 0x23d
 800c23a:	4952      	ldr	r1, [pc, #328]	; (800c384 <tcp_abandon+0x160>)
 800c23c:	4852      	ldr	r0, [pc, #328]	; (800c388 <tcp_abandon+0x164>)
 800c23e:	f007 fee7 	bl	8014010 <iprintf>
 800c242:	e099      	b.n	800c378 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	7d1b      	ldrb	r3, [r3, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d106      	bne.n	800c25a <tcp_abandon+0x36>
 800c24c:	4b4c      	ldr	r3, [pc, #304]	; (800c380 <tcp_abandon+0x15c>)
 800c24e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c252:	494e      	ldr	r1, [pc, #312]	; (800c38c <tcp_abandon+0x168>)
 800c254:	484c      	ldr	r0, [pc, #304]	; (800c388 <tcp_abandon+0x164>)
 800c256:	f007 fedb 	bl	8014010 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	7d1b      	ldrb	r3, [r3, #20]
 800c25e:	2b0a      	cmp	r3, #10
 800c260:	d107      	bne.n	800c272 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c262:	6879      	ldr	r1, [r7, #4]
 800c264:	484a      	ldr	r0, [pc, #296]	; (800c390 <tcp_abandon+0x16c>)
 800c266:	f000 ffc3 	bl	800d1f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff fdb0 	bl	800bdd0 <tcp_free>
 800c270:	e082      	b.n	800c378 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c27e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c28c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7d1b      	ldrb	r3, [r3, #20]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d126      	bne.n	800c2ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8adb      	ldrh	r3, [r3, #22]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d02e      	beq.n	800c302 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2a4:	4b3b      	ldr	r3, [pc, #236]	; (800c394 <tcp_abandon+0x170>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d105      	bne.n	800c2ba <tcp_abandon+0x96>
 800c2ae:	4b39      	ldr	r3, [pc, #228]	; (800c394 <tcp_abandon+0x170>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	4a37      	ldr	r2, [pc, #220]	; (800c394 <tcp_abandon+0x170>)
 800c2b6:	6013      	str	r3, [r2, #0]
 800c2b8:	e013      	b.n	800c2e2 <tcp_abandon+0xbe>
 800c2ba:	4b36      	ldr	r3, [pc, #216]	; (800c394 <tcp_abandon+0x170>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	61fb      	str	r3, [r7, #28]
 800c2c0:	e00c      	b.n	800c2dc <tcp_abandon+0xb8>
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d104      	bne.n	800c2d6 <tcp_abandon+0xb2>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68da      	ldr	r2, [r3, #12]
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	60da      	str	r2, [r3, #12]
 800c2d4:	e005      	b.n	800c2e2 <tcp_abandon+0xbe>
 800c2d6:	69fb      	ldr	r3, [r7, #28]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	61fb      	str	r3, [r7, #28]
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1ef      	bne.n	800c2c2 <tcp_abandon+0x9e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	e00b      	b.n	800c302 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	8adb      	ldrh	r3, [r3, #22]
 800c2f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c2f4:	6879      	ldr	r1, [r7, #4]
 800c2f6:	4828      	ldr	r0, [pc, #160]	; (800c398 <tcp_abandon+0x174>)
 800c2f8:	f000 ff7a 	bl	800d1f0 <tcp_pcb_remove>
 800c2fc:	4b27      	ldr	r3, [pc, #156]	; (800c39c <tcp_abandon+0x178>)
 800c2fe:	2201      	movs	r2, #1
 800c300:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c306:	2b00      	cmp	r3, #0
 800c308:	d004      	beq.n	800c314 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 fd1c 	bl	800cd4c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d004      	beq.n	800c326 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fd13 	bl	800cd4c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d004      	beq.n	800c338 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c332:	4618      	mov	r0, r3
 800c334:	f000 fd0a 	bl	800cd4c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00e      	beq.n	800c35c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c33e:	6879      	ldr	r1, [r7, #4]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3304      	adds	r3, #4
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	8b12      	ldrh	r2, [r2, #24]
 800c348:	9202      	str	r2, [sp, #8]
 800c34a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c34c:	9201      	str	r2, [sp, #4]
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	460b      	mov	r3, r1
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	69b9      	ldr	r1, [r7, #24]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f004 fcbe 	bl	8010cd8 <tcp_rst>
    }
    last_state = pcb->state;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	7d1b      	ldrb	r3, [r3, #20]
 800c360:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7ff fd34 	bl	800bdd0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d004      	beq.n	800c378 <tcp_abandon+0x154>
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	f06f 010c 	mvn.w	r1, #12
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	4798      	blx	r3
  }
}
 800c378:	3728      	adds	r7, #40	; 0x28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	08016190 	.word	0x08016190
 800c384:	080162d4 	.word	0x080162d4
 800c388:	080161d4 	.word	0x080161d4
 800c38c:	080162f0 	.word	0x080162f0
 800c390:	2000b954 	.word	0x2000b954
 800c394:	2000b950 	.word	0x2000b950
 800c398:	2000b944 	.word	0x2000b944
 800c39c:	2000b940 	.word	0x2000b940

0800c3a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff ff3a 	bl	800c224 <tcp_abandon>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <tcp_update_rcv_ann_wnd+0x1c>
 800c3c6:	4b25      	ldr	r3, [pc, #148]	; (800c45c <tcp_update_rcv_ann_wnd+0xa4>)
 800c3c8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c3cc:	4924      	ldr	r1, [pc, #144]	; (800c460 <tcp_update_rcv_ann_wnd+0xa8>)
 800c3ce:	4825      	ldr	r0, [pc, #148]	; (800c464 <tcp_update_rcv_ann_wnd+0xac>)
 800c3d0:	f007 fe1e 	bl	8014010 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c3dc:	4413      	add	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c3e8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c3ec:	bf28      	it	cs
 800c3ee:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c3f2:	b292      	uxth	r2, r2
 800c3f4:	4413      	add	r3, r2
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	1ad3      	subs	r3, r2, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db08      	blt.n	800c410 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	e020      	b.n	800c452 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	dd03      	ble.n	800c426 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c424:	e014      	b.n	800c450 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c438:	d306      	bcc.n	800c448 <tcp_update_rcv_ann_wnd+0x90>
 800c43a:	4b08      	ldr	r3, [pc, #32]	; (800c45c <tcp_update_rcv_ann_wnd+0xa4>)
 800c43c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c440:	4909      	ldr	r1, [pc, #36]	; (800c468 <tcp_update_rcv_ann_wnd+0xb0>)
 800c442:	4808      	ldr	r0, [pc, #32]	; (800c464 <tcp_update_rcv_ann_wnd+0xac>)
 800c444:	f007 fde4 	bl	8014010 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c450:	2300      	movs	r3, #0
  }
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	08016190 	.word	0x08016190
 800c460:	080163ec 	.word	0x080163ec
 800c464:	080161d4 	.word	0x080161d4
 800c468:	08016410 	.word	0x08016410

0800c46c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d107      	bne.n	800c48e <tcp_recved+0x22>
 800c47e:	4b1f      	ldr	r3, [pc, #124]	; (800c4fc <tcp_recved+0x90>)
 800c480:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c484:	491e      	ldr	r1, [pc, #120]	; (800c500 <tcp_recved+0x94>)
 800c486:	481f      	ldr	r0, [pc, #124]	; (800c504 <tcp_recved+0x98>)
 800c488:	f007 fdc2 	bl	8014010 <iprintf>
 800c48c:	e032      	b.n	800c4f4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	7d1b      	ldrb	r3, [r3, #20]
 800c492:	2b01      	cmp	r3, #1
 800c494:	d106      	bne.n	800c4a4 <tcp_recved+0x38>
 800c496:	4b19      	ldr	r3, [pc, #100]	; (800c4fc <tcp_recved+0x90>)
 800c498:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c49c:	491a      	ldr	r1, [pc, #104]	; (800c508 <tcp_recved+0x9c>)
 800c49e:	4819      	ldr	r0, [pc, #100]	; (800c504 <tcp_recved+0x98>)
 800c4a0:	f007 fdb6 	bl	8014010 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4a8:	887b      	ldrh	r3, [r7, #2]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c4ae:	89fb      	ldrh	r3, [r7, #14]
 800c4b0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4b4:	d804      	bhi.n	800c4c0 <tcp_recved+0x54>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ba:	89fa      	ldrh	r2, [r7, #14]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d204      	bcs.n	800c4ca <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4c6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c4c8:	e002      	b.n	800c4d0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	89fa      	ldrh	r2, [r7, #14]
 800c4ce:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff ff71 	bl	800c3b8 <tcp_update_rcv_ann_wnd>
 800c4d6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c4de:	d309      	bcc.n	800c4f4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	8b5b      	ldrh	r3, [r3, #26]
 800c4e4:	f043 0302 	orr.w	r3, r3, #2
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f003 fe3e 	bl	8010170 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	08016190 	.word	0x08016190
 800c500:	0801642c 	.word	0x0801642c
 800c504:	080161d4 	.word	0x080161d4
 800c508:	08016444 	.word	0x08016444

0800c50c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c50c:	b5b0      	push	{r4, r5, r7, lr}
 800c50e:	b090      	sub	sp, #64	; 0x40
 800c510:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c518:	4b94      	ldr	r3, [pc, #592]	; (800c76c <tcp_slowtmr+0x260>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3301      	adds	r3, #1
 800c51e:	4a93      	ldr	r2, [pc, #588]	; (800c76c <tcp_slowtmr+0x260>)
 800c520:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c522:	4b93      	ldr	r3, [pc, #588]	; (800c770 <tcp_slowtmr+0x264>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	3301      	adds	r3, #1
 800c528:	b2da      	uxtb	r2, r3
 800c52a:	4b91      	ldr	r3, [pc, #580]	; (800c770 <tcp_slowtmr+0x264>)
 800c52c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c532:	4b90      	ldr	r3, [pc, #576]	; (800c774 <tcp_slowtmr+0x268>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c538:	e29d      	b.n	800ca76 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	7d1b      	ldrb	r3, [r3, #20]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d106      	bne.n	800c550 <tcp_slowtmr+0x44>
 800c542:	4b8d      	ldr	r3, [pc, #564]	; (800c778 <tcp_slowtmr+0x26c>)
 800c544:	f240 42be 	movw	r2, #1214	; 0x4be
 800c548:	498c      	ldr	r1, [pc, #560]	; (800c77c <tcp_slowtmr+0x270>)
 800c54a:	488d      	ldr	r0, [pc, #564]	; (800c780 <tcp_slowtmr+0x274>)
 800c54c:	f007 fd60 	bl	8014010 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	7d1b      	ldrb	r3, [r3, #20]
 800c554:	2b01      	cmp	r3, #1
 800c556:	d106      	bne.n	800c566 <tcp_slowtmr+0x5a>
 800c558:	4b87      	ldr	r3, [pc, #540]	; (800c778 <tcp_slowtmr+0x26c>)
 800c55a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c55e:	4989      	ldr	r1, [pc, #548]	; (800c784 <tcp_slowtmr+0x278>)
 800c560:	4887      	ldr	r0, [pc, #540]	; (800c780 <tcp_slowtmr+0x274>)
 800c562:	f007 fd55 	bl	8014010 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c568:	7d1b      	ldrb	r3, [r3, #20]
 800c56a:	2b0a      	cmp	r3, #10
 800c56c:	d106      	bne.n	800c57c <tcp_slowtmr+0x70>
 800c56e:	4b82      	ldr	r3, [pc, #520]	; (800c778 <tcp_slowtmr+0x26c>)
 800c570:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c574:	4984      	ldr	r1, [pc, #528]	; (800c788 <tcp_slowtmr+0x27c>)
 800c576:	4882      	ldr	r0, [pc, #520]	; (800c780 <tcp_slowtmr+0x274>)
 800c578:	f007 fd4a 	bl	8014010 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	7f9a      	ldrb	r2, [r3, #30]
 800c580:	4b7b      	ldr	r3, [pc, #492]	; (800c770 <tcp_slowtmr+0x264>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d105      	bne.n	800c594 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c592:	e270      	b.n	800ca76 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c594:	4b76      	ldr	r3, [pc, #472]	; (800c770 <tcp_slowtmr+0x264>)
 800c596:	781a      	ldrb	r2, [r3, #0]
 800c598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c59c:	2300      	movs	r3, #0
 800c59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	7d1b      	ldrb	r3, [r3, #20]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	d10a      	bne.n	800c5c6 <tcp_slowtmr+0xba>
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5b6:	2b05      	cmp	r3, #5
 800c5b8:	d905      	bls.n	800c5c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5be:	3301      	adds	r3, #1
 800c5c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5c4:	e11e      	b.n	800c804 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5cc:	2b0b      	cmp	r3, #11
 800c5ce:	d905      	bls.n	800c5dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5da:	e113      	b.n	800c804 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d075      	beq.n	800c6d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d006      	beq.n	800c5fc <tcp_slowtmr+0xf0>
 800c5ee:	4b62      	ldr	r3, [pc, #392]	; (800c778 <tcp_slowtmr+0x26c>)
 800c5f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c5f4:	4965      	ldr	r1, [pc, #404]	; (800c78c <tcp_slowtmr+0x280>)
 800c5f6:	4862      	ldr	r0, [pc, #392]	; (800c780 <tcp_slowtmr+0x274>)
 800c5f8:	f007 fd0a 	bl	8014010 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d106      	bne.n	800c612 <tcp_slowtmr+0x106>
 800c604:	4b5c      	ldr	r3, [pc, #368]	; (800c778 <tcp_slowtmr+0x26c>)
 800c606:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c60a:	4961      	ldr	r1, [pc, #388]	; (800c790 <tcp_slowtmr+0x284>)
 800c60c:	485c      	ldr	r0, [pc, #368]	; (800c780 <tcp_slowtmr+0x274>)
 800c60e:	f007 fcff 	bl	8014010 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c614:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c618:	2b0b      	cmp	r3, #11
 800c61a:	d905      	bls.n	800c628 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	3301      	adds	r3, #1
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c626:	e0ed      	b.n	800c804 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c62e:	3b01      	subs	r3, #1
 800c630:	4a58      	ldr	r2, [pc, #352]	; (800c794 <tcp_slowtmr+0x288>)
 800c632:	5cd3      	ldrb	r3, [r2, r3]
 800c634:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c63c:	7c7a      	ldrb	r2, [r7, #17]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d907      	bls.n	800c652 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c644:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c648:	3301      	adds	r3, #1
 800c64a:	b2da      	uxtb	r2, r3
 800c64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c654:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c658:	7c7a      	ldrb	r2, [r7, #17]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	f200 80d2 	bhi.w	800c804 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c660:	2301      	movs	r3, #1
 800c662:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d108      	bne.n	800c680 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c670:	f004 fc26 	bl	8010ec0 <tcp_zero_window_probe>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d014      	beq.n	800c6a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c67a:	2300      	movs	r3, #0
 800c67c:	623b      	str	r3, [r7, #32]
 800c67e:	e011      	b.n	800c6a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c686:	4619      	mov	r1, r3
 800c688:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c68a:	f003 faeb 	bl	800fc64 <tcp_split_unsent_seg>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d107      	bne.n	800c6a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c694:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c696:	f003 fd6b 	bl	8010170 <tcp_output>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80ac 	beq.w	800c804 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6ba:	2b06      	cmp	r3, #6
 800c6bc:	f200 80a2 	bhi.w	800c804 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c6d0:	e098      	b.n	800c804 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	db0f      	blt.n	800c6fc <tcp_slowtmr+0x1f0>
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d008      	beq.n	800c6fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	b21a      	sxth	r2, r3
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c708:	429a      	cmp	r2, r3
 800c70a:	db7b      	blt.n	800c804 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c70c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c70e:	f004 f821 	bl	8010754 <tcp_rexmit_rto_prepare>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d007      	beq.n	800c728 <tcp_slowtmr+0x21c>
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d171      	bne.n	800c804 <tcp_slowtmr+0x2f8>
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c724:	2b00      	cmp	r3, #0
 800c726:	d06d      	beq.n	800c804 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	7d1b      	ldrb	r3, [r3, #20]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d03a      	beq.n	800c7a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c736:	2b0c      	cmp	r3, #12
 800c738:	bf28      	it	cs
 800c73a:	230c      	movcs	r3, #12
 800c73c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c744:	10db      	asrs	r3, r3, #3
 800c746:	b21b      	sxth	r3, r3
 800c748:	461a      	mov	r2, r3
 800c74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c750:	4413      	add	r3, r2
 800c752:	7efa      	ldrb	r2, [r7, #27]
 800c754:	4910      	ldr	r1, [pc, #64]	; (800c798 <tcp_slowtmr+0x28c>)
 800c756:	5c8a      	ldrb	r2, [r1, r2]
 800c758:	4093      	lsls	r3, r2
 800c75a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c762:	4293      	cmp	r3, r2
 800c764:	dc1a      	bgt.n	800c79c <tcp_slowtmr+0x290>
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	b21a      	sxth	r2, r3
 800c76a:	e019      	b.n	800c7a0 <tcp_slowtmr+0x294>
 800c76c:	2000b948 	.word	0x2000b948
 800c770:	20004a02 	.word	0x20004a02
 800c774:	2000b944 	.word	0x2000b944
 800c778:	08016190 	.word	0x08016190
 800c77c:	080164d4 	.word	0x080164d4
 800c780:	080161d4 	.word	0x080161d4
 800c784:	08016500 	.word	0x08016500
 800c788:	0801652c 	.word	0x0801652c
 800c78c:	0801655c 	.word	0x0801655c
 800c790:	08016590 	.word	0x08016590
 800c794:	080181fc 	.word	0x080181fc
 800c798:	080181ec 	.word	0x080181ec
 800c79c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	bf28      	it	cs
 800c7bc:	4613      	movcs	r3, r2
 800c7be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c7c0:	8a7b      	ldrh	r3, [r7, #18]
 800c7c2:	085b      	lsrs	r3, r3, #1
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	b29b      	uxth	r3, r3
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d206      	bcs.n	800c7ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7e2:	005b      	lsls	r3, r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c800:	f004 f818 	bl	8010834 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	7d1b      	ldrb	r3, [r3, #20]
 800c808:	2b06      	cmp	r3, #6
 800c80a:	d111      	bne.n	800c830 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	8b5b      	ldrh	r3, [r3, #26]
 800c810:	f003 0310 	and.w	r3, r3, #16
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00b      	beq.n	800c830 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c818:	4b9c      	ldr	r3, [pc, #624]	; (800ca8c <tcp_slowtmr+0x580>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6a1b      	ldr	r3, [r3, #32]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	2b28      	cmp	r3, #40	; 0x28
 800c824:	d904      	bls.n	800c830 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c82a:	3301      	adds	r3, #1
 800c82c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c832:	7a5b      	ldrb	r3, [r3, #9]
 800c834:	f003 0308 	and.w	r3, r3, #8
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d04a      	beq.n	800c8d2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c840:	2b04      	cmp	r3, #4
 800c842:	d003      	beq.n	800c84c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c848:	2b07      	cmp	r3, #7
 800c84a:	d142      	bne.n	800c8d2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c84c:	4b8f      	ldr	r3, [pc, #572]	; (800ca8c <tcp_slowtmr+0x580>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c85c:	4b8c      	ldr	r3, [pc, #560]	; (800ca90 <tcp_slowtmr+0x584>)
 800c85e:	440b      	add	r3, r1
 800c860:	498c      	ldr	r1, [pc, #560]	; (800ca94 <tcp_slowtmr+0x588>)
 800c862:	fba1 1303 	umull	r1, r3, r1, r3
 800c866:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c868:	429a      	cmp	r2, r3
 800c86a:	d90a      	bls.n	800c882 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c86c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c870:	3301      	adds	r3, #1
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c87a:	3301      	adds	r3, #1
 800c87c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c880:	e027      	b.n	800c8d2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c882:	4b82      	ldr	r3, [pc, #520]	; (800ca8c <tcp_slowtmr+0x580>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c898:	4618      	mov	r0, r3
 800c89a:	4b7f      	ldr	r3, [pc, #508]	; (800ca98 <tcp_slowtmr+0x58c>)
 800c89c:	fb03 f300 	mul.w	r3, r3, r0
 800c8a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c8a2:	497c      	ldr	r1, [pc, #496]	; (800ca94 <tcp_slowtmr+0x588>)
 800c8a4:	fba1 1303 	umull	r1, r3, r1, r3
 800c8a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d911      	bls.n	800c8d2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8b0:	f004 fac6 	bl	8010e40 <tcp_keepalive>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c8ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d107      	bne.n	800c8d2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d011      	beq.n	800c8fe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c8da:	4b6c      	ldr	r3, [pc, #432]	; (800ca8c <tcp_slowtmr+0x580>)
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e0:	6a1b      	ldr	r3, [r3, #32]
 800c8e2:	1ad2      	subs	r2, r2, r3
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	440b      	add	r3, r1
 800c8f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d302      	bcc.n	800c8fe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c8f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8fa:	f000 fddd 	bl	800d4b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c900:	7d1b      	ldrb	r3, [r3, #20]
 800c902:	2b03      	cmp	r3, #3
 800c904:	d10b      	bne.n	800c91e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c906:	4b61      	ldr	r3, [pc, #388]	; (800ca8c <tcp_slowtmr+0x580>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	1ad3      	subs	r3, r2, r3
 800c910:	2b28      	cmp	r3, #40	; 0x28
 800c912:	d904      	bls.n	800c91e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c918:	3301      	adds	r3, #1
 800c91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	7d1b      	ldrb	r3, [r3, #20]
 800c922:	2b09      	cmp	r3, #9
 800c924:	d10b      	bne.n	800c93e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c926:	4b59      	ldr	r3, [pc, #356]	; (800ca8c <tcp_slowtmr+0x580>)
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	2bf0      	cmp	r3, #240	; 0xf0
 800c932:	d904      	bls.n	800c93e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c938:	3301      	adds	r3, #1
 800c93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c93e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c942:	2b00      	cmp	r3, #0
 800c944:	d060      	beq.n	800ca08 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c94e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c950:	f000 fbfe 	bl	800d150 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c956:	2b00      	cmp	r3, #0
 800c958:	d010      	beq.n	800c97c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c95a:	4b50      	ldr	r3, [pc, #320]	; (800ca9c <tcp_slowtmr+0x590>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c960:	429a      	cmp	r2, r3
 800c962:	d106      	bne.n	800c972 <tcp_slowtmr+0x466>
 800c964:	4b4e      	ldr	r3, [pc, #312]	; (800caa0 <tcp_slowtmr+0x594>)
 800c966:	f240 526d 	movw	r2, #1389	; 0x56d
 800c96a:	494e      	ldr	r1, [pc, #312]	; (800caa4 <tcp_slowtmr+0x598>)
 800c96c:	484e      	ldr	r0, [pc, #312]	; (800caa8 <tcp_slowtmr+0x59c>)
 800c96e:	f007 fb4f 	bl	8014010 <iprintf>
        prev->next = pcb->next;
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	68da      	ldr	r2, [r3, #12]
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	60da      	str	r2, [r3, #12]
 800c97a:	e00f      	b.n	800c99c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c97c:	4b47      	ldr	r3, [pc, #284]	; (800ca9c <tcp_slowtmr+0x590>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c982:	429a      	cmp	r2, r3
 800c984:	d006      	beq.n	800c994 <tcp_slowtmr+0x488>
 800c986:	4b46      	ldr	r3, [pc, #280]	; (800caa0 <tcp_slowtmr+0x594>)
 800c988:	f240 5271 	movw	r2, #1393	; 0x571
 800c98c:	4947      	ldr	r1, [pc, #284]	; (800caac <tcp_slowtmr+0x5a0>)
 800c98e:	4846      	ldr	r0, [pc, #280]	; (800caa8 <tcp_slowtmr+0x59c>)
 800c990:	f007 fb3e 	bl	8014010 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	4a40      	ldr	r2, [pc, #256]	; (800ca9c <tcp_slowtmr+0x590>)
 800c99a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c99c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d013      	beq.n	800c9cc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c9ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b4:	8ad2      	ldrh	r2, [r2, #22]
 800c9b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9b8:	8b09      	ldrh	r1, [r1, #24]
 800c9ba:	9102      	str	r1, [sp, #8]
 800c9bc:	9201      	str	r2, [sp, #4]
 800c9be:	9300      	str	r3, [sp, #0]
 800c9c0:	462b      	mov	r3, r5
 800c9c2:	4622      	mov	r2, r4
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9c8:	f004 f986 	bl	8010cd8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	691b      	ldr	r3, [r3, #16]
 800c9d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	7d1b      	ldrb	r3, [r3, #20]
 800c9d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c9e2:	6838      	ldr	r0, [r7, #0]
 800c9e4:	f7ff f9f4 	bl	800bdd0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c9e8:	4b31      	ldr	r3, [pc, #196]	; (800cab0 <tcp_slowtmr+0x5a4>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d004      	beq.n	800c9fe <tcp_slowtmr+0x4f2>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f06f 010c 	mvn.w	r1, #12
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c9fe:	4b2c      	ldr	r3, [pc, #176]	; (800cab0 <tcp_slowtmr+0x5a4>)
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d037      	beq.n	800ca76 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ca06:	e592      	b.n	800c52e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	7f1b      	ldrb	r3, [r3, #28]
 800ca16:	3301      	adds	r3, #1
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	7f1a      	ldrb	r2, [r3, #28]
 800ca22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca24:	7f5b      	ldrb	r3, [r3, #29]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d325      	bcc.n	800ca76 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ca2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ca30:	4b1f      	ldr	r3, [pc, #124]	; (800cab0 <tcp_slowtmr+0x5a4>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <tcp_slowtmr+0x54c>
 800ca40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca48:	6912      	ldr	r2, [r2, #16]
 800ca4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	4798      	blx	r3
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ca56:	e002      	b.n	800ca5e <tcp_slowtmr+0x552>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ca5e:	4b14      	ldr	r3, [pc, #80]	; (800cab0 <tcp_slowtmr+0x5a4>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d000      	beq.n	800ca68 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ca66:	e562      	b.n	800c52e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ca68:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d102      	bne.n	800ca76 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ca70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca72:	f003 fb7d 	bl	8010170 <tcp_output>
  while (pcb != NULL) {
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f47f ad5e 	bne.w	800c53a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ca82:	4b0c      	ldr	r3, [pc, #48]	; (800cab4 <tcp_slowtmr+0x5a8>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ca88:	e069      	b.n	800cb5e <tcp_slowtmr+0x652>
 800ca8a:	bf00      	nop
 800ca8c:	2000b948 	.word	0x2000b948
 800ca90:	000a4cb8 	.word	0x000a4cb8
 800ca94:	10624dd3 	.word	0x10624dd3
 800ca98:	000124f8 	.word	0x000124f8
 800ca9c:	2000b944 	.word	0x2000b944
 800caa0:	08016190 	.word	0x08016190
 800caa4:	080165c8 	.word	0x080165c8
 800caa8:	080161d4 	.word	0x080161d4
 800caac:	080165f4 	.word	0x080165f4
 800cab0:	2000b940 	.word	0x2000b940
 800cab4:	2000b954 	.word	0x2000b954
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caba:	7d1b      	ldrb	r3, [r3, #20]
 800cabc:	2b0a      	cmp	r3, #10
 800cabe:	d006      	beq.n	800cace <tcp_slowtmr+0x5c2>
 800cac0:	4b2b      	ldr	r3, [pc, #172]	; (800cb70 <tcp_slowtmr+0x664>)
 800cac2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cac6:	492b      	ldr	r1, [pc, #172]	; (800cb74 <tcp_slowtmr+0x668>)
 800cac8:	482b      	ldr	r0, [pc, #172]	; (800cb78 <tcp_slowtmr+0x66c>)
 800caca:	f007 faa1 	bl	8014010 <iprintf>
    pcb_remove = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cad4:	4b29      	ldr	r3, [pc, #164]	; (800cb7c <tcp_slowtmr+0x670>)
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	1ad3      	subs	r3, r2, r3
 800cade:	2bf0      	cmp	r3, #240	; 0xf0
 800cae0:	d904      	bls.n	800caec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae6:	3301      	adds	r3, #1
 800cae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800caec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d02f      	beq.n	800cb54 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800caf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caf6:	f000 fb2b 	bl	800d150 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d010      	beq.n	800cb22 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cb00:	4b1f      	ldr	r3, [pc, #124]	; (800cb80 <tcp_slowtmr+0x674>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d106      	bne.n	800cb18 <tcp_slowtmr+0x60c>
 800cb0a:	4b19      	ldr	r3, [pc, #100]	; (800cb70 <tcp_slowtmr+0x664>)
 800cb0c:	f240 52af 	movw	r2, #1455	; 0x5af
 800cb10:	491c      	ldr	r1, [pc, #112]	; (800cb84 <tcp_slowtmr+0x678>)
 800cb12:	4819      	ldr	r0, [pc, #100]	; (800cb78 <tcp_slowtmr+0x66c>)
 800cb14:	f007 fa7c 	bl	8014010 <iprintf>
        prev->next = pcb->next;
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	68da      	ldr	r2, [r3, #12]
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	60da      	str	r2, [r3, #12]
 800cb20:	e00f      	b.n	800cb42 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cb22:	4b17      	ldr	r3, [pc, #92]	; (800cb80 <tcp_slowtmr+0x674>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d006      	beq.n	800cb3a <tcp_slowtmr+0x62e>
 800cb2c:	4b10      	ldr	r3, [pc, #64]	; (800cb70 <tcp_slowtmr+0x664>)
 800cb2e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cb32:	4915      	ldr	r1, [pc, #84]	; (800cb88 <tcp_slowtmr+0x67c>)
 800cb34:	4810      	ldr	r0, [pc, #64]	; (800cb78 <tcp_slowtmr+0x66c>)
 800cb36:	f007 fa6b 	bl	8014010 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	4a10      	ldr	r2, [pc, #64]	; (800cb80 <tcp_slowtmr+0x674>)
 800cb40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb4c:	69f8      	ldr	r0, [r7, #28]
 800cb4e:	f7ff f93f 	bl	800bdd0 <tcp_free>
 800cb52:	e004      	b.n	800cb5e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1a9      	bne.n	800cab8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	3730      	adds	r7, #48	; 0x30
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	08016190 	.word	0x08016190
 800cb74:	08016620 	.word	0x08016620
 800cb78:	080161d4 	.word	0x080161d4
 800cb7c:	2000b948 	.word	0x2000b948
 800cb80:	2000b954 	.word	0x2000b954
 800cb84:	08016650 	.word	0x08016650
 800cb88:	08016678 	.word	0x08016678

0800cb8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cb92:	4b2d      	ldr	r3, [pc, #180]	; (800cc48 <tcp_fasttmr+0xbc>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	3301      	adds	r3, #1
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b2b      	ldr	r3, [pc, #172]	; (800cc48 <tcp_fasttmr+0xbc>)
 800cb9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cb9e:	4b2b      	ldr	r3, [pc, #172]	; (800cc4c <tcp_fasttmr+0xc0>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cba4:	e048      	b.n	800cc38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7f9a      	ldrb	r2, [r3, #30]
 800cbaa:	4b27      	ldr	r3, [pc, #156]	; (800cc48 <tcp_fasttmr+0xbc>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d03f      	beq.n	800cc32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cbb2:	4b25      	ldr	r3, [pc, #148]	; (800cc48 <tcp_fasttmr+0xbc>)
 800cbb4:	781a      	ldrb	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	8b5b      	ldrh	r3, [r3, #26]
 800cbbe:	f003 0301 	and.w	r3, r3, #1
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d010      	beq.n	800cbe8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	8b5b      	ldrh	r3, [r3, #26]
 800cbca:	f043 0302 	orr.w	r3, r3, #2
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f003 facb 	bl	8010170 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	8b5b      	ldrh	r3, [r3, #26]
 800cbde:	f023 0303 	bic.w	r3, r3, #3
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	8b5b      	ldrh	r3, [r3, #26]
 800cbec:	f003 0308 	and.w	r3, r3, #8
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d009      	beq.n	800cc08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	8b5b      	ldrh	r3, [r3, #26]
 800cbf8:	f023 0308 	bic.w	r3, r3, #8
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fa78 	bl	800c0f8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00a      	beq.n	800cc2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cc16:	4b0e      	ldr	r3, [pc, #56]	; (800cc50 <tcp_fasttmr+0xc4>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f819 	bl	800cc54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cc22:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <tcp_fasttmr+0xc4>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d000      	beq.n	800cc2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cc2a:	e7b8      	b.n	800cb9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	607b      	str	r3, [r7, #4]
 800cc30:	e002      	b.n	800cc38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	68db      	ldr	r3, [r3, #12]
 800cc36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1b3      	bne.n	800cba6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cc3e:	bf00      	nop
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20004a02 	.word	0x20004a02
 800cc4c:	2000b944 	.word	0x2000b944
 800cc50:	2000b940 	.word	0x2000b940

0800cc54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d109      	bne.n	800cc76 <tcp_process_refused_data+0x22>
 800cc62:	4b37      	ldr	r3, [pc, #220]	; (800cd40 <tcp_process_refused_data+0xec>)
 800cc64:	f240 6209 	movw	r2, #1545	; 0x609
 800cc68:	4936      	ldr	r1, [pc, #216]	; (800cd44 <tcp_process_refused_data+0xf0>)
 800cc6a:	4837      	ldr	r0, [pc, #220]	; (800cd48 <tcp_process_refused_data+0xf4>)
 800cc6c:	f007 f9d0 	bl	8014010 <iprintf>
 800cc70:	f06f 030f 	mvn.w	r3, #15
 800cc74:	e060      	b.n	800cd38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc7a:	7b5b      	ldrb	r3, [r3, #13]
 800cc7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2200      	movs	r2, #0
 800cc88:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <tcp_process_refused_data+0x58>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6918      	ldr	r0, [r3, #16]
 800cc9e:	2300      	movs	r3, #0
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	47a0      	blx	r4
 800cca6:	4603      	mov	r3, r0
 800cca8:	73fb      	strb	r3, [r7, #15]
 800ccaa:	e007      	b.n	800ccbc <tcp_process_refused_data+0x68>
 800ccac:	2300      	movs	r3, #0
 800ccae:	68ba      	ldr	r2, [r7, #8]
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	f000 f8a4 	bl	800ce00 <tcp_recv_null>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ccbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d12a      	bne.n	800cd1a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ccc4:	7bbb      	ldrb	r3, [r7, #14]
 800ccc6:	f003 0320 	and.w	r3, r3, #32
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d033      	beq.n	800cd36 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccd6:	d005      	beq.n	800cce4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccdc:	3301      	adds	r3, #1
 800ccde:	b29a      	uxth	r2, r3
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d00b      	beq.n	800cd06 <tcp_process_refused_data+0xb2>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6918      	ldr	r0, [r3, #16]
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	47a0      	blx	r4
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
 800cd04:	e001      	b.n	800cd0a <tcp_process_refused_data+0xb6>
 800cd06:	2300      	movs	r3, #0
 800cd08:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0e:	f113 0f0d 	cmn.w	r3, #13
 800cd12:	d110      	bne.n	800cd36 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cd14:	f06f 030c 	mvn.w	r3, #12
 800cd18:	e00e      	b.n	800cd38 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd1e:	f113 0f0d 	cmn.w	r3, #13
 800cd22:	d102      	bne.n	800cd2a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cd24:	f06f 030c 	mvn.w	r3, #12
 800cd28:	e006      	b.n	800cd38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cd30:	f06f 0304 	mvn.w	r3, #4
 800cd34:	e000      	b.n	800cd38 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3714      	adds	r7, #20
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd90      	pop	{r4, r7, pc}
 800cd40:	08016190 	.word	0x08016190
 800cd44:	080166a0 	.word	0x080166a0
 800cd48:	080161d4 	.word	0x080161d4

0800cd4c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cd54:	e007      	b.n	800cd66 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f000 f80a 	bl	800cd76 <tcp_seg_free>
    seg = next;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1f4      	bne.n	800cd56 <tcp_segs_free+0xa>
  }
}
 800cd6c:	bf00      	nop
 800cd6e:	bf00      	nop
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b082      	sub	sp, #8
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00c      	beq.n	800cd9e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d004      	beq.n	800cd96 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7fe fd71 	bl	800b878 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cd96:	6879      	ldr	r1, [r7, #4]
 800cd98:	2003      	movs	r0, #3
 800cd9a:	f7fd fec9 	bl	800ab30 <memp_free>
  }
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
	...

0800cda8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <tcp_seg_copy+0x1c>
 800cdb6:	4b0f      	ldr	r3, [pc, #60]	; (800cdf4 <tcp_seg_copy+0x4c>)
 800cdb8:	f240 6282 	movw	r2, #1666	; 0x682
 800cdbc:	490e      	ldr	r1, [pc, #56]	; (800cdf8 <tcp_seg_copy+0x50>)
 800cdbe:	480f      	ldr	r0, [pc, #60]	; (800cdfc <tcp_seg_copy+0x54>)
 800cdc0:	f007 f926 	bl	8014010 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cdc4:	2003      	movs	r0, #3
 800cdc6:	f7fd fe61 	bl	800aa8c <memp_malloc>
 800cdca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <tcp_seg_copy+0x2e>
    return NULL;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e00a      	b.n	800cdec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cdd6:	2210      	movs	r2, #16
 800cdd8:	6879      	ldr	r1, [r7, #4]
 800cdda:	68f8      	ldr	r0, [r7, #12]
 800cddc:	f007 f8e8 	bl	8013fb0 <memcpy>
  pbuf_ref(cseg->p);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe fded 	bl	800b9c4 <pbuf_ref>
  return cseg;
 800cdea:	68fb      	ldr	r3, [r7, #12]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	08016190 	.word	0x08016190
 800cdf8:	080166e4 	.word	0x080166e4
 800cdfc:	080161d4 	.word	0x080161d4

0800ce00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	60f8      	str	r0, [r7, #12]
 800ce08:	60b9      	str	r1, [r7, #8]
 800ce0a:	607a      	str	r2, [r7, #4]
 800ce0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d109      	bne.n	800ce28 <tcp_recv_null+0x28>
 800ce14:	4b12      	ldr	r3, [pc, #72]	; (800ce60 <tcp_recv_null+0x60>)
 800ce16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce1a:	4912      	ldr	r1, [pc, #72]	; (800ce64 <tcp_recv_null+0x64>)
 800ce1c:	4812      	ldr	r0, [pc, #72]	; (800ce68 <tcp_recv_null+0x68>)
 800ce1e:	f007 f8f7 	bl	8014010 <iprintf>
 800ce22:	f06f 030f 	mvn.w	r3, #15
 800ce26:	e016      	b.n	800ce56 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	891b      	ldrh	r3, [r3, #8]
 800ce32:	4619      	mov	r1, r3
 800ce34:	68b8      	ldr	r0, [r7, #8]
 800ce36:	f7ff fb19 	bl	800c46c <tcp_recved>
    pbuf_free(p);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7fe fd1c 	bl	800b878 <pbuf_free>
 800ce40:	e008      	b.n	800ce54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ce42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d104      	bne.n	800ce54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ce4a:	68b8      	ldr	r0, [r7, #8]
 800ce4c:	f7ff f9be 	bl	800c1cc <tcp_close>
 800ce50:	4603      	mov	r3, r0
 800ce52:	e000      	b.n	800ce56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	08016190 	.word	0x08016190
 800ce64:	08016700 	.word	0x08016700
 800ce68:	080161d4 	.word	0x080161d4

0800ce6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ce76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	db01      	blt.n	800ce82 <tcp_kill_prio+0x16>
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	e000      	b.n	800ce84 <tcp_kill_prio+0x18>
 800ce82:	237f      	movs	r3, #127	; 0x7f
 800ce84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ce86:	7afb      	ldrb	r3, [r7, #11]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d034      	beq.n	800cef6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ce8c:	7afb      	ldrb	r3, [r7, #11]
 800ce8e:	3b01      	subs	r3, #1
 800ce90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ce96:	2300      	movs	r3, #0
 800ce98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce9a:	4b19      	ldr	r3, [pc, #100]	; (800cf00 <tcp_kill_prio+0x94>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	617b      	str	r3, [r7, #20]
 800cea0:	e01f      	b.n	800cee2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	7d5b      	ldrb	r3, [r3, #21]
 800cea6:	7afa      	ldrb	r2, [r7, #11]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d80c      	bhi.n	800cec6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ceb0:	7afa      	ldrb	r2, [r7, #11]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d112      	bne.n	800cedc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ceb6:	4b13      	ldr	r3, [pc, #76]	; (800cf04 <tcp_kill_prio+0x98>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	68fa      	ldr	r2, [r7, #12]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d80a      	bhi.n	800cedc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cec6:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <tcp_kill_prio+0x98>)
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ced2:	697b      	ldr	r3, [r7, #20]
 800ced4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	7d5b      	ldrb	r3, [r3, #21]
 800ceda:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	68db      	ldr	r3, [r3, #12]
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1dc      	bne.n	800cea2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ceee:	6938      	ldr	r0, [r7, #16]
 800cef0:	f7ff fa56 	bl	800c3a0 <tcp_abort>
 800cef4:	e000      	b.n	800cef8 <tcp_kill_prio+0x8c>
    return;
 800cef6:	bf00      	nop
  }
}
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	2000b944 	.word	0x2000b944
 800cf04:	2000b948 	.word	0x2000b948

0800cf08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b086      	sub	sp, #24
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	2b08      	cmp	r3, #8
 800cf16:	d009      	beq.n	800cf2c <tcp_kill_state+0x24>
 800cf18:	79fb      	ldrb	r3, [r7, #7]
 800cf1a:	2b09      	cmp	r3, #9
 800cf1c:	d006      	beq.n	800cf2c <tcp_kill_state+0x24>
 800cf1e:	4b1a      	ldr	r3, [pc, #104]	; (800cf88 <tcp_kill_state+0x80>)
 800cf20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cf24:	4919      	ldr	r1, [pc, #100]	; (800cf8c <tcp_kill_state+0x84>)
 800cf26:	481a      	ldr	r0, [pc, #104]	; (800cf90 <tcp_kill_state+0x88>)
 800cf28:	f007 f872 	bl	8014010 <iprintf>

  inactivity = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf34:	4b17      	ldr	r3, [pc, #92]	; (800cf94 <tcp_kill_state+0x8c>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	e017      	b.n	800cf6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	7d1b      	ldrb	r3, [r3, #20]
 800cf40:	79fa      	ldrb	r2, [r7, #7]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d10f      	bne.n	800cf66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf46:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <tcp_kill_state+0x90>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	68fa      	ldr	r2, [r7, #12]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d807      	bhi.n	800cf66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cf56:	4b10      	ldr	r3, [pc, #64]	; (800cf98 <tcp_kill_state+0x90>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	68db      	ldr	r3, [r3, #12]
 800cf6a:	617b      	str	r3, [r7, #20]
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d1e4      	bne.n	800cf3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d003      	beq.n	800cf80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cf78:	2100      	movs	r1, #0
 800cf7a:	6938      	ldr	r0, [r7, #16]
 800cf7c:	f7ff f952 	bl	800c224 <tcp_abandon>
  }
}
 800cf80:	bf00      	nop
 800cf82:	3718      	adds	r7, #24
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	08016190 	.word	0x08016190
 800cf8c:	0801671c 	.word	0x0801671c
 800cf90:	080161d4 	.word	0x080161d4
 800cf94:	2000b944 	.word	0x2000b944
 800cf98:	2000b948 	.word	0x2000b948

0800cf9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfaa:	4b12      	ldr	r3, [pc, #72]	; (800cff4 <tcp_kill_timewait+0x58>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e012      	b.n	800cfd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cfb2:	4b11      	ldr	r3, [pc, #68]	; (800cff8 <tcp_kill_timewait+0x5c>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d807      	bhi.n	800cfd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cfc2:	4b0d      	ldr	r3, [pc, #52]	; (800cff8 <tcp_kill_timewait+0x5c>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1e9      	bne.n	800cfb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cfe4:	68b8      	ldr	r0, [r7, #8]
 800cfe6:	f7ff f9db 	bl	800c3a0 <tcp_abort>
  }
}
 800cfea:	bf00      	nop
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	2000b954 	.word	0x2000b954
 800cff8:	2000b948 	.word	0x2000b948

0800cffc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d002:	4b10      	ldr	r3, [pc, #64]	; (800d044 <tcp_handle_closepend+0x48>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d008:	e014      	b.n	800d034 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	8b5b      	ldrh	r3, [r3, #26]
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d009      	beq.n	800d030 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8b5b      	ldrh	r3, [r3, #26]
 800d020:	f023 0308 	bic.w	r3, r3, #8
 800d024:	b29a      	uxth	r2, r3
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff f864 	bl	800c0f8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1e7      	bne.n	800d00a <tcp_handle_closepend+0xe>
  }
}
 800d03a:	bf00      	nop
 800d03c:	bf00      	nop
 800d03e:	3708      	adds	r7, #8
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	2000b944 	.word	0x2000b944

0800d048 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4603      	mov	r3, r0
 800d050:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d052:	2001      	movs	r0, #1
 800d054:	f7fd fd1a 	bl	800aa8c <memp_malloc>
 800d058:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d126      	bne.n	800d0ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d060:	f7ff ffcc 	bl	800cffc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d064:	f7ff ff9a 	bl	800cf9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d068:	2001      	movs	r0, #1
 800d06a:	f7fd fd0f 	bl	800aa8c <memp_malloc>
 800d06e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d11b      	bne.n	800d0ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d076:	2009      	movs	r0, #9
 800d078:	f7ff ff46 	bl	800cf08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d07c:	2001      	movs	r0, #1
 800d07e:	f7fd fd05 	bl	800aa8c <memp_malloc>
 800d082:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d111      	bne.n	800d0ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d08a:	2008      	movs	r0, #8
 800d08c:	f7ff ff3c 	bl	800cf08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d090:	2001      	movs	r0, #1
 800d092:	f7fd fcfb 	bl	800aa8c <memp_malloc>
 800d096:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d107      	bne.n	800d0ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff fee3 	bl	800ce6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0a6:	2001      	movs	r0, #1
 800d0a8:	f7fd fcf0 	bl	800aa8c <memp_malloc>
 800d0ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d03f      	beq.n	800d134 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d0b4:	229c      	movs	r2, #156	; 0x9c
 800d0b6:	2100      	movs	r1, #0
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f006 ffa1 	bl	8014000 <memset>
    pcb->prio = prio;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	79fa      	ldrb	r2, [r7, #7]
 800d0c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d0ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d0d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	22ff      	movs	r2, #255	; 0xff
 800d0e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d0ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2206      	movs	r2, #6
 800d0f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2206      	movs	r2, #6
 800d0f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d100:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2201      	movs	r2, #1
 800d106:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d10a:	4b0d      	ldr	r3, [pc, #52]	; (800d140 <tcp_alloc+0xf8>)
 800d10c:	681a      	ldr	r2, [r3, #0]
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <tcp_alloc+0xfc>)
 800d114:	781a      	ldrb	r2, [r3, #0]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d120:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	4a08      	ldr	r2, [pc, #32]	; (800d148 <tcp_alloc+0x100>)
 800d128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	4a07      	ldr	r2, [pc, #28]	; (800d14c <tcp_alloc+0x104>)
 800d130:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d134:	68fb      	ldr	r3, [r7, #12]
}
 800d136:	4618      	mov	r0, r3
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	2000b948 	.word	0x2000b948
 800d144:	20004a02 	.word	0x20004a02
 800d148:	0800ce01 	.word	0x0800ce01
 800d14c:	006ddd00 	.word	0x006ddd00

0800d150 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d107      	bne.n	800d16e <tcp_pcb_purge+0x1e>
 800d15e:	4b21      	ldr	r3, [pc, #132]	; (800d1e4 <tcp_pcb_purge+0x94>)
 800d160:	f640 0251 	movw	r2, #2129	; 0x851
 800d164:	4920      	ldr	r1, [pc, #128]	; (800d1e8 <tcp_pcb_purge+0x98>)
 800d166:	4821      	ldr	r0, [pc, #132]	; (800d1ec <tcp_pcb_purge+0x9c>)
 800d168:	f006 ff52 	bl	8014010 <iprintf>
 800d16c:	e037      	b.n	800d1de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7d1b      	ldrb	r3, [r3, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d033      	beq.n	800d1de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d17a:	2b0a      	cmp	r3, #10
 800d17c:	d02f      	beq.n	800d1de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d182:	2b01      	cmp	r3, #1
 800d184:	d02b      	beq.n	800d1de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d007      	beq.n	800d19e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fb70 	bl	800b878 <pbuf_free>
      pcb->refused_data = NULL;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d002      	beq.n	800d1ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f986 	bl	800d4b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1b2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7ff fdc7 	bl	800cd4c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7ff fdc2 	bl	800cd4c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d1de:	3708      	adds	r7, #8
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	08016190 	.word	0x08016190
 800d1e8:	080167dc 	.word	0x080167dc
 800d1ec:	080161d4 	.word	0x080161d4

0800d1f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d106      	bne.n	800d20e <tcp_pcb_remove+0x1e>
 800d200:	4b3e      	ldr	r3, [pc, #248]	; (800d2fc <tcp_pcb_remove+0x10c>)
 800d202:	f640 0283 	movw	r2, #2179	; 0x883
 800d206:	493e      	ldr	r1, [pc, #248]	; (800d300 <tcp_pcb_remove+0x110>)
 800d208:	483e      	ldr	r0, [pc, #248]	; (800d304 <tcp_pcb_remove+0x114>)
 800d20a:	f006 ff01 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <tcp_pcb_remove+0x32>
 800d214:	4b39      	ldr	r3, [pc, #228]	; (800d2fc <tcp_pcb_remove+0x10c>)
 800d216:	f640 0284 	movw	r2, #2180	; 0x884
 800d21a:	493b      	ldr	r1, [pc, #236]	; (800d308 <tcp_pcb_remove+0x118>)
 800d21c:	4839      	ldr	r0, [pc, #228]	; (800d304 <tcp_pcb_remove+0x114>)
 800d21e:	f006 fef7 	bl	8014010 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d105      	bne.n	800d238 <tcp_pcb_remove+0x48>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68da      	ldr	r2, [r3, #12]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	e013      	b.n	800d260 <tcp_pcb_remove+0x70>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60fb      	str	r3, [r7, #12]
 800d23e:	e00c      	b.n	800d25a <tcp_pcb_remove+0x6a>
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	429a      	cmp	r2, r3
 800d248:	d104      	bne.n	800d254 <tcp_pcb_remove+0x64>
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	68da      	ldr	r2, [r3, #12]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	60da      	str	r2, [r3, #12]
 800d252:	e005      	b.n	800d260 <tcp_pcb_remove+0x70>
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	60fb      	str	r3, [r7, #12]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d1ef      	bne.n	800d240 <tcp_pcb_remove+0x50>
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	2200      	movs	r2, #0
 800d264:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f7ff ff72 	bl	800d150 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	7d1b      	ldrb	r3, [r3, #20]
 800d270:	2b0a      	cmp	r3, #10
 800d272:	d013      	beq.n	800d29c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d00f      	beq.n	800d29c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	8b5b      	ldrh	r3, [r3, #26]
 800d280:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d284:	2b00      	cmp	r3, #0
 800d286:	d009      	beq.n	800d29c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	b29a      	uxth	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d296:	6838      	ldr	r0, [r7, #0]
 800d298:	f002 ff6a 	bl	8010170 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	7d1b      	ldrb	r3, [r3, #20]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d020      	beq.n	800d2e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d006      	beq.n	800d2ba <tcp_pcb_remove+0xca>
 800d2ac:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <tcp_pcb_remove+0x10c>)
 800d2ae:	f640 0293 	movw	r2, #2195	; 0x893
 800d2b2:	4916      	ldr	r1, [pc, #88]	; (800d30c <tcp_pcb_remove+0x11c>)
 800d2b4:	4813      	ldr	r0, [pc, #76]	; (800d304 <tcp_pcb_remove+0x114>)
 800d2b6:	f006 feab 	bl	8014010 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d006      	beq.n	800d2d0 <tcp_pcb_remove+0xe0>
 800d2c2:	4b0e      	ldr	r3, [pc, #56]	; (800d2fc <tcp_pcb_remove+0x10c>)
 800d2c4:	f640 0294 	movw	r2, #2196	; 0x894
 800d2c8:	4911      	ldr	r1, [pc, #68]	; (800d310 <tcp_pcb_remove+0x120>)
 800d2ca:	480e      	ldr	r0, [pc, #56]	; (800d304 <tcp_pcb_remove+0x114>)
 800d2cc:	f006 fea0 	bl	8014010 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d006      	beq.n	800d2e6 <tcp_pcb_remove+0xf6>
 800d2d8:	4b08      	ldr	r3, [pc, #32]	; (800d2fc <tcp_pcb_remove+0x10c>)
 800d2da:	f640 0296 	movw	r2, #2198	; 0x896
 800d2de:	490d      	ldr	r1, [pc, #52]	; (800d314 <tcp_pcb_remove+0x124>)
 800d2e0:	4808      	ldr	r0, [pc, #32]	; (800d304 <tcp_pcb_remove+0x114>)
 800d2e2:	f006 fe95 	bl	8014010 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d2f2:	bf00      	nop
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	08016190 	.word	0x08016190
 800d300:	080167f8 	.word	0x080167f8
 800d304:	080161d4 	.word	0x080161d4
 800d308:	08016814 	.word	0x08016814
 800d30c:	08016834 	.word	0x08016834
 800d310:	0801684c 	.word	0x0801684c
 800d314:	08016868 	.word	0x08016868

0800d318 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d106      	bne.n	800d334 <tcp_next_iss+0x1c>
 800d326:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <tcp_next_iss+0x38>)
 800d328:	f640 02af 	movw	r2, #2223	; 0x8af
 800d32c:	4909      	ldr	r1, [pc, #36]	; (800d354 <tcp_next_iss+0x3c>)
 800d32e:	480a      	ldr	r0, [pc, #40]	; (800d358 <tcp_next_iss+0x40>)
 800d330:	f006 fe6e 	bl	8014010 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d334:	4b09      	ldr	r3, [pc, #36]	; (800d35c <tcp_next_iss+0x44>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	4b09      	ldr	r3, [pc, #36]	; (800d360 <tcp_next_iss+0x48>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4413      	add	r3, r2
 800d33e:	4a07      	ldr	r2, [pc, #28]	; (800d35c <tcp_next_iss+0x44>)
 800d340:	6013      	str	r3, [r2, #0]
  return iss;
 800d342:	4b06      	ldr	r3, [pc, #24]	; (800d35c <tcp_next_iss+0x44>)
 800d344:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	08016190 	.word	0x08016190
 800d354:	08016880 	.word	0x08016880
 800d358:	080161d4 	.word	0x080161d4
 800d35c:	20000014 	.word	0x20000014
 800d360:	2000b948 	.word	0x2000b948

0800d364 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b086      	sub	sp, #24
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
 800d370:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d106      	bne.n	800d386 <tcp_eff_send_mss_netif+0x22>
 800d378:	4b14      	ldr	r3, [pc, #80]	; (800d3cc <tcp_eff_send_mss_netif+0x68>)
 800d37a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d37e:	4914      	ldr	r1, [pc, #80]	; (800d3d0 <tcp_eff_send_mss_netif+0x6c>)
 800d380:	4814      	ldr	r0, [pc, #80]	; (800d3d4 <tcp_eff_send_mss_netif+0x70>)
 800d382:	f006 fe45 	bl	8014010 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d38c:	89fb      	ldrh	r3, [r7, #14]
 800d38e:	e019      	b.n	800d3c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d394:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d396:	8afb      	ldrh	r3, [r7, #22]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d012      	beq.n	800d3c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d39c:	2328      	movs	r3, #40	; 0x28
 800d39e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d3a0:	8afa      	ldrh	r2, [r7, #22]
 800d3a2:	8abb      	ldrh	r3, [r7, #20]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d904      	bls.n	800d3b2 <tcp_eff_send_mss_netif+0x4e>
 800d3a8:	8afa      	ldrh	r2, [r7, #22]
 800d3aa:	8abb      	ldrh	r3, [r7, #20]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	b29b      	uxth	r3, r3
 800d3b0:	e000      	b.n	800d3b4 <tcp_eff_send_mss_netif+0x50>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d3b6:	8a7a      	ldrh	r2, [r7, #18]
 800d3b8:	89fb      	ldrh	r3, [r7, #14]
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	bf28      	it	cs
 800d3be:	4613      	movcs	r3, r2
 800d3c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d3c2:	89fb      	ldrh	r3, [r7, #14]
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3718      	adds	r7, #24
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	08016190 	.word	0x08016190
 800d3d0:	0801689c 	.word	0x0801689c
 800d3d4:	080161d4 	.word	0x080161d4

0800d3d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d119      	bne.n	800d420 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d3ec:	4b10      	ldr	r3, [pc, #64]	; (800d430 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d3ee:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d3f2:	4910      	ldr	r1, [pc, #64]	; (800d434 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d3f4:	4810      	ldr	r0, [pc, #64]	; (800d438 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d3f6:	f006 fe0b 	bl	8014010 <iprintf>

  while (pcb != NULL) {
 800d3fa:	e011      	b.n	800d420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681a      	ldr	r2, [r3, #0]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	429a      	cmp	r2, r3
 800d406:	d108      	bne.n	800d41a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f7fe ffc6 	bl	800c3a0 <tcp_abort>
      pcb = next;
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	e002      	b.n	800d420 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d1ea      	bne.n	800d3fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d426:	bf00      	nop
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	08016190 	.word	0x08016190
 800d434:	080168c4 	.word	0x080168c4
 800d438:	080161d4 	.word	0x080161d4

0800d43c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d02a      	beq.n	800d4a2 <tcp_netif_ip_addr_changed+0x66>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d026      	beq.n	800d4a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d454:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <tcp_netif_ip_addr_changed+0x70>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff ffbc 	bl	800d3d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d460:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <tcp_netif_ip_addr_changed+0x74>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f7ff ffb6 	bl	800d3d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d017      	beq.n	800d4a2 <tcp_netif_ip_addr_changed+0x66>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d013      	beq.n	800d4a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d47a:	4b0e      	ldr	r3, [pc, #56]	; (800d4b4 <tcp_netif_ip_addr_changed+0x78>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e00c      	b.n	800d49c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d103      	bne.n	800d496 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1ef      	bne.n	800d482 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d4a2:	bf00      	nop
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	2000b944 	.word	0x2000b944
 800d4b0:	2000b950 	.word	0x2000b950
 800d4b4:	2000b94c 	.word	0x2000b94c

0800d4b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d007      	beq.n	800d4d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fc3d 	bl	800cd4c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d4d8:	bf00      	nop
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d4e0:	b590      	push	{r4, r7, lr}
 800d4e2:	b08d      	sub	sp, #52	; 0x34
 800d4e4:	af04      	add	r7, sp, #16
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d105      	bne.n	800d4fc <tcp_input+0x1c>
 800d4f0:	4b9b      	ldr	r3, [pc, #620]	; (800d760 <tcp_input+0x280>)
 800d4f2:	2283      	movs	r2, #131	; 0x83
 800d4f4:	499b      	ldr	r1, [pc, #620]	; (800d764 <tcp_input+0x284>)
 800d4f6:	489c      	ldr	r0, [pc, #624]	; (800d768 <tcp_input+0x288>)
 800d4f8:	f006 fd8a 	bl	8014010 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	4a9a      	ldr	r2, [pc, #616]	; (800d76c <tcp_input+0x28c>)
 800d502:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	895b      	ldrh	r3, [r3, #10]
 800d508:	2b13      	cmp	r3, #19
 800d50a:	f240 83c4 	bls.w	800dc96 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d50e:	4b98      	ldr	r3, [pc, #608]	; (800d770 <tcp_input+0x290>)
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	4a97      	ldr	r2, [pc, #604]	; (800d770 <tcp_input+0x290>)
 800d514:	6812      	ldr	r2, [r2, #0]
 800d516:	4611      	mov	r1, r2
 800d518:	4618      	mov	r0, r3
 800d51a:	f005 fc43 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	f040 83ba 	bne.w	800dc9a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d526:	4b92      	ldr	r3, [pc, #584]	; (800d770 <tcp_input+0x290>)
 800d528:	695b      	ldr	r3, [r3, #20]
 800d52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d52e:	2be0      	cmp	r3, #224	; 0xe0
 800d530:	f000 83b3 	beq.w	800dc9a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d534:	4b8d      	ldr	r3, [pc, #564]	; (800d76c <tcp_input+0x28c>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	899b      	ldrh	r3, [r3, #12]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fc fdef 	bl	800a120 <lwip_htons>
 800d542:	4603      	mov	r3, r0
 800d544:	0b1b      	lsrs	r3, r3, #12
 800d546:	b29b      	uxth	r3, r3
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d54e:	7cbb      	ldrb	r3, [r7, #18]
 800d550:	2b13      	cmp	r3, #19
 800d552:	f240 83a4 	bls.w	800dc9e <tcp_input+0x7be>
 800d556:	7cbb      	ldrb	r3, [r7, #18]
 800d558:	b29a      	uxth	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	891b      	ldrh	r3, [r3, #8]
 800d55e:	429a      	cmp	r2, r3
 800d560:	f200 839d 	bhi.w	800dc9e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d564:	7cbb      	ldrb	r3, [r7, #18]
 800d566:	b29b      	uxth	r3, r3
 800d568:	3b14      	subs	r3, #20
 800d56a:	b29a      	uxth	r2, r3
 800d56c:	4b81      	ldr	r3, [pc, #516]	; (800d774 <tcp_input+0x294>)
 800d56e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d570:	4b81      	ldr	r3, [pc, #516]	; (800d778 <tcp_input+0x298>)
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	895a      	ldrh	r2, [r3, #10]
 800d57a:	7cbb      	ldrb	r3, [r7, #18]
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	429a      	cmp	r2, r3
 800d580:	d309      	bcc.n	800d596 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d582:	4b7c      	ldr	r3, [pc, #496]	; (800d774 <tcp_input+0x294>)
 800d584:	881a      	ldrh	r2, [r3, #0]
 800d586:	4b7d      	ldr	r3, [pc, #500]	; (800d77c <tcp_input+0x29c>)
 800d588:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d58a:	7cbb      	ldrb	r3, [r7, #18]
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7fe f8ec 	bl	800b76c <pbuf_remove_header>
 800d594:	e04e      	b.n	800d634 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d105      	bne.n	800d5aa <tcp_input+0xca>
 800d59e:	4b70      	ldr	r3, [pc, #448]	; (800d760 <tcp_input+0x280>)
 800d5a0:	22c2      	movs	r2, #194	; 0xc2
 800d5a2:	4977      	ldr	r1, [pc, #476]	; (800d780 <tcp_input+0x2a0>)
 800d5a4:	4870      	ldr	r0, [pc, #448]	; (800d768 <tcp_input+0x288>)
 800d5a6:	f006 fd33 	bl	8014010 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d5aa:	2114      	movs	r1, #20
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f7fe f8dd 	bl	800b76c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	895a      	ldrh	r2, [r3, #10]
 800d5b6:	4b71      	ldr	r3, [pc, #452]	; (800d77c <tcp_input+0x29c>)
 800d5b8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d5ba:	4b6e      	ldr	r3, [pc, #440]	; (800d774 <tcp_input+0x294>)
 800d5bc:	881a      	ldrh	r2, [r3, #0]
 800d5be:	4b6f      	ldr	r3, [pc, #444]	; (800d77c <tcp_input+0x29c>)
 800d5c0:	881b      	ldrh	r3, [r3, #0]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d5c6:	4b6d      	ldr	r3, [pc, #436]	; (800d77c <tcp_input+0x29c>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7fe f8cd 	bl	800b76c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	895b      	ldrh	r3, [r3, #10]
 800d5d8:	8a3a      	ldrh	r2, [r7, #16]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	f200 8361 	bhi.w	800dca2 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	4a64      	ldr	r2, [pc, #400]	; (800d778 <tcp_input+0x298>)
 800d5e8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	8a3a      	ldrh	r2, [r7, #16]
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7fe f8ba 	bl	800b76c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	891a      	ldrh	r2, [r3, #8]
 800d5fc:	8a3b      	ldrh	r3, [r7, #16]
 800d5fe:	1ad3      	subs	r3, r2, r3
 800d600:	b29a      	uxth	r2, r3
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	895b      	ldrh	r3, [r3, #10]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <tcp_input+0x13a>
 800d60e:	4b54      	ldr	r3, [pc, #336]	; (800d760 <tcp_input+0x280>)
 800d610:	22df      	movs	r2, #223	; 0xdf
 800d612:	495c      	ldr	r1, [pc, #368]	; (800d784 <tcp_input+0x2a4>)
 800d614:	4854      	ldr	r0, [pc, #336]	; (800d768 <tcp_input+0x288>)
 800d616:	f006 fcfb 	bl	8014010 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	891a      	ldrh	r2, [r3, #8]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	891b      	ldrh	r3, [r3, #8]
 800d624:	429a      	cmp	r2, r3
 800d626:	d005      	beq.n	800d634 <tcp_input+0x154>
 800d628:	4b4d      	ldr	r3, [pc, #308]	; (800d760 <tcp_input+0x280>)
 800d62a:	22e0      	movs	r2, #224	; 0xe0
 800d62c:	4956      	ldr	r1, [pc, #344]	; (800d788 <tcp_input+0x2a8>)
 800d62e:	484e      	ldr	r0, [pc, #312]	; (800d768 <tcp_input+0x288>)
 800d630:	f006 fcee 	bl	8014010 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d634:	4b4d      	ldr	r3, [pc, #308]	; (800d76c <tcp_input+0x28c>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4a4b      	ldr	r2, [pc, #300]	; (800d76c <tcp_input+0x28c>)
 800d63e:	6814      	ldr	r4, [r2, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f7fc fd6d 	bl	800a120 <lwip_htons>
 800d646:	4603      	mov	r3, r0
 800d648:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d64a:	4b48      	ldr	r3, [pc, #288]	; (800d76c <tcp_input+0x28c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	885b      	ldrh	r3, [r3, #2]
 800d650:	b29b      	uxth	r3, r3
 800d652:	4a46      	ldr	r2, [pc, #280]	; (800d76c <tcp_input+0x28c>)
 800d654:	6814      	ldr	r4, [r2, #0]
 800d656:	4618      	mov	r0, r3
 800d658:	f7fc fd62 	bl	800a120 <lwip_htons>
 800d65c:	4603      	mov	r3, r0
 800d65e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d660:	4b42      	ldr	r3, [pc, #264]	; (800d76c <tcp_input+0x28c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	4a41      	ldr	r2, [pc, #260]	; (800d76c <tcp_input+0x28c>)
 800d668:	6814      	ldr	r4, [r2, #0]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fc fd6d 	bl	800a14a <lwip_htonl>
 800d670:	4603      	mov	r3, r0
 800d672:	6063      	str	r3, [r4, #4]
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	4a45      	ldr	r2, [pc, #276]	; (800d78c <tcp_input+0x2ac>)
 800d678:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d67a:	4b3c      	ldr	r3, [pc, #240]	; (800d76c <tcp_input+0x28c>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	4a3a      	ldr	r2, [pc, #232]	; (800d76c <tcp_input+0x28c>)
 800d682:	6814      	ldr	r4, [r2, #0]
 800d684:	4618      	mov	r0, r3
 800d686:	f7fc fd60 	bl	800a14a <lwip_htonl>
 800d68a:	4603      	mov	r3, r0
 800d68c:	60a3      	str	r3, [r4, #8]
 800d68e:	68a3      	ldr	r3, [r4, #8]
 800d690:	4a3f      	ldr	r2, [pc, #252]	; (800d790 <tcp_input+0x2b0>)
 800d692:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d694:	4b35      	ldr	r3, [pc, #212]	; (800d76c <tcp_input+0x28c>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	89db      	ldrh	r3, [r3, #14]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4a33      	ldr	r2, [pc, #204]	; (800d76c <tcp_input+0x28c>)
 800d69e:	6814      	ldr	r4, [r2, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fc fd3d 	bl	800a120 <lwip_htons>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d6aa:	4b30      	ldr	r3, [pc, #192]	; (800d76c <tcp_input+0x28c>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	899b      	ldrh	r3, [r3, #12]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fc fd34 	bl	800a120 <lwip_htons>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	4b34      	ldr	r3, [pc, #208]	; (800d794 <tcp_input+0x2b4>)
 800d6c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	891a      	ldrh	r2, [r3, #8]
 800d6ca:	4b33      	ldr	r3, [pc, #204]	; (800d798 <tcp_input+0x2b8>)
 800d6cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d6ce:	4b31      	ldr	r3, [pc, #196]	; (800d794 <tcp_input+0x2b4>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	f003 0303 	and.w	r3, r3, #3
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00c      	beq.n	800d6f4 <tcp_input+0x214>
    tcplen++;
 800d6da:	4b2f      	ldr	r3, [pc, #188]	; (800d798 <tcp_input+0x2b8>)
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	4b2d      	ldr	r3, [pc, #180]	; (800d798 <tcp_input+0x2b8>)
 800d6e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	891a      	ldrh	r2, [r3, #8]
 800d6ea:	4b2b      	ldr	r3, [pc, #172]	; (800d798 <tcp_input+0x2b8>)
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	f200 82d9 	bhi.w	800dca6 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6f8:	4b28      	ldr	r3, [pc, #160]	; (800d79c <tcp_input+0x2bc>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	61fb      	str	r3, [r7, #28]
 800d6fe:	e09d      	b.n	800d83c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	7d1b      	ldrb	r3, [r3, #20]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d105      	bne.n	800d714 <tcp_input+0x234>
 800d708:	4b15      	ldr	r3, [pc, #84]	; (800d760 <tcp_input+0x280>)
 800d70a:	22fb      	movs	r2, #251	; 0xfb
 800d70c:	4924      	ldr	r1, [pc, #144]	; (800d7a0 <tcp_input+0x2c0>)
 800d70e:	4816      	ldr	r0, [pc, #88]	; (800d768 <tcp_input+0x288>)
 800d710:	f006 fc7e 	bl	8014010 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	7d1b      	ldrb	r3, [r3, #20]
 800d718:	2b0a      	cmp	r3, #10
 800d71a:	d105      	bne.n	800d728 <tcp_input+0x248>
 800d71c:	4b10      	ldr	r3, [pc, #64]	; (800d760 <tcp_input+0x280>)
 800d71e:	22fc      	movs	r2, #252	; 0xfc
 800d720:	4920      	ldr	r1, [pc, #128]	; (800d7a4 <tcp_input+0x2c4>)
 800d722:	4811      	ldr	r0, [pc, #68]	; (800d768 <tcp_input+0x288>)
 800d724:	f006 fc74 	bl	8014010 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d105      	bne.n	800d73c <tcp_input+0x25c>
 800d730:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <tcp_input+0x280>)
 800d732:	22fd      	movs	r2, #253	; 0xfd
 800d734:	491c      	ldr	r1, [pc, #112]	; (800d7a8 <tcp_input+0x2c8>)
 800d736:	480c      	ldr	r0, [pc, #48]	; (800d768 <tcp_input+0x288>)
 800d738:	f006 fc6a 	bl	8014010 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	7a1b      	ldrb	r3, [r3, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d033      	beq.n	800d7ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	7a1a      	ldrb	r2, [r3, #8]
 800d748:	4b09      	ldr	r3, [pc, #36]	; (800d770 <tcp_input+0x290>)
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d750:	3301      	adds	r3, #1
 800d752:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d754:	429a      	cmp	r2, r3
 800d756:	d029      	beq.n	800d7ac <tcp_input+0x2cc>
      prev = pcb;
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	61bb      	str	r3, [r7, #24]
      continue;
 800d75c:	e06b      	b.n	800d836 <tcp_input+0x356>
 800d75e:	bf00      	nop
 800d760:	080168f8 	.word	0x080168f8
 800d764:	0801692c 	.word	0x0801692c
 800d768:	08016944 	.word	0x08016944
 800d76c:	20004a14 	.word	0x20004a14
 800d770:	20008230 	.word	0x20008230
 800d774:	20004a18 	.word	0x20004a18
 800d778:	20004a1c 	.word	0x20004a1c
 800d77c:	20004a1a 	.word	0x20004a1a
 800d780:	0801696c 	.word	0x0801696c
 800d784:	0801697c 	.word	0x0801697c
 800d788:	08016988 	.word	0x08016988
 800d78c:	20004a24 	.word	0x20004a24
 800d790:	20004a28 	.word	0x20004a28
 800d794:	20004a30 	.word	0x20004a30
 800d798:	20004a2e 	.word	0x20004a2e
 800d79c:	2000b944 	.word	0x2000b944
 800d7a0:	080169a8 	.word	0x080169a8
 800d7a4:	080169d0 	.word	0x080169d0
 800d7a8:	080169fc 	.word	0x080169fc
    }

    if (pcb->remote_port == tcphdr->src &&
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	8b1a      	ldrh	r2, [r3, #24]
 800d7b0:	4b94      	ldr	r3, [pc, #592]	; (800da04 <tcp_input+0x524>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d13a      	bne.n	800d832 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	8ada      	ldrh	r2, [r3, #22]
 800d7c0:	4b90      	ldr	r3, [pc, #576]	; (800da04 <tcp_input+0x524>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	885b      	ldrh	r3, [r3, #2]
 800d7c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d132      	bne.n	800d832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	4b8d      	ldr	r3, [pc, #564]	; (800da08 <tcp_input+0x528>)
 800d7d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d12c      	bne.n	800d832 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	4b8a      	ldr	r3, [pc, #552]	; (800da08 <tcp_input+0x528>)
 800d7de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d126      	bne.n	800d832 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	69fa      	ldr	r2, [r7, #28]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d106      	bne.n	800d7fc <tcp_input+0x31c>
 800d7ee:	4b87      	ldr	r3, [pc, #540]	; (800da0c <tcp_input+0x52c>)
 800d7f0:	f240 120d 	movw	r2, #269	; 0x10d
 800d7f4:	4986      	ldr	r1, [pc, #536]	; (800da10 <tcp_input+0x530>)
 800d7f6:	4887      	ldr	r0, [pc, #540]	; (800da14 <tcp_input+0x534>)
 800d7f8:	f006 fc0a 	bl	8014010 <iprintf>
      if (prev != NULL) {
 800d7fc:	69bb      	ldr	r3, [r7, #24]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00a      	beq.n	800d818 <tcp_input+0x338>
        prev->next = pcb->next;
 800d802:	69fb      	ldr	r3, [r7, #28]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	69bb      	ldr	r3, [r7, #24]
 800d808:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d80a:	4b83      	ldr	r3, [pc, #524]	; (800da18 <tcp_input+0x538>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d812:	4a81      	ldr	r2, [pc, #516]	; (800da18 <tcp_input+0x538>)
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d111      	bne.n	800d846 <tcp_input+0x366>
 800d822:	4b7a      	ldr	r3, [pc, #488]	; (800da0c <tcp_input+0x52c>)
 800d824:	f240 1215 	movw	r2, #277	; 0x115
 800d828:	497c      	ldr	r1, [pc, #496]	; (800da1c <tcp_input+0x53c>)
 800d82a:	487a      	ldr	r0, [pc, #488]	; (800da14 <tcp_input+0x534>)
 800d82c:	f006 fbf0 	bl	8014010 <iprintf>
      break;
 800d830:	e009      	b.n	800d846 <tcp_input+0x366>
    }
    prev = pcb;
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	68db      	ldr	r3, [r3, #12]
 800d83a:	61fb      	str	r3, [r7, #28]
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f47f af5e 	bne.w	800d700 <tcp_input+0x220>
 800d844:	e000      	b.n	800d848 <tcp_input+0x368>
      break;
 800d846:	bf00      	nop
  }

  if (pcb == NULL) {
 800d848:	69fb      	ldr	r3, [r7, #28]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f040 8095 	bne.w	800d97a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d850:	4b73      	ldr	r3, [pc, #460]	; (800da20 <tcp_input+0x540>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	61fb      	str	r3, [r7, #28]
 800d856:	e03f      	b.n	800d8d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	7d1b      	ldrb	r3, [r3, #20]
 800d85c:	2b0a      	cmp	r3, #10
 800d85e:	d006      	beq.n	800d86e <tcp_input+0x38e>
 800d860:	4b6a      	ldr	r3, [pc, #424]	; (800da0c <tcp_input+0x52c>)
 800d862:	f240 121f 	movw	r2, #287	; 0x11f
 800d866:	496f      	ldr	r1, [pc, #444]	; (800da24 <tcp_input+0x544>)
 800d868:	486a      	ldr	r0, [pc, #424]	; (800da14 <tcp_input+0x534>)
 800d86a:	f006 fbd1 	bl	8014010 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	7a1b      	ldrb	r3, [r3, #8]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d009      	beq.n	800d88a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	7a1a      	ldrb	r2, [r3, #8]
 800d87a:	4b63      	ldr	r3, [pc, #396]	; (800da08 <tcp_input+0x528>)
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d882:	3301      	adds	r3, #1
 800d884:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d886:	429a      	cmp	r2, r3
 800d888:	d122      	bne.n	800d8d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d88a:	69fb      	ldr	r3, [r7, #28]
 800d88c:	8b1a      	ldrh	r2, [r3, #24]
 800d88e:	4b5d      	ldr	r3, [pc, #372]	; (800da04 <tcp_input+0x524>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	b29b      	uxth	r3, r3
 800d896:	429a      	cmp	r2, r3
 800d898:	d11b      	bne.n	800d8d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d89a:	69fb      	ldr	r3, [r7, #28]
 800d89c:	8ada      	ldrh	r2, [r3, #22]
 800d89e:	4b59      	ldr	r3, [pc, #356]	; (800da04 <tcp_input+0x524>)
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	885b      	ldrh	r3, [r3, #2]
 800d8a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d113      	bne.n	800d8d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	685a      	ldr	r2, [r3, #4]
 800d8ae:	4b56      	ldr	r3, [pc, #344]	; (800da08 <tcp_input+0x528>)
 800d8b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d10d      	bne.n	800d8d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	4b53      	ldr	r3, [pc, #332]	; (800da08 <tcp_input+0x528>)
 800d8bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d107      	bne.n	800d8d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d8c2:	69f8      	ldr	r0, [r7, #28]
 800d8c4:	f000 fb54 	bl	800df70 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7fd ffd5 	bl	800b878 <pbuf_free>
        return;
 800d8ce:	e1f0      	b.n	800dcb2 <tcp_input+0x7d2>
        continue;
 800d8d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	69fb      	ldr	r3, [r7, #28]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d1bc      	bne.n	800d858 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8e2:	4b51      	ldr	r3, [pc, #324]	; (800da28 <tcp_input+0x548>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	617b      	str	r3, [r7, #20]
 800d8e8:	e02a      	b.n	800d940 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	7a1b      	ldrb	r3, [r3, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00c      	beq.n	800d90c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	7a1a      	ldrb	r2, [r3, #8]
 800d8f6:	4b44      	ldr	r3, [pc, #272]	; (800da08 <tcp_input+0x528>)
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8fe:	3301      	adds	r3, #1
 800d900:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d902:	429a      	cmp	r2, r3
 800d904:	d002      	beq.n	800d90c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	61bb      	str	r3, [r7, #24]
        continue;
 800d90a:	e016      	b.n	800d93a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	8ada      	ldrh	r2, [r3, #22]
 800d910:	4b3c      	ldr	r3, [pc, #240]	; (800da04 <tcp_input+0x524>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	b29b      	uxth	r3, r3
 800d918:	429a      	cmp	r2, r3
 800d91a:	d10c      	bne.n	800d936 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	681a      	ldr	r2, [r3, #0]
 800d920:	4b39      	ldr	r3, [pc, #228]	; (800da08 <tcp_input+0x528>)
 800d922:	695b      	ldr	r3, [r3, #20]
 800d924:	429a      	cmp	r2, r3
 800d926:	d00f      	beq.n	800d948 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d00d      	beq.n	800d94a <tcp_input+0x46a>
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d009      	beq.n	800d94a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	617b      	str	r3, [r7, #20]
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1d1      	bne.n	800d8ea <tcp_input+0x40a>
 800d946:	e000      	b.n	800d94a <tcp_input+0x46a>
            break;
 800d948:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d014      	beq.n	800d97a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d950:	69bb      	ldr	r3, [r7, #24]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d95e:	4b32      	ldr	r3, [pc, #200]	; (800da28 <tcp_input+0x548>)
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d966:	4a30      	ldr	r2, [pc, #192]	; (800da28 <tcp_input+0x548>)
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d96c:	6978      	ldr	r0, [r7, #20]
 800d96e:	f000 fa01 	bl	800dd74 <tcp_listen_input>
      }
      pbuf_free(p);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7fd ff80 	bl	800b878 <pbuf_free>
      return;
 800d978:	e19b      	b.n	800dcb2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f000 8160 	beq.w	800dc42 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d982:	4b2a      	ldr	r3, [pc, #168]	; (800da2c <tcp_input+0x54c>)
 800d984:	2200      	movs	r2, #0
 800d986:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	891a      	ldrh	r2, [r3, #8]
 800d98c:	4b27      	ldr	r3, [pc, #156]	; (800da2c <tcp_input+0x54c>)
 800d98e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d990:	4a26      	ldr	r2, [pc, #152]	; (800da2c <tcp_input+0x54c>)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d996:	4b1b      	ldr	r3, [pc, #108]	; (800da04 <tcp_input+0x524>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a24      	ldr	r2, [pc, #144]	; (800da2c <tcp_input+0x54c>)
 800d99c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d99e:	4b24      	ldr	r3, [pc, #144]	; (800da30 <tcp_input+0x550>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d9a4:	4b23      	ldr	r3, [pc, #140]	; (800da34 <tcp_input+0x554>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d9aa:	4b23      	ldr	r3, [pc, #140]	; (800da38 <tcp_input+0x558>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d9b0:	4b22      	ldr	r3, [pc, #136]	; (800da3c <tcp_input+0x55c>)
 800d9b2:	781b      	ldrb	r3, [r3, #0]
 800d9b4:	f003 0308 	and.w	r3, r3, #8
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d006      	beq.n	800d9ca <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7b5b      	ldrb	r3, [r3, #13]
 800d9c0:	f043 0301 	orr.w	r3, r3, #1
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d038      	beq.n	800da44 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d9d2:	69f8      	ldr	r0, [r7, #28]
 800d9d4:	f7ff f93e 	bl	800cc54 <tcp_process_refused_data>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f113 0f0d 	cmn.w	r3, #13
 800d9de:	d007      	beq.n	800d9f0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d02d      	beq.n	800da44 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d9e8:	4b15      	ldr	r3, [pc, #84]	; (800da40 <tcp_input+0x560>)
 800d9ea:	881b      	ldrh	r3, [r3, #0]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d029      	beq.n	800da44 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	f040 8104 	bne.w	800dc02 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d9fa:	69f8      	ldr	r0, [r7, #28]
 800d9fc:	f003 f9be 	bl	8010d7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800da00:	e0ff      	b.n	800dc02 <tcp_input+0x722>
 800da02:	bf00      	nop
 800da04:	20004a14 	.word	0x20004a14
 800da08:	20008230 	.word	0x20008230
 800da0c:	080168f8 	.word	0x080168f8
 800da10:	08016a24 	.word	0x08016a24
 800da14:	08016944 	.word	0x08016944
 800da18:	2000b944 	.word	0x2000b944
 800da1c:	08016a50 	.word	0x08016a50
 800da20:	2000b954 	.word	0x2000b954
 800da24:	08016a7c 	.word	0x08016a7c
 800da28:	2000b94c 	.word	0x2000b94c
 800da2c:	20004a04 	.word	0x20004a04
 800da30:	20004a34 	.word	0x20004a34
 800da34:	20004a31 	.word	0x20004a31
 800da38:	20004a2c 	.word	0x20004a2c
 800da3c:	20004a30 	.word	0x20004a30
 800da40:	20004a2e 	.word	0x20004a2e
      }
    }
    tcp_input_pcb = pcb;
 800da44:	4a9c      	ldr	r2, [pc, #624]	; (800dcb8 <tcp_input+0x7d8>)
 800da46:	69fb      	ldr	r3, [r7, #28]
 800da48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800da4a:	69f8      	ldr	r0, [r7, #28]
 800da4c:	f000 fb0a 	bl	800e064 <tcp_process>
 800da50:	4603      	mov	r3, r0
 800da52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800da54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da58:	f113 0f0d 	cmn.w	r3, #13
 800da5c:	f000 80d3 	beq.w	800dc06 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800da60:	4b96      	ldr	r3, [pc, #600]	; (800dcbc <tcp_input+0x7dc>)
 800da62:	781b      	ldrb	r3, [r3, #0]
 800da64:	f003 0308 	and.w	r3, r3, #8
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d015      	beq.n	800da98 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da72:	2b00      	cmp	r3, #0
 800da74:	d008      	beq.n	800da88 <tcp_input+0x5a8>
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da7c:	69fa      	ldr	r2, [r7, #28]
 800da7e:	6912      	ldr	r2, [r2, #16]
 800da80:	f06f 010d 	mvn.w	r1, #13
 800da84:	4610      	mov	r0, r2
 800da86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da88:	69f9      	ldr	r1, [r7, #28]
 800da8a:	488d      	ldr	r0, [pc, #564]	; (800dcc0 <tcp_input+0x7e0>)
 800da8c:	f7ff fbb0 	bl	800d1f0 <tcp_pcb_remove>
        tcp_free(pcb);
 800da90:	69f8      	ldr	r0, [r7, #28]
 800da92:	f7fe f99d 	bl	800bdd0 <tcp_free>
 800da96:	e0c1      	b.n	800dc1c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800da9c:	4b89      	ldr	r3, [pc, #548]	; (800dcc4 <tcp_input+0x7e4>)
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d01d      	beq.n	800dae0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800daa4:	4b87      	ldr	r3, [pc, #540]	; (800dcc4 <tcp_input+0x7e4>)
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00a      	beq.n	800daca <tcp_input+0x5ea>
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	6910      	ldr	r0, [r2, #16]
 800dabe:	89fa      	ldrh	r2, [r7, #14]
 800dac0:	69f9      	ldr	r1, [r7, #28]
 800dac2:	4798      	blx	r3
 800dac4:	4603      	mov	r3, r0
 800dac6:	74fb      	strb	r3, [r7, #19]
 800dac8:	e001      	b.n	800dace <tcp_input+0x5ee>
 800daca:	2300      	movs	r3, #0
 800dacc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dace:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dad2:	f113 0f0d 	cmn.w	r3, #13
 800dad6:	f000 8098 	beq.w	800dc0a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dada:	4b7a      	ldr	r3, [pc, #488]	; (800dcc4 <tcp_input+0x7e4>)
 800dadc:	2200      	movs	r2, #0
 800dade:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dae0:	69f8      	ldr	r0, [r7, #28]
 800dae2:	f000 f907 	bl	800dcf4 <tcp_input_delayed_close>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f040 8090 	bne.w	800dc0e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800daee:	4b76      	ldr	r3, [pc, #472]	; (800dcc8 <tcp_input+0x7e8>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d041      	beq.n	800db7a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d006      	beq.n	800db0c <tcp_input+0x62c>
 800dafe:	4b73      	ldr	r3, [pc, #460]	; (800dccc <tcp_input+0x7ec>)
 800db00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800db04:	4972      	ldr	r1, [pc, #456]	; (800dcd0 <tcp_input+0x7f0>)
 800db06:	4873      	ldr	r0, [pc, #460]	; (800dcd4 <tcp_input+0x7f4>)
 800db08:	f006 fa82 	bl	8014010 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	8b5b      	ldrh	r3, [r3, #26]
 800db10:	f003 0310 	and.w	r3, r3, #16
 800db14:	2b00      	cmp	r3, #0
 800db16:	d008      	beq.n	800db2a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800db18:	4b6b      	ldr	r3, [pc, #428]	; (800dcc8 <tcp_input+0x7e8>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fd feab 	bl	800b878 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800db22:	69f8      	ldr	r0, [r7, #28]
 800db24:	f7fe fc3c 	bl	800c3a0 <tcp_abort>
            goto aborted;
 800db28:	e078      	b.n	800dc1c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00c      	beq.n	800db4e <tcp_input+0x66e>
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	6918      	ldr	r0, [r3, #16]
 800db3e:	4b62      	ldr	r3, [pc, #392]	; (800dcc8 <tcp_input+0x7e8>)
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	2300      	movs	r3, #0
 800db44:	69f9      	ldr	r1, [r7, #28]
 800db46:	47a0      	blx	r4
 800db48:	4603      	mov	r3, r0
 800db4a:	74fb      	strb	r3, [r7, #19]
 800db4c:	e008      	b.n	800db60 <tcp_input+0x680>
 800db4e:	4b5e      	ldr	r3, [pc, #376]	; (800dcc8 <tcp_input+0x7e8>)
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	2300      	movs	r3, #0
 800db54:	69f9      	ldr	r1, [r7, #28]
 800db56:	2000      	movs	r0, #0
 800db58:	f7ff f952 	bl	800ce00 <tcp_recv_null>
 800db5c:	4603      	mov	r3, r0
 800db5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800db60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db64:	f113 0f0d 	cmn.w	r3, #13
 800db68:	d053      	beq.n	800dc12 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800db6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d003      	beq.n	800db7a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800db72:	4b55      	ldr	r3, [pc, #340]	; (800dcc8 <tcp_input+0x7e8>)
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800db7a:	4b50      	ldr	r3, [pc, #320]	; (800dcbc <tcp_input+0x7dc>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	f003 0320 	and.w	r3, r3, #32
 800db82:	2b00      	cmp	r3, #0
 800db84:	d030      	beq.n	800dbe8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d009      	beq.n	800dba2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db92:	7b5a      	ldrb	r2, [r3, #13]
 800db94:	69fb      	ldr	r3, [r7, #28]
 800db96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db98:	f042 0220 	orr.w	r2, r2, #32
 800db9c:	b2d2      	uxtb	r2, r2
 800db9e:	735a      	strb	r2, [r3, #13]
 800dba0:	e022      	b.n	800dbe8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbaa:	d005      	beq.n	800dbb8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d00b      	beq.n	800dbda <tcp_input+0x6fa>
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	6918      	ldr	r0, [r3, #16]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	2200      	movs	r2, #0
 800dbd0:	69f9      	ldr	r1, [r7, #28]
 800dbd2:	47a0      	blx	r4
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	74fb      	strb	r3, [r7, #19]
 800dbd8:	e001      	b.n	800dbde <tcp_input+0x6fe>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dbde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbe2:	f113 0f0d 	cmn.w	r3, #13
 800dbe6:	d016      	beq.n	800dc16 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dbe8:	4b33      	ldr	r3, [pc, #204]	; (800dcb8 <tcp_input+0x7d8>)
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dbee:	69f8      	ldr	r0, [r7, #28]
 800dbf0:	f000 f880 	bl	800dcf4 <tcp_input_delayed_close>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d10f      	bne.n	800dc1a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dbfa:	69f8      	ldr	r0, [r7, #28]
 800dbfc:	f002 fab8 	bl	8010170 <tcp_output>
 800dc00:	e00c      	b.n	800dc1c <tcp_input+0x73c>
        goto aborted;
 800dc02:	bf00      	nop
 800dc04:	e00a      	b.n	800dc1c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dc06:	bf00      	nop
 800dc08:	e008      	b.n	800dc1c <tcp_input+0x73c>
              goto aborted;
 800dc0a:	bf00      	nop
 800dc0c:	e006      	b.n	800dc1c <tcp_input+0x73c>
          goto aborted;
 800dc0e:	bf00      	nop
 800dc10:	e004      	b.n	800dc1c <tcp_input+0x73c>
            goto aborted;
 800dc12:	bf00      	nop
 800dc14:	e002      	b.n	800dc1c <tcp_input+0x73c>
              goto aborted;
 800dc16:	bf00      	nop
 800dc18:	e000      	b.n	800dc1c <tcp_input+0x73c>
          goto aborted;
 800dc1a:	bf00      	nop
    tcp_input_pcb = NULL;
 800dc1c:	4b26      	ldr	r3, [pc, #152]	; (800dcb8 <tcp_input+0x7d8>)
 800dc1e:	2200      	movs	r2, #0
 800dc20:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dc22:	4b29      	ldr	r3, [pc, #164]	; (800dcc8 <tcp_input+0x7e8>)
 800dc24:	2200      	movs	r2, #0
 800dc26:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dc28:	4b2b      	ldr	r3, [pc, #172]	; (800dcd8 <tcp_input+0x7f8>)
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d03f      	beq.n	800dcb0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800dc30:	4b29      	ldr	r3, [pc, #164]	; (800dcd8 <tcp_input+0x7f8>)
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fd fe1f 	bl	800b878 <pbuf_free>
      inseg.p = NULL;
 800dc3a:	4b27      	ldr	r3, [pc, #156]	; (800dcd8 <tcp_input+0x7f8>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dc40:	e036      	b.n	800dcb0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dc42:	4b26      	ldr	r3, [pc, #152]	; (800dcdc <tcp_input+0x7fc>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	899b      	ldrh	r3, [r3, #12]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7fc fa68 	bl	800a120 <lwip_htons>
 800dc50:	4603      	mov	r3, r0
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	f003 0304 	and.w	r3, r3, #4
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d118      	bne.n	800dc8e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc5c:	4b20      	ldr	r3, [pc, #128]	; (800dce0 <tcp_input+0x800>)
 800dc5e:	6819      	ldr	r1, [r3, #0]
 800dc60:	4b20      	ldr	r3, [pc, #128]	; (800dce4 <tcp_input+0x804>)
 800dc62:	881b      	ldrh	r3, [r3, #0]
 800dc64:	461a      	mov	r2, r3
 800dc66:	4b20      	ldr	r3, [pc, #128]	; (800dce8 <tcp_input+0x808>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc6c:	4b1b      	ldr	r3, [pc, #108]	; (800dcdc <tcp_input+0x7fc>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc70:	885b      	ldrh	r3, [r3, #2]
 800dc72:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc74:	4a19      	ldr	r2, [pc, #100]	; (800dcdc <tcp_input+0x7fc>)
 800dc76:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc78:	8812      	ldrh	r2, [r2, #0]
 800dc7a:	b292      	uxth	r2, r2
 800dc7c:	9202      	str	r2, [sp, #8]
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	4b1a      	ldr	r3, [pc, #104]	; (800dcec <tcp_input+0x80c>)
 800dc82:	9300      	str	r3, [sp, #0]
 800dc84:	4b1a      	ldr	r3, [pc, #104]	; (800dcf0 <tcp_input+0x810>)
 800dc86:	4602      	mov	r2, r0
 800dc88:	2000      	movs	r0, #0
 800dc8a:	f003 f825 	bl	8010cd8 <tcp_rst>
    pbuf_free(p);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7fd fdf2 	bl	800b878 <pbuf_free>
  return;
 800dc94:	e00c      	b.n	800dcb0 <tcp_input+0x7d0>
    goto dropped;
 800dc96:	bf00      	nop
 800dc98:	e006      	b.n	800dca8 <tcp_input+0x7c8>
    goto dropped;
 800dc9a:	bf00      	nop
 800dc9c:	e004      	b.n	800dca8 <tcp_input+0x7c8>
    goto dropped;
 800dc9e:	bf00      	nop
 800dca0:	e002      	b.n	800dca8 <tcp_input+0x7c8>
      goto dropped;
 800dca2:	bf00      	nop
 800dca4:	e000      	b.n	800dca8 <tcp_input+0x7c8>
      goto dropped;
 800dca6:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7fd fde5 	bl	800b878 <pbuf_free>
 800dcae:	e000      	b.n	800dcb2 <tcp_input+0x7d2>
  return;
 800dcb0:	bf00      	nop
}
 800dcb2:	3724      	adds	r7, #36	; 0x24
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd90      	pop	{r4, r7, pc}
 800dcb8:	2000b958 	.word	0x2000b958
 800dcbc:	20004a31 	.word	0x20004a31
 800dcc0:	2000b944 	.word	0x2000b944
 800dcc4:	20004a2c 	.word	0x20004a2c
 800dcc8:	20004a34 	.word	0x20004a34
 800dccc:	080168f8 	.word	0x080168f8
 800dcd0:	08016aac 	.word	0x08016aac
 800dcd4:	08016944 	.word	0x08016944
 800dcd8:	20004a04 	.word	0x20004a04
 800dcdc:	20004a14 	.word	0x20004a14
 800dce0:	20004a28 	.word	0x20004a28
 800dce4:	20004a2e 	.word	0x20004a2e
 800dce8:	20004a24 	.word	0x20004a24
 800dcec:	20008240 	.word	0x20008240
 800dcf0:	20008244 	.word	0x20008244

0800dcf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d106      	bne.n	800dd10 <tcp_input_delayed_close+0x1c>
 800dd02:	4b17      	ldr	r3, [pc, #92]	; (800dd60 <tcp_input_delayed_close+0x6c>)
 800dd04:	f240 225a 	movw	r2, #602	; 0x25a
 800dd08:	4916      	ldr	r1, [pc, #88]	; (800dd64 <tcp_input_delayed_close+0x70>)
 800dd0a:	4817      	ldr	r0, [pc, #92]	; (800dd68 <tcp_input_delayed_close+0x74>)
 800dd0c:	f006 f980 	bl	8014010 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dd10:	4b16      	ldr	r3, [pc, #88]	; (800dd6c <tcp_input_delayed_close+0x78>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	f003 0310 	and.w	r3, r3, #16
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01c      	beq.n	800dd56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	8b5b      	ldrh	r3, [r3, #26]
 800dd20:	f003 0310 	and.w	r3, r3, #16
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10d      	bne.n	800dd44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d008      	beq.n	800dd44 <tcp_input_delayed_close+0x50>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	6912      	ldr	r2, [r2, #16]
 800dd3c:	f06f 010e 	mvn.w	r1, #14
 800dd40:	4610      	mov	r0, r2
 800dd42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	480a      	ldr	r0, [pc, #40]	; (800dd70 <tcp_input_delayed_close+0x7c>)
 800dd48:	f7ff fa52 	bl	800d1f0 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f7fe f83f 	bl	800bdd0 <tcp_free>
    return 1;
 800dd52:	2301      	movs	r3, #1
 800dd54:	e000      	b.n	800dd58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}
 800dd60:	080168f8 	.word	0x080168f8
 800dd64:	08016ac8 	.word	0x08016ac8
 800dd68:	08016944 	.word	0x08016944
 800dd6c:	20004a31 	.word	0x20004a31
 800dd70:	2000b944 	.word	0x2000b944

0800dd74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dd74:	b590      	push	{r4, r7, lr}
 800dd76:	b08b      	sub	sp, #44	; 0x2c
 800dd78:	af04      	add	r7, sp, #16
 800dd7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dd7c:	4b6f      	ldr	r3, [pc, #444]	; (800df3c <tcp_listen_input+0x1c8>)
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f040 80d2 	bne.w	800df2e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <tcp_listen_input+0x2a>
 800dd90:	4b6b      	ldr	r3, [pc, #428]	; (800df40 <tcp_listen_input+0x1cc>)
 800dd92:	f240 2281 	movw	r2, #641	; 0x281
 800dd96:	496b      	ldr	r1, [pc, #428]	; (800df44 <tcp_listen_input+0x1d0>)
 800dd98:	486b      	ldr	r0, [pc, #428]	; (800df48 <tcp_listen_input+0x1d4>)
 800dd9a:	f006 f939 	bl	8014010 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dd9e:	4b67      	ldr	r3, [pc, #412]	; (800df3c <tcp_listen_input+0x1c8>)
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	f003 0310 	and.w	r3, r3, #16
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d019      	beq.n	800ddde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddaa:	4b68      	ldr	r3, [pc, #416]	; (800df4c <tcp_listen_input+0x1d8>)
 800ddac:	6819      	ldr	r1, [r3, #0]
 800ddae:	4b68      	ldr	r3, [pc, #416]	; (800df50 <tcp_listen_input+0x1dc>)
 800ddb0:	881b      	ldrh	r3, [r3, #0]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4b67      	ldr	r3, [pc, #412]	; (800df54 <tcp_listen_input+0x1e0>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddba:	4b67      	ldr	r3, [pc, #412]	; (800df58 <tcp_listen_input+0x1e4>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddbe:	885b      	ldrh	r3, [r3, #2]
 800ddc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddc2:	4a65      	ldr	r2, [pc, #404]	; (800df58 <tcp_listen_input+0x1e4>)
 800ddc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddc6:	8812      	ldrh	r2, [r2, #0]
 800ddc8:	b292      	uxth	r2, r2
 800ddca:	9202      	str	r2, [sp, #8]
 800ddcc:	9301      	str	r3, [sp, #4]
 800ddce:	4b63      	ldr	r3, [pc, #396]	; (800df5c <tcp_listen_input+0x1e8>)
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	4b63      	ldr	r3, [pc, #396]	; (800df60 <tcp_listen_input+0x1ec>)
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f002 ff7e 	bl	8010cd8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dddc:	e0a9      	b.n	800df32 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ddde:	4b57      	ldr	r3, [pc, #348]	; (800df3c <tcp_listen_input+0x1c8>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	f003 0302 	and.w	r3, r3, #2
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f000 80a3 	beq.w	800df32 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	7d5b      	ldrb	r3, [r3, #21]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff f929 	bl	800d048 <tcp_alloc>
 800ddf6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d111      	bne.n	800de22 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	699b      	ldr	r3, [r3, #24]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d00a      	beq.n	800de1c <tcp_listen_input+0xa8>
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	6910      	ldr	r0, [r2, #16]
 800de0e:	f04f 32ff 	mov.w	r2, #4294967295
 800de12:	2100      	movs	r1, #0
 800de14:	4798      	blx	r3
 800de16:	4603      	mov	r3, r0
 800de18:	73bb      	strb	r3, [r7, #14]
      return;
 800de1a:	e08b      	b.n	800df34 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de1c:	23f0      	movs	r3, #240	; 0xf0
 800de1e:	73bb      	strb	r3, [r7, #14]
      return;
 800de20:	e088      	b.n	800df34 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800de22:	4b50      	ldr	r3, [pc, #320]	; (800df64 <tcp_listen_input+0x1f0>)
 800de24:	695a      	ldr	r2, [r3, #20]
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800de2a:	4b4e      	ldr	r3, [pc, #312]	; (800df64 <tcp_listen_input+0x1f0>)
 800de2c:	691a      	ldr	r2, [r3, #16]
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	8ada      	ldrh	r2, [r3, #22]
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800de3a:	4b47      	ldr	r3, [pc, #284]	; (800df58 <tcp_listen_input+0x1e4>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	b29a      	uxth	r2, r3
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2203      	movs	r2, #3
 800de4a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800de4c:	4b41      	ldr	r3, [pc, #260]	; (800df54 <tcp_listen_input+0x1e0>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	1c5a      	adds	r2, r3, #1
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800de5e:	6978      	ldr	r0, [r7, #20]
 800de60:	f7ff fa5a 	bl	800d318 <tcp_next_iss>
 800de64:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	693a      	ldr	r2, [r7, #16]
 800de6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	693a      	ldr	r2, [r7, #16]
 800de7c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800de7e:	4b35      	ldr	r3, [pc, #212]	; (800df54 <tcp_listen_input+0x1e0>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	1e5a      	subs	r2, r3, #1
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	691a      	ldr	r2, [r3, #16]
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	7a5b      	ldrb	r3, [r3, #9]
 800de9a:	f003 030c 	and.w	r3, r3, #12
 800de9e:	b2da      	uxtb	r2, r3
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	7a1a      	ldrb	r2, [r3, #8]
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800deac:	4b2e      	ldr	r3, [pc, #184]	; (800df68 <tcp_listen_input+0x1f4>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	60da      	str	r2, [r3, #12]
 800deb4:	4a2c      	ldr	r2, [pc, #176]	; (800df68 <tcp_listen_input+0x1f4>)
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	6013      	str	r3, [r2, #0]
 800deba:	f003 f8cf 	bl	801105c <tcp_timer_needed>
 800debe:	4b2b      	ldr	r3, [pc, #172]	; (800df6c <tcp_listen_input+0x1f8>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dec4:	6978      	ldr	r0, [r7, #20]
 800dec6:	f001 fd8d 	bl	800f9e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800deca:	4b23      	ldr	r3, [pc, #140]	; (800df58 <tcp_listen_input+0x1e4>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	89db      	ldrh	r3, [r3, #14]
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	3304      	adds	r3, #4
 800deec:	4618      	mov	r0, r3
 800deee:	f004 fcc3 	bl	8012878 <ip4_route>
 800def2:	4601      	mov	r1, r0
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	3304      	adds	r3, #4
 800def8:	461a      	mov	r2, r3
 800defa:	4620      	mov	r0, r4
 800defc:	f7ff fa32 	bl	800d364 <tcp_eff_send_mss_netif>
 800df00:	4603      	mov	r3, r0
 800df02:	461a      	mov	r2, r3
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800df08:	2112      	movs	r1, #18
 800df0a:	6978      	ldr	r0, [r7, #20]
 800df0c:	f002 f842 	bl	800ff94 <tcp_enqueue_flags>
 800df10:	4603      	mov	r3, r0
 800df12:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800df14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d004      	beq.n	800df26 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800df1c:	2100      	movs	r1, #0
 800df1e:	6978      	ldr	r0, [r7, #20]
 800df20:	f7fe f980 	bl	800c224 <tcp_abandon>
      return;
 800df24:	e006      	b.n	800df34 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800df26:	6978      	ldr	r0, [r7, #20]
 800df28:	f002 f922 	bl	8010170 <tcp_output>
  return;
 800df2c:	e001      	b.n	800df32 <tcp_listen_input+0x1be>
    return;
 800df2e:	bf00      	nop
 800df30:	e000      	b.n	800df34 <tcp_listen_input+0x1c0>
  return;
 800df32:	bf00      	nop
}
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	bd90      	pop	{r4, r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20004a30 	.word	0x20004a30
 800df40:	080168f8 	.word	0x080168f8
 800df44:	08016af0 	.word	0x08016af0
 800df48:	08016944 	.word	0x08016944
 800df4c:	20004a28 	.word	0x20004a28
 800df50:	20004a2e 	.word	0x20004a2e
 800df54:	20004a24 	.word	0x20004a24
 800df58:	20004a14 	.word	0x20004a14
 800df5c:	20008240 	.word	0x20008240
 800df60:	20008244 	.word	0x20008244
 800df64:	20008230 	.word	0x20008230
 800df68:	2000b944 	.word	0x2000b944
 800df6c:	2000b940 	.word	0x2000b940

0800df70 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af04      	add	r7, sp, #16
 800df76:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800df78:	4b2f      	ldr	r3, [pc, #188]	; (800e038 <tcp_timewait_input+0xc8>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 0304 	and.w	r3, r3, #4
 800df80:	2b00      	cmp	r3, #0
 800df82:	d153      	bne.n	800e02c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d106      	bne.n	800df98 <tcp_timewait_input+0x28>
 800df8a:	4b2c      	ldr	r3, [pc, #176]	; (800e03c <tcp_timewait_input+0xcc>)
 800df8c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800df90:	492b      	ldr	r1, [pc, #172]	; (800e040 <tcp_timewait_input+0xd0>)
 800df92:	482c      	ldr	r0, [pc, #176]	; (800e044 <tcp_timewait_input+0xd4>)
 800df94:	f006 f83c 	bl	8014010 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800df98:	4b27      	ldr	r3, [pc, #156]	; (800e038 <tcp_timewait_input+0xc8>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	f003 0302 	and.w	r3, r3, #2
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d02a      	beq.n	800dffa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dfa4:	4b28      	ldr	r3, [pc, #160]	; (800e048 <tcp_timewait_input+0xd8>)
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	db2d      	blt.n	800e00e <tcp_timewait_input+0x9e>
 800dfb2:	4b25      	ldr	r3, [pc, #148]	; (800e048 <tcp_timewait_input+0xd8>)
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dfbe:	440b      	add	r3, r1
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	dc23      	bgt.n	800e00e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc6:	4b21      	ldr	r3, [pc, #132]	; (800e04c <tcp_timewait_input+0xdc>)
 800dfc8:	6819      	ldr	r1, [r3, #0]
 800dfca:	4b21      	ldr	r3, [pc, #132]	; (800e050 <tcp_timewait_input+0xe0>)
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <tcp_timewait_input+0xd8>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfd6:	4b1f      	ldr	r3, [pc, #124]	; (800e054 <tcp_timewait_input+0xe4>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfda:	885b      	ldrh	r3, [r3, #2]
 800dfdc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfde:	4a1d      	ldr	r2, [pc, #116]	; (800e054 <tcp_timewait_input+0xe4>)
 800dfe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfe2:	8812      	ldrh	r2, [r2, #0]
 800dfe4:	b292      	uxth	r2, r2
 800dfe6:	9202      	str	r2, [sp, #8]
 800dfe8:	9301      	str	r3, [sp, #4]
 800dfea:	4b1b      	ldr	r3, [pc, #108]	; (800e058 <tcp_timewait_input+0xe8>)
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	4b1b      	ldr	r3, [pc, #108]	; (800e05c <tcp_timewait_input+0xec>)
 800dff0:	4602      	mov	r2, r0
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f002 fe70 	bl	8010cd8 <tcp_rst>
      return;
 800dff8:	e01b      	b.n	800e032 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dffa:	4b0f      	ldr	r3, [pc, #60]	; (800e038 <tcp_timewait_input+0xc8>)
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	f003 0301 	and.w	r3, r3, #1
 800e002:	2b00      	cmp	r3, #0
 800e004:	d003      	beq.n	800e00e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e006:	4b16      	ldr	r3, [pc, #88]	; (800e060 <tcp_timewait_input+0xf0>)
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e00e:	4b10      	ldr	r3, [pc, #64]	; (800e050 <tcp_timewait_input+0xe0>)
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d00c      	beq.n	800e030 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	8b5b      	ldrh	r3, [r3, #26]
 800e01a:	f043 0302 	orr.w	r3, r3, #2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f002 f8a3 	bl	8010170 <tcp_output>
  }
  return;
 800e02a:	e001      	b.n	800e030 <tcp_timewait_input+0xc0>
    return;
 800e02c:	bf00      	nop
 800e02e:	e000      	b.n	800e032 <tcp_timewait_input+0xc2>
  return;
 800e030:	bf00      	nop
}
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20004a30 	.word	0x20004a30
 800e03c:	080168f8 	.word	0x080168f8
 800e040:	08016b10 	.word	0x08016b10
 800e044:	08016944 	.word	0x08016944
 800e048:	20004a24 	.word	0x20004a24
 800e04c:	20004a28 	.word	0x20004a28
 800e050:	20004a2e 	.word	0x20004a2e
 800e054:	20004a14 	.word	0x20004a14
 800e058:	20008240 	.word	0x20008240
 800e05c:	20008244 	.word	0x20008244
 800e060:	2000b948 	.word	0x2000b948

0800e064 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e064:	b590      	push	{r4, r7, lr}
 800e066:	b08d      	sub	sp, #52	; 0x34
 800e068:	af04      	add	r7, sp, #16
 800e06a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e070:	2300      	movs	r3, #0
 800e072:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <tcp_process+0x24>
 800e07a:	4ba5      	ldr	r3, [pc, #660]	; (800e310 <tcp_process+0x2ac>)
 800e07c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e080:	49a4      	ldr	r1, [pc, #656]	; (800e314 <tcp_process+0x2b0>)
 800e082:	48a5      	ldr	r0, [pc, #660]	; (800e318 <tcp_process+0x2b4>)
 800e084:	f005 ffc4 	bl	8014010 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e088:	4ba4      	ldr	r3, [pc, #656]	; (800e31c <tcp_process+0x2b8>)
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	f003 0304 	and.w	r3, r3, #4
 800e090:	2b00      	cmp	r3, #0
 800e092:	d04e      	beq.n	800e132 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7d1b      	ldrb	r3, [r3, #20]
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d108      	bne.n	800e0ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0a0:	4b9f      	ldr	r3, [pc, #636]	; (800e320 <tcp_process+0x2bc>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d123      	bne.n	800e0f0 <tcp_process+0x8c>
        acceptable = 1;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	76fb      	strb	r3, [r7, #27]
 800e0ac:	e020      	b.n	800e0f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0b2:	4b9c      	ldr	r3, [pc, #624]	; (800e324 <tcp_process+0x2c0>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d102      	bne.n	800e0c0 <tcp_process+0x5c>
        acceptable = 1;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	76fb      	strb	r3, [r7, #27]
 800e0be:	e017      	b.n	800e0f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e0c0:	4b98      	ldr	r3, [pc, #608]	; (800e324 <tcp_process+0x2c0>)
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	db10      	blt.n	800e0f0 <tcp_process+0x8c>
 800e0ce:	4b95      	ldr	r3, [pc, #596]	; (800e324 <tcp_process+0x2c0>)
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e0da:	440b      	add	r3, r1
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	dc06      	bgt.n	800e0f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	8b5b      	ldrh	r3, [r3, #26]
 800e0e6:	f043 0302 	orr.w	r3, r3, #2
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e0f0:	7efb      	ldrb	r3, [r7, #27]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d01b      	beq.n	800e12e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	7d1b      	ldrb	r3, [r3, #20]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d106      	bne.n	800e10c <tcp_process+0xa8>
 800e0fe:	4b84      	ldr	r3, [pc, #528]	; (800e310 <tcp_process+0x2ac>)
 800e100:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e104:	4988      	ldr	r1, [pc, #544]	; (800e328 <tcp_process+0x2c4>)
 800e106:	4884      	ldr	r0, [pc, #528]	; (800e318 <tcp_process+0x2b4>)
 800e108:	f005 ff82 	bl	8014010 <iprintf>
      recv_flags |= TF_RESET;
 800e10c:	4b87      	ldr	r3, [pc, #540]	; (800e32c <tcp_process+0x2c8>)
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f043 0308 	orr.w	r3, r3, #8
 800e114:	b2da      	uxtb	r2, r3
 800e116:	4b85      	ldr	r3, [pc, #532]	; (800e32c <tcp_process+0x2c8>)
 800e118:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	8b5b      	ldrh	r3, [r3, #26]
 800e11e:	f023 0301 	bic.w	r3, r3, #1
 800e122:	b29a      	uxth	r2, r3
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e128:	f06f 030d 	mvn.w	r3, #13
 800e12c:	e37a      	b.n	800e824 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e12e:	2300      	movs	r3, #0
 800e130:	e378      	b.n	800e824 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e132:	4b7a      	ldr	r3, [pc, #488]	; (800e31c <tcp_process+0x2b8>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f003 0302 	and.w	r3, r3, #2
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d010      	beq.n	800e160 <tcp_process+0xfc>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	7d1b      	ldrb	r3, [r3, #20]
 800e142:	2b02      	cmp	r3, #2
 800e144:	d00c      	beq.n	800e160 <tcp_process+0xfc>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	7d1b      	ldrb	r3, [r3, #20]
 800e14a:	2b03      	cmp	r3, #3
 800e14c:	d008      	beq.n	800e160 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	8b5b      	ldrh	r3, [r3, #26]
 800e152:	f043 0302 	orr.w	r3, r3, #2
 800e156:	b29a      	uxth	r2, r3
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e15c:	2300      	movs	r3, #0
 800e15e:	e361      	b.n	800e824 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	8b5b      	ldrh	r3, [r3, #26]
 800e164:	f003 0310 	and.w	r3, r3, #16
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d103      	bne.n	800e174 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e16c:	4b70      	ldr	r3, [pc, #448]	; (800e330 <tcp_process+0x2cc>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2200      	movs	r2, #0
 800e178:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f001 fc2d 	bl	800f9e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7d1b      	ldrb	r3, [r3, #20]
 800e18e:	3b02      	subs	r3, #2
 800e190:	2b07      	cmp	r3, #7
 800e192:	f200 8337 	bhi.w	800e804 <tcp_process+0x7a0>
 800e196:	a201      	add	r2, pc, #4	; (adr r2, 800e19c <tcp_process+0x138>)
 800e198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e19c:	0800e1bd 	.word	0x0800e1bd
 800e1a0:	0800e3ed 	.word	0x0800e3ed
 800e1a4:	0800e565 	.word	0x0800e565
 800e1a8:	0800e58f 	.word	0x0800e58f
 800e1ac:	0800e6b3 	.word	0x0800e6b3
 800e1b0:	0800e565 	.word	0x0800e565
 800e1b4:	0800e73f 	.word	0x0800e73f
 800e1b8:	0800e7cf 	.word	0x0800e7cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e1bc:	4b57      	ldr	r3, [pc, #348]	; (800e31c <tcp_process+0x2b8>)
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	f003 0310 	and.w	r3, r3, #16
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f000 80e4 	beq.w	800e392 <tcp_process+0x32e>
 800e1ca:	4b54      	ldr	r3, [pc, #336]	; (800e31c <tcp_process+0x2b8>)
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	f003 0302 	and.w	r3, r3, #2
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	f000 80dd 	beq.w	800e392 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1dc:	1c5a      	adds	r2, r3, #1
 800e1de:	4b50      	ldr	r3, [pc, #320]	; (800e320 <tcp_process+0x2bc>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	f040 80d5 	bne.w	800e392 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e1e8:	4b4e      	ldr	r3, [pc, #312]	; (800e324 <tcp_process+0x2c0>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e1fa:	4b49      	ldr	r3, [pc, #292]	; (800e320 <tcp_process+0x2bc>)
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e202:	4b4c      	ldr	r3, [pc, #304]	; (800e334 <tcp_process+0x2d0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	89db      	ldrh	r3, [r3, #14]
 800e208:	b29a      	uxth	r2, r3
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e21c:	4b41      	ldr	r3, [pc, #260]	; (800e324 <tcp_process+0x2c0>)
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	1e5a      	subs	r2, r3, #1
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2204      	movs	r2, #4
 800e22a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3304      	adds	r3, #4
 800e234:	4618      	mov	r0, r3
 800e236:	f004 fb1f 	bl	8012878 <ip4_route>
 800e23a:	4601      	mov	r1, r0
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	461a      	mov	r2, r3
 800e242:	4620      	mov	r0, r4
 800e244:	f7ff f88e 	bl	800d364 <tcp_eff_send_mss_netif>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e254:	009a      	lsls	r2, r3, #2
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e25a:	005b      	lsls	r3, r3, #1
 800e25c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e260:	428b      	cmp	r3, r1
 800e262:	bf38      	it	cc
 800e264:	460b      	movcc	r3, r1
 800e266:	429a      	cmp	r2, r3
 800e268:	d204      	bcs.n	800e274 <tcp_process+0x210>
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	b29b      	uxth	r3, r3
 800e272:	e00d      	b.n	800e290 <tcp_process+0x22c>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e278:	005b      	lsls	r3, r3, #1
 800e27a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e27e:	4293      	cmp	r3, r2
 800e280:	d904      	bls.n	800e28c <tcp_process+0x228>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e286:	005b      	lsls	r3, r3, #1
 800e288:	b29b      	uxth	r3, r3
 800e28a:	e001      	b.n	800e290 <tcp_process+0x22c>
 800e28c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e290:	687a      	ldr	r2, [r7, #4]
 800e292:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d106      	bne.n	800e2ae <tcp_process+0x24a>
 800e2a0:	4b1b      	ldr	r3, [pc, #108]	; (800e310 <tcp_process+0x2ac>)
 800e2a2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e2a6:	4924      	ldr	r1, [pc, #144]	; (800e338 <tcp_process+0x2d4>)
 800e2a8:	481b      	ldr	r0, [pc, #108]	; (800e318 <tcp_process+0x2b4>)
 800e2aa:	f005 feb1 	bl	8014010 <iprintf>
        --pcb->snd_queuelen;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2b4:	3b01      	subs	r3, #1
 800e2b6:	b29a      	uxth	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d111      	bne.n	800e2ee <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d106      	bne.n	800e2e4 <tcp_process+0x280>
 800e2d6:	4b0e      	ldr	r3, [pc, #56]	; (800e310 <tcp_process+0x2ac>)
 800e2d8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e2dc:	4917      	ldr	r1, [pc, #92]	; (800e33c <tcp_process+0x2d8>)
 800e2de:	480e      	ldr	r0, [pc, #56]	; (800e318 <tcp_process+0x2b4>)
 800e2e0:	f005 fe96 	bl	8014010 <iprintf>
          pcb->unsent = rseg->next;
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	66da      	str	r2, [r3, #108]	; 0x6c
 800e2ec:	e003      	b.n	800e2f6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e2f6:	69f8      	ldr	r0, [r7, #28]
 800e2f8:	f7fe fd3d 	bl	800cd76 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e300:	2b00      	cmp	r3, #0
 800e302:	d11d      	bne.n	800e340 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e30a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e30c:	e01f      	b.n	800e34e <tcp_process+0x2ea>
 800e30e:	bf00      	nop
 800e310:	080168f8 	.word	0x080168f8
 800e314:	08016b30 	.word	0x08016b30
 800e318:	08016944 	.word	0x08016944
 800e31c:	20004a30 	.word	0x20004a30
 800e320:	20004a28 	.word	0x20004a28
 800e324:	20004a24 	.word	0x20004a24
 800e328:	08016b4c 	.word	0x08016b4c
 800e32c:	20004a31 	.word	0x20004a31
 800e330:	2000b948 	.word	0x2000b948
 800e334:	20004a14 	.word	0x20004a14
 800e338:	08016b6c 	.word	0x08016b6c
 800e33c:	08016b84 	.word	0x08016b84
        } else {
          pcb->rtime = 0;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2200      	movs	r2, #0
 800e34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <tcp_process+0x30a>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	6910      	ldr	r0, [r2, #16]
 800e362:	2200      	movs	r2, #0
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	4798      	blx	r3
 800e368:	4603      	mov	r3, r0
 800e36a:	76bb      	strb	r3, [r7, #26]
 800e36c:	e001      	b.n	800e372 <tcp_process+0x30e>
 800e36e:	2300      	movs	r3, #0
 800e370:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e372:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e376:	f113 0f0d 	cmn.w	r3, #13
 800e37a:	d102      	bne.n	800e382 <tcp_process+0x31e>
          return ERR_ABRT;
 800e37c:	f06f 030c 	mvn.w	r3, #12
 800e380:	e250      	b.n	800e824 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	8b5b      	ldrh	r3, [r3, #26]
 800e386:	f043 0302 	orr.w	r3, r3, #2
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e390:	e23a      	b.n	800e808 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e392:	4b9d      	ldr	r3, [pc, #628]	; (800e608 <tcp_process+0x5a4>)
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	f003 0310 	and.w	r3, r3, #16
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f000 8234 	beq.w	800e808 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3a0:	4b9a      	ldr	r3, [pc, #616]	; (800e60c <tcp_process+0x5a8>)
 800e3a2:	6819      	ldr	r1, [r3, #0]
 800e3a4:	4b9a      	ldr	r3, [pc, #616]	; (800e610 <tcp_process+0x5ac>)
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	4b9a      	ldr	r3, [pc, #616]	; (800e614 <tcp_process+0x5b0>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3b0:	4b99      	ldr	r3, [pc, #612]	; (800e618 <tcp_process+0x5b4>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3b4:	885b      	ldrh	r3, [r3, #2]
 800e3b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3b8:	4a97      	ldr	r2, [pc, #604]	; (800e618 <tcp_process+0x5b4>)
 800e3ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3bc:	8812      	ldrh	r2, [r2, #0]
 800e3be:	b292      	uxth	r2, r2
 800e3c0:	9202      	str	r2, [sp, #8]
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	4b95      	ldr	r3, [pc, #596]	; (800e61c <tcp_process+0x5b8>)
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	4b95      	ldr	r3, [pc, #596]	; (800e620 <tcp_process+0x5bc>)
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f002 fc83 	bl	8010cd8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	f200 8215 	bhi.w	800e808 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f002 fa4d 	bl	8010884 <tcp_rexmit_rto>
      break;
 800e3ea:	e20d      	b.n	800e808 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e3ec:	4b86      	ldr	r3, [pc, #536]	; (800e608 <tcp_process+0x5a4>)
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 80a1 	beq.w	800e53c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e3fa:	4b84      	ldr	r3, [pc, #528]	; (800e60c <tcp_process+0x5a8>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	3b01      	subs	r3, #1
 800e406:	2b00      	cmp	r3, #0
 800e408:	db7e      	blt.n	800e508 <tcp_process+0x4a4>
 800e40a:	4b80      	ldr	r3, [pc, #512]	; (800e60c <tcp_process+0x5a8>)
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e412:	1ad3      	subs	r3, r2, r3
 800e414:	2b00      	cmp	r3, #0
 800e416:	dc77      	bgt.n	800e508 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2204      	movs	r2, #4
 800e41c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e426:	23fa      	movs	r3, #250	; 0xfa
 800e428:	76bb      	strb	r3, [r7, #26]
 800e42a:	e01d      	b.n	800e468 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e430:	699b      	ldr	r3, [r3, #24]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d106      	bne.n	800e444 <tcp_process+0x3e0>
 800e436:	4b7b      	ldr	r3, [pc, #492]	; (800e624 <tcp_process+0x5c0>)
 800e438:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e43c:	497a      	ldr	r1, [pc, #488]	; (800e628 <tcp_process+0x5c4>)
 800e43e:	487b      	ldr	r0, [pc, #492]	; (800e62c <tcp_process+0x5c8>)
 800e440:	f005 fde6 	bl	8014010 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e448:	699b      	ldr	r3, [r3, #24]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d00a      	beq.n	800e464 <tcp_process+0x400>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	6910      	ldr	r0, [r2, #16]
 800e458:	2200      	movs	r2, #0
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	4798      	blx	r3
 800e45e:	4603      	mov	r3, r0
 800e460:	76bb      	strb	r3, [r7, #26]
 800e462:	e001      	b.n	800e468 <tcp_process+0x404>
 800e464:	23f0      	movs	r3, #240	; 0xf0
 800e466:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e468:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d00a      	beq.n	800e486 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e470:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e474:	f113 0f0d 	cmn.w	r3, #13
 800e478:	d002      	beq.n	800e480 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7fd ff90 	bl	800c3a0 <tcp_abort>
            }
            return ERR_ABRT;
 800e480:	f06f 030c 	mvn.w	r3, #12
 800e484:	e1ce      	b.n	800e824 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fae0 	bl	800ea4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e48c:	4b68      	ldr	r3, [pc, #416]	; (800e630 <tcp_process+0x5cc>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d005      	beq.n	800e4a0 <tcp_process+0x43c>
            recv_acked--;
 800e494:	4b66      	ldr	r3, [pc, #408]	; (800e630 <tcp_process+0x5cc>)
 800e496:	881b      	ldrh	r3, [r3, #0]
 800e498:	3b01      	subs	r3, #1
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	4b64      	ldr	r3, [pc, #400]	; (800e630 <tcp_process+0x5cc>)
 800e49e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4a4:	009a      	lsls	r2, r3, #2
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4aa:	005b      	lsls	r3, r3, #1
 800e4ac:	f241 111c 	movw	r1, #4380	; 0x111c
 800e4b0:	428b      	cmp	r3, r1
 800e4b2:	bf38      	it	cc
 800e4b4:	460b      	movcc	r3, r1
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d204      	bcs.n	800e4c4 <tcp_process+0x460>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	e00d      	b.n	800e4e0 <tcp_process+0x47c>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	f241 121c 	movw	r2, #4380	; 0x111c
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d904      	bls.n	800e4dc <tcp_process+0x478>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	b29b      	uxth	r3, r3
 800e4da:	e001      	b.n	800e4e0 <tcp_process+0x47c>
 800e4dc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e4e6:	4b53      	ldr	r3, [pc, #332]	; (800e634 <tcp_process+0x5d0>)
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	f003 0320 	and.w	r3, r3, #32
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d037      	beq.n	800e562 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8b5b      	ldrh	r3, [r3, #26]
 800e4f6:	f043 0302 	orr.w	r3, r3, #2
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2207      	movs	r2, #7
 800e504:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e506:	e02c      	b.n	800e562 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e508:	4b40      	ldr	r3, [pc, #256]	; (800e60c <tcp_process+0x5a8>)
 800e50a:	6819      	ldr	r1, [r3, #0]
 800e50c:	4b40      	ldr	r3, [pc, #256]	; (800e610 <tcp_process+0x5ac>)
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	461a      	mov	r2, r3
 800e512:	4b40      	ldr	r3, [pc, #256]	; (800e614 <tcp_process+0x5b0>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e518:	4b3f      	ldr	r3, [pc, #252]	; (800e618 <tcp_process+0x5b4>)
 800e51a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e51c:	885b      	ldrh	r3, [r3, #2]
 800e51e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e520:	4a3d      	ldr	r2, [pc, #244]	; (800e618 <tcp_process+0x5b4>)
 800e522:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e524:	8812      	ldrh	r2, [r2, #0]
 800e526:	b292      	uxth	r2, r2
 800e528:	9202      	str	r2, [sp, #8]
 800e52a:	9301      	str	r3, [sp, #4]
 800e52c:	4b3b      	ldr	r3, [pc, #236]	; (800e61c <tcp_process+0x5b8>)
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	4b3b      	ldr	r3, [pc, #236]	; (800e620 <tcp_process+0x5bc>)
 800e532:	4602      	mov	r2, r0
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f002 fbcf 	bl	8010cd8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e53a:	e167      	b.n	800e80c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e53c:	4b32      	ldr	r3, [pc, #200]	; (800e608 <tcp_process+0x5a4>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	f003 0302 	and.w	r3, r3, #2
 800e544:	2b00      	cmp	r3, #0
 800e546:	f000 8161 	beq.w	800e80c <tcp_process+0x7a8>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54e:	1e5a      	subs	r2, r3, #1
 800e550:	4b30      	ldr	r3, [pc, #192]	; (800e614 <tcp_process+0x5b0>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	429a      	cmp	r2, r3
 800e556:	f040 8159 	bne.w	800e80c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f002 f9b4 	bl	80108c8 <tcp_rexmit>
      break;
 800e560:	e154      	b.n	800e80c <tcp_process+0x7a8>
 800e562:	e153      	b.n	800e80c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fa71 	bl	800ea4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e56a:	4b32      	ldr	r3, [pc, #200]	; (800e634 <tcp_process+0x5d0>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	f003 0320 	and.w	r3, r3, #32
 800e572:	2b00      	cmp	r3, #0
 800e574:	f000 814c 	beq.w	800e810 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	8b5b      	ldrh	r3, [r3, #26]
 800e57c:	f043 0302 	orr.w	r3, r3, #2
 800e580:	b29a      	uxth	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2207      	movs	r2, #7
 800e58a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e58c:	e140      	b.n	800e810 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 fa5c 	bl	800ea4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e594:	4b27      	ldr	r3, [pc, #156]	; (800e634 <tcp_process+0x5d0>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	f003 0320 	and.w	r3, r3, #32
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d071      	beq.n	800e684 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5a0:	4b19      	ldr	r3, [pc, #100]	; (800e608 <tcp_process+0x5a4>)
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 0310 	and.w	r3, r3, #16
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d060      	beq.n	800e66e <tcp_process+0x60a>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5b0:	4b16      	ldr	r3, [pc, #88]	; (800e60c <tcp_process+0x5a8>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d15a      	bne.n	800e66e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d156      	bne.n	800e66e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	8b5b      	ldrh	r3, [r3, #26]
 800e5c4:	f043 0302 	orr.w	r3, r3, #2
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fe fdbe 	bl	800d150 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e5d4:	4b18      	ldr	r3, [pc, #96]	; (800e638 <tcp_process+0x5d4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d105      	bne.n	800e5ea <tcp_process+0x586>
 800e5de:	4b16      	ldr	r3, [pc, #88]	; (800e638 <tcp_process+0x5d4>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	4a14      	ldr	r2, [pc, #80]	; (800e638 <tcp_process+0x5d4>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	e02e      	b.n	800e648 <tcp_process+0x5e4>
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <tcp_process+0x5d4>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	617b      	str	r3, [r7, #20]
 800e5f0:	e027      	b.n	800e642 <tcp_process+0x5de>
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	68db      	ldr	r3, [r3, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d11f      	bne.n	800e63c <tcp_process+0x5d8>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	68da      	ldr	r2, [r3, #12]
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	60da      	str	r2, [r3, #12]
 800e604:	e020      	b.n	800e648 <tcp_process+0x5e4>
 800e606:	bf00      	nop
 800e608:	20004a30 	.word	0x20004a30
 800e60c:	20004a28 	.word	0x20004a28
 800e610:	20004a2e 	.word	0x20004a2e
 800e614:	20004a24 	.word	0x20004a24
 800e618:	20004a14 	.word	0x20004a14
 800e61c:	20008240 	.word	0x20008240
 800e620:	20008244 	.word	0x20008244
 800e624:	080168f8 	.word	0x080168f8
 800e628:	08016b98 	.word	0x08016b98
 800e62c:	08016944 	.word	0x08016944
 800e630:	20004a2c 	.word	0x20004a2c
 800e634:	20004a31 	.word	0x20004a31
 800e638:	2000b944 	.word	0x2000b944
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1d4      	bne.n	800e5f2 <tcp_process+0x58e>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	60da      	str	r2, [r3, #12]
 800e64e:	4b77      	ldr	r3, [pc, #476]	; (800e82c <tcp_process+0x7c8>)
 800e650:	2201      	movs	r2, #1
 800e652:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	220a      	movs	r2, #10
 800e658:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e65a:	4b75      	ldr	r3, [pc, #468]	; (800e830 <tcp_process+0x7cc>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	60da      	str	r2, [r3, #12]
 800e662:	4a73      	ldr	r2, [pc, #460]	; (800e830 <tcp_process+0x7cc>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6013      	str	r3, [r2, #0]
 800e668:	f002 fcf8 	bl	801105c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e66c:	e0d2      	b.n	800e814 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	8b5b      	ldrh	r3, [r3, #26]
 800e672:	f043 0302 	orr.w	r3, r3, #2
 800e676:	b29a      	uxth	r2, r3
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2208      	movs	r2, #8
 800e680:	751a      	strb	r2, [r3, #20]
      break;
 800e682:	e0c7      	b.n	800e814 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e684:	4b6b      	ldr	r3, [pc, #428]	; (800e834 <tcp_process+0x7d0>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f003 0310 	and.w	r3, r3, #16
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 80c1 	beq.w	800e814 <tcp_process+0x7b0>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e696:	4b68      	ldr	r3, [pc, #416]	; (800e838 <tcp_process+0x7d4>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	f040 80ba 	bne.w	800e814 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f040 80b5 	bne.w	800e814 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2206      	movs	r2, #6
 800e6ae:	751a      	strb	r2, [r3, #20]
      break;
 800e6b0:	e0b0      	b.n	800e814 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f9ca 	bl	800ea4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e6b8:	4b60      	ldr	r3, [pc, #384]	; (800e83c <tcp_process+0x7d8>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	f003 0320 	and.w	r3, r3, #32
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 80a9 	beq.w	800e818 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ca:	f043 0302 	orr.w	r3, r3, #2
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7fe fd3b 	bl	800d150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e6da:	4b59      	ldr	r3, [pc, #356]	; (800e840 <tcp_process+0x7dc>)
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d105      	bne.n	800e6f0 <tcp_process+0x68c>
 800e6e4:	4b56      	ldr	r3, [pc, #344]	; (800e840 <tcp_process+0x7dc>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	4a55      	ldr	r2, [pc, #340]	; (800e840 <tcp_process+0x7dc>)
 800e6ec:	6013      	str	r3, [r2, #0]
 800e6ee:	e013      	b.n	800e718 <tcp_process+0x6b4>
 800e6f0:	4b53      	ldr	r3, [pc, #332]	; (800e840 <tcp_process+0x7dc>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	613b      	str	r3, [r7, #16]
 800e6f6:	e00c      	b.n	800e712 <tcp_process+0x6ae>
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	687a      	ldr	r2, [r7, #4]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d104      	bne.n	800e70c <tcp_process+0x6a8>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	68da      	ldr	r2, [r3, #12]
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	60da      	str	r2, [r3, #12]
 800e70a:	e005      	b.n	800e718 <tcp_process+0x6b4>
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	613b      	str	r3, [r7, #16]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d1ef      	bne.n	800e6f8 <tcp_process+0x694>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	60da      	str	r2, [r3, #12]
 800e71e:	4b43      	ldr	r3, [pc, #268]	; (800e82c <tcp_process+0x7c8>)
 800e720:	2201      	movs	r2, #1
 800e722:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	220a      	movs	r2, #10
 800e728:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e72a:	4b41      	ldr	r3, [pc, #260]	; (800e830 <tcp_process+0x7cc>)
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	60da      	str	r2, [r3, #12]
 800e732:	4a3f      	ldr	r2, [pc, #252]	; (800e830 <tcp_process+0x7cc>)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6013      	str	r3, [r2, #0]
 800e738:	f002 fc90 	bl	801105c <tcp_timer_needed>
      }
      break;
 800e73c:	e06c      	b.n	800e818 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f984 	bl	800ea4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e744:	4b3b      	ldr	r3, [pc, #236]	; (800e834 <tcp_process+0x7d0>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	f003 0310 	and.w	r3, r3, #16
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d065      	beq.n	800e81c <tcp_process+0x7b8>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e754:	4b38      	ldr	r3, [pc, #224]	; (800e838 <tcp_process+0x7d4>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d15f      	bne.n	800e81c <tcp_process+0x7b8>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e760:	2b00      	cmp	r3, #0
 800e762:	d15b      	bne.n	800e81c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7fe fcf3 	bl	800d150 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e76a:	4b35      	ldr	r3, [pc, #212]	; (800e840 <tcp_process+0x7dc>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	687a      	ldr	r2, [r7, #4]
 800e770:	429a      	cmp	r2, r3
 800e772:	d105      	bne.n	800e780 <tcp_process+0x71c>
 800e774:	4b32      	ldr	r3, [pc, #200]	; (800e840 <tcp_process+0x7dc>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68db      	ldr	r3, [r3, #12]
 800e77a:	4a31      	ldr	r2, [pc, #196]	; (800e840 <tcp_process+0x7dc>)
 800e77c:	6013      	str	r3, [r2, #0]
 800e77e:	e013      	b.n	800e7a8 <tcp_process+0x744>
 800e780:	4b2f      	ldr	r3, [pc, #188]	; (800e840 <tcp_process+0x7dc>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	e00c      	b.n	800e7a2 <tcp_process+0x73e>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d104      	bne.n	800e79c <tcp_process+0x738>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68da      	ldr	r2, [r3, #12]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	60da      	str	r2, [r3, #12]
 800e79a:	e005      	b.n	800e7a8 <tcp_process+0x744>
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1ef      	bne.n	800e788 <tcp_process+0x724>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	60da      	str	r2, [r3, #12]
 800e7ae:	4b1f      	ldr	r3, [pc, #124]	; (800e82c <tcp_process+0x7c8>)
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	220a      	movs	r2, #10
 800e7b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e7ba:	4b1d      	ldr	r3, [pc, #116]	; (800e830 <tcp_process+0x7cc>)
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	60da      	str	r2, [r3, #12]
 800e7c2:	4a1b      	ldr	r2, [pc, #108]	; (800e830 <tcp_process+0x7cc>)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	f002 fc48 	bl	801105c <tcp_timer_needed>
      }
      break;
 800e7cc:	e026      	b.n	800e81c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f93c 	bl	800ea4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e7d4:	4b17      	ldr	r3, [pc, #92]	; (800e834 <tcp_process+0x7d0>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 0310 	and.w	r3, r3, #16
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d01f      	beq.n	800e820 <tcp_process+0x7bc>
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e4:	4b14      	ldr	r3, [pc, #80]	; (800e838 <tcp_process+0x7d4>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d119      	bne.n	800e820 <tcp_process+0x7bc>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d115      	bne.n	800e820 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e7f4:	4b11      	ldr	r3, [pc, #68]	; (800e83c <tcp_process+0x7d8>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f043 0310 	orr.w	r3, r3, #16
 800e7fc:	b2da      	uxtb	r2, r3
 800e7fe:	4b0f      	ldr	r3, [pc, #60]	; (800e83c <tcp_process+0x7d8>)
 800e800:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e802:	e00d      	b.n	800e820 <tcp_process+0x7bc>
    default:
      break;
 800e804:	bf00      	nop
 800e806:	e00c      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e808:	bf00      	nop
 800e80a:	e00a      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e80c:	bf00      	nop
 800e80e:	e008      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e810:	bf00      	nop
 800e812:	e006      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e814:	bf00      	nop
 800e816:	e004      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e818:	bf00      	nop
 800e81a:	e002      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e81c:	bf00      	nop
 800e81e:	e000      	b.n	800e822 <tcp_process+0x7be>
      break;
 800e820:	bf00      	nop
  }
  return ERR_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3724      	adds	r7, #36	; 0x24
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd90      	pop	{r4, r7, pc}
 800e82c:	2000b940 	.word	0x2000b940
 800e830:	2000b954 	.word	0x2000b954
 800e834:	20004a30 	.word	0x20004a30
 800e838:	20004a28 	.word	0x20004a28
 800e83c:	20004a31 	.word	0x20004a31
 800e840:	2000b944 	.word	0x2000b944

0800e844 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e844:	b590      	push	{r4, r7, lr}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d106      	bne.n	800e862 <tcp_oos_insert_segment+0x1e>
 800e854:	4b3b      	ldr	r3, [pc, #236]	; (800e944 <tcp_oos_insert_segment+0x100>)
 800e856:	f240 421f 	movw	r2, #1055	; 0x41f
 800e85a:	493b      	ldr	r1, [pc, #236]	; (800e948 <tcp_oos_insert_segment+0x104>)
 800e85c:	483b      	ldr	r0, [pc, #236]	; (800e94c <tcp_oos_insert_segment+0x108>)
 800e85e:	f005 fbd7 	bl	8014010 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	899b      	ldrh	r3, [r3, #12]
 800e868:	b29b      	uxth	r3, r3
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fb fc58 	bl	800a120 <lwip_htons>
 800e870:	4603      	mov	r3, r0
 800e872:	b2db      	uxtb	r3, r3
 800e874:	f003 0301 	and.w	r3, r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d028      	beq.n	800e8ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e87c:	6838      	ldr	r0, [r7, #0]
 800e87e:	f7fe fa65 	bl	800cd4c <tcp_segs_free>
    next = NULL;
 800e882:	2300      	movs	r3, #0
 800e884:	603b      	str	r3, [r7, #0]
 800e886:	e056      	b.n	800e936 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	899b      	ldrh	r3, [r3, #12]
 800e88e:	b29b      	uxth	r3, r3
 800e890:	4618      	mov	r0, r3
 800e892:	f7fb fc45 	bl	800a120 <lwip_htons>
 800e896:	4603      	mov	r3, r0
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	f003 0301 	and.w	r3, r3, #1
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00d      	beq.n	800e8be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	899b      	ldrh	r3, [r3, #12]
 800e8a8:	b29c      	uxth	r4, r3
 800e8aa:	2001      	movs	r0, #1
 800e8ac:	f7fb fc38 	bl	800a120 <lwip_htons>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	4322      	orrs	r2, r4
 800e8ba:	b292      	uxth	r2, r2
 800e8bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7fe fa54 	bl	800cd76 <tcp_seg_free>
    while (next &&
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d00e      	beq.n	800e8f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	891b      	ldrh	r3, [r3, #8]
 800e8d8:	461a      	mov	r2, r3
 800e8da:	4b1d      	ldr	r3, [pc, #116]	; (800e950 <tcp_oos_insert_segment+0x10c>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	441a      	add	r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	6839      	ldr	r1, [r7, #0]
 800e8e8:	8909      	ldrh	r1, [r1, #8]
 800e8ea:	440b      	add	r3, r1
 800e8ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	daca      	bge.n	800e888 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d01e      	beq.n	800e936 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	891b      	ldrh	r3, [r3, #8]
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4b14      	ldr	r3, [pc, #80]	; (800e950 <tcp_oos_insert_segment+0x10c>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	441a      	add	r2, r3
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dd12      	ble.n	800e936 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	b29a      	uxth	r2, r3
 800e918:	4b0d      	ldr	r3, [pc, #52]	; (800e950 <tcp_oos_insert_segment+0x10c>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	b29a      	uxth	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	685a      	ldr	r2, [r3, #4]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	891b      	ldrh	r3, [r3, #8]
 800e92e:	4619      	mov	r1, r3
 800e930:	4610      	mov	r0, r2
 800e932:	f7fc fe1b 	bl	800b56c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	683a      	ldr	r2, [r7, #0]
 800e93a:	601a      	str	r2, [r3, #0]
}
 800e93c:	bf00      	nop
 800e93e:	3714      	adds	r7, #20
 800e940:	46bd      	mov	sp, r7
 800e942:	bd90      	pop	{r4, r7, pc}
 800e944:	080168f8 	.word	0x080168f8
 800e948:	08016bb8 	.word	0x08016bb8
 800e94c:	08016944 	.word	0x08016944
 800e950:	20004a24 	.word	0x20004a24

0800e954 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e954:	b5b0      	push	{r4, r5, r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	60f8      	str	r0, [r7, #12]
 800e95c:	60b9      	str	r1, [r7, #8]
 800e95e:	607a      	str	r2, [r7, #4]
 800e960:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e962:	e03e      	b.n	800e9e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	f7fd f80e 	bl	800b994 <pbuf_clen>
 800e978:	4603      	mov	r3, r0
 800e97a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e982:	8a7a      	ldrh	r2, [r7, #18]
 800e984:	429a      	cmp	r2, r3
 800e986:	d906      	bls.n	800e996 <tcp_free_acked_segments+0x42>
 800e988:	4b2a      	ldr	r3, [pc, #168]	; (800ea34 <tcp_free_acked_segments+0xe0>)
 800e98a:	f240 4257 	movw	r2, #1111	; 0x457
 800e98e:	492a      	ldr	r1, [pc, #168]	; (800ea38 <tcp_free_acked_segments+0xe4>)
 800e990:	482a      	ldr	r0, [pc, #168]	; (800ea3c <tcp_free_acked_segments+0xe8>)
 800e992:	f005 fb3d 	bl	8014010 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e99c:	8a7b      	ldrh	r3, [r7, #18]
 800e99e:	1ad3      	subs	r3, r2, r3
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	891a      	ldrh	r2, [r3, #8]
 800e9ac:	4b24      	ldr	r3, [pc, #144]	; (800ea40 <tcp_free_acked_segments+0xec>)
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	4b22      	ldr	r3, [pc, #136]	; (800ea40 <tcp_free_acked_segments+0xec>)
 800e9b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e9b8:	6978      	ldr	r0, [r7, #20]
 800e9ba:	f7fe f9dc 	bl	800cd76 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d00c      	beq.n	800e9e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d109      	bne.n	800e9e2 <tcp_free_acked_segments+0x8e>
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d106      	bne.n	800e9e2 <tcp_free_acked_segments+0x8e>
 800e9d4:	4b17      	ldr	r3, [pc, #92]	; (800ea34 <tcp_free_acked_segments+0xe0>)
 800e9d6:	f240 4261 	movw	r2, #1121	; 0x461
 800e9da:	491a      	ldr	r1, [pc, #104]	; (800ea44 <tcp_free_acked_segments+0xf0>)
 800e9dc:	4817      	ldr	r0, [pc, #92]	; (800ea3c <tcp_free_acked_segments+0xe8>)
 800e9de:	f005 fb17 	bl	8014010 <iprintf>
  while (seg_list != NULL &&
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d020      	beq.n	800ea2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	685b      	ldr	r3, [r3, #4]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fb fbab 	bl	800a14a <lwip_htonl>
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	891b      	ldrh	r3, [r3, #8]
 800e9fa:	461d      	mov	r5, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	899b      	ldrh	r3, [r3, #12]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fb fb8b 	bl	800a120 <lwip_htons>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	f003 0303 	and.w	r3, r3, #3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d001      	beq.n	800ea1a <tcp_free_acked_segments+0xc6>
 800ea16:	2301      	movs	r3, #1
 800ea18:	e000      	b.n	800ea1c <tcp_free_acked_segments+0xc8>
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	442b      	add	r3, r5
 800ea1e:	18e2      	adds	r2, r4, r3
 800ea20:	4b09      	ldr	r3, [pc, #36]	; (800ea48 <tcp_free_acked_segments+0xf4>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	dd9c      	ble.n	800e964 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ea2a:	68bb      	ldr	r3, [r7, #8]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3718      	adds	r7, #24
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bdb0      	pop	{r4, r5, r7, pc}
 800ea34:	080168f8 	.word	0x080168f8
 800ea38:	08016be0 	.word	0x08016be0
 800ea3c:	08016944 	.word	0x08016944
 800ea40:	20004a2c 	.word	0x20004a2c
 800ea44:	08016c08 	.word	0x08016c08
 800ea48:	20004a28 	.word	0x20004a28

0800ea4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ea4c:	b5b0      	push	{r4, r5, r7, lr}
 800ea4e:	b094      	sub	sp, #80	; 0x50
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ea54:	2300      	movs	r3, #0
 800ea56:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d106      	bne.n	800ea6c <tcp_receive+0x20>
 800ea5e:	4ba6      	ldr	r3, [pc, #664]	; (800ecf8 <tcp_receive+0x2ac>)
 800ea60:	f240 427b 	movw	r2, #1147	; 0x47b
 800ea64:	49a5      	ldr	r1, [pc, #660]	; (800ecfc <tcp_receive+0x2b0>)
 800ea66:	48a6      	ldr	r0, [pc, #664]	; (800ed00 <tcp_receive+0x2b4>)
 800ea68:	f005 fad2 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	7d1b      	ldrb	r3, [r3, #20]
 800ea70:	2b03      	cmp	r3, #3
 800ea72:	d806      	bhi.n	800ea82 <tcp_receive+0x36>
 800ea74:	4ba0      	ldr	r3, [pc, #640]	; (800ecf8 <tcp_receive+0x2ac>)
 800ea76:	f240 427c 	movw	r2, #1148	; 0x47c
 800ea7a:	49a2      	ldr	r1, [pc, #648]	; (800ed04 <tcp_receive+0x2b8>)
 800ea7c:	48a0      	ldr	r0, [pc, #640]	; (800ed00 <tcp_receive+0x2b4>)
 800ea7e:	f005 fac7 	bl	8014010 <iprintf>

  if (flags & TCP_ACK) {
 800ea82:	4ba1      	ldr	r3, [pc, #644]	; (800ed08 <tcp_receive+0x2bc>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	f003 0310 	and.w	r3, r3, #16
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 8263 	beq.w	800ef56 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea96:	461a      	mov	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9c:	4413      	add	r3, r2
 800ea9e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaa4:	4b99      	ldr	r3, [pc, #612]	; (800ed0c <tcp_receive+0x2c0>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	db1b      	blt.n	800eae6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eab2:	4b96      	ldr	r3, [pc, #600]	; (800ed0c <tcp_receive+0x2c0>)
 800eab4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d106      	bne.n	800eac8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eabe:	4b94      	ldr	r3, [pc, #592]	; (800ed10 <tcp_receive+0x2c4>)
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	db0e      	blt.n	800eae6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eacc:	4b90      	ldr	r3, [pc, #576]	; (800ed10 <tcp_receive+0x2c4>)
 800eace:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d125      	bne.n	800eb20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ead4:	4b8f      	ldr	r3, [pc, #572]	; (800ed14 <tcp_receive+0x2c8>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	89db      	ldrh	r3, [r3, #14]
 800eada:	b29a      	uxth	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d91c      	bls.n	800eb20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eae6:	4b8b      	ldr	r3, [pc, #556]	; (800ed14 <tcp_receive+0x2c8>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	89db      	ldrh	r3, [r3, #14]
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d205      	bcs.n	800eb10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eb10:	4b7e      	ldr	r3, [pc, #504]	; (800ed0c <tcp_receive+0x2c0>)
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800eb18:	4b7d      	ldr	r3, [pc, #500]	; (800ed10 <tcp_receive+0x2c4>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eb20:	4b7b      	ldr	r3, [pc, #492]	; (800ed10 <tcp_receive+0x2c4>)
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb28:	1ad3      	subs	r3, r2, r3
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	dc58      	bgt.n	800ebe0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eb2e:	4b7a      	ldr	r3, [pc, #488]	; (800ed18 <tcp_receive+0x2cc>)
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d14b      	bne.n	800ebce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800eb40:	4413      	add	r3, r2
 800eb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d142      	bne.n	800ebce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	db3d      	blt.n	800ebce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb56:	4b6e      	ldr	r3, [pc, #440]	; (800ed10 <tcp_receive+0x2c4>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d137      	bne.n	800ebce <tcp_receive+0x182>
              found_dupack = 1;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb68:	2bff      	cmp	r3, #255	; 0xff
 800eb6a:	d007      	beq.n	800eb7c <tcp_receive+0x130>
                ++pcb->dupacks;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb72:	3301      	adds	r3, #1
 800eb74:	b2da      	uxtb	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb82:	2b03      	cmp	r3, #3
 800eb84:	d91b      	bls.n	800ebbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb90:	4413      	add	r3, r2
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d30a      	bcc.n	800ebb4 <tcp_receive+0x168>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eba8:	4413      	add	r3, r2
 800ebaa:	b29a      	uxth	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ebb2:	e004      	b.n	800ebbe <tcp_receive+0x172>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d902      	bls.n	800ebce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 fee9 	bl	80109a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ebce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	f040 8160 	bne.w	800ee96 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ebde:	e15a      	b.n	800ee96 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebe0:	4b4b      	ldr	r3, [pc, #300]	; (800ed10 <tcp_receive+0x2c4>)
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe8:	1ad3      	subs	r3, r2, r3
 800ebea:	3b01      	subs	r3, #1
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f2c0 814d 	blt.w	800ee8c <tcp_receive+0x440>
 800ebf2:	4b47      	ldr	r3, [pc, #284]	; (800ed10 <tcp_receive+0x2c4>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	f300 8145 	bgt.w	800ee8c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	8b5b      	ldrh	r3, [r3, #26]
 800ec06:	f003 0304 	and.w	r3, r3, #4
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d010      	beq.n	800ec30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	8b5b      	ldrh	r3, [r3, #26]
 800ec12:	f023 0304 	bic.w	r3, r3, #4
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec3e:	10db      	asrs	r3, r3, #3
 800ec40:	b21b      	sxth	r3, r3
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	4413      	add	r3, r2
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	b21a      	sxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ec58:	4b2d      	ldr	r3, [pc, #180]	; (800ed10 <tcp_receive+0x2c4>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ec70:	4b27      	ldr	r3, [pc, #156]	; (800ed10 <tcp_receive+0x2c4>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	7d1b      	ldrb	r3, [r3, #20]
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	f240 8096 	bls.w	800edae <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d244      	bcs.n	800ed1c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	8b5b      	ldrh	r3, [r3, #26]
 800ec96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <tcp_receive+0x256>
 800ec9e:	2301      	movs	r3, #1
 800eca0:	e000      	b.n	800eca4 <tcp_receive+0x258>
 800eca2:	2302      	movs	r3, #2
 800eca4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800eca8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecb2:	fb12 f303 	smulbb	r3, r2, r3
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	bf28      	it	cs
 800ecbe:	4613      	movcs	r3, r2
 800ecc0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ecca:	4413      	add	r3, r2
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d309      	bcc.n	800ecec <tcp_receive+0x2a0>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ece0:	4413      	add	r3, r2
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ecea:	e060      	b.n	800edae <tcp_receive+0x362>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ecf6:	e05a      	b.n	800edae <tcp_receive+0x362>
 800ecf8:	080168f8 	.word	0x080168f8
 800ecfc:	08016c28 	.word	0x08016c28
 800ed00:	08016944 	.word	0x08016944
 800ed04:	08016c44 	.word	0x08016c44
 800ed08:	20004a30 	.word	0x20004a30
 800ed0c:	20004a24 	.word	0x20004a24
 800ed10:	20004a28 	.word	0x20004a28
 800ed14:	20004a14 	.word	0x20004a14
 800ed18:	20004a2e 	.word	0x20004a2e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed24:	4413      	add	r3, r2
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d309      	bcc.n	800ed46 <tcp_receive+0x2fa>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed3a:	4413      	add	r3, r2
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ed44:	e004      	b.n	800ed50 <tcp_receive+0x304>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d326      	bcc.n	800edae <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed80:	4413      	add	r3, r2
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d30a      	bcc.n	800eda4 <tcp_receive+0x358>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed98:	4413      	add	r3, r2
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eda2:	e004      	b.n	800edae <tcp_receive+0x362>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edb6:	4a98      	ldr	r2, [pc, #608]	; (800f018 <tcp_receive+0x5cc>)
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff fdcb 	bl	800e954 <tcp_free_acked_segments>
 800edbe:	4602      	mov	r2, r0
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edcc:	4a93      	ldr	r2, [pc, #588]	; (800f01c <tcp_receive+0x5d0>)
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f7ff fdc0 	bl	800e954 <tcp_free_acked_segments>
 800edd4:	4602      	mov	r2, r0
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d104      	bne.n	800edec <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ede8:	861a      	strh	r2, [r3, #48]	; 0x30
 800edea:	e002      	b.n	800edf2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2200      	movs	r2, #0
 800edf0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d103      	bne.n	800ee08 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ee0e:	4b84      	ldr	r3, [pc, #528]	; (800f020 <tcp_receive+0x5d4>)
 800ee10:	881b      	ldrh	r3, [r3, #0]
 800ee12:	4413      	add	r3, r2
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	8b5b      	ldrh	r3, [r3, #26]
 800ee20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d035      	beq.n	800ee94 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d118      	bne.n	800ee62 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00c      	beq.n	800ee52 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fb f980 	bl	800a14a <lwip_htonl>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	dc20      	bgt.n	800ee94 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	8b5b      	ldrh	r3, [r3, #26]
 800ee56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee60:	e018      	b.n	800ee94 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7fb f96b 	bl	800a14a <lwip_htonl>
 800ee74:	4603      	mov	r3, r0
 800ee76:	1ae3      	subs	r3, r4, r3
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dc0b      	bgt.n	800ee94 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	8b5b      	ldrh	r3, [r3, #26]
 800ee80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee8a:	e003      	b.n	800ee94 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f001 ff75 	bl	8010d7c <tcp_send_empty_ack>
 800ee92:	e000      	b.n	800ee96 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee94:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d05b      	beq.n	800ef56 <tcp_receive+0x50a>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eea2:	4b60      	ldr	r3, [pc, #384]	; (800f024 <tcp_receive+0x5d8>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	1ad3      	subs	r3, r2, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	da54      	bge.n	800ef56 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800eeac:	4b5e      	ldr	r3, [pc, #376]	; (800f028 <tcp_receive+0x5dc>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb6:	b29b      	uxth	r3, r3
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eec0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eeca:	10db      	asrs	r3, r3, #3
 800eecc:	b21b      	sxth	r3, r3
 800eece:	b29b      	uxth	r3, r3
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eede:	b29a      	uxth	r2, r3
 800eee0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eee4:	4413      	add	r3, r2
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	b21a      	sxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800eeee:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	da05      	bge.n	800ef02 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800eef6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eefa:	425b      	negs	r3, r3
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ef02:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef0c:	109b      	asrs	r3, r3, #2
 800ef0e:	b21b      	sxth	r3, r3
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	1ad3      	subs	r3, r2, r3
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef26:	4413      	add	r3, r2
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	b21a      	sxth	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef36:	10db      	asrs	r3, r3, #3
 800ef38:	b21b      	sxth	r3, r3
 800ef3a:	b29a      	uxth	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	4413      	add	r3, r2
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	b21a      	sxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ef56:	4b35      	ldr	r3, [pc, #212]	; (800f02c <tcp_receive+0x5e0>)
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	f000 84e1 	beq.w	800f922 <tcp_receive+0xed6>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b06      	cmp	r3, #6
 800ef66:	f200 84dc 	bhi.w	800f922 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef6e:	4b30      	ldr	r3, [pc, #192]	; (800f030 <tcp_receive+0x5e4>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	3b01      	subs	r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f2c0 808e 	blt.w	800f098 <tcp_receive+0x64c>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef80:	4b2a      	ldr	r3, [pc, #168]	; (800f02c <tcp_receive+0x5e0>)
 800ef82:	881b      	ldrh	r3, [r3, #0]
 800ef84:	4619      	mov	r1, r3
 800ef86:	4b2a      	ldr	r3, [pc, #168]	; (800f030 <tcp_receive+0x5e4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	440b      	add	r3, r1
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	3301      	adds	r3, #1
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	f300 8081 	bgt.w	800f098 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ef96:	4b27      	ldr	r3, [pc, #156]	; (800f034 <tcp_receive+0x5e8>)
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa0:	4b23      	ldr	r3, [pc, #140]	; (800f030 <tcp_receive+0x5e4>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800efa8:	4b22      	ldr	r3, [pc, #136]	; (800f034 <tcp_receive+0x5e8>)
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d106      	bne.n	800efbe <tcp_receive+0x572>
 800efb0:	4b21      	ldr	r3, [pc, #132]	; (800f038 <tcp_receive+0x5ec>)
 800efb2:	f240 5294 	movw	r2, #1428	; 0x594
 800efb6:	4921      	ldr	r1, [pc, #132]	; (800f03c <tcp_receive+0x5f0>)
 800efb8:	4821      	ldr	r0, [pc, #132]	; (800f040 <tcp_receive+0x5f4>)
 800efba:	f005 f829 	bl	8014010 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d906      	bls.n	800efd6 <tcp_receive+0x58a>
 800efc8:	4b1b      	ldr	r3, [pc, #108]	; (800f038 <tcp_receive+0x5ec>)
 800efca:	f240 5295 	movw	r2, #1429	; 0x595
 800efce:	491d      	ldr	r1, [pc, #116]	; (800f044 <tcp_receive+0x5f8>)
 800efd0:	481b      	ldr	r0, [pc, #108]	; (800f040 <tcp_receive+0x5f4>)
 800efd2:	f005 f81d 	bl	8014010 <iprintf>
      off = (u16_t)off32;
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800efdc:	4b15      	ldr	r3, [pc, #84]	; (800f034 <tcp_receive+0x5e8>)
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	891b      	ldrh	r3, [r3, #8]
 800efe2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d906      	bls.n	800eff8 <tcp_receive+0x5ac>
 800efea:	4b13      	ldr	r3, [pc, #76]	; (800f038 <tcp_receive+0x5ec>)
 800efec:	f240 5297 	movw	r2, #1431	; 0x597
 800eff0:	4915      	ldr	r1, [pc, #84]	; (800f048 <tcp_receive+0x5fc>)
 800eff2:	4813      	ldr	r0, [pc, #76]	; (800f040 <tcp_receive+0x5f4>)
 800eff4:	f005 f80c 	bl	8014010 <iprintf>
      inseg.len -= off;
 800eff8:	4b0e      	ldr	r3, [pc, #56]	; (800f034 <tcp_receive+0x5e8>)
 800effa:	891a      	ldrh	r2, [r3, #8]
 800effc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f000:	1ad3      	subs	r3, r2, r3
 800f002:	b29a      	uxth	r2, r3
 800f004:	4b0b      	ldr	r3, [pc, #44]	; (800f034 <tcp_receive+0x5e8>)
 800f006:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f008:	4b0a      	ldr	r3, [pc, #40]	; (800f034 <tcp_receive+0x5e8>)
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	891a      	ldrh	r2, [r3, #8]
 800f00e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f016:	e029      	b.n	800f06c <tcp_receive+0x620>
 800f018:	08016c60 	.word	0x08016c60
 800f01c:	08016c68 	.word	0x08016c68
 800f020:	20004a2c 	.word	0x20004a2c
 800f024:	20004a28 	.word	0x20004a28
 800f028:	2000b948 	.word	0x2000b948
 800f02c:	20004a2e 	.word	0x20004a2e
 800f030:	20004a24 	.word	0x20004a24
 800f034:	20004a04 	.word	0x20004a04
 800f038:	080168f8 	.word	0x080168f8
 800f03c:	08016c70 	.word	0x08016c70
 800f040:	08016944 	.word	0x08016944
 800f044:	08016c80 	.word	0x08016c80
 800f048:	08016c90 	.word	0x08016c90
        off -= p->len;
 800f04c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f04e:	895b      	ldrh	r3, [r3, #10]
 800f050:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f054:	1ad3      	subs	r3, r2, r3
 800f056:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f05c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f05e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f062:	2200      	movs	r2, #0
 800f064:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f06e:	895b      	ldrh	r3, [r3, #10]
 800f070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f074:	429a      	cmp	r2, r3
 800f076:	d8e9      	bhi.n	800f04c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f07c:	4619      	mov	r1, r3
 800f07e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f080:	f7fc fb74 	bl	800b76c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f088:	4a91      	ldr	r2, [pc, #580]	; (800f2d0 <tcp_receive+0x884>)
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	4b91      	ldr	r3, [pc, #580]	; (800f2d4 <tcp_receive+0x888>)
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	4a8f      	ldr	r2, [pc, #572]	; (800f2d0 <tcp_receive+0x884>)
 800f092:	6812      	ldr	r2, [r2, #0]
 800f094:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f096:	e00d      	b.n	800f0b4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f098:	4b8d      	ldr	r3, [pc, #564]	; (800f2d0 <tcp_receive+0x884>)
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	da06      	bge.n	800f0b4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8b5b      	ldrh	r3, [r3, #26]
 800f0aa:	f043 0302 	orr.w	r3, r3, #2
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0b4:	4b86      	ldr	r3, [pc, #536]	; (800f2d0 <tcp_receive+0x884>)
 800f0b6:	681a      	ldr	r2, [r3, #0]
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0bc:	1ad3      	subs	r3, r2, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	f2c0 842a 	blt.w	800f918 <tcp_receive+0xecc>
 800f0c4:	4b82      	ldr	r3, [pc, #520]	; (800f2d0 <tcp_receive+0x884>)
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0d0:	440b      	add	r3, r1
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f300 841e 	bgt.w	800f918 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0e0:	4b7b      	ldr	r3, [pc, #492]	; (800f2d0 <tcp_receive+0x884>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	f040 829a 	bne.w	800f61e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f0ea:	4b7a      	ldr	r3, [pc, #488]	; (800f2d4 <tcp_receive+0x888>)
 800f0ec:	891c      	ldrh	r4, [r3, #8]
 800f0ee:	4b79      	ldr	r3, [pc, #484]	; (800f2d4 <tcp_receive+0x888>)
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	899b      	ldrh	r3, [r3, #12]
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fb f812 	bl	800a120 <lwip_htons>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	f003 0303 	and.w	r3, r3, #3
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <tcp_receive+0x6c0>
 800f108:	2301      	movs	r3, #1
 800f10a:	e000      	b.n	800f10e <tcp_receive+0x6c2>
 800f10c:	2300      	movs	r3, #0
 800f10e:	4423      	add	r3, r4
 800f110:	b29a      	uxth	r2, r3
 800f112:	4b71      	ldr	r3, [pc, #452]	; (800f2d8 <tcp_receive+0x88c>)
 800f114:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f11a:	4b6f      	ldr	r3, [pc, #444]	; (800f2d8 <tcp_receive+0x88c>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d275      	bcs.n	800f20e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f122:	4b6c      	ldr	r3, [pc, #432]	; (800f2d4 <tcp_receive+0x888>)
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fa fff8 	bl	800a120 <lwip_htons>
 800f130:	4603      	mov	r3, r0
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0301 	and.w	r3, r3, #1
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d01f      	beq.n	800f17c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f13c:	4b65      	ldr	r3, [pc, #404]	; (800f2d4 <tcp_receive+0x888>)
 800f13e:	68db      	ldr	r3, [r3, #12]
 800f140:	899b      	ldrh	r3, [r3, #12]
 800f142:	b29b      	uxth	r3, r3
 800f144:	b21b      	sxth	r3, r3
 800f146:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f14a:	b21c      	sxth	r4, r3
 800f14c:	4b61      	ldr	r3, [pc, #388]	; (800f2d4 <tcp_receive+0x888>)
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	899b      	ldrh	r3, [r3, #12]
 800f152:	b29b      	uxth	r3, r3
 800f154:	4618      	mov	r0, r3
 800f156:	f7fa ffe3 	bl	800a120 <lwip_htons>
 800f15a:	4603      	mov	r3, r0
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	b29b      	uxth	r3, r3
 800f160:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f164:	b29b      	uxth	r3, r3
 800f166:	4618      	mov	r0, r3
 800f168:	f7fa ffda 	bl	800a120 <lwip_htons>
 800f16c:	4603      	mov	r3, r0
 800f16e:	b21b      	sxth	r3, r3
 800f170:	4323      	orrs	r3, r4
 800f172:	b21a      	sxth	r2, r3
 800f174:	4b57      	ldr	r3, [pc, #348]	; (800f2d4 <tcp_receive+0x888>)
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	b292      	uxth	r2, r2
 800f17a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f180:	4b54      	ldr	r3, [pc, #336]	; (800f2d4 <tcp_receive+0x888>)
 800f182:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f184:	4b53      	ldr	r3, [pc, #332]	; (800f2d4 <tcp_receive+0x888>)
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	899b      	ldrh	r3, [r3, #12]
 800f18a:	b29b      	uxth	r3, r3
 800f18c:	4618      	mov	r0, r3
 800f18e:	f7fa ffc7 	bl	800a120 <lwip_htons>
 800f192:	4603      	mov	r3, r0
 800f194:	b2db      	uxtb	r3, r3
 800f196:	f003 0302 	and.w	r3, r3, #2
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d005      	beq.n	800f1aa <tcp_receive+0x75e>
            inseg.len -= 1;
 800f19e:	4b4d      	ldr	r3, [pc, #308]	; (800f2d4 <tcp_receive+0x888>)
 800f1a0:	891b      	ldrh	r3, [r3, #8]
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	4b4b      	ldr	r3, [pc, #300]	; (800f2d4 <tcp_receive+0x888>)
 800f1a8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f1aa:	4b4a      	ldr	r3, [pc, #296]	; (800f2d4 <tcp_receive+0x888>)
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4a49      	ldr	r2, [pc, #292]	; (800f2d4 <tcp_receive+0x888>)
 800f1b0:	8912      	ldrh	r2, [r2, #8]
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7fc f9d9 	bl	800b56c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f1ba:	4b46      	ldr	r3, [pc, #280]	; (800f2d4 <tcp_receive+0x888>)
 800f1bc:	891c      	ldrh	r4, [r3, #8]
 800f1be:	4b45      	ldr	r3, [pc, #276]	; (800f2d4 <tcp_receive+0x888>)
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	899b      	ldrh	r3, [r3, #12]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fa ffaa 	bl	800a120 <lwip_htons>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	f003 0303 	and.w	r3, r3, #3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <tcp_receive+0x790>
 800f1d8:	2301      	movs	r3, #1
 800f1da:	e000      	b.n	800f1de <tcp_receive+0x792>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	4423      	add	r3, r4
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	4b3d      	ldr	r3, [pc, #244]	; (800f2d8 <tcp_receive+0x88c>)
 800f1e4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f1e6:	4b3c      	ldr	r3, [pc, #240]	; (800f2d8 <tcp_receive+0x88c>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	4b38      	ldr	r3, [pc, #224]	; (800f2d0 <tcp_receive+0x884>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	441a      	add	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1fa:	440b      	add	r3, r1
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d006      	beq.n	800f20e <tcp_receive+0x7c2>
 800f200:	4b36      	ldr	r3, [pc, #216]	; (800f2dc <tcp_receive+0x890>)
 800f202:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f206:	4936      	ldr	r1, [pc, #216]	; (800f2e0 <tcp_receive+0x894>)
 800f208:	4836      	ldr	r0, [pc, #216]	; (800f2e4 <tcp_receive+0x898>)
 800f20a:	f004 ff01 	bl	8014010 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f212:	2b00      	cmp	r3, #0
 800f214:	f000 80e7 	beq.w	800f3e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f218:	4b2e      	ldr	r3, [pc, #184]	; (800f2d4 <tcp_receive+0x888>)
 800f21a:	68db      	ldr	r3, [r3, #12]
 800f21c:	899b      	ldrh	r3, [r3, #12]
 800f21e:	b29b      	uxth	r3, r3
 800f220:	4618      	mov	r0, r3
 800f222:	f7fa ff7d 	bl	800a120 <lwip_htons>
 800f226:	4603      	mov	r3, r0
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	f003 0301 	and.w	r3, r3, #1
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d010      	beq.n	800f254 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f232:	e00a      	b.n	800f24a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f238:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f7fd fd96 	bl	800cd76 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1f0      	bne.n	800f234 <tcp_receive+0x7e8>
 800f252:	e0c8      	b.n	800f3e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f258:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f25a:	e052      	b.n	800f302 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	899b      	ldrh	r3, [r3, #12]
 800f262:	b29b      	uxth	r3, r3
 800f264:	4618      	mov	r0, r3
 800f266:	f7fa ff5b 	bl	800a120 <lwip_htons>
 800f26a:	4603      	mov	r3, r0
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	f003 0301 	and.w	r3, r3, #1
 800f272:	2b00      	cmp	r3, #0
 800f274:	d03d      	beq.n	800f2f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f276:	4b17      	ldr	r3, [pc, #92]	; (800f2d4 <tcp_receive+0x888>)
 800f278:	68db      	ldr	r3, [r3, #12]
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fa ff4e 	bl	800a120 <lwip_htons>
 800f284:	4603      	mov	r3, r0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d130      	bne.n	800f2f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f290:	4b10      	ldr	r3, [pc, #64]	; (800f2d4 <tcp_receive+0x888>)
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	b29c      	uxth	r4, r3
 800f298:	2001      	movs	r0, #1
 800f29a:	f7fa ff41 	bl	800a120 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	4b0c      	ldr	r3, [pc, #48]	; (800f2d4 <tcp_receive+0x888>)
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	4322      	orrs	r2, r4
 800f2a8:	b292      	uxth	r2, r2
 800f2aa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f2ac:	4b09      	ldr	r3, [pc, #36]	; (800f2d4 <tcp_receive+0x888>)
 800f2ae:	891c      	ldrh	r4, [r3, #8]
 800f2b0:	4b08      	ldr	r3, [pc, #32]	; (800f2d4 <tcp_receive+0x888>)
 800f2b2:	68db      	ldr	r3, [r3, #12]
 800f2b4:	899b      	ldrh	r3, [r3, #12]
 800f2b6:	b29b      	uxth	r3, r3
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7fa ff31 	bl	800a120 <lwip_htons>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	f003 0303 	and.w	r3, r3, #3
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <tcp_receive+0x89c>
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e00d      	b.n	800f2ea <tcp_receive+0x89e>
 800f2ce:	bf00      	nop
 800f2d0:	20004a24 	.word	0x20004a24
 800f2d4:	20004a04 	.word	0x20004a04
 800f2d8:	20004a2e 	.word	0x20004a2e
 800f2dc:	080168f8 	.word	0x080168f8
 800f2e0:	08016ca0 	.word	0x08016ca0
 800f2e4:	08016944 	.word	0x08016944
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4423      	add	r3, r4
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	4b98      	ldr	r3, [pc, #608]	; (800f550 <tcp_receive+0xb04>)
 800f2f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f2fc:	6938      	ldr	r0, [r7, #16]
 800f2fe:	f7fd fd3a 	bl	800cd76 <tcp_seg_free>
            while (next &&
 800f302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00e      	beq.n	800f326 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f308:	4b91      	ldr	r3, [pc, #580]	; (800f550 <tcp_receive+0xb04>)
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	461a      	mov	r2, r3
 800f30e:	4b91      	ldr	r3, [pc, #580]	; (800f554 <tcp_receive+0xb08>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	441a      	add	r2, r3
 800f314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f31c:	8909      	ldrh	r1, [r1, #8]
 800f31e:	440b      	add	r3, r1
 800f320:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f322:	2b00      	cmp	r3, #0
 800f324:	da9a      	bge.n	800f25c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d059      	beq.n	800f3e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f32c:	4b88      	ldr	r3, [pc, #544]	; (800f550 <tcp_receive+0xb04>)
 800f32e:	881b      	ldrh	r3, [r3, #0]
 800f330:	461a      	mov	r2, r3
 800f332:	4b88      	ldr	r3, [pc, #544]	; (800f554 <tcp_receive+0xb08>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	441a      	add	r2, r3
 800f338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f340:	2b00      	cmp	r3, #0
 800f342:	dd4d      	ble.n	800f3e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	4b81      	ldr	r3, [pc, #516]	; (800f554 <tcp_receive+0xb08>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	b29b      	uxth	r3, r3
 800f352:	1ad3      	subs	r3, r2, r3
 800f354:	b29a      	uxth	r2, r3
 800f356:	4b80      	ldr	r3, [pc, #512]	; (800f558 <tcp_receive+0xb0c>)
 800f358:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f35a:	4b7f      	ldr	r3, [pc, #508]	; (800f558 <tcp_receive+0xb0c>)
 800f35c:	68db      	ldr	r3, [r3, #12]
 800f35e:	899b      	ldrh	r3, [r3, #12]
 800f360:	b29b      	uxth	r3, r3
 800f362:	4618      	mov	r0, r3
 800f364:	f7fa fedc 	bl	800a120 <lwip_htons>
 800f368:	4603      	mov	r3, r0
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	f003 0302 	and.w	r3, r3, #2
 800f370:	2b00      	cmp	r3, #0
 800f372:	d005      	beq.n	800f380 <tcp_receive+0x934>
                inseg.len -= 1;
 800f374:	4b78      	ldr	r3, [pc, #480]	; (800f558 <tcp_receive+0xb0c>)
 800f376:	891b      	ldrh	r3, [r3, #8]
 800f378:	3b01      	subs	r3, #1
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	4b76      	ldr	r3, [pc, #472]	; (800f558 <tcp_receive+0xb0c>)
 800f37e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f380:	4b75      	ldr	r3, [pc, #468]	; (800f558 <tcp_receive+0xb0c>)
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	4a74      	ldr	r2, [pc, #464]	; (800f558 <tcp_receive+0xb0c>)
 800f386:	8912      	ldrh	r2, [r2, #8]
 800f388:	4611      	mov	r1, r2
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fc f8ee 	bl	800b56c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f390:	4b71      	ldr	r3, [pc, #452]	; (800f558 <tcp_receive+0xb0c>)
 800f392:	891c      	ldrh	r4, [r3, #8]
 800f394:	4b70      	ldr	r3, [pc, #448]	; (800f558 <tcp_receive+0xb0c>)
 800f396:	68db      	ldr	r3, [r3, #12]
 800f398:	899b      	ldrh	r3, [r3, #12]
 800f39a:	b29b      	uxth	r3, r3
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fa febf 	bl	800a120 <lwip_htons>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	f003 0303 	and.w	r3, r3, #3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <tcp_receive+0x966>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	e000      	b.n	800f3b4 <tcp_receive+0x968>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	4423      	add	r3, r4
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	4b65      	ldr	r3, [pc, #404]	; (800f550 <tcp_receive+0xb04>)
 800f3ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f3bc:	4b64      	ldr	r3, [pc, #400]	; (800f550 <tcp_receive+0xb04>)
 800f3be:	881b      	ldrh	r3, [r3, #0]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	4b64      	ldr	r3, [pc, #400]	; (800f554 <tcp_receive+0xb08>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	441a      	add	r2, r3
 800f3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ca:	68db      	ldr	r3, [r3, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d006      	beq.n	800f3e0 <tcp_receive+0x994>
 800f3d2:	4b62      	ldr	r3, [pc, #392]	; (800f55c <tcp_receive+0xb10>)
 800f3d4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f3d8:	4961      	ldr	r1, [pc, #388]	; (800f560 <tcp_receive+0xb14>)
 800f3da:	4862      	ldr	r0, [pc, #392]	; (800f564 <tcp_receive+0xb18>)
 800f3dc:	f004 fe18 	bl	8014010 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f3e4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f3e6:	4b5a      	ldr	r3, [pc, #360]	; (800f550 <tcp_receive+0xb04>)
 800f3e8:	881b      	ldrh	r3, [r3, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4b59      	ldr	r3, [pc, #356]	; (800f554 <tcp_receive+0xb08>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	441a      	add	r2, r3
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3fa:	4b55      	ldr	r3, [pc, #340]	; (800f550 <tcp_receive+0xb04>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d206      	bcs.n	800f410 <tcp_receive+0x9c4>
 800f402:	4b56      	ldr	r3, [pc, #344]	; (800f55c <tcp_receive+0xb10>)
 800f404:	f240 6207 	movw	r2, #1543	; 0x607
 800f408:	4957      	ldr	r1, [pc, #348]	; (800f568 <tcp_receive+0xb1c>)
 800f40a:	4856      	ldr	r0, [pc, #344]	; (800f564 <tcp_receive+0xb18>)
 800f40c:	f004 fe00 	bl	8014010 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f414:	4b4e      	ldr	r3, [pc, #312]	; (800f550 <tcp_receive+0xb04>)
 800f416:	881b      	ldrh	r3, [r3, #0]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7fc ffc9 	bl	800c3b8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f426:	4b4c      	ldr	r3, [pc, #304]	; (800f558 <tcp_receive+0xb0c>)
 800f428:	685b      	ldr	r3, [r3, #4]
 800f42a:	891b      	ldrh	r3, [r3, #8]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d006      	beq.n	800f43e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f430:	4b49      	ldr	r3, [pc, #292]	; (800f558 <tcp_receive+0xb0c>)
 800f432:	685b      	ldr	r3, [r3, #4]
 800f434:	4a4d      	ldr	r2, [pc, #308]	; (800f56c <tcp_receive+0xb20>)
 800f436:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f438:	4b47      	ldr	r3, [pc, #284]	; (800f558 <tcp_receive+0xb0c>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f43e:	4b46      	ldr	r3, [pc, #280]	; (800f558 <tcp_receive+0xb0c>)
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	899b      	ldrh	r3, [r3, #12]
 800f444:	b29b      	uxth	r3, r3
 800f446:	4618      	mov	r0, r3
 800f448:	f7fa fe6a 	bl	800a120 <lwip_htons>
 800f44c:	4603      	mov	r3, r0
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	2b00      	cmp	r3, #0
 800f456:	f000 80b8 	beq.w	800f5ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f45a:	4b45      	ldr	r3, [pc, #276]	; (800f570 <tcp_receive+0xb24>)
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	f043 0320 	orr.w	r3, r3, #32
 800f462:	b2da      	uxtb	r2, r3
 800f464:	4b42      	ldr	r3, [pc, #264]	; (800f570 <tcp_receive+0xb24>)
 800f466:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f468:	e0af      	b.n	800f5ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f46e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	4a36      	ldr	r2, [pc, #216]	; (800f554 <tcp_receive+0xb08>)
 800f47a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	891b      	ldrh	r3, [r3, #8]
 800f480:	461c      	mov	r4, r3
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	899b      	ldrh	r3, [r3, #12]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7fa fe48 	bl	800a120 <lwip_htons>
 800f490:	4603      	mov	r3, r0
 800f492:	b2db      	uxtb	r3, r3
 800f494:	f003 0303 	and.w	r3, r3, #3
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <tcp_receive+0xa54>
 800f49c:	2301      	movs	r3, #1
 800f49e:	e000      	b.n	800f4a2 <tcp_receive+0xa56>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	191a      	adds	r2, r3, r4
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a8:	441a      	add	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4b2:	461c      	mov	r4, r3
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	891b      	ldrh	r3, [r3, #8]
 800f4b8:	461d      	mov	r5, r3
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	899b      	ldrh	r3, [r3, #12]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fa fe2c 	bl	800a120 <lwip_htons>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	f003 0303 	and.w	r3, r3, #3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d001      	beq.n	800f4d8 <tcp_receive+0xa8c>
 800f4d4:	2301      	movs	r3, #1
 800f4d6:	e000      	b.n	800f4da <tcp_receive+0xa8e>
 800f4d8:	2300      	movs	r3, #0
 800f4da:	442b      	add	r3, r5
 800f4dc:	429c      	cmp	r4, r3
 800f4de:	d206      	bcs.n	800f4ee <tcp_receive+0xaa2>
 800f4e0:	4b1e      	ldr	r3, [pc, #120]	; (800f55c <tcp_receive+0xb10>)
 800f4e2:	f240 622b 	movw	r2, #1579	; 0x62b
 800f4e6:	4923      	ldr	r1, [pc, #140]	; (800f574 <tcp_receive+0xb28>)
 800f4e8:	481e      	ldr	r0, [pc, #120]	; (800f564 <tcp_receive+0xb18>)
 800f4ea:	f004 fd91 	bl	8014010 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	891b      	ldrh	r3, [r3, #8]
 800f4f2:	461c      	mov	r4, r3
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	899b      	ldrh	r3, [r3, #12]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fa fe0f 	bl	800a120 <lwip_htons>
 800f502:	4603      	mov	r3, r0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	f003 0303 	and.w	r3, r3, #3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <tcp_receive+0xac6>
 800f50e:	2301      	movs	r3, #1
 800f510:	e000      	b.n	800f514 <tcp_receive+0xac8>
 800f512:	2300      	movs	r3, #0
 800f514:	1919      	adds	r1, r3, r4
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f51a:	b28b      	uxth	r3, r1
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7fc ff47 	bl	800c3b8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	891b      	ldrh	r3, [r3, #8]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d028      	beq.n	800f586 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f534:	4b0d      	ldr	r3, [pc, #52]	; (800f56c <tcp_receive+0xb20>)
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d01d      	beq.n	800f578 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f53c:	4b0b      	ldr	r3, [pc, #44]	; (800f56c <tcp_receive+0xb20>)
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4619      	mov	r1, r3
 800f546:	4610      	mov	r0, r2
 800f548:	f7fc fa64 	bl	800ba14 <pbuf_cat>
 800f54c:	e018      	b.n	800f580 <tcp_receive+0xb34>
 800f54e:	bf00      	nop
 800f550:	20004a2e 	.word	0x20004a2e
 800f554:	20004a24 	.word	0x20004a24
 800f558:	20004a04 	.word	0x20004a04
 800f55c:	080168f8 	.word	0x080168f8
 800f560:	08016cd8 	.word	0x08016cd8
 800f564:	08016944 	.word	0x08016944
 800f568:	08016d14 	.word	0x08016d14
 800f56c:	20004a34 	.word	0x20004a34
 800f570:	20004a31 	.word	0x20004a31
 800f574:	08016d34 	.word	0x08016d34
            } else {
              recv_data = cseg->p;
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	4a70      	ldr	r2, [pc, #448]	; (800f740 <tcp_receive+0xcf4>)
 800f57e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	2200      	movs	r2, #0
 800f584:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	899b      	ldrh	r3, [r3, #12]
 800f58c:	b29b      	uxth	r3, r3
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fa fdc6 	bl	800a120 <lwip_htons>
 800f594:	4603      	mov	r3, r0
 800f596:	b2db      	uxtb	r3, r3
 800f598:	f003 0301 	and.w	r3, r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00d      	beq.n	800f5bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f5a0:	4b68      	ldr	r3, [pc, #416]	; (800f744 <tcp_receive+0xcf8>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	f043 0320 	orr.w	r3, r3, #32
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	4b66      	ldr	r3, [pc, #408]	; (800f744 <tcp_receive+0xcf8>)
 800f5ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	7d1b      	ldrb	r3, [r3, #20]
 800f5b2:	2b04      	cmp	r3, #4
 800f5b4:	d102      	bne.n	800f5bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2207      	movs	r2, #7
 800f5ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f5c4:	68b8      	ldr	r0, [r7, #8]
 800f5c6:	f7fd fbd6 	bl	800cd76 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d008      	beq.n	800f5e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	685a      	ldr	r2, [r3, #4]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	f43f af43 	beq.w	800f46a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	8b5b      	ldrh	r3, [r3, #26]
 800f5e8:	f003 0301 	and.w	r3, r3, #1
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00e      	beq.n	800f60e <tcp_receive+0xbc2>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8b5b      	ldrh	r3, [r3, #26]
 800f5f4:	f023 0301 	bic.w	r3, r3, #1
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	835a      	strh	r2, [r3, #26]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	8b5b      	ldrh	r3, [r3, #26]
 800f602:	f043 0302 	orr.w	r3, r3, #2
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f60c:	e188      	b.n	800f920 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8b5b      	ldrh	r3, [r3, #26]
 800f612:	f043 0301 	orr.w	r3, r3, #1
 800f616:	b29a      	uxth	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f61c:	e180      	b.n	800f920 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f622:	2b00      	cmp	r3, #0
 800f624:	d106      	bne.n	800f634 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f626:	4848      	ldr	r0, [pc, #288]	; (800f748 <tcp_receive+0xcfc>)
 800f628:	f7fd fbbe 	bl	800cda8 <tcp_seg_copy>
 800f62c:	4602      	mov	r2, r0
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	675a      	str	r2, [r3, #116]	; 0x74
 800f632:	e16d      	b.n	800f910 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f634:	2300      	movs	r3, #0
 800f636:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f63c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f63e:	e157      	b.n	800f8f0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	4b41      	ldr	r3, [pc, #260]	; (800f74c <tcp_receive+0xd00>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d11d      	bne.n	800f68a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f64e:	4b3e      	ldr	r3, [pc, #248]	; (800f748 <tcp_receive+0xcfc>)
 800f650:	891a      	ldrh	r2, [r3, #8]
 800f652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f654:	891b      	ldrh	r3, [r3, #8]
 800f656:	429a      	cmp	r2, r3
 800f658:	f240 814f 	bls.w	800f8fa <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f65c:	483a      	ldr	r0, [pc, #232]	; (800f748 <tcp_receive+0xcfc>)
 800f65e:	f7fd fba3 	bl	800cda8 <tcp_seg_copy>
 800f662:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2b00      	cmp	r3, #0
 800f668:	f000 8149 	beq.w	800f8fe <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f66c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d003      	beq.n	800f67a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f674:	697a      	ldr	r2, [r7, #20]
 800f676:	601a      	str	r2, [r3, #0]
 800f678:	e002      	b.n	800f680 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f682:	6978      	ldr	r0, [r7, #20]
 800f684:	f7ff f8de 	bl	800e844 <tcp_oos_insert_segment>
                }
                break;
 800f688:	e139      	b.n	800f8fe <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d117      	bne.n	800f6c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f690:	4b2e      	ldr	r3, [pc, #184]	; (800f74c <tcp_receive+0xd00>)
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	da57      	bge.n	800f750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6a0:	4829      	ldr	r0, [pc, #164]	; (800f748 <tcp_receive+0xcfc>)
 800f6a2:	f7fd fb81 	bl	800cda8 <tcp_seg_copy>
 800f6a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	f000 8129 	beq.w	800f902 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	69ba      	ldr	r2, [r7, #24]
 800f6b4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f6b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6b8:	69b8      	ldr	r0, [r7, #24]
 800f6ba:	f7ff f8c3 	bl	800e844 <tcp_oos_insert_segment>
                  }
                  break;
 800f6be:	e120      	b.n	800f902 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f6c0:	4b22      	ldr	r3, [pc, #136]	; (800f74c <tcp_receive+0xd00>)
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	db3e      	blt.n	800f750 <tcp_receive+0xd04>
 800f6d2:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <tcp_receive+0xd00>)
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	3301      	adds	r3, #1
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	dc35      	bgt.n	800f750 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6e4:	4818      	ldr	r0, [pc, #96]	; (800f748 <tcp_receive+0xcfc>)
 800f6e6:	f7fd fb5f 	bl	800cda8 <tcp_seg_copy>
 800f6ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	f000 8109 	beq.w	800f906 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f6f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	685b      	ldr	r3, [r3, #4]
 800f6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6fc:	8912      	ldrh	r2, [r2, #8]
 800f6fe:	441a      	add	r2, r3
 800f700:	4b12      	ldr	r3, [pc, #72]	; (800f74c <tcp_receive+0xd00>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	2b00      	cmp	r3, #0
 800f708:	dd12      	ble.n	800f730 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f70a:	4b10      	ldr	r3, [pc, #64]	; (800f74c <tcp_receive+0xd00>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	b29a      	uxth	r2, r3
 800f710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f712:	68db      	ldr	r3, [r3, #12]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	b29b      	uxth	r3, r3
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f71e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f722:	685a      	ldr	r2, [r3, #4]
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	891b      	ldrh	r3, [r3, #8]
 800f728:	4619      	mov	r1, r3
 800f72a:	4610      	mov	r0, r2
 800f72c:	f7fb ff1e 	bl	800b56c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f732:	69fa      	ldr	r2, [r7, #28]
 800f734:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f738:	69f8      	ldr	r0, [r7, #28]
 800f73a:	f7ff f883 	bl	800e844 <tcp_oos_insert_segment>
                  }
                  break;
 800f73e:	e0e2      	b.n	800f906 <tcp_receive+0xeba>
 800f740:	20004a34 	.word	0x20004a34
 800f744:	20004a31 	.word	0x20004a31
 800f748:	20004a04 	.word	0x20004a04
 800f74c:	20004a24 	.word	0x20004a24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f040 80c6 	bne.w	800f8ea <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f75e:	4b80      	ldr	r3, [pc, #512]	; (800f960 <tcp_receive+0xf14>)
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f340 80bd 	ble.w	800f8ea <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	899b      	ldrh	r3, [r3, #12]
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7fa fcd1 	bl	800a120 <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	b2db      	uxtb	r3, r3
 800f782:	f003 0301 	and.w	r3, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	f040 80bf 	bne.w	800f90a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f78c:	4875      	ldr	r0, [pc, #468]	; (800f964 <tcp_receive+0xf18>)
 800f78e:	f7fd fb0b 	bl	800cda8 <tcp_seg_copy>
 800f792:	4602      	mov	r2, r0
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f000 80b6 	beq.w	800f90e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7aa:	8912      	ldrh	r2, [r2, #8]
 800f7ac:	441a      	add	r2, r3
 800f7ae:	4b6c      	ldr	r3, [pc, #432]	; (800f960 <tcp_receive+0xf14>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	1ad3      	subs	r3, r2, r3
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	dd12      	ble.n	800f7de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f7b8:	4b69      	ldr	r3, [pc, #420]	; (800f960 <tcp_receive+0xf14>)
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	68db      	ldr	r3, [r3, #12]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d0:	685a      	ldr	r2, [r3, #4]
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	891b      	ldrh	r3, [r3, #8]
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	4610      	mov	r0, r2
 800f7da:	f7fb fec7 	bl	800b56c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f7de:	4b62      	ldr	r3, [pc, #392]	; (800f968 <tcp_receive+0xf1c>)
 800f7e0:	881b      	ldrh	r3, [r3, #0]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	4b5e      	ldr	r3, [pc, #376]	; (800f960 <tcp_receive+0xf14>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	441a      	add	r2, r3
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ee:	6879      	ldr	r1, [r7, #4]
 800f7f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7f2:	440b      	add	r3, r1
 800f7f4:	1ad3      	subs	r3, r2, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f340 8089 	ble.w	800f90e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	899b      	ldrh	r3, [r3, #12]
 800f804:	b29b      	uxth	r3, r3
 800f806:	4618      	mov	r0, r3
 800f808:	f7fa fc8a 	bl	800a120 <lwip_htons>
 800f80c:	4603      	mov	r3, r0
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	2b00      	cmp	r3, #0
 800f816:	d022      	beq.n	800f85e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	899b      	ldrh	r3, [r3, #12]
 800f820:	b29b      	uxth	r3, r3
 800f822:	b21b      	sxth	r3, r3
 800f824:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f828:	b21c      	sxth	r4, r3
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	899b      	ldrh	r3, [r3, #12]
 800f832:	b29b      	uxth	r3, r3
 800f834:	4618      	mov	r0, r3
 800f836:	f7fa fc73 	bl	800a120 <lwip_htons>
 800f83a:	4603      	mov	r3, r0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	b29b      	uxth	r3, r3
 800f840:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f844:	b29b      	uxth	r3, r3
 800f846:	4618      	mov	r0, r3
 800f848:	f7fa fc6a 	bl	800a120 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	b21b      	sxth	r3, r3
 800f850:	4323      	orrs	r3, r4
 800f852:	b21a      	sxth	r2, r3
 800f854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	68db      	ldr	r3, [r3, #12]
 800f85a:	b292      	uxth	r2, r2
 800f85c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f868:	4413      	add	r3, r2
 800f86a:	b299      	uxth	r1, r3
 800f86c:	4b3c      	ldr	r3, [pc, #240]	; (800f960 <tcp_receive+0xf14>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	b29a      	uxth	r2, r3
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	1a8a      	subs	r2, r1, r2
 800f878:	b292      	uxth	r2, r2
 800f87a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685a      	ldr	r2, [r3, #4]
 800f882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	891b      	ldrh	r3, [r3, #8]
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7fb fe6e 	bl	800b56c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	891c      	ldrh	r4, [r3, #8]
 800f896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	899b      	ldrh	r3, [r3, #12]
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fa fc3d 	bl	800a120 <lwip_htons>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f003 0303 	and.w	r3, r3, #3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d001      	beq.n	800f8b6 <tcp_receive+0xe6a>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e000      	b.n	800f8b8 <tcp_receive+0xe6c>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	4423      	add	r3, r4
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	4b2a      	ldr	r3, [pc, #168]	; (800f968 <tcp_receive+0xf1c>)
 800f8be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f8c0:	4b29      	ldr	r3, [pc, #164]	; (800f968 <tcp_receive+0xf1c>)
 800f8c2:	881b      	ldrh	r3, [r3, #0]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4b26      	ldr	r3, [pc, #152]	; (800f960 <tcp_receive+0xf14>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	441a      	add	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	6879      	ldr	r1, [r7, #4]
 800f8d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8d4:	440b      	add	r3, r1
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d019      	beq.n	800f90e <tcp_receive+0xec2>
 800f8da:	4b24      	ldr	r3, [pc, #144]	; (800f96c <tcp_receive+0xf20>)
 800f8dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f8e0:	4923      	ldr	r1, [pc, #140]	; (800f970 <tcp_receive+0xf24>)
 800f8e2:	4824      	ldr	r0, [pc, #144]	; (800f974 <tcp_receive+0xf28>)
 800f8e4:	f004 fb94 	bl	8014010 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f8e8:	e011      	b.n	800f90e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	f47f aea4 	bne.w	800f640 <tcp_receive+0xbf4>
 800f8f8:	e00a      	b.n	800f910 <tcp_receive+0xec4>
                break;
 800f8fa:	bf00      	nop
 800f8fc:	e008      	b.n	800f910 <tcp_receive+0xec4>
                break;
 800f8fe:	bf00      	nop
 800f900:	e006      	b.n	800f910 <tcp_receive+0xec4>
                  break;
 800f902:	bf00      	nop
 800f904:	e004      	b.n	800f910 <tcp_receive+0xec4>
                  break;
 800f906:	bf00      	nop
 800f908:	e002      	b.n	800f910 <tcp_receive+0xec4>
                  break;
 800f90a:	bf00      	nop
 800f90c:	e000      	b.n	800f910 <tcp_receive+0xec4>
                break;
 800f90e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f001 fa33 	bl	8010d7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f916:	e003      	b.n	800f920 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 fa2f 	bl	8010d7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f91e:	e01a      	b.n	800f956 <tcp_receive+0xf0a>
 800f920:	e019      	b.n	800f956 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f922:	4b0f      	ldr	r3, [pc, #60]	; (800f960 <tcp_receive+0xf14>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	db0a      	blt.n	800f946 <tcp_receive+0xefa>
 800f930:	4b0b      	ldr	r3, [pc, #44]	; (800f960 <tcp_receive+0xf14>)
 800f932:	681a      	ldr	r2, [r3, #0]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f93c:	440b      	add	r3, r1
 800f93e:	1ad3      	subs	r3, r2, r3
 800f940:	3301      	adds	r3, #1
 800f942:	2b00      	cmp	r3, #0
 800f944:	dd07      	ble.n	800f956 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	8b5b      	ldrh	r3, [r3, #26]
 800f94a:	f043 0302 	orr.w	r3, r3, #2
 800f94e:	b29a      	uxth	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f954:	e7ff      	b.n	800f956 <tcp_receive+0xf0a>
 800f956:	bf00      	nop
 800f958:	3750      	adds	r7, #80	; 0x50
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bdb0      	pop	{r4, r5, r7, pc}
 800f95e:	bf00      	nop
 800f960:	20004a24 	.word	0x20004a24
 800f964:	20004a04 	.word	0x20004a04
 800f968:	20004a2e 	.word	0x20004a2e
 800f96c:	080168f8 	.word	0x080168f8
 800f970:	08016ca0 	.word	0x08016ca0
 800f974:	08016944 	.word	0x08016944

0800f978 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f97e:	4b15      	ldr	r3, [pc, #84]	; (800f9d4 <tcp_get_next_optbyte+0x5c>)
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	1c5a      	adds	r2, r3, #1
 800f984:	b291      	uxth	r1, r2
 800f986:	4a13      	ldr	r2, [pc, #76]	; (800f9d4 <tcp_get_next_optbyte+0x5c>)
 800f988:	8011      	strh	r1, [r2, #0]
 800f98a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f98c:	4b12      	ldr	r3, [pc, #72]	; (800f9d8 <tcp_get_next_optbyte+0x60>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d004      	beq.n	800f99e <tcp_get_next_optbyte+0x26>
 800f994:	4b11      	ldr	r3, [pc, #68]	; (800f9dc <tcp_get_next_optbyte+0x64>)
 800f996:	881b      	ldrh	r3, [r3, #0]
 800f998:	88fa      	ldrh	r2, [r7, #6]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d208      	bcs.n	800f9b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f99e:	4b10      	ldr	r3, [pc, #64]	; (800f9e0 <tcp_get_next_optbyte+0x68>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3314      	adds	r3, #20
 800f9a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f9a6:	88fb      	ldrh	r3, [r7, #6]
 800f9a8:	683a      	ldr	r2, [r7, #0]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	e00b      	b.n	800f9c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f9b0:	88fb      	ldrh	r3, [r7, #6]
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	4b09      	ldr	r3, [pc, #36]	; (800f9dc <tcp_get_next_optbyte+0x64>)
 800f9b6:	881b      	ldrh	r3, [r3, #0]
 800f9b8:	b2db      	uxtb	r3, r3
 800f9ba:	1ad3      	subs	r3, r2, r3
 800f9bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f9be:	4b06      	ldr	r3, [pc, #24]	; (800f9d8 <tcp_get_next_optbyte+0x60>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	797b      	ldrb	r3, [r7, #5]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr
 800f9d4:	20004a20 	.word	0x20004a20
 800f9d8:	20004a1c 	.word	0x20004a1c
 800f9dc:	20004a1a 	.word	0x20004a1a
 800f9e0:	20004a14 	.word	0x20004a14

0800f9e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b084      	sub	sp, #16
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d106      	bne.n	800fa00 <tcp_parseopt+0x1c>
 800f9f2:	4b32      	ldr	r3, [pc, #200]	; (800fabc <tcp_parseopt+0xd8>)
 800f9f4:	f240 727d 	movw	r2, #1917	; 0x77d
 800f9f8:	4931      	ldr	r1, [pc, #196]	; (800fac0 <tcp_parseopt+0xdc>)
 800f9fa:	4832      	ldr	r0, [pc, #200]	; (800fac4 <tcp_parseopt+0xe0>)
 800f9fc:	f004 fb08 	bl	8014010 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fa00:	4b31      	ldr	r3, [pc, #196]	; (800fac8 <tcp_parseopt+0xe4>)
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d055      	beq.n	800fab4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa08:	4b30      	ldr	r3, [pc, #192]	; (800facc <tcp_parseopt+0xe8>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	801a      	strh	r2, [r3, #0]
 800fa0e:	e045      	b.n	800fa9c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fa10:	f7ff ffb2 	bl	800f978 <tcp_get_next_optbyte>
 800fa14:	4603      	mov	r3, r0
 800fa16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fa18:	7bfb      	ldrb	r3, [r7, #15]
 800fa1a:	2b02      	cmp	r3, #2
 800fa1c:	d006      	beq.n	800fa2c <tcp_parseopt+0x48>
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	dc2b      	bgt.n	800fa7a <tcp_parseopt+0x96>
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d041      	beq.n	800faaa <tcp_parseopt+0xc6>
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d127      	bne.n	800fa7a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fa2a:	e037      	b.n	800fa9c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fa2c:	f7ff ffa4 	bl	800f978 <tcp_get_next_optbyte>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b04      	cmp	r3, #4
 800fa34:	d13b      	bne.n	800faae <tcp_parseopt+0xca>
 800fa36:	4b25      	ldr	r3, [pc, #148]	; (800facc <tcp_parseopt+0xe8>)
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	4a22      	ldr	r2, [pc, #136]	; (800fac8 <tcp_parseopt+0xe4>)
 800fa3e:	8812      	ldrh	r2, [r2, #0]
 800fa40:	4293      	cmp	r3, r2
 800fa42:	da34      	bge.n	800faae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fa44:	f7ff ff98 	bl	800f978 <tcp_get_next_optbyte>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	b29b      	uxth	r3, r3
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fa50:	f7ff ff92 	bl	800f978 <tcp_get_next_optbyte>
 800fa54:	4603      	mov	r3, r0
 800fa56:	b29a      	uxth	r2, r3
 800fa58:	89bb      	ldrh	r3, [r7, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fa5e:	89bb      	ldrh	r3, [r7, #12]
 800fa60:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fa64:	d804      	bhi.n	800fa70 <tcp_parseopt+0x8c>
 800fa66:	89bb      	ldrh	r3, [r7, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d001      	beq.n	800fa70 <tcp_parseopt+0x8c>
 800fa6c:	89ba      	ldrh	r2, [r7, #12]
 800fa6e:	e001      	b.n	800fa74 <tcp_parseopt+0x90>
 800fa70:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fa78:	e010      	b.n	800fa9c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fa7a:	f7ff ff7d 	bl	800f978 <tcp_get_next_optbyte>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fa82:	7afb      	ldrb	r3, [r7, #11]
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d914      	bls.n	800fab2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fa88:	7afb      	ldrb	r3, [r7, #11]
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	4b0f      	ldr	r3, [pc, #60]	; (800facc <tcp_parseopt+0xe8>)
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	4413      	add	r3, r2
 800fa92:	b29b      	uxth	r3, r3
 800fa94:	3b02      	subs	r3, #2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	4b0c      	ldr	r3, [pc, #48]	; (800facc <tcp_parseopt+0xe8>)
 800fa9a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa9c:	4b0b      	ldr	r3, [pc, #44]	; (800facc <tcp_parseopt+0xe8>)
 800fa9e:	881a      	ldrh	r2, [r3, #0]
 800faa0:	4b09      	ldr	r3, [pc, #36]	; (800fac8 <tcp_parseopt+0xe4>)
 800faa2:	881b      	ldrh	r3, [r3, #0]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d3b3      	bcc.n	800fa10 <tcp_parseopt+0x2c>
 800faa8:	e004      	b.n	800fab4 <tcp_parseopt+0xd0>
          return;
 800faaa:	bf00      	nop
 800faac:	e002      	b.n	800fab4 <tcp_parseopt+0xd0>
            return;
 800faae:	bf00      	nop
 800fab0:	e000      	b.n	800fab4 <tcp_parseopt+0xd0>
            return;
 800fab2:	bf00      	nop
      }
    }
  }
}
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
 800faba:	bf00      	nop
 800fabc:	080168f8 	.word	0x080168f8
 800fac0:	08016d5c 	.word	0x08016d5c
 800fac4:	08016944 	.word	0x08016944
 800fac8:	20004a18 	.word	0x20004a18
 800facc:	20004a20 	.word	0x20004a20

0800fad0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fad0:	b480      	push	{r7}
 800fad2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fad4:	4b05      	ldr	r3, [pc, #20]	; (800faec <tcp_trigger_input_pcb_close+0x1c>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f043 0310 	orr.w	r3, r3, #16
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	4b03      	ldr	r3, [pc, #12]	; (800faec <tcp_trigger_input_pcb_close+0x1c>)
 800fae0:	701a      	strb	r2, [r3, #0]
}
 800fae2:	bf00      	nop
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	20004a31 	.word	0x20004a31

0800faf0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00a      	beq.n	800fb18 <tcp_route+0x28>
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	7a1b      	ldrb	r3, [r3, #8]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d006      	beq.n	800fb18 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	7a1b      	ldrb	r3, [r3, #8]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fb fb24 	bl	800b15c <netif_get_by_index>
 800fb14:	4603      	mov	r3, r0
 800fb16:	e003      	b.n	800fb20 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f002 fead 	bl	8012878 <ip4_route>
 800fb1e:	4603      	mov	r3, r0
  }
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b087      	sub	sp, #28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	4613      	mov	r3, r2
 800fb36:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d105      	bne.n	800fb4a <tcp_create_segment+0x22>
 800fb3e:	4b44      	ldr	r3, [pc, #272]	; (800fc50 <tcp_create_segment+0x128>)
 800fb40:	22a3      	movs	r2, #163	; 0xa3
 800fb42:	4944      	ldr	r1, [pc, #272]	; (800fc54 <tcp_create_segment+0x12c>)
 800fb44:	4844      	ldr	r0, [pc, #272]	; (800fc58 <tcp_create_segment+0x130>)
 800fb46:	f004 fa63 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d105      	bne.n	800fb5c <tcp_create_segment+0x34>
 800fb50:	4b3f      	ldr	r3, [pc, #252]	; (800fc50 <tcp_create_segment+0x128>)
 800fb52:	22a4      	movs	r2, #164	; 0xa4
 800fb54:	4941      	ldr	r1, [pc, #260]	; (800fc5c <tcp_create_segment+0x134>)
 800fb56:	4840      	ldr	r0, [pc, #256]	; (800fc58 <tcp_create_segment+0x130>)
 800fb58:	f004 fa5a 	bl	8014010 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fb6a:	2003      	movs	r0, #3
 800fb6c:	f7fa ff8e 	bl	800aa8c <memp_malloc>
 800fb70:	6138      	str	r0, [r7, #16]
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d104      	bne.n	800fb82 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fb78:	68b8      	ldr	r0, [r7, #8]
 800fb7a:	f7fb fe7d 	bl	800b878 <pbuf_free>
    return NULL;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e061      	b.n	800fc46 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fb88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	891a      	ldrh	r2, [r3, #8]
 800fb9a:	7dfb      	ldrb	r3, [r7, #23]
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d205      	bcs.n	800fbae <tcp_create_segment+0x86>
 800fba2:	4b2b      	ldr	r3, [pc, #172]	; (800fc50 <tcp_create_segment+0x128>)
 800fba4:	22b0      	movs	r2, #176	; 0xb0
 800fba6:	492e      	ldr	r1, [pc, #184]	; (800fc60 <tcp_create_segment+0x138>)
 800fba8:	482b      	ldr	r0, [pc, #172]	; (800fc58 <tcp_create_segment+0x130>)
 800fbaa:	f004 fa31 	bl	8014010 <iprintf>
  seg->len = p->tot_len - optlen;
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	891a      	ldrh	r2, [r3, #8]
 800fbb2:	7dfb      	ldrb	r3, [r7, #23]
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fbbe:	2114      	movs	r1, #20
 800fbc0:	68b8      	ldr	r0, [r7, #8]
 800fbc2:	f7fb fdc3 	bl	800b74c <pbuf_add_header>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d004      	beq.n	800fbd6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fbcc:	6938      	ldr	r0, [r7, #16]
 800fbce:	f7fd f8d2 	bl	800cd76 <tcp_seg_free>
    return NULL;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e037      	b.n	800fc46 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	685a      	ldr	r2, [r3, #4]
 800fbdc:	693b      	ldr	r3, [r7, #16]
 800fbde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	8ada      	ldrh	r2, [r3, #22]
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	68dc      	ldr	r4, [r3, #12]
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7fa fa99 	bl	800a120 <lwip_htons>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	8b1a      	ldrh	r2, [r3, #24]
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	68dc      	ldr	r4, [r3, #12]
 800fbfa:	4610      	mov	r0, r2
 800fbfc:	f7fa fa90 	bl	800a120 <lwip_htons>
 800fc00:	4603      	mov	r3, r0
 800fc02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	68dc      	ldr	r4, [r3, #12]
 800fc08:	6838      	ldr	r0, [r7, #0]
 800fc0a:	f7fa fa9e 	bl	800a14a <lwip_htonl>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fc12:	7dfb      	ldrb	r3, [r7, #23]
 800fc14:	089b      	lsrs	r3, r3, #2
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	3305      	adds	r3, #5
 800fc1c:	b29b      	uxth	r3, r3
 800fc1e:	031b      	lsls	r3, r3, #12
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	79fb      	ldrb	r3, [r7, #7]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	4313      	orrs	r3, r2
 800fc28:	b29a      	uxth	r2, r3
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	68dc      	ldr	r4, [r3, #12]
 800fc2e:	4610      	mov	r0, r2
 800fc30:	f7fa fa76 	bl	800a120 <lwip_htons>
 800fc34:	4603      	mov	r3, r0
 800fc36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	749a      	strb	r2, [r3, #18]
 800fc40:	2200      	movs	r2, #0
 800fc42:	74da      	strb	r2, [r3, #19]
  return seg;
 800fc44:	693b      	ldr	r3, [r7, #16]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	371c      	adds	r7, #28
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	bd90      	pop	{r4, r7, pc}
 800fc4e:	bf00      	nop
 800fc50:	08016d78 	.word	0x08016d78
 800fc54:	08016dac 	.word	0x08016dac
 800fc58:	08016dcc 	.word	0x08016dcc
 800fc5c:	08016df4 	.word	0x08016df4
 800fc60:	08016e18 	.word	0x08016e18

0800fc64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fc64:	b590      	push	{r4, r7, lr}
 800fc66:	b08b      	sub	sp, #44	; 0x2c
 800fc68:	af02      	add	r7, sp, #8
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fc70:	2300      	movs	r3, #0
 800fc72:	61fb      	str	r3, [r7, #28]
 800fc74:	2300      	movs	r3, #0
 800fc76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fc78:	2300      	movs	r3, #0
 800fc7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d106      	bne.n	800fc90 <tcp_split_unsent_seg+0x2c>
 800fc82:	4b95      	ldr	r3, [pc, #596]	; (800fed8 <tcp_split_unsent_seg+0x274>)
 800fc84:	f240 324b 	movw	r2, #843	; 0x34b
 800fc88:	4994      	ldr	r1, [pc, #592]	; (800fedc <tcp_split_unsent_seg+0x278>)
 800fc8a:	4895      	ldr	r0, [pc, #596]	; (800fee0 <tcp_split_unsent_seg+0x27c>)
 800fc8c:	f004 f9c0 	bl	8014010 <iprintf>

  useg = pcb->unsent;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d102      	bne.n	800fca2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fc9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fca0:	e116      	b.n	800fed0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fca2:	887b      	ldrh	r3, [r7, #2]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d109      	bne.n	800fcbc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fca8:	4b8b      	ldr	r3, [pc, #556]	; (800fed8 <tcp_split_unsent_seg+0x274>)
 800fcaa:	f240 3253 	movw	r2, #851	; 0x353
 800fcae:	498d      	ldr	r1, [pc, #564]	; (800fee4 <tcp_split_unsent_seg+0x280>)
 800fcb0:	488b      	ldr	r0, [pc, #556]	; (800fee0 <tcp_split_unsent_seg+0x27c>)
 800fcb2:	f004 f9ad 	bl	8014010 <iprintf>
    return ERR_VAL;
 800fcb6:	f06f 0305 	mvn.w	r3, #5
 800fcba:	e109      	b.n	800fed0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	891b      	ldrh	r3, [r3, #8]
 800fcc0:	887a      	ldrh	r2, [r7, #2]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d301      	bcc.n	800fcca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e102      	b.n	800fed0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcce:	887a      	ldrh	r2, [r7, #2]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d906      	bls.n	800fce2 <tcp_split_unsent_seg+0x7e>
 800fcd4:	4b80      	ldr	r3, [pc, #512]	; (800fed8 <tcp_split_unsent_seg+0x274>)
 800fcd6:	f240 325b 	movw	r2, #859	; 0x35b
 800fcda:	4983      	ldr	r1, [pc, #524]	; (800fee8 <tcp_split_unsent_seg+0x284>)
 800fcdc:	4880      	ldr	r0, [pc, #512]	; (800fee0 <tcp_split_unsent_seg+0x27c>)
 800fcde:	f004 f997 	bl	8014010 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	891b      	ldrh	r3, [r3, #8]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <tcp_split_unsent_seg+0x94>
 800fcea:	4b7b      	ldr	r3, [pc, #492]	; (800fed8 <tcp_split_unsent_seg+0x274>)
 800fcec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fcf0:	497e      	ldr	r1, [pc, #504]	; (800feec <tcp_split_unsent_seg+0x288>)
 800fcf2:	487b      	ldr	r0, [pc, #492]	; (800fee0 <tcp_split_unsent_seg+0x27c>)
 800fcf4:	f004 f98c 	bl	8014010 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	7a9b      	ldrb	r3, [r3, #10]
 800fcfc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fcfe:	7bfb      	ldrb	r3, [r7, #15]
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	b2db      	uxtb	r3, r3
 800fd04:	f003 0304 	and.w	r3, r3, #4
 800fd08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	891a      	ldrh	r2, [r3, #8]
 800fd0e:	887b      	ldrh	r3, [r7, #2]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	89bb      	ldrh	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd22:	4619      	mov	r1, r3
 800fd24:	2036      	movs	r0, #54	; 0x36
 800fd26:	f7fb fac3 	bl	800b2b0 <pbuf_alloc>
 800fd2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f000 80b7 	beq.w	800fea2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	891a      	ldrh	r2, [r3, #8]
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	891b      	ldrh	r3, [r3, #8]
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	887b      	ldrh	r3, [r7, #2]
 800fd44:	4413      	add	r3, r2
 800fd46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	6858      	ldr	r0, [r3, #4]
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	7bbb      	ldrb	r3, [r7, #14]
 800fd52:	18d1      	adds	r1, r2, r3
 800fd54:	897b      	ldrh	r3, [r7, #10]
 800fd56:	89ba      	ldrh	r2, [r7, #12]
 800fd58:	f7fb ff84 	bl	800bc64 <pbuf_copy_partial>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
 800fd60:	89bb      	ldrh	r3, [r7, #12]
 800fd62:	4293      	cmp	r3, r2
 800fd64:	f040 809f 	bne.w	800fea6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	899b      	ldrh	r3, [r3, #12]
 800fd6e:	b29b      	uxth	r3, r3
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fa f9d5 	bl	800a120 <lwip_htons>
 800fd76:	4603      	mov	r3, r0
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fd80:	2300      	movs	r3, #0
 800fd82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fd84:	7efb      	ldrb	r3, [r7, #27]
 800fd86:	f003 0308 	and.w	r3, r3, #8
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d007      	beq.n	800fd9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fd8e:	7efb      	ldrb	r3, [r7, #27]
 800fd90:	f023 0308 	bic.w	r3, r3, #8
 800fd94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fd96:	7ebb      	ldrb	r3, [r7, #26]
 800fd98:	f043 0308 	orr.w	r3, r3, #8
 800fd9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fd9e:	7efb      	ldrb	r3, [r7, #27]
 800fda0:	f003 0301 	and.w	r3, r3, #1
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d007      	beq.n	800fdb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fda8:	7efb      	ldrb	r3, [r7, #27]
 800fdaa:	f023 0301 	bic.w	r3, r3, #1
 800fdae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fdb0:	7ebb      	ldrb	r3, [r7, #26]
 800fdb2:	f043 0301 	orr.w	r3, r3, #1
 800fdb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fa f9c3 	bl	800a14a <lwip_htonl>
 800fdc4:	4602      	mov	r2, r0
 800fdc6:	887b      	ldrh	r3, [r7, #2]
 800fdc8:	18d1      	adds	r1, r2, r3
 800fdca:	7eba      	ldrb	r2, [r7, #26]
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	9300      	str	r3, [sp, #0]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	6939      	ldr	r1, [r7, #16]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7ff fea7 	bl	800fb28 <tcp_create_segment>
 800fdda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d063      	beq.n	800feaa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7fb fdd4 	bl	800b994 <pbuf_clen>
 800fdec:	4603      	mov	r3, r0
 800fdee:	461a      	mov	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdf6:	1a9b      	subs	r3, r3, r2
 800fdf8:	b29a      	uxth	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	6858      	ldr	r0, [r3, #4]
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	891a      	ldrh	r2, [r3, #8]
 800fe0a:	89bb      	ldrh	r3, [r7, #12]
 800fe0c:	1ad3      	subs	r3, r2, r3
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	4619      	mov	r1, r3
 800fe12:	f7fb fbab 	bl	800b56c <pbuf_realloc>
  useg->len -= remainder;
 800fe16:	697b      	ldr	r3, [r7, #20]
 800fe18:	891a      	ldrh	r2, [r3, #8]
 800fe1a:	89bb      	ldrh	r3, [r7, #12]
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	899b      	ldrh	r3, [r3, #12]
 800fe2a:	b29c      	uxth	r4, r3
 800fe2c:	7efb      	ldrb	r3, [r7, #27]
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fa f975 	bl	800a120 <lwip_htons>
 800fe36:	4603      	mov	r3, r0
 800fe38:	461a      	mov	r2, r3
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	68db      	ldr	r3, [r3, #12]
 800fe3e:	4322      	orrs	r2, r4
 800fe40:	b292      	uxth	r2, r2
 800fe42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	685b      	ldr	r3, [r3, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fb fda3 	bl	800b994 <pbuf_clen>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	461a      	mov	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe58:	4413      	add	r3, r2
 800fe5a:	b29a      	uxth	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe62:	69fb      	ldr	r3, [r7, #28]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fb fd94 	bl	800b994 <pbuf_clen>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	461a      	mov	r2, r3
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe76:	4413      	add	r3, r2
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	69fa      	ldr	r2, [r7, #28]
 800fe8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d103      	bne.n	800fe9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	e016      	b.n	800fed0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fea2:	bf00      	nop
 800fea4:	e002      	b.n	800feac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fea6:	bf00      	nop
 800fea8:	e000      	b.n	800feac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800feaa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d006      	beq.n	800fec0 <tcp_split_unsent_seg+0x25c>
 800feb2:	4b09      	ldr	r3, [pc, #36]	; (800fed8 <tcp_split_unsent_seg+0x274>)
 800feb4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800feb8:	490d      	ldr	r1, [pc, #52]	; (800fef0 <tcp_split_unsent_seg+0x28c>)
 800feba:	4809      	ldr	r0, [pc, #36]	; (800fee0 <tcp_split_unsent_seg+0x27c>)
 800febc:	f004 f8a8 	bl	8014010 <iprintf>
  if (p != NULL) {
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d002      	beq.n	800fecc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fec6:	6938      	ldr	r0, [r7, #16]
 800fec8:	f7fb fcd6 	bl	800b878 <pbuf_free>
  }

  return ERR_MEM;
 800fecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3724      	adds	r7, #36	; 0x24
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd90      	pop	{r4, r7, pc}
 800fed8:	08016d78 	.word	0x08016d78
 800fedc:	0801710c 	.word	0x0801710c
 800fee0:	08016dcc 	.word	0x08016dcc
 800fee4:	08017130 	.word	0x08017130
 800fee8:	08017154 	.word	0x08017154
 800feec:	08017164 	.word	0x08017164
 800fef0:	08017174 	.word	0x08017174

0800fef4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fef4:	b590      	push	{r4, r7, lr}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <tcp_send_fin+0x1c>
 800ff02:	4b21      	ldr	r3, [pc, #132]	; (800ff88 <tcp_send_fin+0x94>)
 800ff04:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ff08:	4920      	ldr	r1, [pc, #128]	; (800ff8c <tcp_send_fin+0x98>)
 800ff0a:	4821      	ldr	r0, [pc, #132]	; (800ff90 <tcp_send_fin+0x9c>)
 800ff0c:	f004 f880 	bl	8014010 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d02e      	beq.n	800ff76 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff1c:	60fb      	str	r3, [r7, #12]
 800ff1e:	e002      	b.n	800ff26 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1f8      	bne.n	800ff20 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	899b      	ldrh	r3, [r3, #12]
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7fa f8f2 	bl	800a120 <lwip_htons>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	f003 0307 	and.w	r3, r3, #7
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d116      	bne.n	800ff76 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	899b      	ldrh	r3, [r3, #12]
 800ff4e:	b29c      	uxth	r4, r3
 800ff50:	2001      	movs	r0, #1
 800ff52:	f7fa f8e5 	bl	800a120 <lwip_htons>
 800ff56:	4603      	mov	r3, r0
 800ff58:	461a      	mov	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	68db      	ldr	r3, [r3, #12]
 800ff5e:	4322      	orrs	r2, r4
 800ff60:	b292      	uxth	r2, r2
 800ff62:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	8b5b      	ldrh	r3, [r3, #26]
 800ff68:	f043 0320 	orr.w	r3, r3, #32
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ff72:	2300      	movs	r3, #0
 800ff74:	e004      	b.n	800ff80 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ff76:	2101      	movs	r1, #1
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f80b 	bl	800ff94 <tcp_enqueue_flags>
 800ff7e:	4603      	mov	r3, r0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3714      	adds	r7, #20
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd90      	pop	{r4, r7, pc}
 800ff88:	08016d78 	.word	0x08016d78
 800ff8c:	08017180 	.word	0x08017180
 800ff90:	08016dcc 	.word	0x08016dcc

0800ff94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b08a      	sub	sp, #40	; 0x28
 800ff98:	af02      	add	r7, sp, #8
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ffa8:	78fb      	ldrb	r3, [r7, #3]
 800ffaa:	f003 0303 	and.w	r3, r3, #3
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d106      	bne.n	800ffc0 <tcp_enqueue_flags+0x2c>
 800ffb2:	4b67      	ldr	r3, [pc, #412]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 800ffb4:	f240 4211 	movw	r2, #1041	; 0x411
 800ffb8:	4966      	ldr	r1, [pc, #408]	; (8010154 <tcp_enqueue_flags+0x1c0>)
 800ffba:	4867      	ldr	r0, [pc, #412]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 800ffbc:	f004 f828 	bl	8014010 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d106      	bne.n	800ffd4 <tcp_enqueue_flags+0x40>
 800ffc6:	4b62      	ldr	r3, [pc, #392]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 800ffc8:	f240 4213 	movw	r2, #1043	; 0x413
 800ffcc:	4963      	ldr	r1, [pc, #396]	; (801015c <tcp_enqueue_flags+0x1c8>)
 800ffce:	4862      	ldr	r0, [pc, #392]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 800ffd0:	f004 f81e 	bl	8014010 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ffd4:	78fb      	ldrb	r3, [r7, #3]
 800ffd6:	f003 0302 	and.w	r3, r3, #2
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ffe2:	7ffb      	ldrb	r3, [r7, #31]
 800ffe4:	009b      	lsls	r3, r3, #2
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	f003 0304 	and.w	r3, r3, #4
 800ffec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ffee:	7dfb      	ldrb	r3, [r7, #23]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fff6:	4619      	mov	r1, r3
 800fff8:	2036      	movs	r0, #54	; 0x36
 800fffa:	f7fb f959 	bl	800b2b0 <pbuf_alloc>
 800fffe:	6138      	str	r0, [r7, #16]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d109      	bne.n	801001a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	8b5b      	ldrh	r3, [r3, #26]
 801000a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801000e:	b29a      	uxth	r2, r3
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010014:	f04f 33ff 	mov.w	r3, #4294967295
 8010018:	e095      	b.n	8010146 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	895a      	ldrh	r2, [r3, #10]
 801001e:	7dfb      	ldrb	r3, [r7, #23]
 8010020:	b29b      	uxth	r3, r3
 8010022:	429a      	cmp	r2, r3
 8010024:	d206      	bcs.n	8010034 <tcp_enqueue_flags+0xa0>
 8010026:	4b4a      	ldr	r3, [pc, #296]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 8010028:	f240 4239 	movw	r2, #1081	; 0x439
 801002c:	494c      	ldr	r1, [pc, #304]	; (8010160 <tcp_enqueue_flags+0x1cc>)
 801002e:	484a      	ldr	r0, [pc, #296]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 8010030:	f003 ffee 	bl	8014010 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010038:	78fa      	ldrb	r2, [r7, #3]
 801003a:	7ffb      	ldrb	r3, [r7, #31]
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	460b      	mov	r3, r1
 8010040:	6939      	ldr	r1, [r7, #16]
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7ff fd70 	bl	800fb28 <tcp_create_segment>
 8010048:	60f8      	str	r0, [r7, #12]
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d109      	bne.n	8010064 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8b5b      	ldrh	r3, [r3, #26]
 8010054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010058:	b29a      	uxth	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801005e:	f04f 33ff 	mov.w	r3, #4294967295
 8010062:	e070      	b.n	8010146 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	f003 0303 	and.w	r3, r3, #3
 801006c:	2b00      	cmp	r3, #0
 801006e:	d006      	beq.n	801007e <tcp_enqueue_flags+0xea>
 8010070:	4b37      	ldr	r3, [pc, #220]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 8010072:	f240 4242 	movw	r2, #1090	; 0x442
 8010076:	493b      	ldr	r1, [pc, #236]	; (8010164 <tcp_enqueue_flags+0x1d0>)
 8010078:	4837      	ldr	r0, [pc, #220]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 801007a:	f003 ffc9 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	891b      	ldrh	r3, [r3, #8]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d006      	beq.n	8010094 <tcp_enqueue_flags+0x100>
 8010086:	4b32      	ldr	r3, [pc, #200]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 8010088:	f240 4243 	movw	r2, #1091	; 0x443
 801008c:	4936      	ldr	r1, [pc, #216]	; (8010168 <tcp_enqueue_flags+0x1d4>)
 801008e:	4832      	ldr	r0, [pc, #200]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 8010090:	f003 ffbe 	bl	8014010 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010098:	2b00      	cmp	r3, #0
 801009a:	d103      	bne.n	80100a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	68fa      	ldr	r2, [r7, #12]
 80100a0:	66da      	str	r2, [r3, #108]	; 0x6c
 80100a2:	e00d      	b.n	80100c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a8:	61bb      	str	r3, [r7, #24]
 80100aa:	e002      	b.n	80100b2 <tcp_enqueue_flags+0x11e>
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	61bb      	str	r3, [r7, #24]
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d1f8      	bne.n	80100ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	68fa      	ldr	r2, [r7, #12]
 80100be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80100c8:	78fb      	ldrb	r3, [r7, #3]
 80100ca:	f003 0302 	and.w	r3, r3, #2
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d104      	bne.n	80100dc <tcp_enqueue_flags+0x148>
 80100d2:	78fb      	ldrb	r3, [r7, #3]
 80100d4:	f003 0301 	and.w	r3, r3, #1
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d004      	beq.n	80100e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80100e0:	1c5a      	adds	r2, r3, #1
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80100e6:	78fb      	ldrb	r3, [r7, #3]
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d006      	beq.n	80100fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	8b5b      	ldrh	r3, [r3, #26]
 80100f4:	f043 0320 	orr.w	r3, r3, #32
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	4618      	mov	r0, r3
 8010104:	f7fb fc46 	bl	800b994 <pbuf_clen>
 8010108:	4603      	mov	r3, r0
 801010a:	461a      	mov	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010112:	4413      	add	r3, r2
 8010114:	b29a      	uxth	r2, r3
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00e      	beq.n	8010144 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10a      	bne.n	8010144 <tcp_enqueue_flags+0x1b0>
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010132:	2b00      	cmp	r3, #0
 8010134:	d106      	bne.n	8010144 <tcp_enqueue_flags+0x1b0>
 8010136:	4b06      	ldr	r3, [pc, #24]	; (8010150 <tcp_enqueue_flags+0x1bc>)
 8010138:	f240 4265 	movw	r2, #1125	; 0x465
 801013c:	490b      	ldr	r1, [pc, #44]	; (801016c <tcp_enqueue_flags+0x1d8>)
 801013e:	4806      	ldr	r0, [pc, #24]	; (8010158 <tcp_enqueue_flags+0x1c4>)
 8010140:	f003 ff66 	bl	8014010 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010144:	2300      	movs	r3, #0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3720      	adds	r7, #32
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	08016d78 	.word	0x08016d78
 8010154:	0801719c 	.word	0x0801719c
 8010158:	08016dcc 	.word	0x08016dcc
 801015c:	080171f4 	.word	0x080171f4
 8010160:	08017214 	.word	0x08017214
 8010164:	08017250 	.word	0x08017250
 8010168:	08017268 	.word	0x08017268
 801016c:	08017294 	.word	0x08017294

08010170 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010170:	b5b0      	push	{r4, r5, r7, lr}
 8010172:	b08a      	sub	sp, #40	; 0x28
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <tcp_output+0x1c>
 801017e:	4b9e      	ldr	r3, [pc, #632]	; (80103f8 <tcp_output+0x288>)
 8010180:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010184:	499d      	ldr	r1, [pc, #628]	; (80103fc <tcp_output+0x28c>)
 8010186:	489e      	ldr	r0, [pc, #632]	; (8010400 <tcp_output+0x290>)
 8010188:	f003 ff42 	bl	8014010 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	7d1b      	ldrb	r3, [r3, #20]
 8010190:	2b01      	cmp	r3, #1
 8010192:	d106      	bne.n	80101a2 <tcp_output+0x32>
 8010194:	4b98      	ldr	r3, [pc, #608]	; (80103f8 <tcp_output+0x288>)
 8010196:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801019a:	499a      	ldr	r1, [pc, #616]	; (8010404 <tcp_output+0x294>)
 801019c:	4898      	ldr	r0, [pc, #608]	; (8010400 <tcp_output+0x290>)
 801019e:	f003 ff37 	bl	8014010 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80101a2:	4b99      	ldr	r3, [pc, #612]	; (8010408 <tcp_output+0x298>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d101      	bne.n	80101b0 <tcp_output+0x40>
    return ERR_OK;
 80101ac:	2300      	movs	r3, #0
 80101ae:	e1ce      	b.n	801054e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101bc:	4293      	cmp	r3, r2
 80101be:	bf28      	it	cs
 80101c0:	4613      	movcs	r3, r2
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80101cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10b      	bne.n	80101ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	8b5b      	ldrh	r3, [r3, #26]
 80101d6:	f003 0302 	and.w	r3, r3, #2
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 81aa 	beq.w	8010534 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fdcb 	bl	8010d7c <tcp_send_empty_ack>
 80101e6:	4603      	mov	r3, r0
 80101e8:	e1b1      	b.n	801054e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80101ea:	6879      	ldr	r1, [r7, #4]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3304      	adds	r3, #4
 80101f0:	461a      	mov	r2, r3
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7ff fc7c 	bl	800faf0 <tcp_route>
 80101f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d102      	bne.n	8010206 <tcp_output+0x96>
    return ERR_RTE;
 8010200:	f06f 0303 	mvn.w	r3, #3
 8010204:	e1a3      	b.n	801054e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d003      	beq.n	8010214 <tcp_output+0xa4>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d111      	bne.n	8010238 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <tcp_output+0xb0>
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	3304      	adds	r3, #4
 801021e:	e000      	b.n	8010222 <tcp_output+0xb2>
 8010220:	2300      	movs	r3, #0
 8010222:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <tcp_output+0xc0>
      return ERR_RTE;
 801022a:	f06f 0303 	mvn.w	r3, #3
 801022e:	e18e      	b.n	801054e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	4618      	mov	r0, r3
 8010240:	f7f9 ff83 	bl	800a14a <lwip_htonl>
 8010244:	4602      	mov	r2, r0
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801024e:	8912      	ldrh	r2, [r2, #8]
 8010250:	4413      	add	r3, r2
 8010252:	69ba      	ldr	r2, [r7, #24]
 8010254:	429a      	cmp	r2, r3
 8010256:	d227      	bcs.n	80102a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801025e:	461a      	mov	r2, r3
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	4293      	cmp	r3, r2
 8010264:	d114      	bne.n	8010290 <tcp_output+0x120>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801026a:	2b00      	cmp	r3, #0
 801026c:	d110      	bne.n	8010290 <tcp_output+0x120>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010274:	2b00      	cmp	r3, #0
 8010276:	d10b      	bne.n	8010290 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	8b5b      	ldrh	r3, [r3, #26]
 8010294:	f003 0302 	and.w	r3, r3, #2
 8010298:	2b00      	cmp	r3, #0
 801029a:	f000 814d 	beq.w	8010538 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 fd6c 	bl	8010d7c <tcp_send_empty_ack>
 80102a4:	4603      	mov	r3, r0
 80102a6:	e152      	b.n	801054e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 811c 	beq.w	80104f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80102be:	e002      	b.n	80102c6 <tcp_output+0x156>
 80102c0:	6a3b      	ldr	r3, [r7, #32]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	623b      	str	r3, [r7, #32]
 80102c6:	6a3b      	ldr	r3, [r7, #32]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d1f8      	bne.n	80102c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80102ce:	e112      	b.n	80104f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80102d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	899b      	ldrh	r3, [r3, #12]
 80102d6:	b29b      	uxth	r3, r3
 80102d8:	4618      	mov	r0, r3
 80102da:	f7f9 ff21 	bl	800a120 <lwip_htons>
 80102de:	4603      	mov	r3, r0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	f003 0304 	and.w	r3, r3, #4
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d006      	beq.n	80102f8 <tcp_output+0x188>
 80102ea:	4b43      	ldr	r3, [pc, #268]	; (80103f8 <tcp_output+0x288>)
 80102ec:	f240 5236 	movw	r2, #1334	; 0x536
 80102f0:	4946      	ldr	r1, [pc, #280]	; (801040c <tcp_output+0x29c>)
 80102f2:	4843      	ldr	r0, [pc, #268]	; (8010400 <tcp_output+0x290>)
 80102f4:	f003 fe8c 	bl	8014010 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d01f      	beq.n	8010340 <tcp_output+0x1d0>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	8b5b      	ldrh	r3, [r3, #26]
 8010304:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010308:	2b00      	cmp	r3, #0
 801030a:	d119      	bne.n	8010340 <tcp_output+0x1d0>
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00b      	beq.n	801032c <tcp_output+0x1bc>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d110      	bne.n	8010340 <tcp_output+0x1d0>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010322:	891a      	ldrh	r2, [r3, #8]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010328:	429a      	cmp	r2, r3
 801032a:	d209      	bcs.n	8010340 <tcp_output+0x1d0>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010332:	2b00      	cmp	r3, #0
 8010334:	d004      	beq.n	8010340 <tcp_output+0x1d0>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801033c:	2b08      	cmp	r3, #8
 801033e:	d901      	bls.n	8010344 <tcp_output+0x1d4>
 8010340:	2301      	movs	r3, #1
 8010342:	e000      	b.n	8010346 <tcp_output+0x1d6>
 8010344:	2300      	movs	r3, #0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d106      	bne.n	8010358 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	8b5b      	ldrh	r3, [r3, #26]
 801034e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010352:	2b00      	cmp	r3, #0
 8010354:	f000 80e4 	beq.w	8010520 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	7d1b      	ldrb	r3, [r3, #20]
 801035c:	2b02      	cmp	r3, #2
 801035e:	d00d      	beq.n	801037c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010362:	68db      	ldr	r3, [r3, #12]
 8010364:	899b      	ldrh	r3, [r3, #12]
 8010366:	b29c      	uxth	r4, r3
 8010368:	2010      	movs	r0, #16
 801036a:	f7f9 fed9 	bl	800a120 <lwip_htons>
 801036e:	4603      	mov	r3, r0
 8010370:	461a      	mov	r2, r3
 8010372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010374:	68db      	ldr	r3, [r3, #12]
 8010376:	4322      	orrs	r2, r4
 8010378:	b292      	uxth	r2, r2
 801037a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	6879      	ldr	r1, [r7, #4]
 8010380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010382:	f000 f909 	bl	8010598 <tcp_output_segment>
 8010386:	4603      	mov	r3, r0
 8010388:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801038a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	8b5b      	ldrh	r3, [r3, #26]
 8010396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801039a:	b29a      	uxth	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	835a      	strh	r2, [r3, #26]
      return err;
 80103a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103a4:	e0d3      	b.n	801054e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	7d1b      	ldrb	r3, [r3, #20]
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d006      	beq.n	80103c4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	8b5b      	ldrh	r3, [r3, #26]
 80103ba:	f023 0303 	bic.w	r3, r3, #3
 80103be:	b29a      	uxth	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	68db      	ldr	r3, [r3, #12]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7f9 febd 	bl	800a14a <lwip_htonl>
 80103d0:	4604      	mov	r4, r0
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	891b      	ldrh	r3, [r3, #8]
 80103d6:	461d      	mov	r5, r3
 80103d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	899b      	ldrh	r3, [r3, #12]
 80103de:	b29b      	uxth	r3, r3
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7f9 fe9d 	bl	800a120 <lwip_htons>
 80103e6:	4603      	mov	r3, r0
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	f003 0303 	and.w	r3, r3, #3
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00e      	beq.n	8010410 <tcp_output+0x2a0>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e00d      	b.n	8010412 <tcp_output+0x2a2>
 80103f6:	bf00      	nop
 80103f8:	08016d78 	.word	0x08016d78
 80103fc:	080172bc 	.word	0x080172bc
 8010400:	08016dcc 	.word	0x08016dcc
 8010404:	080172d4 	.word	0x080172d4
 8010408:	2000b958 	.word	0x2000b958
 801040c:	080172fc 	.word	0x080172fc
 8010410:	2300      	movs	r3, #0
 8010412:	442b      	add	r3, r5
 8010414:	4423      	add	r3, r4
 8010416:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	2b00      	cmp	r3, #0
 8010422:	da02      	bge.n	801042a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801042a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042c:	891b      	ldrh	r3, [r3, #8]
 801042e:	461c      	mov	r4, r3
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	68db      	ldr	r3, [r3, #12]
 8010434:	899b      	ldrh	r3, [r3, #12]
 8010436:	b29b      	uxth	r3, r3
 8010438:	4618      	mov	r0, r3
 801043a:	f7f9 fe71 	bl	800a120 <lwip_htons>
 801043e:	4603      	mov	r3, r0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	f003 0303 	and.w	r3, r3, #3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <tcp_output+0x2de>
 801044a:	2301      	movs	r3, #1
 801044c:	e000      	b.n	8010450 <tcp_output+0x2e0>
 801044e:	2300      	movs	r3, #0
 8010450:	4423      	add	r3, r4
 8010452:	2b00      	cmp	r3, #0
 8010454:	d049      	beq.n	80104ea <tcp_output+0x37a>
      seg->next = NULL;
 8010456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010458:	2200      	movs	r2, #0
 801045a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010460:	2b00      	cmp	r3, #0
 8010462:	d105      	bne.n	8010470 <tcp_output+0x300>
        pcb->unacked = seg;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010468:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801046a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801046c:	623b      	str	r3, [r7, #32]
 801046e:	e03f      	b.n	80104f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f7f9 fe67 	bl	800a14a <lwip_htonl>
 801047c:	4604      	mov	r4, r0
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	68db      	ldr	r3, [r3, #12]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	4618      	mov	r0, r3
 8010486:	f7f9 fe60 	bl	800a14a <lwip_htonl>
 801048a:	4603      	mov	r3, r0
 801048c:	1ae3      	subs	r3, r4, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	da24      	bge.n	80104dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	3370      	adds	r3, #112	; 0x70
 8010496:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010498:	e002      	b.n	80104a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801049a:	69fb      	ldr	r3, [r7, #28]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d011      	beq.n	80104cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80104a8:	69fb      	ldr	r3, [r7, #28]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7f9 fe4a 	bl	800a14a <lwip_htonl>
 80104b6:	4604      	mov	r4, r0
 80104b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	4618      	mov	r0, r3
 80104c0:	f7f9 fe43 	bl	800a14a <lwip_htonl>
 80104c4:	4603      	mov	r3, r0
 80104c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dbe6      	blt.n	801049a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80104d4:	69fb      	ldr	r3, [r7, #28]
 80104d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104d8:	601a      	str	r2, [r3, #0]
 80104da:	e009      	b.n	80104f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	623b      	str	r3, [r7, #32]
 80104e8:	e002      	b.n	80104f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80104ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80104ec:	f7fc fc43 	bl	800cd76 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80104f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d012      	beq.n	8010522 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	68db      	ldr	r3, [r3, #12]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	4618      	mov	r0, r3
 8010504:	f7f9 fe21 	bl	800a14a <lwip_htonl>
 8010508:	4602      	mov	r2, r0
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801050e:	1ad3      	subs	r3, r2, r3
 8010510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010512:	8912      	ldrh	r2, [r2, #8]
 8010514:	4413      	add	r3, r2
  while (seg != NULL &&
 8010516:	69ba      	ldr	r2, [r7, #24]
 8010518:	429a      	cmp	r2, r3
 801051a:	f4bf aed9 	bcs.w	80102d0 <tcp_output+0x160>
 801051e:	e000      	b.n	8010522 <tcp_output+0x3b2>
      break;
 8010520:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010526:	2b00      	cmp	r3, #0
 8010528:	d108      	bne.n	801053c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010532:	e004      	b.n	801053e <tcp_output+0x3ce>
    goto output_done;
 8010534:	bf00      	nop
 8010536:	e002      	b.n	801053e <tcp_output+0x3ce>
    goto output_done;
 8010538:	bf00      	nop
 801053a:	e000      	b.n	801053e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801053c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	8b5b      	ldrh	r3, [r3, #26]
 8010542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801054c:	2300      	movs	r3, #0
}
 801054e:	4618      	mov	r0, r3
 8010550:	3728      	adds	r7, #40	; 0x28
 8010552:	46bd      	mov	sp, r7
 8010554:	bdb0      	pop	{r4, r5, r7, pc}
 8010556:	bf00      	nop

08010558 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d106      	bne.n	8010574 <tcp_output_segment_busy+0x1c>
 8010566:	4b09      	ldr	r3, [pc, #36]	; (801058c <tcp_output_segment_busy+0x34>)
 8010568:	f240 529a 	movw	r2, #1434	; 0x59a
 801056c:	4908      	ldr	r1, [pc, #32]	; (8010590 <tcp_output_segment_busy+0x38>)
 801056e:	4809      	ldr	r0, [pc, #36]	; (8010594 <tcp_output_segment_busy+0x3c>)
 8010570:	f003 fd4e 	bl	8014010 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	7b9b      	ldrb	r3, [r3, #14]
 801057a:	2b01      	cmp	r3, #1
 801057c:	d001      	beq.n	8010582 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801057e:	2301      	movs	r3, #1
 8010580:	e000      	b.n	8010584 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010582:	2300      	movs	r3, #0
}
 8010584:	4618      	mov	r0, r3
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	08016d78 	.word	0x08016d78
 8010590:	08017314 	.word	0x08017314
 8010594:	08016dcc 	.word	0x08016dcc

08010598 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010598:	b5b0      	push	{r4, r5, r7, lr}
 801059a:	b08c      	sub	sp, #48	; 0x30
 801059c:	af04      	add	r7, sp, #16
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_output_segment+0x20>
 80105aa:	4b63      	ldr	r3, [pc, #396]	; (8010738 <tcp_output_segment+0x1a0>)
 80105ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80105b0:	4962      	ldr	r1, [pc, #392]	; (801073c <tcp_output_segment+0x1a4>)
 80105b2:	4863      	ldr	r0, [pc, #396]	; (8010740 <tcp_output_segment+0x1a8>)
 80105b4:	f003 fd2c 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d106      	bne.n	80105cc <tcp_output_segment+0x34>
 80105be:	4b5e      	ldr	r3, [pc, #376]	; (8010738 <tcp_output_segment+0x1a0>)
 80105c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80105c4:	495f      	ldr	r1, [pc, #380]	; (8010744 <tcp_output_segment+0x1ac>)
 80105c6:	485e      	ldr	r0, [pc, #376]	; (8010740 <tcp_output_segment+0x1a8>)
 80105c8:	f003 fd22 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <tcp_output_segment+0x48>
 80105d2:	4b59      	ldr	r3, [pc, #356]	; (8010738 <tcp_output_segment+0x1a0>)
 80105d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80105d8:	495b      	ldr	r1, [pc, #364]	; (8010748 <tcp_output_segment+0x1b0>)
 80105da:	4859      	ldr	r0, [pc, #356]	; (8010740 <tcp_output_segment+0x1a8>)
 80105dc:	f003 fd18 	bl	8014010 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7ff ffb9 	bl	8010558 <tcp_output_segment_busy>
 80105e6:	4603      	mov	r3, r0
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d001      	beq.n	80105f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	e09f      	b.n	8010730 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	68dc      	ldr	r4, [r3, #12]
 80105f8:	4610      	mov	r0, r2
 80105fa:	f7f9 fda6 	bl	800a14a <lwip_htonl>
 80105fe:	4603      	mov	r3, r0
 8010600:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	68dc      	ldr	r4, [r3, #12]
 801060a:	4610      	mov	r0, r2
 801060c:	f7f9 fd88 	bl	800a120 <lwip_htons>
 8010610:	4603      	mov	r3, r0
 8010612:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010618:	68ba      	ldr	r2, [r7, #8]
 801061a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801061c:	441a      	add	r2, r3
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	68db      	ldr	r3, [r3, #12]
 8010626:	3314      	adds	r3, #20
 8010628:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	7a9b      	ldrb	r3, [r3, #10]
 801062e:	f003 0301 	and.w	r3, r3, #1
 8010632:	2b00      	cmp	r3, #0
 8010634:	d015      	beq.n	8010662 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	3304      	adds	r3, #4
 801063a:	461a      	mov	r2, r3
 801063c:	6879      	ldr	r1, [r7, #4]
 801063e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010642:	f7fc fe8f 	bl	800d364 <tcp_eff_send_mss_netif>
 8010646:	4603      	mov	r3, r0
 8010648:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801064a:	8b7b      	ldrh	r3, [r7, #26]
 801064c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010650:	4618      	mov	r0, r3
 8010652:	f7f9 fd7a 	bl	800a14a <lwip_htonl>
 8010656:	4602      	mov	r2, r0
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	3304      	adds	r3, #4
 8010660:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010668:	2b00      	cmp	r3, #0
 801066a:	da02      	bge.n	8010672 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2200      	movs	r2, #0
 8010670:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010676:	2b00      	cmp	r3, #0
 8010678:	d10c      	bne.n	8010694 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801067a:	4b34      	ldr	r3, [pc, #208]	; (801074c <tcp_output_segment+0x1b4>)
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	68db      	ldr	r3, [r3, #12]
 8010686:	685b      	ldr	r3, [r3, #4]
 8010688:	4618      	mov	r0, r3
 801068a:	f7f9 fd5e 	bl	800a14a <lwip_htonl>
 801068e:	4602      	mov	r2, r0
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	68da      	ldr	r2, [r3, #12]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	685b      	ldr	r3, [r3, #4]
 80106a6:	8959      	ldrh	r1, [r3, #10]
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	8b3a      	ldrh	r2, [r7, #24]
 80106ae:	1a8a      	subs	r2, r1, r2
 80106b0:	b292      	uxth	r2, r2
 80106b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	8919      	ldrh	r1, [r3, #8]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	8b3a      	ldrh	r2, [r7, #24]
 80106c0:	1a8a      	subs	r2, r1, r2
 80106c2:	b292      	uxth	r2, r2
 80106c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	68fa      	ldr	r2, [r7, #12]
 80106cc:	68d2      	ldr	r2, [r2, #12]
 80106ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	2200      	movs	r2, #0
 80106d6:	741a      	strb	r2, [r3, #16]
 80106d8:	2200      	movs	r2, #0
 80106da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	68db      	ldr	r3, [r3, #12]
 80106e0:	f103 0214 	add.w	r2, r3, #20
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	7a9b      	ldrb	r3, [r3, #10]
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	f003 0304 	and.w	r3, r3, #4
 80106ee:	4413      	add	r3, r2
 80106f0:	69fa      	ldr	r2, [r7, #28]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d006      	beq.n	8010704 <tcp_output_segment+0x16c>
 80106f6:	4b10      	ldr	r3, [pc, #64]	; (8010738 <tcp_output_segment+0x1a0>)
 80106f8:	f240 621c 	movw	r2, #1564	; 0x61c
 80106fc:	4914      	ldr	r1, [pc, #80]	; (8010750 <tcp_output_segment+0x1b8>)
 80106fe:	4810      	ldr	r0, [pc, #64]	; (8010740 <tcp_output_segment+0x1a8>)
 8010700:	f003 fc86 	bl	8014010 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6858      	ldr	r0, [r3, #4]
 8010708:	68b9      	ldr	r1, [r7, #8]
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	1d1c      	adds	r4, r3, #4
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	7add      	ldrb	r5, [r3, #11]
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	7a9b      	ldrb	r3, [r3, #10]
 8010716:	687a      	ldr	r2, [r7, #4]
 8010718:	9202      	str	r2, [sp, #8]
 801071a:	2206      	movs	r2, #6
 801071c:	9201      	str	r2, [sp, #4]
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	462b      	mov	r3, r5
 8010722:	4622      	mov	r2, r4
 8010724:	f002 fa66 	bl	8012bf4 <ip4_output_if>
 8010728:	4603      	mov	r3, r0
 801072a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801072c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010730:	4618      	mov	r0, r3
 8010732:	3720      	adds	r7, #32
 8010734:	46bd      	mov	sp, r7
 8010736:	bdb0      	pop	{r4, r5, r7, pc}
 8010738:	08016d78 	.word	0x08016d78
 801073c:	0801733c 	.word	0x0801733c
 8010740:	08016dcc 	.word	0x08016dcc
 8010744:	0801735c 	.word	0x0801735c
 8010748:	0801737c 	.word	0x0801737c
 801074c:	2000b948 	.word	0x2000b948
 8010750:	080173a0 	.word	0x080173a0

08010754 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010754:	b5b0      	push	{r4, r5, r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <tcp_rexmit_rto_prepare+0x1c>
 8010762:	4b31      	ldr	r3, [pc, #196]	; (8010828 <tcp_rexmit_rto_prepare+0xd4>)
 8010764:	f240 6263 	movw	r2, #1635	; 0x663
 8010768:	4930      	ldr	r1, [pc, #192]	; (801082c <tcp_rexmit_rto_prepare+0xd8>)
 801076a:	4831      	ldr	r0, [pc, #196]	; (8010830 <tcp_rexmit_rto_prepare+0xdc>)
 801076c:	f003 fc50 	bl	8014010 <iprintf>

  if (pcb->unacked == NULL) {
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010774:	2b00      	cmp	r3, #0
 8010776:	d102      	bne.n	801077e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010778:	f06f 0305 	mvn.w	r3, #5
 801077c:	e050      	b.n	8010820 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010782:	60fb      	str	r3, [r7, #12]
 8010784:	e00b      	b.n	801079e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	f7ff fee6 	bl	8010558 <tcp_output_segment_busy>
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d002      	beq.n	8010798 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010792:	f06f 0305 	mvn.w	r3, #5
 8010796:	e043      	b.n	8010820 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	60fb      	str	r3, [r7, #12]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1ef      	bne.n	8010786 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80107a6:	68f8      	ldr	r0, [r7, #12]
 80107a8:	f7ff fed6 	bl	8010558 <tcp_output_segment_busy>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d002      	beq.n	80107b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80107b2:	f06f 0305 	mvn.w	r3, #5
 80107b6:	e033      	b.n	8010820 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	8b5b      	ldrh	r3, [r3, #26]
 80107d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80107d6:	b29a      	uxth	r2, r3
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	68db      	ldr	r3, [r3, #12]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7f9 fcb1 	bl	800a14a <lwip_htonl>
 80107e8:	4604      	mov	r4, r0
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	891b      	ldrh	r3, [r3, #8]
 80107ee:	461d      	mov	r5, r3
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	899b      	ldrh	r3, [r3, #12]
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f9 fc91 	bl	800a120 <lwip_htons>
 80107fe:	4603      	mov	r3, r0
 8010800:	b2db      	uxtb	r3, r3
 8010802:	f003 0303 	and.w	r3, r3, #3
 8010806:	2b00      	cmp	r3, #0
 8010808:	d001      	beq.n	801080e <tcp_rexmit_rto_prepare+0xba>
 801080a:	2301      	movs	r3, #1
 801080c:	e000      	b.n	8010810 <tcp_rexmit_rto_prepare+0xbc>
 801080e:	2300      	movs	r3, #0
 8010810:	442b      	add	r3, r5
 8010812:	18e2      	adds	r2, r4, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2200      	movs	r2, #0
 801081c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801081e:	2300      	movs	r3, #0
}
 8010820:	4618      	mov	r0, r3
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bdb0      	pop	{r4, r5, r7, pc}
 8010828:	08016d78 	.word	0x08016d78
 801082c:	080173b4 	.word	0x080173b4
 8010830:	08016dcc 	.word	0x08016dcc

08010834 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d106      	bne.n	8010850 <tcp_rexmit_rto_commit+0x1c>
 8010842:	4b0d      	ldr	r3, [pc, #52]	; (8010878 <tcp_rexmit_rto_commit+0x44>)
 8010844:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010848:	490c      	ldr	r1, [pc, #48]	; (801087c <tcp_rexmit_rto_commit+0x48>)
 801084a:	480d      	ldr	r0, [pc, #52]	; (8010880 <tcp_rexmit_rto_commit+0x4c>)
 801084c:	f003 fbe0 	bl	8014010 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010856:	2bff      	cmp	r3, #255	; 0xff
 8010858:	d007      	beq.n	801086a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010860:	3301      	adds	r3, #1
 8010862:	b2da      	uxtb	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f7ff fc80 	bl	8010170 <tcp_output>
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	08016d78 	.word	0x08016d78
 801087c:	080173d8 	.word	0x080173d8
 8010880:	08016dcc 	.word	0x08016dcc

08010884 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b082      	sub	sp, #8
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d106      	bne.n	80108a0 <tcp_rexmit_rto+0x1c>
 8010892:	4b0a      	ldr	r3, [pc, #40]	; (80108bc <tcp_rexmit_rto+0x38>)
 8010894:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010898:	4909      	ldr	r1, [pc, #36]	; (80108c0 <tcp_rexmit_rto+0x3c>)
 801089a:	480a      	ldr	r0, [pc, #40]	; (80108c4 <tcp_rexmit_rto+0x40>)
 801089c:	f003 fbb8 	bl	8014010 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7ff ff57 	bl	8010754 <tcp_rexmit_rto_prepare>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d102      	bne.n	80108b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff ffc1 	bl	8010834 <tcp_rexmit_rto_commit>
  }
}
 80108b2:	bf00      	nop
 80108b4:	3708      	adds	r7, #8
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
 80108ba:	bf00      	nop
 80108bc:	08016d78 	.word	0x08016d78
 80108c0:	080173fc 	.word	0x080173fc
 80108c4:	08016dcc 	.word	0x08016dcc

080108c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80108c8:	b590      	push	{r4, r7, lr}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d106      	bne.n	80108e4 <tcp_rexmit+0x1c>
 80108d6:	4b2f      	ldr	r3, [pc, #188]	; (8010994 <tcp_rexmit+0xcc>)
 80108d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80108dc:	492e      	ldr	r1, [pc, #184]	; (8010998 <tcp_rexmit+0xd0>)
 80108de:	482f      	ldr	r0, [pc, #188]	; (801099c <tcp_rexmit+0xd4>)
 80108e0:	f003 fb96 	bl	8014010 <iprintf>

  if (pcb->unacked == NULL) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d102      	bne.n	80108f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80108ec:	f06f 0305 	mvn.w	r3, #5
 80108f0:	e04c      	b.n	801098c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80108f8:	68b8      	ldr	r0, [r7, #8]
 80108fa:	f7ff fe2d 	bl	8010558 <tcp_output_segment_busy>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010904:	f06f 0305 	mvn.w	r3, #5
 8010908:	e040      	b.n	801098c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	336c      	adds	r3, #108	; 0x6c
 8010916:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010918:	e002      	b.n	8010920 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d011      	beq.n	801094c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	f7f9 fc0a 	bl	800a14a <lwip_htonl>
 8010936:	4604      	mov	r4, r0
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	4618      	mov	r0, r3
 8010940:	f7f9 fc03 	bl	800a14a <lwip_htonl>
 8010944:	4603      	mov	r3, r0
 8010946:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010948:	2b00      	cmp	r3, #0
 801094a:	dbe6      	blt.n	801091a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68ba      	ldr	r2, [r7, #8]
 8010958:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d103      	bne.n	801096a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2200      	movs	r2, #0
 8010966:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010970:	2bff      	cmp	r3, #255	; 0xff
 8010972:	d007      	beq.n	8010984 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801097a:	3301      	adds	r3, #1
 801097c:	b2da      	uxtb	r2, r3
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	2200      	movs	r2, #0
 8010988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801098a:	2300      	movs	r3, #0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3714      	adds	r7, #20
 8010990:	46bd      	mov	sp, r7
 8010992:	bd90      	pop	{r4, r7, pc}
 8010994:	08016d78 	.word	0x08016d78
 8010998:	08017418 	.word	0x08017418
 801099c:	08016dcc 	.word	0x08016dcc

080109a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <tcp_rexmit_fast+0x1c>
 80109ae:	4b2a      	ldr	r3, [pc, #168]	; (8010a58 <tcp_rexmit_fast+0xb8>)
 80109b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80109b4:	4929      	ldr	r1, [pc, #164]	; (8010a5c <tcp_rexmit_fast+0xbc>)
 80109b6:	482a      	ldr	r0, [pc, #168]	; (8010a60 <tcp_rexmit_fast+0xc0>)
 80109b8:	f003 fb2a 	bl	8014010 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d045      	beq.n	8010a50 <tcp_rexmit_fast+0xb0>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	8b5b      	ldrh	r3, [r3, #26]
 80109c8:	f003 0304 	and.w	r3, r3, #4
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d13f      	bne.n	8010a50 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff ff79 	bl	80108c8 <tcp_rexmit>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d139      	bne.n	8010a50 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80109e8:	4293      	cmp	r3, r2
 80109ea:	bf28      	it	cs
 80109ec:	4613      	movcs	r3, r2
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	da00      	bge.n	80109f6 <tcp_rexmit_fast+0x56>
 80109f4:	3301      	adds	r3, #1
 80109f6:	105b      	asrs	r3, r3, #1
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a06:	461a      	mov	r2, r3
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a0c:	005b      	lsls	r3, r3, #1
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d206      	bcs.n	8010a20 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a16:	005b      	lsls	r3, r3, #1
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	0049      	lsls	r1, r1, #1
 8010a2e:	440b      	add	r3, r1
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	4413      	add	r3, r2
 8010a34:	b29a      	uxth	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	8b5b      	ldrh	r3, [r3, #26]
 8010a40:	f043 0304 	orr.w	r3, r3, #4
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	08016d78 	.word	0x08016d78
 8010a5c:	08017430 	.word	0x08017430
 8010a60:	08016dcc 	.word	0x08016dcc

08010a64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b086      	sub	sp, #24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	607b      	str	r3, [r7, #4]
 8010a6e:	460b      	mov	r3, r1
 8010a70:	817b      	strh	r3, [r7, #10]
 8010a72:	4613      	mov	r3, r2
 8010a74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010a76:	897a      	ldrh	r2, [r7, #10]
 8010a78:	893b      	ldrh	r3, [r7, #8]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3314      	adds	r3, #20
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a86:	4619      	mov	r1, r3
 8010a88:	2022      	movs	r0, #34	; 0x22
 8010a8a:	f7fa fc11 	bl	800b2b0 <pbuf_alloc>
 8010a8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d04d      	beq.n	8010b32 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a96:	897b      	ldrh	r3, [r7, #10]
 8010a98:	3313      	adds	r3, #19
 8010a9a:	697a      	ldr	r2, [r7, #20]
 8010a9c:	8952      	ldrh	r2, [r2, #10]
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	db06      	blt.n	8010ab0 <tcp_output_alloc_header_common+0x4c>
 8010aa2:	4b26      	ldr	r3, [pc, #152]	; (8010b3c <tcp_output_alloc_header_common+0xd8>)
 8010aa4:	f240 7223 	movw	r2, #1827	; 0x723
 8010aa8:	4925      	ldr	r1, [pc, #148]	; (8010b40 <tcp_output_alloc_header_common+0xdc>)
 8010aaa:	4826      	ldr	r0, [pc, #152]	; (8010b44 <tcp_output_alloc_header_common+0xe0>)
 8010aac:	f003 fab0 	bl	8014010 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010ab6:	8c3b      	ldrh	r3, [r7, #32]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f9 fb31 	bl	800a120 <lwip_htons>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f9 fb29 	bl	800a120 <lwip_htons>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010adc:	68f8      	ldr	r0, [r7, #12]
 8010ade:	f7f9 fb34 	bl	800a14a <lwip_htonl>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010ae8:	897b      	ldrh	r3, [r7, #10]
 8010aea:	089b      	lsrs	r3, r3, #2
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	3305      	adds	r3, #5
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	031b      	lsls	r3, r3, #12
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	4313      	orrs	r3, r2
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7f9 fb0d 	bl	800a120 <lwip_htons>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7f9 fb05 	bl	800a120 <lwip_htons>
 8010b16:	4603      	mov	r3, r0
 8010b18:	461a      	mov	r2, r3
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	2200      	movs	r2, #0
 8010b22:	741a      	strb	r2, [r3, #16]
 8010b24:	2200      	movs	r2, #0
 8010b26:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010b28:	693b      	ldr	r3, [r7, #16]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	749a      	strb	r2, [r3, #18]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010b32:	697b      	ldr	r3, [r7, #20]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3718      	adds	r7, #24
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	08016d78 	.word	0x08016d78
 8010b40:	08017450 	.word	0x08017450
 8010b44:	08016dcc 	.word	0x08016dcc

08010b48 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010b48:	b5b0      	push	{r4, r5, r7, lr}
 8010b4a:	b08a      	sub	sp, #40	; 0x28
 8010b4c:	af04      	add	r7, sp, #16
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	607b      	str	r3, [r7, #4]
 8010b52:	460b      	mov	r3, r1
 8010b54:	817b      	strh	r3, [r7, #10]
 8010b56:	4613      	mov	r3, r2
 8010b58:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d106      	bne.n	8010b6e <tcp_output_alloc_header+0x26>
 8010b60:	4b15      	ldr	r3, [pc, #84]	; (8010bb8 <tcp_output_alloc_header+0x70>)
 8010b62:	f240 7242 	movw	r2, #1858	; 0x742
 8010b66:	4915      	ldr	r1, [pc, #84]	; (8010bbc <tcp_output_alloc_header+0x74>)
 8010b68:	4815      	ldr	r0, [pc, #84]	; (8010bc0 <tcp_output_alloc_header+0x78>)
 8010b6a:	f003 fa51 	bl	8014010 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	8adb      	ldrh	r3, [r3, #22]
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	8b12      	ldrh	r2, [r2, #24]
 8010b7a:	68f9      	ldr	r1, [r7, #12]
 8010b7c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010b7e:	893d      	ldrh	r5, [r7, #8]
 8010b80:	897c      	ldrh	r4, [r7, #10]
 8010b82:	9103      	str	r1, [sp, #12]
 8010b84:	2110      	movs	r1, #16
 8010b86:	9102      	str	r1, [sp, #8]
 8010b88:	9201      	str	r2, [sp, #4]
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	462a      	mov	r2, r5
 8010b90:	4621      	mov	r1, r4
 8010b92:	f7ff ff67 	bl	8010a64 <tcp_output_alloc_header_common>
 8010b96:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d006      	beq.n	8010bac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ba6:	441a      	add	r2, r3
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010bac:	697b      	ldr	r3, [r7, #20]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3718      	adds	r7, #24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	08016d78 	.word	0x08016d78
 8010bbc:	08017480 	.word	0x08017480
 8010bc0:	08016dcc 	.word	0x08016dcc

08010bc4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	4611      	mov	r1, r2
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	460b      	mov	r3, r1
 8010bd4:	71fb      	strb	r3, [r7, #7]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <tcp_output_fill_options+0x2e>
 8010be4:	4b13      	ldr	r3, [pc, #76]	; (8010c34 <tcp_output_fill_options+0x70>)
 8010be6:	f240 7256 	movw	r2, #1878	; 0x756
 8010bea:	4913      	ldr	r1, [pc, #76]	; (8010c38 <tcp_output_fill_options+0x74>)
 8010bec:	4813      	ldr	r0, [pc, #76]	; (8010c3c <tcp_output_fill_options+0x78>)
 8010bee:	f003 fa0f 	bl	8014010 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	3314      	adds	r3, #20
 8010bfc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	f103 0214 	add.w	r2, r3, #20
 8010c04:	8bfb      	ldrh	r3, [r7, #30]
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4619      	mov	r1, r3
 8010c0a:	79fb      	ldrb	r3, [r7, #7]
 8010c0c:	009b      	lsls	r3, r3, #2
 8010c0e:	f003 0304 	and.w	r3, r3, #4
 8010c12:	440b      	add	r3, r1
 8010c14:	4413      	add	r3, r2
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d006      	beq.n	8010c2a <tcp_output_fill_options+0x66>
 8010c1c:	4b05      	ldr	r3, [pc, #20]	; (8010c34 <tcp_output_fill_options+0x70>)
 8010c1e:	f240 7275 	movw	r2, #1909	; 0x775
 8010c22:	4907      	ldr	r1, [pc, #28]	; (8010c40 <tcp_output_fill_options+0x7c>)
 8010c24:	4805      	ldr	r0, [pc, #20]	; (8010c3c <tcp_output_fill_options+0x78>)
 8010c26:	f003 f9f3 	bl	8014010 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010c2a:	bf00      	nop
 8010c2c:	3720      	adds	r7, #32
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	08016d78 	.word	0x08016d78
 8010c38:	080174a8 	.word	0x080174a8
 8010c3c:	08016dcc 	.word	0x08016dcc
 8010c40:	080173a0 	.word	0x080173a0

08010c44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08a      	sub	sp, #40	; 0x28
 8010c48:	af04      	add	r7, sp, #16
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
 8010c50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d106      	bne.n	8010c66 <tcp_output_control_segment+0x22>
 8010c58:	4b1c      	ldr	r3, [pc, #112]	; (8010ccc <tcp_output_control_segment+0x88>)
 8010c5a:	f240 7287 	movw	r2, #1927	; 0x787
 8010c5e:	491c      	ldr	r1, [pc, #112]	; (8010cd0 <tcp_output_control_segment+0x8c>)
 8010c60:	481c      	ldr	r0, [pc, #112]	; (8010cd4 <tcp_output_control_segment+0x90>)
 8010c62:	f003 f9d5 	bl	8014010 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010c66:	683a      	ldr	r2, [r7, #0]
 8010c68:	6879      	ldr	r1, [r7, #4]
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f7fe ff40 	bl	800faf0 <tcp_route>
 8010c70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010c78:	23fc      	movs	r3, #252	; 0xfc
 8010c7a:	75fb      	strb	r3, [r7, #23]
 8010c7c:	e01c      	b.n	8010cb8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d006      	beq.n	8010c92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	7adb      	ldrb	r3, [r3, #11]
 8010c88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	7a9b      	ldrb	r3, [r3, #10]
 8010c8e:	757b      	strb	r3, [r7, #21]
 8010c90:	e003      	b.n	8010c9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010c92:	23ff      	movs	r3, #255	; 0xff
 8010c94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010c9a:	7dba      	ldrb	r2, [r7, #22]
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	9302      	str	r3, [sp, #8]
 8010ca0:	2306      	movs	r3, #6
 8010ca2:	9301      	str	r3, [sp, #4]
 8010ca4:	7d7b      	ldrb	r3, [r7, #21]
 8010ca6:	9300      	str	r3, [sp, #0]
 8010ca8:	4613      	mov	r3, r2
 8010caa:	683a      	ldr	r2, [r7, #0]
 8010cac:	6879      	ldr	r1, [r7, #4]
 8010cae:	68b8      	ldr	r0, [r7, #8]
 8010cb0:	f001 ffa0 	bl	8012bf4 <ip4_output_if>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010cb8:	68b8      	ldr	r0, [r7, #8]
 8010cba:	f7fa fddd 	bl	800b878 <pbuf_free>
  return err;
 8010cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3718      	adds	r7, #24
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bd80      	pop	{r7, pc}
 8010cca:	bf00      	nop
 8010ccc:	08016d78 	.word	0x08016d78
 8010cd0:	080174d0 	.word	0x080174d0
 8010cd4:	08016dcc 	.word	0x08016dcc

08010cd8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010cd8:	b590      	push	{r4, r7, lr}
 8010cda:	b08b      	sub	sp, #44	; 0x2c
 8010cdc:	af04      	add	r7, sp, #16
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d106      	bne.n	8010cfa <tcp_rst+0x22>
 8010cec:	4b1f      	ldr	r3, [pc, #124]	; (8010d6c <tcp_rst+0x94>)
 8010cee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010cf2:	491f      	ldr	r1, [pc, #124]	; (8010d70 <tcp_rst+0x98>)
 8010cf4:	481f      	ldr	r0, [pc, #124]	; (8010d74 <tcp_rst+0x9c>)
 8010cf6:	f003 f98b 	bl	8014010 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d106      	bne.n	8010d0e <tcp_rst+0x36>
 8010d00:	4b1a      	ldr	r3, [pc, #104]	; (8010d6c <tcp_rst+0x94>)
 8010d02:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010d06:	491c      	ldr	r1, [pc, #112]	; (8010d78 <tcp_rst+0xa0>)
 8010d08:	481a      	ldr	r0, [pc, #104]	; (8010d74 <tcp_rst+0x9c>)
 8010d0a:	f003 f981 	bl	8014010 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010d0e:	2300      	movs	r3, #0
 8010d10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010d12:	f246 0308 	movw	r3, #24584	; 0x6008
 8010d16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010d18:	7dfb      	ldrb	r3, [r7, #23]
 8010d1a:	b29c      	uxth	r4, r3
 8010d1c:	68b8      	ldr	r0, [r7, #8]
 8010d1e:	f7f9 fa14 	bl	800a14a <lwip_htonl>
 8010d22:	4602      	mov	r2, r0
 8010d24:	8abb      	ldrh	r3, [r7, #20]
 8010d26:	9303      	str	r3, [sp, #12]
 8010d28:	2314      	movs	r3, #20
 8010d2a:	9302      	str	r3, [sp, #8]
 8010d2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d2e:	9301      	str	r3, [sp, #4]
 8010d30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d32:	9300      	str	r3, [sp, #0]
 8010d34:	4613      	mov	r3, r2
 8010d36:	2200      	movs	r2, #0
 8010d38:	4621      	mov	r1, r4
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff fe92 	bl	8010a64 <tcp_output_alloc_header_common>
 8010d40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00c      	beq.n	8010d62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d48:	7dfb      	ldrb	r3, [r7, #23]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	6939      	ldr	r1, [r7, #16]
 8010d4e:	68f8      	ldr	r0, [r7, #12]
 8010d50:	f7ff ff38 	bl	8010bc4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d56:	683a      	ldr	r2, [r7, #0]
 8010d58:	6939      	ldr	r1, [r7, #16]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff ff72 	bl	8010c44 <tcp_output_control_segment>
 8010d60:	e000      	b.n	8010d64 <tcp_rst+0x8c>
    return;
 8010d62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010d64:	371c      	adds	r7, #28
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd90      	pop	{r4, r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	08016d78 	.word	0x08016d78
 8010d70:	080174fc 	.word	0x080174fc
 8010d74:	08016dcc 	.word	0x08016dcc
 8010d78:	08017518 	.word	0x08017518

08010d7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010d7c:	b590      	push	{r4, r7, lr}
 8010d7e:	b087      	sub	sp, #28
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010d84:	2300      	movs	r3, #0
 8010d86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d106      	bne.n	8010da0 <tcp_send_empty_ack+0x24>
 8010d92:	4b28      	ldr	r3, [pc, #160]	; (8010e34 <tcp_send_empty_ack+0xb8>)
 8010d94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010d98:	4927      	ldr	r1, [pc, #156]	; (8010e38 <tcp_send_empty_ack+0xbc>)
 8010d9a:	4828      	ldr	r0, [pc, #160]	; (8010e3c <tcp_send_empty_ack+0xc0>)
 8010d9c:	f003 f938 	bl	8014010 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	f003 0304 	and.w	r3, r3, #4
 8010daa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010dac:	7d7b      	ldrb	r3, [r7, #21]
 8010dae:	b29c      	uxth	r4, r3
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f9 f9c8 	bl	800a14a <lwip_htonl>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	4621      	mov	r1, r4
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7ff fec1 	bl	8010b48 <tcp_output_alloc_header>
 8010dc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d109      	bne.n	8010de2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	8b5b      	ldrh	r3, [r3, #26]
 8010dd2:	f043 0303 	orr.w	r3, r3, #3
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010ddc:	f06f 0301 	mvn.w	r3, #1
 8010de0:	e023      	b.n	8010e2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010de2:	7dbb      	ldrb	r3, [r7, #22]
 8010de4:	7dfa      	ldrb	r2, [r7, #23]
 8010de6:	6939      	ldr	r1, [r7, #16]
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f7ff feeb 	bl	8010bc4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010dee:	687a      	ldr	r2, [r7, #4]
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	3304      	adds	r3, #4
 8010df4:	6939      	ldr	r1, [r7, #16]
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff ff24 	bl	8010c44 <tcp_output_control_segment>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d007      	beq.n	8010e18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	8b5b      	ldrh	r3, [r3, #26]
 8010e0c:	f043 0303 	orr.w	r3, r3, #3
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	835a      	strh	r2, [r3, #26]
 8010e16:	e006      	b.n	8010e26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	8b5b      	ldrh	r3, [r3, #26]
 8010e1c:	f023 0303 	bic.w	r3, r3, #3
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	371c      	adds	r7, #28
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd90      	pop	{r4, r7, pc}
 8010e32:	bf00      	nop
 8010e34:	08016d78 	.word	0x08016d78
 8010e38:	08017534 	.word	0x08017534
 8010e3c:	08016dcc 	.word	0x08016dcc

08010e40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010e40:	b590      	push	{r4, r7, lr}
 8010e42:	b087      	sub	sp, #28
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e48:	2300      	movs	r3, #0
 8010e4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d106      	bne.n	8010e60 <tcp_keepalive+0x20>
 8010e52:	4b18      	ldr	r3, [pc, #96]	; (8010eb4 <tcp_keepalive+0x74>)
 8010e54:	f640 0224 	movw	r2, #2084	; 0x824
 8010e58:	4917      	ldr	r1, [pc, #92]	; (8010eb8 <tcp_keepalive+0x78>)
 8010e5a:	4818      	ldr	r0, [pc, #96]	; (8010ebc <tcp_keepalive+0x7c>)
 8010e5c:	f003 f8d8 	bl	8014010 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010e60:	7dfb      	ldrb	r3, [r7, #23]
 8010e62:	b29c      	uxth	r4, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e68:	3b01      	subs	r3, #1
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7f9 f96d 	bl	800a14a <lwip_htonl>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2200      	movs	r2, #0
 8010e74:	4621      	mov	r1, r4
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7ff fe66 	bl	8010b48 <tcp_output_alloc_header>
 8010e7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d102      	bne.n	8010e8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010e84:	f04f 33ff 	mov.w	r3, #4294967295
 8010e88:	e010      	b.n	8010eac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	6939      	ldr	r1, [r7, #16]
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7ff fe97 	bl	8010bc4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	3304      	adds	r3, #4
 8010e9c:	6939      	ldr	r1, [r7, #16]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f7ff fed0 	bl	8010c44 <tcp_output_control_segment>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	371c      	adds	r7, #28
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}
 8010eb4:	08016d78 	.word	0x08016d78
 8010eb8:	08017554 	.word	0x08017554
 8010ebc:	08016dcc 	.word	0x08016dcc

08010ec0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010ec0:	b590      	push	{r4, r7, lr}
 8010ec2:	b08b      	sub	sp, #44	; 0x2c
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d106      	bne.n	8010ee2 <tcp_zero_window_probe+0x22>
 8010ed4:	4b4c      	ldr	r3, [pc, #304]	; (8011008 <tcp_zero_window_probe+0x148>)
 8010ed6:	f640 024f 	movw	r2, #2127	; 0x84f
 8010eda:	494c      	ldr	r1, [pc, #304]	; (801100c <tcp_zero_window_probe+0x14c>)
 8010edc:	484c      	ldr	r0, [pc, #304]	; (8011010 <tcp_zero_window_probe+0x150>)
 8010ede:	f003 f897 	bl	8014010 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010ee8:	6a3b      	ldr	r3, [r7, #32]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e086      	b.n	8011000 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010ef8:	2bff      	cmp	r3, #255	; 0xff
 8010efa:	d007      	beq.n	8010f0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010f02:	3301      	adds	r3, #1
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	899b      	ldrh	r3, [r3, #12]
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7f9 f903 	bl	800a120 <lwip_htons>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d005      	beq.n	8010f32 <tcp_zero_window_probe+0x72>
 8010f26:	6a3b      	ldr	r3, [r7, #32]
 8010f28:	891b      	ldrh	r3, [r3, #8]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <tcp_zero_window_probe+0x72>
 8010f2e:	2301      	movs	r3, #1
 8010f30:	e000      	b.n	8010f34 <tcp_zero_window_probe+0x74>
 8010f32:	2300      	movs	r3, #0
 8010f34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010f36:	7ffb      	ldrb	r3, [r7, #31]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	bf0c      	ite	eq
 8010f3c:	2301      	moveq	r3, #1
 8010f3e:	2300      	movne	r3, #0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f48:	b299      	uxth	r1, r3
 8010f4a:	6a3b      	ldr	r3, [r7, #32]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	8bba      	ldrh	r2, [r7, #28]
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7ff fdf8 	bl	8010b48 <tcp_output_alloc_header>
 8010f58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d102      	bne.n	8010f66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010f60:	f04f 33ff 	mov.w	r3, #4294967295
 8010f64:	e04c      	b.n	8011000 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010f6c:	7ffb      	ldrb	r3, [r7, #31]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d011      	beq.n	8010f96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	899b      	ldrh	r3, [r3, #12]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	b21b      	sxth	r3, r3
 8010f7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f7e:	b21c      	sxth	r4, r3
 8010f80:	2011      	movs	r0, #17
 8010f82:	f7f9 f8cd 	bl	800a120 <lwip_htons>
 8010f86:	4603      	mov	r3, r0
 8010f88:	b21b      	sxth	r3, r3
 8010f8a:	4323      	orrs	r3, r4
 8010f8c:	b21b      	sxth	r3, r3
 8010f8e:	b29a      	uxth	r2, r3
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	819a      	strh	r2, [r3, #12]
 8010f94:	e010      	b.n	8010fb8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	3314      	adds	r3, #20
 8010f9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010f9e:	6a3b      	ldr	r3, [r7, #32]
 8010fa0:	6858      	ldr	r0, [r3, #4]
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	891a      	ldrh	r2, [r3, #8]
 8010fa8:	6a3b      	ldr	r3, [r7, #32]
 8010faa:	891b      	ldrh	r3, [r3, #8]
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	6939      	ldr	r1, [r7, #16]
 8010fb4:	f7fa fe56 	bl	800bc64 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	685b      	ldr	r3, [r3, #4]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f7f9 f8c3 	bl	800a14a <lwip_htonl>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	da02      	bge.n	8010fdc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	68fa      	ldr	r2, [r7, #12]
 8010fda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	69b9      	ldr	r1, [r7, #24]
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7ff fded 	bl	8010bc4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	3304      	adds	r3, #4
 8010ff0:	69b9      	ldr	r1, [r7, #24]
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f7ff fe26 	bl	8010c44 <tcp_output_control_segment>
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010ffc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011000:	4618      	mov	r0, r3
 8011002:	372c      	adds	r7, #44	; 0x2c
 8011004:	46bd      	mov	sp, r7
 8011006:	bd90      	pop	{r4, r7, pc}
 8011008:	08016d78 	.word	0x08016d78
 801100c:	08017570 	.word	0x08017570
 8011010:	08016dcc 	.word	0x08016dcc

08011014 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b082      	sub	sp, #8
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801101c:	f7fa ff10 	bl	800be40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011020:	4b0a      	ldr	r3, [pc, #40]	; (801104c <tcpip_tcp_timer+0x38>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d103      	bne.n	8011030 <tcpip_tcp_timer+0x1c>
 8011028:	4b09      	ldr	r3, [pc, #36]	; (8011050 <tcpip_tcp_timer+0x3c>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d005      	beq.n	801103c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011030:	2200      	movs	r2, #0
 8011032:	4908      	ldr	r1, [pc, #32]	; (8011054 <tcpip_tcp_timer+0x40>)
 8011034:	20fa      	movs	r0, #250	; 0xfa
 8011036:	f000 f8f3 	bl	8011220 <sys_timeout>
 801103a:	e003      	b.n	8011044 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801103c:	4b06      	ldr	r3, [pc, #24]	; (8011058 <tcpip_tcp_timer+0x44>)
 801103e:	2200      	movs	r2, #0
 8011040:	601a      	str	r2, [r3, #0]
  }
}
 8011042:	bf00      	nop
 8011044:	bf00      	nop
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	2000b944 	.word	0x2000b944
 8011050:	2000b954 	.word	0x2000b954
 8011054:	08011015 	.word	0x08011015
 8011058:	20004a40 	.word	0x20004a40

0801105c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011060:	4b0a      	ldr	r3, [pc, #40]	; (801108c <tcp_timer_needed+0x30>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10f      	bne.n	8011088 <tcp_timer_needed+0x2c>
 8011068:	4b09      	ldr	r3, [pc, #36]	; (8011090 <tcp_timer_needed+0x34>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d103      	bne.n	8011078 <tcp_timer_needed+0x1c>
 8011070:	4b08      	ldr	r3, [pc, #32]	; (8011094 <tcp_timer_needed+0x38>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d007      	beq.n	8011088 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011078:	4b04      	ldr	r3, [pc, #16]	; (801108c <tcp_timer_needed+0x30>)
 801107a:	2201      	movs	r2, #1
 801107c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801107e:	2200      	movs	r2, #0
 8011080:	4905      	ldr	r1, [pc, #20]	; (8011098 <tcp_timer_needed+0x3c>)
 8011082:	20fa      	movs	r0, #250	; 0xfa
 8011084:	f000 f8cc 	bl	8011220 <sys_timeout>
  }
}
 8011088:	bf00      	nop
 801108a:	bd80      	pop	{r7, pc}
 801108c:	20004a40 	.word	0x20004a40
 8011090:	2000b944 	.word	0x2000b944
 8011094:	2000b954 	.word	0x2000b954
 8011098:	08011015 	.word	0x08011015

0801109c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b086      	sub	sp, #24
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80110a8:	200a      	movs	r0, #10
 80110aa:	f7f9 fcef 	bl	800aa8c <memp_malloc>
 80110ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d109      	bne.n	80110ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d151      	bne.n	8011160 <sys_timeout_abs+0xc4>
 80110bc:	4b2a      	ldr	r3, [pc, #168]	; (8011168 <sys_timeout_abs+0xcc>)
 80110be:	22be      	movs	r2, #190	; 0xbe
 80110c0:	492a      	ldr	r1, [pc, #168]	; (801116c <sys_timeout_abs+0xd0>)
 80110c2:	482b      	ldr	r0, [pc, #172]	; (8011170 <sys_timeout_abs+0xd4>)
 80110c4:	f002 ffa4 	bl	8014010 <iprintf>
    return;
 80110c8:	e04a      	b.n	8011160 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	2200      	movs	r2, #0
 80110ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80110d0:	693b      	ldr	r3, [r7, #16]
 80110d2:	68ba      	ldr	r2, [r7, #8]
 80110d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80110e2:	4b24      	ldr	r3, [pc, #144]	; (8011174 <sys_timeout_abs+0xd8>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d103      	bne.n	80110f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80110ea:	4a22      	ldr	r2, [pc, #136]	; (8011174 <sys_timeout_abs+0xd8>)
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	6013      	str	r3, [r2, #0]
    return;
 80110f0:	e037      	b.n	8011162 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	685a      	ldr	r2, [r3, #4]
 80110f6:	4b1f      	ldr	r3, [pc, #124]	; (8011174 <sys_timeout_abs+0xd8>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	0fdb      	lsrs	r3, r3, #31
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d007      	beq.n	801111a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801110a:	4b1a      	ldr	r3, [pc, #104]	; (8011174 <sys_timeout_abs+0xd8>)
 801110c:	681a      	ldr	r2, [r3, #0]
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011112:	4a18      	ldr	r2, [pc, #96]	; (8011174 <sys_timeout_abs+0xd8>)
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	6013      	str	r3, [r2, #0]
 8011118:	e023      	b.n	8011162 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801111a:	4b16      	ldr	r3, [pc, #88]	; (8011174 <sys_timeout_abs+0xd8>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	617b      	str	r3, [r7, #20]
 8011120:	e01a      	b.n	8011158 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d00b      	beq.n	8011142 <sys_timeout_abs+0xa6>
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	685a      	ldr	r2, [r3, #4]
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	1ad3      	subs	r3, r2, r3
 8011136:	0fdb      	lsrs	r3, r3, #31
 8011138:	f003 0301 	and.w	r3, r3, #1
 801113c:	b2db      	uxtb	r3, r3
 801113e:	2b00      	cmp	r3, #0
 8011140:	d007      	beq.n	8011152 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	693a      	ldr	r2, [r7, #16]
 801114e:	601a      	str	r2, [r3, #0]
        break;
 8011150:	e007      	b.n	8011162 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d1e1      	bne.n	8011122 <sys_timeout_abs+0x86>
 801115e:	e000      	b.n	8011162 <sys_timeout_abs+0xc6>
    return;
 8011160:	bf00      	nop
      }
    }
  }
}
 8011162:	3718      	adds	r7, #24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}
 8011168:	08017594 	.word	0x08017594
 801116c:	080175c8 	.word	0x080175c8
 8011170:	08017608 	.word	0x08017608
 8011174:	20004a38 	.word	0x20004a38

08011178 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b086      	sub	sp, #24
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	4798      	blx	r3

  now = sys_now();
 801118a:	f7f4 fe2d 	bl	8005de8 <sys_now>
 801118e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	4b0f      	ldr	r3, [pc, #60]	; (80111d4 <lwip_cyclic_timer+0x5c>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	4413      	add	r3, r2
 801119a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801119c:	68fa      	ldr	r2, [r7, #12]
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	1ad3      	subs	r3, r2, r3
 80111a2:	0fdb      	lsrs	r3, r3, #31
 80111a4:	f003 0301 	and.w	r3, r3, #1
 80111a8:	b2db      	uxtb	r3, r3
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d009      	beq.n	80111c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	681a      	ldr	r2, [r3, #0]
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	4413      	add	r3, r2
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	4907      	ldr	r1, [pc, #28]	; (80111d8 <lwip_cyclic_timer+0x60>)
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7ff ff6e 	bl	801109c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80111c0:	e004      	b.n	80111cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80111c2:	687a      	ldr	r2, [r7, #4]
 80111c4:	4904      	ldr	r1, [pc, #16]	; (80111d8 <lwip_cyclic_timer+0x60>)
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f7ff ff68 	bl	801109c <sys_timeout_abs>
}
 80111cc:	bf00      	nop
 80111ce:	3718      	adds	r7, #24
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	20004a3c 	.word	0x20004a3c
 80111d8:	08011179 	.word	0x08011179

080111dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80111e2:	2301      	movs	r3, #1
 80111e4:	607b      	str	r3, [r7, #4]
 80111e6:	e00e      	b.n	8011206 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80111e8:	4a0b      	ldr	r2, [pc, #44]	; (8011218 <sys_timeouts_init+0x3c>)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	00db      	lsls	r3, r3, #3
 80111f4:	4a08      	ldr	r2, [pc, #32]	; (8011218 <sys_timeouts_init+0x3c>)
 80111f6:	4413      	add	r3, r2
 80111f8:	461a      	mov	r2, r3
 80111fa:	4908      	ldr	r1, [pc, #32]	; (801121c <sys_timeouts_init+0x40>)
 80111fc:	f000 f810 	bl	8011220 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3301      	adds	r3, #1
 8011204:	607b      	str	r3, [r7, #4]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b02      	cmp	r3, #2
 801120a:	d9ed      	bls.n	80111e8 <sys_timeouts_init+0xc>
  }
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	08018214 	.word	0x08018214
 801121c:	08011179 	.word	0x08011179

08011220 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b086      	sub	sp, #24
 8011224:	af00      	add	r7, sp, #0
 8011226:	60f8      	str	r0, [r7, #12]
 8011228:	60b9      	str	r1, [r7, #8]
 801122a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011232:	d306      	bcc.n	8011242 <sys_timeout+0x22>
 8011234:	4b0a      	ldr	r3, [pc, #40]	; (8011260 <sys_timeout+0x40>)
 8011236:	f240 1229 	movw	r2, #297	; 0x129
 801123a:	490a      	ldr	r1, [pc, #40]	; (8011264 <sys_timeout+0x44>)
 801123c:	480a      	ldr	r0, [pc, #40]	; (8011268 <sys_timeout+0x48>)
 801123e:	f002 fee7 	bl	8014010 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011242:	f7f4 fdd1 	bl	8005de8 <sys_now>
 8011246:	4602      	mov	r2, r0
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	4413      	add	r3, r2
 801124c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801124e:	687a      	ldr	r2, [r7, #4]
 8011250:	68b9      	ldr	r1, [r7, #8]
 8011252:	6978      	ldr	r0, [r7, #20]
 8011254:	f7ff ff22 	bl	801109c <sys_timeout_abs>
#endif
}
 8011258:	bf00      	nop
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08017594 	.word	0x08017594
 8011264:	08017630 	.word	0x08017630
 8011268:	08017608 	.word	0x08017608

0801126c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011272:	f7f4 fdb9 	bl	8005de8 <sys_now>
 8011276:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011278:	4b17      	ldr	r3, [pc, #92]	; (80112d8 <sys_check_timeouts+0x6c>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d022      	beq.n	80112ca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	68fa      	ldr	r2, [r7, #12]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	0fdb      	lsrs	r3, r3, #31
 801128e:	f003 0301 	and.w	r3, r3, #1
 8011292:	b2db      	uxtb	r3, r3
 8011294:	2b00      	cmp	r3, #0
 8011296:	d11a      	bne.n	80112ce <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4a0e      	ldr	r2, [pc, #56]	; (80112d8 <sys_check_timeouts+0x6c>)
 801129e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80112ac:	68bb      	ldr	r3, [r7, #8]
 80112ae:	685b      	ldr	r3, [r3, #4]
 80112b0:	4a0a      	ldr	r2, [pc, #40]	; (80112dc <sys_check_timeouts+0x70>)
 80112b2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80112b4:	68b9      	ldr	r1, [r7, #8]
 80112b6:	200a      	movs	r0, #10
 80112b8:	f7f9 fc3a 	bl	800ab30 <memp_free>
    if (handler != NULL) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0da      	beq.n	8011278 <sys_check_timeouts+0xc>
      handler(arg);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6838      	ldr	r0, [r7, #0]
 80112c6:	4798      	blx	r3
  do {
 80112c8:	e7d6      	b.n	8011278 <sys_check_timeouts+0xc>
      return;
 80112ca:	bf00      	nop
 80112cc:	e000      	b.n	80112d0 <sys_check_timeouts+0x64>
      return;
 80112ce:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20004a38 	.word	0x20004a38
 80112dc:	20004a3c 	.word	0x20004a3c

080112e0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80112e6:	4b16      	ldr	r3, [pc, #88]	; (8011340 <sys_timeouts_sleeptime+0x60>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d102      	bne.n	80112f4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80112ee:	f04f 33ff 	mov.w	r3, #4294967295
 80112f2:	e020      	b.n	8011336 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80112f4:	f7f4 fd78 	bl	8005de8 <sys_now>
 80112f8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80112fa:	4b11      	ldr	r3, [pc, #68]	; (8011340 <sys_timeouts_sleeptime+0x60>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	685a      	ldr	r2, [r3, #4]
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	1ad3      	subs	r3, r2, r3
 8011304:	0fdb      	lsrs	r3, r3, #31
 8011306:	f003 0301 	and.w	r3, r3, #1
 801130a:	b2db      	uxtb	r3, r3
 801130c:	2b00      	cmp	r3, #0
 801130e:	d001      	beq.n	8011314 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011310:	2300      	movs	r3, #0
 8011312:	e010      	b.n	8011336 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011314:	4b0a      	ldr	r3, [pc, #40]	; (8011340 <sys_timeouts_sleeptime+0x60>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	685a      	ldr	r2, [r3, #4]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	da06      	bge.n	8011334 <sys_timeouts_sleeptime+0x54>
 8011326:	4b07      	ldr	r3, [pc, #28]	; (8011344 <sys_timeouts_sleeptime+0x64>)
 8011328:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801132c:	4906      	ldr	r1, [pc, #24]	; (8011348 <sys_timeouts_sleeptime+0x68>)
 801132e:	4807      	ldr	r0, [pc, #28]	; (801134c <sys_timeouts_sleeptime+0x6c>)
 8011330:	f002 fe6e 	bl	8014010 <iprintf>
    return ret;
 8011334:	683b      	ldr	r3, [r7, #0]
  }
}
 8011336:	4618      	mov	r0, r3
 8011338:	3708      	adds	r7, #8
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	20004a38 	.word	0x20004a38
 8011344:	08017594 	.word	0x08017594
 8011348:	08017668 	.word	0x08017668
 801134c:	08017608 	.word	0x08017608

08011350 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011354:	f002 fe74 	bl	8014040 <rand>
 8011358:	4603      	mov	r3, r0
 801135a:	b29b      	uxth	r3, r3
 801135c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011360:	b29b      	uxth	r3, r3
 8011362:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011366:	b29a      	uxth	r2, r3
 8011368:	4b01      	ldr	r3, [pc, #4]	; (8011370 <udp_init+0x20>)
 801136a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801136c:	bf00      	nop
 801136e:	bd80      	pop	{r7, pc}
 8011370:	20000018 	.word	0x20000018

08011374 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	4613      	mov	r3, r2
 8011380:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d105      	bne.n	8011394 <udp_input_local_match+0x20>
 8011388:	4b27      	ldr	r3, [pc, #156]	; (8011428 <udp_input_local_match+0xb4>)
 801138a:	2287      	movs	r2, #135	; 0x87
 801138c:	4927      	ldr	r1, [pc, #156]	; (801142c <udp_input_local_match+0xb8>)
 801138e:	4828      	ldr	r0, [pc, #160]	; (8011430 <udp_input_local_match+0xbc>)
 8011390:	f002 fe3e 	bl	8014010 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011394:	68bb      	ldr	r3, [r7, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d105      	bne.n	80113a6 <udp_input_local_match+0x32>
 801139a:	4b23      	ldr	r3, [pc, #140]	; (8011428 <udp_input_local_match+0xb4>)
 801139c:	2288      	movs	r2, #136	; 0x88
 801139e:	4925      	ldr	r1, [pc, #148]	; (8011434 <udp_input_local_match+0xc0>)
 80113a0:	4823      	ldr	r0, [pc, #140]	; (8011430 <udp_input_local_match+0xbc>)
 80113a2:	f002 fe35 	bl	8014010 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	7a1b      	ldrb	r3, [r3, #8]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d00b      	beq.n	80113c6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	7a1a      	ldrb	r2, [r3, #8]
 80113b2:	4b21      	ldr	r3, [pc, #132]	; (8011438 <udp_input_local_match+0xc4>)
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ba:	3301      	adds	r3, #1
 80113bc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80113be:	429a      	cmp	r2, r3
 80113c0:	d001      	beq.n	80113c6 <udp_input_local_match+0x52>
    return 0;
 80113c2:	2300      	movs	r3, #0
 80113c4:	e02b      	b.n	801141e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80113c6:	79fb      	ldrb	r3, [r7, #7]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d018      	beq.n	80113fe <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d013      	beq.n	80113fa <udp_input_local_match+0x86>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00f      	beq.n	80113fa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80113da:	4b17      	ldr	r3, [pc, #92]	; (8011438 <udp_input_local_match+0xc4>)
 80113dc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80113de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e2:	d00a      	beq.n	80113fa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681a      	ldr	r2, [r3, #0]
 80113e8:	4b13      	ldr	r3, [pc, #76]	; (8011438 <udp_input_local_match+0xc4>)
 80113ea:	695b      	ldr	r3, [r3, #20]
 80113ec:	405a      	eors	r2, r3
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	3308      	adds	r3, #8
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d110      	bne.n	801141c <udp_input_local_match+0xa8>
          return 1;
 80113fa:	2301      	movs	r3, #1
 80113fc:	e00f      	b.n	801141e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d009      	beq.n	8011418 <udp_input_local_match+0xa4>
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d005      	beq.n	8011418 <udp_input_local_match+0xa4>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681a      	ldr	r2, [r3, #0]
 8011410:	4b09      	ldr	r3, [pc, #36]	; (8011438 <udp_input_local_match+0xc4>)
 8011412:	695b      	ldr	r3, [r3, #20]
 8011414:	429a      	cmp	r2, r3
 8011416:	d101      	bne.n	801141c <udp_input_local_match+0xa8>
        return 1;
 8011418:	2301      	movs	r3, #1
 801141a:	e000      	b.n	801141e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	0801767c 	.word	0x0801767c
 801142c:	080176ac 	.word	0x080176ac
 8011430:	080176d0 	.word	0x080176d0
 8011434:	080176f8 	.word	0x080176f8
 8011438:	20008230 	.word	0x20008230

0801143c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801143c:	b590      	push	{r4, r7, lr}
 801143e:	b08d      	sub	sp, #52	; 0x34
 8011440:	af02      	add	r7, sp, #8
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d105      	bne.n	801145c <udp_input+0x20>
 8011450:	4b7c      	ldr	r3, [pc, #496]	; (8011644 <udp_input+0x208>)
 8011452:	22cf      	movs	r2, #207	; 0xcf
 8011454:	497c      	ldr	r1, [pc, #496]	; (8011648 <udp_input+0x20c>)
 8011456:	487d      	ldr	r0, [pc, #500]	; (801164c <udp_input+0x210>)
 8011458:	f002 fdda 	bl	8014010 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d105      	bne.n	801146e <udp_input+0x32>
 8011462:	4b78      	ldr	r3, [pc, #480]	; (8011644 <udp_input+0x208>)
 8011464:	22d0      	movs	r2, #208	; 0xd0
 8011466:	497a      	ldr	r1, [pc, #488]	; (8011650 <udp_input+0x214>)
 8011468:	4878      	ldr	r0, [pc, #480]	; (801164c <udp_input+0x210>)
 801146a:	f002 fdd1 	bl	8014010 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	895b      	ldrh	r3, [r3, #10]
 8011472:	2b07      	cmp	r3, #7
 8011474:	d803      	bhi.n	801147e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011476:	6878      	ldr	r0, [r7, #4]
 8011478:	f7fa f9fe 	bl	800b878 <pbuf_free>
    goto end;
 801147c:	e0de      	b.n	801163c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011484:	4b73      	ldr	r3, [pc, #460]	; (8011654 <udp_input+0x218>)
 8011486:	695b      	ldr	r3, [r3, #20]
 8011488:	4a72      	ldr	r2, [pc, #456]	; (8011654 <udp_input+0x218>)
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	4611      	mov	r1, r2
 801148e:	4618      	mov	r0, r3
 8011490:	f001 fc88 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8011494:	4603      	mov	r3, r0
 8011496:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	881b      	ldrh	r3, [r3, #0]
 801149c:	b29b      	uxth	r3, r3
 801149e:	4618      	mov	r0, r3
 80114a0:	f7f8 fe3e 	bl	800a120 <lwip_htons>
 80114a4:	4603      	mov	r3, r0
 80114a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	885b      	ldrh	r3, [r3, #2]
 80114ac:	b29b      	uxth	r3, r3
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f8 fe36 	bl	800a120 <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80114b8:	2300      	movs	r3, #0
 80114ba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80114bc:	2300      	movs	r3, #0
 80114be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80114c0:	2300      	movs	r3, #0
 80114c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80114c4:	4b64      	ldr	r3, [pc, #400]	; (8011658 <udp_input+0x21c>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	627b      	str	r3, [r7, #36]	; 0x24
 80114ca:	e054      	b.n	8011576 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80114cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ce:	8a5b      	ldrh	r3, [r3, #18]
 80114d0:	89fa      	ldrh	r2, [r7, #14]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d14a      	bne.n	801156c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80114d6:	7cfb      	ldrb	r3, [r7, #19]
 80114d8:	461a      	mov	r2, r3
 80114da:	6839      	ldr	r1, [r7, #0]
 80114dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114de:	f7ff ff49 	bl	8011374 <udp_input_local_match>
 80114e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d041      	beq.n	801156c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80114e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ea:	7c1b      	ldrb	r3, [r3, #16]
 80114ec:	f003 0304 	and.w	r3, r3, #4
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d11d      	bne.n	8011530 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d102      	bne.n	8011500 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	61fb      	str	r3, [r7, #28]
 80114fe:	e017      	b.n	8011530 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011500:	7cfb      	ldrb	r3, [r7, #19]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d014      	beq.n	8011530 <udp_input+0xf4>
 8011506:	4b53      	ldr	r3, [pc, #332]	; (8011654 <udp_input+0x218>)
 8011508:	695b      	ldr	r3, [r3, #20]
 801150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801150e:	d10f      	bne.n	8011530 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	3304      	adds	r3, #4
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	429a      	cmp	r2, r3
 801151c:	d008      	beq.n	8011530 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	3304      	adds	r3, #4
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	429a      	cmp	r2, r3
 801152a:	d101      	bne.n	8011530 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	8a9b      	ldrh	r3, [r3, #20]
 8011534:	8a3a      	ldrh	r2, [r7, #16]
 8011536:	429a      	cmp	r2, r3
 8011538:	d118      	bne.n	801156c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801153e:	2b00      	cmp	r3, #0
 8011540:	d005      	beq.n	801154e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	4b43      	ldr	r3, [pc, #268]	; (8011654 <udp_input+0x218>)
 8011548:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801154a:	429a      	cmp	r2, r3
 801154c:	d10e      	bne.n	801156c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801154e:	6a3b      	ldr	r3, [r7, #32]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d014      	beq.n	801157e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011556:	68da      	ldr	r2, [r3, #12]
 8011558:	6a3b      	ldr	r3, [r7, #32]
 801155a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801155c:	4b3e      	ldr	r3, [pc, #248]	; (8011658 <udp_input+0x21c>)
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011564:	4a3c      	ldr	r2, [pc, #240]	; (8011658 <udp_input+0x21c>)
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801156a:	e008      	b.n	801157e <udp_input+0x142>
      }
    }

    prev = pcb;
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	627b      	str	r3, [r7, #36]	; 0x24
 8011576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1a7      	bne.n	80114cc <udp_input+0x90>
 801157c:	e000      	b.n	8011580 <udp_input+0x144>
        break;
 801157e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011582:	2b00      	cmp	r3, #0
 8011584:	d101      	bne.n	801158a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158c:	2b00      	cmp	r3, #0
 801158e:	d002      	beq.n	8011596 <udp_input+0x15a>
    for_us = 1;
 8011590:	2301      	movs	r3, #1
 8011592:	76fb      	strb	r3, [r7, #27]
 8011594:	e00a      	b.n	80115ac <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	3304      	adds	r3, #4
 801159a:	681a      	ldr	r2, [r3, #0]
 801159c:	4b2d      	ldr	r3, [pc, #180]	; (8011654 <udp_input+0x218>)
 801159e:	695b      	ldr	r3, [r3, #20]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	bf0c      	ite	eq
 80115a4:	2301      	moveq	r3, #1
 80115a6:	2300      	movne	r3, #0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80115ac:	7efb      	ldrb	r3, [r7, #27]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d041      	beq.n	8011636 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80115b2:	2108      	movs	r1, #8
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7fa f8d9 	bl	800b76c <pbuf_remove_header>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d00a      	beq.n	80115d6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80115c0:	4b20      	ldr	r3, [pc, #128]	; (8011644 <udp_input+0x208>)
 80115c2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80115c6:	4925      	ldr	r1, [pc, #148]	; (801165c <udp_input+0x220>)
 80115c8:	4820      	ldr	r0, [pc, #128]	; (801164c <udp_input+0x210>)
 80115ca:	f002 fd21 	bl	8014010 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7fa f952 	bl	800b878 <pbuf_free>
      goto end;
 80115d4:	e032      	b.n	801163c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80115d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d012      	beq.n	8011602 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	699b      	ldr	r3, [r3, #24]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00a      	beq.n	80115fa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	699c      	ldr	r4, [r3, #24]
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	69d8      	ldr	r0, [r3, #28]
 80115ec:	8a3b      	ldrh	r3, [r7, #16]
 80115ee:	9300      	str	r3, [sp, #0]
 80115f0:	4b1b      	ldr	r3, [pc, #108]	; (8011660 <udp_input+0x224>)
 80115f2:	687a      	ldr	r2, [r7, #4]
 80115f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80115f6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80115f8:	e021      	b.n	801163e <udp_input+0x202>
        pbuf_free(p);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7fa f93c 	bl	800b878 <pbuf_free>
        goto end;
 8011600:	e01c      	b.n	801163c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011602:	7cfb      	ldrb	r3, [r7, #19]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d112      	bne.n	801162e <udp_input+0x1f2>
 8011608:	4b12      	ldr	r3, [pc, #72]	; (8011654 <udp_input+0x218>)
 801160a:	695b      	ldr	r3, [r3, #20]
 801160c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011610:	2be0      	cmp	r3, #224	; 0xe0
 8011612:	d00c      	beq.n	801162e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011614:	4b0f      	ldr	r3, [pc, #60]	; (8011654 <udp_input+0x218>)
 8011616:	899b      	ldrh	r3, [r3, #12]
 8011618:	3308      	adds	r3, #8
 801161a:	b29b      	uxth	r3, r3
 801161c:	b21b      	sxth	r3, r3
 801161e:	4619      	mov	r1, r3
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7fa f916 	bl	800b852 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011626:	2103      	movs	r1, #3
 8011628:	6878      	ldr	r0, [r7, #4]
 801162a:	f001 f89b 	bl	8012764 <icmp_dest_unreach>
      pbuf_free(p);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7fa f922 	bl	800b878 <pbuf_free>
  return;
 8011634:	e003      	b.n	801163e <udp_input+0x202>
    pbuf_free(p);
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7fa f91e 	bl	800b878 <pbuf_free>
  return;
 801163c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801163e:	372c      	adds	r7, #44	; 0x2c
 8011640:	46bd      	mov	sp, r7
 8011642:	bd90      	pop	{r4, r7, pc}
 8011644:	0801767c 	.word	0x0801767c
 8011648:	08017720 	.word	0x08017720
 801164c:	080176d0 	.word	0x080176d0
 8011650:	08017738 	.word	0x08017738
 8011654:	20008230 	.word	0x20008230
 8011658:	2000b95c 	.word	0x2000b95c
 801165c:	08017754 	.word	0x08017754
 8011660:	20008240 	.word	0x20008240

08011664 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d01e      	beq.n	80116b2 <udp_netif_ip_addr_changed+0x4e>
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d01a      	beq.n	80116b2 <udp_netif_ip_addr_changed+0x4e>
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d017      	beq.n	80116b2 <udp_netif_ip_addr_changed+0x4e>
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d013      	beq.n	80116b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801168a:	4b0d      	ldr	r3, [pc, #52]	; (80116c0 <udp_netif_ip_addr_changed+0x5c>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	e00c      	b.n	80116ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	429a      	cmp	r2, r3
 801169c:	d103      	bne.n	80116a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d1ef      	bne.n	8011692 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80116b2:	bf00      	nop
 80116b4:	3714      	adds	r7, #20
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	2000b95c 	.word	0x2000b95c

080116c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80116cc:	4915      	ldr	r1, [pc, #84]	; (8011724 <etharp_free_entry+0x60>)
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4613      	mov	r3, r2
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	4413      	add	r3, r2
 80116d6:	00db      	lsls	r3, r3, #3
 80116d8:	440b      	add	r3, r1
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d013      	beq.n	8011708 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80116e0:	4910      	ldr	r1, [pc, #64]	; (8011724 <etharp_free_entry+0x60>)
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	440b      	add	r3, r1
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fa f8c1 	bl	800b878 <pbuf_free>
    arp_table[i].q = NULL;
 80116f6:	490b      	ldr	r1, [pc, #44]	; (8011724 <etharp_free_entry+0x60>)
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4613      	mov	r3, r2
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	4413      	add	r3, r2
 8011700:	00db      	lsls	r3, r3, #3
 8011702:	440b      	add	r3, r1
 8011704:	2200      	movs	r2, #0
 8011706:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011708:	4906      	ldr	r1, [pc, #24]	; (8011724 <etharp_free_entry+0x60>)
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	4613      	mov	r3, r2
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	4413      	add	r3, r2
 8011712:	00db      	lsls	r3, r3, #3
 8011714:	440b      	add	r3, r1
 8011716:	3314      	adds	r3, #20
 8011718:	2200      	movs	r2, #0
 801171a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801171c:	bf00      	nop
 801171e:	3708      	adds	r7, #8
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	20004a44 	.word	0x20004a44

08011728 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801172e:	2300      	movs	r3, #0
 8011730:	607b      	str	r3, [r7, #4]
 8011732:	e096      	b.n	8011862 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011734:	494f      	ldr	r1, [pc, #316]	; (8011874 <etharp_tmr+0x14c>)
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	4613      	mov	r3, r2
 801173a:	005b      	lsls	r3, r3, #1
 801173c:	4413      	add	r3, r2
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	440b      	add	r3, r1
 8011742:	3314      	adds	r3, #20
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011748:	78fb      	ldrb	r3, [r7, #3]
 801174a:	2b00      	cmp	r3, #0
 801174c:	f000 8086 	beq.w	801185c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011750:	4948      	ldr	r1, [pc, #288]	; (8011874 <etharp_tmr+0x14c>)
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	4613      	mov	r3, r2
 8011756:	005b      	lsls	r3, r3, #1
 8011758:	4413      	add	r3, r2
 801175a:	00db      	lsls	r3, r3, #3
 801175c:	440b      	add	r3, r1
 801175e:	3312      	adds	r3, #18
 8011760:	881b      	ldrh	r3, [r3, #0]
 8011762:	3301      	adds	r3, #1
 8011764:	b298      	uxth	r0, r3
 8011766:	4943      	ldr	r1, [pc, #268]	; (8011874 <etharp_tmr+0x14c>)
 8011768:	687a      	ldr	r2, [r7, #4]
 801176a:	4613      	mov	r3, r2
 801176c:	005b      	lsls	r3, r3, #1
 801176e:	4413      	add	r3, r2
 8011770:	00db      	lsls	r3, r3, #3
 8011772:	440b      	add	r3, r1
 8011774:	3312      	adds	r3, #18
 8011776:	4602      	mov	r2, r0
 8011778:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801177a:	493e      	ldr	r1, [pc, #248]	; (8011874 <etharp_tmr+0x14c>)
 801177c:	687a      	ldr	r2, [r7, #4]
 801177e:	4613      	mov	r3, r2
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	4413      	add	r3, r2
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	3312      	adds	r3, #18
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011790:	d215      	bcs.n	80117be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011792:	4938      	ldr	r1, [pc, #224]	; (8011874 <etharp_tmr+0x14c>)
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	4613      	mov	r3, r2
 8011798:	005b      	lsls	r3, r3, #1
 801179a:	4413      	add	r3, r2
 801179c:	00db      	lsls	r3, r3, #3
 801179e:	440b      	add	r3, r1
 80117a0:	3314      	adds	r3, #20
 80117a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80117a4:	2b01      	cmp	r3, #1
 80117a6:	d10e      	bne.n	80117c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80117a8:	4932      	ldr	r1, [pc, #200]	; (8011874 <etharp_tmr+0x14c>)
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	4613      	mov	r3, r2
 80117ae:	005b      	lsls	r3, r3, #1
 80117b0:	4413      	add	r3, r2
 80117b2:	00db      	lsls	r3, r3, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	3312      	adds	r3, #18
 80117b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80117ba:	2b04      	cmp	r3, #4
 80117bc:	d903      	bls.n	80117c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80117be:	6878      	ldr	r0, [r7, #4]
 80117c0:	f7ff ff80 	bl	80116c4 <etharp_free_entry>
 80117c4:	e04a      	b.n	801185c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80117c6:	492b      	ldr	r1, [pc, #172]	; (8011874 <etharp_tmr+0x14c>)
 80117c8:	687a      	ldr	r2, [r7, #4]
 80117ca:	4613      	mov	r3, r2
 80117cc:	005b      	lsls	r3, r3, #1
 80117ce:	4413      	add	r3, r2
 80117d0:	00db      	lsls	r3, r3, #3
 80117d2:	440b      	add	r3, r1
 80117d4:	3314      	adds	r3, #20
 80117d6:	781b      	ldrb	r3, [r3, #0]
 80117d8:	2b03      	cmp	r3, #3
 80117da:	d10a      	bne.n	80117f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80117dc:	4925      	ldr	r1, [pc, #148]	; (8011874 <etharp_tmr+0x14c>)
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	4613      	mov	r3, r2
 80117e2:	005b      	lsls	r3, r3, #1
 80117e4:	4413      	add	r3, r2
 80117e6:	00db      	lsls	r3, r3, #3
 80117e8:	440b      	add	r3, r1
 80117ea:	3314      	adds	r3, #20
 80117ec:	2204      	movs	r2, #4
 80117ee:	701a      	strb	r2, [r3, #0]
 80117f0:	e034      	b.n	801185c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80117f2:	4920      	ldr	r1, [pc, #128]	; (8011874 <etharp_tmr+0x14c>)
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	3314      	adds	r3, #20
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	2b04      	cmp	r3, #4
 8011806:	d10a      	bne.n	801181e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011808:	491a      	ldr	r1, [pc, #104]	; (8011874 <etharp_tmr+0x14c>)
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	4613      	mov	r3, r2
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	4413      	add	r3, r2
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	440b      	add	r3, r1
 8011816:	3314      	adds	r3, #20
 8011818:	2202      	movs	r2, #2
 801181a:	701a      	strb	r2, [r3, #0]
 801181c:	e01e      	b.n	801185c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801181e:	4915      	ldr	r1, [pc, #84]	; (8011874 <etharp_tmr+0x14c>)
 8011820:	687a      	ldr	r2, [r7, #4]
 8011822:	4613      	mov	r3, r2
 8011824:	005b      	lsls	r3, r3, #1
 8011826:	4413      	add	r3, r2
 8011828:	00db      	lsls	r3, r3, #3
 801182a:	440b      	add	r3, r1
 801182c:	3314      	adds	r3, #20
 801182e:	781b      	ldrb	r3, [r3, #0]
 8011830:	2b01      	cmp	r3, #1
 8011832:	d113      	bne.n	801185c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011834:	490f      	ldr	r1, [pc, #60]	; (8011874 <etharp_tmr+0x14c>)
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	4613      	mov	r3, r2
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	4413      	add	r3, r2
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	440b      	add	r3, r1
 8011842:	3308      	adds	r3, #8
 8011844:	6818      	ldr	r0, [r3, #0]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	4613      	mov	r3, r2
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	4413      	add	r3, r2
 801184e:	00db      	lsls	r3, r3, #3
 8011850:	4a08      	ldr	r2, [pc, #32]	; (8011874 <etharp_tmr+0x14c>)
 8011852:	4413      	add	r3, r2
 8011854:	3304      	adds	r3, #4
 8011856:	4619      	mov	r1, r3
 8011858:	f000 fe6e 	bl	8012538 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	3301      	adds	r3, #1
 8011860:	607b      	str	r3, [r7, #4]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b09      	cmp	r3, #9
 8011866:	f77f af65 	ble.w	8011734 <etharp_tmr+0xc>
      }
    }
  }
}
 801186a:	bf00      	nop
 801186c:	bf00      	nop
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	20004a44 	.word	0x20004a44

08011878 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b08a      	sub	sp, #40	; 0x28
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	460b      	mov	r3, r1
 8011882:	607a      	str	r2, [r7, #4]
 8011884:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011886:	230a      	movs	r3, #10
 8011888:	84fb      	strh	r3, [r7, #38]	; 0x26
 801188a:	230a      	movs	r3, #10
 801188c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801188e:	230a      	movs	r3, #10
 8011890:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011896:	230a      	movs	r3, #10
 8011898:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801189a:	2300      	movs	r3, #0
 801189c:	83bb      	strh	r3, [r7, #28]
 801189e:	2300      	movs	r3, #0
 80118a0:	837b      	strh	r3, [r7, #26]
 80118a2:	2300      	movs	r3, #0
 80118a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118a6:	2300      	movs	r3, #0
 80118a8:	843b      	strh	r3, [r7, #32]
 80118aa:	e0ae      	b.n	8011a0a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80118ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118b0:	49a6      	ldr	r1, [pc, #664]	; (8011b4c <etharp_find_entry+0x2d4>)
 80118b2:	4613      	mov	r3, r2
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4413      	add	r3, r2
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	440b      	add	r3, r1
 80118bc:	3314      	adds	r3, #20
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80118c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80118c6:	2b0a      	cmp	r3, #10
 80118c8:	d105      	bne.n	80118d6 <etharp_find_entry+0x5e>
 80118ca:	7dfb      	ldrb	r3, [r7, #23]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d102      	bne.n	80118d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80118d0:	8c3b      	ldrh	r3, [r7, #32]
 80118d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80118d4:	e095      	b.n	8011a02 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 8092 	beq.w	8011a02 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d009      	beq.n	80118f8 <etharp_find_entry+0x80>
 80118e4:	7dfb      	ldrb	r3, [r7, #23]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d806      	bhi.n	80118f8 <etharp_find_entry+0x80>
 80118ea:	4b99      	ldr	r3, [pc, #612]	; (8011b50 <etharp_find_entry+0x2d8>)
 80118ec:	f240 1223 	movw	r2, #291	; 0x123
 80118f0:	4998      	ldr	r1, [pc, #608]	; (8011b54 <etharp_find_entry+0x2dc>)
 80118f2:	4899      	ldr	r0, [pc, #612]	; (8011b58 <etharp_find_entry+0x2e0>)
 80118f4:	f002 fb8c 	bl	8014010 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d020      	beq.n	8011940 <etharp_find_entry+0xc8>
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6819      	ldr	r1, [r3, #0]
 8011902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011906:	4891      	ldr	r0, [pc, #580]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011908:	4613      	mov	r3, r2
 801190a:	005b      	lsls	r3, r3, #1
 801190c:	4413      	add	r3, r2
 801190e:	00db      	lsls	r3, r3, #3
 8011910:	4403      	add	r3, r0
 8011912:	3304      	adds	r3, #4
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	4299      	cmp	r1, r3
 8011918:	d112      	bne.n	8011940 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00c      	beq.n	801193a <etharp_find_entry+0xc2>
 8011920:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011924:	4989      	ldr	r1, [pc, #548]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011926:	4613      	mov	r3, r2
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4413      	add	r3, r2
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	440b      	add	r3, r1
 8011930:	3308      	adds	r3, #8
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	429a      	cmp	r2, r3
 8011938:	d102      	bne.n	8011940 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801193a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801193e:	e100      	b.n	8011b42 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011940:	7dfb      	ldrb	r3, [r7, #23]
 8011942:	2b01      	cmp	r3, #1
 8011944:	d140      	bne.n	80119c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011946:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801194a:	4980      	ldr	r1, [pc, #512]	; (8011b4c <etharp_find_entry+0x2d4>)
 801194c:	4613      	mov	r3, r2
 801194e:	005b      	lsls	r3, r3, #1
 8011950:	4413      	add	r3, r2
 8011952:	00db      	lsls	r3, r3, #3
 8011954:	440b      	add	r3, r1
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d01a      	beq.n	8011992 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801195c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011960:	497a      	ldr	r1, [pc, #488]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011962:	4613      	mov	r3, r2
 8011964:	005b      	lsls	r3, r3, #1
 8011966:	4413      	add	r3, r2
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	440b      	add	r3, r1
 801196c:	3312      	adds	r3, #18
 801196e:	881b      	ldrh	r3, [r3, #0]
 8011970:	8bba      	ldrh	r2, [r7, #28]
 8011972:	429a      	cmp	r2, r3
 8011974:	d845      	bhi.n	8011a02 <etharp_find_entry+0x18a>
            old_queue = i;
 8011976:	8c3b      	ldrh	r3, [r7, #32]
 8011978:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801197a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801197e:	4973      	ldr	r1, [pc, #460]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011980:	4613      	mov	r3, r2
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	4413      	add	r3, r2
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	440b      	add	r3, r1
 801198a:	3312      	adds	r3, #18
 801198c:	881b      	ldrh	r3, [r3, #0]
 801198e:	83bb      	strh	r3, [r7, #28]
 8011990:	e037      	b.n	8011a02 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011992:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011996:	496d      	ldr	r1, [pc, #436]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011998:	4613      	mov	r3, r2
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	4413      	add	r3, r2
 801199e:	00db      	lsls	r3, r3, #3
 80119a0:	440b      	add	r3, r1
 80119a2:	3312      	adds	r3, #18
 80119a4:	881b      	ldrh	r3, [r3, #0]
 80119a6:	8b7a      	ldrh	r2, [r7, #26]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d82a      	bhi.n	8011a02 <etharp_find_entry+0x18a>
            old_pending = i;
 80119ac:	8c3b      	ldrh	r3, [r7, #32]
 80119ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80119b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119b4:	4965      	ldr	r1, [pc, #404]	; (8011b4c <etharp_find_entry+0x2d4>)
 80119b6:	4613      	mov	r3, r2
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	4413      	add	r3, r2
 80119bc:	00db      	lsls	r3, r3, #3
 80119be:	440b      	add	r3, r1
 80119c0:	3312      	adds	r3, #18
 80119c2:	881b      	ldrh	r3, [r3, #0]
 80119c4:	837b      	strh	r3, [r7, #26]
 80119c6:	e01c      	b.n	8011a02 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80119c8:	7dfb      	ldrb	r3, [r7, #23]
 80119ca:	2b01      	cmp	r3, #1
 80119cc:	d919      	bls.n	8011a02 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80119ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119d2:	495e      	ldr	r1, [pc, #376]	; (8011b4c <etharp_find_entry+0x2d4>)
 80119d4:	4613      	mov	r3, r2
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	4413      	add	r3, r2
 80119da:	00db      	lsls	r3, r3, #3
 80119dc:	440b      	add	r3, r1
 80119de:	3312      	adds	r3, #18
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	8b3a      	ldrh	r2, [r7, #24]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d80c      	bhi.n	8011a02 <etharp_find_entry+0x18a>
            old_stable = i;
 80119e8:	8c3b      	ldrh	r3, [r7, #32]
 80119ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80119ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f0:	4956      	ldr	r1, [pc, #344]	; (8011b4c <etharp_find_entry+0x2d4>)
 80119f2:	4613      	mov	r3, r2
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	4413      	add	r3, r2
 80119f8:	00db      	lsls	r3, r3, #3
 80119fa:	440b      	add	r3, r1
 80119fc:	3312      	adds	r3, #18
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a02:	8c3b      	ldrh	r3, [r7, #32]
 8011a04:	3301      	adds	r3, #1
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	843b      	strh	r3, [r7, #32]
 8011a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a0e:	2b09      	cmp	r3, #9
 8011a10:	f77f af4c 	ble.w	80118ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011a14:	7afb      	ldrb	r3, [r7, #11]
 8011a16:	f003 0302 	and.w	r3, r3, #2
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d108      	bne.n	8011a30 <etharp_find_entry+0x1b8>
 8011a1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a22:	2b0a      	cmp	r3, #10
 8011a24:	d107      	bne.n	8011a36 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011a26:	7afb      	ldrb	r3, [r7, #11]
 8011a28:	f003 0301 	and.w	r3, r3, #1
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d102      	bne.n	8011a36 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011a30:	f04f 33ff 	mov.w	r3, #4294967295
 8011a34:	e085      	b.n	8011b42 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011a36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011a3a:	2b09      	cmp	r3, #9
 8011a3c:	dc02      	bgt.n	8011a44 <etharp_find_entry+0x1cc>
    i = empty;
 8011a3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a40:	843b      	strh	r3, [r7, #32]
 8011a42:	e039      	b.n	8011ab8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011a44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011a48:	2b09      	cmp	r3, #9
 8011a4a:	dc14      	bgt.n	8011a76 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011a4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011a4e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a54:	493d      	ldr	r1, [pc, #244]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	440b      	add	r3, r1
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d018      	beq.n	8011a98 <etharp_find_entry+0x220>
 8011a66:	4b3a      	ldr	r3, [pc, #232]	; (8011b50 <etharp_find_entry+0x2d8>)
 8011a68:	f240 126d 	movw	r2, #365	; 0x16d
 8011a6c:	493b      	ldr	r1, [pc, #236]	; (8011b5c <etharp_find_entry+0x2e4>)
 8011a6e:	483a      	ldr	r0, [pc, #232]	; (8011b58 <etharp_find_entry+0x2e0>)
 8011a70:	f002 face 	bl	8014010 <iprintf>
 8011a74:	e010      	b.n	8011a98 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a76:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011a7a:	2b09      	cmp	r3, #9
 8011a7c:	dc02      	bgt.n	8011a84 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011a7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a80:	843b      	strh	r3, [r7, #32]
 8011a82:	e009      	b.n	8011a98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011a84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a88:	2b09      	cmp	r3, #9
 8011a8a:	dc02      	bgt.n	8011a92 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011a8c:	8bfb      	ldrh	r3, [r7, #30]
 8011a8e:	843b      	strh	r3, [r7, #32]
 8011a90:	e002      	b.n	8011a98 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011a92:	f04f 33ff 	mov.w	r3, #4294967295
 8011a96:	e054      	b.n	8011b42 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a9c:	2b09      	cmp	r3, #9
 8011a9e:	dd06      	ble.n	8011aae <etharp_find_entry+0x236>
 8011aa0:	4b2b      	ldr	r3, [pc, #172]	; (8011b50 <etharp_find_entry+0x2d8>)
 8011aa2:	f240 127f 	movw	r2, #383	; 0x17f
 8011aa6:	492e      	ldr	r1, [pc, #184]	; (8011b60 <etharp_find_entry+0x2e8>)
 8011aa8:	482b      	ldr	r0, [pc, #172]	; (8011b58 <etharp_find_entry+0x2e0>)
 8011aaa:	f002 fab1 	bl	8014010 <iprintf>
    etharp_free_entry(i);
 8011aae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7ff fe06 	bl	80116c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011ab8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011abc:	2b09      	cmp	r3, #9
 8011abe:	dd06      	ble.n	8011ace <etharp_find_entry+0x256>
 8011ac0:	4b23      	ldr	r3, [pc, #140]	; (8011b50 <etharp_find_entry+0x2d8>)
 8011ac2:	f240 1283 	movw	r2, #387	; 0x183
 8011ac6:	4926      	ldr	r1, [pc, #152]	; (8011b60 <etharp_find_entry+0x2e8>)
 8011ac8:	4823      	ldr	r0, [pc, #140]	; (8011b58 <etharp_find_entry+0x2e0>)
 8011aca:	f002 faa1 	bl	8014010 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011ace:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ad2:	491e      	ldr	r1, [pc, #120]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011ad4:	4613      	mov	r3, r2
 8011ad6:	005b      	lsls	r3, r3, #1
 8011ad8:	4413      	add	r3, r2
 8011ada:	00db      	lsls	r3, r3, #3
 8011adc:	440b      	add	r3, r1
 8011ade:	3314      	adds	r3, #20
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d006      	beq.n	8011af4 <etharp_find_entry+0x27c>
 8011ae6:	4b1a      	ldr	r3, [pc, #104]	; (8011b50 <etharp_find_entry+0x2d8>)
 8011ae8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011aec:	491d      	ldr	r1, [pc, #116]	; (8011b64 <etharp_find_entry+0x2ec>)
 8011aee:	481a      	ldr	r0, [pc, #104]	; (8011b58 <etharp_find_entry+0x2e0>)
 8011af0:	f002 fa8e 	bl	8014010 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00b      	beq.n	8011b12 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6819      	ldr	r1, [r3, #0]
 8011b02:	4812      	ldr	r0, [pc, #72]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011b04:	4613      	mov	r3, r2
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	4413      	add	r3, r2
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	4403      	add	r3, r0
 8011b0e:	3304      	adds	r3, #4
 8011b10:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011b12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b16:	490d      	ldr	r1, [pc, #52]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011b18:	4613      	mov	r3, r2
 8011b1a:	005b      	lsls	r3, r3, #1
 8011b1c:	4413      	add	r3, r2
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	440b      	add	r3, r1
 8011b22:	3312      	adds	r3, #18
 8011b24:	2200      	movs	r2, #0
 8011b26:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011b28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b2c:	4907      	ldr	r1, [pc, #28]	; (8011b4c <etharp_find_entry+0x2d4>)
 8011b2e:	4613      	mov	r3, r2
 8011b30:	005b      	lsls	r3, r3, #1
 8011b32:	4413      	add	r3, r2
 8011b34:	00db      	lsls	r3, r3, #3
 8011b36:	440b      	add	r3, r1
 8011b38:	3308      	adds	r3, #8
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011b3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3728      	adds	r7, #40	; 0x28
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20004a44 	.word	0x20004a44
 8011b50:	080179e0 	.word	0x080179e0
 8011b54:	08017a18 	.word	0x08017a18
 8011b58:	08017a58 	.word	0x08017a58
 8011b5c:	08017a80 	.word	0x08017a80
 8011b60:	08017a98 	.word	0x08017a98
 8011b64:	08017aac 	.word	0x08017aac

08011b68 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b088      	sub	sp, #32
 8011b6c:	af02      	add	r7, sp, #8
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	607a      	str	r2, [r7, #4]
 8011b74:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b7c:	2b06      	cmp	r3, #6
 8011b7e:	d006      	beq.n	8011b8e <etharp_update_arp_entry+0x26>
 8011b80:	4b48      	ldr	r3, [pc, #288]	; (8011ca4 <etharp_update_arp_entry+0x13c>)
 8011b82:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011b86:	4948      	ldr	r1, [pc, #288]	; (8011ca8 <etharp_update_arp_entry+0x140>)
 8011b88:	4848      	ldr	r0, [pc, #288]	; (8011cac <etharp_update_arp_entry+0x144>)
 8011b8a:	f002 fa41 	bl	8014010 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d012      	beq.n	8011bba <etharp_update_arp_entry+0x52>
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00e      	beq.n	8011bba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	68f9      	ldr	r1, [r7, #12]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f001 f8fe 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8011ba8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d105      	bne.n	8011bba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011bb6:	2be0      	cmp	r3, #224	; 0xe0
 8011bb8:	d102      	bne.n	8011bc0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011bba:	f06f 030f 	mvn.w	r3, #15
 8011bbe:	e06c      	b.n	8011c9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011bc0:	78fb      	ldrb	r3, [r7, #3]
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	68b8      	ldr	r0, [r7, #8]
 8011bc8:	f7ff fe56 	bl	8011878 <etharp_find_entry>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011bd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da02      	bge.n	8011bde <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011bd8:	8afb      	ldrh	r3, [r7, #22]
 8011bda:	b25b      	sxtb	r3, r3
 8011bdc:	e05d      	b.n	8011c9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011bde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011be2:	4933      	ldr	r1, [pc, #204]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011be4:	4613      	mov	r3, r2
 8011be6:	005b      	lsls	r3, r3, #1
 8011be8:	4413      	add	r3, r2
 8011bea:	00db      	lsls	r3, r3, #3
 8011bec:	440b      	add	r3, r1
 8011bee:	3314      	adds	r3, #20
 8011bf0:	2202      	movs	r2, #2
 8011bf2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011bf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bf8:	492d      	ldr	r1, [pc, #180]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	005b      	lsls	r3, r3, #1
 8011bfe:	4413      	add	r3, r2
 8011c00:	00db      	lsls	r3, r3, #3
 8011c02:	440b      	add	r3, r1
 8011c04:	3308      	adds	r3, #8
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011c0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c0e:	4613      	mov	r3, r2
 8011c10:	005b      	lsls	r3, r3, #1
 8011c12:	4413      	add	r3, r2
 8011c14:	00db      	lsls	r3, r3, #3
 8011c16:	3308      	adds	r3, #8
 8011c18:	4a25      	ldr	r2, [pc, #148]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011c1a:	4413      	add	r3, r2
 8011c1c:	3304      	adds	r3, #4
 8011c1e:	2206      	movs	r2, #6
 8011c20:	6879      	ldr	r1, [r7, #4]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f002 f9c4 	bl	8013fb0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011c28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c2c:	4920      	ldr	r1, [pc, #128]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011c2e:	4613      	mov	r3, r2
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	440b      	add	r3, r1
 8011c38:	3312      	adds	r3, #18
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011c3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c42:	491b      	ldr	r1, [pc, #108]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011c44:	4613      	mov	r3, r2
 8011c46:	005b      	lsls	r3, r3, #1
 8011c48:	4413      	add	r3, r2
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	440b      	add	r3, r1
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d021      	beq.n	8011c98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011c54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c58:	4915      	ldr	r1, [pc, #84]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	4413      	add	r3, r2
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	440b      	add	r3, r1
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011c6c:	4910      	ldr	r1, [pc, #64]	; (8011cb0 <etharp_update_arp_entry+0x148>)
 8011c6e:	4613      	mov	r3, r2
 8011c70:	005b      	lsls	r3, r3, #1
 8011c72:	4413      	add	r3, r2
 8011c74:	00db      	lsls	r3, r3, #3
 8011c76:	440b      	add	r3, r1
 8011c78:	2200      	movs	r2, #0
 8011c7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6939      	ldr	r1, [r7, #16]
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f002 f823 	bl	8013cd8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011c92:	6938      	ldr	r0, [r7, #16]
 8011c94:	f7f9 fdf0 	bl	800b878 <pbuf_free>
  }
  return ERR_OK;
 8011c98:	2300      	movs	r3, #0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3718      	adds	r7, #24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	080179e0 	.word	0x080179e0
 8011ca8:	08017ad8 	.word	0x08017ad8
 8011cac:	08017a58 	.word	0x08017a58
 8011cb0:	20004a44 	.word	0x20004a44

08011cb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	60fb      	str	r3, [r7, #12]
 8011cc0:	e01e      	b.n	8011d00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011cc2:	4913      	ldr	r1, [pc, #76]	; (8011d10 <etharp_cleanup_netif+0x5c>)
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	4413      	add	r3, r2
 8011ccc:	00db      	lsls	r3, r3, #3
 8011cce:	440b      	add	r3, r1
 8011cd0:	3314      	adds	r3, #20
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00e      	beq.n	8011cfa <etharp_cleanup_netif+0x46>
 8011cdc:	490c      	ldr	r1, [pc, #48]	; (8011d10 <etharp_cleanup_netif+0x5c>)
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	005b      	lsls	r3, r3, #1
 8011ce4:	4413      	add	r3, r2
 8011ce6:	00db      	lsls	r3, r3, #3
 8011ce8:	440b      	add	r3, r1
 8011cea:	3308      	adds	r3, #8
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d102      	bne.n	8011cfa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f7ff fce5 	bl	80116c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	60fb      	str	r3, [r7, #12]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2b09      	cmp	r3, #9
 8011d04:	dddd      	ble.n	8011cc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011d06:	bf00      	nop
 8011d08:	bf00      	nop
 8011d0a:	3710      	adds	r7, #16
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	20004a44 	.word	0x20004a44

08011d14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011d14:	b5b0      	push	{r4, r5, r7, lr}
 8011d16:	b08a      	sub	sp, #40	; 0x28
 8011d18:	af04      	add	r7, sp, #16
 8011d1a:	6078      	str	r0, [r7, #4]
 8011d1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d107      	bne.n	8011d34 <etharp_input+0x20>
 8011d24:	4b3d      	ldr	r3, [pc, #244]	; (8011e1c <etharp_input+0x108>)
 8011d26:	f240 228a 	movw	r2, #650	; 0x28a
 8011d2a:	493d      	ldr	r1, [pc, #244]	; (8011e20 <etharp_input+0x10c>)
 8011d2c:	483d      	ldr	r0, [pc, #244]	; (8011e24 <etharp_input+0x110>)
 8011d2e:	f002 f96f 	bl	8014010 <iprintf>
 8011d32:	e06f      	b.n	8011e14 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	881b      	ldrh	r3, [r3, #0]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d44:	d10c      	bne.n	8011d60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011d4a:	2b06      	cmp	r3, #6
 8011d4c:	d108      	bne.n	8011d60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011d52:	2b04      	cmp	r3, #4
 8011d54:	d104      	bne.n	8011d60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	885b      	ldrh	r3, [r3, #2]
 8011d5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011d5c:	2b08      	cmp	r3, #8
 8011d5e:	d003      	beq.n	8011d68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f7f9 fd89 	bl	800b878 <pbuf_free>
    return;
 8011d66:	e055      	b.n	8011e14 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	330e      	adds	r3, #14
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	3318      	adds	r3, #24
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	3304      	adds	r3, #4
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d102      	bne.n	8011d88 <etharp_input+0x74>
    for_us = 0;
 8011d82:	2300      	movs	r3, #0
 8011d84:	75fb      	strb	r3, [r7, #23]
 8011d86:	e009      	b.n	8011d9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011d88:	68ba      	ldr	r2, [r7, #8]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	bf0c      	ite	eq
 8011d94:	2301      	moveq	r3, #1
 8011d96:	2300      	movne	r3, #0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	f103 0208 	add.w	r2, r3, #8
 8011da2:	7dfb      	ldrb	r3, [r7, #23]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <etharp_input+0x98>
 8011da8:	2301      	movs	r3, #1
 8011daa:	e000      	b.n	8011dae <etharp_input+0x9a>
 8011dac:	2302      	movs	r3, #2
 8011dae:	f107 010c 	add.w	r1, r7, #12
 8011db2:	6838      	ldr	r0, [r7, #0]
 8011db4:	f7ff fed8 	bl	8011b68 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	88db      	ldrh	r3, [r3, #6]
 8011dbc:	b29b      	uxth	r3, r3
 8011dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dc2:	d003      	beq.n	8011dcc <etharp_input+0xb8>
 8011dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011dc8:	d01e      	beq.n	8011e08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011dca:	e020      	b.n	8011e0e <etharp_input+0xfa>
      if (for_us) {
 8011dcc:	7dfb      	ldrb	r3, [r7, #23]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d01c      	beq.n	8011e0c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011de8:	693a      	ldr	r2, [r7, #16]
 8011dea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011dec:	2102      	movs	r1, #2
 8011dee:	9103      	str	r1, [sp, #12]
 8011df0:	f107 010c 	add.w	r1, r7, #12
 8011df4:	9102      	str	r1, [sp, #8]
 8011df6:	9201      	str	r2, [sp, #4]
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	462b      	mov	r3, r5
 8011dfc:	4622      	mov	r2, r4
 8011dfe:	4601      	mov	r1, r0
 8011e00:	6838      	ldr	r0, [r7, #0]
 8011e02:	f000 faeb 	bl	80123dc <etharp_raw>
      break;
 8011e06:	e001      	b.n	8011e0c <etharp_input+0xf8>
      break;
 8011e08:	bf00      	nop
 8011e0a:	e000      	b.n	8011e0e <etharp_input+0xfa>
      break;
 8011e0c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7f9 fd32 	bl	800b878 <pbuf_free>
}
 8011e14:	3718      	adds	r7, #24
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bdb0      	pop	{r4, r5, r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	080179e0 	.word	0x080179e0
 8011e20:	08017b30 	.word	0x08017b30
 8011e24:	08017a58 	.word	0x08017a58

08011e28 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b086      	sub	sp, #24
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	60f8      	str	r0, [r7, #12]
 8011e30:	60b9      	str	r1, [r7, #8]
 8011e32:	4613      	mov	r3, r2
 8011e34:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011e36:	79fa      	ldrb	r2, [r7, #7]
 8011e38:	4944      	ldr	r1, [pc, #272]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	4413      	add	r3, r2
 8011e40:	00db      	lsls	r3, r3, #3
 8011e42:	440b      	add	r3, r1
 8011e44:	3314      	adds	r3, #20
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d806      	bhi.n	8011e5a <etharp_output_to_arp_index+0x32>
 8011e4c:	4b40      	ldr	r3, [pc, #256]	; (8011f50 <etharp_output_to_arp_index+0x128>)
 8011e4e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011e52:	4940      	ldr	r1, [pc, #256]	; (8011f54 <etharp_output_to_arp_index+0x12c>)
 8011e54:	4840      	ldr	r0, [pc, #256]	; (8011f58 <etharp_output_to_arp_index+0x130>)
 8011e56:	f002 f8db 	bl	8014010 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011e5a:	79fa      	ldrb	r2, [r7, #7]
 8011e5c:	493b      	ldr	r1, [pc, #236]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011e5e:	4613      	mov	r3, r2
 8011e60:	005b      	lsls	r3, r3, #1
 8011e62:	4413      	add	r3, r2
 8011e64:	00db      	lsls	r3, r3, #3
 8011e66:	440b      	add	r3, r1
 8011e68:	3314      	adds	r3, #20
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d153      	bne.n	8011f18 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011e70:	79fa      	ldrb	r2, [r7, #7]
 8011e72:	4936      	ldr	r1, [pc, #216]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011e74:	4613      	mov	r3, r2
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	4413      	add	r3, r2
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	440b      	add	r3, r1
 8011e7e:	3312      	adds	r3, #18
 8011e80:	881b      	ldrh	r3, [r3, #0]
 8011e82:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011e86:	d919      	bls.n	8011ebc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011e88:	79fa      	ldrb	r2, [r7, #7]
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	005b      	lsls	r3, r3, #1
 8011e8e:	4413      	add	r3, r2
 8011e90:	00db      	lsls	r3, r3, #3
 8011e92:	4a2e      	ldr	r2, [pc, #184]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011e94:	4413      	add	r3, r2
 8011e96:	3304      	adds	r3, #4
 8011e98:	4619      	mov	r1, r3
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f000 fb4c 	bl	8012538 <etharp_request>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d138      	bne.n	8011f18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011ea6:	79fa      	ldrb	r2, [r7, #7]
 8011ea8:	4928      	ldr	r1, [pc, #160]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011eaa:	4613      	mov	r3, r2
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	4413      	add	r3, r2
 8011eb0:	00db      	lsls	r3, r3, #3
 8011eb2:	440b      	add	r3, r1
 8011eb4:	3314      	adds	r3, #20
 8011eb6:	2203      	movs	r2, #3
 8011eb8:	701a      	strb	r2, [r3, #0]
 8011eba:	e02d      	b.n	8011f18 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011ebc:	79fa      	ldrb	r2, [r7, #7]
 8011ebe:	4923      	ldr	r1, [pc, #140]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	005b      	lsls	r3, r3, #1
 8011ec4:	4413      	add	r3, r2
 8011ec6:	00db      	lsls	r3, r3, #3
 8011ec8:	440b      	add	r3, r1
 8011eca:	3312      	adds	r3, #18
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011ed2:	d321      	bcc.n	8011f18 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011ed4:	79fa      	ldrb	r2, [r7, #7]
 8011ed6:	4613      	mov	r3, r2
 8011ed8:	005b      	lsls	r3, r3, #1
 8011eda:	4413      	add	r3, r2
 8011edc:	00db      	lsls	r3, r3, #3
 8011ede:	4a1b      	ldr	r2, [pc, #108]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011ee0:	4413      	add	r3, r2
 8011ee2:	1d19      	adds	r1, r3, #4
 8011ee4:	79fa      	ldrb	r2, [r7, #7]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	005b      	lsls	r3, r3, #1
 8011eea:	4413      	add	r3, r2
 8011eec:	00db      	lsls	r3, r3, #3
 8011eee:	3308      	adds	r3, #8
 8011ef0:	4a16      	ldr	r2, [pc, #88]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011ef2:	4413      	add	r3, r2
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f000 fafb 	bl	80124f4 <etharp_request_dst>
 8011efe:	4603      	mov	r3, r0
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d109      	bne.n	8011f18 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011f04:	79fa      	ldrb	r2, [r7, #7]
 8011f06:	4911      	ldr	r1, [pc, #68]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011f08:	4613      	mov	r3, r2
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	4413      	add	r3, r2
 8011f0e:	00db      	lsls	r3, r3, #3
 8011f10:	440b      	add	r3, r1
 8011f12:	3314      	adds	r3, #20
 8011f14:	2203      	movs	r2, #3
 8011f16:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011f1e:	79fa      	ldrb	r2, [r7, #7]
 8011f20:	4613      	mov	r3, r2
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	4413      	add	r3, r2
 8011f26:	00db      	lsls	r3, r3, #3
 8011f28:	3308      	adds	r3, #8
 8011f2a:	4a08      	ldr	r2, [pc, #32]	; (8011f4c <etharp_output_to_arp_index+0x124>)
 8011f2c:	4413      	add	r3, r2
 8011f2e:	3304      	adds	r3, #4
 8011f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011f34:	9200      	str	r2, [sp, #0]
 8011f36:	460a      	mov	r2, r1
 8011f38:	68b9      	ldr	r1, [r7, #8]
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f001 fecc 	bl	8013cd8 <ethernet_output>
 8011f40:	4603      	mov	r3, r0
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3710      	adds	r7, #16
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20004a44 	.word	0x20004a44
 8011f50:	080179e0 	.word	0x080179e0
 8011f54:	08017b50 	.word	0x08017b50
 8011f58:	08017a58 	.word	0x08017a58

08011f5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08a      	sub	sp, #40	; 0x28
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d106      	bne.n	8011f80 <etharp_output+0x24>
 8011f72:	4b73      	ldr	r3, [pc, #460]	; (8012140 <etharp_output+0x1e4>)
 8011f74:	f240 321e 	movw	r2, #798	; 0x31e
 8011f78:	4972      	ldr	r1, [pc, #456]	; (8012144 <etharp_output+0x1e8>)
 8011f7a:	4873      	ldr	r0, [pc, #460]	; (8012148 <etharp_output+0x1ec>)
 8011f7c:	f002 f848 	bl	8014010 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d106      	bne.n	8011f94 <etharp_output+0x38>
 8011f86:	4b6e      	ldr	r3, [pc, #440]	; (8012140 <etharp_output+0x1e4>)
 8011f88:	f240 321f 	movw	r2, #799	; 0x31f
 8011f8c:	496f      	ldr	r1, [pc, #444]	; (801214c <etharp_output+0x1f0>)
 8011f8e:	486e      	ldr	r0, [pc, #440]	; (8012148 <etharp_output+0x1ec>)
 8011f90:	f002 f83e 	bl	8014010 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <etharp_output+0x4c>
 8011f9a:	4b69      	ldr	r3, [pc, #420]	; (8012140 <etharp_output+0x1e4>)
 8011f9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011fa0:	496b      	ldr	r1, [pc, #428]	; (8012150 <etharp_output+0x1f4>)
 8011fa2:	4869      	ldr	r0, [pc, #420]	; (8012148 <etharp_output+0x1ec>)
 8011fa4:	f002 f834 	bl	8014010 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68f9      	ldr	r1, [r7, #12]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 fef8 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d002      	beq.n	8011fc0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011fba:	4b66      	ldr	r3, [pc, #408]	; (8012154 <etharp_output+0x1f8>)
 8011fbc:	61fb      	str	r3, [r7, #28]
 8011fbe:	e0af      	b.n	8012120 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fc8:	2be0      	cmp	r3, #224	; 0xe0
 8011fca:	d118      	bne.n	8011ffe <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011fd4:	235e      	movs	r3, #94	; 0x5e
 8011fd6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	3302      	adds	r3, #2
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3303      	adds	r3, #3
 8011ff2:	781b      	ldrb	r3, [r3, #0]
 8011ff4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011ff6:	f107 0310 	add.w	r3, r7, #16
 8011ffa:	61fb      	str	r3, [r7, #28]
 8011ffc:	e090      	b.n	8012120 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	3304      	adds	r3, #4
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	405a      	eors	r2, r3
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	3308      	adds	r3, #8
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4013      	ands	r3, r2
 8012012:	2b00      	cmp	r3, #0
 8012014:	d012      	beq.n	801203c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801201c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012020:	4293      	cmp	r3, r2
 8012022:	d00b      	beq.n	801203c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	330c      	adds	r3, #12
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d003      	beq.n	8012036 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	330c      	adds	r3, #12
 8012032:	61bb      	str	r3, [r7, #24]
 8012034:	e002      	b.n	801203c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012036:	f06f 0303 	mvn.w	r3, #3
 801203a:	e07d      	b.n	8012138 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801203c:	4b46      	ldr	r3, [pc, #280]	; (8012158 <etharp_output+0x1fc>)
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	4619      	mov	r1, r3
 8012042:	4a46      	ldr	r2, [pc, #280]	; (801215c <etharp_output+0x200>)
 8012044:	460b      	mov	r3, r1
 8012046:	005b      	lsls	r3, r3, #1
 8012048:	440b      	add	r3, r1
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	4413      	add	r3, r2
 801204e:	3314      	adds	r3, #20
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	2b01      	cmp	r3, #1
 8012054:	d925      	bls.n	80120a2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012056:	4b40      	ldr	r3, [pc, #256]	; (8012158 <etharp_output+0x1fc>)
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	4619      	mov	r1, r3
 801205c:	4a3f      	ldr	r2, [pc, #252]	; (801215c <etharp_output+0x200>)
 801205e:	460b      	mov	r3, r1
 8012060:	005b      	lsls	r3, r3, #1
 8012062:	440b      	add	r3, r1
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	4413      	add	r3, r2
 8012068:	3308      	adds	r3, #8
 801206a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801206c:	68fa      	ldr	r2, [r7, #12]
 801206e:	429a      	cmp	r2, r3
 8012070:	d117      	bne.n	80120a2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	4b38      	ldr	r3, [pc, #224]	; (8012158 <etharp_output+0x1fc>)
 8012078:	781b      	ldrb	r3, [r3, #0]
 801207a:	4618      	mov	r0, r3
 801207c:	4937      	ldr	r1, [pc, #220]	; (801215c <etharp_output+0x200>)
 801207e:	4603      	mov	r3, r0
 8012080:	005b      	lsls	r3, r3, #1
 8012082:	4403      	add	r3, r0
 8012084:	00db      	lsls	r3, r3, #3
 8012086:	440b      	add	r3, r1
 8012088:	3304      	adds	r3, #4
 801208a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801208c:	429a      	cmp	r2, r3
 801208e:	d108      	bne.n	80120a2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012090:	4b31      	ldr	r3, [pc, #196]	; (8012158 <etharp_output+0x1fc>)
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	461a      	mov	r2, r3
 8012096:	68b9      	ldr	r1, [r7, #8]
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7ff fec5 	bl	8011e28 <etharp_output_to_arp_index>
 801209e:	4603      	mov	r3, r0
 80120a0:	e04a      	b.n	8012138 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80120a2:	2300      	movs	r3, #0
 80120a4:	75fb      	strb	r3, [r7, #23]
 80120a6:	e031      	b.n	801210c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120a8:	7dfa      	ldrb	r2, [r7, #23]
 80120aa:	492c      	ldr	r1, [pc, #176]	; (801215c <etharp_output+0x200>)
 80120ac:	4613      	mov	r3, r2
 80120ae:	005b      	lsls	r3, r3, #1
 80120b0:	4413      	add	r3, r2
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	440b      	add	r3, r1
 80120b6:	3314      	adds	r3, #20
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d923      	bls.n	8012106 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80120be:	7dfa      	ldrb	r2, [r7, #23]
 80120c0:	4926      	ldr	r1, [pc, #152]	; (801215c <etharp_output+0x200>)
 80120c2:	4613      	mov	r3, r2
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	440b      	add	r3, r1
 80120cc:	3308      	adds	r3, #8
 80120ce:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d117      	bne.n	8012106 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80120d6:	69bb      	ldr	r3, [r7, #24]
 80120d8:	6819      	ldr	r1, [r3, #0]
 80120da:	7dfa      	ldrb	r2, [r7, #23]
 80120dc:	481f      	ldr	r0, [pc, #124]	; (801215c <etharp_output+0x200>)
 80120de:	4613      	mov	r3, r2
 80120e0:	005b      	lsls	r3, r3, #1
 80120e2:	4413      	add	r3, r2
 80120e4:	00db      	lsls	r3, r3, #3
 80120e6:	4403      	add	r3, r0
 80120e8:	3304      	adds	r3, #4
 80120ea:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80120ec:	4299      	cmp	r1, r3
 80120ee:	d10a      	bne.n	8012106 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80120f0:	4a19      	ldr	r2, [pc, #100]	; (8012158 <etharp_output+0x1fc>)
 80120f2:	7dfb      	ldrb	r3, [r7, #23]
 80120f4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80120f6:	7dfb      	ldrb	r3, [r7, #23]
 80120f8:	461a      	mov	r2, r3
 80120fa:	68b9      	ldr	r1, [r7, #8]
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f7ff fe93 	bl	8011e28 <etharp_output_to_arp_index>
 8012102:	4603      	mov	r3, r0
 8012104:	e018      	b.n	8012138 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012106:	7dfb      	ldrb	r3, [r7, #23]
 8012108:	3301      	adds	r3, #1
 801210a:	75fb      	strb	r3, [r7, #23]
 801210c:	7dfb      	ldrb	r3, [r7, #23]
 801210e:	2b09      	cmp	r3, #9
 8012110:	d9ca      	bls.n	80120a8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	69b9      	ldr	r1, [r7, #24]
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f000 f822 	bl	8012160 <etharp_query>
 801211c:	4603      	mov	r3, r0
 801211e:	e00b      	b.n	8012138 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	68b9      	ldr	r1, [r7, #8]
 8012130:	68f8      	ldr	r0, [r7, #12]
 8012132:	f001 fdd1 	bl	8013cd8 <ethernet_output>
 8012136:	4603      	mov	r3, r0
}
 8012138:	4618      	mov	r0, r3
 801213a:	3720      	adds	r7, #32
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	080179e0 	.word	0x080179e0
 8012144:	08017b30 	.word	0x08017b30
 8012148:	08017a58 	.word	0x08017a58
 801214c:	08017b80 	.word	0x08017b80
 8012150:	08017b20 	.word	0x08017b20
 8012154:	08018230 	.word	0x08018230
 8012158:	20004b34 	.word	0x20004b34
 801215c:	20004a44 	.word	0x20004a44

08012160 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b08c      	sub	sp, #48	; 0x30
 8012164:	af02      	add	r7, sp, #8
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	3326      	adds	r3, #38	; 0x26
 8012170:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012172:	23ff      	movs	r3, #255	; 0xff
 8012174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	68f9      	ldr	r1, [r7, #12]
 8012182:	4618      	mov	r0, r3
 8012184:	f000 fe0e 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d10c      	bne.n	80121a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012196:	2be0      	cmp	r3, #224	; 0xe0
 8012198:	d006      	beq.n	80121a8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d003      	beq.n	80121a8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d102      	bne.n	80121ae <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80121a8:	f06f 030f 	mvn.w	r3, #15
 80121ac:	e101      	b.n	80123b2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	2101      	movs	r1, #1
 80121b2:	68b8      	ldr	r0, [r7, #8]
 80121b4:	f7ff fb60 	bl	8011878 <etharp_find_entry>
 80121b8:	4603      	mov	r3, r0
 80121ba:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80121bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	da02      	bge.n	80121ca <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80121c4:	8a7b      	ldrh	r3, [r7, #18]
 80121c6:	b25b      	sxtb	r3, r3
 80121c8:	e0f3      	b.n	80123b2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80121ca:	8a7b      	ldrh	r3, [r7, #18]
 80121cc:	2b7e      	cmp	r3, #126	; 0x7e
 80121ce:	d906      	bls.n	80121de <etharp_query+0x7e>
 80121d0:	4b7a      	ldr	r3, [pc, #488]	; (80123bc <etharp_query+0x25c>)
 80121d2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80121d6:	497a      	ldr	r1, [pc, #488]	; (80123c0 <etharp_query+0x260>)
 80121d8:	487a      	ldr	r0, [pc, #488]	; (80123c4 <etharp_query+0x264>)
 80121da:	f001 ff19 	bl	8014010 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80121de:	8a7b      	ldrh	r3, [r7, #18]
 80121e0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80121e2:	7c7a      	ldrb	r2, [r7, #17]
 80121e4:	4978      	ldr	r1, [pc, #480]	; (80123c8 <etharp_query+0x268>)
 80121e6:	4613      	mov	r3, r2
 80121e8:	005b      	lsls	r3, r3, #1
 80121ea:	4413      	add	r3, r2
 80121ec:	00db      	lsls	r3, r3, #3
 80121ee:	440b      	add	r3, r1
 80121f0:	3314      	adds	r3, #20
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d115      	bne.n	8012224 <etharp_query+0xc4>
    is_new_entry = 1;
 80121f8:	2301      	movs	r3, #1
 80121fa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80121fc:	7c7a      	ldrb	r2, [r7, #17]
 80121fe:	4972      	ldr	r1, [pc, #456]	; (80123c8 <etharp_query+0x268>)
 8012200:	4613      	mov	r3, r2
 8012202:	005b      	lsls	r3, r3, #1
 8012204:	4413      	add	r3, r2
 8012206:	00db      	lsls	r3, r3, #3
 8012208:	440b      	add	r3, r1
 801220a:	3314      	adds	r3, #20
 801220c:	2201      	movs	r2, #1
 801220e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012210:	7c7a      	ldrb	r2, [r7, #17]
 8012212:	496d      	ldr	r1, [pc, #436]	; (80123c8 <etharp_query+0x268>)
 8012214:	4613      	mov	r3, r2
 8012216:	005b      	lsls	r3, r3, #1
 8012218:	4413      	add	r3, r2
 801221a:	00db      	lsls	r3, r3, #3
 801221c:	440b      	add	r3, r1
 801221e:	3308      	adds	r3, #8
 8012220:	68fa      	ldr	r2, [r7, #12]
 8012222:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012224:	7c7a      	ldrb	r2, [r7, #17]
 8012226:	4968      	ldr	r1, [pc, #416]	; (80123c8 <etharp_query+0x268>)
 8012228:	4613      	mov	r3, r2
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	4413      	add	r3, r2
 801222e:	00db      	lsls	r3, r3, #3
 8012230:	440b      	add	r3, r1
 8012232:	3314      	adds	r3, #20
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	2b01      	cmp	r3, #1
 8012238:	d011      	beq.n	801225e <etharp_query+0xfe>
 801223a:	7c7a      	ldrb	r2, [r7, #17]
 801223c:	4962      	ldr	r1, [pc, #392]	; (80123c8 <etharp_query+0x268>)
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	440b      	add	r3, r1
 8012248:	3314      	adds	r3, #20
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2b01      	cmp	r3, #1
 801224e:	d806      	bhi.n	801225e <etharp_query+0xfe>
 8012250:	4b5a      	ldr	r3, [pc, #360]	; (80123bc <etharp_query+0x25c>)
 8012252:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012256:	495d      	ldr	r1, [pc, #372]	; (80123cc <etharp_query+0x26c>)
 8012258:	485a      	ldr	r0, [pc, #360]	; (80123c4 <etharp_query+0x264>)
 801225a:	f001 fed9 	bl	8014010 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <etharp_query+0x10a>
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d10c      	bne.n	8012284 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801226a:	68b9      	ldr	r1, [r7, #8]
 801226c:	68f8      	ldr	r0, [r7, #12]
 801226e:	f000 f963 	bl	8012538 <etharp_request>
 8012272:	4603      	mov	r3, r0
 8012274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d102      	bne.n	8012284 <etharp_query+0x124>
      return result;
 801227e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012282:	e096      	b.n	80123b2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d106      	bne.n	8012298 <etharp_query+0x138>
 801228a:	4b4c      	ldr	r3, [pc, #304]	; (80123bc <etharp_query+0x25c>)
 801228c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012290:	494f      	ldr	r1, [pc, #316]	; (80123d0 <etharp_query+0x270>)
 8012292:	484c      	ldr	r0, [pc, #304]	; (80123c4 <etharp_query+0x264>)
 8012294:	f001 febc 	bl	8014010 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012298:	7c7a      	ldrb	r2, [r7, #17]
 801229a:	494b      	ldr	r1, [pc, #300]	; (80123c8 <etharp_query+0x268>)
 801229c:	4613      	mov	r3, r2
 801229e:	005b      	lsls	r3, r3, #1
 80122a0:	4413      	add	r3, r2
 80122a2:	00db      	lsls	r3, r3, #3
 80122a4:	440b      	add	r3, r1
 80122a6:	3314      	adds	r3, #20
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d917      	bls.n	80122de <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80122ae:	4a49      	ldr	r2, [pc, #292]	; (80123d4 <etharp_query+0x274>)
 80122b0:	7c7b      	ldrb	r3, [r7, #17]
 80122b2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80122b4:	7c7a      	ldrb	r2, [r7, #17]
 80122b6:	4613      	mov	r3, r2
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4413      	add	r3, r2
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	3308      	adds	r3, #8
 80122c0:	4a41      	ldr	r2, [pc, #260]	; (80123c8 <etharp_query+0x268>)
 80122c2:	4413      	add	r3, r2
 80122c4:	3304      	adds	r3, #4
 80122c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80122ca:	9200      	str	r2, [sp, #0]
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	6879      	ldr	r1, [r7, #4]
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f001 fd01 	bl	8013cd8 <ethernet_output>
 80122d6:	4603      	mov	r3, r0
 80122d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122dc:	e067      	b.n	80123ae <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80122de:	7c7a      	ldrb	r2, [r7, #17]
 80122e0:	4939      	ldr	r1, [pc, #228]	; (80123c8 <etharp_query+0x268>)
 80122e2:	4613      	mov	r3, r2
 80122e4:	005b      	lsls	r3, r3, #1
 80122e6:	4413      	add	r3, r2
 80122e8:	00db      	lsls	r3, r3, #3
 80122ea:	440b      	add	r3, r1
 80122ec:	3314      	adds	r3, #20
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d15c      	bne.n	80123ae <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80122f4:	2300      	movs	r3, #0
 80122f6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80122fc:	e01c      	b.n	8012338 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	895a      	ldrh	r2, [r3, #10]
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	891b      	ldrh	r3, [r3, #8]
 8012306:	429a      	cmp	r2, r3
 8012308:	d10a      	bne.n	8012320 <etharp_query+0x1c0>
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d006      	beq.n	8012320 <etharp_query+0x1c0>
 8012312:	4b2a      	ldr	r3, [pc, #168]	; (80123bc <etharp_query+0x25c>)
 8012314:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012318:	492f      	ldr	r1, [pc, #188]	; (80123d8 <etharp_query+0x278>)
 801231a:	482a      	ldr	r0, [pc, #168]	; (80123c4 <etharp_query+0x264>)
 801231c:	f001 fe78 	bl	8014010 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	7b1b      	ldrb	r3, [r3, #12]
 8012324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <etharp_query+0x1d2>
        copy_needed = 1;
 801232c:	2301      	movs	r3, #1
 801232e:	61bb      	str	r3, [r7, #24]
        break;
 8012330:	e005      	b.n	801233e <etharp_query+0x1de>
      }
      p = p->next;
 8012332:	69fb      	ldr	r3, [r7, #28]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1df      	bne.n	80122fe <etharp_query+0x19e>
    }
    if (copy_needed) {
 801233e:	69bb      	ldr	r3, [r7, #24]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d007      	beq.n	8012354 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	f44f 7120 	mov.w	r1, #640	; 0x280
 801234a:	200e      	movs	r0, #14
 801234c:	f7f9 fcfc 	bl	800bd48 <pbuf_clone>
 8012350:	61f8      	str	r0, [r7, #28]
 8012352:	e004      	b.n	801235e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012358:	69f8      	ldr	r0, [r7, #28]
 801235a:	f7f9 fb33 	bl	800b9c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d021      	beq.n	80123a8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012364:	7c7a      	ldrb	r2, [r7, #17]
 8012366:	4918      	ldr	r1, [pc, #96]	; (80123c8 <etharp_query+0x268>)
 8012368:	4613      	mov	r3, r2
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	4413      	add	r3, r2
 801236e:	00db      	lsls	r3, r3, #3
 8012370:	440b      	add	r3, r1
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00a      	beq.n	801238e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012378:	7c7a      	ldrb	r2, [r7, #17]
 801237a:	4913      	ldr	r1, [pc, #76]	; (80123c8 <etharp_query+0x268>)
 801237c:	4613      	mov	r3, r2
 801237e:	005b      	lsls	r3, r3, #1
 8012380:	4413      	add	r3, r2
 8012382:	00db      	lsls	r3, r3, #3
 8012384:	440b      	add	r3, r1
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4618      	mov	r0, r3
 801238a:	f7f9 fa75 	bl	800b878 <pbuf_free>
      }
      arp_table[i].q = p;
 801238e:	7c7a      	ldrb	r2, [r7, #17]
 8012390:	490d      	ldr	r1, [pc, #52]	; (80123c8 <etharp_query+0x268>)
 8012392:	4613      	mov	r3, r2
 8012394:	005b      	lsls	r3, r3, #1
 8012396:	4413      	add	r3, r2
 8012398:	00db      	lsls	r3, r3, #3
 801239a:	440b      	add	r3, r1
 801239c:	69fa      	ldr	r2, [r7, #28]
 801239e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123a6:	e002      	b.n	80123ae <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80123a8:	23ff      	movs	r3, #255	; 0xff
 80123aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80123ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3728      	adds	r7, #40	; 0x28
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	080179e0 	.word	0x080179e0
 80123c0:	08017b8c 	.word	0x08017b8c
 80123c4:	08017a58 	.word	0x08017a58
 80123c8:	20004a44 	.word	0x20004a44
 80123cc:	08017b9c 	.word	0x08017b9c
 80123d0:	08017b80 	.word	0x08017b80
 80123d4:	20004b34 	.word	0x20004b34
 80123d8:	08017bc4 	.word	0x08017bc4

080123dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b08a      	sub	sp, #40	; 0x28
 80123e0:	af02      	add	r7, sp, #8
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	607a      	str	r2, [r7, #4]
 80123e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80123ea:	2300      	movs	r3, #0
 80123ec:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d106      	bne.n	8012402 <etharp_raw+0x26>
 80123f4:	4b3a      	ldr	r3, [pc, #232]	; (80124e0 <etharp_raw+0x104>)
 80123f6:	f240 4257 	movw	r2, #1111	; 0x457
 80123fa:	493a      	ldr	r1, [pc, #232]	; (80124e4 <etharp_raw+0x108>)
 80123fc:	483a      	ldr	r0, [pc, #232]	; (80124e8 <etharp_raw+0x10c>)
 80123fe:	f001 fe07 	bl	8014010 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012402:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012406:	211c      	movs	r1, #28
 8012408:	200e      	movs	r0, #14
 801240a:	f7f8 ff51 	bl	800b2b0 <pbuf_alloc>
 801240e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d102      	bne.n	801241c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012416:	f04f 33ff 	mov.w	r3, #4294967295
 801241a:	e05d      	b.n	80124d8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	895b      	ldrh	r3, [r3, #10]
 8012420:	2b1b      	cmp	r3, #27
 8012422:	d806      	bhi.n	8012432 <etharp_raw+0x56>
 8012424:	4b2e      	ldr	r3, [pc, #184]	; (80124e0 <etharp_raw+0x104>)
 8012426:	f240 4262 	movw	r2, #1122	; 0x462
 801242a:	4930      	ldr	r1, [pc, #192]	; (80124ec <etharp_raw+0x110>)
 801242c:	482e      	ldr	r0, [pc, #184]	; (80124e8 <etharp_raw+0x10c>)
 801242e:	f001 fdef 	bl	8014010 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	685b      	ldr	r3, [r3, #4]
 8012436:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012438:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801243a:	4618      	mov	r0, r3
 801243c:	f7f7 fe70 	bl	800a120 <lwip_htons>
 8012440:	4603      	mov	r3, r0
 8012442:	461a      	mov	r2, r3
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801244e:	2b06      	cmp	r3, #6
 8012450:	d006      	beq.n	8012460 <etharp_raw+0x84>
 8012452:	4b23      	ldr	r3, [pc, #140]	; (80124e0 <etharp_raw+0x104>)
 8012454:	f240 4269 	movw	r2, #1129	; 0x469
 8012458:	4925      	ldr	r1, [pc, #148]	; (80124f0 <etharp_raw+0x114>)
 801245a:	4823      	ldr	r0, [pc, #140]	; (80124e8 <etharp_raw+0x10c>)
 801245c:	f001 fdd8 	bl	8014010 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	3308      	adds	r3, #8
 8012464:	2206      	movs	r2, #6
 8012466:	6839      	ldr	r1, [r7, #0]
 8012468:	4618      	mov	r0, r3
 801246a:	f001 fda1 	bl	8013fb0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	3312      	adds	r3, #18
 8012472:	2206      	movs	r2, #6
 8012474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012476:	4618      	mov	r0, r3
 8012478:	f001 fd9a 	bl	8013fb0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	330e      	adds	r3, #14
 8012480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012482:	6812      	ldr	r2, [r2, #0]
 8012484:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	3318      	adds	r3, #24
 801248a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801248c:	6812      	ldr	r2, [r2, #0]
 801248e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
 8012496:	2200      	movs	r2, #0
 8012498:	f042 0201 	orr.w	r2, r2, #1
 801249c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	2200      	movs	r2, #0
 80124a2:	f042 0208 	orr.w	r2, r2, #8
 80124a6:	709a      	strb	r2, [r3, #2]
 80124a8:	2200      	movs	r2, #0
 80124aa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2206      	movs	r2, #6
 80124b0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2204      	movs	r2, #4
 80124b6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80124b8:	f640 0306 	movw	r3, #2054	; 0x806
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	69b9      	ldr	r1, [r7, #24]
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f001 fc07 	bl	8013cd8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80124ca:	69b8      	ldr	r0, [r7, #24]
 80124cc:	f7f9 f9d4 	bl	800b878 <pbuf_free>
  p = NULL;
 80124d0:	2300      	movs	r3, #0
 80124d2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80124d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3720      	adds	r7, #32
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	080179e0 	.word	0x080179e0
 80124e4:	08017b30 	.word	0x08017b30
 80124e8:	08017a58 	.word	0x08017a58
 80124ec:	08017be0 	.word	0x08017be0
 80124f0:	08017c14 	.word	0x08017c14

080124f4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b088      	sub	sp, #32
 80124f8:	af04      	add	r7, sp, #16
 80124fa:	60f8      	str	r0, [r7, #12]
 80124fc:	60b9      	str	r1, [r7, #8]
 80124fe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012510:	2201      	movs	r2, #1
 8012512:	9203      	str	r2, [sp, #12]
 8012514:	68ba      	ldr	r2, [r7, #8]
 8012516:	9202      	str	r2, [sp, #8]
 8012518:	4a06      	ldr	r2, [pc, #24]	; (8012534 <etharp_request_dst+0x40>)
 801251a:	9201      	str	r2, [sp, #4]
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	4603      	mov	r3, r0
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f7ff ff5a 	bl	80123dc <etharp_raw>
 8012528:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801252a:	4618      	mov	r0, r3
 801252c:	3710      	adds	r7, #16
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
 8012532:	bf00      	nop
 8012534:	08018238 	.word	0x08018238

08012538 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012542:	4a05      	ldr	r2, [pc, #20]	; (8012558 <etharp_request+0x20>)
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7ff ffd4 	bl	80124f4 <etharp_request_dst>
 801254c:	4603      	mov	r3, r0
}
 801254e:	4618      	mov	r0, r3
 8012550:	3708      	adds	r7, #8
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	08018230 	.word	0x08018230

0801255c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b08e      	sub	sp, #56	; 0x38
 8012560:	af04      	add	r7, sp, #16
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012566:	4b79      	ldr	r3, [pc, #484]	; (801274c <icmp_input+0x1f0>)
 8012568:	689b      	ldr	r3, [r3, #8]
 801256a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256e:	781b      	ldrb	r3, [r3, #0]
 8012570:	f003 030f 	and.w	r3, r3, #15
 8012574:	b2db      	uxtb	r3, r3
 8012576:	009b      	lsls	r3, r3, #2
 8012578:	b2db      	uxtb	r3, r3
 801257a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801257c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801257e:	2b13      	cmp	r3, #19
 8012580:	f240 80cd 	bls.w	801271e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	895b      	ldrh	r3, [r3, #10]
 8012588:	2b03      	cmp	r3, #3
 801258a:	f240 80ca 	bls.w	8012722 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	781b      	ldrb	r3, [r3, #0]
 8012594:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012598:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 80b7 	beq.w	8012710 <icmp_input+0x1b4>
 80125a2:	2b08      	cmp	r3, #8
 80125a4:	f040 80b7 	bne.w	8012716 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80125a8:	4b69      	ldr	r3, [pc, #420]	; (8012750 <icmp_input+0x1f4>)
 80125aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80125ac:	4b67      	ldr	r3, [pc, #412]	; (801274c <icmp_input+0x1f0>)
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125b4:	2be0      	cmp	r3, #224	; 0xe0
 80125b6:	f000 80bb 	beq.w	8012730 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80125ba:	4b64      	ldr	r3, [pc, #400]	; (801274c <icmp_input+0x1f0>)
 80125bc:	695b      	ldr	r3, [r3, #20]
 80125be:	4a63      	ldr	r2, [pc, #396]	; (801274c <icmp_input+0x1f0>)
 80125c0:	6812      	ldr	r2, [r2, #0]
 80125c2:	4611      	mov	r1, r2
 80125c4:	4618      	mov	r0, r3
 80125c6:	f000 fbed 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 80125ca:	4603      	mov	r3, r0
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f040 80b1 	bne.w	8012734 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	891b      	ldrh	r3, [r3, #8]
 80125d6:	2b07      	cmp	r3, #7
 80125d8:	f240 80a5 	bls.w	8012726 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80125dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125de:	330e      	adds	r3, #14
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7f9 f8b2 	bl	800b74c <pbuf_add_header>
 80125e8:	4603      	mov	r3, r0
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d04b      	beq.n	8012686 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	891a      	ldrh	r2, [r3, #8]
 80125f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125f4:	4413      	add	r3, r2
 80125f6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	891b      	ldrh	r3, [r3, #8]
 80125fc:	8b7a      	ldrh	r2, [r7, #26]
 80125fe:	429a      	cmp	r2, r3
 8012600:	f0c0 809a 	bcc.w	8012738 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012604:	8b7b      	ldrh	r3, [r7, #26]
 8012606:	f44f 7220 	mov.w	r2, #640	; 0x280
 801260a:	4619      	mov	r1, r3
 801260c:	200e      	movs	r0, #14
 801260e:	f7f8 fe4f 	bl	800b2b0 <pbuf_alloc>
 8012612:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 8090 	beq.w	801273c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	895b      	ldrh	r3, [r3, #10]
 8012620:	461a      	mov	r2, r3
 8012622:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012624:	3308      	adds	r3, #8
 8012626:	429a      	cmp	r2, r3
 8012628:	d203      	bcs.n	8012632 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801262a:	6978      	ldr	r0, [r7, #20]
 801262c:	f7f9 f924 	bl	800b878 <pbuf_free>
          goto icmperr;
 8012630:	e085      	b.n	801273e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801263a:	4618      	mov	r0, r3
 801263c:	f001 fcb8 	bl	8013fb0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012642:	4619      	mov	r1, r3
 8012644:	6978      	ldr	r0, [r7, #20]
 8012646:	f7f9 f891 	bl	800b76c <pbuf_remove_header>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d009      	beq.n	8012664 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012650:	4b40      	ldr	r3, [pc, #256]	; (8012754 <icmp_input+0x1f8>)
 8012652:	22b6      	movs	r2, #182	; 0xb6
 8012654:	4940      	ldr	r1, [pc, #256]	; (8012758 <icmp_input+0x1fc>)
 8012656:	4841      	ldr	r0, [pc, #260]	; (801275c <icmp_input+0x200>)
 8012658:	f001 fcda 	bl	8014010 <iprintf>
          pbuf_free(r);
 801265c:	6978      	ldr	r0, [r7, #20]
 801265e:	f7f9 f90b 	bl	800b878 <pbuf_free>
          goto icmperr;
 8012662:	e06c      	b.n	801273e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012664:	6879      	ldr	r1, [r7, #4]
 8012666:	6978      	ldr	r0, [r7, #20]
 8012668:	f7f9 fa2a 	bl	800bac0 <pbuf_copy>
 801266c:	4603      	mov	r3, r0
 801266e:	2b00      	cmp	r3, #0
 8012670:	d003      	beq.n	801267a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012672:	6978      	ldr	r0, [r7, #20]
 8012674:	f7f9 f900 	bl	800b878 <pbuf_free>
          goto icmperr;
 8012678:	e061      	b.n	801273e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7f9 f8fc 	bl	800b878 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	607b      	str	r3, [r7, #4]
 8012684:	e00f      	b.n	80126a6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012686:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012688:	330e      	adds	r3, #14
 801268a:	4619      	mov	r1, r3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7f9 f86d 	bl	800b76c <pbuf_remove_header>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d006      	beq.n	80126a6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012698:	4b2e      	ldr	r3, [pc, #184]	; (8012754 <icmp_input+0x1f8>)
 801269a:	22c7      	movs	r2, #199	; 0xc7
 801269c:	4930      	ldr	r1, [pc, #192]	; (8012760 <icmp_input+0x204>)
 801269e:	482f      	ldr	r0, [pc, #188]	; (801275c <icmp_input+0x200>)
 80126a0:	f001 fcb6 	bl	8014010 <iprintf>
          goto icmperr;
 80126a4:	e04b      	b.n	801273e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80126ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126ae:	4619      	mov	r1, r3
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7f9 f84b 	bl	800b74c <pbuf_add_header>
 80126b6:	4603      	mov	r3, r0
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d12b      	bne.n	8012714 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	685b      	ldr	r3, [r3, #4]
 80126c0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80126c2:	69fb      	ldr	r3, [r7, #28]
 80126c4:	681a      	ldr	r2, [r3, #0]
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80126ca:	4b20      	ldr	r3, [pc, #128]	; (801274c <icmp_input+0x1f0>)
 80126cc:	691a      	ldr	r2, [r3, #16]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	2200      	movs	r2, #0
 80126d6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80126d8:	693b      	ldr	r3, [r7, #16]
 80126da:	2200      	movs	r2, #0
 80126dc:	709a      	strb	r2, [r3, #2]
 80126de:	2200      	movs	r2, #0
 80126e0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	22ff      	movs	r2, #255	; 0xff
 80126e6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2200      	movs	r2, #0
 80126ec:	729a      	strb	r2, [r3, #10]
 80126ee:	2200      	movs	r2, #0
 80126f0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	9302      	str	r3, [sp, #8]
 80126f6:	2301      	movs	r3, #1
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	2300      	movs	r3, #0
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	23ff      	movs	r3, #255	; 0xff
 8012700:	2200      	movs	r2, #0
 8012702:	69f9      	ldr	r1, [r7, #28]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 fa75 	bl	8012bf4 <ip4_output_if>
 801270a:	4603      	mov	r3, r0
 801270c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801270e:	e001      	b.n	8012714 <icmp_input+0x1b8>
      break;
 8012710:	bf00      	nop
 8012712:	e000      	b.n	8012716 <icmp_input+0x1ba>
      break;
 8012714:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7f9 f8ae 	bl	800b878 <pbuf_free>
  return;
 801271c:	e013      	b.n	8012746 <icmp_input+0x1ea>
    goto lenerr;
 801271e:	bf00      	nop
 8012720:	e002      	b.n	8012728 <icmp_input+0x1cc>
    goto lenerr;
 8012722:	bf00      	nop
 8012724:	e000      	b.n	8012728 <icmp_input+0x1cc>
        goto lenerr;
 8012726:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7f9 f8a5 	bl	800b878 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801272e:	e00a      	b.n	8012746 <icmp_input+0x1ea>
        goto icmperr;
 8012730:	bf00      	nop
 8012732:	e004      	b.n	801273e <icmp_input+0x1e2>
        goto icmperr;
 8012734:	bf00      	nop
 8012736:	e002      	b.n	801273e <icmp_input+0x1e2>
          goto icmperr;
 8012738:	bf00      	nop
 801273a:	e000      	b.n	801273e <icmp_input+0x1e2>
          goto icmperr;
 801273c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f7f9 f89a 	bl	800b878 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012744:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012746:	3728      	adds	r7, #40	; 0x28
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	20008230 	.word	0x20008230
 8012750:	20008244 	.word	0x20008244
 8012754:	08017c58 	.word	0x08017c58
 8012758:	08017c90 	.word	0x08017c90
 801275c:	08017cc8 	.word	0x08017cc8
 8012760:	08017cf0 	.word	0x08017cf0

08012764 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b082      	sub	sp, #8
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	460b      	mov	r3, r1
 801276e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	461a      	mov	r2, r3
 8012774:	2103      	movs	r1, #3
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f814 	bl	80127a4 <icmp_send_response>
}
 801277c:	bf00      	nop
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	460b      	mov	r3, r1
 801278e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012790:	78fb      	ldrb	r3, [r7, #3]
 8012792:	461a      	mov	r2, r3
 8012794:	210b      	movs	r1, #11
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f804 	bl	80127a4 <icmp_send_response>
}
 801279c:	bf00      	nop
 801279e:	3708      	adds	r7, #8
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}

080127a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b08c      	sub	sp, #48	; 0x30
 80127a8:	af04      	add	r7, sp, #16
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	460b      	mov	r3, r1
 80127ae:	70fb      	strb	r3, [r7, #3]
 80127b0:	4613      	mov	r3, r2
 80127b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80127b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127b8:	2124      	movs	r1, #36	; 0x24
 80127ba:	2022      	movs	r0, #34	; 0x22
 80127bc:	f7f8 fd78 	bl	800b2b0 <pbuf_alloc>
 80127c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d04c      	beq.n	8012862 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80127c8:	69fb      	ldr	r3, [r7, #28]
 80127ca:	895b      	ldrh	r3, [r3, #10]
 80127cc:	2b23      	cmp	r3, #35	; 0x23
 80127ce:	d806      	bhi.n	80127de <icmp_send_response+0x3a>
 80127d0:	4b26      	ldr	r3, [pc, #152]	; (801286c <icmp_send_response+0xc8>)
 80127d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80127d6:	4926      	ldr	r1, [pc, #152]	; (8012870 <icmp_send_response+0xcc>)
 80127d8:	4826      	ldr	r0, [pc, #152]	; (8012874 <icmp_send_response+0xd0>)
 80127da:	f001 fc19 	bl	8014010 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	685b      	ldr	r3, [r3, #4]
 80127e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80127ea:	697b      	ldr	r3, [r7, #20]
 80127ec:	78fa      	ldrb	r2, [r7, #3]
 80127ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	78ba      	ldrb	r2, [r7, #2]
 80127f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	2200      	movs	r2, #0
 80127fa:	711a      	strb	r2, [r3, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2200      	movs	r2, #0
 8012804:	719a      	strb	r2, [r3, #6]
 8012806:	2200      	movs	r2, #0
 8012808:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	f103 0008 	add.w	r0, r3, #8
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	685b      	ldr	r3, [r3, #4]
 8012816:	221c      	movs	r2, #28
 8012818:	4619      	mov	r1, r3
 801281a:	f001 fbc9 	bl	8013fb0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	68db      	ldr	r3, [r3, #12]
 8012822:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012824:	f107 030c 	add.w	r3, r7, #12
 8012828:	4618      	mov	r0, r3
 801282a:	f000 f825 	bl	8012878 <ip4_route>
 801282e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d011      	beq.n	801285a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	2200      	movs	r2, #0
 801283a:	709a      	strb	r2, [r3, #2]
 801283c:	2200      	movs	r2, #0
 801283e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012840:	f107 020c 	add.w	r2, r7, #12
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	9302      	str	r3, [sp, #8]
 8012848:	2301      	movs	r3, #1
 801284a:	9301      	str	r3, [sp, #4]
 801284c:	2300      	movs	r3, #0
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	23ff      	movs	r3, #255	; 0xff
 8012852:	2100      	movs	r1, #0
 8012854:	69f8      	ldr	r0, [r7, #28]
 8012856:	f000 f9cd 	bl	8012bf4 <ip4_output_if>
  }
  pbuf_free(q);
 801285a:	69f8      	ldr	r0, [r7, #28]
 801285c:	f7f9 f80c 	bl	800b878 <pbuf_free>
 8012860:	e000      	b.n	8012864 <icmp_send_response+0xc0>
    return;
 8012862:	bf00      	nop
}
 8012864:	3720      	adds	r7, #32
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	08017c58 	.word	0x08017c58
 8012870:	08017d24 	.word	0x08017d24
 8012874:	08017cc8 	.word	0x08017cc8

08012878 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012880:	4b33      	ldr	r3, [pc, #204]	; (8012950 <ip4_route+0xd8>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	60fb      	str	r3, [r7, #12]
 8012886:	e036      	b.n	80128f6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801288e:	f003 0301 	and.w	r3, r3, #1
 8012892:	b2db      	uxtb	r3, r3
 8012894:	2b00      	cmp	r3, #0
 8012896:	d02b      	beq.n	80128f0 <ip4_route+0x78>
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801289e:	089b      	lsrs	r3, r3, #2
 80128a0:	f003 0301 	and.w	r3, r3, #1
 80128a4:	b2db      	uxtb	r3, r3
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d022      	beq.n	80128f0 <ip4_route+0x78>
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	3304      	adds	r3, #4
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d01d      	beq.n	80128f0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3304      	adds	r3, #4
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	405a      	eors	r2, r3
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	3308      	adds	r3, #8
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4013      	ands	r3, r2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d101      	bne.n	80128d0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	e038      	b.n	8012942 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128d6:	f003 0302 	and.w	r3, r3, #2
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d108      	bne.n	80128f0 <ip4_route+0x78>
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	330c      	adds	r3, #12
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	429a      	cmp	r2, r3
 80128ea:	d101      	bne.n	80128f0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	e028      	b.n	8012942 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	60fb      	str	r3, [r7, #12]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1c5      	bne.n	8012888 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80128fc:	4b15      	ldr	r3, [pc, #84]	; (8012954 <ip4_route+0xdc>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d01a      	beq.n	801293a <ip4_route+0xc2>
 8012904:	4b13      	ldr	r3, [pc, #76]	; (8012954 <ip4_route+0xdc>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801290c:	f003 0301 	and.w	r3, r3, #1
 8012910:	2b00      	cmp	r3, #0
 8012912:	d012      	beq.n	801293a <ip4_route+0xc2>
 8012914:	4b0f      	ldr	r3, [pc, #60]	; (8012954 <ip4_route+0xdc>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801291c:	f003 0304 	and.w	r3, r3, #4
 8012920:	2b00      	cmp	r3, #0
 8012922:	d00a      	beq.n	801293a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012924:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <ip4_route+0xdc>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	3304      	adds	r3, #4
 801292a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801292c:	2b00      	cmp	r3, #0
 801292e:	d004      	beq.n	801293a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	b2db      	uxtb	r3, r3
 8012936:	2b7f      	cmp	r3, #127	; 0x7f
 8012938:	d101      	bne.n	801293e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801293a:	2300      	movs	r3, #0
 801293c:	e001      	b.n	8012942 <ip4_route+0xca>
  }

  return netif_default;
 801293e:	4b05      	ldr	r3, [pc, #20]	; (8012954 <ip4_route+0xdc>)
 8012940:	681b      	ldr	r3, [r3, #0]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	2000b934 	.word	0x2000b934
 8012954:	2000b938 	.word	0x2000b938

08012958 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
 801295e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	b2db      	uxtb	r3, r3
 801296c:	2b00      	cmp	r3, #0
 801296e:	d016      	beq.n	801299e <ip4_input_accept+0x46>
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	3304      	adds	r3, #4
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d011      	beq.n	801299e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801297a:	4b0b      	ldr	r3, [pc, #44]	; (80129a8 <ip4_input_accept+0x50>)
 801297c:	695a      	ldr	r2, [r3, #20]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	3304      	adds	r3, #4
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	429a      	cmp	r2, r3
 8012986:	d008      	beq.n	801299a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012988:	4b07      	ldr	r3, [pc, #28]	; (80129a8 <ip4_input_accept+0x50>)
 801298a:	695b      	ldr	r3, [r3, #20]
 801298c:	6879      	ldr	r1, [r7, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	f000 fa08 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8012994:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012996:	2b00      	cmp	r3, #0
 8012998:	d001      	beq.n	801299e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801299a:	2301      	movs	r3, #1
 801299c:	e000      	b.n	80129a0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3708      	adds	r7, #8
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}
 80129a8:	20008230 	.word	0x20008230

080129ac <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b086      	sub	sp, #24
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	685b      	ldr	r3, [r3, #4]
 80129ba:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	781b      	ldrb	r3, [r3, #0]
 80129c0:	091b      	lsrs	r3, r3, #4
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b04      	cmp	r3, #4
 80129c6:	d004      	beq.n	80129d2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7f8 ff55 	bl	800b878 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80129ce:	2300      	movs	r3, #0
 80129d0:	e107      	b.n	8012be2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	f003 030f 	and.w	r3, r3, #15
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	009b      	lsls	r3, r3, #2
 80129de:	b2db      	uxtb	r3, r3
 80129e0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	885b      	ldrh	r3, [r3, #2]
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	4618      	mov	r0, r3
 80129ea:	f7f7 fb99 	bl	800a120 <lwip_htons>
 80129ee:	4603      	mov	r3, r0
 80129f0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	891b      	ldrh	r3, [r3, #8]
 80129f6:	89ba      	ldrh	r2, [r7, #12]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d204      	bcs.n	8012a06 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80129fc:	89bb      	ldrh	r3, [r7, #12]
 80129fe:	4619      	mov	r1, r3
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	f7f8 fdb3 	bl	800b56c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	895b      	ldrh	r3, [r3, #10]
 8012a0a:	89fa      	ldrh	r2, [r7, #14]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d807      	bhi.n	8012a20 <ip4_input+0x74>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	89ba      	ldrh	r2, [r7, #12]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d802      	bhi.n	8012a20 <ip4_input+0x74>
 8012a1a:	89fb      	ldrh	r3, [r7, #14]
 8012a1c:	2b13      	cmp	r3, #19
 8012a1e:	d804      	bhi.n	8012a2a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7f8 ff29 	bl	800b878 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012a26:	2300      	movs	r3, #0
 8012a28:	e0db      	b.n	8012be2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	691b      	ldr	r3, [r3, #16]
 8012a2e:	4a6f      	ldr	r2, [pc, #444]	; (8012bec <ip4_input+0x240>)
 8012a30:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	68db      	ldr	r3, [r3, #12]
 8012a36:	4a6d      	ldr	r2, [pc, #436]	; (8012bec <ip4_input+0x240>)
 8012a38:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a3a:	4b6c      	ldr	r3, [pc, #432]	; (8012bec <ip4_input+0x240>)
 8012a3c:	695b      	ldr	r3, [r3, #20]
 8012a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a42:	2be0      	cmp	r3, #224	; 0xe0
 8012a44:	d112      	bne.n	8012a6c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012a46:	683b      	ldr	r3, [r7, #0]
 8012a48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a4c:	f003 0301 	and.w	r3, r3, #1
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d007      	beq.n	8012a66 <ip4_input+0xba>
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	3304      	adds	r3, #4
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d002      	beq.n	8012a66 <ip4_input+0xba>
      netif = inp;
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	613b      	str	r3, [r7, #16]
 8012a64:	e02a      	b.n	8012abc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012a66:	2300      	movs	r3, #0
 8012a68:	613b      	str	r3, [r7, #16]
 8012a6a:	e027      	b.n	8012abc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012a6c:	6838      	ldr	r0, [r7, #0]
 8012a6e:	f7ff ff73 	bl	8012958 <ip4_input_accept>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d002      	beq.n	8012a7e <ip4_input+0xd2>
      netif = inp;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	613b      	str	r3, [r7, #16]
 8012a7c:	e01e      	b.n	8012abc <ip4_input+0x110>
    } else {
      netif = NULL;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012a82:	4b5a      	ldr	r3, [pc, #360]	; (8012bec <ip4_input+0x240>)
 8012a84:	695b      	ldr	r3, [r3, #20]
 8012a86:	b2db      	uxtb	r3, r3
 8012a88:	2b7f      	cmp	r3, #127	; 0x7f
 8012a8a:	d017      	beq.n	8012abc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012a8c:	4b58      	ldr	r3, [pc, #352]	; (8012bf0 <ip4_input+0x244>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	613b      	str	r3, [r7, #16]
 8012a92:	e00e      	b.n	8012ab2 <ip4_input+0x106>
          if (netif == inp) {
 8012a94:	693a      	ldr	r2, [r7, #16]
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d006      	beq.n	8012aaa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012a9c:	6938      	ldr	r0, [r7, #16]
 8012a9e:	f7ff ff5b 	bl	8012958 <ip4_input_accept>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d108      	bne.n	8012aba <ip4_input+0x10e>
 8012aa8:	e000      	b.n	8012aac <ip4_input+0x100>
            continue;
 8012aaa:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	613b      	str	r3, [r7, #16]
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1ed      	bne.n	8012a94 <ip4_input+0xe8>
 8012ab8:	e000      	b.n	8012abc <ip4_input+0x110>
            break;
 8012aba:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012abc:	4b4b      	ldr	r3, [pc, #300]	; (8012bec <ip4_input+0x240>)
 8012abe:	691b      	ldr	r3, [r3, #16]
 8012ac0:	6839      	ldr	r1, [r7, #0]
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	f000 f96e 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d105      	bne.n	8012ada <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012ace:	4b47      	ldr	r3, [pc, #284]	; (8012bec <ip4_input+0x240>)
 8012ad0:	691b      	ldr	r3, [r3, #16]
 8012ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ad6:	2be0      	cmp	r3, #224	; 0xe0
 8012ad8:	d104      	bne.n	8012ae4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f7f8 fecc 	bl	800b878 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	e07e      	b.n	8012be2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d104      	bne.n	8012af4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f7f8 fec4 	bl	800b878 <pbuf_free>
    return ERR_OK;
 8012af0:	2300      	movs	r3, #0
 8012af2:	e076      	b.n	8012be2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	88db      	ldrh	r3, [r3, #6]
 8012af8:	b29b      	uxth	r3, r3
 8012afa:	461a      	mov	r2, r3
 8012afc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012b00:	4013      	ands	r3, r2
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d00b      	beq.n	8012b1e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 fd24 	bl	8013554 <ip4_reass>
 8012b0c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d101      	bne.n	8012b18 <ip4_input+0x16c>
      return ERR_OK;
 8012b14:	2300      	movs	r3, #0
 8012b16:	e064      	b.n	8012be2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012b1e:	4a33      	ldr	r2, [pc, #204]	; (8012bec <ip4_input+0x240>)
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012b24:	4a31      	ldr	r2, [pc, #196]	; (8012bec <ip4_input+0x240>)
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012b2a:	4a30      	ldr	r2, [pc, #192]	; (8012bec <ip4_input+0x240>)
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	f003 030f 	and.w	r3, r3, #15
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	b2db      	uxtb	r3, r3
 8012b3e:	b29a      	uxth	r2, r3
 8012b40:	4b2a      	ldr	r3, [pc, #168]	; (8012bec <ip4_input+0x240>)
 8012b42:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012b44:	89fb      	ldrh	r3, [r7, #14]
 8012b46:	4619      	mov	r1, r3
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7f8 fe0f 	bl	800b76c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	7a5b      	ldrb	r3, [r3, #9]
 8012b52:	2b11      	cmp	r3, #17
 8012b54:	d006      	beq.n	8012b64 <ip4_input+0x1b8>
 8012b56:	2b11      	cmp	r3, #17
 8012b58:	dc13      	bgt.n	8012b82 <ip4_input+0x1d6>
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d00c      	beq.n	8012b78 <ip4_input+0x1cc>
 8012b5e:	2b06      	cmp	r3, #6
 8012b60:	d005      	beq.n	8012b6e <ip4_input+0x1c2>
 8012b62:	e00e      	b.n	8012b82 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012b64:	6839      	ldr	r1, [r7, #0]
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7fe fc68 	bl	801143c <udp_input>
        break;
 8012b6c:	e026      	b.n	8012bbc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012b6e:	6839      	ldr	r1, [r7, #0]
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7fa fcb5 	bl	800d4e0 <tcp_input>
        break;
 8012b76:	e021      	b.n	8012bbc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012b78:	6839      	ldr	r1, [r7, #0]
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f7ff fcee 	bl	801255c <icmp_input>
        break;
 8012b80:	e01c      	b.n	8012bbc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b82:	4b1a      	ldr	r3, [pc, #104]	; (8012bec <ip4_input+0x240>)
 8012b84:	695b      	ldr	r3, [r3, #20]
 8012b86:	6939      	ldr	r1, [r7, #16]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f000 f90b 	bl	8012da4 <ip4_addr_isbroadcast_u32>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10f      	bne.n	8012bb4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b94:	4b15      	ldr	r3, [pc, #84]	; (8012bec <ip4_input+0x240>)
 8012b96:	695b      	ldr	r3, [r3, #20]
 8012b98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b9c:	2be0      	cmp	r3, #224	; 0xe0
 8012b9e:	d009      	beq.n	8012bb4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012ba0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	6878      	ldr	r0, [r7, #4]
 8012ba8:	f7f8 fe53 	bl	800b852 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012bac:	2102      	movs	r1, #2
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7ff fdd8 	bl	8012764 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f7f8 fe5f 	bl	800b878 <pbuf_free>
        break;
 8012bba:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012bbc:	4b0b      	ldr	r3, [pc, #44]	; (8012bec <ip4_input+0x240>)
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012bc2:	4b0a      	ldr	r3, [pc, #40]	; (8012bec <ip4_input+0x240>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012bc8:	4b08      	ldr	r3, [pc, #32]	; (8012bec <ip4_input+0x240>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012bce:	4b07      	ldr	r3, [pc, #28]	; (8012bec <ip4_input+0x240>)
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012bd4:	4b05      	ldr	r3, [pc, #20]	; (8012bec <ip4_input+0x240>)
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012bda:	4b04      	ldr	r3, [pc, #16]	; (8012bec <ip4_input+0x240>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3718      	adds	r7, #24
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	20008230 	.word	0x20008230
 8012bf0:	2000b934 	.word	0x2000b934

08012bf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08a      	sub	sp, #40	; 0x28
 8012bf8:	af04      	add	r7, sp, #16
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
 8012c00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012c02:	68bb      	ldr	r3, [r7, #8]
 8012c04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d009      	beq.n	8012c20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d003      	beq.n	8012c1a <ip4_output_if+0x26>
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012c20:	78fa      	ldrb	r2, [r7, #3]
 8012c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c24:	9302      	str	r3, [sp, #8]
 8012c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012c2a:	9301      	str	r3, [sp, #4]
 8012c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012c30:	9300      	str	r3, [sp, #0]
 8012c32:	4613      	mov	r3, r2
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	6979      	ldr	r1, [r7, #20]
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 f805 	bl	8012c48 <ip4_output_if_src>
 8012c3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3718      	adds	r7, #24
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}

08012c48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012c48:	b580      	push	{r7, lr}
 8012c4a:	b088      	sub	sp, #32
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	60f8      	str	r0, [r7, #12]
 8012c50:	60b9      	str	r1, [r7, #8]
 8012c52:	607a      	str	r2, [r7, #4]
 8012c54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	7b9b      	ldrb	r3, [r3, #14]
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d006      	beq.n	8012c6c <ip4_output_if_src+0x24>
 8012c5e:	4b4b      	ldr	r3, [pc, #300]	; (8012d8c <ip4_output_if_src+0x144>)
 8012c60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012c64:	494a      	ldr	r1, [pc, #296]	; (8012d90 <ip4_output_if_src+0x148>)
 8012c66:	484b      	ldr	r0, [pc, #300]	; (8012d94 <ip4_output_if_src+0x14c>)
 8012c68:	f001 f9d2 	bl	8014010 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d060      	beq.n	8012d34 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012c72:	2314      	movs	r3, #20
 8012c74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012c76:	2114      	movs	r1, #20
 8012c78:	68f8      	ldr	r0, [r7, #12]
 8012c7a:	f7f8 fd67 	bl	800b74c <pbuf_add_header>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d002      	beq.n	8012c8a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012c84:	f06f 0301 	mvn.w	r3, #1
 8012c88:	e07c      	b.n	8012d84 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	895b      	ldrh	r3, [r3, #10]
 8012c94:	2b13      	cmp	r3, #19
 8012c96:	d806      	bhi.n	8012ca6 <ip4_output_if_src+0x5e>
 8012c98:	4b3c      	ldr	r3, [pc, #240]	; (8012d8c <ip4_output_if_src+0x144>)
 8012c9a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012c9e:	493e      	ldr	r1, [pc, #248]	; (8012d98 <ip4_output_if_src+0x150>)
 8012ca0:	483c      	ldr	r0, [pc, #240]	; (8012d94 <ip4_output_if_src+0x14c>)
 8012ca2:	f001 f9b5 	bl	8014010 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	78fa      	ldrb	r2, [r7, #3]
 8012caa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012cb2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012cbc:	8b7b      	ldrh	r3, [r7, #26]
 8012cbe:	089b      	lsrs	r3, r3, #2
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cc8:	b2da      	uxtb	r2, r3
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012cd4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	891b      	ldrh	r3, [r3, #8]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f7 fa20 	bl	800a120 <lwip_htons>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	461a      	mov	r2, r3
 8012ce4:	69fb      	ldr	r3, [r7, #28]
 8012ce6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	2200      	movs	r2, #0
 8012cec:	719a      	strb	r2, [r3, #6]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012cf2:	4b2a      	ldr	r3, [pc, #168]	; (8012d9c <ip4_output_if_src+0x154>)
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f7 fa12 	bl	800a120 <lwip_htons>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	461a      	mov	r2, r3
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012d04:	4b25      	ldr	r3, [pc, #148]	; (8012d9c <ip4_output_if_src+0x154>)
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	3301      	adds	r3, #1
 8012d0a:	b29a      	uxth	r2, r3
 8012d0c:	4b23      	ldr	r3, [pc, #140]	; (8012d9c <ip4_output_if_src+0x154>)
 8012d0e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d104      	bne.n	8012d20 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012d16:	4b22      	ldr	r3, [pc, #136]	; (8012da0 <ip4_output_if_src+0x158>)
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	60da      	str	r2, [r3, #12]
 8012d1e:	e003      	b.n	8012d28 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012d28:	69fb      	ldr	r3, [r7, #28]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	729a      	strb	r2, [r3, #10]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	72da      	strb	r2, [r3, #11]
 8012d32:	e00f      	b.n	8012d54 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	895b      	ldrh	r3, [r3, #10]
 8012d38:	2b13      	cmp	r3, #19
 8012d3a:	d802      	bhi.n	8012d42 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012d3c:	f06f 0301 	mvn.w	r3, #1
 8012d40:	e020      	b.n	8012d84 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	691b      	ldr	r3, [r3, #16]
 8012d4c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012d4e:	f107 0314 	add.w	r3, r7, #20
 8012d52:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00c      	beq.n	8012d76 <ip4_output_if_src+0x12e>
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	891a      	ldrh	r2, [r3, #8]
 8012d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d62:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d906      	bls.n	8012d76 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f000 fddf 	bl	8013930 <ip4_frag>
 8012d72:	4603      	mov	r3, r0
 8012d74:	e006      	b.n	8012d84 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d78:	695b      	ldr	r3, [r3, #20]
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	68f9      	ldr	r1, [r7, #12]
 8012d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d80:	4798      	blx	r3
 8012d82:	4603      	mov	r3, r0
}
 8012d84:	4618      	mov	r0, r3
 8012d86:	3720      	adds	r7, #32
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	08017d50 	.word	0x08017d50
 8012d90:	08017d84 	.word	0x08017d84
 8012d94:	08017d90 	.word	0x08017d90
 8012d98:	08017db8 	.word	0x08017db8
 8012d9c:	20004b36 	.word	0x20004b36
 8012da0:	0801822c 	.word	0x0801822c

08012da4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db8:	d002      	beq.n	8012dc0 <ip4_addr_isbroadcast_u32+0x1c>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	e02a      	b.n	8012e1a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dca:	f003 0302 	and.w	r3, r3, #2
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d101      	bne.n	8012dd6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	e021      	b.n	8012e1a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	3304      	adds	r3, #4
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	687a      	ldr	r2, [r7, #4]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d101      	bne.n	8012de6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012de2:	2300      	movs	r3, #0
 8012de4:	e019      	b.n	8012e1a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012de6:	68fa      	ldr	r2, [r7, #12]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	3304      	adds	r3, #4
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	405a      	eors	r2, r3
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	3308      	adds	r3, #8
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4013      	ands	r3, r2
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d10d      	bne.n	8012e18 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	3308      	adds	r3, #8
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	43da      	mvns	r2, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	3308      	adds	r3, #8
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d101      	bne.n	8012e18 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012e14:	2301      	movs	r3, #1
 8012e16:	e000      	b.n	8012e1a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012e18:	2300      	movs	r3, #0
  }
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3714      	adds	r7, #20
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr
	...

08012e28 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8012e30:	2210      	movs	r2, #16
 8012e32:	4904      	ldr	r1, [pc, #16]	; (8012e44 <ip4addr_ntoa+0x1c>)
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 f807 	bl	8012e48 <ip4addr_ntoa_r>
 8012e3a:	4603      	mov	r3, r0
}
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}
 8012e44:	20004b38 	.word	0x20004b38

08012e48 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b08d      	sub	sp, #52	; 0x34
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012e54:	2300      	movs	r3, #0
 8012e56:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8012e62:	f107 0318 	add.w	r3, r7, #24
 8012e66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012e68:	2300      	movs	r3, #0
 8012e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e6e:	e059      	b.n	8012f24 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8012e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e78:	781a      	ldrb	r2, [r3, #0]
 8012e7a:	4b33      	ldr	r3, [pc, #204]	; (8012f48 <ip4addr_ntoa_r+0x100>)
 8012e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8012e80:	08d9      	lsrs	r1, r3, #3
 8012e82:	460b      	mov	r3, r1
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	440b      	add	r3, r1
 8012e88:	005b      	lsls	r3, r3, #1
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8012e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	4a2d      	ldr	r2, [pc, #180]	; (8012f48 <ip4addr_ntoa_r+0x100>)
 8012e94:	fba2 2303 	umull	r2, r3, r2, r3
 8012e98:	08db      	lsrs	r3, r3, #3
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ea4:	1c5a      	adds	r2, r3, #1
 8012ea6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012eaa:	4619      	mov	r1, r3
 8012eac:	7ffb      	ldrb	r3, [r7, #31]
 8012eae:	3330      	adds	r3, #48	; 0x30
 8012eb0:	b2da      	uxtb	r2, r3
 8012eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012eb6:	440b      	add	r3, r1
 8012eb8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d1d8      	bne.n	8012e76 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012ec4:	e012      	b.n	8012eec <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8012ec6:	6a3b      	ldr	r3, [r7, #32]
 8012ec8:	1c5a      	adds	r2, r3, #1
 8012eca:	623a      	str	r2, [r7, #32]
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	dc01      	bgt.n	8012ed6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e031      	b.n	8012f3a <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8012ed6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012edc:	1c59      	adds	r1, r3, #1
 8012ede:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012ee0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012ee4:	440a      	add	r2, r1
 8012ee6:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012eea:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8012eec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ef0:	1e5a      	subs	r2, r3, #1
 8012ef2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1e5      	bne.n	8012ec6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8012efa:	6a3b      	ldr	r3, [r7, #32]
 8012efc:	1c5a      	adds	r2, r3, #1
 8012efe:	623a      	str	r2, [r7, #32]
 8012f00:	687a      	ldr	r2, [r7, #4]
 8012f02:	429a      	cmp	r2, r3
 8012f04:	dc01      	bgt.n	8012f0a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8012f06:	2300      	movs	r3, #0
 8012f08:	e017      	b.n	8012f3a <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8012f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0c:	1c5a      	adds	r2, r3, #1
 8012f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012f10:	222e      	movs	r2, #46	; 0x2e
 8012f12:	701a      	strb	r2, [r3, #0]
    ap++;
 8012f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f16:	3301      	adds	r3, #1
 8012f18:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f1e:	3301      	adds	r3, #1
 8012f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f28:	2b03      	cmp	r3, #3
 8012f2a:	d9a1      	bls.n	8012e70 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8012f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f34:	2200      	movs	r2, #0
 8012f36:	701a      	strb	r2, [r3, #0]
  return buf;
 8012f38:	68bb      	ldr	r3, [r7, #8]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3734      	adds	r7, #52	; 0x34
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr
 8012f46:	bf00      	nop
 8012f48:	cccccccd 	.word	0xcccccccd

08012f4c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b084      	sub	sp, #16
 8012f50:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012f56:	4b12      	ldr	r3, [pc, #72]	; (8012fa0 <ip_reass_tmr+0x54>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012f5c:	e018      	b.n	8012f90 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	7fdb      	ldrb	r3, [r3, #31]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00b      	beq.n	8012f7e <ip_reass_tmr+0x32>
      r->timer--;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	7fdb      	ldrb	r3, [r3, #31]
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	b2da      	uxtb	r2, r3
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	60fb      	str	r3, [r7, #12]
 8012f7c:	e008      	b.n	8012f90 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f88:	68b9      	ldr	r1, [r7, #8]
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f000 f80a 	bl	8012fa4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d1e3      	bne.n	8012f5e <ip_reass_tmr+0x12>
    }
  }
}
 8012f96:	bf00      	nop
 8012f98:	bf00      	nop
 8012f9a:	3710      	adds	r7, #16
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}
 8012fa0:	20004b48 	.word	0x20004b48

08012fa4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012fae:	2300      	movs	r3, #0
 8012fb0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012fb2:	683a      	ldr	r2, [r7, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	429a      	cmp	r2, r3
 8012fb8:	d105      	bne.n	8012fc6 <ip_reass_free_complete_datagram+0x22>
 8012fba:	4b45      	ldr	r3, [pc, #276]	; (80130d0 <ip_reass_free_complete_datagram+0x12c>)
 8012fbc:	22ab      	movs	r2, #171	; 0xab
 8012fbe:	4945      	ldr	r1, [pc, #276]	; (80130d4 <ip_reass_free_complete_datagram+0x130>)
 8012fc0:	4845      	ldr	r0, [pc, #276]	; (80130d8 <ip_reass_free_complete_datagram+0x134>)
 8012fc2:	f001 f825 	bl	8014010 <iprintf>
  if (prev != NULL) {
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00a      	beq.n	8012fe2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012fcc:	683b      	ldr	r3, [r7, #0]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	687a      	ldr	r2, [r7, #4]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d005      	beq.n	8012fe2 <ip_reass_free_complete_datagram+0x3e>
 8012fd6:	4b3e      	ldr	r3, [pc, #248]	; (80130d0 <ip_reass_free_complete_datagram+0x12c>)
 8012fd8:	22ad      	movs	r2, #173	; 0xad
 8012fda:	4940      	ldr	r1, [pc, #256]	; (80130dc <ip_reass_free_complete_datagram+0x138>)
 8012fdc:	483e      	ldr	r0, [pc, #248]	; (80130d8 <ip_reass_free_complete_datagram+0x134>)
 8012fde:	f001 f817 	bl	8014010 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	889b      	ldrh	r3, [r3, #4]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d12a      	bne.n	801304a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	685b      	ldr	r3, [r3, #4]
 8012ff8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013002:	69bb      	ldr	r3, [r7, #24]
 8013004:	6858      	ldr	r0, [r3, #4]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	3308      	adds	r3, #8
 801300a:	2214      	movs	r2, #20
 801300c:	4619      	mov	r1, r3
 801300e:	f000 ffcf 	bl	8013fb0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013012:	2101      	movs	r1, #1
 8013014:	69b8      	ldr	r0, [r7, #24]
 8013016:	f7ff fbb5 	bl	8012784 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801301a:	69b8      	ldr	r0, [r7, #24]
 801301c:	f7f8 fcba 	bl	800b994 <pbuf_clen>
 8013020:	4603      	mov	r3, r0
 8013022:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013024:	8bfa      	ldrh	r2, [r7, #30]
 8013026:	8a7b      	ldrh	r3, [r7, #18]
 8013028:	4413      	add	r3, r2
 801302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801302e:	db05      	blt.n	801303c <ip_reass_free_complete_datagram+0x98>
 8013030:	4b27      	ldr	r3, [pc, #156]	; (80130d0 <ip_reass_free_complete_datagram+0x12c>)
 8013032:	22bc      	movs	r2, #188	; 0xbc
 8013034:	492a      	ldr	r1, [pc, #168]	; (80130e0 <ip_reass_free_complete_datagram+0x13c>)
 8013036:	4828      	ldr	r0, [pc, #160]	; (80130d8 <ip_reass_free_complete_datagram+0x134>)
 8013038:	f000 ffea 	bl	8014010 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801303c:	8bfa      	ldrh	r2, [r7, #30]
 801303e:	8a7b      	ldrh	r3, [r7, #18]
 8013040:	4413      	add	r3, r2
 8013042:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013044:	69b8      	ldr	r0, [r7, #24]
 8013046:	f7f8 fc17 	bl	800b878 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013050:	e01f      	b.n	8013092 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013052:	69bb      	ldr	r3, [r7, #24]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013062:	68f8      	ldr	r0, [r7, #12]
 8013064:	f7f8 fc96 	bl	800b994 <pbuf_clen>
 8013068:	4603      	mov	r3, r0
 801306a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801306c:	8bfa      	ldrh	r2, [r7, #30]
 801306e:	8a7b      	ldrh	r3, [r7, #18]
 8013070:	4413      	add	r3, r2
 8013072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013076:	db05      	blt.n	8013084 <ip_reass_free_complete_datagram+0xe0>
 8013078:	4b15      	ldr	r3, [pc, #84]	; (80130d0 <ip_reass_free_complete_datagram+0x12c>)
 801307a:	22cc      	movs	r2, #204	; 0xcc
 801307c:	4918      	ldr	r1, [pc, #96]	; (80130e0 <ip_reass_free_complete_datagram+0x13c>)
 801307e:	4816      	ldr	r0, [pc, #88]	; (80130d8 <ip_reass_free_complete_datagram+0x134>)
 8013080:	f000 ffc6 	bl	8014010 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013084:	8bfa      	ldrh	r2, [r7, #30]
 8013086:	8a7b      	ldrh	r3, [r7, #18]
 8013088:	4413      	add	r3, r2
 801308a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7f8 fbf3 	bl	800b878 <pbuf_free>
  while (p != NULL) {
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d1dc      	bne.n	8013052 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013098:	6839      	ldr	r1, [r7, #0]
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f8c2 	bl	8013224 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130a0:	4b10      	ldr	r3, [pc, #64]	; (80130e4 <ip_reass_free_complete_datagram+0x140>)
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	8bfa      	ldrh	r2, [r7, #30]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d905      	bls.n	80130b6 <ip_reass_free_complete_datagram+0x112>
 80130aa:	4b09      	ldr	r3, [pc, #36]	; (80130d0 <ip_reass_free_complete_datagram+0x12c>)
 80130ac:	22d2      	movs	r2, #210	; 0xd2
 80130ae:	490e      	ldr	r1, [pc, #56]	; (80130e8 <ip_reass_free_complete_datagram+0x144>)
 80130b0:	4809      	ldr	r0, [pc, #36]	; (80130d8 <ip_reass_free_complete_datagram+0x134>)
 80130b2:	f000 ffad 	bl	8014010 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130b6:	4b0b      	ldr	r3, [pc, #44]	; (80130e4 <ip_reass_free_complete_datagram+0x140>)
 80130b8:	881a      	ldrh	r2, [r3, #0]
 80130ba:	8bfb      	ldrh	r3, [r7, #30]
 80130bc:	1ad3      	subs	r3, r2, r3
 80130be:	b29a      	uxth	r2, r3
 80130c0:	4b08      	ldr	r3, [pc, #32]	; (80130e4 <ip_reass_free_complete_datagram+0x140>)
 80130c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80130c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3720      	adds	r7, #32
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	08017de8 	.word	0x08017de8
 80130d4:	08017e24 	.word	0x08017e24
 80130d8:	08017e30 	.word	0x08017e30
 80130dc:	08017e58 	.word	0x08017e58
 80130e0:	08017e6c 	.word	0x08017e6c
 80130e4:	20004b4c 	.word	0x20004b4c
 80130e8:	08017e8c 	.word	0x08017e8c

080130ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80130f6:	2300      	movs	r3, #0
 80130f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80130fa:	2300      	movs	r3, #0
 80130fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80130fe:	2300      	movs	r3, #0
 8013100:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013102:	2300      	movs	r3, #0
 8013104:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801310a:	4b28      	ldr	r3, [pc, #160]	; (80131ac <ip_reass_remove_oldest_datagram+0xc0>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013110:	e030      	b.n	8013174 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013114:	695a      	ldr	r2, [r3, #20]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	429a      	cmp	r2, r3
 801311c:	d10c      	bne.n	8013138 <ip_reass_remove_oldest_datagram+0x4c>
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	699a      	ldr	r2, [r3, #24]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	691b      	ldr	r3, [r3, #16]
 8013126:	429a      	cmp	r2, r3
 8013128:	d106      	bne.n	8013138 <ip_reass_remove_oldest_datagram+0x4c>
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	899a      	ldrh	r2, [r3, #12]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	889b      	ldrh	r3, [r3, #4]
 8013132:	b29b      	uxth	r3, r3
 8013134:	429a      	cmp	r2, r3
 8013136:	d014      	beq.n	8013162 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	3301      	adds	r3, #1
 801313c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801313e:	6a3b      	ldr	r3, [r7, #32]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d104      	bne.n	801314e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013148:	69fb      	ldr	r3, [r7, #28]
 801314a:	61bb      	str	r3, [r7, #24]
 801314c:	e009      	b.n	8013162 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	7fda      	ldrb	r2, [r3, #31]
 8013152:	6a3b      	ldr	r3, [r7, #32]
 8013154:	7fdb      	ldrb	r3, [r3, #31]
 8013156:	429a      	cmp	r2, r3
 8013158:	d803      	bhi.n	8013162 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801316c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013176:	2b00      	cmp	r3, #0
 8013178:	d1cb      	bne.n	8013112 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d008      	beq.n	8013192 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013180:	69b9      	ldr	r1, [r7, #24]
 8013182:	6a38      	ldr	r0, [r7, #32]
 8013184:	f7ff ff0e 	bl	8012fa4 <ip_reass_free_complete_datagram>
 8013188:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801318a:	697a      	ldr	r2, [r7, #20]
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	4413      	add	r3, r2
 8013190:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013192:	697a      	ldr	r2, [r7, #20]
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	429a      	cmp	r2, r3
 8013198:	da02      	bge.n	80131a0 <ip_reass_remove_oldest_datagram+0xb4>
 801319a:	693b      	ldr	r3, [r7, #16]
 801319c:	2b01      	cmp	r3, #1
 801319e:	dcac      	bgt.n	80130fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80131a0:	697b      	ldr	r3, [r7, #20]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3728      	adds	r7, #40	; 0x28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	20004b48 	.word	0x20004b48

080131b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131ba:	2004      	movs	r0, #4
 80131bc:	f7f7 fc66 	bl	800aa8c <memp_malloc>
 80131c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d110      	bne.n	80131ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80131c8:	6839      	ldr	r1, [r7, #0]
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7ff ff8e 	bl	80130ec <ip_reass_remove_oldest_datagram>
 80131d0:	4602      	mov	r2, r0
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	4293      	cmp	r3, r2
 80131d6:	dc03      	bgt.n	80131e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131d8:	2004      	movs	r0, #4
 80131da:	f7f7 fc57 	bl	800aa8c <memp_malloc>
 80131de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d101      	bne.n	80131ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80131e6:	2300      	movs	r3, #0
 80131e8:	e016      	b.n	8013218 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80131ea:	2220      	movs	r2, #32
 80131ec:	2100      	movs	r1, #0
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f000 ff06 	bl	8014000 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	220f      	movs	r2, #15
 80131f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80131fa:	4b09      	ldr	r3, [pc, #36]	; (8013220 <ip_reass_enqueue_new_datagram+0x70>)
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013202:	4a07      	ldr	r2, [pc, #28]	; (8013220 <ip_reass_enqueue_new_datagram+0x70>)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3308      	adds	r3, #8
 801320c:	2214      	movs	r2, #20
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	4618      	mov	r0, r3
 8013212:	f000 fecd 	bl	8013fb0 <memcpy>
  return ipr;
 8013216:	68fb      	ldr	r3, [r7, #12]
}
 8013218:	4618      	mov	r0, r3
 801321a:	3710      	adds	r7, #16
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	20004b48 	.word	0x20004b48

08013224 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801322e:	4b10      	ldr	r3, [pc, #64]	; (8013270 <ip_reass_dequeue_datagram+0x4c>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	429a      	cmp	r2, r3
 8013236:	d104      	bne.n	8013242 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	4a0c      	ldr	r2, [pc, #48]	; (8013270 <ip_reass_dequeue_datagram+0x4c>)
 801323e:	6013      	str	r3, [r2, #0]
 8013240:	e00d      	b.n	801325e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d106      	bne.n	8013256 <ip_reass_dequeue_datagram+0x32>
 8013248:	4b0a      	ldr	r3, [pc, #40]	; (8013274 <ip_reass_dequeue_datagram+0x50>)
 801324a:	f240 1245 	movw	r2, #325	; 0x145
 801324e:	490a      	ldr	r1, [pc, #40]	; (8013278 <ip_reass_dequeue_datagram+0x54>)
 8013250:	480a      	ldr	r0, [pc, #40]	; (801327c <ip_reass_dequeue_datagram+0x58>)
 8013252:	f000 fedd 	bl	8014010 <iprintf>
    prev->next = ipr->next;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	681a      	ldr	r2, [r3, #0]
 801325a:	683b      	ldr	r3, [r7, #0]
 801325c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801325e:	6879      	ldr	r1, [r7, #4]
 8013260:	2004      	movs	r0, #4
 8013262:	f7f7 fc65 	bl	800ab30 <memp_free>
}
 8013266:	bf00      	nop
 8013268:	3708      	adds	r7, #8
 801326a:	46bd      	mov	sp, r7
 801326c:	bd80      	pop	{r7, pc}
 801326e:	bf00      	nop
 8013270:	20004b48 	.word	0x20004b48
 8013274:	08017de8 	.word	0x08017de8
 8013278:	08017eb0 	.word	0x08017eb0
 801327c:	08017e30 	.word	0x08017e30

08013280 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b08c      	sub	sp, #48	; 0x30
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801328c:	2300      	movs	r3, #0
 801328e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013290:	2301      	movs	r3, #1
 8013292:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	885b      	ldrh	r3, [r3, #2]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f6 ff3d 	bl	800a120 <lwip_htons>
 80132a6:	4603      	mov	r3, r0
 80132a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	f003 030f 	and.w	r3, r3, #15
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	009b      	lsls	r3, r3, #2
 80132b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80132b8:	7e7b      	ldrb	r3, [r7, #25]
 80132ba:	b29b      	uxth	r3, r3
 80132bc:	8b7a      	ldrh	r2, [r7, #26]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d202      	bcs.n	80132c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132c2:	f04f 33ff 	mov.w	r3, #4294967295
 80132c6:	e135      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80132c8:	7e7b      	ldrb	r3, [r7, #25]
 80132ca:	b29b      	uxth	r3, r3
 80132cc:	8b7a      	ldrh	r2, [r7, #26]
 80132ce:	1ad3      	subs	r3, r2, r3
 80132d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	88db      	ldrh	r3, [r3, #6]
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	4618      	mov	r0, r3
 80132da:	f7f6 ff21 	bl	800a120 <lwip_htons>
 80132de:	4603      	mov	r3, r0
 80132e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	00db      	lsls	r3, r3, #3
 80132e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	685b      	ldr	r3, [r3, #4]
 80132ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80132f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f2:	2200      	movs	r2, #0
 80132f4:	701a      	strb	r2, [r3, #0]
 80132f6:	2200      	movs	r2, #0
 80132f8:	705a      	strb	r2, [r3, #1]
 80132fa:	2200      	movs	r2, #0
 80132fc:	709a      	strb	r2, [r3, #2]
 80132fe:	2200      	movs	r2, #0
 8013300:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013304:	8afa      	ldrh	r2, [r7, #22]
 8013306:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013308:	8afa      	ldrh	r2, [r7, #22]
 801330a:	8b7b      	ldrh	r3, [r7, #26]
 801330c:	4413      	add	r3, r2
 801330e:	b29a      	uxth	r2, r3
 8013310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013312:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013316:	88db      	ldrh	r3, [r3, #6]
 8013318:	b29b      	uxth	r3, r3
 801331a:	8afa      	ldrh	r2, [r7, #22]
 801331c:	429a      	cmp	r2, r3
 801331e:	d902      	bls.n	8013326 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013320:	f04f 33ff 	mov.w	r3, #4294967295
 8013324:	e106      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	627b      	str	r3, [r7, #36]	; 0x24
 801332c:	e068      	b.n	8013400 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013336:	889b      	ldrh	r3, [r3, #4]
 8013338:	b29a      	uxth	r2, r3
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	889b      	ldrh	r3, [r3, #4]
 801333e:	b29b      	uxth	r3, r3
 8013340:	429a      	cmp	r2, r3
 8013342:	d235      	bcs.n	80133b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013348:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334c:	2b00      	cmp	r3, #0
 801334e:	d020      	beq.n	8013392 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	889b      	ldrh	r3, [r3, #4]
 8013354:	b29a      	uxth	r2, r3
 8013356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013358:	88db      	ldrh	r3, [r3, #6]
 801335a:	b29b      	uxth	r3, r3
 801335c:	429a      	cmp	r2, r3
 801335e:	d307      	bcc.n	8013370 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013362:	88db      	ldrh	r3, [r3, #6]
 8013364:	b29a      	uxth	r2, r3
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	889b      	ldrh	r3, [r3, #4]
 801336a:	b29b      	uxth	r3, r3
 801336c:	429a      	cmp	r2, r3
 801336e:	d902      	bls.n	8013376 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013370:	f04f 33ff 	mov.w	r3, #4294967295
 8013374:	e0de      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013378:	68ba      	ldr	r2, [r7, #8]
 801337a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	88db      	ldrh	r3, [r3, #6]
 8013380:	b29a      	uxth	r2, r3
 8013382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013384:	889b      	ldrh	r3, [r3, #4]
 8013386:	b29b      	uxth	r3, r3
 8013388:	429a      	cmp	r2, r3
 801338a:	d03d      	beq.n	8013408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013390:	e03a      	b.n	8013408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013394:	88db      	ldrh	r3, [r3, #6]
 8013396:	b29a      	uxth	r2, r3
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	889b      	ldrh	r3, [r3, #4]
 801339c:	b29b      	uxth	r3, r3
 801339e:	429a      	cmp	r2, r3
 80133a0:	d902      	bls.n	80133a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133a2:	f04f 33ff 	mov.w	r3, #4294967295
 80133a6:	e0c5      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	68ba      	ldr	r2, [r7, #8]
 80133ac:	605a      	str	r2, [r3, #4]
      break;
 80133ae:	e02b      	b.n	8013408 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80133b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b2:	889b      	ldrh	r3, [r3, #4]
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	889b      	ldrh	r3, [r3, #4]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	429a      	cmp	r2, r3
 80133be:	d102      	bne.n	80133c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133c0:	f04f 33ff 	mov.w	r3, #4294967295
 80133c4:	e0b6      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80133c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c8:	889b      	ldrh	r3, [r3, #4]
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	88db      	ldrh	r3, [r3, #6]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d202      	bcs.n	80133dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133d6:	f04f 33ff 	mov.w	r3, #4294967295
 80133da:	e0ab      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80133dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d009      	beq.n	80133f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	88db      	ldrh	r3, [r3, #6]
 80133e6:	b29a      	uxth	r2, r3
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	889b      	ldrh	r3, [r3, #4]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d001      	beq.n	80133f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80133f2:	2300      	movs	r3, #0
 80133f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80133fc:	693b      	ldr	r3, [r7, #16]
 80133fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013402:	2b00      	cmp	r3, #0
 8013404:	d193      	bne.n	801332e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013406:	e000      	b.n	801340a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013408:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340c:	2b00      	cmp	r3, #0
 801340e:	d12d      	bne.n	801346c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013412:	2b00      	cmp	r3, #0
 8013414:	d01c      	beq.n	8013450 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013418:	88db      	ldrh	r3, [r3, #6]
 801341a:	b29a      	uxth	r2, r3
 801341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341e:	889b      	ldrh	r3, [r3, #4]
 8013420:	b29b      	uxth	r3, r3
 8013422:	429a      	cmp	r2, r3
 8013424:	d906      	bls.n	8013434 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013426:	4b45      	ldr	r3, [pc, #276]	; (801353c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013428:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801342c:	4944      	ldr	r1, [pc, #272]	; (8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801342e:	4845      	ldr	r0, [pc, #276]	; (8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013430:	f000 fdee 	bl	8014010 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013436:	68ba      	ldr	r2, [r7, #8]
 8013438:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343c:	88db      	ldrh	r3, [r3, #6]
 801343e:	b29a      	uxth	r2, r3
 8013440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013442:	889b      	ldrh	r3, [r3, #4]
 8013444:	b29b      	uxth	r3, r3
 8013446:	429a      	cmp	r2, r3
 8013448:	d010      	beq.n	801346c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801344a:	2300      	movs	r3, #0
 801344c:	623b      	str	r3, [r7, #32]
 801344e:	e00d      	b.n	801346c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013458:	4b38      	ldr	r3, [pc, #224]	; (801353c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801345a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801345e:	493a      	ldr	r1, [pc, #232]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013460:	4838      	ldr	r0, [pc, #224]	; (8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013462:	f000 fdd5 	bl	8014010 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d105      	bne.n	801347e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	7f9b      	ldrb	r3, [r3, #30]
 8013476:	f003 0301 	and.w	r3, r3, #1
 801347a:	2b00      	cmp	r3, #0
 801347c:	d059      	beq.n	8013532 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801347e:	6a3b      	ldr	r3, [r7, #32]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d04f      	beq.n	8013524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d006      	beq.n	801349a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	889b      	ldrh	r3, [r3, #4]
 8013494:	b29b      	uxth	r3, r3
 8013496:	2b00      	cmp	r3, #0
 8013498:	d002      	beq.n	80134a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801349a:	2300      	movs	r3, #0
 801349c:	623b      	str	r3, [r7, #32]
 801349e:	e041      	b.n	8013524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80134a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80134a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134aa:	e012      	b.n	80134d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80134b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134b4:	88db      	ldrh	r3, [r3, #6]
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ba:	889b      	ldrh	r3, [r3, #4]
 80134bc:	b29b      	uxth	r3, r3
 80134be:	429a      	cmp	r2, r3
 80134c0:	d002      	beq.n	80134c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80134c2:	2300      	movs	r3, #0
 80134c4:	623b      	str	r3, [r7, #32]
            break;
 80134c6:	e007      	b.n	80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80134c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1e9      	bne.n	80134ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80134d8:	6a3b      	ldr	r3, [r7, #32]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d022      	beq.n	8013524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d106      	bne.n	80134f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80134e6:	4b15      	ldr	r3, [pc, #84]	; (801353c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134e8:	f240 12df 	movw	r2, #479	; 0x1df
 80134ec:	4917      	ldr	r1, [pc, #92]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80134ee:	4815      	ldr	r0, [pc, #84]	; (8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134f0:	f000 fd8e 	bl	8014010 <iprintf>
          LWIP_ASSERT("sanity check",
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	685b      	ldr	r3, [r3, #4]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d106      	bne.n	801350e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013500:	4b0e      	ldr	r3, [pc, #56]	; (801353c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013502:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013506:	4911      	ldr	r1, [pc, #68]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013508:	480e      	ldr	r0, [pc, #56]	; (8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801350a:	f000 fd81 	bl	8014010 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d006      	beq.n	8013524 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013516:	4b09      	ldr	r3, [pc, #36]	; (801353c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013518:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801351c:	490c      	ldr	r1, [pc, #48]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801351e:	4809      	ldr	r0, [pc, #36]	; (8013544 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013520:	f000 fd76 	bl	8014010 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013524:	6a3b      	ldr	r3, [r7, #32]
 8013526:	2b00      	cmp	r3, #0
 8013528:	bf14      	ite	ne
 801352a:	2301      	movne	r3, #1
 801352c:	2300      	moveq	r3, #0
 801352e:	b2db      	uxtb	r3, r3
 8013530:	e000      	b.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013532:	2300      	movs	r3, #0
}
 8013534:	4618      	mov	r0, r3
 8013536:	3730      	adds	r7, #48	; 0x30
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}
 801353c:	08017de8 	.word	0x08017de8
 8013540:	08017ecc 	.word	0x08017ecc
 8013544:	08017e30 	.word	0x08017e30
 8013548:	08017eec 	.word	0x08017eec
 801354c:	08017f24 	.word	0x08017f24
 8013550:	08017f34 	.word	0x08017f34

08013554 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b08e      	sub	sp, #56	; 0x38
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	f003 030f 	and.w	r3, r3, #15
 801356a:	b2db      	uxtb	r3, r3
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	b2db      	uxtb	r3, r3
 8013570:	2b14      	cmp	r3, #20
 8013572:	f040 8167 	bne.w	8013844 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013578:	88db      	ldrh	r3, [r3, #6]
 801357a:	b29b      	uxth	r3, r3
 801357c:	4618      	mov	r0, r3
 801357e:	f7f6 fdcf 	bl	800a120 <lwip_htons>
 8013582:	4603      	mov	r3, r0
 8013584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013588:	b29b      	uxth	r3, r3
 801358a:	00db      	lsls	r3, r3, #3
 801358c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801358e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013590:	885b      	ldrh	r3, [r3, #2]
 8013592:	b29b      	uxth	r3, r3
 8013594:	4618      	mov	r0, r3
 8013596:	f7f6 fdc3 	bl	800a120 <lwip_htons>
 801359a:	4603      	mov	r3, r0
 801359c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	f003 030f 	and.w	r3, r3, #15
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80135ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135b2:	b29b      	uxth	r3, r3
 80135b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135b6:	429a      	cmp	r2, r3
 80135b8:	f0c0 8146 	bcc.w	8013848 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80135bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135c4:	1ad3      	subs	r3, r2, r3
 80135c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f7f8 f9e3 	bl	800b994 <pbuf_clen>
 80135ce:	4603      	mov	r3, r0
 80135d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80135d2:	4b9f      	ldr	r3, [pc, #636]	; (8013850 <ip4_reass+0x2fc>)
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	461a      	mov	r2, r3
 80135d8:	8c3b      	ldrh	r3, [r7, #32]
 80135da:	4413      	add	r3, r2
 80135dc:	2b0a      	cmp	r3, #10
 80135de:	dd10      	ble.n	8013602 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135e0:	8c3b      	ldrh	r3, [r7, #32]
 80135e2:	4619      	mov	r1, r3
 80135e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e6:	f7ff fd81 	bl	80130ec <ip_reass_remove_oldest_datagram>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f000 812d 	beq.w	801384c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80135f2:	4b97      	ldr	r3, [pc, #604]	; (8013850 <ip4_reass+0x2fc>)
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	461a      	mov	r2, r3
 80135f8:	8c3b      	ldrh	r3, [r7, #32]
 80135fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135fc:	2b0a      	cmp	r3, #10
 80135fe:	f300 8125 	bgt.w	801384c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013602:	4b94      	ldr	r3, [pc, #592]	; (8013854 <ip4_reass+0x300>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	633b      	str	r3, [r7, #48]	; 0x30
 8013608:	e015      	b.n	8013636 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360c:	695a      	ldr	r2, [r3, #20]
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	68db      	ldr	r3, [r3, #12]
 8013612:	429a      	cmp	r2, r3
 8013614:	d10c      	bne.n	8013630 <ip4_reass+0xdc>
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	699a      	ldr	r2, [r3, #24]
 801361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361c:	691b      	ldr	r3, [r3, #16]
 801361e:	429a      	cmp	r2, r3
 8013620:	d106      	bne.n	8013630 <ip4_reass+0xdc>
 8013622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013624:	899a      	ldrh	r2, [r3, #12]
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	889b      	ldrh	r3, [r3, #4]
 801362a:	b29b      	uxth	r3, r3
 801362c:	429a      	cmp	r2, r3
 801362e:	d006      	beq.n	801363e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	633b      	str	r3, [r7, #48]	; 0x30
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	2b00      	cmp	r3, #0
 801363a:	d1e6      	bne.n	801360a <ip4_reass+0xb6>
 801363c:	e000      	b.n	8013640 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801363e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	2b00      	cmp	r3, #0
 8013644:	d109      	bne.n	801365a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013646:	8c3b      	ldrh	r3, [r7, #32]
 8013648:	4619      	mov	r1, r3
 801364a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801364c:	f7ff fdb0 	bl	80131b0 <ip_reass_enqueue_new_datagram>
 8013650:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	2b00      	cmp	r3, #0
 8013656:	d11c      	bne.n	8013692 <ip4_reass+0x13e>
      goto nullreturn;
 8013658:	e109      	b.n	801386e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365c:	88db      	ldrh	r3, [r3, #6]
 801365e:	b29b      	uxth	r3, r3
 8013660:	4618      	mov	r0, r3
 8013662:	f7f6 fd5d 	bl	800a120 <lwip_htons>
 8013666:	4603      	mov	r3, r0
 8013668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801366c:	2b00      	cmp	r3, #0
 801366e:	d110      	bne.n	8013692 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013672:	89db      	ldrh	r3, [r3, #14]
 8013674:	4618      	mov	r0, r3
 8013676:	f7f6 fd53 	bl	800a120 <lwip_htons>
 801367a:	4603      	mov	r3, r0
 801367c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013680:	2b00      	cmp	r3, #0
 8013682:	d006      	beq.n	8013692 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	3308      	adds	r3, #8
 8013688:	2214      	movs	r2, #20
 801368a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801368c:	4618      	mov	r0, r3
 801368e:	f000 fc8f 	bl	8013fb0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013694:	88db      	ldrh	r3, [r3, #6]
 8013696:	b29b      	uxth	r3, r3
 8013698:	f003 0320 	and.w	r3, r3, #32
 801369c:	2b00      	cmp	r3, #0
 801369e:	bf0c      	ite	eq
 80136a0:	2301      	moveq	r3, #1
 80136a2:	2300      	movne	r3, #0
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80136a8:	69fb      	ldr	r3, [r7, #28]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00e      	beq.n	80136cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80136ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136b2:	4413      	add	r3, r2
 80136b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80136b6:	8b7a      	ldrh	r2, [r7, #26]
 80136b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136ba:	429a      	cmp	r2, r3
 80136bc:	f0c0 80a0 	bcc.w	8013800 <ip4_reass+0x2ac>
 80136c0:	8b7b      	ldrh	r3, [r7, #26]
 80136c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80136c6:	4293      	cmp	r3, r2
 80136c8:	f200 809a 	bhi.w	8013800 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80136cc:	69fa      	ldr	r2, [r7, #28]
 80136ce:	6879      	ldr	r1, [r7, #4]
 80136d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136d2:	f7ff fdd5 	bl	8013280 <ip_reass_chain_frag_into_datagram_and_validate>
 80136d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80136d8:	697b      	ldr	r3, [r7, #20]
 80136da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136de:	f000 8091 	beq.w	8013804 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80136e2:	4b5b      	ldr	r3, [pc, #364]	; (8013850 <ip4_reass+0x2fc>)
 80136e4:	881a      	ldrh	r2, [r3, #0]
 80136e6:	8c3b      	ldrh	r3, [r7, #32]
 80136e8:	4413      	add	r3, r2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	4b58      	ldr	r3, [pc, #352]	; (8013850 <ip4_reass+0x2fc>)
 80136ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d00d      	beq.n	8013712 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80136f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136fa:	4413      	add	r3, r2
 80136fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80136fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013700:	8a7a      	ldrh	r2, [r7, #18]
 8013702:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013706:	7f9b      	ldrb	r3, [r3, #30]
 8013708:	f043 0301 	orr.w	r3, r3, #1
 801370c:	b2da      	uxtb	r2, r3
 801370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013710:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	2b01      	cmp	r3, #1
 8013716:	d171      	bne.n	80137fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371a:	8b9b      	ldrh	r3, [r3, #28]
 801371c:	3314      	adds	r3, #20
 801371e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013722:	685b      	ldr	r3, [r3, #4]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013734:	3308      	adds	r3, #8
 8013736:	2214      	movs	r2, #20
 8013738:	4619      	mov	r1, r3
 801373a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801373c:	f000 fc38 	bl	8013fb0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013740:	8a3b      	ldrh	r3, [r7, #16]
 8013742:	4618      	mov	r0, r3
 8013744:	f7f6 fcec 	bl	800a120 <lwip_htons>
 8013748:	4603      	mov	r3, r0
 801374a:	461a      	mov	r2, r3
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	2200      	movs	r2, #0
 8013754:	719a      	strb	r2, [r3, #6]
 8013756:	2200      	movs	r2, #0
 8013758:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375c:	2200      	movs	r2, #0
 801375e:	729a      	strb	r2, [r3, #10]
 8013760:	2200      	movs	r2, #0
 8013762:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801376a:	e00d      	b.n	8013788 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013772:	2114      	movs	r1, #20
 8013774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013776:	f7f7 fff9 	bl	800b76c <pbuf_remove_header>
      pbuf_cat(p, r);
 801377a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7f8 f949 	bl	800ba14 <pbuf_cat>
      r = iprh->next_pbuf;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801378a:	2b00      	cmp	r3, #0
 801378c:	d1ee      	bne.n	801376c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801378e:	4b31      	ldr	r3, [pc, #196]	; (8013854 <ip4_reass+0x300>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013794:	429a      	cmp	r2, r3
 8013796:	d102      	bne.n	801379e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013798:	2300      	movs	r3, #0
 801379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801379c:	e010      	b.n	80137c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801379e:	4b2d      	ldr	r3, [pc, #180]	; (8013854 <ip4_reass+0x300>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137a4:	e007      	b.n	80137b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80137a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ac:	429a      	cmp	r2, r3
 80137ae:	d006      	beq.n	80137be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d1f4      	bne.n	80137a6 <ip4_reass+0x252>
 80137bc:	e000      	b.n	80137c0 <ip4_reass+0x26c>
          break;
 80137be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80137c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137c4:	f7ff fd2e 	bl	8013224 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7f8 f8e3 	bl	800b994 <pbuf_clen>
 80137ce:	4603      	mov	r3, r0
 80137d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80137d2:	4b1f      	ldr	r3, [pc, #124]	; (8013850 <ip4_reass+0x2fc>)
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	8c3a      	ldrh	r2, [r7, #32]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d906      	bls.n	80137ea <ip4_reass+0x296>
 80137dc:	4b1e      	ldr	r3, [pc, #120]	; (8013858 <ip4_reass+0x304>)
 80137de:	f240 229b 	movw	r2, #667	; 0x29b
 80137e2:	491e      	ldr	r1, [pc, #120]	; (801385c <ip4_reass+0x308>)
 80137e4:	481e      	ldr	r0, [pc, #120]	; (8013860 <ip4_reass+0x30c>)
 80137e6:	f000 fc13 	bl	8014010 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80137ea:	4b19      	ldr	r3, [pc, #100]	; (8013850 <ip4_reass+0x2fc>)
 80137ec:	881a      	ldrh	r2, [r3, #0]
 80137ee:	8c3b      	ldrh	r3, [r7, #32]
 80137f0:	1ad3      	subs	r3, r2, r3
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	4b16      	ldr	r3, [pc, #88]	; (8013850 <ip4_reass+0x2fc>)
 80137f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	e03c      	b.n	8013876 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80137fc:	2300      	movs	r3, #0
 80137fe:	e03a      	b.n	8013876 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013800:	bf00      	nop
 8013802:	e000      	b.n	8013806 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013804:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013808:	2b00      	cmp	r3, #0
 801380a:	d106      	bne.n	801381a <ip4_reass+0x2c6>
 801380c:	4b12      	ldr	r3, [pc, #72]	; (8013858 <ip4_reass+0x304>)
 801380e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013812:	4914      	ldr	r1, [pc, #80]	; (8013864 <ip4_reass+0x310>)
 8013814:	4812      	ldr	r0, [pc, #72]	; (8013860 <ip4_reass+0x30c>)
 8013816:	f000 fbfb 	bl	8014010 <iprintf>
  if (ipr->p == NULL) {
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d124      	bne.n	801386c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013822:	4b0c      	ldr	r3, [pc, #48]	; (8013854 <ip4_reass+0x300>)
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013828:	429a      	cmp	r2, r3
 801382a:	d006      	beq.n	801383a <ip4_reass+0x2e6>
 801382c:	4b0a      	ldr	r3, [pc, #40]	; (8013858 <ip4_reass+0x304>)
 801382e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013832:	490d      	ldr	r1, [pc, #52]	; (8013868 <ip4_reass+0x314>)
 8013834:	480a      	ldr	r0, [pc, #40]	; (8013860 <ip4_reass+0x30c>)
 8013836:	f000 fbeb 	bl	8014010 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801383a:	2100      	movs	r1, #0
 801383c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801383e:	f7ff fcf1 	bl	8013224 <ip_reass_dequeue_datagram>
 8013842:	e014      	b.n	801386e <ip4_reass+0x31a>
    goto nullreturn;
 8013844:	bf00      	nop
 8013846:	e012      	b.n	801386e <ip4_reass+0x31a>
    goto nullreturn;
 8013848:	bf00      	nop
 801384a:	e010      	b.n	801386e <ip4_reass+0x31a>
      goto nullreturn;
 801384c:	bf00      	nop
 801384e:	e00e      	b.n	801386e <ip4_reass+0x31a>
 8013850:	20004b4c 	.word	0x20004b4c
 8013854:	20004b48 	.word	0x20004b48
 8013858:	08017de8 	.word	0x08017de8
 801385c:	08017f58 	.word	0x08017f58
 8013860:	08017e30 	.word	0x08017e30
 8013864:	08017f74 	.word	0x08017f74
 8013868:	08017f80 	.word	0x08017f80
  }

nullreturn:
 801386c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801386e:	6878      	ldr	r0, [r7, #4]
 8013870:	f7f8 f802 	bl	800b878 <pbuf_free>
  return NULL;
 8013874:	2300      	movs	r3, #0
}
 8013876:	4618      	mov	r0, r3
 8013878:	3738      	adds	r7, #56	; 0x38
 801387a:	46bd      	mov	sp, r7
 801387c:	bd80      	pop	{r7, pc}
 801387e:	bf00      	nop

08013880 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013884:	2005      	movs	r0, #5
 8013886:	f7f7 f901 	bl	800aa8c <memp_malloc>
 801388a:	4603      	mov	r3, r0
}
 801388c:	4618      	mov	r0, r3
 801388e:	bd80      	pop	{r7, pc}

08013890 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b082      	sub	sp, #8
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <ip_frag_free_pbuf_custom_ref+0x1c>
 801389e:	4b07      	ldr	r3, [pc, #28]	; (80138bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80138a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80138a4:	4906      	ldr	r1, [pc, #24]	; (80138c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80138a6:	4807      	ldr	r0, [pc, #28]	; (80138c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80138a8:	f000 fbb2 	bl	8014010 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80138ac:	6879      	ldr	r1, [r7, #4]
 80138ae:	2005      	movs	r0, #5
 80138b0:	f7f7 f93e 	bl	800ab30 <memp_free>
}
 80138b4:	bf00      	nop
 80138b6:	3708      	adds	r7, #8
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	08017de8 	.word	0x08017de8
 80138c0:	08017fa0 	.word	0x08017fa0
 80138c4:	08017e30 	.word	0x08017e30

080138c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d106      	bne.n	80138e8 <ipfrag_free_pbuf_custom+0x20>
 80138da:	4b11      	ldr	r3, [pc, #68]	; (8013920 <ipfrag_free_pbuf_custom+0x58>)
 80138dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80138e0:	4910      	ldr	r1, [pc, #64]	; (8013924 <ipfrag_free_pbuf_custom+0x5c>)
 80138e2:	4811      	ldr	r0, [pc, #68]	; (8013928 <ipfrag_free_pbuf_custom+0x60>)
 80138e4:	f000 fb94 	bl	8014010 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d006      	beq.n	80138fe <ipfrag_free_pbuf_custom+0x36>
 80138f0:	4b0b      	ldr	r3, [pc, #44]	; (8013920 <ipfrag_free_pbuf_custom+0x58>)
 80138f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80138f6:	490d      	ldr	r1, [pc, #52]	; (801392c <ipfrag_free_pbuf_custom+0x64>)
 80138f8:	480b      	ldr	r0, [pc, #44]	; (8013928 <ipfrag_free_pbuf_custom+0x60>)
 80138fa:	f000 fb89 	bl	8014010 <iprintf>
  if (pcr->original != NULL) {
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	695b      	ldr	r3, [r3, #20]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d004      	beq.n	8013910 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	695b      	ldr	r3, [r3, #20]
 801390a:	4618      	mov	r0, r3
 801390c:	f7f7 ffb4 	bl	800b878 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f7ff ffbd 	bl	8013890 <ip_frag_free_pbuf_custom_ref>
}
 8013916:	bf00      	nop
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	08017de8 	.word	0x08017de8
 8013924:	08017fac 	.word	0x08017fac
 8013928:	08017e30 	.word	0x08017e30
 801392c:	08017fb8 	.word	0x08017fb8

08013930 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b094      	sub	sp, #80	; 0x50
 8013934:	af02      	add	r7, sp, #8
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801393c:	2300      	movs	r3, #0
 801393e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013946:	3b14      	subs	r3, #20
 8013948:	2b00      	cmp	r3, #0
 801394a:	da00      	bge.n	801394e <ip4_frag+0x1e>
 801394c:	3307      	adds	r3, #7
 801394e:	10db      	asrs	r3, r3, #3
 8013950:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013952:	2314      	movs	r3, #20
 8013954:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	781b      	ldrb	r3, [r3, #0]
 8013964:	f003 030f 	and.w	r3, r3, #15
 8013968:	b2db      	uxtb	r3, r3
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	b2db      	uxtb	r3, r3
 801396e:	2b14      	cmp	r3, #20
 8013970:	d002      	beq.n	8013978 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013972:	f06f 0305 	mvn.w	r3, #5
 8013976:	e110      	b.n	8013b9a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	895b      	ldrh	r3, [r3, #10]
 801397c:	2b13      	cmp	r3, #19
 801397e:	d809      	bhi.n	8013994 <ip4_frag+0x64>
 8013980:	4b88      	ldr	r3, [pc, #544]	; (8013ba4 <ip4_frag+0x274>)
 8013982:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013986:	4988      	ldr	r1, [pc, #544]	; (8013ba8 <ip4_frag+0x278>)
 8013988:	4888      	ldr	r0, [pc, #544]	; (8013bac <ip4_frag+0x27c>)
 801398a:	f000 fb41 	bl	8014010 <iprintf>
 801398e:	f06f 0305 	mvn.w	r3, #5
 8013992:	e102      	b.n	8013b9a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013996:	88db      	ldrh	r3, [r3, #6]
 8013998:	b29b      	uxth	r3, r3
 801399a:	4618      	mov	r0, r3
 801399c:	f7f6 fbc0 	bl	800a120 <lwip_htons>
 80139a0:	4603      	mov	r3, r0
 80139a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80139a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80139ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80139b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	891b      	ldrh	r3, [r3, #8]
 80139ba:	3b14      	subs	r3, #20
 80139bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80139c0:	e0e1      	b.n	8013b86 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80139c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139c4:	00db      	lsls	r3, r3, #3
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139cc:	4293      	cmp	r3, r2
 80139ce:	bf28      	it	cs
 80139d0:	4613      	movcs	r3, r2
 80139d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80139d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139d8:	2114      	movs	r1, #20
 80139da:	200e      	movs	r0, #14
 80139dc:	f7f7 fc68 	bl	800b2b0 <pbuf_alloc>
 80139e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80139e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	f000 80d5 	beq.w	8013b94 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	895b      	ldrh	r3, [r3, #10]
 80139ee:	2b13      	cmp	r3, #19
 80139f0:	d806      	bhi.n	8013a00 <ip4_frag+0xd0>
 80139f2:	4b6c      	ldr	r3, [pc, #432]	; (8013ba4 <ip4_frag+0x274>)
 80139f4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80139f8:	496d      	ldr	r1, [pc, #436]	; (8013bb0 <ip4_frag+0x280>)
 80139fa:	486c      	ldr	r0, [pc, #432]	; (8013bac <ip4_frag+0x27c>)
 80139fc:	f000 fb08 	bl	8014010 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	2214      	movs	r2, #20
 8013a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f000 fad1 	bl	8013fb0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013a14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013a1a:	e064      	b.n	8013ae6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	895a      	ldrh	r2, [r3, #10]
 8013a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	895b      	ldrh	r3, [r3, #10]
 8013a2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d906      	bls.n	8013a3e <ip4_frag+0x10e>
 8013a30:	4b5c      	ldr	r3, [pc, #368]	; (8013ba4 <ip4_frag+0x274>)
 8013a32:	f240 322d 	movw	r2, #813	; 0x32d
 8013a36:	495f      	ldr	r1, [pc, #380]	; (8013bb4 <ip4_frag+0x284>)
 8013a38:	485c      	ldr	r0, [pc, #368]	; (8013bac <ip4_frag+0x27c>)
 8013a3a:	f000 fae9 	bl	8014010 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a3e:	8bfa      	ldrh	r2, [r7, #30]
 8013a40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a44:	4293      	cmp	r3, r2
 8013a46:	bf28      	it	cs
 8013a48:	4613      	movcs	r3, r2
 8013a4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013a4e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d105      	bne.n	8013a62 <ip4_frag+0x132>
        poff = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	60fb      	str	r3, [r7, #12]
        continue;
 8013a60:	e041      	b.n	8013ae6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013a62:	f7ff ff0d 	bl	8013880 <ip_frag_alloc_pbuf_custom_ref>
 8013a66:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013a68:	69bb      	ldr	r3, [r7, #24]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d103      	bne.n	8013a76 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013a6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a70:	f7f7 ff02 	bl	800b878 <pbuf_free>
        goto memerr;
 8013a74:	e08f      	b.n	8013b96 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a76:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a7e:	4413      	add	r3, r2
 8013a80:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013a84:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013a88:	9201      	str	r2, [sp, #4]
 8013a8a:	9300      	str	r3, [sp, #0]
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	2241      	movs	r2, #65	; 0x41
 8013a90:	2000      	movs	r0, #0
 8013a92:	f7f7 fd37 	bl	800b504 <pbuf_alloced_custom>
 8013a96:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d106      	bne.n	8013aac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013a9e:	69b8      	ldr	r0, [r7, #24]
 8013aa0:	f7ff fef6 	bl	8013890 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013aa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013aa6:	f7f7 fee7 	bl	800b878 <pbuf_free>
        goto memerr;
 8013aaa:	e074      	b.n	8013b96 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	f7f7 ff89 	bl	800b9c4 <pbuf_ref>
      pcr->original = p;
 8013ab2:	69bb      	ldr	r3, [r7, #24]
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	4a3f      	ldr	r2, [pc, #252]	; (8013bb8 <ip4_frag+0x288>)
 8013abc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013abe:	6979      	ldr	r1, [r7, #20]
 8013ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ac2:	f7f7 ffa7 	bl	800ba14 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013ac6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013aca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ace:	1ad3      	subs	r3, r2, r3
 8013ad0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013ad4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d004      	beq.n	8013ae6 <ip4_frag+0x1b6>
        poff = 0;
 8013adc:	2300      	movs	r3, #0
 8013ade:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013ae6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d196      	bne.n	8013a1c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013aee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013af0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013af4:	4413      	add	r3, r2
 8013af6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013afc:	f1a3 0213 	sub.w	r2, r3, #19
 8013b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b04:	429a      	cmp	r2, r3
 8013b06:	bfcc      	ite	gt
 8013b08:	2301      	movgt	r3, #1
 8013b0a:	2300      	movle	r3, #0
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b18:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013b1a:	6a3b      	ldr	r3, [r7, #32]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <ip4_frag+0x1f6>
 8013b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d003      	beq.n	8013b2e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013b26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b2c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b30:	4618      	mov	r0, r3
 8013b32:	f7f6 faf5 	bl	800a120 <lwip_htons>
 8013b36:	4603      	mov	r3, r0
 8013b38:	461a      	mov	r2, r3
 8013b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b3c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b40:	3314      	adds	r3, #20
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7f6 faeb 	bl	800a120 <lwip_htons>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b50:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b54:	2200      	movs	r2, #0
 8013b56:	729a      	strb	r2, [r3, #10]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b5c:	68bb      	ldr	r3, [r7, #8]
 8013b5e:	695b      	ldr	r3, [r3, #20]
 8013b60:	687a      	ldr	r2, [r7, #4]
 8013b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b64:	68b8      	ldr	r0, [r7, #8]
 8013b66:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b6a:	f7f7 fe85 	bl	800b878 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013b6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b74:	1ad3      	subs	r3, r2, r3
 8013b76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b7e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b80:	4413      	add	r3, r2
 8013b82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f47f af19 	bne.w	80139c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013b90:	2300      	movs	r3, #0
 8013b92:	e002      	b.n	8013b9a <ip4_frag+0x26a>
      goto memerr;
 8013b94:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3748      	adds	r7, #72	; 0x48
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	08017de8 	.word	0x08017de8
 8013ba8:	08017fc4 	.word	0x08017fc4
 8013bac:	08017e30 	.word	0x08017e30
 8013bb0:	08017fe0 	.word	0x08017fe0
 8013bb4:	08018000 	.word	0x08018000
 8013bb8:	080138c9 	.word	0x080138c9

08013bbc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b086      	sub	sp, #24
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013bc6:	230e      	movs	r3, #14
 8013bc8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	895b      	ldrh	r3, [r3, #10]
 8013bce:	2b0e      	cmp	r3, #14
 8013bd0:	d96e      	bls.n	8013cb0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7bdb      	ldrb	r3, [r3, #15]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d106      	bne.n	8013be8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013be0:	3301      	adds	r3, #1
 8013be2:	b2da      	uxtb	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	7b1a      	ldrb	r2, [r3, #12]
 8013bf2:	7b5b      	ldrb	r3, [r3, #13]
 8013bf4:	021b      	lsls	r3, r3, #8
 8013bf6:	4313      	orrs	r3, r2
 8013bf8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	f003 0301 	and.w	r3, r3, #1
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d023      	beq.n	8013c4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	2b01      	cmp	r3, #1
 8013c0c:	d10f      	bne.n	8013c2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	785b      	ldrb	r3, [r3, #1]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d11b      	bne.n	8013c4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c1a:	2b5e      	cmp	r3, #94	; 0x5e
 8013c1c:	d117      	bne.n	8013c4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	7b5b      	ldrb	r3, [r3, #13]
 8013c22:	f043 0310 	orr.w	r3, r3, #16
 8013c26:	b2da      	uxtb	r2, r3
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	735a      	strb	r2, [r3, #13]
 8013c2c:	e00f      	b.n	8013c4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	2206      	movs	r2, #6
 8013c32:	4928      	ldr	r1, [pc, #160]	; (8013cd4 <ethernet_input+0x118>)
 8013c34:	4618      	mov	r0, r3
 8013c36:	f000 f9ad 	bl	8013f94 <memcmp>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d106      	bne.n	8013c4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	7b5b      	ldrb	r3, [r3, #13]
 8013c44:	f043 0308 	orr.w	r3, r3, #8
 8013c48:	b2da      	uxtb	r2, r3
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c4e:	89fb      	ldrh	r3, [r7, #14]
 8013c50:	2b08      	cmp	r3, #8
 8013c52:	d003      	beq.n	8013c5c <ethernet_input+0xa0>
 8013c54:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c58:	d014      	beq.n	8013c84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c5a:	e032      	b.n	8013cc2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c62:	f003 0308 	and.w	r3, r3, #8
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d024      	beq.n	8013cb4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c6a:	8afb      	ldrh	r3, [r7, #22]
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7f7 fd7c 	bl	800b76c <pbuf_remove_header>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d11e      	bne.n	8013cb8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7fe fe95 	bl	80129ac <ip4_input>
      break;
 8013c82:	e013      	b.n	8013cac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c84:	683b      	ldr	r3, [r7, #0]
 8013c86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c8a:	f003 0308 	and.w	r3, r3, #8
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d014      	beq.n	8013cbc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c92:	8afb      	ldrh	r3, [r7, #22]
 8013c94:	4619      	mov	r1, r3
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7f7 fd68 	bl	800b76c <pbuf_remove_header>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d10e      	bne.n	8013cc0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013ca2:	6839      	ldr	r1, [r7, #0]
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f7fe f835 	bl	8011d14 <etharp_input>
      break;
 8013caa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013cac:	2300      	movs	r3, #0
 8013cae:	e00c      	b.n	8013cca <ethernet_input+0x10e>
    goto free_and_return;
 8013cb0:	bf00      	nop
 8013cb2:	e006      	b.n	8013cc2 <ethernet_input+0x106>
        goto free_and_return;
 8013cb4:	bf00      	nop
 8013cb6:	e004      	b.n	8013cc2 <ethernet_input+0x106>
        goto free_and_return;
 8013cb8:	bf00      	nop
 8013cba:	e002      	b.n	8013cc2 <ethernet_input+0x106>
        goto free_and_return;
 8013cbc:	bf00      	nop
 8013cbe:	e000      	b.n	8013cc2 <ethernet_input+0x106>
        goto free_and_return;
 8013cc0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f7f7 fdd8 	bl	800b878 <pbuf_free>
  return ERR_OK;
 8013cc8:	2300      	movs	r3, #0
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3718      	adds	r7, #24
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	08018230 	.word	0x08018230

08013cd8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b086      	sub	sp, #24
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
 8013ce4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013ce6:	8c3b      	ldrh	r3, [r7, #32]
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f6 fa19 	bl	800a120 <lwip_htons>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013cf2:	210e      	movs	r1, #14
 8013cf4:	68b8      	ldr	r0, [r7, #8]
 8013cf6:	f7f7 fd29 	bl	800b74c <pbuf_add_header>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d125      	bne.n	8013d4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	685b      	ldr	r3, [r3, #4]
 8013d04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	8afa      	ldrh	r2, [r7, #22]
 8013d0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013d0c:	693b      	ldr	r3, [r7, #16]
 8013d0e:	2206      	movs	r2, #6
 8013d10:	6839      	ldr	r1, [r7, #0]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f000 f94c 	bl	8013fb0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	3306      	adds	r3, #6
 8013d1c:	2206      	movs	r2, #6
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	4618      	mov	r0, r3
 8013d22:	f000 f945 	bl	8013fb0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d2c:	2b06      	cmp	r3, #6
 8013d2e:	d006      	beq.n	8013d3e <ethernet_output+0x66>
 8013d30:	4b0a      	ldr	r3, [pc, #40]	; (8013d5c <ethernet_output+0x84>)
 8013d32:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013d36:	490a      	ldr	r1, [pc, #40]	; (8013d60 <ethernet_output+0x88>)
 8013d38:	480a      	ldr	r0, [pc, #40]	; (8013d64 <ethernet_output+0x8c>)
 8013d3a:	f000 f969 	bl	8014010 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	68b9      	ldr	r1, [r7, #8]
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	4798      	blx	r3
 8013d48:	4603      	mov	r3, r0
 8013d4a:	e002      	b.n	8013d52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d4e:	f06f 0301 	mvn.w	r3, #1
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3718      	adds	r7, #24
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	08018010 	.word	0x08018010
 8013d60:	08018048 	.word	0x08018048
 8013d64:	0801807c 	.word	0x0801807c

08013d68 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b082      	sub	sp, #8
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
 8013d70:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	2200      	movs	r2, #0
 8013d76:	2104      	movs	r1, #4
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7f2 fd0f 	bl	800679c <osMessageQueueNew>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d102      	bne.n	8013d92 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d90:	e000      	b.n	8013d94 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013d92:	2300      	movs	r3, #0
}
 8013d94:	4618      	mov	r0, r3
 8013d96:	3708      	adds	r7, #8
 8013d98:	46bd      	mov	sp, r7
 8013d9a:	bd80      	pop	{r7, pc}

08013d9c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	6818      	ldr	r0, [r3, #0]
 8013daa:	4639      	mov	r1, r7
 8013dac:	2300      	movs	r3, #0
 8013dae:	2200      	movs	r2, #0
 8013db0:	f7f2 fd7a 	bl	80068a8 <osMessageQueuePut>
 8013db4:	4603      	mov	r3, r0
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d102      	bne.n	8013dc0 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	73fb      	strb	r3, [r7, #15]
 8013dbe:	e001      	b.n	8013dc4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013dc0:	23ff      	movs	r3, #255	; 0xff
 8013dc2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b086      	sub	sp, #24
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013ddc:	f7f2 f940 	bl	8006060 <osKernelGetTickCount>
 8013de0:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d013      	beq.n	8013e10 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	6818      	ldr	r0, [r3, #0]
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2200      	movs	r2, #0
 8013df0:	68b9      	ldr	r1, [r7, #8]
 8013df2:	f7f2 fdcd 	bl	8006990 <osMessageQueueGet>
 8013df6:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d105      	bne.n	8013e0a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013dfe:	f7f2 f92f 	bl	8006060 <osKernelGetTickCount>
 8013e02:	4602      	mov	r2, r0
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	1ad3      	subs	r3, r2, r3
 8013e08:	e00f      	b.n	8013e2a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0e:	e00c      	b.n	8013e2a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	6818      	ldr	r0, [r3, #0]
 8013e14:	f04f 33ff 	mov.w	r3, #4294967295
 8013e18:	2200      	movs	r2, #0
 8013e1a:	68b9      	ldr	r1, [r7, #8]
 8013e1c:	f7f2 fdb8 	bl	8006990 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013e20:	f7f2 f91e 	bl	8006060 <osKernelGetTickCount>
 8013e24:	4602      	mov	r2, r0
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	3718      	adds	r7, #24
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}

08013e32 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013e32:	b480      	push	{r7}
 8013e34:	b083      	sub	sp, #12
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d101      	bne.n	8013e46 <sys_mbox_valid+0x14>
    return 0;
 8013e42:	2300      	movs	r3, #0
 8013e44:	e000      	b.n	8013e48 <sys_mbox_valid+0x16>
  else
    return 1;
 8013e46:	2301      	movs	r3, #1
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	370c      	adds	r7, #12
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e52:	4770      	bx	lr

08013e54 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013e58:	2000      	movs	r0, #0
 8013e5a:	f7f2 f9fd 	bl	8006258 <osMutexNew>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	4a01      	ldr	r2, [pc, #4]	; (8013e68 <sys_init+0x14>)
 8013e62:	6013      	str	r3, [r2, #0]
#endif
}
 8013e64:	bf00      	nop
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	2000b964 	.word	0x2000b964

08013e6c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013e74:	2000      	movs	r0, #0
 8013e76:	f7f2 f9ef 	bl	8006258 <osMutexNew>
 8013e7a:	4602      	mov	r2, r0
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d102      	bne.n	8013e8e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013e88:	f04f 33ff 	mov.w	r3, #4294967295
 8013e8c:	e000      	b.n	8013e90 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013e8e:	2300      	movs	r3, #0
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7f2 fa6f 	bl	800638c <osMutexAcquire>
#endif
}
 8013eae:	bf00      	nop
 8013eb0:	3708      	adds	r7, #8
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b082      	sub	sp, #8
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7f2 fac0 	bl	8006448 <osMutexRelease>
}
 8013ec8:	bf00      	nop
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b08e      	sub	sp, #56	; 0x38
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	60b9      	str	r1, [r7, #8]
 8013eda:	607a      	str	r2, [r7, #4]
 8013edc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013ede:	f107 0314 	add.w	r3, r7, #20
 8013ee2:	2224      	movs	r2, #36	; 0x24
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f000 f88a 	bl	8014000 <memset>
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	617b      	str	r3, [r7, #20]
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013ef8:	f107 0314 	add.w	r3, r7, #20
 8013efc:	461a      	mov	r2, r3
 8013efe:	6879      	ldr	r1, [r7, #4]
 8013f00:	68b8      	ldr	r0, [r7, #8]
 8013f02:	f7f2 f8d5 	bl	80060b0 <osThreadNew>
 8013f06:	4603      	mov	r3, r0
#endif
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3738      	adds	r7, #56	; 0x38
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013f14:	4b04      	ldr	r3, [pc, #16]	; (8013f28 <sys_arch_protect+0x18>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	f04f 31ff 	mov.w	r1, #4294967295
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7f2 fa35 	bl	800638c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8013f22:	2301      	movs	r3, #1
}
 8013f24:	4618      	mov	r0, r3
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	2000b964 	.word	0x2000b964

08013f2c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b082      	sub	sp, #8
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013f34:	4b04      	ldr	r3, [pc, #16]	; (8013f48 <sys_arch_unprotect+0x1c>)
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4618      	mov	r0, r3
 8013f3a:	f7f2 fa85 	bl	8006448 <osMutexRelease>
}
 8013f3e:	bf00      	nop
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	2000b964 	.word	0x2000b964

08013f4c <__libc_init_array>:
 8013f4c:	b570      	push	{r4, r5, r6, lr}
 8013f4e:	4d0d      	ldr	r5, [pc, #52]	; (8013f84 <__libc_init_array+0x38>)
 8013f50:	4c0d      	ldr	r4, [pc, #52]	; (8013f88 <__libc_init_array+0x3c>)
 8013f52:	1b64      	subs	r4, r4, r5
 8013f54:	10a4      	asrs	r4, r4, #2
 8013f56:	2600      	movs	r6, #0
 8013f58:	42a6      	cmp	r6, r4
 8013f5a:	d109      	bne.n	8013f70 <__libc_init_array+0x24>
 8013f5c:	4d0b      	ldr	r5, [pc, #44]	; (8013f8c <__libc_init_array+0x40>)
 8013f5e:	4c0c      	ldr	r4, [pc, #48]	; (8013f90 <__libc_init_array+0x44>)
 8013f60:	f001 faf2 	bl	8015548 <_init>
 8013f64:	1b64      	subs	r4, r4, r5
 8013f66:	10a4      	asrs	r4, r4, #2
 8013f68:	2600      	movs	r6, #0
 8013f6a:	42a6      	cmp	r6, r4
 8013f6c:	d105      	bne.n	8013f7a <__libc_init_array+0x2e>
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}
 8013f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f74:	4798      	blx	r3
 8013f76:	3601      	adds	r6, #1
 8013f78:	e7ee      	b.n	8013f58 <__libc_init_array+0xc>
 8013f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f7e:	4798      	blx	r3
 8013f80:	3601      	adds	r6, #1
 8013f82:	e7f2      	b.n	8013f6a <__libc_init_array+0x1e>
 8013f84:	08018394 	.word	0x08018394
 8013f88:	08018394 	.word	0x08018394
 8013f8c:	08018394 	.word	0x08018394
 8013f90:	08018398 	.word	0x08018398

08013f94 <memcmp>:
 8013f94:	b530      	push	{r4, r5, lr}
 8013f96:	3901      	subs	r1, #1
 8013f98:	2400      	movs	r4, #0
 8013f9a:	42a2      	cmp	r2, r4
 8013f9c:	d101      	bne.n	8013fa2 <memcmp+0xe>
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	e005      	b.n	8013fae <memcmp+0x1a>
 8013fa2:	5d03      	ldrb	r3, [r0, r4]
 8013fa4:	3401      	adds	r4, #1
 8013fa6:	5d0d      	ldrb	r5, [r1, r4]
 8013fa8:	42ab      	cmp	r3, r5
 8013faa:	d0f6      	beq.n	8013f9a <memcmp+0x6>
 8013fac:	1b58      	subs	r0, r3, r5
 8013fae:	bd30      	pop	{r4, r5, pc}

08013fb0 <memcpy>:
 8013fb0:	440a      	add	r2, r1
 8013fb2:	4291      	cmp	r1, r2
 8013fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8013fb8:	d100      	bne.n	8013fbc <memcpy+0xc>
 8013fba:	4770      	bx	lr
 8013fbc:	b510      	push	{r4, lr}
 8013fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013fc6:	4291      	cmp	r1, r2
 8013fc8:	d1f9      	bne.n	8013fbe <memcpy+0xe>
 8013fca:	bd10      	pop	{r4, pc}

08013fcc <memmove>:
 8013fcc:	4288      	cmp	r0, r1
 8013fce:	b510      	push	{r4, lr}
 8013fd0:	eb01 0402 	add.w	r4, r1, r2
 8013fd4:	d902      	bls.n	8013fdc <memmove+0x10>
 8013fd6:	4284      	cmp	r4, r0
 8013fd8:	4623      	mov	r3, r4
 8013fda:	d807      	bhi.n	8013fec <memmove+0x20>
 8013fdc:	1e43      	subs	r3, r0, #1
 8013fde:	42a1      	cmp	r1, r4
 8013fe0:	d008      	beq.n	8013ff4 <memmove+0x28>
 8013fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013fea:	e7f8      	b.n	8013fde <memmove+0x12>
 8013fec:	4402      	add	r2, r0
 8013fee:	4601      	mov	r1, r0
 8013ff0:	428a      	cmp	r2, r1
 8013ff2:	d100      	bne.n	8013ff6 <memmove+0x2a>
 8013ff4:	bd10      	pop	{r4, pc}
 8013ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ffe:	e7f7      	b.n	8013ff0 <memmove+0x24>

08014000 <memset>:
 8014000:	4402      	add	r2, r0
 8014002:	4603      	mov	r3, r0
 8014004:	4293      	cmp	r3, r2
 8014006:	d100      	bne.n	801400a <memset+0xa>
 8014008:	4770      	bx	lr
 801400a:	f803 1b01 	strb.w	r1, [r3], #1
 801400e:	e7f9      	b.n	8014004 <memset+0x4>

08014010 <iprintf>:
 8014010:	b40f      	push	{r0, r1, r2, r3}
 8014012:	4b0a      	ldr	r3, [pc, #40]	; (801403c <iprintf+0x2c>)
 8014014:	b513      	push	{r0, r1, r4, lr}
 8014016:	681c      	ldr	r4, [r3, #0]
 8014018:	b124      	cbz	r4, 8014024 <iprintf+0x14>
 801401a:	69a3      	ldr	r3, [r4, #24]
 801401c:	b913      	cbnz	r3, 8014024 <iprintf+0x14>
 801401e:	4620      	mov	r0, r4
 8014020:	f000 fa6c 	bl	80144fc <__sinit>
 8014024:	ab05      	add	r3, sp, #20
 8014026:	9a04      	ldr	r2, [sp, #16]
 8014028:	68a1      	ldr	r1, [r4, #8]
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	4620      	mov	r0, r4
 801402e:	f000 fdb3 	bl	8014b98 <_vfiprintf_r>
 8014032:	b002      	add	sp, #8
 8014034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014038:	b004      	add	sp, #16
 801403a:	4770      	bx	lr
 801403c:	2000001c 	.word	0x2000001c

08014040 <rand>:
 8014040:	4b17      	ldr	r3, [pc, #92]	; (80140a0 <rand+0x60>)
 8014042:	b510      	push	{r4, lr}
 8014044:	681c      	ldr	r4, [r3, #0]
 8014046:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014048:	b9b3      	cbnz	r3, 8014078 <rand+0x38>
 801404a:	2018      	movs	r0, #24
 801404c:	f000 fb6c 	bl	8014728 <malloc>
 8014050:	63a0      	str	r0, [r4, #56]	; 0x38
 8014052:	b928      	cbnz	r0, 8014060 <rand+0x20>
 8014054:	4602      	mov	r2, r0
 8014056:	4b13      	ldr	r3, [pc, #76]	; (80140a4 <rand+0x64>)
 8014058:	4813      	ldr	r0, [pc, #76]	; (80140a8 <rand+0x68>)
 801405a:	214e      	movs	r1, #78	; 0x4e
 801405c:	f000 f916 	bl	801428c <__assert_func>
 8014060:	4a12      	ldr	r2, [pc, #72]	; (80140ac <rand+0x6c>)
 8014062:	4b13      	ldr	r3, [pc, #76]	; (80140b0 <rand+0x70>)
 8014064:	e9c0 2300 	strd	r2, r3, [r0]
 8014068:	4b12      	ldr	r3, [pc, #72]	; (80140b4 <rand+0x74>)
 801406a:	6083      	str	r3, [r0, #8]
 801406c:	230b      	movs	r3, #11
 801406e:	8183      	strh	r3, [r0, #12]
 8014070:	2201      	movs	r2, #1
 8014072:	2300      	movs	r3, #0
 8014074:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014078:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801407a:	480f      	ldr	r0, [pc, #60]	; (80140b8 <rand+0x78>)
 801407c:	690a      	ldr	r2, [r1, #16]
 801407e:	694b      	ldr	r3, [r1, #20]
 8014080:	4c0e      	ldr	r4, [pc, #56]	; (80140bc <rand+0x7c>)
 8014082:	4350      	muls	r0, r2
 8014084:	fb04 0003 	mla	r0, r4, r3, r0
 8014088:	fba2 3404 	umull	r3, r4, r2, r4
 801408c:	1c5a      	adds	r2, r3, #1
 801408e:	4404      	add	r4, r0
 8014090:	f144 0000 	adc.w	r0, r4, #0
 8014094:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014098:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801409c:	bd10      	pop	{r4, pc}
 801409e:	bf00      	nop
 80140a0:	2000001c 	.word	0x2000001c
 80140a4:	08018244 	.word	0x08018244
 80140a8:	0801825b 	.word	0x0801825b
 80140ac:	abcd330e 	.word	0xabcd330e
 80140b0:	e66d1234 	.word	0xe66d1234
 80140b4:	0005deec 	.word	0x0005deec
 80140b8:	5851f42d 	.word	0x5851f42d
 80140bc:	4c957f2d 	.word	0x4c957f2d

080140c0 <setvbuf>:
 80140c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80140c4:	461d      	mov	r5, r3
 80140c6:	4b5d      	ldr	r3, [pc, #372]	; (801423c <setvbuf+0x17c>)
 80140c8:	681f      	ldr	r7, [r3, #0]
 80140ca:	4604      	mov	r4, r0
 80140cc:	460e      	mov	r6, r1
 80140ce:	4690      	mov	r8, r2
 80140d0:	b127      	cbz	r7, 80140dc <setvbuf+0x1c>
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	b913      	cbnz	r3, 80140dc <setvbuf+0x1c>
 80140d6:	4638      	mov	r0, r7
 80140d8:	f000 fa10 	bl	80144fc <__sinit>
 80140dc:	4b58      	ldr	r3, [pc, #352]	; (8014240 <setvbuf+0x180>)
 80140de:	429c      	cmp	r4, r3
 80140e0:	d167      	bne.n	80141b2 <setvbuf+0xf2>
 80140e2:	687c      	ldr	r4, [r7, #4]
 80140e4:	f1b8 0f02 	cmp.w	r8, #2
 80140e8:	d006      	beq.n	80140f8 <setvbuf+0x38>
 80140ea:	f1b8 0f01 	cmp.w	r8, #1
 80140ee:	f200 809f 	bhi.w	8014230 <setvbuf+0x170>
 80140f2:	2d00      	cmp	r5, #0
 80140f4:	f2c0 809c 	blt.w	8014230 <setvbuf+0x170>
 80140f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80140fa:	07db      	lsls	r3, r3, #31
 80140fc:	d405      	bmi.n	801410a <setvbuf+0x4a>
 80140fe:	89a3      	ldrh	r3, [r4, #12]
 8014100:	0598      	lsls	r0, r3, #22
 8014102:	d402      	bmi.n	801410a <setvbuf+0x4a>
 8014104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014106:	f000 faa9 	bl	801465c <__retarget_lock_acquire_recursive>
 801410a:	4621      	mov	r1, r4
 801410c:	4638      	mov	r0, r7
 801410e:	f000 f961 	bl	80143d4 <_fflush_r>
 8014112:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014114:	b141      	cbz	r1, 8014128 <setvbuf+0x68>
 8014116:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801411a:	4299      	cmp	r1, r3
 801411c:	d002      	beq.n	8014124 <setvbuf+0x64>
 801411e:	4638      	mov	r0, r7
 8014120:	f000 fb0a 	bl	8014738 <_free_r>
 8014124:	2300      	movs	r3, #0
 8014126:	6363      	str	r3, [r4, #52]	; 0x34
 8014128:	2300      	movs	r3, #0
 801412a:	61a3      	str	r3, [r4, #24]
 801412c:	6063      	str	r3, [r4, #4]
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	0619      	lsls	r1, r3, #24
 8014132:	d503      	bpl.n	801413c <setvbuf+0x7c>
 8014134:	6921      	ldr	r1, [r4, #16]
 8014136:	4638      	mov	r0, r7
 8014138:	f000 fafe 	bl	8014738 <_free_r>
 801413c:	89a3      	ldrh	r3, [r4, #12]
 801413e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8014142:	f023 0303 	bic.w	r3, r3, #3
 8014146:	f1b8 0f02 	cmp.w	r8, #2
 801414a:	81a3      	strh	r3, [r4, #12]
 801414c:	d06c      	beq.n	8014228 <setvbuf+0x168>
 801414e:	ab01      	add	r3, sp, #4
 8014150:	466a      	mov	r2, sp
 8014152:	4621      	mov	r1, r4
 8014154:	4638      	mov	r0, r7
 8014156:	f000 fa83 	bl	8014660 <__swhatbuf_r>
 801415a:	89a3      	ldrh	r3, [r4, #12]
 801415c:	4318      	orrs	r0, r3
 801415e:	81a0      	strh	r0, [r4, #12]
 8014160:	2d00      	cmp	r5, #0
 8014162:	d130      	bne.n	80141c6 <setvbuf+0x106>
 8014164:	9d00      	ldr	r5, [sp, #0]
 8014166:	4628      	mov	r0, r5
 8014168:	f000 fade 	bl	8014728 <malloc>
 801416c:	4606      	mov	r6, r0
 801416e:	2800      	cmp	r0, #0
 8014170:	d155      	bne.n	801421e <setvbuf+0x15e>
 8014172:	f8dd 9000 	ldr.w	r9, [sp]
 8014176:	45a9      	cmp	r9, r5
 8014178:	d14a      	bne.n	8014210 <setvbuf+0x150>
 801417a:	f04f 35ff 	mov.w	r5, #4294967295
 801417e:	2200      	movs	r2, #0
 8014180:	60a2      	str	r2, [r4, #8]
 8014182:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8014186:	6022      	str	r2, [r4, #0]
 8014188:	6122      	str	r2, [r4, #16]
 801418a:	2201      	movs	r2, #1
 801418c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014190:	6162      	str	r2, [r4, #20]
 8014192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014194:	f043 0302 	orr.w	r3, r3, #2
 8014198:	07d2      	lsls	r2, r2, #31
 801419a:	81a3      	strh	r3, [r4, #12]
 801419c:	d405      	bmi.n	80141aa <setvbuf+0xea>
 801419e:	f413 7f00 	tst.w	r3, #512	; 0x200
 80141a2:	d102      	bne.n	80141aa <setvbuf+0xea>
 80141a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80141a6:	f000 fa5a 	bl	801465e <__retarget_lock_release_recursive>
 80141aa:	4628      	mov	r0, r5
 80141ac:	b003      	add	sp, #12
 80141ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141b2:	4b24      	ldr	r3, [pc, #144]	; (8014244 <setvbuf+0x184>)
 80141b4:	429c      	cmp	r4, r3
 80141b6:	d101      	bne.n	80141bc <setvbuf+0xfc>
 80141b8:	68bc      	ldr	r4, [r7, #8]
 80141ba:	e793      	b.n	80140e4 <setvbuf+0x24>
 80141bc:	4b22      	ldr	r3, [pc, #136]	; (8014248 <setvbuf+0x188>)
 80141be:	429c      	cmp	r4, r3
 80141c0:	bf08      	it	eq
 80141c2:	68fc      	ldreq	r4, [r7, #12]
 80141c4:	e78e      	b.n	80140e4 <setvbuf+0x24>
 80141c6:	2e00      	cmp	r6, #0
 80141c8:	d0cd      	beq.n	8014166 <setvbuf+0xa6>
 80141ca:	69bb      	ldr	r3, [r7, #24]
 80141cc:	b913      	cbnz	r3, 80141d4 <setvbuf+0x114>
 80141ce:	4638      	mov	r0, r7
 80141d0:	f000 f994 	bl	80144fc <__sinit>
 80141d4:	f1b8 0f01 	cmp.w	r8, #1
 80141d8:	bf08      	it	eq
 80141da:	89a3      	ldrheq	r3, [r4, #12]
 80141dc:	6026      	str	r6, [r4, #0]
 80141de:	bf04      	itt	eq
 80141e0:	f043 0301 	orreq.w	r3, r3, #1
 80141e4:	81a3      	strheq	r3, [r4, #12]
 80141e6:	89a2      	ldrh	r2, [r4, #12]
 80141e8:	f012 0308 	ands.w	r3, r2, #8
 80141ec:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80141f0:	d01c      	beq.n	801422c <setvbuf+0x16c>
 80141f2:	07d3      	lsls	r3, r2, #31
 80141f4:	bf41      	itttt	mi
 80141f6:	2300      	movmi	r3, #0
 80141f8:	426d      	negmi	r5, r5
 80141fa:	60a3      	strmi	r3, [r4, #8]
 80141fc:	61a5      	strmi	r5, [r4, #24]
 80141fe:	bf58      	it	pl
 8014200:	60a5      	strpl	r5, [r4, #8]
 8014202:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8014204:	f015 0501 	ands.w	r5, r5, #1
 8014208:	d115      	bne.n	8014236 <setvbuf+0x176>
 801420a:	f412 7f00 	tst.w	r2, #512	; 0x200
 801420e:	e7c8      	b.n	80141a2 <setvbuf+0xe2>
 8014210:	4648      	mov	r0, r9
 8014212:	f000 fa89 	bl	8014728 <malloc>
 8014216:	4606      	mov	r6, r0
 8014218:	2800      	cmp	r0, #0
 801421a:	d0ae      	beq.n	801417a <setvbuf+0xba>
 801421c:	464d      	mov	r5, r9
 801421e:	89a3      	ldrh	r3, [r4, #12]
 8014220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014224:	81a3      	strh	r3, [r4, #12]
 8014226:	e7d0      	b.n	80141ca <setvbuf+0x10a>
 8014228:	2500      	movs	r5, #0
 801422a:	e7a8      	b.n	801417e <setvbuf+0xbe>
 801422c:	60a3      	str	r3, [r4, #8]
 801422e:	e7e8      	b.n	8014202 <setvbuf+0x142>
 8014230:	f04f 35ff 	mov.w	r5, #4294967295
 8014234:	e7b9      	b.n	80141aa <setvbuf+0xea>
 8014236:	2500      	movs	r5, #0
 8014238:	e7b7      	b.n	80141aa <setvbuf+0xea>
 801423a:	bf00      	nop
 801423c:	2000001c 	.word	0x2000001c
 8014240:	08018318 	.word	0x08018318
 8014244:	08018338 	.word	0x08018338
 8014248:	080182f8 	.word	0x080182f8

0801424c <siprintf>:
 801424c:	b40e      	push	{r1, r2, r3}
 801424e:	b500      	push	{lr}
 8014250:	b09c      	sub	sp, #112	; 0x70
 8014252:	ab1d      	add	r3, sp, #116	; 0x74
 8014254:	9002      	str	r0, [sp, #8]
 8014256:	9006      	str	r0, [sp, #24]
 8014258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801425c:	4809      	ldr	r0, [pc, #36]	; (8014284 <siprintf+0x38>)
 801425e:	9107      	str	r1, [sp, #28]
 8014260:	9104      	str	r1, [sp, #16]
 8014262:	4909      	ldr	r1, [pc, #36]	; (8014288 <siprintf+0x3c>)
 8014264:	f853 2b04 	ldr.w	r2, [r3], #4
 8014268:	9105      	str	r1, [sp, #20]
 801426a:	6800      	ldr	r0, [r0, #0]
 801426c:	9301      	str	r3, [sp, #4]
 801426e:	a902      	add	r1, sp, #8
 8014270:	f000 fb68 	bl	8014944 <_svfiprintf_r>
 8014274:	9b02      	ldr	r3, [sp, #8]
 8014276:	2200      	movs	r2, #0
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	b01c      	add	sp, #112	; 0x70
 801427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014280:	b003      	add	sp, #12
 8014282:	4770      	bx	lr
 8014284:	2000001c 	.word	0x2000001c
 8014288:	ffff0208 	.word	0xffff0208

0801428c <__assert_func>:
 801428c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801428e:	4614      	mov	r4, r2
 8014290:	461a      	mov	r2, r3
 8014292:	4b09      	ldr	r3, [pc, #36]	; (80142b8 <__assert_func+0x2c>)
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	4605      	mov	r5, r0
 8014298:	68d8      	ldr	r0, [r3, #12]
 801429a:	b14c      	cbz	r4, 80142b0 <__assert_func+0x24>
 801429c:	4b07      	ldr	r3, [pc, #28]	; (80142bc <__assert_func+0x30>)
 801429e:	9100      	str	r1, [sp, #0]
 80142a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142a4:	4906      	ldr	r1, [pc, #24]	; (80142c0 <__assert_func+0x34>)
 80142a6:	462b      	mov	r3, r5
 80142a8:	f000 f9a6 	bl	80145f8 <fiprintf>
 80142ac:	f001 f85e 	bl	801536c <abort>
 80142b0:	4b04      	ldr	r3, [pc, #16]	; (80142c4 <__assert_func+0x38>)
 80142b2:	461c      	mov	r4, r3
 80142b4:	e7f3      	b.n	801429e <__assert_func+0x12>
 80142b6:	bf00      	nop
 80142b8:	2000001c 	.word	0x2000001c
 80142bc:	080182ba 	.word	0x080182ba
 80142c0:	080182c7 	.word	0x080182c7
 80142c4:	080182f5 	.word	0x080182f5

080142c8 <__sflush_r>:
 80142c8:	898a      	ldrh	r2, [r1, #12]
 80142ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ce:	4605      	mov	r5, r0
 80142d0:	0710      	lsls	r0, r2, #28
 80142d2:	460c      	mov	r4, r1
 80142d4:	d458      	bmi.n	8014388 <__sflush_r+0xc0>
 80142d6:	684b      	ldr	r3, [r1, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	dc05      	bgt.n	80142e8 <__sflush_r+0x20>
 80142dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142de:	2b00      	cmp	r3, #0
 80142e0:	dc02      	bgt.n	80142e8 <__sflush_r+0x20>
 80142e2:	2000      	movs	r0, #0
 80142e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ea:	2e00      	cmp	r6, #0
 80142ec:	d0f9      	beq.n	80142e2 <__sflush_r+0x1a>
 80142ee:	2300      	movs	r3, #0
 80142f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142f4:	682f      	ldr	r7, [r5, #0]
 80142f6:	602b      	str	r3, [r5, #0]
 80142f8:	d032      	beq.n	8014360 <__sflush_r+0x98>
 80142fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142fc:	89a3      	ldrh	r3, [r4, #12]
 80142fe:	075a      	lsls	r2, r3, #29
 8014300:	d505      	bpl.n	801430e <__sflush_r+0x46>
 8014302:	6863      	ldr	r3, [r4, #4]
 8014304:	1ac0      	subs	r0, r0, r3
 8014306:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014308:	b10b      	cbz	r3, 801430e <__sflush_r+0x46>
 801430a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801430c:	1ac0      	subs	r0, r0, r3
 801430e:	2300      	movs	r3, #0
 8014310:	4602      	mov	r2, r0
 8014312:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014314:	6a21      	ldr	r1, [r4, #32]
 8014316:	4628      	mov	r0, r5
 8014318:	47b0      	blx	r6
 801431a:	1c43      	adds	r3, r0, #1
 801431c:	89a3      	ldrh	r3, [r4, #12]
 801431e:	d106      	bne.n	801432e <__sflush_r+0x66>
 8014320:	6829      	ldr	r1, [r5, #0]
 8014322:	291d      	cmp	r1, #29
 8014324:	d82c      	bhi.n	8014380 <__sflush_r+0xb8>
 8014326:	4a2a      	ldr	r2, [pc, #168]	; (80143d0 <__sflush_r+0x108>)
 8014328:	40ca      	lsrs	r2, r1
 801432a:	07d6      	lsls	r6, r2, #31
 801432c:	d528      	bpl.n	8014380 <__sflush_r+0xb8>
 801432e:	2200      	movs	r2, #0
 8014330:	6062      	str	r2, [r4, #4]
 8014332:	04d9      	lsls	r1, r3, #19
 8014334:	6922      	ldr	r2, [r4, #16]
 8014336:	6022      	str	r2, [r4, #0]
 8014338:	d504      	bpl.n	8014344 <__sflush_r+0x7c>
 801433a:	1c42      	adds	r2, r0, #1
 801433c:	d101      	bne.n	8014342 <__sflush_r+0x7a>
 801433e:	682b      	ldr	r3, [r5, #0]
 8014340:	b903      	cbnz	r3, 8014344 <__sflush_r+0x7c>
 8014342:	6560      	str	r0, [r4, #84]	; 0x54
 8014344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014346:	602f      	str	r7, [r5, #0]
 8014348:	2900      	cmp	r1, #0
 801434a:	d0ca      	beq.n	80142e2 <__sflush_r+0x1a>
 801434c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014350:	4299      	cmp	r1, r3
 8014352:	d002      	beq.n	801435a <__sflush_r+0x92>
 8014354:	4628      	mov	r0, r5
 8014356:	f000 f9ef 	bl	8014738 <_free_r>
 801435a:	2000      	movs	r0, #0
 801435c:	6360      	str	r0, [r4, #52]	; 0x34
 801435e:	e7c1      	b.n	80142e4 <__sflush_r+0x1c>
 8014360:	6a21      	ldr	r1, [r4, #32]
 8014362:	2301      	movs	r3, #1
 8014364:	4628      	mov	r0, r5
 8014366:	47b0      	blx	r6
 8014368:	1c41      	adds	r1, r0, #1
 801436a:	d1c7      	bne.n	80142fc <__sflush_r+0x34>
 801436c:	682b      	ldr	r3, [r5, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d0c4      	beq.n	80142fc <__sflush_r+0x34>
 8014372:	2b1d      	cmp	r3, #29
 8014374:	d001      	beq.n	801437a <__sflush_r+0xb2>
 8014376:	2b16      	cmp	r3, #22
 8014378:	d101      	bne.n	801437e <__sflush_r+0xb6>
 801437a:	602f      	str	r7, [r5, #0]
 801437c:	e7b1      	b.n	80142e2 <__sflush_r+0x1a>
 801437e:	89a3      	ldrh	r3, [r4, #12]
 8014380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014384:	81a3      	strh	r3, [r4, #12]
 8014386:	e7ad      	b.n	80142e4 <__sflush_r+0x1c>
 8014388:	690f      	ldr	r7, [r1, #16]
 801438a:	2f00      	cmp	r7, #0
 801438c:	d0a9      	beq.n	80142e2 <__sflush_r+0x1a>
 801438e:	0793      	lsls	r3, r2, #30
 8014390:	680e      	ldr	r6, [r1, #0]
 8014392:	bf08      	it	eq
 8014394:	694b      	ldreq	r3, [r1, #20]
 8014396:	600f      	str	r7, [r1, #0]
 8014398:	bf18      	it	ne
 801439a:	2300      	movne	r3, #0
 801439c:	eba6 0807 	sub.w	r8, r6, r7
 80143a0:	608b      	str	r3, [r1, #8]
 80143a2:	f1b8 0f00 	cmp.w	r8, #0
 80143a6:	dd9c      	ble.n	80142e2 <__sflush_r+0x1a>
 80143a8:	6a21      	ldr	r1, [r4, #32]
 80143aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143ac:	4643      	mov	r3, r8
 80143ae:	463a      	mov	r2, r7
 80143b0:	4628      	mov	r0, r5
 80143b2:	47b0      	blx	r6
 80143b4:	2800      	cmp	r0, #0
 80143b6:	dc06      	bgt.n	80143c6 <__sflush_r+0xfe>
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143be:	81a3      	strh	r3, [r4, #12]
 80143c0:	f04f 30ff 	mov.w	r0, #4294967295
 80143c4:	e78e      	b.n	80142e4 <__sflush_r+0x1c>
 80143c6:	4407      	add	r7, r0
 80143c8:	eba8 0800 	sub.w	r8, r8, r0
 80143cc:	e7e9      	b.n	80143a2 <__sflush_r+0xda>
 80143ce:	bf00      	nop
 80143d0:	20400001 	.word	0x20400001

080143d4 <_fflush_r>:
 80143d4:	b538      	push	{r3, r4, r5, lr}
 80143d6:	690b      	ldr	r3, [r1, #16]
 80143d8:	4605      	mov	r5, r0
 80143da:	460c      	mov	r4, r1
 80143dc:	b913      	cbnz	r3, 80143e4 <_fflush_r+0x10>
 80143de:	2500      	movs	r5, #0
 80143e0:	4628      	mov	r0, r5
 80143e2:	bd38      	pop	{r3, r4, r5, pc}
 80143e4:	b118      	cbz	r0, 80143ee <_fflush_r+0x1a>
 80143e6:	6983      	ldr	r3, [r0, #24]
 80143e8:	b90b      	cbnz	r3, 80143ee <_fflush_r+0x1a>
 80143ea:	f000 f887 	bl	80144fc <__sinit>
 80143ee:	4b14      	ldr	r3, [pc, #80]	; (8014440 <_fflush_r+0x6c>)
 80143f0:	429c      	cmp	r4, r3
 80143f2:	d11b      	bne.n	801442c <_fflush_r+0x58>
 80143f4:	686c      	ldr	r4, [r5, #4]
 80143f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d0ef      	beq.n	80143de <_fflush_r+0xa>
 80143fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014400:	07d0      	lsls	r0, r2, #31
 8014402:	d404      	bmi.n	801440e <_fflush_r+0x3a>
 8014404:	0599      	lsls	r1, r3, #22
 8014406:	d402      	bmi.n	801440e <_fflush_r+0x3a>
 8014408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801440a:	f000 f927 	bl	801465c <__retarget_lock_acquire_recursive>
 801440e:	4628      	mov	r0, r5
 8014410:	4621      	mov	r1, r4
 8014412:	f7ff ff59 	bl	80142c8 <__sflush_r>
 8014416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014418:	07da      	lsls	r2, r3, #31
 801441a:	4605      	mov	r5, r0
 801441c:	d4e0      	bmi.n	80143e0 <_fflush_r+0xc>
 801441e:	89a3      	ldrh	r3, [r4, #12]
 8014420:	059b      	lsls	r3, r3, #22
 8014422:	d4dd      	bmi.n	80143e0 <_fflush_r+0xc>
 8014424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014426:	f000 f91a 	bl	801465e <__retarget_lock_release_recursive>
 801442a:	e7d9      	b.n	80143e0 <_fflush_r+0xc>
 801442c:	4b05      	ldr	r3, [pc, #20]	; (8014444 <_fflush_r+0x70>)
 801442e:	429c      	cmp	r4, r3
 8014430:	d101      	bne.n	8014436 <_fflush_r+0x62>
 8014432:	68ac      	ldr	r4, [r5, #8]
 8014434:	e7df      	b.n	80143f6 <_fflush_r+0x22>
 8014436:	4b04      	ldr	r3, [pc, #16]	; (8014448 <_fflush_r+0x74>)
 8014438:	429c      	cmp	r4, r3
 801443a:	bf08      	it	eq
 801443c:	68ec      	ldreq	r4, [r5, #12]
 801443e:	e7da      	b.n	80143f6 <_fflush_r+0x22>
 8014440:	08018318 	.word	0x08018318
 8014444:	08018338 	.word	0x08018338
 8014448:	080182f8 	.word	0x080182f8

0801444c <std>:
 801444c:	2300      	movs	r3, #0
 801444e:	b510      	push	{r4, lr}
 8014450:	4604      	mov	r4, r0
 8014452:	e9c0 3300 	strd	r3, r3, [r0]
 8014456:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801445a:	6083      	str	r3, [r0, #8]
 801445c:	8181      	strh	r1, [r0, #12]
 801445e:	6643      	str	r3, [r0, #100]	; 0x64
 8014460:	81c2      	strh	r2, [r0, #14]
 8014462:	6183      	str	r3, [r0, #24]
 8014464:	4619      	mov	r1, r3
 8014466:	2208      	movs	r2, #8
 8014468:	305c      	adds	r0, #92	; 0x5c
 801446a:	f7ff fdc9 	bl	8014000 <memset>
 801446e:	4b05      	ldr	r3, [pc, #20]	; (8014484 <std+0x38>)
 8014470:	6263      	str	r3, [r4, #36]	; 0x24
 8014472:	4b05      	ldr	r3, [pc, #20]	; (8014488 <std+0x3c>)
 8014474:	62a3      	str	r3, [r4, #40]	; 0x28
 8014476:	4b05      	ldr	r3, [pc, #20]	; (801448c <std+0x40>)
 8014478:	62e3      	str	r3, [r4, #44]	; 0x2c
 801447a:	4b05      	ldr	r3, [pc, #20]	; (8014490 <std+0x44>)
 801447c:	6224      	str	r4, [r4, #32]
 801447e:	6323      	str	r3, [r4, #48]	; 0x30
 8014480:	bd10      	pop	{r4, pc}
 8014482:	bf00      	nop
 8014484:	08015141 	.word	0x08015141
 8014488:	08015163 	.word	0x08015163
 801448c:	0801519b 	.word	0x0801519b
 8014490:	080151bf 	.word	0x080151bf

08014494 <_cleanup_r>:
 8014494:	4901      	ldr	r1, [pc, #4]	; (801449c <_cleanup_r+0x8>)
 8014496:	f000 b8c1 	b.w	801461c <_fwalk_reent>
 801449a:	bf00      	nop
 801449c:	080143d5 	.word	0x080143d5

080144a0 <__sfmoreglue>:
 80144a0:	b570      	push	{r4, r5, r6, lr}
 80144a2:	1e4a      	subs	r2, r1, #1
 80144a4:	2568      	movs	r5, #104	; 0x68
 80144a6:	4355      	muls	r5, r2
 80144a8:	460e      	mov	r6, r1
 80144aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80144ae:	f000 f993 	bl	80147d8 <_malloc_r>
 80144b2:	4604      	mov	r4, r0
 80144b4:	b140      	cbz	r0, 80144c8 <__sfmoreglue+0x28>
 80144b6:	2100      	movs	r1, #0
 80144b8:	e9c0 1600 	strd	r1, r6, [r0]
 80144bc:	300c      	adds	r0, #12
 80144be:	60a0      	str	r0, [r4, #8]
 80144c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80144c4:	f7ff fd9c 	bl	8014000 <memset>
 80144c8:	4620      	mov	r0, r4
 80144ca:	bd70      	pop	{r4, r5, r6, pc}

080144cc <__sfp_lock_acquire>:
 80144cc:	4801      	ldr	r0, [pc, #4]	; (80144d4 <__sfp_lock_acquire+0x8>)
 80144ce:	f000 b8c5 	b.w	801465c <__retarget_lock_acquire_recursive>
 80144d2:	bf00      	nop
 80144d4:	2000b970 	.word	0x2000b970

080144d8 <__sfp_lock_release>:
 80144d8:	4801      	ldr	r0, [pc, #4]	; (80144e0 <__sfp_lock_release+0x8>)
 80144da:	f000 b8c0 	b.w	801465e <__retarget_lock_release_recursive>
 80144de:	bf00      	nop
 80144e0:	2000b970 	.word	0x2000b970

080144e4 <__sinit_lock_acquire>:
 80144e4:	4801      	ldr	r0, [pc, #4]	; (80144ec <__sinit_lock_acquire+0x8>)
 80144e6:	f000 b8b9 	b.w	801465c <__retarget_lock_acquire_recursive>
 80144ea:	bf00      	nop
 80144ec:	2000b96b 	.word	0x2000b96b

080144f0 <__sinit_lock_release>:
 80144f0:	4801      	ldr	r0, [pc, #4]	; (80144f8 <__sinit_lock_release+0x8>)
 80144f2:	f000 b8b4 	b.w	801465e <__retarget_lock_release_recursive>
 80144f6:	bf00      	nop
 80144f8:	2000b96b 	.word	0x2000b96b

080144fc <__sinit>:
 80144fc:	b510      	push	{r4, lr}
 80144fe:	4604      	mov	r4, r0
 8014500:	f7ff fff0 	bl	80144e4 <__sinit_lock_acquire>
 8014504:	69a3      	ldr	r3, [r4, #24]
 8014506:	b11b      	cbz	r3, 8014510 <__sinit+0x14>
 8014508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801450c:	f7ff bff0 	b.w	80144f0 <__sinit_lock_release>
 8014510:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014514:	6523      	str	r3, [r4, #80]	; 0x50
 8014516:	4b13      	ldr	r3, [pc, #76]	; (8014564 <__sinit+0x68>)
 8014518:	4a13      	ldr	r2, [pc, #76]	; (8014568 <__sinit+0x6c>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	62a2      	str	r2, [r4, #40]	; 0x28
 801451e:	42a3      	cmp	r3, r4
 8014520:	bf04      	itt	eq
 8014522:	2301      	moveq	r3, #1
 8014524:	61a3      	streq	r3, [r4, #24]
 8014526:	4620      	mov	r0, r4
 8014528:	f000 f820 	bl	801456c <__sfp>
 801452c:	6060      	str	r0, [r4, #4]
 801452e:	4620      	mov	r0, r4
 8014530:	f000 f81c 	bl	801456c <__sfp>
 8014534:	60a0      	str	r0, [r4, #8]
 8014536:	4620      	mov	r0, r4
 8014538:	f000 f818 	bl	801456c <__sfp>
 801453c:	2200      	movs	r2, #0
 801453e:	60e0      	str	r0, [r4, #12]
 8014540:	2104      	movs	r1, #4
 8014542:	6860      	ldr	r0, [r4, #4]
 8014544:	f7ff ff82 	bl	801444c <std>
 8014548:	68a0      	ldr	r0, [r4, #8]
 801454a:	2201      	movs	r2, #1
 801454c:	2109      	movs	r1, #9
 801454e:	f7ff ff7d 	bl	801444c <std>
 8014552:	68e0      	ldr	r0, [r4, #12]
 8014554:	2202      	movs	r2, #2
 8014556:	2112      	movs	r1, #18
 8014558:	f7ff ff78 	bl	801444c <std>
 801455c:	2301      	movs	r3, #1
 801455e:	61a3      	str	r3, [r4, #24]
 8014560:	e7d2      	b.n	8014508 <__sinit+0xc>
 8014562:	bf00      	nop
 8014564:	08018240 	.word	0x08018240
 8014568:	08014495 	.word	0x08014495

0801456c <__sfp>:
 801456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801456e:	4607      	mov	r7, r0
 8014570:	f7ff ffac 	bl	80144cc <__sfp_lock_acquire>
 8014574:	4b1e      	ldr	r3, [pc, #120]	; (80145f0 <__sfp+0x84>)
 8014576:	681e      	ldr	r6, [r3, #0]
 8014578:	69b3      	ldr	r3, [r6, #24]
 801457a:	b913      	cbnz	r3, 8014582 <__sfp+0x16>
 801457c:	4630      	mov	r0, r6
 801457e:	f7ff ffbd 	bl	80144fc <__sinit>
 8014582:	3648      	adds	r6, #72	; 0x48
 8014584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014588:	3b01      	subs	r3, #1
 801458a:	d503      	bpl.n	8014594 <__sfp+0x28>
 801458c:	6833      	ldr	r3, [r6, #0]
 801458e:	b30b      	cbz	r3, 80145d4 <__sfp+0x68>
 8014590:	6836      	ldr	r6, [r6, #0]
 8014592:	e7f7      	b.n	8014584 <__sfp+0x18>
 8014594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014598:	b9d5      	cbnz	r5, 80145d0 <__sfp+0x64>
 801459a:	4b16      	ldr	r3, [pc, #88]	; (80145f4 <__sfp+0x88>)
 801459c:	60e3      	str	r3, [r4, #12]
 801459e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80145a2:	6665      	str	r5, [r4, #100]	; 0x64
 80145a4:	f000 f859 	bl	801465a <__retarget_lock_init_recursive>
 80145a8:	f7ff ff96 	bl	80144d8 <__sfp_lock_release>
 80145ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80145b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80145b4:	6025      	str	r5, [r4, #0]
 80145b6:	61a5      	str	r5, [r4, #24]
 80145b8:	2208      	movs	r2, #8
 80145ba:	4629      	mov	r1, r5
 80145bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80145c0:	f7ff fd1e 	bl	8014000 <memset>
 80145c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80145c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80145cc:	4620      	mov	r0, r4
 80145ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145d0:	3468      	adds	r4, #104	; 0x68
 80145d2:	e7d9      	b.n	8014588 <__sfp+0x1c>
 80145d4:	2104      	movs	r1, #4
 80145d6:	4638      	mov	r0, r7
 80145d8:	f7ff ff62 	bl	80144a0 <__sfmoreglue>
 80145dc:	4604      	mov	r4, r0
 80145de:	6030      	str	r0, [r6, #0]
 80145e0:	2800      	cmp	r0, #0
 80145e2:	d1d5      	bne.n	8014590 <__sfp+0x24>
 80145e4:	f7ff ff78 	bl	80144d8 <__sfp_lock_release>
 80145e8:	230c      	movs	r3, #12
 80145ea:	603b      	str	r3, [r7, #0]
 80145ec:	e7ee      	b.n	80145cc <__sfp+0x60>
 80145ee:	bf00      	nop
 80145f0:	08018240 	.word	0x08018240
 80145f4:	ffff0001 	.word	0xffff0001

080145f8 <fiprintf>:
 80145f8:	b40e      	push	{r1, r2, r3}
 80145fa:	b503      	push	{r0, r1, lr}
 80145fc:	4601      	mov	r1, r0
 80145fe:	ab03      	add	r3, sp, #12
 8014600:	4805      	ldr	r0, [pc, #20]	; (8014618 <fiprintf+0x20>)
 8014602:	f853 2b04 	ldr.w	r2, [r3], #4
 8014606:	6800      	ldr	r0, [r0, #0]
 8014608:	9301      	str	r3, [sp, #4]
 801460a:	f000 fac5 	bl	8014b98 <_vfiprintf_r>
 801460e:	b002      	add	sp, #8
 8014610:	f85d eb04 	ldr.w	lr, [sp], #4
 8014614:	b003      	add	sp, #12
 8014616:	4770      	bx	lr
 8014618:	2000001c 	.word	0x2000001c

0801461c <_fwalk_reent>:
 801461c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014620:	4606      	mov	r6, r0
 8014622:	4688      	mov	r8, r1
 8014624:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014628:	2700      	movs	r7, #0
 801462a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801462e:	f1b9 0901 	subs.w	r9, r9, #1
 8014632:	d505      	bpl.n	8014640 <_fwalk_reent+0x24>
 8014634:	6824      	ldr	r4, [r4, #0]
 8014636:	2c00      	cmp	r4, #0
 8014638:	d1f7      	bne.n	801462a <_fwalk_reent+0xe>
 801463a:	4638      	mov	r0, r7
 801463c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014640:	89ab      	ldrh	r3, [r5, #12]
 8014642:	2b01      	cmp	r3, #1
 8014644:	d907      	bls.n	8014656 <_fwalk_reent+0x3a>
 8014646:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801464a:	3301      	adds	r3, #1
 801464c:	d003      	beq.n	8014656 <_fwalk_reent+0x3a>
 801464e:	4629      	mov	r1, r5
 8014650:	4630      	mov	r0, r6
 8014652:	47c0      	blx	r8
 8014654:	4307      	orrs	r7, r0
 8014656:	3568      	adds	r5, #104	; 0x68
 8014658:	e7e9      	b.n	801462e <_fwalk_reent+0x12>

0801465a <__retarget_lock_init_recursive>:
 801465a:	4770      	bx	lr

0801465c <__retarget_lock_acquire_recursive>:
 801465c:	4770      	bx	lr

0801465e <__retarget_lock_release_recursive>:
 801465e:	4770      	bx	lr

08014660 <__swhatbuf_r>:
 8014660:	b570      	push	{r4, r5, r6, lr}
 8014662:	460e      	mov	r6, r1
 8014664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014668:	2900      	cmp	r1, #0
 801466a:	b096      	sub	sp, #88	; 0x58
 801466c:	4614      	mov	r4, r2
 801466e:	461d      	mov	r5, r3
 8014670:	da07      	bge.n	8014682 <__swhatbuf_r+0x22>
 8014672:	2300      	movs	r3, #0
 8014674:	602b      	str	r3, [r5, #0]
 8014676:	89b3      	ldrh	r3, [r6, #12]
 8014678:	061a      	lsls	r2, r3, #24
 801467a:	d410      	bmi.n	801469e <__swhatbuf_r+0x3e>
 801467c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014680:	e00e      	b.n	80146a0 <__swhatbuf_r+0x40>
 8014682:	466a      	mov	r2, sp
 8014684:	f000 fe8a 	bl	801539c <_fstat_r>
 8014688:	2800      	cmp	r0, #0
 801468a:	dbf2      	blt.n	8014672 <__swhatbuf_r+0x12>
 801468c:	9a01      	ldr	r2, [sp, #4]
 801468e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014696:	425a      	negs	r2, r3
 8014698:	415a      	adcs	r2, r3
 801469a:	602a      	str	r2, [r5, #0]
 801469c:	e7ee      	b.n	801467c <__swhatbuf_r+0x1c>
 801469e:	2340      	movs	r3, #64	; 0x40
 80146a0:	2000      	movs	r0, #0
 80146a2:	6023      	str	r3, [r4, #0]
 80146a4:	b016      	add	sp, #88	; 0x58
 80146a6:	bd70      	pop	{r4, r5, r6, pc}

080146a8 <__smakebuf_r>:
 80146a8:	898b      	ldrh	r3, [r1, #12]
 80146aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80146ac:	079d      	lsls	r5, r3, #30
 80146ae:	4606      	mov	r6, r0
 80146b0:	460c      	mov	r4, r1
 80146b2:	d507      	bpl.n	80146c4 <__smakebuf_r+0x1c>
 80146b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80146b8:	6023      	str	r3, [r4, #0]
 80146ba:	6123      	str	r3, [r4, #16]
 80146bc:	2301      	movs	r3, #1
 80146be:	6163      	str	r3, [r4, #20]
 80146c0:	b002      	add	sp, #8
 80146c2:	bd70      	pop	{r4, r5, r6, pc}
 80146c4:	ab01      	add	r3, sp, #4
 80146c6:	466a      	mov	r2, sp
 80146c8:	f7ff ffca 	bl	8014660 <__swhatbuf_r>
 80146cc:	9900      	ldr	r1, [sp, #0]
 80146ce:	4605      	mov	r5, r0
 80146d0:	4630      	mov	r0, r6
 80146d2:	f000 f881 	bl	80147d8 <_malloc_r>
 80146d6:	b948      	cbnz	r0, 80146ec <__smakebuf_r+0x44>
 80146d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146dc:	059a      	lsls	r2, r3, #22
 80146de:	d4ef      	bmi.n	80146c0 <__smakebuf_r+0x18>
 80146e0:	f023 0303 	bic.w	r3, r3, #3
 80146e4:	f043 0302 	orr.w	r3, r3, #2
 80146e8:	81a3      	strh	r3, [r4, #12]
 80146ea:	e7e3      	b.n	80146b4 <__smakebuf_r+0xc>
 80146ec:	4b0d      	ldr	r3, [pc, #52]	; (8014724 <__smakebuf_r+0x7c>)
 80146ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80146f0:	89a3      	ldrh	r3, [r4, #12]
 80146f2:	6020      	str	r0, [r4, #0]
 80146f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146f8:	81a3      	strh	r3, [r4, #12]
 80146fa:	9b00      	ldr	r3, [sp, #0]
 80146fc:	6163      	str	r3, [r4, #20]
 80146fe:	9b01      	ldr	r3, [sp, #4]
 8014700:	6120      	str	r0, [r4, #16]
 8014702:	b15b      	cbz	r3, 801471c <__smakebuf_r+0x74>
 8014704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014708:	4630      	mov	r0, r6
 801470a:	f000 fe59 	bl	80153c0 <_isatty_r>
 801470e:	b128      	cbz	r0, 801471c <__smakebuf_r+0x74>
 8014710:	89a3      	ldrh	r3, [r4, #12]
 8014712:	f023 0303 	bic.w	r3, r3, #3
 8014716:	f043 0301 	orr.w	r3, r3, #1
 801471a:	81a3      	strh	r3, [r4, #12]
 801471c:	89a0      	ldrh	r0, [r4, #12]
 801471e:	4305      	orrs	r5, r0
 8014720:	81a5      	strh	r5, [r4, #12]
 8014722:	e7cd      	b.n	80146c0 <__smakebuf_r+0x18>
 8014724:	08014495 	.word	0x08014495

08014728 <malloc>:
 8014728:	4b02      	ldr	r3, [pc, #8]	; (8014734 <malloc+0xc>)
 801472a:	4601      	mov	r1, r0
 801472c:	6818      	ldr	r0, [r3, #0]
 801472e:	f000 b853 	b.w	80147d8 <_malloc_r>
 8014732:	bf00      	nop
 8014734:	2000001c 	.word	0x2000001c

08014738 <_free_r>:
 8014738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801473a:	2900      	cmp	r1, #0
 801473c:	d048      	beq.n	80147d0 <_free_r+0x98>
 801473e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014742:	9001      	str	r0, [sp, #4]
 8014744:	2b00      	cmp	r3, #0
 8014746:	f1a1 0404 	sub.w	r4, r1, #4
 801474a:	bfb8      	it	lt
 801474c:	18e4      	addlt	r4, r4, r3
 801474e:	f000 fe59 	bl	8015404 <__malloc_lock>
 8014752:	4a20      	ldr	r2, [pc, #128]	; (80147d4 <_free_r+0x9c>)
 8014754:	9801      	ldr	r0, [sp, #4]
 8014756:	6813      	ldr	r3, [r2, #0]
 8014758:	4615      	mov	r5, r2
 801475a:	b933      	cbnz	r3, 801476a <_free_r+0x32>
 801475c:	6063      	str	r3, [r4, #4]
 801475e:	6014      	str	r4, [r2, #0]
 8014760:	b003      	add	sp, #12
 8014762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014766:	f000 be53 	b.w	8015410 <__malloc_unlock>
 801476a:	42a3      	cmp	r3, r4
 801476c:	d90b      	bls.n	8014786 <_free_r+0x4e>
 801476e:	6821      	ldr	r1, [r4, #0]
 8014770:	1862      	adds	r2, r4, r1
 8014772:	4293      	cmp	r3, r2
 8014774:	bf04      	itt	eq
 8014776:	681a      	ldreq	r2, [r3, #0]
 8014778:	685b      	ldreq	r3, [r3, #4]
 801477a:	6063      	str	r3, [r4, #4]
 801477c:	bf04      	itt	eq
 801477e:	1852      	addeq	r2, r2, r1
 8014780:	6022      	streq	r2, [r4, #0]
 8014782:	602c      	str	r4, [r5, #0]
 8014784:	e7ec      	b.n	8014760 <_free_r+0x28>
 8014786:	461a      	mov	r2, r3
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	b10b      	cbz	r3, 8014790 <_free_r+0x58>
 801478c:	42a3      	cmp	r3, r4
 801478e:	d9fa      	bls.n	8014786 <_free_r+0x4e>
 8014790:	6811      	ldr	r1, [r2, #0]
 8014792:	1855      	adds	r5, r2, r1
 8014794:	42a5      	cmp	r5, r4
 8014796:	d10b      	bne.n	80147b0 <_free_r+0x78>
 8014798:	6824      	ldr	r4, [r4, #0]
 801479a:	4421      	add	r1, r4
 801479c:	1854      	adds	r4, r2, r1
 801479e:	42a3      	cmp	r3, r4
 80147a0:	6011      	str	r1, [r2, #0]
 80147a2:	d1dd      	bne.n	8014760 <_free_r+0x28>
 80147a4:	681c      	ldr	r4, [r3, #0]
 80147a6:	685b      	ldr	r3, [r3, #4]
 80147a8:	6053      	str	r3, [r2, #4]
 80147aa:	4421      	add	r1, r4
 80147ac:	6011      	str	r1, [r2, #0]
 80147ae:	e7d7      	b.n	8014760 <_free_r+0x28>
 80147b0:	d902      	bls.n	80147b8 <_free_r+0x80>
 80147b2:	230c      	movs	r3, #12
 80147b4:	6003      	str	r3, [r0, #0]
 80147b6:	e7d3      	b.n	8014760 <_free_r+0x28>
 80147b8:	6825      	ldr	r5, [r4, #0]
 80147ba:	1961      	adds	r1, r4, r5
 80147bc:	428b      	cmp	r3, r1
 80147be:	bf04      	itt	eq
 80147c0:	6819      	ldreq	r1, [r3, #0]
 80147c2:	685b      	ldreq	r3, [r3, #4]
 80147c4:	6063      	str	r3, [r4, #4]
 80147c6:	bf04      	itt	eq
 80147c8:	1949      	addeq	r1, r1, r5
 80147ca:	6021      	streq	r1, [r4, #0]
 80147cc:	6054      	str	r4, [r2, #4]
 80147ce:	e7c7      	b.n	8014760 <_free_r+0x28>
 80147d0:	b003      	add	sp, #12
 80147d2:	bd30      	pop	{r4, r5, pc}
 80147d4:	20004b50 	.word	0x20004b50

080147d8 <_malloc_r>:
 80147d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147da:	1ccd      	adds	r5, r1, #3
 80147dc:	f025 0503 	bic.w	r5, r5, #3
 80147e0:	3508      	adds	r5, #8
 80147e2:	2d0c      	cmp	r5, #12
 80147e4:	bf38      	it	cc
 80147e6:	250c      	movcc	r5, #12
 80147e8:	2d00      	cmp	r5, #0
 80147ea:	4606      	mov	r6, r0
 80147ec:	db01      	blt.n	80147f2 <_malloc_r+0x1a>
 80147ee:	42a9      	cmp	r1, r5
 80147f0:	d903      	bls.n	80147fa <_malloc_r+0x22>
 80147f2:	230c      	movs	r3, #12
 80147f4:	6033      	str	r3, [r6, #0]
 80147f6:	2000      	movs	r0, #0
 80147f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147fa:	f000 fe03 	bl	8015404 <__malloc_lock>
 80147fe:	4921      	ldr	r1, [pc, #132]	; (8014884 <_malloc_r+0xac>)
 8014800:	680a      	ldr	r2, [r1, #0]
 8014802:	4614      	mov	r4, r2
 8014804:	b99c      	cbnz	r4, 801482e <_malloc_r+0x56>
 8014806:	4f20      	ldr	r7, [pc, #128]	; (8014888 <_malloc_r+0xb0>)
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	b923      	cbnz	r3, 8014816 <_malloc_r+0x3e>
 801480c:	4621      	mov	r1, r4
 801480e:	4630      	mov	r0, r6
 8014810:	f000 fc86 	bl	8015120 <_sbrk_r>
 8014814:	6038      	str	r0, [r7, #0]
 8014816:	4629      	mov	r1, r5
 8014818:	4630      	mov	r0, r6
 801481a:	f000 fc81 	bl	8015120 <_sbrk_r>
 801481e:	1c43      	adds	r3, r0, #1
 8014820:	d123      	bne.n	801486a <_malloc_r+0x92>
 8014822:	230c      	movs	r3, #12
 8014824:	6033      	str	r3, [r6, #0]
 8014826:	4630      	mov	r0, r6
 8014828:	f000 fdf2 	bl	8015410 <__malloc_unlock>
 801482c:	e7e3      	b.n	80147f6 <_malloc_r+0x1e>
 801482e:	6823      	ldr	r3, [r4, #0]
 8014830:	1b5b      	subs	r3, r3, r5
 8014832:	d417      	bmi.n	8014864 <_malloc_r+0x8c>
 8014834:	2b0b      	cmp	r3, #11
 8014836:	d903      	bls.n	8014840 <_malloc_r+0x68>
 8014838:	6023      	str	r3, [r4, #0]
 801483a:	441c      	add	r4, r3
 801483c:	6025      	str	r5, [r4, #0]
 801483e:	e004      	b.n	801484a <_malloc_r+0x72>
 8014840:	6863      	ldr	r3, [r4, #4]
 8014842:	42a2      	cmp	r2, r4
 8014844:	bf0c      	ite	eq
 8014846:	600b      	streq	r3, [r1, #0]
 8014848:	6053      	strne	r3, [r2, #4]
 801484a:	4630      	mov	r0, r6
 801484c:	f000 fde0 	bl	8015410 <__malloc_unlock>
 8014850:	f104 000b 	add.w	r0, r4, #11
 8014854:	1d23      	adds	r3, r4, #4
 8014856:	f020 0007 	bic.w	r0, r0, #7
 801485a:	1ac2      	subs	r2, r0, r3
 801485c:	d0cc      	beq.n	80147f8 <_malloc_r+0x20>
 801485e:	1a1b      	subs	r3, r3, r0
 8014860:	50a3      	str	r3, [r4, r2]
 8014862:	e7c9      	b.n	80147f8 <_malloc_r+0x20>
 8014864:	4622      	mov	r2, r4
 8014866:	6864      	ldr	r4, [r4, #4]
 8014868:	e7cc      	b.n	8014804 <_malloc_r+0x2c>
 801486a:	1cc4      	adds	r4, r0, #3
 801486c:	f024 0403 	bic.w	r4, r4, #3
 8014870:	42a0      	cmp	r0, r4
 8014872:	d0e3      	beq.n	801483c <_malloc_r+0x64>
 8014874:	1a21      	subs	r1, r4, r0
 8014876:	4630      	mov	r0, r6
 8014878:	f000 fc52 	bl	8015120 <_sbrk_r>
 801487c:	3001      	adds	r0, #1
 801487e:	d1dd      	bne.n	801483c <_malloc_r+0x64>
 8014880:	e7cf      	b.n	8014822 <_malloc_r+0x4a>
 8014882:	bf00      	nop
 8014884:	20004b50 	.word	0x20004b50
 8014888:	20004b54 	.word	0x20004b54

0801488c <__ssputs_r>:
 801488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014890:	688e      	ldr	r6, [r1, #8]
 8014892:	429e      	cmp	r6, r3
 8014894:	4682      	mov	sl, r0
 8014896:	460c      	mov	r4, r1
 8014898:	4690      	mov	r8, r2
 801489a:	461f      	mov	r7, r3
 801489c:	d838      	bhi.n	8014910 <__ssputs_r+0x84>
 801489e:	898a      	ldrh	r2, [r1, #12]
 80148a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80148a4:	d032      	beq.n	801490c <__ssputs_r+0x80>
 80148a6:	6825      	ldr	r5, [r4, #0]
 80148a8:	6909      	ldr	r1, [r1, #16]
 80148aa:	eba5 0901 	sub.w	r9, r5, r1
 80148ae:	6965      	ldr	r5, [r4, #20]
 80148b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80148b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80148b8:	3301      	adds	r3, #1
 80148ba:	444b      	add	r3, r9
 80148bc:	106d      	asrs	r5, r5, #1
 80148be:	429d      	cmp	r5, r3
 80148c0:	bf38      	it	cc
 80148c2:	461d      	movcc	r5, r3
 80148c4:	0553      	lsls	r3, r2, #21
 80148c6:	d531      	bpl.n	801492c <__ssputs_r+0xa0>
 80148c8:	4629      	mov	r1, r5
 80148ca:	f7ff ff85 	bl	80147d8 <_malloc_r>
 80148ce:	4606      	mov	r6, r0
 80148d0:	b950      	cbnz	r0, 80148e8 <__ssputs_r+0x5c>
 80148d2:	230c      	movs	r3, #12
 80148d4:	f8ca 3000 	str.w	r3, [sl]
 80148d8:	89a3      	ldrh	r3, [r4, #12]
 80148da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148de:	81a3      	strh	r3, [r4, #12]
 80148e0:	f04f 30ff 	mov.w	r0, #4294967295
 80148e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148e8:	6921      	ldr	r1, [r4, #16]
 80148ea:	464a      	mov	r2, r9
 80148ec:	f7ff fb60 	bl	8013fb0 <memcpy>
 80148f0:	89a3      	ldrh	r3, [r4, #12]
 80148f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80148f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148fa:	81a3      	strh	r3, [r4, #12]
 80148fc:	6126      	str	r6, [r4, #16]
 80148fe:	6165      	str	r5, [r4, #20]
 8014900:	444e      	add	r6, r9
 8014902:	eba5 0509 	sub.w	r5, r5, r9
 8014906:	6026      	str	r6, [r4, #0]
 8014908:	60a5      	str	r5, [r4, #8]
 801490a:	463e      	mov	r6, r7
 801490c:	42be      	cmp	r6, r7
 801490e:	d900      	bls.n	8014912 <__ssputs_r+0x86>
 8014910:	463e      	mov	r6, r7
 8014912:	4632      	mov	r2, r6
 8014914:	6820      	ldr	r0, [r4, #0]
 8014916:	4641      	mov	r1, r8
 8014918:	f7ff fb58 	bl	8013fcc <memmove>
 801491c:	68a3      	ldr	r3, [r4, #8]
 801491e:	6822      	ldr	r2, [r4, #0]
 8014920:	1b9b      	subs	r3, r3, r6
 8014922:	4432      	add	r2, r6
 8014924:	60a3      	str	r3, [r4, #8]
 8014926:	6022      	str	r2, [r4, #0]
 8014928:	2000      	movs	r0, #0
 801492a:	e7db      	b.n	80148e4 <__ssputs_r+0x58>
 801492c:	462a      	mov	r2, r5
 801492e:	f000 fd75 	bl	801541c <_realloc_r>
 8014932:	4606      	mov	r6, r0
 8014934:	2800      	cmp	r0, #0
 8014936:	d1e1      	bne.n	80148fc <__ssputs_r+0x70>
 8014938:	6921      	ldr	r1, [r4, #16]
 801493a:	4650      	mov	r0, sl
 801493c:	f7ff fefc 	bl	8014738 <_free_r>
 8014940:	e7c7      	b.n	80148d2 <__ssputs_r+0x46>
	...

08014944 <_svfiprintf_r>:
 8014944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014948:	4698      	mov	r8, r3
 801494a:	898b      	ldrh	r3, [r1, #12]
 801494c:	061b      	lsls	r3, r3, #24
 801494e:	b09d      	sub	sp, #116	; 0x74
 8014950:	4607      	mov	r7, r0
 8014952:	460d      	mov	r5, r1
 8014954:	4614      	mov	r4, r2
 8014956:	d50e      	bpl.n	8014976 <_svfiprintf_r+0x32>
 8014958:	690b      	ldr	r3, [r1, #16]
 801495a:	b963      	cbnz	r3, 8014976 <_svfiprintf_r+0x32>
 801495c:	2140      	movs	r1, #64	; 0x40
 801495e:	f7ff ff3b 	bl	80147d8 <_malloc_r>
 8014962:	6028      	str	r0, [r5, #0]
 8014964:	6128      	str	r0, [r5, #16]
 8014966:	b920      	cbnz	r0, 8014972 <_svfiprintf_r+0x2e>
 8014968:	230c      	movs	r3, #12
 801496a:	603b      	str	r3, [r7, #0]
 801496c:	f04f 30ff 	mov.w	r0, #4294967295
 8014970:	e0d1      	b.n	8014b16 <_svfiprintf_r+0x1d2>
 8014972:	2340      	movs	r3, #64	; 0x40
 8014974:	616b      	str	r3, [r5, #20]
 8014976:	2300      	movs	r3, #0
 8014978:	9309      	str	r3, [sp, #36]	; 0x24
 801497a:	2320      	movs	r3, #32
 801497c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014980:	f8cd 800c 	str.w	r8, [sp, #12]
 8014984:	2330      	movs	r3, #48	; 0x30
 8014986:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014b30 <_svfiprintf_r+0x1ec>
 801498a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801498e:	f04f 0901 	mov.w	r9, #1
 8014992:	4623      	mov	r3, r4
 8014994:	469a      	mov	sl, r3
 8014996:	f813 2b01 	ldrb.w	r2, [r3], #1
 801499a:	b10a      	cbz	r2, 80149a0 <_svfiprintf_r+0x5c>
 801499c:	2a25      	cmp	r2, #37	; 0x25
 801499e:	d1f9      	bne.n	8014994 <_svfiprintf_r+0x50>
 80149a0:	ebba 0b04 	subs.w	fp, sl, r4
 80149a4:	d00b      	beq.n	80149be <_svfiprintf_r+0x7a>
 80149a6:	465b      	mov	r3, fp
 80149a8:	4622      	mov	r2, r4
 80149aa:	4629      	mov	r1, r5
 80149ac:	4638      	mov	r0, r7
 80149ae:	f7ff ff6d 	bl	801488c <__ssputs_r>
 80149b2:	3001      	adds	r0, #1
 80149b4:	f000 80aa 	beq.w	8014b0c <_svfiprintf_r+0x1c8>
 80149b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80149ba:	445a      	add	r2, fp
 80149bc:	9209      	str	r2, [sp, #36]	; 0x24
 80149be:	f89a 3000 	ldrb.w	r3, [sl]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	f000 80a2 	beq.w	8014b0c <_svfiprintf_r+0x1c8>
 80149c8:	2300      	movs	r3, #0
 80149ca:	f04f 32ff 	mov.w	r2, #4294967295
 80149ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80149d2:	f10a 0a01 	add.w	sl, sl, #1
 80149d6:	9304      	str	r3, [sp, #16]
 80149d8:	9307      	str	r3, [sp, #28]
 80149da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149de:	931a      	str	r3, [sp, #104]	; 0x68
 80149e0:	4654      	mov	r4, sl
 80149e2:	2205      	movs	r2, #5
 80149e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149e8:	4851      	ldr	r0, [pc, #324]	; (8014b30 <_svfiprintf_r+0x1ec>)
 80149ea:	f7eb fc29 	bl	8000240 <memchr>
 80149ee:	9a04      	ldr	r2, [sp, #16]
 80149f0:	b9d8      	cbnz	r0, 8014a2a <_svfiprintf_r+0xe6>
 80149f2:	06d0      	lsls	r0, r2, #27
 80149f4:	bf44      	itt	mi
 80149f6:	2320      	movmi	r3, #32
 80149f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149fc:	0711      	lsls	r1, r2, #28
 80149fe:	bf44      	itt	mi
 8014a00:	232b      	movmi	r3, #43	; 0x2b
 8014a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014a06:	f89a 3000 	ldrb.w	r3, [sl]
 8014a0a:	2b2a      	cmp	r3, #42	; 0x2a
 8014a0c:	d015      	beq.n	8014a3a <_svfiprintf_r+0xf6>
 8014a0e:	9a07      	ldr	r2, [sp, #28]
 8014a10:	4654      	mov	r4, sl
 8014a12:	2000      	movs	r0, #0
 8014a14:	f04f 0c0a 	mov.w	ip, #10
 8014a18:	4621      	mov	r1, r4
 8014a1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a1e:	3b30      	subs	r3, #48	; 0x30
 8014a20:	2b09      	cmp	r3, #9
 8014a22:	d94e      	bls.n	8014ac2 <_svfiprintf_r+0x17e>
 8014a24:	b1b0      	cbz	r0, 8014a54 <_svfiprintf_r+0x110>
 8014a26:	9207      	str	r2, [sp, #28]
 8014a28:	e014      	b.n	8014a54 <_svfiprintf_r+0x110>
 8014a2a:	eba0 0308 	sub.w	r3, r0, r8
 8014a2e:	fa09 f303 	lsl.w	r3, r9, r3
 8014a32:	4313      	orrs	r3, r2
 8014a34:	9304      	str	r3, [sp, #16]
 8014a36:	46a2      	mov	sl, r4
 8014a38:	e7d2      	b.n	80149e0 <_svfiprintf_r+0x9c>
 8014a3a:	9b03      	ldr	r3, [sp, #12]
 8014a3c:	1d19      	adds	r1, r3, #4
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	9103      	str	r1, [sp, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	bfbb      	ittet	lt
 8014a46:	425b      	neglt	r3, r3
 8014a48:	f042 0202 	orrlt.w	r2, r2, #2
 8014a4c:	9307      	strge	r3, [sp, #28]
 8014a4e:	9307      	strlt	r3, [sp, #28]
 8014a50:	bfb8      	it	lt
 8014a52:	9204      	strlt	r2, [sp, #16]
 8014a54:	7823      	ldrb	r3, [r4, #0]
 8014a56:	2b2e      	cmp	r3, #46	; 0x2e
 8014a58:	d10c      	bne.n	8014a74 <_svfiprintf_r+0x130>
 8014a5a:	7863      	ldrb	r3, [r4, #1]
 8014a5c:	2b2a      	cmp	r3, #42	; 0x2a
 8014a5e:	d135      	bne.n	8014acc <_svfiprintf_r+0x188>
 8014a60:	9b03      	ldr	r3, [sp, #12]
 8014a62:	1d1a      	adds	r2, r3, #4
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	9203      	str	r2, [sp, #12]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	bfb8      	it	lt
 8014a6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a70:	3402      	adds	r4, #2
 8014a72:	9305      	str	r3, [sp, #20]
 8014a74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014b40 <_svfiprintf_r+0x1fc>
 8014a78:	7821      	ldrb	r1, [r4, #0]
 8014a7a:	2203      	movs	r2, #3
 8014a7c:	4650      	mov	r0, sl
 8014a7e:	f7eb fbdf 	bl	8000240 <memchr>
 8014a82:	b140      	cbz	r0, 8014a96 <_svfiprintf_r+0x152>
 8014a84:	2340      	movs	r3, #64	; 0x40
 8014a86:	eba0 000a 	sub.w	r0, r0, sl
 8014a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8014a8e:	9b04      	ldr	r3, [sp, #16]
 8014a90:	4303      	orrs	r3, r0
 8014a92:	3401      	adds	r4, #1
 8014a94:	9304      	str	r3, [sp, #16]
 8014a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a9a:	4826      	ldr	r0, [pc, #152]	; (8014b34 <_svfiprintf_r+0x1f0>)
 8014a9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014aa0:	2206      	movs	r2, #6
 8014aa2:	f7eb fbcd 	bl	8000240 <memchr>
 8014aa6:	2800      	cmp	r0, #0
 8014aa8:	d038      	beq.n	8014b1c <_svfiprintf_r+0x1d8>
 8014aaa:	4b23      	ldr	r3, [pc, #140]	; (8014b38 <_svfiprintf_r+0x1f4>)
 8014aac:	bb1b      	cbnz	r3, 8014af6 <_svfiprintf_r+0x1b2>
 8014aae:	9b03      	ldr	r3, [sp, #12]
 8014ab0:	3307      	adds	r3, #7
 8014ab2:	f023 0307 	bic.w	r3, r3, #7
 8014ab6:	3308      	adds	r3, #8
 8014ab8:	9303      	str	r3, [sp, #12]
 8014aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014abc:	4433      	add	r3, r6
 8014abe:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac0:	e767      	b.n	8014992 <_svfiprintf_r+0x4e>
 8014ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ac6:	460c      	mov	r4, r1
 8014ac8:	2001      	movs	r0, #1
 8014aca:	e7a5      	b.n	8014a18 <_svfiprintf_r+0xd4>
 8014acc:	2300      	movs	r3, #0
 8014ace:	3401      	adds	r4, #1
 8014ad0:	9305      	str	r3, [sp, #20]
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	f04f 0c0a 	mov.w	ip, #10
 8014ad8:	4620      	mov	r0, r4
 8014ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ade:	3a30      	subs	r2, #48	; 0x30
 8014ae0:	2a09      	cmp	r2, #9
 8014ae2:	d903      	bls.n	8014aec <_svfiprintf_r+0x1a8>
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d0c5      	beq.n	8014a74 <_svfiprintf_r+0x130>
 8014ae8:	9105      	str	r1, [sp, #20]
 8014aea:	e7c3      	b.n	8014a74 <_svfiprintf_r+0x130>
 8014aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8014af0:	4604      	mov	r4, r0
 8014af2:	2301      	movs	r3, #1
 8014af4:	e7f0      	b.n	8014ad8 <_svfiprintf_r+0x194>
 8014af6:	ab03      	add	r3, sp, #12
 8014af8:	9300      	str	r3, [sp, #0]
 8014afa:	462a      	mov	r2, r5
 8014afc:	4b0f      	ldr	r3, [pc, #60]	; (8014b3c <_svfiprintf_r+0x1f8>)
 8014afe:	a904      	add	r1, sp, #16
 8014b00:	4638      	mov	r0, r7
 8014b02:	f3af 8000 	nop.w
 8014b06:	1c42      	adds	r2, r0, #1
 8014b08:	4606      	mov	r6, r0
 8014b0a:	d1d6      	bne.n	8014aba <_svfiprintf_r+0x176>
 8014b0c:	89ab      	ldrh	r3, [r5, #12]
 8014b0e:	065b      	lsls	r3, r3, #25
 8014b10:	f53f af2c 	bmi.w	801496c <_svfiprintf_r+0x28>
 8014b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b16:	b01d      	add	sp, #116	; 0x74
 8014b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1c:	ab03      	add	r3, sp, #12
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	462a      	mov	r2, r5
 8014b22:	4b06      	ldr	r3, [pc, #24]	; (8014b3c <_svfiprintf_r+0x1f8>)
 8014b24:	a904      	add	r1, sp, #16
 8014b26:	4638      	mov	r0, r7
 8014b28:	f000 f9d4 	bl	8014ed4 <_printf_i>
 8014b2c:	e7eb      	b.n	8014b06 <_svfiprintf_r+0x1c2>
 8014b2e:	bf00      	nop
 8014b30:	08018358 	.word	0x08018358
 8014b34:	08018362 	.word	0x08018362
 8014b38:	00000000 	.word	0x00000000
 8014b3c:	0801488d 	.word	0x0801488d
 8014b40:	0801835e 	.word	0x0801835e

08014b44 <__sfputc_r>:
 8014b44:	6893      	ldr	r3, [r2, #8]
 8014b46:	3b01      	subs	r3, #1
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	b410      	push	{r4}
 8014b4c:	6093      	str	r3, [r2, #8]
 8014b4e:	da08      	bge.n	8014b62 <__sfputc_r+0x1e>
 8014b50:	6994      	ldr	r4, [r2, #24]
 8014b52:	42a3      	cmp	r3, r4
 8014b54:	db01      	blt.n	8014b5a <__sfputc_r+0x16>
 8014b56:	290a      	cmp	r1, #10
 8014b58:	d103      	bne.n	8014b62 <__sfputc_r+0x1e>
 8014b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b5e:	f000 bb33 	b.w	80151c8 <__swbuf_r>
 8014b62:	6813      	ldr	r3, [r2, #0]
 8014b64:	1c58      	adds	r0, r3, #1
 8014b66:	6010      	str	r0, [r2, #0]
 8014b68:	7019      	strb	r1, [r3, #0]
 8014b6a:	4608      	mov	r0, r1
 8014b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b70:	4770      	bx	lr

08014b72 <__sfputs_r>:
 8014b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b74:	4606      	mov	r6, r0
 8014b76:	460f      	mov	r7, r1
 8014b78:	4614      	mov	r4, r2
 8014b7a:	18d5      	adds	r5, r2, r3
 8014b7c:	42ac      	cmp	r4, r5
 8014b7e:	d101      	bne.n	8014b84 <__sfputs_r+0x12>
 8014b80:	2000      	movs	r0, #0
 8014b82:	e007      	b.n	8014b94 <__sfputs_r+0x22>
 8014b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b88:	463a      	mov	r2, r7
 8014b8a:	4630      	mov	r0, r6
 8014b8c:	f7ff ffda 	bl	8014b44 <__sfputc_r>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d1f3      	bne.n	8014b7c <__sfputs_r+0xa>
 8014b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b98 <_vfiprintf_r>:
 8014b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	b09d      	sub	sp, #116	; 0x74
 8014ba0:	4614      	mov	r4, r2
 8014ba2:	4698      	mov	r8, r3
 8014ba4:	4606      	mov	r6, r0
 8014ba6:	b118      	cbz	r0, 8014bb0 <_vfiprintf_r+0x18>
 8014ba8:	6983      	ldr	r3, [r0, #24]
 8014baa:	b90b      	cbnz	r3, 8014bb0 <_vfiprintf_r+0x18>
 8014bac:	f7ff fca6 	bl	80144fc <__sinit>
 8014bb0:	4b89      	ldr	r3, [pc, #548]	; (8014dd8 <_vfiprintf_r+0x240>)
 8014bb2:	429d      	cmp	r5, r3
 8014bb4:	d11b      	bne.n	8014bee <_vfiprintf_r+0x56>
 8014bb6:	6875      	ldr	r5, [r6, #4]
 8014bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bba:	07d9      	lsls	r1, r3, #31
 8014bbc:	d405      	bmi.n	8014bca <_vfiprintf_r+0x32>
 8014bbe:	89ab      	ldrh	r3, [r5, #12]
 8014bc0:	059a      	lsls	r2, r3, #22
 8014bc2:	d402      	bmi.n	8014bca <_vfiprintf_r+0x32>
 8014bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bc6:	f7ff fd49 	bl	801465c <__retarget_lock_acquire_recursive>
 8014bca:	89ab      	ldrh	r3, [r5, #12]
 8014bcc:	071b      	lsls	r3, r3, #28
 8014bce:	d501      	bpl.n	8014bd4 <_vfiprintf_r+0x3c>
 8014bd0:	692b      	ldr	r3, [r5, #16]
 8014bd2:	b9eb      	cbnz	r3, 8014c10 <_vfiprintf_r+0x78>
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	f000 fb5a 	bl	8015290 <__swsetup_r>
 8014bdc:	b1c0      	cbz	r0, 8014c10 <_vfiprintf_r+0x78>
 8014bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014be0:	07dc      	lsls	r4, r3, #31
 8014be2:	d50e      	bpl.n	8014c02 <_vfiprintf_r+0x6a>
 8014be4:	f04f 30ff 	mov.w	r0, #4294967295
 8014be8:	b01d      	add	sp, #116	; 0x74
 8014bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bee:	4b7b      	ldr	r3, [pc, #492]	; (8014ddc <_vfiprintf_r+0x244>)
 8014bf0:	429d      	cmp	r5, r3
 8014bf2:	d101      	bne.n	8014bf8 <_vfiprintf_r+0x60>
 8014bf4:	68b5      	ldr	r5, [r6, #8]
 8014bf6:	e7df      	b.n	8014bb8 <_vfiprintf_r+0x20>
 8014bf8:	4b79      	ldr	r3, [pc, #484]	; (8014de0 <_vfiprintf_r+0x248>)
 8014bfa:	429d      	cmp	r5, r3
 8014bfc:	bf08      	it	eq
 8014bfe:	68f5      	ldreq	r5, [r6, #12]
 8014c00:	e7da      	b.n	8014bb8 <_vfiprintf_r+0x20>
 8014c02:	89ab      	ldrh	r3, [r5, #12]
 8014c04:	0598      	lsls	r0, r3, #22
 8014c06:	d4ed      	bmi.n	8014be4 <_vfiprintf_r+0x4c>
 8014c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c0a:	f7ff fd28 	bl	801465e <__retarget_lock_release_recursive>
 8014c0e:	e7e9      	b.n	8014be4 <_vfiprintf_r+0x4c>
 8014c10:	2300      	movs	r3, #0
 8014c12:	9309      	str	r3, [sp, #36]	; 0x24
 8014c14:	2320      	movs	r3, #32
 8014c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c1e:	2330      	movs	r3, #48	; 0x30
 8014c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014de4 <_vfiprintf_r+0x24c>
 8014c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c28:	f04f 0901 	mov.w	r9, #1
 8014c2c:	4623      	mov	r3, r4
 8014c2e:	469a      	mov	sl, r3
 8014c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c34:	b10a      	cbz	r2, 8014c3a <_vfiprintf_r+0xa2>
 8014c36:	2a25      	cmp	r2, #37	; 0x25
 8014c38:	d1f9      	bne.n	8014c2e <_vfiprintf_r+0x96>
 8014c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8014c3e:	d00b      	beq.n	8014c58 <_vfiprintf_r+0xc0>
 8014c40:	465b      	mov	r3, fp
 8014c42:	4622      	mov	r2, r4
 8014c44:	4629      	mov	r1, r5
 8014c46:	4630      	mov	r0, r6
 8014c48:	f7ff ff93 	bl	8014b72 <__sfputs_r>
 8014c4c:	3001      	adds	r0, #1
 8014c4e:	f000 80aa 	beq.w	8014da6 <_vfiprintf_r+0x20e>
 8014c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c54:	445a      	add	r2, fp
 8014c56:	9209      	str	r2, [sp, #36]	; 0x24
 8014c58:	f89a 3000 	ldrb.w	r3, [sl]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 80a2 	beq.w	8014da6 <_vfiprintf_r+0x20e>
 8014c62:	2300      	movs	r3, #0
 8014c64:	f04f 32ff 	mov.w	r2, #4294967295
 8014c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c6c:	f10a 0a01 	add.w	sl, sl, #1
 8014c70:	9304      	str	r3, [sp, #16]
 8014c72:	9307      	str	r3, [sp, #28]
 8014c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c78:	931a      	str	r3, [sp, #104]	; 0x68
 8014c7a:	4654      	mov	r4, sl
 8014c7c:	2205      	movs	r2, #5
 8014c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c82:	4858      	ldr	r0, [pc, #352]	; (8014de4 <_vfiprintf_r+0x24c>)
 8014c84:	f7eb fadc 	bl	8000240 <memchr>
 8014c88:	9a04      	ldr	r2, [sp, #16]
 8014c8a:	b9d8      	cbnz	r0, 8014cc4 <_vfiprintf_r+0x12c>
 8014c8c:	06d1      	lsls	r1, r2, #27
 8014c8e:	bf44      	itt	mi
 8014c90:	2320      	movmi	r3, #32
 8014c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c96:	0713      	lsls	r3, r2, #28
 8014c98:	bf44      	itt	mi
 8014c9a:	232b      	movmi	r3, #43	; 0x2b
 8014c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ca6:	d015      	beq.n	8014cd4 <_vfiprintf_r+0x13c>
 8014ca8:	9a07      	ldr	r2, [sp, #28]
 8014caa:	4654      	mov	r4, sl
 8014cac:	2000      	movs	r0, #0
 8014cae:	f04f 0c0a 	mov.w	ip, #10
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cb8:	3b30      	subs	r3, #48	; 0x30
 8014cba:	2b09      	cmp	r3, #9
 8014cbc:	d94e      	bls.n	8014d5c <_vfiprintf_r+0x1c4>
 8014cbe:	b1b0      	cbz	r0, 8014cee <_vfiprintf_r+0x156>
 8014cc0:	9207      	str	r2, [sp, #28]
 8014cc2:	e014      	b.n	8014cee <_vfiprintf_r+0x156>
 8014cc4:	eba0 0308 	sub.w	r3, r0, r8
 8014cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	9304      	str	r3, [sp, #16]
 8014cd0:	46a2      	mov	sl, r4
 8014cd2:	e7d2      	b.n	8014c7a <_vfiprintf_r+0xe2>
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	1d19      	adds	r1, r3, #4
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	9103      	str	r1, [sp, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	bfbb      	ittet	lt
 8014ce0:	425b      	neglt	r3, r3
 8014ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ce6:	9307      	strge	r3, [sp, #28]
 8014ce8:	9307      	strlt	r3, [sp, #28]
 8014cea:	bfb8      	it	lt
 8014cec:	9204      	strlt	r2, [sp, #16]
 8014cee:	7823      	ldrb	r3, [r4, #0]
 8014cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8014cf2:	d10c      	bne.n	8014d0e <_vfiprintf_r+0x176>
 8014cf4:	7863      	ldrb	r3, [r4, #1]
 8014cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8014cf8:	d135      	bne.n	8014d66 <_vfiprintf_r+0x1ce>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	1d1a      	adds	r2, r3, #4
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	9203      	str	r2, [sp, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	bfb8      	it	lt
 8014d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d0a:	3402      	adds	r4, #2
 8014d0c:	9305      	str	r3, [sp, #20]
 8014d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014df4 <_vfiprintf_r+0x25c>
 8014d12:	7821      	ldrb	r1, [r4, #0]
 8014d14:	2203      	movs	r2, #3
 8014d16:	4650      	mov	r0, sl
 8014d18:	f7eb fa92 	bl	8000240 <memchr>
 8014d1c:	b140      	cbz	r0, 8014d30 <_vfiprintf_r+0x198>
 8014d1e:	2340      	movs	r3, #64	; 0x40
 8014d20:	eba0 000a 	sub.w	r0, r0, sl
 8014d24:	fa03 f000 	lsl.w	r0, r3, r0
 8014d28:	9b04      	ldr	r3, [sp, #16]
 8014d2a:	4303      	orrs	r3, r0
 8014d2c:	3401      	adds	r4, #1
 8014d2e:	9304      	str	r3, [sp, #16]
 8014d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d34:	482c      	ldr	r0, [pc, #176]	; (8014de8 <_vfiprintf_r+0x250>)
 8014d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d3a:	2206      	movs	r2, #6
 8014d3c:	f7eb fa80 	bl	8000240 <memchr>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d03f      	beq.n	8014dc4 <_vfiprintf_r+0x22c>
 8014d44:	4b29      	ldr	r3, [pc, #164]	; (8014dec <_vfiprintf_r+0x254>)
 8014d46:	bb1b      	cbnz	r3, 8014d90 <_vfiprintf_r+0x1f8>
 8014d48:	9b03      	ldr	r3, [sp, #12]
 8014d4a:	3307      	adds	r3, #7
 8014d4c:	f023 0307 	bic.w	r3, r3, #7
 8014d50:	3308      	adds	r3, #8
 8014d52:	9303      	str	r3, [sp, #12]
 8014d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d56:	443b      	add	r3, r7
 8014d58:	9309      	str	r3, [sp, #36]	; 0x24
 8014d5a:	e767      	b.n	8014c2c <_vfiprintf_r+0x94>
 8014d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d60:	460c      	mov	r4, r1
 8014d62:	2001      	movs	r0, #1
 8014d64:	e7a5      	b.n	8014cb2 <_vfiprintf_r+0x11a>
 8014d66:	2300      	movs	r3, #0
 8014d68:	3401      	adds	r4, #1
 8014d6a:	9305      	str	r3, [sp, #20]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	f04f 0c0a 	mov.w	ip, #10
 8014d72:	4620      	mov	r0, r4
 8014d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d78:	3a30      	subs	r2, #48	; 0x30
 8014d7a:	2a09      	cmp	r2, #9
 8014d7c:	d903      	bls.n	8014d86 <_vfiprintf_r+0x1ee>
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d0c5      	beq.n	8014d0e <_vfiprintf_r+0x176>
 8014d82:	9105      	str	r1, [sp, #20]
 8014d84:	e7c3      	b.n	8014d0e <_vfiprintf_r+0x176>
 8014d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	2301      	movs	r3, #1
 8014d8e:	e7f0      	b.n	8014d72 <_vfiprintf_r+0x1da>
 8014d90:	ab03      	add	r3, sp, #12
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	462a      	mov	r2, r5
 8014d96:	4b16      	ldr	r3, [pc, #88]	; (8014df0 <_vfiprintf_r+0x258>)
 8014d98:	a904      	add	r1, sp, #16
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	f3af 8000 	nop.w
 8014da0:	4607      	mov	r7, r0
 8014da2:	1c78      	adds	r0, r7, #1
 8014da4:	d1d6      	bne.n	8014d54 <_vfiprintf_r+0x1bc>
 8014da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014da8:	07d9      	lsls	r1, r3, #31
 8014daa:	d405      	bmi.n	8014db8 <_vfiprintf_r+0x220>
 8014dac:	89ab      	ldrh	r3, [r5, #12]
 8014dae:	059a      	lsls	r2, r3, #22
 8014db0:	d402      	bmi.n	8014db8 <_vfiprintf_r+0x220>
 8014db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014db4:	f7ff fc53 	bl	801465e <__retarget_lock_release_recursive>
 8014db8:	89ab      	ldrh	r3, [r5, #12]
 8014dba:	065b      	lsls	r3, r3, #25
 8014dbc:	f53f af12 	bmi.w	8014be4 <_vfiprintf_r+0x4c>
 8014dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dc2:	e711      	b.n	8014be8 <_vfiprintf_r+0x50>
 8014dc4:	ab03      	add	r3, sp, #12
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	462a      	mov	r2, r5
 8014dca:	4b09      	ldr	r3, [pc, #36]	; (8014df0 <_vfiprintf_r+0x258>)
 8014dcc:	a904      	add	r1, sp, #16
 8014dce:	4630      	mov	r0, r6
 8014dd0:	f000 f880 	bl	8014ed4 <_printf_i>
 8014dd4:	e7e4      	b.n	8014da0 <_vfiprintf_r+0x208>
 8014dd6:	bf00      	nop
 8014dd8:	08018318 	.word	0x08018318
 8014ddc:	08018338 	.word	0x08018338
 8014de0:	080182f8 	.word	0x080182f8
 8014de4:	08018358 	.word	0x08018358
 8014de8:	08018362 	.word	0x08018362
 8014dec:	00000000 	.word	0x00000000
 8014df0:	08014b73 	.word	0x08014b73
 8014df4:	0801835e 	.word	0x0801835e

08014df8 <_printf_common>:
 8014df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dfc:	4616      	mov	r6, r2
 8014dfe:	4699      	mov	r9, r3
 8014e00:	688a      	ldr	r2, [r1, #8]
 8014e02:	690b      	ldr	r3, [r1, #16]
 8014e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	bfb8      	it	lt
 8014e0c:	4613      	movlt	r3, r2
 8014e0e:	6033      	str	r3, [r6, #0]
 8014e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e14:	4607      	mov	r7, r0
 8014e16:	460c      	mov	r4, r1
 8014e18:	b10a      	cbz	r2, 8014e1e <_printf_common+0x26>
 8014e1a:	3301      	adds	r3, #1
 8014e1c:	6033      	str	r3, [r6, #0]
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	0699      	lsls	r1, r3, #26
 8014e22:	bf42      	ittt	mi
 8014e24:	6833      	ldrmi	r3, [r6, #0]
 8014e26:	3302      	addmi	r3, #2
 8014e28:	6033      	strmi	r3, [r6, #0]
 8014e2a:	6825      	ldr	r5, [r4, #0]
 8014e2c:	f015 0506 	ands.w	r5, r5, #6
 8014e30:	d106      	bne.n	8014e40 <_printf_common+0x48>
 8014e32:	f104 0a19 	add.w	sl, r4, #25
 8014e36:	68e3      	ldr	r3, [r4, #12]
 8014e38:	6832      	ldr	r2, [r6, #0]
 8014e3a:	1a9b      	subs	r3, r3, r2
 8014e3c:	42ab      	cmp	r3, r5
 8014e3e:	dc26      	bgt.n	8014e8e <_printf_common+0x96>
 8014e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014e44:	1e13      	subs	r3, r2, #0
 8014e46:	6822      	ldr	r2, [r4, #0]
 8014e48:	bf18      	it	ne
 8014e4a:	2301      	movne	r3, #1
 8014e4c:	0692      	lsls	r2, r2, #26
 8014e4e:	d42b      	bmi.n	8014ea8 <_printf_common+0xb0>
 8014e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014e54:	4649      	mov	r1, r9
 8014e56:	4638      	mov	r0, r7
 8014e58:	47c0      	blx	r8
 8014e5a:	3001      	adds	r0, #1
 8014e5c:	d01e      	beq.n	8014e9c <_printf_common+0xa4>
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	68e5      	ldr	r5, [r4, #12]
 8014e62:	6832      	ldr	r2, [r6, #0]
 8014e64:	f003 0306 	and.w	r3, r3, #6
 8014e68:	2b04      	cmp	r3, #4
 8014e6a:	bf08      	it	eq
 8014e6c:	1aad      	subeq	r5, r5, r2
 8014e6e:	68a3      	ldr	r3, [r4, #8]
 8014e70:	6922      	ldr	r2, [r4, #16]
 8014e72:	bf0c      	ite	eq
 8014e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e78:	2500      	movne	r5, #0
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	bfc4      	itt	gt
 8014e7e:	1a9b      	subgt	r3, r3, r2
 8014e80:	18ed      	addgt	r5, r5, r3
 8014e82:	2600      	movs	r6, #0
 8014e84:	341a      	adds	r4, #26
 8014e86:	42b5      	cmp	r5, r6
 8014e88:	d11a      	bne.n	8014ec0 <_printf_common+0xc8>
 8014e8a:	2000      	movs	r0, #0
 8014e8c:	e008      	b.n	8014ea0 <_printf_common+0xa8>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	4652      	mov	r2, sl
 8014e92:	4649      	mov	r1, r9
 8014e94:	4638      	mov	r0, r7
 8014e96:	47c0      	blx	r8
 8014e98:	3001      	adds	r0, #1
 8014e9a:	d103      	bne.n	8014ea4 <_printf_common+0xac>
 8014e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ea4:	3501      	adds	r5, #1
 8014ea6:	e7c6      	b.n	8014e36 <_printf_common+0x3e>
 8014ea8:	18e1      	adds	r1, r4, r3
 8014eaa:	1c5a      	adds	r2, r3, #1
 8014eac:	2030      	movs	r0, #48	; 0x30
 8014eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014eb2:	4422      	add	r2, r4
 8014eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ebc:	3302      	adds	r3, #2
 8014ebe:	e7c7      	b.n	8014e50 <_printf_common+0x58>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	4622      	mov	r2, r4
 8014ec4:	4649      	mov	r1, r9
 8014ec6:	4638      	mov	r0, r7
 8014ec8:	47c0      	blx	r8
 8014eca:	3001      	adds	r0, #1
 8014ecc:	d0e6      	beq.n	8014e9c <_printf_common+0xa4>
 8014ece:	3601      	adds	r6, #1
 8014ed0:	e7d9      	b.n	8014e86 <_printf_common+0x8e>
	...

08014ed4 <_printf_i>:
 8014ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014ed8:	460c      	mov	r4, r1
 8014eda:	4691      	mov	r9, r2
 8014edc:	7e27      	ldrb	r7, [r4, #24]
 8014ede:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014ee0:	2f78      	cmp	r7, #120	; 0x78
 8014ee2:	4680      	mov	r8, r0
 8014ee4:	469a      	mov	sl, r3
 8014ee6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014eea:	d807      	bhi.n	8014efc <_printf_i+0x28>
 8014eec:	2f62      	cmp	r7, #98	; 0x62
 8014eee:	d80a      	bhi.n	8014f06 <_printf_i+0x32>
 8014ef0:	2f00      	cmp	r7, #0
 8014ef2:	f000 80d8 	beq.w	80150a6 <_printf_i+0x1d2>
 8014ef6:	2f58      	cmp	r7, #88	; 0x58
 8014ef8:	f000 80a3 	beq.w	8015042 <_printf_i+0x16e>
 8014efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f04:	e03a      	b.n	8014f7c <_printf_i+0xa8>
 8014f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f0a:	2b15      	cmp	r3, #21
 8014f0c:	d8f6      	bhi.n	8014efc <_printf_i+0x28>
 8014f0e:	a001      	add	r0, pc, #4	; (adr r0, 8014f14 <_printf_i+0x40>)
 8014f10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014f14:	08014f6d 	.word	0x08014f6d
 8014f18:	08014f81 	.word	0x08014f81
 8014f1c:	08014efd 	.word	0x08014efd
 8014f20:	08014efd 	.word	0x08014efd
 8014f24:	08014efd 	.word	0x08014efd
 8014f28:	08014efd 	.word	0x08014efd
 8014f2c:	08014f81 	.word	0x08014f81
 8014f30:	08014efd 	.word	0x08014efd
 8014f34:	08014efd 	.word	0x08014efd
 8014f38:	08014efd 	.word	0x08014efd
 8014f3c:	08014efd 	.word	0x08014efd
 8014f40:	0801508d 	.word	0x0801508d
 8014f44:	08014fb1 	.word	0x08014fb1
 8014f48:	0801506f 	.word	0x0801506f
 8014f4c:	08014efd 	.word	0x08014efd
 8014f50:	08014efd 	.word	0x08014efd
 8014f54:	080150af 	.word	0x080150af
 8014f58:	08014efd 	.word	0x08014efd
 8014f5c:	08014fb1 	.word	0x08014fb1
 8014f60:	08014efd 	.word	0x08014efd
 8014f64:	08014efd 	.word	0x08014efd
 8014f68:	08015077 	.word	0x08015077
 8014f6c:	680b      	ldr	r3, [r1, #0]
 8014f6e:	1d1a      	adds	r2, r3, #4
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	600a      	str	r2, [r1, #0]
 8014f74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e0a3      	b.n	80150c8 <_printf_i+0x1f4>
 8014f80:	6825      	ldr	r5, [r4, #0]
 8014f82:	6808      	ldr	r0, [r1, #0]
 8014f84:	062e      	lsls	r6, r5, #24
 8014f86:	f100 0304 	add.w	r3, r0, #4
 8014f8a:	d50a      	bpl.n	8014fa2 <_printf_i+0xce>
 8014f8c:	6805      	ldr	r5, [r0, #0]
 8014f8e:	600b      	str	r3, [r1, #0]
 8014f90:	2d00      	cmp	r5, #0
 8014f92:	da03      	bge.n	8014f9c <_printf_i+0xc8>
 8014f94:	232d      	movs	r3, #45	; 0x2d
 8014f96:	426d      	negs	r5, r5
 8014f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f9c:	485e      	ldr	r0, [pc, #376]	; (8015118 <_printf_i+0x244>)
 8014f9e:	230a      	movs	r3, #10
 8014fa0:	e019      	b.n	8014fd6 <_printf_i+0x102>
 8014fa2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014fa6:	6805      	ldr	r5, [r0, #0]
 8014fa8:	600b      	str	r3, [r1, #0]
 8014faa:	bf18      	it	ne
 8014fac:	b22d      	sxthne	r5, r5
 8014fae:	e7ef      	b.n	8014f90 <_printf_i+0xbc>
 8014fb0:	680b      	ldr	r3, [r1, #0]
 8014fb2:	6825      	ldr	r5, [r4, #0]
 8014fb4:	1d18      	adds	r0, r3, #4
 8014fb6:	6008      	str	r0, [r1, #0]
 8014fb8:	0628      	lsls	r0, r5, #24
 8014fba:	d501      	bpl.n	8014fc0 <_printf_i+0xec>
 8014fbc:	681d      	ldr	r5, [r3, #0]
 8014fbe:	e002      	b.n	8014fc6 <_printf_i+0xf2>
 8014fc0:	0669      	lsls	r1, r5, #25
 8014fc2:	d5fb      	bpl.n	8014fbc <_printf_i+0xe8>
 8014fc4:	881d      	ldrh	r5, [r3, #0]
 8014fc6:	4854      	ldr	r0, [pc, #336]	; (8015118 <_printf_i+0x244>)
 8014fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8014fca:	bf0c      	ite	eq
 8014fcc:	2308      	moveq	r3, #8
 8014fce:	230a      	movne	r3, #10
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014fd6:	6866      	ldr	r6, [r4, #4]
 8014fd8:	60a6      	str	r6, [r4, #8]
 8014fda:	2e00      	cmp	r6, #0
 8014fdc:	bfa2      	ittt	ge
 8014fde:	6821      	ldrge	r1, [r4, #0]
 8014fe0:	f021 0104 	bicge.w	r1, r1, #4
 8014fe4:	6021      	strge	r1, [r4, #0]
 8014fe6:	b90d      	cbnz	r5, 8014fec <_printf_i+0x118>
 8014fe8:	2e00      	cmp	r6, #0
 8014fea:	d04d      	beq.n	8015088 <_printf_i+0x1b4>
 8014fec:	4616      	mov	r6, r2
 8014fee:	fbb5 f1f3 	udiv	r1, r5, r3
 8014ff2:	fb03 5711 	mls	r7, r3, r1, r5
 8014ff6:	5dc7      	ldrb	r7, [r0, r7]
 8014ff8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014ffc:	462f      	mov	r7, r5
 8014ffe:	42bb      	cmp	r3, r7
 8015000:	460d      	mov	r5, r1
 8015002:	d9f4      	bls.n	8014fee <_printf_i+0x11a>
 8015004:	2b08      	cmp	r3, #8
 8015006:	d10b      	bne.n	8015020 <_printf_i+0x14c>
 8015008:	6823      	ldr	r3, [r4, #0]
 801500a:	07df      	lsls	r7, r3, #31
 801500c:	d508      	bpl.n	8015020 <_printf_i+0x14c>
 801500e:	6923      	ldr	r3, [r4, #16]
 8015010:	6861      	ldr	r1, [r4, #4]
 8015012:	4299      	cmp	r1, r3
 8015014:	bfde      	ittt	le
 8015016:	2330      	movle	r3, #48	; 0x30
 8015018:	f806 3c01 	strble.w	r3, [r6, #-1]
 801501c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015020:	1b92      	subs	r2, r2, r6
 8015022:	6122      	str	r2, [r4, #16]
 8015024:	f8cd a000 	str.w	sl, [sp]
 8015028:	464b      	mov	r3, r9
 801502a:	aa03      	add	r2, sp, #12
 801502c:	4621      	mov	r1, r4
 801502e:	4640      	mov	r0, r8
 8015030:	f7ff fee2 	bl	8014df8 <_printf_common>
 8015034:	3001      	adds	r0, #1
 8015036:	d14c      	bne.n	80150d2 <_printf_i+0x1fe>
 8015038:	f04f 30ff 	mov.w	r0, #4294967295
 801503c:	b004      	add	sp, #16
 801503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015042:	4835      	ldr	r0, [pc, #212]	; (8015118 <_printf_i+0x244>)
 8015044:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015048:	6823      	ldr	r3, [r4, #0]
 801504a:	680e      	ldr	r6, [r1, #0]
 801504c:	061f      	lsls	r7, r3, #24
 801504e:	f856 5b04 	ldr.w	r5, [r6], #4
 8015052:	600e      	str	r6, [r1, #0]
 8015054:	d514      	bpl.n	8015080 <_printf_i+0x1ac>
 8015056:	07d9      	lsls	r1, r3, #31
 8015058:	bf44      	itt	mi
 801505a:	f043 0320 	orrmi.w	r3, r3, #32
 801505e:	6023      	strmi	r3, [r4, #0]
 8015060:	b91d      	cbnz	r5, 801506a <_printf_i+0x196>
 8015062:	6823      	ldr	r3, [r4, #0]
 8015064:	f023 0320 	bic.w	r3, r3, #32
 8015068:	6023      	str	r3, [r4, #0]
 801506a:	2310      	movs	r3, #16
 801506c:	e7b0      	b.n	8014fd0 <_printf_i+0xfc>
 801506e:	6823      	ldr	r3, [r4, #0]
 8015070:	f043 0320 	orr.w	r3, r3, #32
 8015074:	6023      	str	r3, [r4, #0]
 8015076:	2378      	movs	r3, #120	; 0x78
 8015078:	4828      	ldr	r0, [pc, #160]	; (801511c <_printf_i+0x248>)
 801507a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801507e:	e7e3      	b.n	8015048 <_printf_i+0x174>
 8015080:	065e      	lsls	r6, r3, #25
 8015082:	bf48      	it	mi
 8015084:	b2ad      	uxthmi	r5, r5
 8015086:	e7e6      	b.n	8015056 <_printf_i+0x182>
 8015088:	4616      	mov	r6, r2
 801508a:	e7bb      	b.n	8015004 <_printf_i+0x130>
 801508c:	680b      	ldr	r3, [r1, #0]
 801508e:	6826      	ldr	r6, [r4, #0]
 8015090:	6960      	ldr	r0, [r4, #20]
 8015092:	1d1d      	adds	r5, r3, #4
 8015094:	600d      	str	r5, [r1, #0]
 8015096:	0635      	lsls	r5, r6, #24
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	d501      	bpl.n	80150a0 <_printf_i+0x1cc>
 801509c:	6018      	str	r0, [r3, #0]
 801509e:	e002      	b.n	80150a6 <_printf_i+0x1d2>
 80150a0:	0671      	lsls	r1, r6, #25
 80150a2:	d5fb      	bpl.n	801509c <_printf_i+0x1c8>
 80150a4:	8018      	strh	r0, [r3, #0]
 80150a6:	2300      	movs	r3, #0
 80150a8:	6123      	str	r3, [r4, #16]
 80150aa:	4616      	mov	r6, r2
 80150ac:	e7ba      	b.n	8015024 <_printf_i+0x150>
 80150ae:	680b      	ldr	r3, [r1, #0]
 80150b0:	1d1a      	adds	r2, r3, #4
 80150b2:	600a      	str	r2, [r1, #0]
 80150b4:	681e      	ldr	r6, [r3, #0]
 80150b6:	6862      	ldr	r2, [r4, #4]
 80150b8:	2100      	movs	r1, #0
 80150ba:	4630      	mov	r0, r6
 80150bc:	f7eb f8c0 	bl	8000240 <memchr>
 80150c0:	b108      	cbz	r0, 80150c6 <_printf_i+0x1f2>
 80150c2:	1b80      	subs	r0, r0, r6
 80150c4:	6060      	str	r0, [r4, #4]
 80150c6:	6863      	ldr	r3, [r4, #4]
 80150c8:	6123      	str	r3, [r4, #16]
 80150ca:	2300      	movs	r3, #0
 80150cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150d0:	e7a8      	b.n	8015024 <_printf_i+0x150>
 80150d2:	6923      	ldr	r3, [r4, #16]
 80150d4:	4632      	mov	r2, r6
 80150d6:	4649      	mov	r1, r9
 80150d8:	4640      	mov	r0, r8
 80150da:	47d0      	blx	sl
 80150dc:	3001      	adds	r0, #1
 80150de:	d0ab      	beq.n	8015038 <_printf_i+0x164>
 80150e0:	6823      	ldr	r3, [r4, #0]
 80150e2:	079b      	lsls	r3, r3, #30
 80150e4:	d413      	bmi.n	801510e <_printf_i+0x23a>
 80150e6:	68e0      	ldr	r0, [r4, #12]
 80150e8:	9b03      	ldr	r3, [sp, #12]
 80150ea:	4298      	cmp	r0, r3
 80150ec:	bfb8      	it	lt
 80150ee:	4618      	movlt	r0, r3
 80150f0:	e7a4      	b.n	801503c <_printf_i+0x168>
 80150f2:	2301      	movs	r3, #1
 80150f4:	4632      	mov	r2, r6
 80150f6:	4649      	mov	r1, r9
 80150f8:	4640      	mov	r0, r8
 80150fa:	47d0      	blx	sl
 80150fc:	3001      	adds	r0, #1
 80150fe:	d09b      	beq.n	8015038 <_printf_i+0x164>
 8015100:	3501      	adds	r5, #1
 8015102:	68e3      	ldr	r3, [r4, #12]
 8015104:	9903      	ldr	r1, [sp, #12]
 8015106:	1a5b      	subs	r3, r3, r1
 8015108:	42ab      	cmp	r3, r5
 801510a:	dcf2      	bgt.n	80150f2 <_printf_i+0x21e>
 801510c:	e7eb      	b.n	80150e6 <_printf_i+0x212>
 801510e:	2500      	movs	r5, #0
 8015110:	f104 0619 	add.w	r6, r4, #25
 8015114:	e7f5      	b.n	8015102 <_printf_i+0x22e>
 8015116:	bf00      	nop
 8015118:	08018369 	.word	0x08018369
 801511c:	0801837a 	.word	0x0801837a

08015120 <_sbrk_r>:
 8015120:	b538      	push	{r3, r4, r5, lr}
 8015122:	4d06      	ldr	r5, [pc, #24]	; (801513c <_sbrk_r+0x1c>)
 8015124:	2300      	movs	r3, #0
 8015126:	4604      	mov	r4, r0
 8015128:	4608      	mov	r0, r1
 801512a:	602b      	str	r3, [r5, #0]
 801512c:	f7eb ff00 	bl	8000f30 <_sbrk>
 8015130:	1c43      	adds	r3, r0, #1
 8015132:	d102      	bne.n	801513a <_sbrk_r+0x1a>
 8015134:	682b      	ldr	r3, [r5, #0]
 8015136:	b103      	cbz	r3, 801513a <_sbrk_r+0x1a>
 8015138:	6023      	str	r3, [r4, #0]
 801513a:	bd38      	pop	{r3, r4, r5, pc}
 801513c:	2000b960 	.word	0x2000b960

08015140 <__sread>:
 8015140:	b510      	push	{r4, lr}
 8015142:	460c      	mov	r4, r1
 8015144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015148:	f000 f98e 	bl	8015468 <_read_r>
 801514c:	2800      	cmp	r0, #0
 801514e:	bfab      	itete	ge
 8015150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015152:	89a3      	ldrhlt	r3, [r4, #12]
 8015154:	181b      	addge	r3, r3, r0
 8015156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801515a:	bfac      	ite	ge
 801515c:	6563      	strge	r3, [r4, #84]	; 0x54
 801515e:	81a3      	strhlt	r3, [r4, #12]
 8015160:	bd10      	pop	{r4, pc}

08015162 <__swrite>:
 8015162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015166:	461f      	mov	r7, r3
 8015168:	898b      	ldrh	r3, [r1, #12]
 801516a:	05db      	lsls	r3, r3, #23
 801516c:	4605      	mov	r5, r0
 801516e:	460c      	mov	r4, r1
 8015170:	4616      	mov	r6, r2
 8015172:	d505      	bpl.n	8015180 <__swrite+0x1e>
 8015174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015178:	2302      	movs	r3, #2
 801517a:	2200      	movs	r2, #0
 801517c:	f000 f930 	bl	80153e0 <_lseek_r>
 8015180:	89a3      	ldrh	r3, [r4, #12]
 8015182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801518a:	81a3      	strh	r3, [r4, #12]
 801518c:	4632      	mov	r2, r6
 801518e:	463b      	mov	r3, r7
 8015190:	4628      	mov	r0, r5
 8015192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015196:	f000 b869 	b.w	801526c <_write_r>

0801519a <__sseek>:
 801519a:	b510      	push	{r4, lr}
 801519c:	460c      	mov	r4, r1
 801519e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151a2:	f000 f91d 	bl	80153e0 <_lseek_r>
 80151a6:	1c43      	adds	r3, r0, #1
 80151a8:	89a3      	ldrh	r3, [r4, #12]
 80151aa:	bf15      	itete	ne
 80151ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80151ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80151b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151b6:	81a3      	strheq	r3, [r4, #12]
 80151b8:	bf18      	it	ne
 80151ba:	81a3      	strhne	r3, [r4, #12]
 80151bc:	bd10      	pop	{r4, pc}

080151be <__sclose>:
 80151be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151c2:	f000 b8db 	b.w	801537c <_close_r>
	...

080151c8 <__swbuf_r>:
 80151c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ca:	460e      	mov	r6, r1
 80151cc:	4614      	mov	r4, r2
 80151ce:	4605      	mov	r5, r0
 80151d0:	b118      	cbz	r0, 80151da <__swbuf_r+0x12>
 80151d2:	6983      	ldr	r3, [r0, #24]
 80151d4:	b90b      	cbnz	r3, 80151da <__swbuf_r+0x12>
 80151d6:	f7ff f991 	bl	80144fc <__sinit>
 80151da:	4b21      	ldr	r3, [pc, #132]	; (8015260 <__swbuf_r+0x98>)
 80151dc:	429c      	cmp	r4, r3
 80151de:	d12b      	bne.n	8015238 <__swbuf_r+0x70>
 80151e0:	686c      	ldr	r4, [r5, #4]
 80151e2:	69a3      	ldr	r3, [r4, #24]
 80151e4:	60a3      	str	r3, [r4, #8]
 80151e6:	89a3      	ldrh	r3, [r4, #12]
 80151e8:	071a      	lsls	r2, r3, #28
 80151ea:	d52f      	bpl.n	801524c <__swbuf_r+0x84>
 80151ec:	6923      	ldr	r3, [r4, #16]
 80151ee:	b36b      	cbz	r3, 801524c <__swbuf_r+0x84>
 80151f0:	6923      	ldr	r3, [r4, #16]
 80151f2:	6820      	ldr	r0, [r4, #0]
 80151f4:	1ac0      	subs	r0, r0, r3
 80151f6:	6963      	ldr	r3, [r4, #20]
 80151f8:	b2f6      	uxtb	r6, r6
 80151fa:	4283      	cmp	r3, r0
 80151fc:	4637      	mov	r7, r6
 80151fe:	dc04      	bgt.n	801520a <__swbuf_r+0x42>
 8015200:	4621      	mov	r1, r4
 8015202:	4628      	mov	r0, r5
 8015204:	f7ff f8e6 	bl	80143d4 <_fflush_r>
 8015208:	bb30      	cbnz	r0, 8015258 <__swbuf_r+0x90>
 801520a:	68a3      	ldr	r3, [r4, #8]
 801520c:	3b01      	subs	r3, #1
 801520e:	60a3      	str	r3, [r4, #8]
 8015210:	6823      	ldr	r3, [r4, #0]
 8015212:	1c5a      	adds	r2, r3, #1
 8015214:	6022      	str	r2, [r4, #0]
 8015216:	701e      	strb	r6, [r3, #0]
 8015218:	6963      	ldr	r3, [r4, #20]
 801521a:	3001      	adds	r0, #1
 801521c:	4283      	cmp	r3, r0
 801521e:	d004      	beq.n	801522a <__swbuf_r+0x62>
 8015220:	89a3      	ldrh	r3, [r4, #12]
 8015222:	07db      	lsls	r3, r3, #31
 8015224:	d506      	bpl.n	8015234 <__swbuf_r+0x6c>
 8015226:	2e0a      	cmp	r6, #10
 8015228:	d104      	bne.n	8015234 <__swbuf_r+0x6c>
 801522a:	4621      	mov	r1, r4
 801522c:	4628      	mov	r0, r5
 801522e:	f7ff f8d1 	bl	80143d4 <_fflush_r>
 8015232:	b988      	cbnz	r0, 8015258 <__swbuf_r+0x90>
 8015234:	4638      	mov	r0, r7
 8015236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015238:	4b0a      	ldr	r3, [pc, #40]	; (8015264 <__swbuf_r+0x9c>)
 801523a:	429c      	cmp	r4, r3
 801523c:	d101      	bne.n	8015242 <__swbuf_r+0x7a>
 801523e:	68ac      	ldr	r4, [r5, #8]
 8015240:	e7cf      	b.n	80151e2 <__swbuf_r+0x1a>
 8015242:	4b09      	ldr	r3, [pc, #36]	; (8015268 <__swbuf_r+0xa0>)
 8015244:	429c      	cmp	r4, r3
 8015246:	bf08      	it	eq
 8015248:	68ec      	ldreq	r4, [r5, #12]
 801524a:	e7ca      	b.n	80151e2 <__swbuf_r+0x1a>
 801524c:	4621      	mov	r1, r4
 801524e:	4628      	mov	r0, r5
 8015250:	f000 f81e 	bl	8015290 <__swsetup_r>
 8015254:	2800      	cmp	r0, #0
 8015256:	d0cb      	beq.n	80151f0 <__swbuf_r+0x28>
 8015258:	f04f 37ff 	mov.w	r7, #4294967295
 801525c:	e7ea      	b.n	8015234 <__swbuf_r+0x6c>
 801525e:	bf00      	nop
 8015260:	08018318 	.word	0x08018318
 8015264:	08018338 	.word	0x08018338
 8015268:	080182f8 	.word	0x080182f8

0801526c <_write_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4d07      	ldr	r5, [pc, #28]	; (801528c <_write_r+0x20>)
 8015270:	4604      	mov	r4, r0
 8015272:	4608      	mov	r0, r1
 8015274:	4611      	mov	r1, r2
 8015276:	2200      	movs	r2, #0
 8015278:	602a      	str	r2, [r5, #0]
 801527a:	461a      	mov	r2, r3
 801527c:	f7eb fc6e 	bl	8000b5c <_write>
 8015280:	1c43      	adds	r3, r0, #1
 8015282:	d102      	bne.n	801528a <_write_r+0x1e>
 8015284:	682b      	ldr	r3, [r5, #0]
 8015286:	b103      	cbz	r3, 801528a <_write_r+0x1e>
 8015288:	6023      	str	r3, [r4, #0]
 801528a:	bd38      	pop	{r3, r4, r5, pc}
 801528c:	2000b960 	.word	0x2000b960

08015290 <__swsetup_r>:
 8015290:	4b32      	ldr	r3, [pc, #200]	; (801535c <__swsetup_r+0xcc>)
 8015292:	b570      	push	{r4, r5, r6, lr}
 8015294:	681d      	ldr	r5, [r3, #0]
 8015296:	4606      	mov	r6, r0
 8015298:	460c      	mov	r4, r1
 801529a:	b125      	cbz	r5, 80152a6 <__swsetup_r+0x16>
 801529c:	69ab      	ldr	r3, [r5, #24]
 801529e:	b913      	cbnz	r3, 80152a6 <__swsetup_r+0x16>
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7ff f92b 	bl	80144fc <__sinit>
 80152a6:	4b2e      	ldr	r3, [pc, #184]	; (8015360 <__swsetup_r+0xd0>)
 80152a8:	429c      	cmp	r4, r3
 80152aa:	d10f      	bne.n	80152cc <__swsetup_r+0x3c>
 80152ac:	686c      	ldr	r4, [r5, #4]
 80152ae:	89a3      	ldrh	r3, [r4, #12]
 80152b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152b4:	0719      	lsls	r1, r3, #28
 80152b6:	d42c      	bmi.n	8015312 <__swsetup_r+0x82>
 80152b8:	06dd      	lsls	r5, r3, #27
 80152ba:	d411      	bmi.n	80152e0 <__swsetup_r+0x50>
 80152bc:	2309      	movs	r3, #9
 80152be:	6033      	str	r3, [r6, #0]
 80152c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80152c4:	81a3      	strh	r3, [r4, #12]
 80152c6:	f04f 30ff 	mov.w	r0, #4294967295
 80152ca:	e03e      	b.n	801534a <__swsetup_r+0xba>
 80152cc:	4b25      	ldr	r3, [pc, #148]	; (8015364 <__swsetup_r+0xd4>)
 80152ce:	429c      	cmp	r4, r3
 80152d0:	d101      	bne.n	80152d6 <__swsetup_r+0x46>
 80152d2:	68ac      	ldr	r4, [r5, #8]
 80152d4:	e7eb      	b.n	80152ae <__swsetup_r+0x1e>
 80152d6:	4b24      	ldr	r3, [pc, #144]	; (8015368 <__swsetup_r+0xd8>)
 80152d8:	429c      	cmp	r4, r3
 80152da:	bf08      	it	eq
 80152dc:	68ec      	ldreq	r4, [r5, #12]
 80152de:	e7e6      	b.n	80152ae <__swsetup_r+0x1e>
 80152e0:	0758      	lsls	r0, r3, #29
 80152e2:	d512      	bpl.n	801530a <__swsetup_r+0x7a>
 80152e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152e6:	b141      	cbz	r1, 80152fa <__swsetup_r+0x6a>
 80152e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152ec:	4299      	cmp	r1, r3
 80152ee:	d002      	beq.n	80152f6 <__swsetup_r+0x66>
 80152f0:	4630      	mov	r0, r6
 80152f2:	f7ff fa21 	bl	8014738 <_free_r>
 80152f6:	2300      	movs	r3, #0
 80152f8:	6363      	str	r3, [r4, #52]	; 0x34
 80152fa:	89a3      	ldrh	r3, [r4, #12]
 80152fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015300:	81a3      	strh	r3, [r4, #12]
 8015302:	2300      	movs	r3, #0
 8015304:	6063      	str	r3, [r4, #4]
 8015306:	6923      	ldr	r3, [r4, #16]
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	89a3      	ldrh	r3, [r4, #12]
 801530c:	f043 0308 	orr.w	r3, r3, #8
 8015310:	81a3      	strh	r3, [r4, #12]
 8015312:	6923      	ldr	r3, [r4, #16]
 8015314:	b94b      	cbnz	r3, 801532a <__swsetup_r+0x9a>
 8015316:	89a3      	ldrh	r3, [r4, #12]
 8015318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801531c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015320:	d003      	beq.n	801532a <__swsetup_r+0x9a>
 8015322:	4621      	mov	r1, r4
 8015324:	4630      	mov	r0, r6
 8015326:	f7ff f9bf 	bl	80146a8 <__smakebuf_r>
 801532a:	89a0      	ldrh	r0, [r4, #12]
 801532c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015330:	f010 0301 	ands.w	r3, r0, #1
 8015334:	d00a      	beq.n	801534c <__swsetup_r+0xbc>
 8015336:	2300      	movs	r3, #0
 8015338:	60a3      	str	r3, [r4, #8]
 801533a:	6963      	ldr	r3, [r4, #20]
 801533c:	425b      	negs	r3, r3
 801533e:	61a3      	str	r3, [r4, #24]
 8015340:	6923      	ldr	r3, [r4, #16]
 8015342:	b943      	cbnz	r3, 8015356 <__swsetup_r+0xc6>
 8015344:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015348:	d1ba      	bne.n	80152c0 <__swsetup_r+0x30>
 801534a:	bd70      	pop	{r4, r5, r6, pc}
 801534c:	0781      	lsls	r1, r0, #30
 801534e:	bf58      	it	pl
 8015350:	6963      	ldrpl	r3, [r4, #20]
 8015352:	60a3      	str	r3, [r4, #8]
 8015354:	e7f4      	b.n	8015340 <__swsetup_r+0xb0>
 8015356:	2000      	movs	r0, #0
 8015358:	e7f7      	b.n	801534a <__swsetup_r+0xba>
 801535a:	bf00      	nop
 801535c:	2000001c 	.word	0x2000001c
 8015360:	08018318 	.word	0x08018318
 8015364:	08018338 	.word	0x08018338
 8015368:	080182f8 	.word	0x080182f8

0801536c <abort>:
 801536c:	b508      	push	{r3, lr}
 801536e:	2006      	movs	r0, #6
 8015370:	f000 f8b4 	bl	80154dc <raise>
 8015374:	2001      	movs	r0, #1
 8015376:	f000 f8e5 	bl	8015544 <_exit>
	...

0801537c <_close_r>:
 801537c:	b538      	push	{r3, r4, r5, lr}
 801537e:	4d06      	ldr	r5, [pc, #24]	; (8015398 <_close_r+0x1c>)
 8015380:	2300      	movs	r3, #0
 8015382:	4604      	mov	r4, r0
 8015384:	4608      	mov	r0, r1
 8015386:	602b      	str	r3, [r5, #0]
 8015388:	f7eb fc14 	bl	8000bb4 <_close>
 801538c:	1c43      	adds	r3, r0, #1
 801538e:	d102      	bne.n	8015396 <_close_r+0x1a>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	b103      	cbz	r3, 8015396 <_close_r+0x1a>
 8015394:	6023      	str	r3, [r4, #0]
 8015396:	bd38      	pop	{r3, r4, r5, pc}
 8015398:	2000b960 	.word	0x2000b960

0801539c <_fstat_r>:
 801539c:	b538      	push	{r3, r4, r5, lr}
 801539e:	4d07      	ldr	r5, [pc, #28]	; (80153bc <_fstat_r+0x20>)
 80153a0:	2300      	movs	r3, #0
 80153a2:	4604      	mov	r4, r0
 80153a4:	4608      	mov	r0, r1
 80153a6:	4611      	mov	r1, r2
 80153a8:	602b      	str	r3, [r5, #0]
 80153aa:	f7eb fc59 	bl	8000c60 <_fstat>
 80153ae:	1c43      	adds	r3, r0, #1
 80153b0:	d102      	bne.n	80153b8 <_fstat_r+0x1c>
 80153b2:	682b      	ldr	r3, [r5, #0]
 80153b4:	b103      	cbz	r3, 80153b8 <_fstat_r+0x1c>
 80153b6:	6023      	str	r3, [r4, #0]
 80153b8:	bd38      	pop	{r3, r4, r5, pc}
 80153ba:	bf00      	nop
 80153bc:	2000b960 	.word	0x2000b960

080153c0 <_isatty_r>:
 80153c0:	b538      	push	{r3, r4, r5, lr}
 80153c2:	4d06      	ldr	r5, [pc, #24]	; (80153dc <_isatty_r+0x1c>)
 80153c4:	2300      	movs	r3, #0
 80153c6:	4604      	mov	r4, r0
 80153c8:	4608      	mov	r0, r1
 80153ca:	602b      	str	r3, [r5, #0]
 80153cc:	f7eb fbae 	bl	8000b2c <_isatty>
 80153d0:	1c43      	adds	r3, r0, #1
 80153d2:	d102      	bne.n	80153da <_isatty_r+0x1a>
 80153d4:	682b      	ldr	r3, [r5, #0]
 80153d6:	b103      	cbz	r3, 80153da <_isatty_r+0x1a>
 80153d8:	6023      	str	r3, [r4, #0]
 80153da:	bd38      	pop	{r3, r4, r5, pc}
 80153dc:	2000b960 	.word	0x2000b960

080153e0 <_lseek_r>:
 80153e0:	b538      	push	{r3, r4, r5, lr}
 80153e2:	4d07      	ldr	r5, [pc, #28]	; (8015400 <_lseek_r+0x20>)
 80153e4:	4604      	mov	r4, r0
 80153e6:	4608      	mov	r0, r1
 80153e8:	4611      	mov	r1, r2
 80153ea:	2200      	movs	r2, #0
 80153ec:	602a      	str	r2, [r5, #0]
 80153ee:	461a      	mov	r2, r3
 80153f0:	f7eb fbfa 	bl	8000be8 <_lseek>
 80153f4:	1c43      	adds	r3, r0, #1
 80153f6:	d102      	bne.n	80153fe <_lseek_r+0x1e>
 80153f8:	682b      	ldr	r3, [r5, #0]
 80153fa:	b103      	cbz	r3, 80153fe <_lseek_r+0x1e>
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	bd38      	pop	{r3, r4, r5, pc}
 8015400:	2000b960 	.word	0x2000b960

08015404 <__malloc_lock>:
 8015404:	4801      	ldr	r0, [pc, #4]	; (801540c <__malloc_lock+0x8>)
 8015406:	f7ff b929 	b.w	801465c <__retarget_lock_acquire_recursive>
 801540a:	bf00      	nop
 801540c:	2000b96c 	.word	0x2000b96c

08015410 <__malloc_unlock>:
 8015410:	4801      	ldr	r0, [pc, #4]	; (8015418 <__malloc_unlock+0x8>)
 8015412:	f7ff b924 	b.w	801465e <__retarget_lock_release_recursive>
 8015416:	bf00      	nop
 8015418:	2000b96c 	.word	0x2000b96c

0801541c <_realloc_r>:
 801541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801541e:	4607      	mov	r7, r0
 8015420:	4614      	mov	r4, r2
 8015422:	460e      	mov	r6, r1
 8015424:	b921      	cbnz	r1, 8015430 <_realloc_r+0x14>
 8015426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801542a:	4611      	mov	r1, r2
 801542c:	f7ff b9d4 	b.w	80147d8 <_malloc_r>
 8015430:	b922      	cbnz	r2, 801543c <_realloc_r+0x20>
 8015432:	f7ff f981 	bl	8014738 <_free_r>
 8015436:	4625      	mov	r5, r4
 8015438:	4628      	mov	r0, r5
 801543a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801543c:	f000 f86a 	bl	8015514 <_malloc_usable_size_r>
 8015440:	42a0      	cmp	r0, r4
 8015442:	d20f      	bcs.n	8015464 <_realloc_r+0x48>
 8015444:	4621      	mov	r1, r4
 8015446:	4638      	mov	r0, r7
 8015448:	f7ff f9c6 	bl	80147d8 <_malloc_r>
 801544c:	4605      	mov	r5, r0
 801544e:	2800      	cmp	r0, #0
 8015450:	d0f2      	beq.n	8015438 <_realloc_r+0x1c>
 8015452:	4631      	mov	r1, r6
 8015454:	4622      	mov	r2, r4
 8015456:	f7fe fdab 	bl	8013fb0 <memcpy>
 801545a:	4631      	mov	r1, r6
 801545c:	4638      	mov	r0, r7
 801545e:	f7ff f96b 	bl	8014738 <_free_r>
 8015462:	e7e9      	b.n	8015438 <_realloc_r+0x1c>
 8015464:	4635      	mov	r5, r6
 8015466:	e7e7      	b.n	8015438 <_realloc_r+0x1c>

08015468 <_read_r>:
 8015468:	b538      	push	{r3, r4, r5, lr}
 801546a:	4d07      	ldr	r5, [pc, #28]	; (8015488 <_read_r+0x20>)
 801546c:	4604      	mov	r4, r0
 801546e:	4608      	mov	r0, r1
 8015470:	4611      	mov	r1, r2
 8015472:	2200      	movs	r2, #0
 8015474:	602a      	str	r2, [r5, #0]
 8015476:	461a      	mov	r2, r3
 8015478:	f7eb fbca 	bl	8000c10 <_read>
 801547c:	1c43      	adds	r3, r0, #1
 801547e:	d102      	bne.n	8015486 <_read_r+0x1e>
 8015480:	682b      	ldr	r3, [r5, #0]
 8015482:	b103      	cbz	r3, 8015486 <_read_r+0x1e>
 8015484:	6023      	str	r3, [r4, #0]
 8015486:	bd38      	pop	{r3, r4, r5, pc}
 8015488:	2000b960 	.word	0x2000b960

0801548c <_raise_r>:
 801548c:	291f      	cmp	r1, #31
 801548e:	b538      	push	{r3, r4, r5, lr}
 8015490:	4604      	mov	r4, r0
 8015492:	460d      	mov	r5, r1
 8015494:	d904      	bls.n	80154a0 <_raise_r+0x14>
 8015496:	2316      	movs	r3, #22
 8015498:	6003      	str	r3, [r0, #0]
 801549a:	f04f 30ff 	mov.w	r0, #4294967295
 801549e:	bd38      	pop	{r3, r4, r5, pc}
 80154a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80154a2:	b112      	cbz	r2, 80154aa <_raise_r+0x1e>
 80154a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154a8:	b94b      	cbnz	r3, 80154be <_raise_r+0x32>
 80154aa:	4620      	mov	r0, r4
 80154ac:	f000 f830 	bl	8015510 <_getpid_r>
 80154b0:	462a      	mov	r2, r5
 80154b2:	4601      	mov	r1, r0
 80154b4:	4620      	mov	r0, r4
 80154b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154ba:	f000 b817 	b.w	80154ec <_kill_r>
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d00a      	beq.n	80154d8 <_raise_r+0x4c>
 80154c2:	1c59      	adds	r1, r3, #1
 80154c4:	d103      	bne.n	80154ce <_raise_r+0x42>
 80154c6:	2316      	movs	r3, #22
 80154c8:	6003      	str	r3, [r0, #0]
 80154ca:	2001      	movs	r0, #1
 80154cc:	e7e7      	b.n	801549e <_raise_r+0x12>
 80154ce:	2400      	movs	r4, #0
 80154d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80154d4:	4628      	mov	r0, r5
 80154d6:	4798      	blx	r3
 80154d8:	2000      	movs	r0, #0
 80154da:	e7e0      	b.n	801549e <_raise_r+0x12>

080154dc <raise>:
 80154dc:	4b02      	ldr	r3, [pc, #8]	; (80154e8 <raise+0xc>)
 80154de:	4601      	mov	r1, r0
 80154e0:	6818      	ldr	r0, [r3, #0]
 80154e2:	f7ff bfd3 	b.w	801548c <_raise_r>
 80154e6:	bf00      	nop
 80154e8:	2000001c 	.word	0x2000001c

080154ec <_kill_r>:
 80154ec:	b538      	push	{r3, r4, r5, lr}
 80154ee:	4d07      	ldr	r5, [pc, #28]	; (801550c <_kill_r+0x20>)
 80154f0:	2300      	movs	r3, #0
 80154f2:	4604      	mov	r4, r0
 80154f4:	4608      	mov	r0, r1
 80154f6:	4611      	mov	r1, r2
 80154f8:	602b      	str	r3, [r5, #0]
 80154fa:	f000 f81b 	bl	8015534 <_kill>
 80154fe:	1c43      	adds	r3, r0, #1
 8015500:	d102      	bne.n	8015508 <_kill_r+0x1c>
 8015502:	682b      	ldr	r3, [r5, #0]
 8015504:	b103      	cbz	r3, 8015508 <_kill_r+0x1c>
 8015506:	6023      	str	r3, [r4, #0]
 8015508:	bd38      	pop	{r3, r4, r5, pc}
 801550a:	bf00      	nop
 801550c:	2000b960 	.word	0x2000b960

08015510 <_getpid_r>:
 8015510:	f000 b808 	b.w	8015524 <_getpid>

08015514 <_malloc_usable_size_r>:
 8015514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015518:	1f18      	subs	r0, r3, #4
 801551a:	2b00      	cmp	r3, #0
 801551c:	bfbc      	itt	lt
 801551e:	580b      	ldrlt	r3, [r1, r0]
 8015520:	18c0      	addlt	r0, r0, r3
 8015522:	4770      	bx	lr

08015524 <_getpid>:
 8015524:	4b02      	ldr	r3, [pc, #8]	; (8015530 <_getpid+0xc>)
 8015526:	2258      	movs	r2, #88	; 0x58
 8015528:	601a      	str	r2, [r3, #0]
 801552a:	f04f 30ff 	mov.w	r0, #4294967295
 801552e:	4770      	bx	lr
 8015530:	2000b960 	.word	0x2000b960

08015534 <_kill>:
 8015534:	4b02      	ldr	r3, [pc, #8]	; (8015540 <_kill+0xc>)
 8015536:	2258      	movs	r2, #88	; 0x58
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	f04f 30ff 	mov.w	r0, #4294967295
 801553e:	4770      	bx	lr
 8015540:	2000b960 	.word	0x2000b960

08015544 <_exit>:
 8015544:	e7fe      	b.n	8015544 <_exit>
	...

08015548 <_init>:
 8015548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801554a:	bf00      	nop
 801554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801554e:	bc08      	pop	{r3}
 8015550:	469e      	mov	lr, r3
 8015552:	4770      	bx	lr

08015554 <_fini>:
 8015554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015556:	bf00      	nop
 8015558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801555a:	bc08      	pop	{r3}
 801555c:	469e      	mov	lr, r3
 801555e:	4770      	bx	lr
