
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018ab4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a38  08018cb4  08018cb4  00028cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c6ec  0801c6ec  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801c6ec  0801c6ec  0002c6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c6f4  0801c6f4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c6f4  0801c6f4  0002c6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c6f8  0801c6f8  0002c6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801c6fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b8a8  20000080  0801c77c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  2000b928  0801c77c  0003b928  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004df7a  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008bd4  00000000  00000000  0007e028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  00086c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  000892a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012a56  00000000  00000000  0008b7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c0a6  00000000  00000000  0009e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124d9f  00000000  00000000  000da2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ff05b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9b0  00000000  00000000  001ff0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  00209a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00209a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08018c9c 	.word	0x08018c9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08018c9c 	.word	0x08018c9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SCB_EnableICache+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f6:	f3bf 8f6f 	isb	sy
}
 80005fa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCB_EnableICache+0x48>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SCB_EnableICache+0x48>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SCB_EnableDCache+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SCB_EnableDCache+0x84>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b5b      	lsrs	r3, r3, #13
 8000644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000648:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000652:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	015a      	lsls	r2, r3, #5
 8000658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000664:	4313      	orrs	r3, r2
 8000666:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60fa      	str	r2, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e5      	bne.n	800064a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SCB_EnableDCache+0x84>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b0:	f7ff ff92 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b4:	f7ff ffb6 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fcff 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81e 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f90e 	bl	80008e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f8ae 	bl	8000824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f8dc 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <main+0x40>)
 80006ce:	f000 fa67 	bl	8000ba0 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fcad 	bl	8006030 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <main+0x44>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <main+0x48>)
 80006dc:	f005 fd3a 	bl	8006154 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <main+0x4c>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f005 fcd7 	bl	8006098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x3e>
 80006ec:	20004b5c 	.word	0x20004b5c
 80006f0:	0801c33c 	.word	0x0801c33c
 80006f4:	08000a25 	.word	0x08000a25
 80006f8:	20004b58 	.word	0x20004b58

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0b8      	sub	sp, #224	; 0xe0
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f017 f956 	bl	80179bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2290      	movs	r2, #144	; 0x90
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f017 f947 	bl	80179bc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <SystemClock_Config+0x11c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a39      	ldr	r2, [pc, #228]	; (8000818 <SystemClock_Config+0x11c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <SystemClock_Config+0x11c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <SystemClock_Config+0x120>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074e:	4a33      	ldr	r2, [pc, #204]	; (800081c <SystemClock_Config+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <SystemClock_Config+0x120>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000762:	2301      	movs	r3, #1
 8000764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800079a:	4618      	mov	r0, r3
 800079c:	f002 faa2 	bl	8002ce4 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007a6:	f000 f9f5 	bl	8000b94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007aa:	f002 fa4b 	bl	8002c44 <HAL_PWREx_EnableOverDrive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007b4:	f000 f9ee 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fd2e 	bl	8003240 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007ea:	f000 f9d3 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <SystemClock_Config+0x124>)
 80007f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f002 ff51 	bl	80036a8 <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800080c:	f000 f9c2 	bl	8000b94 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	37e0      	adds	r7, #224	; 0xe0
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000
 8000820:	00200100 	.word	0x00200100

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART3_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART3_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000868:	f003 fe26 	bl	80044b8 <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f98f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004b5c 	.word	0x20004b5c
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2206      	movs	r2, #6
 8000894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	f002 f873 	bl	80029b2 <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f95f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004be0 	.word	0x20004be0

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <MX_GPIO_Init+0x130>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x130>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0x130>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x130>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f244 0181 	movw	r1, #16513	; 0x4081
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x134>)
 800098e:	f001 fff7 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000998:	f001 fff2 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x140>)
 80009b2:	f001 fe39 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009d0:	f001 fe2a 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x138>)
 80009ec:	f001 fe1c 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000a04:	f001 fe10 	bl	8002628 <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	10110000 	.word	0x10110000
 8000a20:	40020800 	.word	0x40020800

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08e      	sub	sp, #56	; 0x38
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f004 fd78 	bl	8005520 <MX_LWIP_Init>
  volatile err_t res;
  void *data;
  uint16_t len;
  ip_addr_t local_ip;
  ip_addr_t remote_ip;
  char * buffer = pvPortMalloc(2048);
 8000a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000a34:	f009 f91e 	bl	8009c74 <pvPortMalloc>
 8000a38:	62f8      	str	r0, [r7, #44]	; 0x2c


  printf("Hellow WorlD!\r\n");
 8000a3a:	4845      	ldr	r0, [pc, #276]	; (8000b50 <StartDefaultTask+0x12c>)
 8000a3c:	f017 f84c 	bl	8017ad8 <puts>
  printf("LWIP init complete!\r\n");
 8000a40:	4844      	ldr	r0, [pc, #272]	; (8000b54 <StartDefaultTask+0x130>)
 8000a42:	f017 f849 	bl	8017ad8 <puts>
  while(gnetif.ip_addr.addr == 0) osDelay(1);
 8000a46:	e002      	b.n	8000a4e <StartDefaultTask+0x2a>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f005 fc29 	bl	80062a0 <osDelay>
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <StartDefaultTask+0x134>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f8      	beq.n	8000a48 <StartDefaultTask+0x24>
  printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000a56:	4841      	ldr	r0, [pc, #260]	; (8000b5c <StartDefaultTask+0x138>)
 8000a58:	f015 fe1a 	bl	8016690 <ip4addr_ntoa>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	4619      	mov	r1, r3
 8000a60:	483f      	ldr	r0, [pc, #252]	; (8000b60 <StartDefaultTask+0x13c>)
 8000a62:	f016 ffb3 	bl	80179cc <iprintf>
  local_ip = gnetif.ip_addr;
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <StartDefaultTask+0x134>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	613b      	str	r3, [r7, #16]
  ip4addr_aton("169.254.238.254", &remote_ip);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	483c      	ldr	r0, [pc, #240]	; (8000b64 <StartDefaultTask+0x140>)
 8000a74:	f015 fce2 	bl	801643c <ip4addr_aton>

  nc = netconn_new(NETCONN_TCP);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2010      	movs	r0, #16
 8000a7e:	f009 fafb 	bl	800a078 <netconn_new_with_proto_and_callback>
 8000a82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(nc == NULL)
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d106      	bne.n	8000a98 <StartDefaultTask+0x74>
  {
    printf("new error\r\n");
 8000a8a:	4837      	ldr	r0, [pc, #220]	; (8000b68 <StartDefaultTask+0x144>)
 8000a8c:	f017 f824 	bl	8017ad8 <puts>
    while(1) osDelay(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f005 fc05 	bl	80062a0 <osDelay>
 8000a96:	e7fb      	b.n	8000a90 <StartDefaultTask+0x6c>
  }

  res = netconn_bind(nc, &local_ip, 0);
 8000a98:	f107 0310 	add.w	r3, r7, #16
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aa2:	f009 fba3 	bl	800a1ec <netconn_bind>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	77fb      	strb	r3, [r7, #31]
  if(res != 0)
 8000aaa:	7ffb      	ldrb	r3, [r7, #31]
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d009      	beq.n	8000ac6 <StartDefaultTask+0xa2>
  {
    printf("bind error: %d\r\n",res);
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	482c      	ldr	r0, [pc, #176]	; (8000b6c <StartDefaultTask+0x148>)
 8000aba:	f016 ff87 	bl	80179cc <iprintf>
    while(1) osDelay(1);
 8000abe:	2001      	movs	r0, #1
 8000ac0:	f005 fbee 	bl	80062a0 <osDelay>
 8000ac4:	e7fb      	b.n	8000abe <StartDefaultTask+0x9a>
  }

  netconn_listen(nc);
 8000ac6:	21ff      	movs	r1, #255	; 0xff
 8000ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000aca:	f009 fbc7 	bl	800a25c <netconn_listen_with_backlog>
  /* Infinite loop */
  for(;;)
  {
    /* Grab new connection. */
    res = netconn_accept(nc, &newconn);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000ad6:	f009 fbed 	bl	800a2b4 <netconn_accept>
 8000ada:	4603      	mov	r3, r0
 8000adc:	77fb      	strb	r3, [r7, #31]

    /* Process the new connection. */
    if (res == ERR_OK)
 8000ade:	7ffb      	ldrb	r3, [r7, #31]
 8000ae0:	b25b      	sxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1f3      	bne.n	8000ace <StartDefaultTask+0xaa>
    {

      while (netconn_recv(newconn, &buf) == ERR_OK)
 8000ae6:	e01f      	b.n	8000b28 <StartDefaultTask+0x104>
      {
        do
        {
          netbuf_data(buf, &data, &len);
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	f107 0216 	add.w	r2, r7, #22
 8000aee:	f107 0118 	add.w	r1, r7, #24
 8000af2:	4618      	mov	r0, r3
 8000af4:	f00b fb7c 	bl	800c1f0 <netbuf_data>
          printf(buf);
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f016 ff66 	bl	80179cc <iprintf>
          netconn_write(newconn, data, len, NETCONN_COPY);
 8000b00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b02:	69b9      	ldr	r1, [r7, #24]
 8000b04:	8afb      	ldrh	r3, [r7, #22]
 8000b06:	461a      	mov	r2, r3
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f009 fe53 	bl	800a7b8 <netconn_write_partly>

        }
        while (netbuf_next(buf) >= 0);
 8000b12:	6a3b      	ldr	r3, [r7, #32]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00b fbb5 	bl	800c284 <netbuf_next>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dae3      	bge.n	8000ae8 <StartDefaultTask+0xc4>

        netbuf_delete(buf);
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00b fb44 	bl	800c1b0 <netbuf_delete>
      while (netconn_recv(newconn, &buf) == ERR_OK)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	f107 0220 	add.w	r2, r7, #32
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f009 fdc7 	bl	800a6c4 <netconn_recv>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0d5      	beq.n	8000ae8 <StartDefaultTask+0xc4>
      }

      /* Close connection and discard connection identifier. */
      netconn_close(newconn);
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 ff3c 	bl	800a9bc <netconn_close>
      netconn_delete(newconn);
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	4618      	mov	r0, r3
 8000b48:	f009 fb34 	bl	800a1b4 <netconn_delete>
    res = netconn_accept(nc, &newconn);
 8000b4c:	e7bf      	b.n	8000ace <StartDefaultTask+0xaa>
 8000b4e:	bf00      	nop
 8000b50:	08018cd8 	.word	0x08018cd8
 8000b54:	08018ce8 	.word	0x08018ce8
 8000b58:	20005070 	.word	0x20005070
 8000b5c:	20005074 	.word	0x20005074
 8000b60:	08018d00 	.word	0x08018d00
 8000b64:	08018d18 	.word	0x08018d18
 8000b68:	08018d28 	.word	0x08018d28
 8000b6c:	08018d34 	.word	0x08018d34

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b82:	f000 faa7 	bl	80010d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <RetargetInit+0x28>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <RetargetInit+0x2c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	6898      	ldr	r0, [r3, #8]
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	2100      	movs	r1, #0
 8000bba:	f016 ffd5 	bl	8017b68 <setvbuf>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20004fec 	.word	0x20004fec
 8000bcc:	2000001c 	.word	0x2000001c

08000bd0 <_isatty>:

int _isatty(int fd) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db04      	blt.n	8000be8 <_isatty+0x18>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	dc01      	bgt.n	8000be8 <_isatty+0x18>
    return 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e003      	b.n	8000bf0 <_isatty+0x20>

  errno = EBADF;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <_isatty+0x2c>)
 8000bea:	2209      	movs	r2, #9
 8000bec:	601a      	str	r2, [r3, #0]
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	2000b914 	.word	0x2000b914

08000c00 <_write>:

int _write(int fd, char* ptr, int len) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d002      	beq.n	8000c18 <_write+0x18>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d111      	bne.n	8000c3c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <_write+0x50>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	f003 fc95 	bl	8004554 <HAL_UART_Transmit>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <_write+0x38>
      return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	e006      	b.n	8000c46 <_write+0x46>
    else
      return EIO;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e004      	b.n	8000c46 <_write+0x46>
  }
  errno = EBADF;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <_write+0x54>)
 8000c3e:	2209      	movs	r2, #9
 8000c40:	601a      	str	r2, [r3, #0]
  return -1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20004fec 	.word	0x20004fec
 8000c54:	2000b914 	.word	0x2000b914

08000c58 <_close>:

int _close(int fd) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db04      	blt.n	8000c70 <_close+0x18>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	dc01      	bgt.n	8000c70 <_close+0x18>
    return 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e004      	b.n	8000c7a <_close+0x22>

  errno = EBADF;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <_close+0x30>)
 8000c72:	2209      	movs	r2, #9
 8000c74:	601a      	str	r2, [r3, #0]
  return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000b914 	.word	0x2000b914

08000c8c <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <_lseek+0x24>)
 8000c9a:	2209      	movs	r2, #9
 8000c9c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	2000b914 	.word	0x2000b914

08000cb4 <_read>:

int _read(int fd, char* ptr, int len) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d110      	bne.n	8000ce8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <_read+0x48>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	f003 fcd2 	bl	800467a <HAL_UART_Receive>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <_read+0x30>
      return 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e006      	b.n	8000cf2 <_read+0x3e>
    else
      return EIO;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	e004      	b.n	8000cf2 <_read+0x3e>
  }
  errno = EBADF;
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_read+0x4c>)
 8000cea:	2209      	movs	r2, #9
 8000cec:	601a      	str	r2, [r3, #0]
  return -1;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20004fec 	.word	0x20004fec
 8000d00:	2000b914 	.word	0x2000b914

08000d04 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db08      	blt.n	8000d26 <_fstat+0x22>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	dc05      	bgt.n	8000d26 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d20:	605a      	str	r2, [r3, #4]
    return 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e003      	b.n	8000d2e <_fstat+0x2a>
  }

  errno = EBADF;
 8000d26:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <_fstat+0x38>)
 8000d28:	2209      	movs	r2, #9
 8000d2a:	601a      	str	r2, [r3, #0]
  return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000b914 	.word	0x2000b914

08000d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f000 faa5 	bl	80012cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_UART_MspInit+0x7c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d128      	bne.n	8000e04 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a16      	ldr	r2, [pc, #88]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_UART_MspInit+0x80>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000de2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df4:	2307      	movs	r3, #7
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <HAL_UART_MspInit+0x84>)
 8000e00:	f001 fc12 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40004800 	.word	0x40004800
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020c00 	.word	0x40020c00

08000e18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e38:	d141      	bne.n	8000ebe <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e52:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e64:	230a      	movs	r3, #10
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4817      	ldr	r0, [pc, #92]	; (8000ecc <HAL_PCD_MspInit+0xb4>)
 8000e70:	f001 fbda 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_PCD_MspInit+0xb4>)
 8000e8a:	f001 fbcd 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6353      	str	r3, [r2, #52]	; 0x34
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_PCD_MspInit+0xb0>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	; 0x30
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	2036      	movs	r0, #54	; 0x36
 8000ee6:	f000 f9f1 	bl	80012cc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eea:	2036      	movs	r0, #54	; 0x36
 8000eec:	f000 fa0a 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	; (8000f70 <HAL_InitTick+0xa0>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a1e      	ldr	r2, [pc, #120]	; (8000f70 <HAL_InitTick+0xa0>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <HAL_InitTick+0xa0>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 0310 	and.w	r3, r3, #16
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f08:	f107 0210 	add.w	r2, r7, #16
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4611      	mov	r1, r2
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fb96 	bl	8003644 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f18:	f002 fb6c 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_InitTick+0xa4>)
 8000f26:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2a:	0c9b      	lsrs	r3, r3, #18
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <HAL_InitTick+0xac>)
 8000f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f50:	4809      	ldr	r0, [pc, #36]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f52:	f002 ffd1 	bl	8003ef8 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d104      	bne.n	8000f66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <HAL_InitTick+0xa8>)
 8000f5e:	f003 f82d 	bl	8003fbc <HAL_TIM_Base_Start_IT>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40023800 	.word	0x40023800
 8000f74:	431bde83 	.word	0x431bde83
 8000f78:	20004ff0 	.word	0x20004ff0
 8000f7c:	40001000 	.word	0x40001000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM6_DAC_IRQHandler+0x10>)
 8000fb2:	f003 f87b 	bl	80040ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20004ff0 	.word	0x20004ff0

08000fc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <ETH_IRQHandler+0x10>)
 8000fc6:	f000 fd8d 	bl	8001ae4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20006988 	.word	0x20006988

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	; (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d205      	bcs.n	8001010 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001004:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <_sbrk+0x6c>)
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a06      	ldr	r2, [pc, #24]	; (8001038 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20080000 	.word	0x20080000
 8001034:	00004000 	.word	0x00004000
 8001038:	2000009c 	.word	0x2000009c
 800103c:	2000b928 	.word	0x2000b928
 8001040:	2000b914 	.word	0x2000b914

08001044 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	; (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001070:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001074:	e002      	b.n	800107c <LoopCopyDataInit>

08001076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107a:	3304      	adds	r3, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800107c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001080:	d3f9      	bcc.n	8001076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001084:	4c0b      	ldr	r4, [pc, #44]	; (80010b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001088:	e001      	b.n	800108e <LoopFillZerobss>

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108c:	3204      	adds	r2, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001092:	f7ff ffd7 	bl	8001044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f016 fc51 	bl	801793c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fb07 	bl	80006ac <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010ac:	0801c6fc 	.word	0x0801c6fc
  ldr r2, =_sbss
 80010b0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010b4:	2000b928 	.word	0x2000b928

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>

080010ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f8f9 	bl	80012b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ff03 	bl	8000ed0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80010ca:	f7ff fe39 	bl	8000d40 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x20>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x24>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_IncTick+0x24>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000008 	.word	0x20000008
 80010f8:	2000503c 	.word	0x2000503c

080010fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_GetTick+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	2000503c 	.word	0x2000503c

08001114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800111c:	f7ff ffee 	bl	80010fc <HAL_GetTick>
 8001120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112c:	d005      	beq.n	800113a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <HAL_Delay+0x44>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	461a      	mov	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4413      	add	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800113a:	bf00      	nop
 800113c:	f7ff ffde 	bl	80010fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	429a      	cmp	r2, r3
 800114a:	d8f7      	bhi.n	800113c <HAL_Delay+0x28>
  {
  }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008

0800115c <__NVIC_SetPriorityGrouping>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <__NVIC_SetPriorityGrouping+0x40>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	4313      	orrs	r3, r2
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x40>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00
 80011a0:	05fa0000 	.word	0x05fa0000

080011a4 <__NVIC_GetPriorityGrouping>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	; (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	; (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	; (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	; (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff4c 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012de:	f7ff ff61 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f7ff ffb1 	bl	8001250 <NVIC_EncodePriority>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff80 	bl	80011fc <__NVIC_SetPriority>
}
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff54 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001330:	4ba9      	ldr	r3, [pc, #676]	; (80015d8 <HAL_ETH_Init+0x2b8>)
 8001332:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e181      	b.n	800164a <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800134c:	b2db      	uxtb	r3, r3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f004 fa42 	bl	80057e4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001360:	4b9e      	ldr	r3, [pc, #632]	; (80015dc <HAL_ETH_Init+0x2bc>)
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	4a9d      	ldr	r2, [pc, #628]	; (80015dc <HAL_ETH_Init+0x2bc>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136a:	6453      	str	r3, [r2, #68]	; 0x44
 800136c:	4b9b      	ldr	r3, [pc, #620]	; (80015dc <HAL_ETH_Init+0x2bc>)
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001378:	4b99      	ldr	r3, [pc, #612]	; (80015e0 <HAL_ETH_Init+0x2c0>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a98      	ldr	r2, [pc, #608]	; (80015e0 <HAL_ETH_Init+0x2c0>)
 800137e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001382:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001384:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <HAL_ETH_Init+0x2c0>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4994      	ldr	r1, [pc, #592]	; (80015e0 <HAL_ETH_Init+0x2c0>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f042 0201 	orr.w	r2, r2, #1
 80013a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013a8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013aa:	f7ff fea7 	bl	80010fc <HAL_GetTick>
 80013ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013b0:	e011      	b.n	80013d6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013b2:	f7ff fea3 	bl	80010fc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013c0:	d909      	bls.n	80013d6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e139      	b.n	800164a <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e4      	bne.n	80013b2 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f023 031c 	bic.w	r3, r3, #28
 80013f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013f8:	f002 f8f0 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80013fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	4a78      	ldr	r2, [pc, #480]	; (80015e4 <HAL_ETH_Init+0x2c4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d908      	bls.n	8001418 <HAL_ETH_Init+0xf8>
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	4a77      	ldr	r2, [pc, #476]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d804      	bhi.n	8001418 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	61fb      	str	r3, [r7, #28]
 8001416:	e027      	b.n	8001468 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4a73      	ldr	r2, [pc, #460]	; (80015e8 <HAL_ETH_Init+0x2c8>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d908      	bls.n	8001432 <HAL_ETH_Init+0x112>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	4a6d      	ldr	r2, [pc, #436]	; (80015d8 <HAL_ETH_Init+0x2b8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d204      	bcs.n	8001432 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f043 030c 	orr.w	r3, r3, #12
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	e01a      	b.n	8001468 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4a68      	ldr	r2, [pc, #416]	; (80015d8 <HAL_ETH_Init+0x2b8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d303      	bcc.n	8001442 <HAL_ETH_Init+0x122>
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	4a6b      	ldr	r2, [pc, #428]	; (80015ec <HAL_ETH_Init+0x2cc>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d911      	bls.n	8001466 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_ETH_Init+0x2cc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d908      	bls.n	800145c <HAL_ETH_Init+0x13c>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_ETH_Init+0x2d0>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d804      	bhi.n	800145c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	e005      	b.n	8001468 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f043 0310 	orr.w	r3, r3, #16
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	e000      	b.n	8001468 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001466:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001474:	2100      	movs	r1, #0
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 fc17 	bl	8001caa <HAL_ETH_WritePHYRegister>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fdcd 	bl	8002028 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e0d7      	b.n	800164a <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800149a:	20ff      	movs	r0, #255	; 0xff
 800149c:	f7ff fe3a 	bl	8001114 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a5 	beq.w	80015f4 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014aa:	f7ff fe27 	bl	80010fc <HAL_GetTick>
 80014ae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	461a      	mov	r2, r3
 80014b6:	2101      	movs	r1, #1
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fb8e 	bl	8001bda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014be:	f7ff fe1d 	bl	80010fc <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d90f      	bls.n	80014f0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014d4:	6939      	ldr	r1, [r7, #16]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fda6 	bl	8002028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0ac      	b.n	800164a <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0da      	beq.n	80014b0 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fbd2 	bl	8001caa <HAL_ETH_WritePHYRegister>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001510:	6939      	ldr	r1, [r7, #16]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fd88 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001520:	2301      	movs	r3, #1
 8001522:	e092      	b.n	800164a <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fdea 	bl	80010fc <HAL_GetTick>
 8001528:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	461a      	mov	r2, r3
 8001530:	2101      	movs	r1, #1
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fb51 	bl	8001bda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001538:	f7ff fde0 	bl	80010fc <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d90f      	bls.n	800156a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800154e:	6939      	ldr	r1, [r7, #16]
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 fd69 	bl	8002028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e06f      	b.n	800164a <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f003 0320 	and.w	r3, r3, #32
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0da      	beq.n	800152a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	461a      	mov	r2, r3
 800157a:	2110      	movs	r1, #16
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fb2c 	bl	8001bda <HAL_ETH_ReadPHYRegister>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d00b      	beq.n	80015a0 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 fd4a 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800159c:	2301      	movs	r3, #1
 800159e:	e054      	b.n	800164a <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	e002      	b.n	80015ba <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	e035      	b.n	8001638 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e030      	b.n	8001638 <HAL_ETH_Init+0x318>
 80015d6:	bf00      	nop
 80015d8:	03938700 	.word	0x03938700
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	01312cff 	.word	0x01312cff
 80015e8:	02160ebf 	.word	0x02160ebf
 80015ec:	05f5e0ff 	.word	0x05f5e0ff
 80015f0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	085b      	lsrs	r3, r3, #1
 8001602:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001604:	4313      	orrs	r3, r2
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fb4c 	bl	8001caa <HAL_ETH_WritePHYRegister>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fd02 	bl	8002028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e00c      	b.n	800164a <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001630:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001634:	f7ff fd6e 	bl	8001114 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001638:	6939      	ldr	r1, [r7, #16]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fcf4 	bl	8002028 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop

08001654 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ETH_DMATxDescListInit+0x20>
 8001670:	2302      	movs	r3, #2
 8001672:	e052      	b.n	800171a <HAL_ETH_DMATxDescListInit+0xc6>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2202      	movs	r2, #2
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	e030      	b.n	80016f2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016a0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d208      	bcs.n	80016e6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	015b      	lsls	r3, r3, #5
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	4413      	add	r3, r2
 80016de:	461a      	mov	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	e002      	b.n	80016ec <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d3ca      	bcc.n	8001690 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6819      	ldr	r1, [r3, #0]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	f241 0310 	movw	r3, #4112	; 0x1010
 8001704:	440b      	add	r3, r1
 8001706:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	371c      	adds	r7, #28
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
 8001732:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_ETH_DMARxDescListInit+0x20>
 8001742:	2302      	movs	r3, #2
 8001744:	e056      	b.n	80017f4 <HAL_ETH_DMARxDescListInit+0xce>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2202      	movs	r2, #2
 8001752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e034      	b.n	80017cc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	015b      	lsls	r3, r3, #5
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001772:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800177a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	461a      	mov	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d105      	bne.n	80017a4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d208      	bcs.n	80017c0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3301      	adds	r3, #1
 80017b2:	015b      	lsls	r3, r3, #5
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	4413      	add	r3, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e002      	b.n	80017c6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3c6      	bcc.n	8001762 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	f241 030c 	movw	r3, #4108	; 0x100c
 80017de:	440b      	add	r3, r1
 80017e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	371c      	adds	r7, #28
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_ETH_TransmitFrame+0x24>
 8001820:	2302      	movs	r3, #2
 8001822:	e0cd      	b.n	80019c0 <HAL_ETH_TransmitFrame+0x1c0>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d109      	bne.n	800184e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800184a:	2301      	movs	r3, #1
 800184c:	e0b8      	b.n	80019c0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da09      	bge.n	800186c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2212      	movs	r2, #18
 800185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0a9      	b.n	80019c0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001872:	4293      	cmp	r3, r2
 8001874:	d915      	bls.n	80018a2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	4a54      	ldr	r2, [pc, #336]	; (80019cc <HAL_ETH_TransmitFrame+0x1cc>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0a9b      	lsrs	r3, r3, #10
 8001880:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	4b51      	ldr	r3, [pc, #324]	; (80019cc <HAL_ETH_TransmitFrame+0x1cc>)
 8001886:	fba3 1302 	umull	r1, r3, r3, r2
 800188a:	0a9b      	lsrs	r3, r3, #10
 800188c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e001      	b.n	80018a6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d11c      	bne.n	80018e6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018ba:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018c6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80018d6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	461a      	mov	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80018e4:	e04b      	b.n	800197e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	e044      	b.n	8001976 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018fa:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d107      	bne.n	8001912 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001910:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800191a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	3b01      	subs	r3, #1
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	429a      	cmp	r2, r3
 8001924:	d116      	bne.n	8001954 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001934:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <HAL_ETH_TransmitFrame+0x1d0>)
 800193a:	fb02 f203 	mul.w	r2, r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001946:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001952:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001962:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	3301      	adds	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3b6      	bcc.n	80018ec <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f241 0314 	movw	r3, #4116	; 0x1014
 8001986:	4413      	add	r3, r2
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00d      	beq.n	80019ae <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f241 0314 	movw	r3, #4116	; 0x1014
 800199a:	4413      	add	r3, r2
 800199c:	2204      	movs	r2, #4
 800199e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f241 0304 	movw	r3, #4100	; 0x1004
 80019a8:	4413      	add	r3, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2201      	movs	r2, #1
 80019b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	ac02b00b 	.word	0xac02b00b
 80019d0:	fffffa0c 	.word	0xfffffa0c

080019d4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e074      	b.n	8001ad8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019fe:	e05a      	b.n	8001ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d10d      	bne.n	8001a32 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a30:	e041      	b.n	8001ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10b      	bne.n	8001a58 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	461a      	mov	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
 8001a56:	e02e      	b.n	8001ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d103      	bne.n	8001a7a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a86:	1f1a      	subs	r2, r3, #4
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e010      	b.n	8001ad8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db02      	blt.n	8001ac6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d99c      	bls.n	8001a00 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	f241 0314 	movw	r3, #4116	; 0x1014
 8001af4:	4413      	add	r3, r2
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001afc:	2b40      	cmp	r3, #64	; 0x40
 8001afe:	d112      	bne.n	8001b26 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f003 ff2f 	bl	8005964 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b0e:	4413      	add	r3, r2
 8001b10:	2240      	movs	r2, #64	; 0x40
 8001b12:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b24:	e01b      	b.n	8001b5e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d111      	bne.n	8001b5e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f839 	bl	8001bb2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b48:	4413      	add	r3, r2
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b66:	4413      	add	r3, r2
 8001b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b6c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b76:	4413      	add	r3, r2
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b82:	d112      	bne.n	8001baa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f81e 	bl	8001bc6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001b92:	4413      	add	r3, r2
 8001b94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b98:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	460b      	mov	r3, r1
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b82      	cmp	r3, #130	; 0x82
 8001bfa:	d101      	bne.n	8001c00 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e050      	b.n	8001ca2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2282      	movs	r2, #130	; 0x82
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f003 031c 	and.w	r3, r3, #28
 8001c16:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8a1b      	ldrh	r3, [r3, #16]
 8001c1c:	02db      	lsls	r3, r3, #11
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	019b      	lsls	r3, r3, #6
 8001c2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f023 0302 	bic.w	r3, r3, #2
 8001c3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff fa56 	bl	80010fc <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c52:	e015      	b.n	8001c80 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c54:	f7ff fa52 	bl	80010fc <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c62:	d309      	bcc.n	8001c78 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e014      	b.n	8001ca2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1e4      	bne.n	8001c54 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	2b42      	cmp	r3, #66	; 0x42
 8001cca:	d101      	bne.n	8001cd0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e04e      	b.n	8001d6e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2242      	movs	r2, #66	; 0x42
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f003 031c 	and.w	r3, r3, #28
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8a1b      	ldrh	r3, [r3, #16]
 8001cec:	02db      	lsls	r3, r3, #11
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001cf6:	897b      	ldrh	r3, [r7, #10]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d26:	f7ff f9e9 	bl	80010fc <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d2c:	e015      	b.n	8001d5a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d2e:	f7ff f9e5 	bl	80010fc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d309      	bcc.n	8001d52 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e00d      	b.n	8001d6e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e4      	bne.n	8001d2e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ETH_Start+0x16>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e01f      	b.n	8001dcc <HAL_ETH_Start+0x56>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fb45 	bl	800242c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fb7c 	bl	80024a0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fc13 	bl	80025d4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 fbb0 	bl	8002514 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 fbdd 	bl	8002574 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ETH_Stop+0x16>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e01f      	b.n	8001e2a <HAL_ETH_Stop+0x56>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 fba2 	bl	8002544 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 fbcf 	bl	80025a4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fb67 	bl	80024da <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fbe1 	bl	80025d4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fb27 	bl	8002466 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ETH_ConfigMAC+0x1c>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0e4      	b.n	800201a <HAL_ETH_ConfigMAC+0x1e6>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <HAL_ETH_ConfigMAC+0x1f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001e80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001e86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001e8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001e92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001e98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001e9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ea4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001eaa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001eb0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001eb6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001ebc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001ec2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff f91a 	bl	8001114 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001ef0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001ef6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001efc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f02:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f08:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f1a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f1c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff f8f4 	bl	8001114 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f3c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f46:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f5e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f64:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001f6a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001f70:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001f76:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001f7c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7ff f8bd 	bl	8001114 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f7ff f8aa 	bl	8001114 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	e01e      	b.n	8002008 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001fd8:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f7ff f88a 	bl	8001114 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	ff20810f 	.word	0xff20810f

08002028 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0b0      	sub	sp, #192	; 0xc0
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002044:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002056:	2300      	movs	r3, #0
 8002058:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d103      	bne.n	8002076 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	663b      	str	r3, [r7, #96]	; 0x60
 8002074:	e001      	b.n	800207a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002084:	2300      	movs	r3, #0
 8002086:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002094:	2340      	movs	r3, #64	; 0x40
 8002096:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800209e:	2300      	movs	r3, #0
 80020a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80020e6:	2300      	movs	r3, #0
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002100:	4bab      	ldr	r3, [pc, #684]	; (80023b0 <ETH_MACDMAConfig+0x388>)
 8002102:	4013      	ands	r3, r2
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002108:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800210a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800210c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800210e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002110:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002114:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800211a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800211c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800211e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002122:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002128:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800212a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800212c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800212e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002130:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002134:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002138:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800213a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800213c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800213e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002150:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215c:	2001      	movs	r0, #1
 800215e:	f7fe ffd9 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800216a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800216c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800216e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002170:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002174:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800217a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800217c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002180:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002186:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800218c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002190:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002198:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800219a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f7fe ffb4 	bl	8001114 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80021be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80021c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80021d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021dc:	4013      	ands	r3, r2
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80021e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80021e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80021ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80021ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80021f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80021f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80021f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80021fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80021fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002204:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002218:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7fe ff75 	bl	8001114 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002232:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002234:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800224e:	2001      	movs	r0, #1
 8002250:	f7fe ff60 	bl	8001114 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002266:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800226c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002270:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002282:	2304      	movs	r3, #4
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800228c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002290:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f241 0318 	movw	r3, #4120	; 0x1018
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80022ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022be:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <ETH_MACDMAConfig+0x38c>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80022c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80022cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80022ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80022d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80022d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80022d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80022d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80022d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80022da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80022dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80022de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80022e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80022e6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80022e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f241 0318 	movw	r3, #4120	; 0x1018
 80022fa:	4413      	add	r3, r2
 80022fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002300:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f241 0318 	movw	r3, #4120	; 0x1018
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f7fe fefe 	bl	8001114 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002320:	4413      	add	r3, r2
 8002322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002326:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800232c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002330:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002334:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002338:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800233e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002342:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800234c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002350:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002360:	2001      	movs	r0, #1
 8002362:	f7fe fed7 	bl	8001114 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800236e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002372:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10d      	bne.n	8002398 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	f241 031c 	movw	r3, #4124	; 0x101c
 8002384:	4413      	add	r3, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6811      	ldr	r1, [r2, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <ETH_MACDMAConfig+0x390>)
 800238e:	431a      	orrs	r2, r3
 8002390:	f241 031c 	movw	r3, #4124	; 0x101c
 8002394:	440b      	add	r3, r1
 8002396:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	461a      	mov	r2, r3
 800239e:	2100      	movs	r1, #0
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f80b 	bl	80023bc <ETH_MACAddressConfig>
}
 80023a6:	bf00      	nop
 80023a8:	37c0      	adds	r7, #192	; 0xc0
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	ff20810f 	.word	0xff20810f
 80023b4:	f8de3f23 	.word	0xf8de3f23
 80023b8:	00010040 	.word	0x00010040

080023bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3305      	adds	r3, #5
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	3204      	adds	r2, #4
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <ETH_MACAddressConfig+0x68>)
 80023de:	4413      	add	r3, r2
 80023e0:	461a      	mov	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3303      	adds	r3, #3
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	061a      	lsls	r2, r3, #24
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3302      	adds	r3, #2
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3301      	adds	r3, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	4313      	orrs	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <ETH_MACAddressConfig+0x6c>)
 800240e:	4413      	add	r3, r2
 8002410:	461a      	mov	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40028040 	.word	0x40028040
 8002428:	40028044 	.word	0x40028044

0800242c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0208 	orr.w	r2, r2, #8
 8002446:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002450:	2001      	movs	r0, #1
 8002452:	f7fe fe5f 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0208 	bic.w	r2, r2, #8
 8002480:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248a:	2001      	movs	r0, #1
 800248c:	f7fe fe42 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]
}
 8002498:	bf00      	nop
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0204 	orr.w	r2, r2, #4
 80024ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe fe25 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
}
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0204 	bic.w	r2, r2, #4
 80024f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7fe fe08 	bl	8001114 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	601a      	str	r2, [r3, #0]
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f241 0318 	movw	r3, #4120	; 0x1018
 8002524:	4413      	add	r3, r2
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6811      	ldr	r1, [r2, #0]
 800252c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002530:	f241 0318 	movw	r3, #4120	; 0x1018
 8002534:	440b      	add	r3, r1
 8002536:	601a      	str	r2, [r3, #0]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	f241 0318 	movw	r3, #4120	; 0x1018
 8002554:	4413      	add	r3, r2
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6811      	ldr	r1, [r2, #0]
 800255c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002560:	f241 0318 	movw	r3, #4120	; 0x1018
 8002564:	440b      	add	r3, r1
 8002566:	601a      	str	r2, [r3, #0]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f241 0318 	movw	r3, #4120	; 0x1018
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6811      	ldr	r1, [r2, #0]
 800258c:	f043 0202 	orr.w	r2, r3, #2
 8002590:	f241 0318 	movw	r3, #4120	; 0x1018
 8002594:	440b      	add	r3, r1
 8002596:	601a      	str	r2, [r3, #0]
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025b4:	4413      	add	r3, r2
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6811      	ldr	r1, [r2, #0]
 80025bc:	f023 0202 	bic.w	r2, r3, #2
 80025c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80025c4:	440b      	add	r3, r1
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6811      	ldr	r1, [r2, #0]
 80025f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80025f8:	440b      	add	r3, r1
 80025fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	f241 0318 	movw	r3, #4120	; 0x1018
 8002604:	4413      	add	r3, r2
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800260a:	2001      	movs	r0, #1
 800260c:	f7fe fd82 	bl	8001114 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	f241 0318 	movw	r3, #4120	; 0x1018
 800261a:	440b      	add	r3, r1
 800261c:	601a      	str	r2, [r3, #0]
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e175      	b.n	8002934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8164 	bne.w	800292e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d00b      	beq.n	8002686 <HAL_GPIO_Init+0x5e>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800267a:	2b11      	cmp	r3, #17
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b12      	cmp	r3, #18
 8002684:	d130      	bne.n	80026e8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026bc:	2201      	movs	r2, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 0201 	and.w	r2, r3, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x100>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b12      	cmp	r3, #18
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80be 	beq.w	800292e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_GPIO_Init+0x324>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_GPIO_Init+0x324>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_GPIO_Init+0x324>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027ca:	4a61      	ldr	r2, [pc, #388]	; (8002950 <HAL_GPIO_Init+0x328>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_GPIO_Init+0x32c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d037      	beq.n	8002866 <HAL_GPIO_Init+0x23e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a57      	ldr	r2, [pc, #348]	; (8002958 <HAL_GPIO_Init+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_GPIO_Init+0x23a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a56      	ldr	r2, [pc, #344]	; (800295c <HAL_GPIO_Init+0x334>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x236>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a55      	ldr	r2, [pc, #340]	; (8002960 <HAL_GPIO_Init+0x338>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x232>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a54      	ldr	r2, [pc, #336]	; (8002964 <HAL_GPIO_Init+0x33c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x22e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a53      	ldr	r2, [pc, #332]	; (8002968 <HAL_GPIO_Init+0x340>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x22a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_GPIO_Init+0x344>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x226>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a51      	ldr	r2, [pc, #324]	; (8002970 <HAL_GPIO_Init+0x348>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x222>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_GPIO_Init+0x34c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x21e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x350>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x21a>
 800283e:	2309      	movs	r3, #9
 8002840:	e012      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002842:	230a      	movs	r3, #10
 8002844:	e010      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002846:	2308      	movs	r3, #8
 8002848:	e00e      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800284a:	2307      	movs	r3, #7
 800284c:	e00c      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800284e:	2306      	movs	r3, #6
 8002850:	e00a      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002852:	2305      	movs	r3, #5
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002856:	2304      	movs	r3, #4
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002866:	2300      	movs	r3, #0
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_GPIO_Init+0x328>)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_GPIO_Init+0x354>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028aa:	4a34      	ldr	r2, [pc, #208]	; (800297c <HAL_GPIO_Init+0x354>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_GPIO_Init+0x354>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_GPIO_Init+0x354>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_GPIO_Init+0x354>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a1f      	ldr	r2, [pc, #124]	; (800297c <HAL_GPIO_Init+0x354>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_GPIO_Init+0x354>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_GPIO_Init+0x354>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f67f ae86 	bls.w	8002648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020400 	.word	0x40020400
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40021000 	.word	0x40021000
 8002968:	40021400 	.word	0x40021400
 800296c:	40021800 	.word	0x40021800
 8002970:	40021c00 	.word	0x40021c00
 8002974:	40022000 	.word	0x40022000
 8002978:	40022400 	.word	0x40022400
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029b4:	b08f      	sub	sp, #60	; 0x3c
 80029b6:	af0a      	add	r7, sp, #40	; 0x28
 80029b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e116      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fa1a 	bl	8000e18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2203      	movs	r2, #3
 80029e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fb2c 	bl	8005060 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	687e      	ldr	r6, [r7, #4]
 8002a10:	466d      	mov	r5, sp
 8002a12:	f106 0410 	add.w	r4, r6, #16
 8002a16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a26:	1d33      	adds	r3, r6, #4
 8002a28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a2a:	6838      	ldr	r0, [r7, #0]
 8002a2c:	f002 fac0 	bl	8004fb0 <USB_CoreInit>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0d7      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f002 fb1a 	bl	8005082 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e04a      	b.n	8002aea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	333d      	adds	r3, #61	; 0x3d
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	333c      	adds	r3, #60	; 0x3c
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	b298      	uxth	r0, r3
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3342      	adds	r3, #66	; 0x42
 8002a90:	4602      	mov	r2, r0
 8002a92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	333f      	adds	r3, #63	; 0x3f
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3344      	adds	r3, #68	; 0x44
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002abc:	7bfa      	ldrb	r2, [r7, #15]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3348      	adds	r3, #72	; 0x48
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3350      	adds	r3, #80	; 0x50
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d3af      	bcc.n	8002a54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e044      	b.n	8002b84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b3c:	7bfa      	ldrb	r2, [r7, #15]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	3301      	adds	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d3b5      	bcc.n	8002afa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	687e      	ldr	r6, [r7, #4]
 8002b96:	466d      	mov	r5, sp
 8002b98:	f106 0410 	add.w	r4, r6, #16
 8002b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bac:	1d33      	adds	r3, r6, #4
 8002bae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb0:	6838      	ldr	r0, [r7, #0]
 8002bb2:	f002 fa91 	bl	80050d8 <USB_DevInit>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d005      	beq.n	8002bc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e014      	b.n	8002bf2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f80b 	bl	8002bfc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 fc43 	bl	8005476 <USB_DevDisconnect>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002bfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c2a:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	10000003 	.word	0x10000003

08002c44 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	; 0x40
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_PWREx_EnableOverDrive+0x98>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c66:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c72:	f7fe fa43 	bl	80010fc <HAL_GetTick>
 8002c76:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c78:	e009      	b.n	8002c8e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c7a:	f7fe fa3f 	bl	80010fc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c88:	d901      	bls.n	8002c8e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e022      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d1ee      	bne.n	8002c7a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c9c:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7fe fa28 	bl	80010fc <HAL_GetTick>
 8002cac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cae:	e009      	b.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa24 	bl	80010fc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cbe:	d901      	bls.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e007      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002cec:	2300      	movs	r3, #0
 8002cee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e29b      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8087 	beq.w	8002e16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d08:	4b96      	ldr	r3, [pc, #600]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d00c      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d14:	4b93      	ldr	r3, [pc, #588]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d112      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
 8002d20:	4b90      	ldr	r3, [pc, #576]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2c:	d10b      	bne.n	8002d46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d06c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x130>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d168      	bne.n	8002e14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e275      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x7a>
 8002d50:	4b84      	ldr	r3, [pc, #528]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a83      	ldr	r2, [pc, #524]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	e02e      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x9c>
 8002d66:	4b7f      	ldr	r3, [pc, #508]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a7e      	ldr	r2, [pc, #504]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	4b7c      	ldr	r3, [pc, #496]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a7b      	ldr	r2, [pc, #492]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	e01d      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0xc0>
 8002d8a:	4b76      	ldr	r3, [pc, #472]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a75      	ldr	r2, [pc, #468]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b73      	ldr	r3, [pc, #460]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a72      	ldr	r2, [pc, #456]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e00b      	b.n	8002dbc <HAL_RCC_OscConfig+0xd8>
 8002da4:	4b6f      	ldr	r3, [pc, #444]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b6c      	ldr	r3, [pc, #432]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d013      	beq.n	8002dec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f99a 	bl	80010fc <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dcc:	f7fe f996 	bl	80010fc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b64      	cmp	r3, #100	; 0x64
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e229      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	4b61      	ldr	r3, [pc, #388]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe8>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe f986 	bl	80010fc <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe f982 	bl	80010fc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e215      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x110>
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d069      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e22:	4b50      	ldr	r3, [pc, #320]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00b      	beq.n	8002e46 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b4d      	ldr	r3, [pc, #308]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d11c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x190>
 8002e3a:	4b4a      	ldr	r3, [pc, #296]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d116      	bne.n	8002e74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e46:	4b47      	ldr	r3, [pc, #284]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d001      	beq.n	8002e5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e1e9      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5e:	4b41      	ldr	r3, [pc, #260]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	493d      	ldr	r1, [pc, #244]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e72:	e040      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a38      	ldr	r2, [pc, #224]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002e82:	f043 0301 	orr.w	r3, r3, #1
 8002e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f938 	bl	80010fc <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe f934 	bl	80010fc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1c7      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea2:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4929      	ldr	r1, [pc, #164]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
 8002ec2:	e018      	b.n	8002ef6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ec4:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eca:	f023 0301 	bic.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe f914 	bl	80010fc <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed8:	f7fe f910 	bl	80010fc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e1a3      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d038      	beq.n	8002f74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d019      	beq.n	8002f3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0e:	4a15      	ldr	r2, [pc, #84]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f16:	f7fe f8f1 	bl	80010fc <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f8ed 	bl	80010fc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e180      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x23a>
 8002f3c:	e01a      	b.n	8002f74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <HAL_RCC_OscConfig+0x280>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4a:	f7fe f8d7 	bl	80010fc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f52:	f7fe f8d3 	bl	80010fc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d903      	bls.n	8002f68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e166      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
 8002f64:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b92      	ldr	r3, [pc, #584]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ee      	bne.n	8002f52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a4 	beq.w	80030ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f82:	4b8c      	ldr	r3, [pc, #560]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10d      	bne.n	8002faa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b89      	ldr	r3, [pc, #548]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	4a88      	ldr	r2, [pc, #544]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9a:	4b86      	ldr	r3, [pc, #536]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fb6:	4b80      	ldr	r3, [pc, #512]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7f      	ldr	r2, [pc, #508]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f89b 	bl	80010fc <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fe f897 	bl	80010fc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b64      	cmp	r3, #100	; 0x64
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e12a      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b76      	ldr	r3, [pc, #472]	; (80031b8 <HAL_RCC_OscConfig+0x4d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x31a>
 8002ff0:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff4:	4a6f      	ldr	r2, [pc, #444]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffc:	e02d      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x33c>
 8003006:	4b6b      	ldr	r3, [pc, #428]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a6a      	ldr	r2, [pc, #424]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	e01c      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x35e>
 8003028:	4b62      	ldr	r3, [pc, #392]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800302a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302c:	4a61      	ldr	r2, [pc, #388]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6713      	str	r3, [r2, #112]	; 0x70
 8003034:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003038:	4a5e      	ldr	r2, [pc, #376]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6713      	str	r3, [r2, #112]	; 0x70
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x376>
 8003042:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	4a5b      	ldr	r2, [pc, #364]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6713      	str	r3, [r2, #112]	; 0x70
 800304e:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a58      	ldr	r2, [pc, #352]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d015      	beq.n	800308e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003062:	f7fe f84b 	bl	80010fc <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e00a      	b.n	8003080 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe f847 	bl	80010fc <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	f241 3288 	movw	r2, #5000	; 0x1388
 8003078:	4293      	cmp	r3, r2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e0d8      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003080:	4b4c      	ldr	r3, [pc, #304]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0ee      	beq.n	800306a <HAL_RCC_OscConfig+0x386>
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308e:	f7fe f835 	bl	80010fc <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe f831 	bl	80010fc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0c2      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1ee      	bne.n	8003096 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d105      	bne.n	80030ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030be:	4b3d      	ldr	r3, [pc, #244]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80ae 	beq.w	8003230 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d4:	4b37      	ldr	r3, [pc, #220]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 030c 	and.w	r3, r3, #12
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d06d      	beq.n	80031bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d14b      	bne.n	8003180 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e8:	4b32      	ldr	r3, [pc, #200]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a31      	ldr	r2, [pc, #196]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe f802 	bl	80010fc <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd fffe 	bl	80010fc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e091      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	3b01      	subs	r3, #1
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	061b      	lsls	r3, r3, #24
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	071b      	lsls	r3, r3, #28
 8003146:	491b      	ldr	r1, [pc, #108]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fd ffd0 	bl	80010fc <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003160:	f7fd ffcc 	bl	80010fc <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e05f      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x47c>
 800317e:	e057      	b.n	8003230 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 8003186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800318a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fd ffb6 	bl	80010fc <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fd ffb2 	bl	80010fc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e045      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a6:	4b03      	ldr	r3, [pc, #12]	; (80031b4 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x4b0>
 80031b2:	e03d      	b.n	8003230 <HAL_RCC_OscConfig+0x54c>
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031bc:	4b1f      	ldr	r3, [pc, #124]	; (800323c <HAL_RCC_OscConfig+0x558>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d030      	beq.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d129      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d122      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ec:	4013      	ands	r3, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d119      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	3b01      	subs	r3, #1
 8003206:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003208:	429a      	cmp	r2, r3
 800320a:	d10f      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800

08003240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0d0      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b6a      	ldr	r3, [pc, #424]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 020f 	bic.w	r2, r3, #15
 800326e:	4965      	ldr	r1, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d040      	beq.n	8003364 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d115      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d109      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e073      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003312:	4b3d      	ldr	r3, [pc, #244]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06b      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4936      	ldr	r1, [pc, #216]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003334:	f7fd fee2 	bl	80010fc <HAL_GetTick>
 8003338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333a:	e00a      	b.n	8003352 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fd fede 	bl	80010fc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e053      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 020c 	and.w	r2, r3, #12
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	429a      	cmp	r2, r3
 8003362:	d1eb      	bne.n	800333c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003364:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d210      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 020f 	bic.w	r2, r3, #15
 800337a:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1c8>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1cc>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1d0>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd fd6c 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	0801c360 	.word	0x0801c360
 8003410:	20000000 	.word	0x20000000
 8003414:	20000004 	.word	0x20000004

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	607b      	str	r3, [r7, #4]
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	2300      	movs	r3, #0
 800342a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80bd 	bhi.w	80035bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0b7      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b61      	ldr	r3, [pc, #388]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800344e:	60bb      	str	r3, [r7, #8]
      break;
 8003450:	e0b7      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003454:	60bb      	str	r3, [r7, #8]
      break;
 8003456:	e0b4      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b5d      	ldr	r3, [pc, #372]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003462:	4b5b      	ldr	r3, [pc, #364]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d04d      	beq.n	800350a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800347e:	f04f 0100 	mov.w	r1, #0
 8003482:	ea02 0800 	and.w	r8, r2, r0
 8003486:	ea03 0901 	and.w	r9, r3, r1
 800348a:	4640      	mov	r0, r8
 800348c:	4649      	mov	r1, r9
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	014b      	lsls	r3, r1, #5
 8003498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800349c:	0142      	lsls	r2, r0, #5
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	ebb0 0008 	subs.w	r0, r0, r8
 80034a6:	eb61 0109 	sbc.w	r1, r1, r9
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	018b      	lsls	r3, r1, #6
 80034b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034b8:	0182      	lsls	r2, r0, #6
 80034ba:	1a12      	subs	r2, r2, r0
 80034bc:	eb63 0301 	sbc.w	r3, r3, r1
 80034c0:	f04f 0000 	mov.w	r0, #0
 80034c4:	f04f 0100 	mov.w	r1, #0
 80034c8:	00d9      	lsls	r1, r3, #3
 80034ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ce:	00d0      	lsls	r0, r2, #3
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	eb12 0208 	adds.w	r2, r2, r8
 80034d8:	eb43 0309 	adc.w	r3, r3, r9
 80034dc:	f04f 0000 	mov.w	r0, #0
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	0259      	lsls	r1, r3, #9
 80034e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80034ea:	0250      	lsls	r0, r2, #9
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	f7fc fef0 	bl	80002e0 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e04a      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	461a      	mov	r2, r3
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	ea02 0400 	and.w	r4, r2, r0
 8003522:	ea03 0501 	and.w	r5, r3, r1
 8003526:	4620      	mov	r0, r4
 8003528:	4629      	mov	r1, r5
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	014b      	lsls	r3, r1, #5
 8003534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003538:	0142      	lsls	r2, r0, #5
 800353a:	4610      	mov	r0, r2
 800353c:	4619      	mov	r1, r3
 800353e:	1b00      	subs	r0, r0, r4
 8003540:	eb61 0105 	sbc.w	r1, r1, r5
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	018b      	lsls	r3, r1, #6
 800354e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003552:	0182      	lsls	r2, r0, #6
 8003554:	1a12      	subs	r2, r2, r0
 8003556:	eb63 0301 	sbc.w	r3, r3, r1
 800355a:	f04f 0000 	mov.w	r0, #0
 800355e:	f04f 0100 	mov.w	r1, #0
 8003562:	00d9      	lsls	r1, r3, #3
 8003564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003568:	00d0      	lsls	r0, r2, #3
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	1912      	adds	r2, r2, r4
 8003570:	eb45 0303 	adc.w	r3, r5, r3
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f04f 0100 	mov.w	r1, #0
 800357c:	0299      	lsls	r1, r3, #10
 800357e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003582:	0290      	lsls	r0, r2, #10
 8003584:	4602      	mov	r2, r0
 8003586:	460b      	mov	r3, r1
 8003588:	4610      	mov	r0, r2
 800358a:	4619      	mov	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f7fc fea4 	bl	80002e0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0c1b      	lsrs	r3, r3, #16
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	3301      	adds	r3, #1
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b8:	60bb      	str	r3, [r7, #8]
      break;
 80035ba:	e002      	b.n	80035c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80035be:	60bb      	str	r3, [r7, #8]
      break;
 80035c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c2:	68bb      	ldr	r3, [r7, #8]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	00f42400 	.word	0x00f42400
 80035d8:	007a1200 	.word	0x007a1200

080035dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000000 	.word	0x20000000

080035f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f8:	f7ff fff0 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	0a9b      	lsrs	r3, r3, #10
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	4903      	ldr	r1, [pc, #12]	; (8003618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360a:	5ccb      	ldrb	r3, [r1, r3]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003610:	4618      	mov	r0, r3
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	0801c370 	.word	0x0801c370

0800361c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003620:	f7ff ffdc 	bl	80035dc <HAL_RCC_GetHCLKFreq>
 8003624:	4602      	mov	r2, r0
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	0b5b      	lsrs	r3, r3, #13
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	4903      	ldr	r1, [pc, #12]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003632:	5ccb      	ldrb	r3, [r1, r3]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003638:	4618      	mov	r0, r3
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40023800 	.word	0x40023800
 8003640:	0801c370 	.word	0x0801c370

08003644 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	220f      	movs	r2, #15
 8003652:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003654:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003660:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_GetClockConfig+0x5c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	08db      	lsrs	r3, r3, #3
 800367e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCC_GetClockConfig+0x60>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	601a      	str	r2, [r3, #0]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40023c00 	.word	0x40023c00

080036a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b088      	sub	sp, #32
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036d0:	4b69      	ldr	r3, [pc, #420]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a68      	ldr	r2, [pc, #416]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036da:	6093      	str	r3, [r2, #8]
 80036dc:	4b66      	ldr	r3, [pc, #408]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	4964      	ldr	r1, [pc, #400]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036f2:	2301      	movs	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003702:	4b5d      	ldr	r3, [pc, #372]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	4959      	ldr	r1, [pc, #356]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800372e:	2301      	movs	r3, #1
 8003730:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d017      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800373e:	4b4e      	ldr	r3, [pc, #312]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003744:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	494a      	ldr	r1, [pc, #296]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800376a:	2301      	movs	r3, #1
 800376c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800377a:	2301      	movs	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 808b 	beq.w	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a39      	ldr	r2, [pc, #228]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
 8003798:	4b37      	ldr	r3, [pc, #220]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037a4:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a34      	ldr	r2, [pc, #208]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fd fca4 	bl	80010fc <HAL_GetTick>
 80037b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fd fca0 	bl	80010fc <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e38f      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037ca:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037d6:	4b28      	ldr	r3, [pc, #160]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d035      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d02e      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	4a1d      	ldr	r2, [pc, #116]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800380a:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	4a1a      	ldr	r2, [pc, #104]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003814:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003816:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800381c:	4b16      	ldr	r3, [pc, #88]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d114      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7fd fc68 	bl	80010fc <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fd fc64 	bl	80010fc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e351      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ee      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	d111      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003860:	4b05      	ldr	r3, [pc, #20]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800386e:	400b      	ands	r3, r1
 8003870:	4901      	ldr	r1, [pc, #4]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
 8003876:	e00b      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000
 8003880:	0ffffcff 	.word	0x0ffffcff
 8003884:	4bb3      	ldr	r3, [pc, #716]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4ab2      	ldr	r2, [pc, #712]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	4bb0      	ldr	r3, [pc, #704]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003892:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	49ad      	ldr	r1, [pc, #692]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0310 	and.w	r3, r3, #16
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ae:	4ba9      	ldr	r3, [pc, #676]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038b4:	4aa7      	ldr	r2, [pc, #668]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038be:	4ba5      	ldr	r3, [pc, #660]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	49a2      	ldr	r1, [pc, #648]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038dc:	4b9d      	ldr	r3, [pc, #628]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ea:	499a      	ldr	r1, [pc, #616]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038fe:	4b95      	ldr	r3, [pc, #596]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003904:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800390c:	4991      	ldr	r1, [pc, #580]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390e:	4313      	orrs	r3, r2
 8003910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003920:	4b8c      	ldr	r3, [pc, #560]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800392e:	4989      	ldr	r1, [pc, #548]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003942:	4b84      	ldr	r3, [pc, #528]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003950:	4980      	ldr	r1, [pc, #512]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003952:	4313      	orrs	r3, r2
 8003954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003964:	4b7b      	ldr	r3, [pc, #492]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4978      	ldr	r1, [pc, #480]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003986:	4b73      	ldr	r3, [pc, #460]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398c:	f023 020c 	bic.w	r2, r3, #12
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003994:	496f      	ldr	r1, [pc, #444]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039a8:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4967      	ldr	r1, [pc, #412]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039ca:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	495e      	ldr	r1, [pc, #376]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	4956      	ldr	r1, [pc, #344]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	494d      	ldr	r1, [pc, #308]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a30:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a36:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	4945      	ldr	r1, [pc, #276]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00a      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a52:	4b40      	ldr	r3, [pc, #256]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a60:	493c      	ldr	r1, [pc, #240]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a82:	4934      	ldr	r1, [pc, #208]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a96:	4b2f      	ldr	r3, [pc, #188]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aa4:	492b      	ldr	r1, [pc, #172]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ab4:	d101      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae4:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b08:	4912      	ldr	r1, [pc, #72]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00b      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2c:	4909      	ldr	r1, [pc, #36]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00f      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	4986      	ldr	r1, [pc, #536]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b6c:	4b81      	ldr	r3, [pc, #516]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b7c:	497d      	ldr	r1, [pc, #500]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d006      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80d6 	beq.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b98:	4b76      	ldr	r3, [pc, #472]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a75      	ldr	r2, [pc, #468]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ba4:	f7fd faaa 	bl	80010fc <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bac:	f7fd faa6 	bl	80010fc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e195      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bbe:	4b6d      	ldr	r3, [pc, #436]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11d      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bde:	4b65      	ldr	r3, [pc, #404]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf2:	0e1b      	lsrs	r3, r3, #24
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	019a      	lsls	r2, r3, #6
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	4958      	ldr	r1, [pc, #352]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02e      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c44:	d129      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c46:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c54:	4b47      	ldr	r3, [pc, #284]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	493e      	ldr	r1, [pc, #248]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c88:	f023 021f 	bic.w	r2, r3, #31
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4938      	ldr	r1, [pc, #224]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ca6:	4b33      	ldr	r3, [pc, #204]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cba:	0f1b      	lsrs	r3, r3, #28
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	071b      	lsls	r3, r3, #28
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d011      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	019a      	lsls	r2, r3, #6
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	061b      	lsls	r3, r3, #24
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	491a      	ldr	r1, [pc, #104]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1e:	f7fd f9ed 	bl	80010fc <HAL_GetTick>
 8003d22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d24:	e008      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d26:	f7fd f9e9 	bl	80010fc <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	2b64      	cmp	r3, #100	; 0x64
 8003d32:	d901      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e0d8      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d38:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d0f0      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 80ce 	bne.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d4c:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fd f9d0 	bl	80010fc <HAL_GetTick>
 8003d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d60:	f7fd f9cc 	bl	80010fc <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b64      	cmp	r3, #100	; 0x64
 8003d6c:	d904      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e0bb      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d78:	4b5e      	ldr	r3, [pc, #376]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d84:	d0ec      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d02e      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d12a      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc2:	0f1b      	lsrs	r3, r3, #28
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	019a      	lsls	r2, r3, #6
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	041b      	lsls	r3, r3, #16
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	061b      	lsls	r3, r3, #24
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	4944      	ldr	r1, [pc, #272]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dea:	4b42      	ldr	r3, [pc, #264]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	493d      	ldr	r1, [pc, #244]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d022      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e18:	d11d      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e1a:	4b36      	ldr	r3, [pc, #216]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	0e1b      	lsrs	r3, r3, #24
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e28:	4b32      	ldr	r3, [pc, #200]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2e:	0f1b      	lsrs	r3, r3, #28
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	019a      	lsls	r2, r3, #6
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	431a      	orrs	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	4929      	ldr	r1, [pc, #164]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d028      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e62:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	0e1b      	lsrs	r3, r3, #24
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	019a      	lsls	r2, r3, #6
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	071b      	lsls	r3, r3, #28
 8003e96:	4917      	ldr	r1, [pc, #92]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e9e:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4911      	ldr	r1, [pc, #68]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ec0:	f7fd f91c 	bl	80010fc <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ec8:	f7fd f918 	bl	80010fc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b64      	cmp	r3, #100	; 0x64
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e007      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee6:	d1ef      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e049      	b.n	8003f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f841 	bl	8003fa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 fa00 	bl	800433c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
	...

08003fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d001      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e054      	b.n	800407e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <HAL_TIM_Base_Start_IT+0xd0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffe:	d01d      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a22      	ldr	r2, [pc, #136]	; (8004090 <HAL_TIM_Base_Start_IT+0xd4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a21      	ldr	r2, [pc, #132]	; (8004094 <HAL_TIM_Base_Start_IT+0xd8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_TIM_Base_Start_IT+0xdc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1e      	ldr	r2, [pc, #120]	; (800409c <HAL_TIM_Base_Start_IT+0xe0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d115      	bne.n	8004068 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004044:	4013      	ands	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b06      	cmp	r3, #6
 800404c:	d015      	beq.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d011      	beq.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	e008      	b.n	800407a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	e000      	b.n	800407c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40010000 	.word	0x40010000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	40010400 	.word	0x40010400
 80040a0:	40014000 	.word	0x40014000
 80040a4:	40001800 	.word	0x40001800
 80040a8:	00010007 	.word	0x00010007

080040ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0202 	mvn.w	r2, #2
 80040d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f905 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f8f7 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f908 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0304 	and.w	r3, r3, #4
 8004112:	2b04      	cmp	r3, #4
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b04      	cmp	r3, #4
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0204 	mvn.w	r2, #4
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8db 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f8cd 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8de 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b08      	cmp	r3, #8
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b08      	cmp	r3, #8
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0208 	mvn.w	r2, #8
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2204      	movs	r2, #4
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8b1 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8a3 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8b4 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d122      	bne.n	8004204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d11b      	bne.n	8004204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0210 	mvn.w	r2, #16
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2208      	movs	r2, #8
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f887 	bl	80042fe <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f879 	bl	80042ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f88a 	bl	8004312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b01      	cmp	r3, #1
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0201 	mvn.w	r2, #1
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f7fc fca0 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b80      	cmp	r3, #128	; 0x80
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f91a 	bl	8004490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b80      	cmp	r3, #128	; 0x80
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f90d 	bl	80044a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f838 	bl	8004326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0220 	mvn.w	r2, #32
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f8cd 	bl	800447c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a40      	ldr	r2, [pc, #256]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d013      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435a:	d00f      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a3d      	ldr	r2, [pc, #244]	; (8004454 <TIM_Base_SetConfig+0x118>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00b      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d007      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3b      	ldr	r2, [pc, #236]	; (800445c <TIM_Base_SetConfig+0x120>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d003      	beq.n	800437c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d027      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <TIM_Base_SetConfig+0x118>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d023      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <TIM_Base_SetConfig+0x11c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <TIM_Base_SetConfig+0x120>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a29      	ldr	r2, [pc, #164]	; (8004460 <TIM_Base_SetConfig+0x124>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d017      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a28      	ldr	r2, [pc, #160]	; (8004464 <TIM_Base_SetConfig+0x128>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a27      	ldr	r2, [pc, #156]	; (8004468 <TIM_Base_SetConfig+0x12c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <TIM_Base_SetConfig+0x130>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a25      	ldr	r2, [pc, #148]	; (8004470 <TIM_Base_SetConfig+0x134>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <TIM_Base_SetConfig+0x138>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <TIM_Base_SetConfig+0x13c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <TIM_Base_SetConfig+0x114>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d003      	beq.n	8004434 <TIM_Base_SetConfig+0xf8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <TIM_Base_SetConfig+0x124>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d103      	bne.n	800443c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	691a      	ldr	r2, [r3, #16]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	615a      	str	r2, [r3, #20]
}
 8004442:	bf00      	nop
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010000 	.word	0x40010000
 8004454:	40000400 	.word	0x40000400
 8004458:	40000800 	.word	0x40000800
 800445c:	40000c00 	.word	0x40000c00
 8004460:	40010400 	.word	0x40010400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40001800 	.word	0x40001800
 8004474:	40001c00 	.word	0x40001c00
 8004478:	40002000 	.word	0x40002000

0800447c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e040      	b.n	800454c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fc fc58 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 0201 	bic.w	r2, r2, #1
 80044f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f990 	bl	800481c <UART_SetConfig>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e022      	b.n	800454c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d002      	beq.n	8004514 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fbe6 	bl	8004ce0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0201 	orr.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fc6d 	bl	8004e24 <UART_CheckIdleState>
 800454a:	4603      	mov	r3, r0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004568:	2b20      	cmp	r3, #32
 800456a:	f040 8081 	bne.w	8004670 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_Transmit+0x26>
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e079      	b.n	8004672 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_UART_Transmit+0x38>
 8004588:	2302      	movs	r3, #2
 800458a:	e072      	b.n	8004672 <HAL_UART_Transmit+0x11e>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2221      	movs	r2, #33	; 0x21
 80045a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045a2:	f7fc fdab 	bl	80010fc <HAL_GetTick>
 80045a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d108      	bne.n	80045d4 <HAL_UART_Transmit+0x80>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d104      	bne.n	80045d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	e003      	b.n	80045dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045e4:	e02c      	b.n	8004640 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fc60 	bl	8004eb6 <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e038      	b.n	8004672 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3302      	adds	r3, #2
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e007      	b.n	800462e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1cc      	bne.n	80045e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2200      	movs	r2, #0
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fc2d 	bl	8004eb6 <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e005      	b.n	8004672 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08a      	sub	sp, #40	; 0x28
 800467e:	af02      	add	r7, sp, #8
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	603b      	str	r3, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800468e:	2b20      	cmp	r3, #32
 8004690:	f040 80be 	bne.w	8004810 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_UART_Receive+0x26>
 800469a:	88fb      	ldrh	r3, [r7, #6]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0b6      	b.n	8004812 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Receive+0x38>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e0af      	b.n	8004812 <HAL_UART_Receive+0x198>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2222      	movs	r2, #34	; 0x22
 80046c6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ce:	f7fc fd15 	bl	80010fc <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d10e      	bne.n	800470c <HAL_UART_Receive+0x92>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d105      	bne.n	8004702 <HAL_UART_Receive+0x88>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004700:	e02d      	b.n	800475e <HAL_UART_Receive+0xe4>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470a:	e028      	b.n	800475e <HAL_UART_Receive+0xe4>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <HAL_UART_Receive+0xb6>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d104      	bne.n	8004726 <HAL_UART_Receive+0xac>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	22ff      	movs	r2, #255	; 0xff
 8004720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004724:	e01b      	b.n	800475e <HAL_UART_Receive+0xe4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	227f      	movs	r2, #127	; 0x7f
 800472a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800472e:	e016      	b.n	800475e <HAL_UART_Receive+0xe4>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004738:	d10d      	bne.n	8004756 <HAL_UART_Receive+0xdc>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d104      	bne.n	800474c <HAL_UART_Receive+0xd2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	227f      	movs	r2, #127	; 0x7f
 8004746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800474a:	e008      	b.n	800475e <HAL_UART_Receive+0xe4>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	223f      	movs	r2, #63	; 0x3f
 8004750:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004754:	e003      	b.n	800475e <HAL_UART_Receive+0xe4>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004764:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d108      	bne.n	8004782 <HAL_UART_Receive+0x108>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8004778:	2300      	movs	r3, #0
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e003      	b.n	800478a <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004792:	e032      	b.n	80047fa <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	2120      	movs	r1, #32
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fb89 	bl	8004eb6 <UART_WaitOnFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e031      	b.n	8004812 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	8a7b      	ldrh	r3, [r7, #18]
 80047be:	4013      	ands	r3, r2
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	3302      	adds	r3, #2
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e00c      	b.n	80047e8 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	4013      	ands	r3, r2
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1c6      	bne.n	8004794 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2220      	movs	r2, #32
 800480a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3720      	adds	r7, #32
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4ba7      	ldr	r3, [pc, #668]	; (8004ae4 <UART_SetConfig+0x2c8>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6979      	ldr	r1, [r7, #20]
 8004850:	430b      	orrs	r3, r1
 8004852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a95      	ldr	r2, [pc, #596]	; (8004ae8 <UART_SetConfig+0x2cc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d120      	bne.n	80048da <UART_SetConfig+0xbe>
 8004898:	4b94      	ldr	r3, [pc, #592]	; (8004aec <UART_SetConfig+0x2d0>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d816      	bhi.n	80048d4 <UART_SetConfig+0xb8>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x90>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048c9 	.word	0x080048c9
 80048b4:	080048c3 	.word	0x080048c3
 80048b8:	080048cf 	.word	0x080048cf
 80048bc:	2301      	movs	r3, #1
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	e14f      	b.n	8004b62 <UART_SetConfig+0x346>
 80048c2:	2302      	movs	r3, #2
 80048c4:	77fb      	strb	r3, [r7, #31]
 80048c6:	e14c      	b.n	8004b62 <UART_SetConfig+0x346>
 80048c8:	2304      	movs	r3, #4
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e149      	b.n	8004b62 <UART_SetConfig+0x346>
 80048ce:	2308      	movs	r3, #8
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e146      	b.n	8004b62 <UART_SetConfig+0x346>
 80048d4:	2310      	movs	r3, #16
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e143      	b.n	8004b62 <UART_SetConfig+0x346>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a84      	ldr	r2, [pc, #528]	; (8004af0 <UART_SetConfig+0x2d4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d132      	bne.n	800494a <UART_SetConfig+0x12e>
 80048e4:	4b81      	ldr	r3, [pc, #516]	; (8004aec <UART_SetConfig+0x2d0>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b0c      	cmp	r3, #12
 80048f0:	d828      	bhi.n	8004944 <UART_SetConfig+0x128>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0xdc>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	0800492d 	.word	0x0800492d
 80048fc:	08004945 	.word	0x08004945
 8004900:	08004945 	.word	0x08004945
 8004904:	08004945 	.word	0x08004945
 8004908:	08004939 	.word	0x08004939
 800490c:	08004945 	.word	0x08004945
 8004910:	08004945 	.word	0x08004945
 8004914:	08004945 	.word	0x08004945
 8004918:	08004933 	.word	0x08004933
 800491c:	08004945 	.word	0x08004945
 8004920:	08004945 	.word	0x08004945
 8004924:	08004945 	.word	0x08004945
 8004928:	0800493f 	.word	0x0800493f
 800492c:	2300      	movs	r3, #0
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e117      	b.n	8004b62 <UART_SetConfig+0x346>
 8004932:	2302      	movs	r3, #2
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e114      	b.n	8004b62 <UART_SetConfig+0x346>
 8004938:	2304      	movs	r3, #4
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e111      	b.n	8004b62 <UART_SetConfig+0x346>
 800493e:	2308      	movs	r3, #8
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e10e      	b.n	8004b62 <UART_SetConfig+0x346>
 8004944:	2310      	movs	r3, #16
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e10b      	b.n	8004b62 <UART_SetConfig+0x346>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a69      	ldr	r2, [pc, #420]	; (8004af4 <UART_SetConfig+0x2d8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d120      	bne.n	8004996 <UART_SetConfig+0x17a>
 8004954:	4b65      	ldr	r3, [pc, #404]	; (8004aec <UART_SetConfig+0x2d0>)
 8004956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800495e:	2b30      	cmp	r3, #48	; 0x30
 8004960:	d013      	beq.n	800498a <UART_SetConfig+0x16e>
 8004962:	2b30      	cmp	r3, #48	; 0x30
 8004964:	d814      	bhi.n	8004990 <UART_SetConfig+0x174>
 8004966:	2b20      	cmp	r3, #32
 8004968:	d009      	beq.n	800497e <UART_SetConfig+0x162>
 800496a:	2b20      	cmp	r3, #32
 800496c:	d810      	bhi.n	8004990 <UART_SetConfig+0x174>
 800496e:	2b00      	cmp	r3, #0
 8004970:	d002      	beq.n	8004978 <UART_SetConfig+0x15c>
 8004972:	2b10      	cmp	r3, #16
 8004974:	d006      	beq.n	8004984 <UART_SetConfig+0x168>
 8004976:	e00b      	b.n	8004990 <UART_SetConfig+0x174>
 8004978:	2300      	movs	r3, #0
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e0f1      	b.n	8004b62 <UART_SetConfig+0x346>
 800497e:	2302      	movs	r3, #2
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e0ee      	b.n	8004b62 <UART_SetConfig+0x346>
 8004984:	2304      	movs	r3, #4
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e0eb      	b.n	8004b62 <UART_SetConfig+0x346>
 800498a:	2308      	movs	r3, #8
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e0e8      	b.n	8004b62 <UART_SetConfig+0x346>
 8004990:	2310      	movs	r3, #16
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e0e5      	b.n	8004b62 <UART_SetConfig+0x346>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a57      	ldr	r2, [pc, #348]	; (8004af8 <UART_SetConfig+0x2dc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d120      	bne.n	80049e2 <UART_SetConfig+0x1c6>
 80049a0:	4b52      	ldr	r3, [pc, #328]	; (8004aec <UART_SetConfig+0x2d0>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049aa:	2bc0      	cmp	r3, #192	; 0xc0
 80049ac:	d013      	beq.n	80049d6 <UART_SetConfig+0x1ba>
 80049ae:	2bc0      	cmp	r3, #192	; 0xc0
 80049b0:	d814      	bhi.n	80049dc <UART_SetConfig+0x1c0>
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d009      	beq.n	80049ca <UART_SetConfig+0x1ae>
 80049b6:	2b80      	cmp	r3, #128	; 0x80
 80049b8:	d810      	bhi.n	80049dc <UART_SetConfig+0x1c0>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <UART_SetConfig+0x1a8>
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d006      	beq.n	80049d0 <UART_SetConfig+0x1b4>
 80049c2:	e00b      	b.n	80049dc <UART_SetConfig+0x1c0>
 80049c4:	2300      	movs	r3, #0
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e0cb      	b.n	8004b62 <UART_SetConfig+0x346>
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e0c8      	b.n	8004b62 <UART_SetConfig+0x346>
 80049d0:	2304      	movs	r3, #4
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e0c5      	b.n	8004b62 <UART_SetConfig+0x346>
 80049d6:	2308      	movs	r3, #8
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e0c2      	b.n	8004b62 <UART_SetConfig+0x346>
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e0bf      	b.n	8004b62 <UART_SetConfig+0x346>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a45      	ldr	r2, [pc, #276]	; (8004afc <UART_SetConfig+0x2e0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d125      	bne.n	8004a38 <UART_SetConfig+0x21c>
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <UART_SetConfig+0x2d0>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049fa:	d017      	beq.n	8004a2c <UART_SetConfig+0x210>
 80049fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a00:	d817      	bhi.n	8004a32 <UART_SetConfig+0x216>
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a06:	d00b      	beq.n	8004a20 <UART_SetConfig+0x204>
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0c:	d811      	bhi.n	8004a32 <UART_SetConfig+0x216>
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <UART_SetConfig+0x1fe>
 8004a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a16:	d006      	beq.n	8004a26 <UART_SetConfig+0x20a>
 8004a18:	e00b      	b.n	8004a32 <UART_SetConfig+0x216>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	77fb      	strb	r3, [r7, #31]
 8004a1e:	e0a0      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a20:	2302      	movs	r3, #2
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e09d      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a26:	2304      	movs	r3, #4
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e09a      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e097      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a32:	2310      	movs	r3, #16
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e094      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a30      	ldr	r2, [pc, #192]	; (8004b00 <UART_SetConfig+0x2e4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d125      	bne.n	8004a8e <UART_SetConfig+0x272>
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <UART_SetConfig+0x2d0>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a50:	d017      	beq.n	8004a82 <UART_SetConfig+0x266>
 8004a52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a56:	d817      	bhi.n	8004a88 <UART_SetConfig+0x26c>
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5c:	d00b      	beq.n	8004a76 <UART_SetConfig+0x25a>
 8004a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a62:	d811      	bhi.n	8004a88 <UART_SetConfig+0x26c>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <UART_SetConfig+0x254>
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d006      	beq.n	8004a7c <UART_SetConfig+0x260>
 8004a6e:	e00b      	b.n	8004a88 <UART_SetConfig+0x26c>
 8004a70:	2301      	movs	r3, #1
 8004a72:	77fb      	strb	r3, [r7, #31]
 8004a74:	e075      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e072      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e06f      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a82:	2308      	movs	r3, #8
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e06c      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e069      	b.n	8004b62 <UART_SetConfig+0x346>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a1c      	ldr	r2, [pc, #112]	; (8004b04 <UART_SetConfig+0x2e8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d137      	bne.n	8004b08 <UART_SetConfig+0x2ec>
 8004a98:	4b14      	ldr	r3, [pc, #80]	; (8004aec <UART_SetConfig+0x2d0>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aa6:	d017      	beq.n	8004ad8 <UART_SetConfig+0x2bc>
 8004aa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aac:	d817      	bhi.n	8004ade <UART_SetConfig+0x2c2>
 8004aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab2:	d00b      	beq.n	8004acc <UART_SetConfig+0x2b0>
 8004ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab8:	d811      	bhi.n	8004ade <UART_SetConfig+0x2c2>
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <UART_SetConfig+0x2aa>
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac2:	d006      	beq.n	8004ad2 <UART_SetConfig+0x2b6>
 8004ac4:	e00b      	b.n	8004ade <UART_SetConfig+0x2c2>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e04a      	b.n	8004b62 <UART_SetConfig+0x346>
 8004acc:	2302      	movs	r3, #2
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e047      	b.n	8004b62 <UART_SetConfig+0x346>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e044      	b.n	8004b62 <UART_SetConfig+0x346>
 8004ad8:	2308      	movs	r3, #8
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e041      	b.n	8004b62 <UART_SetConfig+0x346>
 8004ade:	2310      	movs	r3, #16
 8004ae0:	77fb      	strb	r3, [r7, #31]
 8004ae2:	e03e      	b.n	8004b62 <UART_SetConfig+0x346>
 8004ae4:	efff69f3 	.word	0xefff69f3
 8004ae8:	40011000 	.word	0x40011000
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40004400 	.word	0x40004400
 8004af4:	40004800 	.word	0x40004800
 8004af8:	40004c00 	.word	0x40004c00
 8004afc:	40005000 	.word	0x40005000
 8004b00:	40011400 	.word	0x40011400
 8004b04:	40007800 	.word	0x40007800
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a71      	ldr	r2, [pc, #452]	; (8004cd4 <UART_SetConfig+0x4b8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d125      	bne.n	8004b5e <UART_SetConfig+0x342>
 8004b12:	4b71      	ldr	r3, [pc, #452]	; (8004cd8 <UART_SetConfig+0x4bc>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b20:	d017      	beq.n	8004b52 <UART_SetConfig+0x336>
 8004b22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b26:	d817      	bhi.n	8004b58 <UART_SetConfig+0x33c>
 8004b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b2c:	d00b      	beq.n	8004b46 <UART_SetConfig+0x32a>
 8004b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b32:	d811      	bhi.n	8004b58 <UART_SetConfig+0x33c>
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d003      	beq.n	8004b40 <UART_SetConfig+0x324>
 8004b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3c:	d006      	beq.n	8004b4c <UART_SetConfig+0x330>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x33c>
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e00d      	b.n	8004b62 <UART_SetConfig+0x346>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e00a      	b.n	8004b62 <UART_SetConfig+0x346>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e007      	b.n	8004b62 <UART_SetConfig+0x346>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e004      	b.n	8004b62 <UART_SetConfig+0x346>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e001      	b.n	8004b62 <UART_SetConfig+0x346>
 8004b5e:	2310      	movs	r3, #16
 8004b60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6a:	d15b      	bne.n	8004c24 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004b6c:	7ffb      	ldrb	r3, [r7, #31]
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d827      	bhi.n	8004bc2 <UART_SetConfig+0x3a6>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0x35c>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004ba5 	.word	0x08004ba5
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bc3 	.word	0x08004bc3
 8004b88:	08004bb3 	.word	0x08004bb3
 8004b8c:	08004bc3 	.word	0x08004bc3
 8004b90:	08004bc3 	.word	0x08004bc3
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fe fd2a 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8004ba0:	61b8      	str	r0, [r7, #24]
        break;
 8004ba2:	e013      	b.n	8004bcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7fe fd3a 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8004ba8:	61b8      	str	r0, [r7, #24]
        break;
 8004baa:	e00f      	b.n	8004bcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <UART_SetConfig+0x4c0>)
 8004bae:	61bb      	str	r3, [r7, #24]
        break;
 8004bb0:	e00c      	b.n	8004bcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7fe fc31 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004bb6:	61b8      	str	r0, [r7, #24]
        break;
 8004bb8:	e008      	b.n	8004bcc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	61bb      	str	r3, [r7, #24]
        break;
 8004bc0:	e004      	b.n	8004bcc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	77bb      	strb	r3, [r7, #30]
        break;
 8004bca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d074      	beq.n	8004cbc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	005a      	lsls	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d916      	bls.n	8004c1e <UART_SetConfig+0x402>
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf6:	d212      	bcs.n	8004c1e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f023 030f 	bic.w	r3, r3, #15
 8004c00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	89fb      	ldrh	r3, [r7, #14]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	89fa      	ldrh	r2, [r7, #14]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e04e      	b.n	8004cbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	77bb      	strb	r3, [r7, #30]
 8004c22:	e04b      	b.n	8004cbc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c24:	7ffb      	ldrb	r3, [r7, #31]
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d827      	bhi.n	8004c7a <UART_SetConfig+0x45e>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x414>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	08004c7b 	.word	0x08004c7b
 8004c40:	08004c6b 	.word	0x08004c6b
 8004c44:	08004c7b 	.word	0x08004c7b
 8004c48:	08004c7b 	.word	0x08004c7b
 8004c4c:	08004c7b 	.word	0x08004c7b
 8004c50:	08004c73 	.word	0x08004c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7fe fcce 	bl	80035f4 <HAL_RCC_GetPCLK1Freq>
 8004c58:	61b8      	str	r0, [r7, #24]
        break;
 8004c5a:	e013      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c5c:	f7fe fcde 	bl	800361c <HAL_RCC_GetPCLK2Freq>
 8004c60:	61b8      	str	r0, [r7, #24]
        break;
 8004c62:	e00f      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c64:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <UART_SetConfig+0x4c0>)
 8004c66:	61bb      	str	r3, [r7, #24]
        break;
 8004c68:	e00c      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6a:	f7fe fbd5 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004c6e:	61b8      	str	r0, [r7, #24]
        break;
 8004c70:	e008      	b.n	8004c84 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c76:	61bb      	str	r3, [r7, #24]
        break;
 8004c78:	e004      	b.n	8004c84 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	77bb      	strb	r3, [r7, #30]
        break;
 8004c82:	bf00      	nop
    }

    if (pclk != 0U)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d018      	beq.n	8004cbc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	085a      	lsrs	r2, r3, #1
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	441a      	add	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	2b0f      	cmp	r3, #15
 8004ca4:	d908      	bls.n	8004cb8 <UART_SetConfig+0x49c>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cac:	d204      	bcs.n	8004cb8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	e001      	b.n	8004cbc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cc8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40007c00 	.word	0x40007c00
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	00f42400 	.word	0x00f42400

08004ce0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01a      	beq.n	8004df6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dde:	d10a      	bne.n	8004df6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e34:	f7fc f962 	bl	80010fc <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10e      	bne.n	8004e66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f82d 	bl	8004eb6 <UART_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e023      	b.n	8004eae <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d10e      	bne.n	8004e92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f817 	bl	8004eb6 <UART_WaitOnFlagUntilTimeout>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e00d      	b.n	8004eae <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b084      	sub	sp, #16
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	603b      	str	r3, [r7, #0]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec6:	e05e      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d05a      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed0:	f7fc f914 	bl	80010fc <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d302      	bcc.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d11b      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ef4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0201 	bic.w	r2, r2, #1
 8004f04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e043      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d02c      	beq.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d124      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e00f      	b.n	8004fa6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	bf0c      	ite	eq
 8004f96:	2301      	moveq	r3, #1
 8004f98:	2300      	movne	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d091      	beq.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	f107 001c 	add.w	r0, r7, #28
 8004fbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d120      	bne.n	800500a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	4b20      	ldr	r3, [pc, #128]	; (800505c <USB_CoreInit+0xac>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa5a 	bl	80054b8 <USB_CoreReset>
 8005004:	4603      	mov	r3, r0
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e010      	b.n	800502c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fa4e 	bl	80054b8 <USB_CoreReset>
 800501c:	4603      	mov	r3, r0
 800501e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	2b01      	cmp	r3, #1
 8005030:	d10b      	bne.n	800504a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f043 0206 	orr.w	r2, r3, #6
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800504a:	7bfb      	ldrb	r3, [r7, #15]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005056:	b004      	add	sp, #16
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	ffbdffbf 	.word	0xffbdffbf

08005060 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b082      	sub	sp, #8
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]
 80050ac:	e00b      	b.n	80050c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d106      	bne.n	80050c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e001      	b.n	80050c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e003      	b.n	80050ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80050c6:	2032      	movs	r0, #50	; 0x32
 80050c8:	f7fc f824 	bl	8001114 <HAL_Delay>

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050d8:	b084      	sub	sp, #16
 80050da:	b580      	push	{r7, lr}
 80050dc:	b086      	sub	sp, #24
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
 80050f6:	e009      	b.n	800510c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3340      	adds	r3, #64	; 0x40
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	2200      	movs	r2, #0
 8005104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	3301      	adds	r3, #1
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b0e      	cmp	r3, #14
 8005110:	d9f2      	bls.n	80050f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005114:	2b00      	cmp	r3, #0
 8005116:	d11c      	bne.n	8005152 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005126:	f043 0302 	orr.w	r3, r3, #2
 800512a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	e005      	b.n	800515e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005164:	461a      	mov	r2, r3
 8005166:	2300      	movs	r3, #0
 8005168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005170:	4619      	mov	r1, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	461a      	mov	r2, r3
 800517a:	680b      	ldr	r3, [r1, #0]
 800517c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10c      	bne.n	800519e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d104      	bne.n	8005194 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800518a:	2100      	movs	r1, #0
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f959 	bl	8005444 <USB_SetDevSpeed>
 8005192:	e018      	b.n	80051c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005194:	2101      	movs	r1, #1
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f954 	bl	8005444 <USB_SetDevSpeed>
 800519c:	e013      	b.n	80051c6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800519e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d10c      	bne.n	80051be <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051aa:	2100      	movs	r1, #0
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f949 	bl	8005444 <USB_SetDevSpeed>
 80051b2:	e008      	b.n	80051c6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051b4:	2101      	movs	r1, #1
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f944 	bl	8005444 <USB_SetDevSpeed>
 80051bc:	e003      	b.n	80051c6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051be:	2103      	movs	r1, #3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f93f 	bl	8005444 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051c6:	2110      	movs	r1, #16
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f8f3 	bl	80053b4 <USB_FlushTxFifo>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f911 	bl	8005400 <USB_FlushRxFifo>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	461a      	mov	r2, r3
 80051f0:	2300      	movs	r3, #0
 80051f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520c:	2300      	movs	r3, #0
 800520e:	613b      	str	r3, [r7, #16]
 8005210:	e043      	b.n	800529a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005228:	d118      	bne.n	800525c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e013      	b.n	800526e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	461a      	mov	r2, r3
 8005254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e008      	b.n	800526e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005268:	461a      	mov	r2, r3
 800526a:	2300      	movs	r3, #0
 800526c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	461a      	mov	r2, r3
 800527c:	2300      	movs	r3, #0
 800527e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	461a      	mov	r2, r3
 800528e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005292:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3301      	adds	r3, #1
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3b7      	bcc.n	8005212 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e043      	b.n	8005330 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052be:	d118      	bne.n	80052f2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10a      	bne.n	80052dc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	e013      	b.n	8005304 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e008      	b.n	8005304 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	461a      	mov	r2, r3
 8005300:	2300      	movs	r3, #0
 8005302:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005328:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	429a      	cmp	r2, r3
 8005336:	d3b7      	bcc.n	80052a8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800534a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	f043 0210 	orr.w	r2, r3, #16
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <USB_DevInit+0x2d4>)
 8005372:	4313      	orrs	r3, r2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f043 0208 	orr.w	r2, r3, #8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699a      	ldr	r2, [r3, #24]
 8005394:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <USB_DevInit+0x2d8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a8:	b004      	add	sp, #16
 80053aa:	4770      	bx	lr
 80053ac:	803c3800 	.word	0x803c3800
 80053b0:	40000004 	.word	0x40000004

080053b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a09      	ldr	r2, [pc, #36]	; (80053fc <USB_FlushTxFifo+0x48>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d901      	bls.n	80053e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d0f0      	beq.n	80053ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	00030d40 	.word	0x00030d40

08005400 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2210      	movs	r2, #16
 8005410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a09      	ldr	r2, [pc, #36]	; (8005440 <USB_FlushRxFifo+0x40>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b10      	cmp	r3, #16
 800542e:	d0f0      	beq.n	8005412 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	00030d40 	.word	0x00030d40

08005444 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	68f9      	ldr	r1, [r7, #12]
 8005460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005490:	f023 0303 	bic.w	r3, r3, #3
 8005494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a4:	f043 0302 	orr.w	r3, r3, #2
 80054a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	3301      	adds	r3, #1
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <USB_CoreReset+0x64>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e01b      	b.n	800550e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	daf2      	bge.n	80054c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f043 0201 	orr.w	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a09      	ldr	r2, [pc, #36]	; (800551c <USB_CoreReset+0x64>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d901      	bls.n	8005500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e006      	b.n	800550e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d0f0      	beq.n	80054ee <USB_CoreReset+0x36>

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	00030d40 	.word	0x00030d40

08005520 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005526:	4ba0      	ldr	r3, [pc, #640]	; (80057a8 <MX_LWIP_Init+0x288>)
 8005528:	22c0      	movs	r2, #192	; 0xc0
 800552a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800552c:	4b9e      	ldr	r3, [pc, #632]	; (80057a8 <MX_LWIP_Init+0x288>)
 800552e:	22a8      	movs	r2, #168	; 0xa8
 8005530:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005532:	4b9d      	ldr	r3, [pc, #628]	; (80057a8 <MX_LWIP_Init+0x288>)
 8005534:	2201      	movs	r2, #1
 8005536:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 192;
 8005538:	4b9b      	ldr	r3, [pc, #620]	; (80057a8 <MX_LWIP_Init+0x288>)
 800553a:	22c0      	movs	r2, #192	; 0xc0
 800553c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 225;
 800553e:	4b9b      	ldr	r3, [pc, #620]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005540:	22e1      	movs	r2, #225	; 0xe1
 8005542:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 225;
 8005544:	4b99      	ldr	r3, [pc, #612]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005546:	22e1      	movs	r2, #225	; 0xe1
 8005548:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 225;
 800554a:	4b98      	ldr	r3, [pc, #608]	; (80057ac <MX_LWIP_Init+0x28c>)
 800554c:	22e1      	movs	r2, #225	; 0xe1
 800554e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005550:	4b96      	ldr	r3, [pc, #600]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005552:	2200      	movs	r2, #0
 8005554:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005556:	4b96      	ldr	r3, [pc, #600]	; (80057b0 <MX_LWIP_Init+0x290>)
 8005558:	2200      	movs	r2, #0
 800555a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800555c:	4b94      	ldr	r3, [pc, #592]	; (80057b0 <MX_LWIP_Init+0x290>)
 800555e:	2200      	movs	r2, #0
 8005560:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005562:	4b93      	ldr	r3, [pc, #588]	; (80057b0 <MX_LWIP_Init+0x290>)
 8005564:	2200      	movs	r2, #0
 8005566:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005568:	4b91      	ldr	r3, [pc, #580]	; (80057b0 <MX_LWIP_Init+0x290>)
 800556a:	2200      	movs	r2, #0
 800556c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800556e:	2100      	movs	r1, #0
 8005570:	2000      	movs	r0, #0
 8005572:	f007 f825 	bl	800c5c0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005576:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <MX_LWIP_Init+0x288>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	061a      	lsls	r2, r3, #24
 800557c:	4b8a      	ldr	r3, [pc, #552]	; (80057a8 <MX_LWIP_Init+0x288>)
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	041b      	lsls	r3, r3, #16
 8005582:	431a      	orrs	r2, r3
 8005584:	4b88      	ldr	r3, [pc, #544]	; (80057a8 <MX_LWIP_Init+0x288>)
 8005586:	789b      	ldrb	r3, [r3, #2]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	4313      	orrs	r3, r2
 800558c:	4a86      	ldr	r2, [pc, #536]	; (80057a8 <MX_LWIP_Init+0x288>)
 800558e:	78d2      	ldrb	r2, [r2, #3]
 8005590:	4313      	orrs	r3, r2
 8005592:	061a      	lsls	r2, r3, #24
 8005594:	4b84      	ldr	r3, [pc, #528]	; (80057a8 <MX_LWIP_Init+0x288>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	0619      	lsls	r1, r3, #24
 800559a:	4b83      	ldr	r3, [pc, #524]	; (80057a8 <MX_LWIP_Init+0x288>)
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	4319      	orrs	r1, r3
 80055a2:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055a4:	789b      	ldrb	r3, [r3, #2]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	430b      	orrs	r3, r1
 80055aa:	497f      	ldr	r1, [pc, #508]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055ac:	78c9      	ldrb	r1, [r1, #3]
 80055ae:	430b      	orrs	r3, r1
 80055b0:	021b      	lsls	r3, r3, #8
 80055b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055b6:	431a      	orrs	r2, r3
 80055b8:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	0619      	lsls	r1, r3, #24
 80055be:	4b7a      	ldr	r3, [pc, #488]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055c0:	785b      	ldrb	r3, [r3, #1]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	4319      	orrs	r1, r3
 80055c6:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055c8:	789b      	ldrb	r3, [r3, #2]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	430b      	orrs	r3, r1
 80055ce:	4976      	ldr	r1, [pc, #472]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055d0:	78c9      	ldrb	r1, [r1, #3]
 80055d2:	430b      	orrs	r3, r1
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055da:	431a      	orrs	r2, r3
 80055dc:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	0619      	lsls	r1, r3, #24
 80055e2:	4b71      	ldr	r3, [pc, #452]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	4319      	orrs	r1, r3
 80055ea:	4b6f      	ldr	r3, [pc, #444]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055ec:	789b      	ldrb	r3, [r3, #2]
 80055ee:	021b      	lsls	r3, r3, #8
 80055f0:	430b      	orrs	r3, r1
 80055f2:	496d      	ldr	r1, [pc, #436]	; (80057a8 <MX_LWIP_Init+0x288>)
 80055f4:	78c9      	ldrb	r1, [r1, #3]
 80055f6:	430b      	orrs	r3, r1
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	4313      	orrs	r3, r2
 80055fc:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <MX_LWIP_Init+0x294>)
 80055fe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005600:	4b6a      	ldr	r3, [pc, #424]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	061a      	lsls	r2, r3, #24
 8005606:	4b69      	ldr	r3, [pc, #420]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	4b67      	ldr	r3, [pc, #412]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005610:	789b      	ldrb	r3, [r3, #2]
 8005612:	021b      	lsls	r3, r3, #8
 8005614:	4313      	orrs	r3, r2
 8005616:	4a65      	ldr	r2, [pc, #404]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005618:	78d2      	ldrb	r2, [r2, #3]
 800561a:	4313      	orrs	r3, r2
 800561c:	061a      	lsls	r2, r3, #24
 800561e:	4b63      	ldr	r3, [pc, #396]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	0619      	lsls	r1, r3, #24
 8005624:	4b61      	ldr	r3, [pc, #388]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	041b      	lsls	r3, r3, #16
 800562a:	4319      	orrs	r1, r3
 800562c:	4b5f      	ldr	r3, [pc, #380]	; (80057ac <MX_LWIP_Init+0x28c>)
 800562e:	789b      	ldrb	r3, [r3, #2]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	430b      	orrs	r3, r1
 8005634:	495d      	ldr	r1, [pc, #372]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005636:	78c9      	ldrb	r1, [r1, #3]
 8005638:	430b      	orrs	r3, r1
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005640:	431a      	orrs	r2, r3
 8005642:	4b5a      	ldr	r3, [pc, #360]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	0619      	lsls	r1, r3, #24
 8005648:	4b58      	ldr	r3, [pc, #352]	; (80057ac <MX_LWIP_Init+0x28c>)
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	041b      	lsls	r3, r3, #16
 800564e:	4319      	orrs	r1, r3
 8005650:	4b56      	ldr	r3, [pc, #344]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005652:	789b      	ldrb	r3, [r3, #2]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	430b      	orrs	r3, r1
 8005658:	4954      	ldr	r1, [pc, #336]	; (80057ac <MX_LWIP_Init+0x28c>)
 800565a:	78c9      	ldrb	r1, [r1, #3]
 800565c:	430b      	orrs	r3, r1
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005664:	431a      	orrs	r2, r3
 8005666:	4b51      	ldr	r3, [pc, #324]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	0619      	lsls	r1, r3, #24
 800566c:	4b4f      	ldr	r3, [pc, #316]	; (80057ac <MX_LWIP_Init+0x28c>)
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	4319      	orrs	r1, r3
 8005674:	4b4d      	ldr	r3, [pc, #308]	; (80057ac <MX_LWIP_Init+0x28c>)
 8005676:	789b      	ldrb	r3, [r3, #2]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	430b      	orrs	r3, r1
 800567c:	494b      	ldr	r1, [pc, #300]	; (80057ac <MX_LWIP_Init+0x28c>)
 800567e:	78c9      	ldrb	r1, [r1, #3]
 8005680:	430b      	orrs	r3, r1
 8005682:	0e1b      	lsrs	r3, r3, #24
 8005684:	4313      	orrs	r3, r2
 8005686:	4a4c      	ldr	r2, [pc, #304]	; (80057b8 <MX_LWIP_Init+0x298>)
 8005688:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <MX_LWIP_Init+0x290>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	061a      	lsls	r2, r3, #24
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <MX_LWIP_Init+0x290>)
 8005692:	785b      	ldrb	r3, [r3, #1]
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	4b45      	ldr	r3, [pc, #276]	; (80057b0 <MX_LWIP_Init+0x290>)
 800569a:	789b      	ldrb	r3, [r3, #2]
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	4313      	orrs	r3, r2
 80056a0:	4a43      	ldr	r2, [pc, #268]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056a2:	78d2      	ldrb	r2, [r2, #3]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	061a      	lsls	r2, r3, #24
 80056a8:	4b41      	ldr	r3, [pc, #260]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	0619      	lsls	r1, r3, #24
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	4319      	orrs	r1, r3
 80056b6:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056b8:	789b      	ldrb	r3, [r3, #2]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	430b      	orrs	r3, r1
 80056be:	493c      	ldr	r1, [pc, #240]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056c0:	78c9      	ldrb	r1, [r1, #3]
 80056c2:	430b      	orrs	r3, r1
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056ca:	431a      	orrs	r2, r3
 80056cc:	4b38      	ldr	r3, [pc, #224]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	0619      	lsls	r1, r3, #24
 80056d2:	4b37      	ldr	r3, [pc, #220]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	4319      	orrs	r1, r3
 80056da:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056dc:	789b      	ldrb	r3, [r3, #2]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	430b      	orrs	r3, r1
 80056e2:	4933      	ldr	r1, [pc, #204]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056e4:	78c9      	ldrb	r1, [r1, #3]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	0a1b      	lsrs	r3, r3, #8
 80056ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80056ee:	431a      	orrs	r2, r3
 80056f0:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	0619      	lsls	r1, r3, #24
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <MX_LWIP_Init+0x290>)
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	041b      	lsls	r3, r3, #16
 80056fc:	4319      	orrs	r1, r3
 80056fe:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <MX_LWIP_Init+0x290>)
 8005700:	789b      	ldrb	r3, [r3, #2]
 8005702:	021b      	lsls	r3, r3, #8
 8005704:	430b      	orrs	r3, r1
 8005706:	492a      	ldr	r1, [pc, #168]	; (80057b0 <MX_LWIP_Init+0x290>)
 8005708:	78c9      	ldrb	r1, [r1, #3]
 800570a:	430b      	orrs	r3, r1
 800570c:	0e1b      	lsrs	r3, r3, #24
 800570e:	4313      	orrs	r3, r2
 8005710:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <MX_LWIP_Init+0x29c>)
 8005712:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005714:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <MX_LWIP_Init+0x2a0>)
 8005716:	9302      	str	r3, [sp, #8]
 8005718:	4b2a      	ldr	r3, [pc, #168]	; (80057c4 <MX_LWIP_Init+0x2a4>)
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	2300      	movs	r3, #0
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	4b26      	ldr	r3, [pc, #152]	; (80057bc <MX_LWIP_Init+0x29c>)
 8005722:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <MX_LWIP_Init+0x298>)
 8005724:	4923      	ldr	r1, [pc, #140]	; (80057b4 <MX_LWIP_Init+0x294>)
 8005726:	4828      	ldr	r0, [pc, #160]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 8005728:	f007 fcce 	bl	800d0c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800572c:	4826      	ldr	r0, [pc, #152]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 800572e:	f007 fe7d 	bl	800d42c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005732:	4b25      	ldr	r3, [pc, #148]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 8005734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	d003      	beq.n	800574c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005744:	4820      	ldr	r0, [pc, #128]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 8005746:	f007 fe81 	bl	800d44c <netif_set_up>
 800574a:	e002      	b.n	8005752 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800574c:	481e      	ldr	r0, [pc, #120]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 800574e:	f007 fee9 	bl	800d524 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005752:	491e      	ldr	r1, [pc, #120]	; (80057cc <MX_LWIP_Init+0x2ac>)
 8005754:	481c      	ldr	r0, [pc, #112]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 8005756:	f007 ff7b 	bl	800d650 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800575a:	2200      	movs	r2, #0
 800575c:	2101      	movs	r1, #1
 800575e:	2001      	movs	r0, #1
 8005760:	f000 ff14 	bl	800658c <osSemaphoreNew>
 8005764:	4603      	mov	r3, r0
 8005766:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <MX_LWIP_Init+0x2b0>)
 8005768:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800576a:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <MX_LWIP_Init+0x2b4>)
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <MX_LWIP_Init+0x2a8>)
 800576e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005770:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <MX_LWIP_Init+0x2b0>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <MX_LWIP_Init+0x2b4>)
 8005776:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005778:	2224      	movs	r2, #36	; 0x24
 800577a:	2100      	movs	r1, #0
 800577c:	4816      	ldr	r0, [pc, #88]	; (80057d8 <MX_LWIP_Init+0x2b8>)
 800577e:	f012 f91d 	bl	80179bc <memset>
  attributes.name = "LinkThr";
 8005782:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <MX_LWIP_Init+0x2b8>)
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <MX_LWIP_Init+0x2bc>)
 8005786:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <MX_LWIP_Init+0x2b8>)
 800578a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800578e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <MX_LWIP_Init+0x2b8>)
 8005792:	2210      	movs	r2, #16
 8005794:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <MX_LWIP_Init+0x2b8>)
 8005798:	490e      	ldr	r1, [pc, #56]	; (80057d4 <MX_LWIP_Init+0x2b4>)
 800579a:	4811      	ldr	r0, [pc, #68]	; (80057e0 <MX_LWIP_Init+0x2c0>)
 800579c:	f000 fcda 	bl	8006154 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200050ac 	.word	0x200050ac
 80057ac:	200050a8 	.word	0x200050a8
 80057b0:	20005048 	.word	0x20005048
 80057b4:	200050a4 	.word	0x200050a4
 80057b8:	200050b0 	.word	0x200050b0
 80057bc:	200050b4 	.word	0x200050b4
 80057c0:	0800c4d1 	.word	0x0800c4d1
 80057c4:	08005e31 	.word	0x08005e31
 80057c8:	20005070 	.word	0x20005070
 80057cc:	08005f15 	.word	0x08005f15
 80057d0:	200000a0 	.word	0x200000a0
 80057d4:	20005040 	.word	0x20005040
 80057d8:	2000504c 	.word	0x2000504c
 80057dc:	08018d80 	.word	0x08018d80
 80057e0:	08005e9d 	.word	0x08005e9d

080057e4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a52      	ldr	r2, [pc, #328]	; (800594c <HAL_ETH_MspInit+0x168>)
 8005802:	4293      	cmp	r3, r2
 8005804:	f040 809e 	bne.w	8005944 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005808:	4b51      	ldr	r3, [pc, #324]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	4a50      	ldr	r2, [pc, #320]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800580e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005812:	6313      	str	r3, [r2, #48]	; 0x30
 8005814:	4b4e      	ldr	r3, [pc, #312]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	4b4b      	ldr	r3, [pc, #300]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	4a4a      	ldr	r2, [pc, #296]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800582a:	6313      	str	r3, [r2, #48]	; 0x30
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4b45      	ldr	r3, [pc, #276]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	4a44      	ldr	r2, [pc, #272]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800583e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005842:	6313      	str	r3, [r2, #48]	; 0x30
 8005844:	4b42      	ldr	r3, [pc, #264]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005850:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	4a3e      	ldr	r2, [pc, #248]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005856:	f043 0304 	orr.w	r3, r3, #4
 800585a:	6313      	str	r3, [r2, #48]	; 0x30
 800585c:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800585e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005868:	4b39      	ldr	r3, [pc, #228]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	4a38      	ldr	r2, [pc, #224]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	6313      	str	r3, [r2, #48]	; 0x30
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005880:	4b33      	ldr	r3, [pc, #204]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005884:	4a32      	ldr	r2, [pc, #200]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 8005886:	f043 0302 	orr.w	r3, r3, #2
 800588a:	6313      	str	r3, [r2, #48]	; 0x30
 800588c:	4b30      	ldr	r3, [pc, #192]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005898:	4b2d      	ldr	r3, [pc, #180]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	4a2c      	ldr	r2, [pc, #176]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 800589e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a2:	6313      	str	r3, [r2, #48]	; 0x30
 80058a4:	4b2a      	ldr	r3, [pc, #168]	; (8005950 <HAL_ETH_MspInit+0x16c>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	60bb      	str	r3, [r7, #8]
 80058ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80058b0:	2332      	movs	r3, #50	; 0x32
 80058b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b4:	2302      	movs	r3, #2
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058bc:	2303      	movs	r3, #3
 80058be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058c0:	230b      	movs	r3, #11
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058c8:	4619      	mov	r1, r3
 80058ca:	4822      	ldr	r0, [pc, #136]	; (8005954 <HAL_ETH_MspInit+0x170>)
 80058cc:	f7fc feac 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80058d0:	2386      	movs	r3, #134	; 0x86
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058dc:	2303      	movs	r3, #3
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058e0:	230b      	movs	r3, #11
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	481b      	ldr	r0, [pc, #108]	; (8005958 <HAL_ETH_MspInit+0x174>)
 80058ec:	f7fc fe9c 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80058f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f6:	2302      	movs	r3, #2
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fe:	2303      	movs	r3, #3
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005902:	230b      	movs	r3, #11
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590a:	4619      	mov	r1, r3
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <HAL_ETH_MspInit+0x178>)
 800590e:	f7fc fe8b 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005912:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005920:	2303      	movs	r3, #3
 8005922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005924:	230b      	movs	r3, #11
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800592c:	4619      	mov	r1, r3
 800592e:	480c      	ldr	r0, [pc, #48]	; (8005960 <HAL_ETH_MspInit+0x17c>)
 8005930:	f7fc fe7a 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005934:	2200      	movs	r2, #0
 8005936:	2105      	movs	r1, #5
 8005938:	203d      	movs	r0, #61	; 0x3d
 800593a:	f7fb fcc7 	bl	80012cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800593e:	203d      	movs	r0, #61	; 0x3d
 8005940:	f7fb fce0 	bl	8001304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005944:	bf00      	nop
 8005946:	3738      	adds	r7, #56	; 0x38
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	40028000 	.word	0x40028000
 8005950:	40023800 	.word	0x40023800
 8005954:	40020800 	.word	0x40020800
 8005958:	40020000 	.word	0x40020000
 800595c:	40020400 	.word	0x40020400
 8005960:	40021800 	.word	0x40021800

08005964 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <HAL_ETH_RxCpltCallback+0x1c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f000 ff0d 	bl	8006790 <osSemaphoreRelease>
}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200000a4 	.word	0x200000a4

08005984 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b090      	sub	sp, #64	; 0x40
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005990:	4b5d      	ldr	r3, [pc, #372]	; (8005b08 <low_level_init+0x184>)
 8005992:	4a5e      	ldr	r2, [pc, #376]	; (8005b0c <low_level_init+0x188>)
 8005994:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005996:	4b5c      	ldr	r3, [pc, #368]	; (8005b08 <low_level_init+0x184>)
 8005998:	2201      	movs	r2, #1
 800599a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800599c:	4b5a      	ldr	r3, [pc, #360]	; (8005b08 <low_level_init+0x184>)
 800599e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80059a2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80059a4:	4b58      	ldr	r3, [pc, #352]	; (8005b08 <low_level_init+0x184>)
 80059a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059aa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80059ac:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <low_level_init+0x184>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80059b2:	2300      	movs	r3, #0
 80059b4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80059ba:	23e1      	movs	r3, #225	; 0xe1
 80059bc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80059c2:	2300      	movs	r3, #0
 80059c4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80059c6:	2300      	movs	r3, #0
 80059c8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80059ca:	4a4f      	ldr	r2, [pc, #316]	; (8005b08 <low_level_init+0x184>)
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80059d2:	4b4d      	ldr	r3, [pc, #308]	; (8005b08 <low_level_init+0x184>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80059d8:	4b4b      	ldr	r3, [pc, #300]	; (8005b08 <low_level_init+0x184>)
 80059da:	2200      	movs	r2, #0
 80059dc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80059de:	4b4a      	ldr	r3, [pc, #296]	; (8005b08 <low_level_init+0x184>)
 80059e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80059e4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80059e6:	4848      	ldr	r0, [pc, #288]	; (8005b08 <low_level_init+0x184>)
 80059e8:	f7fb fc9a 	bl	8001320 <HAL_ETH_Init>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80059f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a00:	f043 0304 	orr.w	r3, r3, #4
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	4a40      	ldr	r2, [pc, #256]	; (8005b10 <low_level_init+0x18c>)
 8005a10:	4940      	ldr	r1, [pc, #256]	; (8005b14 <low_level_init+0x190>)
 8005a12:	483d      	ldr	r0, [pc, #244]	; (8005b08 <low_level_init+0x184>)
 8005a14:	f7fb fe1e 	bl	8001654 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005a18:	2304      	movs	r3, #4
 8005a1a:	4a3f      	ldr	r2, [pc, #252]	; (8005b18 <low_level_init+0x194>)
 8005a1c:	493f      	ldr	r1, [pc, #252]	; (8005b1c <low_level_init+0x198>)
 8005a1e:	483a      	ldr	r0, [pc, #232]	; (8005b08 <low_level_init+0x184>)
 8005a20:	f7fb fe81 	bl	8001726 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2206      	movs	r2, #6
 8005a28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005a2c:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <low_level_init+0x184>)
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	781a      	ldrb	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005a38:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <low_level_init+0x184>)
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	785a      	ldrb	r2, [r3, #1]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005a44:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <low_level_init+0x184>)
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	789a      	ldrb	r2, [r3, #2]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005a50:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <low_level_init+0x184>)
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	78da      	ldrb	r2, [r3, #3]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <low_level_init+0x184>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	791a      	ldrb	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <low_level_init+0x184>)
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	795a      	ldrb	r2, [r3, #5]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005a7a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005a82:	f043 030a 	orr.w	r3, r3, #10
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005a8e:	2200      	movs	r2, #0
 8005a90:	2101      	movs	r1, #1
 8005a92:	2001      	movs	r0, #1
 8005a94:	f000 fd7a 	bl	800658c <osSemaphoreNew>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <low_level_init+0x19c>)
 8005a9c:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005a9e:	f107 0314 	add.w	r3, r7, #20
 8005aa2:	2224      	movs	r2, #36	; 0x24
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f011 ff88 	bl	80179bc <memset>
  attributes.name = "EthIf";
 8005aac:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <low_level_init+0x1a0>)
 8005aae:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005ab0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005ab6:	2330      	movs	r3, #48	; 0x30
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005aba:	f107 0314 	add.w	r3, r7, #20
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	4819      	ldr	r0, [pc, #100]	; (8005b28 <low_level_init+0x1a4>)
 8005ac4:	f000 fb46 	bl	8006154 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005ac8:	480f      	ldr	r0, [pc, #60]	; (8005b08 <low_level_init+0x184>)
 8005aca:	f7fc f954 	bl	8001d76 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005ace:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	211d      	movs	r1, #29
 8005ad6:	480c      	ldr	r0, [pc, #48]	; (8005b08 <low_level_init+0x184>)
 8005ad8:	f7fc f87f 	bl	8001bda <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ade:	f043 030b 	orr.w	r3, r3, #11
 8005ae2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	211d      	movs	r1, #29
 8005aea:	4807      	ldr	r0, [pc, #28]	; (8005b08 <low_level_init+0x184>)
 8005aec:	f7fc f8dd 	bl	8001caa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005af0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005af4:	461a      	mov	r2, r3
 8005af6:	211d      	movs	r1, #29
 8005af8:	4803      	ldr	r0, [pc, #12]	; (8005b08 <low_level_init+0x184>)
 8005afa:	f7fc f86e 	bl	8001bda <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005afe:	bf00      	nop
 8005b00:	3740      	adds	r7, #64	; 0x40
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20006988 	.word	0x20006988
 8005b0c:	40028000 	.word	0x40028000
 8005b10:	200069d0 	.word	0x200069d0
 8005b14:	200050b8 	.word	0x200050b8
 8005b18:	20005138 	.word	0x20005138
 8005b1c:	20006908 	.word	0x20006908
 8005b20:	200000a4 	.word	0x200000a4
 8005b24:	08018d88 	.word	0x08018d88
 8005b28:	08005dd1 	.word	0x08005dd1

08005b2c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	; 0x28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005b36:	4b4b      	ldr	r3, [pc, #300]	; (8005c64 <low_level_output+0x138>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005b4e:	4b45      	ldr	r3, [pc, #276]	; (8005c64 <low_level_output+0x138>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	623b      	str	r3, [r7, #32]
 8005b5c:	e05a      	b.n	8005c14 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	da03      	bge.n	8005b6e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005b66:	23f8      	movs	r3, #248	; 0xf8
 8005b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005b6c:	e05c      	b.n	8005c28 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	895b      	ldrh	r3, [r3, #10]
 8005b72:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005b78:	e02f      	b.n	8005bda <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	18d0      	adds	r0, r2, r3
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	18d1      	adds	r1, r2, r3
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	f011 ff05 	bl	80179a0 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da03      	bge.n	8005bac <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005ba4:	23f8      	movs	r3, #248	; 0xf8
 8005ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005baa:	e03d      	b.n	8005c28 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005bbc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005bc8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005bd4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d8c8      	bhi.n	8005b7a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	18d0      	adds	r0, r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f011 fed1 	bl	80179a0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d1a1      	bne.n	8005b5e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005c1a:	6979      	ldr	r1, [r7, #20]
 8005c1c:	4811      	ldr	r0, [pc, #68]	; (8005c64 <low_level_output+0x138>)
 8005c1e:	f7fb fdef 	bl	8001800 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005c28:	4b0e      	ldr	r3, [pc, #56]	; (8005c64 <low_level_output+0x138>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c30:	4413      	add	r3, r2
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <low_level_output+0x138>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c44:	4413      	add	r3, r2
 8005c46:	2220      	movs	r2, #32
 8005c48:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005c4a:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <low_level_output+0x138>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	f241 0304 	movw	r3, #4100	; 0x1004
 8005c52:	4413      	add	r3, r2
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3728      	adds	r7, #40	; 0x28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20006988 	.word	0x20006988

08005c68 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	; 0x30
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c70:	2300      	movs	r3, #0
 8005c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005c8c:	484f      	ldr	r0, [pc, #316]	; (8005dcc <low_level_input+0x164>)
 8005c8e:	f7fb fea1 	bl	80019d4 <HAL_ETH_GetReceivedFrame_IT>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <low_level_input+0x34>

    return NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e092      	b.n	8005dc2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005c9c:	4b4b      	ldr	r3, [pc, #300]	; (8005dcc <low_level_input+0x164>)
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005ca2:	4b4a      	ldr	r3, [pc, #296]	; (8005dcc <low_level_input+0x164>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005ca8:	89fb      	ldrh	r3, [r7, #14]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f007 fd94 	bl	800d7e4 <pbuf_alloc>
 8005cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d04b      	beq.n	8005d5c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005cc4:	4b41      	ldr	r3, [pc, #260]	; (8005dcc <low_level_input+0x164>)
 8005cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd2:	e040      	b.n	8005d56 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	895b      	ldrh	r3, [r3, #10]
 8005cd8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005cde:	e021      	b.n	8005d24 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	18d0      	adds	r0, r2, r3
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	18d1      	adds	r1, r2, r3
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f011 fe52 	bl	80179a0 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005d12:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005d1e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d8d6      	bhi.n	8005ce0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	18d0      	adds	r0, r2, r3
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	4619      	mov	r1, r3
 8005d44:	f011 fe2c 	bl	80179a0 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1bb      	bne.n	8005cd4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <low_level_input+0x164>)
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e00b      	b.n	8005d80 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <low_level_input+0x164>)
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d3ee      	bcc.n	8005d68 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <low_level_input+0x164>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005d90:	4b0e      	ldr	r3, [pc, #56]	; (8005dcc <low_level_input+0x164>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	f241 0314 	movw	r3, #4116	; 0x1014
 8005d98:	4413      	add	r3, r2
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005da4:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <low_level_input+0x164>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f241 0314 	movw	r3, #4116	; 0x1014
 8005dac:	4413      	add	r3, r2
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <low_level_input+0x164>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	f241 0308 	movw	r3, #4104	; 0x1008
 8005dba:	4413      	add	r3, r2
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3730      	adds	r7, #48	; 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	20006988 	.word	0x20006988

08005dd0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005ddc:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <ethernetif_input+0x58>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f04f 31ff 	mov.w	r1, #4294967295
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fc6d 	bl	80066c4 <osSemaphoreAcquire>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f5      	bne.n	8005ddc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005df0:	480e      	ldr	r0, [pc, #56]	; (8005e2c <ethernetif_input+0x5c>)
 8005df2:	f011 fd49 	bl	8017888 <sys_mutex_lock>
        p = low_level_input( netif );
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff ff36 	bl	8005c68 <low_level_input>
 8005dfc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	68b8      	ldr	r0, [r7, #8]
 8005e0c:	4798      	blx	r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005e14:	68b8      	ldr	r0, [r7, #8]
 8005e16:	f007 ffc9 	bl	800ddac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005e1a:	4804      	ldr	r0, [pc, #16]	; (8005e2c <ethernetif_input+0x5c>)
 8005e1c:	f011 fd43 	bl	80178a6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e4      	bne.n	8005df0 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e26:	e7d9      	b.n	8005ddc <ethernetif_input+0xc>
 8005e28:	200000a4 	.word	0x200000a4
 8005e2c:	200081e0 	.word	0x200081e0

08005e30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <ethernetif_init+0x1c>
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	; (8005e78 <ethernetif_init+0x48>)
 8005e40:	f240 223a 	movw	r2, #570	; 0x23a
 8005e44:	490d      	ldr	r1, [pc, #52]	; (8005e7c <ethernetif_init+0x4c>)
 8005e46:	480e      	ldr	r0, [pc, #56]	; (8005e80 <ethernetif_init+0x50>)
 8005e48:	f011 fdc0 	bl	80179cc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2273      	movs	r2, #115	; 0x73
 8005e50:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2274      	movs	r2, #116	; 0x74
 8005e58:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a09      	ldr	r2, [pc, #36]	; (8005e84 <ethernetif_init+0x54>)
 8005e60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <ethernetif_init+0x58>)
 8005e66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fd8b 	bl	8005984 <low_level_init>

  return ERR_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	08018d90 	.word	0x08018d90
 8005e7c:	08018dac 	.word	0x08018dac
 8005e80:	08018dbc 	.word	0x08018dbc
 8005e84:	08015571 	.word	0x08015571
 8005e88:	08005b2d 	.word	0x08005b2d

08005e8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005e90:	f7fb f934 	bl	80010fc <HAL_GetTick>
 8005e94:	4603      	mov	r3, r0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	4816      	ldr	r0, [pc, #88]	; (8005f10 <ethernetif_set_link+0x74>)
 8005eb6:	f7fb fe90 	bl	8001bda <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d108      	bne.n	8005ee4 <ethernetif_set_link+0x48>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f007 fb53 	bl	800d588 <netif_set_link_up>
 8005ee2:	e011      	b.n	8005f08 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <ethernetif_set_link+0x6c>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f007 fb74 	bl	800d5f0 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005f08:	20c8      	movs	r0, #200	; 0xc8
 8005f0a:	f000 f9c9 	bl	80062a0 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005f0e:	e7cd      	b.n	8005eac <ethernetif_set_link+0x10>
 8005f10:	20006988 	.word	0x20006988

08005f14 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f2a:	089b      	lsrs	r3, r3, #2
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d05d      	beq.n	8005ff2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005f36:	4b34      	ldr	r3, [pc, #208]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d03f      	beq.n	8005fbe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005f3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f42:	2100      	movs	r1, #0
 8005f44:	4830      	ldr	r0, [pc, #192]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f46:	f7fb feb0 	bl	8001caa <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005f4a:	f7fb f8d7 	bl	80010fc <HAL_GetTick>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005f52:	f107 0308 	add.w	r3, r7, #8
 8005f56:	461a      	mov	r2, r3
 8005f58:	2101      	movs	r1, #1
 8005f5a:	482b      	ldr	r0, [pc, #172]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f5c:	f7fb fe3d 	bl	8001bda <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005f60:	f7fb f8cc 	bl	80010fc <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f6e:	d828      	bhi.n	8005fc2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0eb      	beq.n	8005f52 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005f7a:	f107 0308 	add.w	r3, r7, #8
 8005f7e:	461a      	mov	r2, r3
 8005f80:	2110      	movs	r1, #16
 8005f82:	4821      	ldr	r0, [pc, #132]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f84:	f7fb fe29 	bl	8001bda <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005f92:	4b1d      	ldr	r3, [pc, #116]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e002      	b.n	8005fa2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <ethernetif_update_config+0xf4>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]
 8005fb2:	e016      	b.n	8005fe2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005fb4:	4b14      	ldr	r3, [pc, #80]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fba:	609a      	str	r2, [r3, #8]
 8005fbc:	e011      	b.n	8005fe2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005fbe:	bf00      	nop
 8005fc0:	e000      	b.n	8005fc4 <ethernetif_update_config+0xb0>
          goto error;
 8005fc2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	08db      	lsrs	r3, r3, #3
 8005fca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005fcc:	4b0e      	ldr	r3, [pc, #56]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2100      	movs	r1, #0
 8005fdc:	480a      	ldr	r0, [pc, #40]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fde:	f7fb fe64 	bl	8001caa <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4808      	ldr	r0, [pc, #32]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fe6:	f7fb ff25 	bl	8001e34 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005fea:	4807      	ldr	r0, [pc, #28]	; (8006008 <ethernetif_update_config+0xf4>)
 8005fec:	f7fb fec3 	bl	8001d76 <HAL_ETH_Start>
 8005ff0:	e002      	b.n	8005ff8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005ff2:	4805      	ldr	r0, [pc, #20]	; (8006008 <ethernetif_update_config+0xf4>)
 8005ff4:	f7fb feee 	bl	8001dd4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f807 	bl	800600c <ethernetif_notify_conn_changed>
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20006988 	.word	0x20006988

0800600c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006036:	f3ef 8305 	mrs	r3, IPSR
 800603a:	60bb      	str	r3, [r7, #8]
  return(result);
 800603c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006042:	f3ef 8310 	mrs	r3, PRIMASK
 8006046:	607b      	str	r3, [r7, #4]
  return(result);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800604e:	f3ef 8311 	mrs	r3, BASEPRI
 8006052:	603b      	str	r3, [r7, #0]
  return(result);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <osKernelInitialize+0x3a>
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <osKernelInitialize+0x64>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b02      	cmp	r3, #2
 8006060:	d103      	bne.n	800606a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006062:	f06f 0305 	mvn.w	r3, #5
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e00c      	b.n	8006084 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <osKernelInitialize+0x64>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d105      	bne.n	800607e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <osKernelInitialize+0x64>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e002      	b.n	8006084 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	200000a8 	.word	0x200000a8

08006098 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609e:	f3ef 8305 	mrs	r3, IPSR
 80060a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80060a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060aa:	f3ef 8310 	mrs	r3, PRIMASK
 80060ae:	607b      	str	r3, [r7, #4]
  return(result);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ba:	603b      	str	r3, [r7, #0]
  return(result);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <osKernelStart+0x3a>
 80060c2:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <osKernelStart+0x68>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80060ca:	f06f 0305 	mvn.w	r3, #5
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e010      	b.n	80060f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80060d2:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <osKernelStart+0x68>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d109      	bne.n	80060ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80060da:	f7ff ffa1 	bl	8006020 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80060de:	4b08      	ldr	r3, [pc, #32]	; (8006100 <osKernelStart+0x68>)
 80060e0:	2202      	movs	r2, #2
 80060e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80060e4:	f002 f9ce 	bl	8008484 <vTaskStartScheduler>
      stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e002      	b.n	80060f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80060ee:	f04f 33ff 	mov.w	r3, #4294967295
 80060f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80060f4:	68fb      	ldr	r3, [r7, #12]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200000a8 	.word	0x200000a8

08006104 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800610a:	f3ef 8305 	mrs	r3, IPSR
 800610e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006110:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10f      	bne.n	8006136 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006116:	f3ef 8310 	mrs	r3, PRIMASK
 800611a:	607b      	str	r3, [r7, #4]
  return(result);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006122:	f3ef 8311 	mrs	r3, BASEPRI
 8006126:	603b      	str	r3, [r7, #0]
  return(result);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <osKernelGetTickCount+0x3a>
 800612e:	4b08      	ldr	r3, [pc, #32]	; (8006150 <osKernelGetTickCount+0x4c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d103      	bne.n	800613e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006136:	f002 facd 	bl	80086d4 <xTaskGetTickCountFromISR>
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	e002      	b.n	8006144 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800613e:	f002 fab9 	bl	80086b4 <xTaskGetTickCount>
 8006142:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	200000a8 	.word	0x200000a8

08006154 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b090      	sub	sp, #64	; 0x40
 8006158:	af04      	add	r7, sp, #16
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006164:	f3ef 8305 	mrs	r3, IPSR
 8006168:	61fb      	str	r3, [r7, #28]
  return(result);
 800616a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800616c:	2b00      	cmp	r3, #0
 800616e:	f040 808f 	bne.w	8006290 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006172:	f3ef 8310 	mrs	r3, PRIMASK
 8006176:	61bb      	str	r3, [r7, #24]
  return(result);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d105      	bne.n	800618a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800617e:	f3ef 8311 	mrs	r3, BASEPRI
 8006182:	617b      	str	r3, [r7, #20]
  return(result);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <osThreadNew+0x3e>
 800618a:	4b44      	ldr	r3, [pc, #272]	; (800629c <osThreadNew+0x148>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b02      	cmp	r3, #2
 8006190:	d07e      	beq.n	8006290 <osThreadNew+0x13c>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d07b      	beq.n	8006290 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800619c:	2318      	movs	r3, #24
 800619e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80061a4:	f04f 33ff 	mov.w	r3, #4294967295
 80061a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d045      	beq.n	800623c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <osThreadNew+0x6a>
        name = attr->name;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d008      	beq.n	80061e4 <osThreadNew+0x90>
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	2b38      	cmp	r3, #56	; 0x38
 80061d6:	d805      	bhi.n	80061e4 <osThreadNew+0x90>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <osThreadNew+0x94>
        return (NULL);
 80061e4:	2300      	movs	r3, #0
 80061e6:	e054      	b.n	8006292 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d003      	beq.n	80061f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00e      	beq.n	800621e <osThreadNew+0xca>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b5b      	cmp	r3, #91	; 0x5b
 8006206:	d90a      	bls.n	800621e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800620c:	2b00      	cmp	r3, #0
 800620e:	d006      	beq.n	800621e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <osThreadNew+0xca>
        mem = 1;
 8006218:	2301      	movs	r3, #1
 800621a:	623b      	str	r3, [r7, #32]
 800621c:	e010      	b.n	8006240 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <osThreadNew+0xec>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <osThreadNew+0xec>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <osThreadNew+0xec>
          mem = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	623b      	str	r3, [r7, #32]
 800623a:	e001      	b.n	8006240 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800623c:	2300      	movs	r3, #0
 800623e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d110      	bne.n	8006268 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800624e:	9202      	str	r2, [sp, #8]
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 ff31 	bl	80080c4 <xTaskCreateStatic>
 8006262:	4603      	mov	r3, r0
 8006264:	613b      	str	r3, [r7, #16]
 8006266:	e013      	b.n	8006290 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d110      	bne.n	8006290 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	b29a      	uxth	r2, r3
 8006272:	f107 0310 	add.w	r3, r7, #16
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f001 ff82 	bl	800818a <xTaskCreate>
 8006286:	4603      	mov	r3, r0
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <osThreadNew+0x13c>
          hTask = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006290:	693b      	ldr	r3, [r7, #16]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3730      	adds	r7, #48	; 0x30
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	200000a8 	.word	0x200000a8

080062a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062a8:	f3ef 8305 	mrs	r3, IPSR
 80062ac:	613b      	str	r3, [r7, #16]
  return(result);
 80062ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10f      	bne.n	80062d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b4:	f3ef 8310 	mrs	r3, PRIMASK
 80062b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d105      	bne.n	80062cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062c0:	f3ef 8311 	mrs	r3, BASEPRI
 80062c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <osDelay+0x3c>
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <osDelay+0x58>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d103      	bne.n	80062dc <osDelay+0x3c>
    stat = osErrorISR;
 80062d4:	f06f 0305 	mvn.w	r3, #5
 80062d8:	617b      	str	r3, [r7, #20]
 80062da:	e007      	b.n	80062ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f002 f896 	bl	8008418 <vTaskDelay>
    }
  }

  return (stat);
 80062ec:	697b      	ldr	r3, [r7, #20]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200000a8 	.word	0x200000a8

080062fc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08a      	sub	sp, #40	; 0x28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006308:	f3ef 8305 	mrs	r3, IPSR
 800630c:	613b      	str	r3, [r7, #16]
  return(result);
 800630e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006310:	2b00      	cmp	r3, #0
 8006312:	f040 8085 	bne.w	8006420 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006316:	f3ef 8310 	mrs	r3, PRIMASK
 800631a:	60fb      	str	r3, [r7, #12]
  return(result);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d105      	bne.n	800632e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006322:	f3ef 8311 	mrs	r3, BASEPRI
 8006326:	60bb      	str	r3, [r7, #8]
  return(result);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <osMutexNew+0x3a>
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <osMutexNew+0x130>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d074      	beq.n	8006420 <osMutexNew+0x124>
    if (attr != NULL) {
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <osMutexNew+0x48>
      type = attr->attr_bits;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	623b      	str	r3, [r7, #32]
 8006342:	e001      	b.n	8006348 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <osMutexNew+0x5c>
      rmtx = 1U;
 8006352:	2301      	movs	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	e001      	b.n	800635c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d15c      	bne.n	8006420 <osMutexNew+0x124>
      mem = -1;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d015      	beq.n	800639e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d006      	beq.n	8006388 <osMutexNew+0x8c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	2b4f      	cmp	r3, #79	; 0x4f
 8006380:	d902      	bls.n	8006388 <osMutexNew+0x8c>
          mem = 1;
 8006382:	2301      	movs	r3, #1
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e00c      	b.n	80063a2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <osMutexNew+0xa6>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <osMutexNew+0xa6>
            mem = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e001      	b.n	80063a2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d112      	bne.n	80063ce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	4619      	mov	r1, r3
 80063b4:	2004      	movs	r0, #4
 80063b6:	f000 feb8 	bl	800712a <xQueueCreateMutexStatic>
 80063ba:	6278      	str	r0, [r7, #36]	; 0x24
 80063bc:	e016      	b.n	80063ec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	4619      	mov	r1, r3
 80063c4:	2001      	movs	r0, #1
 80063c6:	f000 feb0 	bl	800712a <xQueueCreateMutexStatic>
 80063ca:	6278      	str	r0, [r7, #36]	; 0x24
 80063cc:	e00e      	b.n	80063ec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d004      	beq.n	80063e4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80063da:	2004      	movs	r0, #4
 80063dc:	f000 fe8d 	bl	80070fa <xQueueCreateMutex>
 80063e0:	6278      	str	r0, [r7, #36]	; 0x24
 80063e2:	e003      	b.n	80063ec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80063e4:	2001      	movs	r0, #1
 80063e6:	f000 fe88 	bl	80070fa <xQueueCreateMutex>
 80063ea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00c      	beq.n	800640c <osMutexNew+0x110>
        if (attr != NULL) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <osMutexNew+0x104>
          name = attr->name;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	e001      	b.n	8006404 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006404:	6979      	ldr	r1, [r7, #20]
 8006406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006408:	f001 fdd4 	bl	8007fb4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d006      	beq.n	8006420 <osMutexNew+0x124>
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006422:	4618      	mov	r0, r3
 8006424:	3728      	adds	r7, #40	; 0x28
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	200000a8 	.word	0x200000a8

08006430 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006430:	b580      	push	{r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800644a:	2300      	movs	r3, #0
 800644c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800644e:	f3ef 8305 	mrs	r3, IPSR
 8006452:	613b      	str	r3, [r7, #16]
  return(result);
 8006454:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10f      	bne.n	800647a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645a:	f3ef 8310 	mrs	r3, PRIMASK
 800645e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d105      	bne.n	8006472 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006466:	f3ef 8311 	mrs	r3, BASEPRI
 800646a:	60bb      	str	r3, [r7, #8]
  return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d007      	beq.n	8006482 <osMutexAcquire+0x52>
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <osMutexAcquire+0xb8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d103      	bne.n	8006482 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800647a:	f06f 0305 	mvn.w	r3, #5
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e02c      	b.n	80064dc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d103      	bne.n	8006490 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006488:	f06f 0303 	mvn.w	r3, #3
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	e025      	b.n	80064dc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d011      	beq.n	80064ba <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	69b8      	ldr	r0, [r7, #24]
 800649a:	f000 fe97 	bl	80071cc <xQueueTakeMutexRecursive>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d01b      	beq.n	80064dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80064aa:	f06f 0301 	mvn.w	r3, #1
 80064ae:	61fb      	str	r3, [r7, #28]
 80064b0:	e014      	b.n	80064dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80064b2:	f06f 0302 	mvn.w	r3, #2
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e010      	b.n	80064dc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	69b8      	ldr	r0, [r7, #24]
 80064be:	f001 fa51 	bl	8007964 <xQueueSemaphoreTake>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d009      	beq.n	80064dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80064ce:	f06f 0301 	mvn.w	r3, #1
 80064d2:	61fb      	str	r3, [r7, #28]
 80064d4:	e002      	b.n	80064dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80064d6:	f06f 0302 	mvn.w	r3, #2
 80064da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80064dc:	69fb      	ldr	r3, [r7, #28]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3720      	adds	r7, #32
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200000a8 	.word	0x200000a8

080064ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006508:	f3ef 8305 	mrs	r3, IPSR
 800650c:	613b      	str	r3, [r7, #16]
  return(result);
 800650e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10f      	bne.n	8006534 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006514:	f3ef 8310 	mrs	r3, PRIMASK
 8006518:	60fb      	str	r3, [r7, #12]
  return(result);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006520:	f3ef 8311 	mrs	r3, BASEPRI
 8006524:	60bb      	str	r3, [r7, #8]
  return(result);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <osMutexRelease+0x50>
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <osMutexRelease+0x9c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b02      	cmp	r3, #2
 8006532:	d103      	bne.n	800653c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006534:	f06f 0305 	mvn.w	r3, #5
 8006538:	61fb      	str	r3, [r7, #28]
 800653a:	e01f      	b.n	800657c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d103      	bne.n	800654a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006542:	f06f 0303 	mvn.w	r3, #3
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e018      	b.n	800657c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d009      	beq.n	8006564 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006550:	69b8      	ldr	r0, [r7, #24]
 8006552:	f000 fe05 	bl	8007160 <xQueueGiveMutexRecursive>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d00f      	beq.n	800657c <osMutexRelease+0x90>
        stat = osErrorResource;
 800655c:	f06f 0302 	mvn.w	r3, #2
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	e00b      	b.n	800657c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006564:	2300      	movs	r3, #0
 8006566:	2200      	movs	r2, #0
 8006568:	2100      	movs	r1, #0
 800656a:	69b8      	ldr	r0, [r7, #24]
 800656c:	f000 fed8 	bl	8007320 <xQueueGenericSend>
 8006570:	4603      	mov	r3, r0
 8006572:	2b01      	cmp	r3, #1
 8006574:	d002      	beq.n	800657c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006576:	f06f 0302 	mvn.w	r3, #2
 800657a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800657c:	69fb      	ldr	r3, [r7, #28]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3720      	adds	r7, #32
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	200000a8 	.word	0x200000a8

0800658c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	; 0x30
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006598:	2300      	movs	r3, #0
 800659a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659c:	f3ef 8305 	mrs	r3, IPSR
 80065a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80065a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f040 8086 	bne.w	80066b6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065aa:	f3ef 8310 	mrs	r3, PRIMASK
 80065ae:	617b      	str	r3, [r7, #20]
  return(result);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065b6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ba:	613b      	str	r3, [r7, #16]
  return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <osSemaphoreNew+0x3e>
 80065c2:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <osSemaphoreNew+0x134>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d075      	beq.n	80066b6 <osSemaphoreNew+0x12a>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d072      	beq.n	80066b6 <osSemaphoreNew+0x12a>
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d86e      	bhi.n	80066b6 <osSemaphoreNew+0x12a>
    mem = -1;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <osSemaphoreNew+0x6e>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	2b4f      	cmp	r3, #79	; 0x4f
 80065f2:	d902      	bls.n	80065fa <osSemaphoreNew+0x6e>
        mem = 1;
 80065f4:	2301      	movs	r3, #1
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	e00c      	b.n	8006614 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <osSemaphoreNew+0x88>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <osSemaphoreNew+0x88>
          mem = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
 800660e:	e001      	b.n	8006614 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800661a:	d04c      	beq.n	80066b6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d128      	bne.n	8006674 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10a      	bne.n	800663e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	2203      	movs	r2, #3
 800662e:	9200      	str	r2, [sp, #0]
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	2001      	movs	r0, #1
 8006636:	f000 fc5f 	bl	8006ef8 <xQueueGenericCreateStatic>
 800663a:	6278      	str	r0, [r7, #36]	; 0x24
 800663c:	e005      	b.n	800664a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800663e:	2203      	movs	r2, #3
 8006640:	2100      	movs	r1, #0
 8006642:	2001      	movs	r0, #1
 8006644:	f000 fcda 	bl	8006ffc <xQueueGenericCreate>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d022      	beq.n	8006696 <osSemaphoreNew+0x10a>
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01f      	beq.n	8006696 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006656:	2300      	movs	r3, #0
 8006658:	2200      	movs	r2, #0
 800665a:	2100      	movs	r1, #0
 800665c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800665e:	f000 fe5f 	bl	8007320 <xQueueGenericSend>
 8006662:	4603      	mov	r3, r0
 8006664:	2b01      	cmp	r3, #1
 8006666:	d016      	beq.n	8006696 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800666a:	f001 fb55 	bl	8007d18 <vQueueDelete>
            hSemaphore = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
 8006672:	e010      	b.n	8006696 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d108      	bne.n	800668c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	461a      	mov	r2, r3
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fdda 	bl	800723c <xQueueCreateCountingSemaphoreStatic>
 8006688:	6278      	str	r0, [r7, #36]	; 0x24
 800668a:	e004      	b.n	8006696 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 fe0f 	bl	80072b2 <xQueueCreateCountingSemaphore>
 8006694:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <osSemaphoreNew+0x11e>
          name = attr->name;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e001      	b.n	80066ae <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80066ae:	69f9      	ldr	r1, [r7, #28]
 80066b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066b2:	f001 fc7f 	bl	8007fb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200000a8 	.word	0x200000a8

080066c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d103      	bne.n	80066e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80066dc:	f06f 0303 	mvn.w	r3, #3
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	e04b      	b.n	800677c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066e4:	f3ef 8305 	mrs	r3, IPSR
 80066e8:	617b      	str	r3, [r7, #20]
  return(result);
 80066ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10f      	bne.n	8006710 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066f0:	f3ef 8310 	mrs	r3, PRIMASK
 80066f4:	613b      	str	r3, [r7, #16]
  return(result);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d105      	bne.n	8006708 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006700:	60fb      	str	r3, [r7, #12]
  return(result);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d026      	beq.n	8006756 <osSemaphoreAcquire+0x92>
 8006708:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <osSemaphoreAcquire+0xc4>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d122      	bne.n	8006756 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006716:	f06f 0303 	mvn.w	r3, #3
 800671a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800671c:	e02d      	b.n	800677a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	461a      	mov	r2, r3
 8006728:	2100      	movs	r1, #0
 800672a:	69b8      	ldr	r0, [r7, #24]
 800672c:	f001 fa2e 	bl	8007b8c <xQueueReceiveFromISR>
 8006730:	4603      	mov	r3, r0
 8006732:	2b01      	cmp	r3, #1
 8006734:	d003      	beq.n	800673e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006736:	f06f 0302 	mvn.w	r3, #2
 800673a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800673c:	e01d      	b.n	800677a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01a      	beq.n	800677a <osSemaphoreAcquire+0xb6>
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <osSemaphoreAcquire+0xc8>)
 8006746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006754:	e011      	b.n	800677a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	69b8      	ldr	r0, [r7, #24]
 800675a:	f001 f903 	bl	8007964 <xQueueSemaphoreTake>
 800675e:	4603      	mov	r3, r0
 8006760:	2b01      	cmp	r3, #1
 8006762:	d00b      	beq.n	800677c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800676a:	f06f 0301 	mvn.w	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
 8006770:	e004      	b.n	800677c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006772:	f06f 0302 	mvn.w	r3, #2
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e000      	b.n	800677c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800677a:	bf00      	nop
      }
    }
  }

  return (stat);
 800677c:	69fb      	ldr	r3, [r7, #28]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200000a8 	.word	0x200000a8
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800679c:	2300      	movs	r3, #0
 800679e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d103      	bne.n	80067ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80067a6:	f06f 0303 	mvn.w	r3, #3
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	e03e      	b.n	800682c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	617b      	str	r3, [r7, #20]
  return(result);
 80067b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	613b      	str	r3, [r7, #16]
  return(result);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01e      	beq.n	8006810 <osSemaphoreRelease+0x80>
 80067d2:	4b19      	ldr	r3, [pc, #100]	; (8006838 <osSemaphoreRelease+0xa8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d11a      	bne.n	8006810 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80067de:	f107 0308 	add.w	r3, r7, #8
 80067e2:	4619      	mov	r1, r3
 80067e4:	69b8      	ldr	r0, [r7, #24]
 80067e6:	f000 ff41 	bl	800766c <xQueueGiveFromISR>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d003      	beq.n	80067f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80067f0:	f06f 0302 	mvn.w	r3, #2
 80067f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80067f6:	e018      	b.n	800682a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d015      	beq.n	800682a <osSemaphoreRelease+0x9a>
 80067fe:	4b0f      	ldr	r3, [pc, #60]	; (800683c <osSemaphoreRelease+0xac>)
 8006800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800680e:	e00c      	b.n	800682a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006810:	2300      	movs	r3, #0
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	69b8      	ldr	r0, [r7, #24]
 8006818:	f000 fd82 	bl	8007320 <xQueueGenericSend>
 800681c:	4603      	mov	r3, r0
 800681e:	2b01      	cmp	r3, #1
 8006820:	d004      	beq.n	800682c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006822:	f06f 0302 	mvn.w	r3, #2
 8006826:	61fb      	str	r3, [r7, #28]
 8006828:	e000      	b.n	800682c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800682a:	bf00      	nop
    }
  }

  return (stat);
 800682c:	69fb      	ldr	r3, [r7, #28]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	200000a8 	.word	0x200000a8
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	617b      	str	r3, [r7, #20]
  return(result);
 8006852:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10f      	bne.n	8006878 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006858:	f3ef 8310 	mrs	r3, PRIMASK
 800685c:	613b      	str	r3, [r7, #16]
  return(result);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006864:	f3ef 8311 	mrs	r3, BASEPRI
 8006868:	60fb      	str	r3, [r7, #12]
  return(result);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d007      	beq.n	8006880 <osSemaphoreDelete+0x40>
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <osSemaphoreDelete+0x68>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b02      	cmp	r3, #2
 8006876:	d103      	bne.n	8006880 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8006878:	f06f 0305 	mvn.w	r3, #5
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	e00e      	b.n	800689e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d103      	bne.n	800688e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8006886:	f06f 0303 	mvn.w	r3, #3
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e007      	b.n	800689e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800688e:	69b8      	ldr	r0, [r7, #24]
 8006890:	f001 fbba 	bl	8008008 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8006898:	69b8      	ldr	r0, [r7, #24]
 800689a:	f001 fa3d 	bl	8007d18 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800689e:	69fb      	ldr	r3, [r7, #28]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	200000a8 	.word	0x200000a8

080068ac <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08c      	sub	sp, #48	; 0x30
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80068b8:	2300      	movs	r3, #0
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068bc:	f3ef 8305 	mrs	r3, IPSR
 80068c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80068c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d16f      	bne.n	80069a8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068c8:	f3ef 8310 	mrs	r3, PRIMASK
 80068cc:	617b      	str	r3, [r7, #20]
  return(result);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068d4:	f3ef 8311 	mrs	r3, BASEPRI
 80068d8:	613b      	str	r3, [r7, #16]
  return(result);
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <osMessageQueueNew+0x3c>
 80068e0:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <osMessageQueueNew+0x108>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d05f      	beq.n	80069a8 <osMessageQueueNew+0xfc>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d05c      	beq.n	80069a8 <osMessageQueueNew+0xfc>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d059      	beq.n	80069a8 <osMessageQueueNew+0xfc>
    mem = -1;
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d029      	beq.n	8006954 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d012      	beq.n	800692e <osMessageQueueNew+0x82>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b4f      	cmp	r3, #79	; 0x4f
 800690e:	d90e      	bls.n	800692e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <osMessageQueueNew+0x82>
        mem = 1;
 8006928:	2301      	movs	r3, #1
 800692a:	623b      	str	r3, [r7, #32]
 800692c:	e014      	b.n	8006958 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d110      	bne.n	8006958 <osMessageQueueNew+0xac>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006942:	2b00      	cmp	r3, #0
 8006944:	d108      	bne.n	8006958 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d104      	bne.n	8006958 <osMessageQueueNew+0xac>
          mem = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	623b      	str	r3, [r7, #32]
 8006952:	e001      	b.n	8006958 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006954:	2300      	movs	r3, #0
 8006956:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d10b      	bne.n	8006976 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2100      	movs	r1, #0
 8006968:	9100      	str	r1, [sp, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fac3 	bl	8006ef8 <xQueueGenericCreateStatic>
 8006972:	6278      	str	r0, [r7, #36]	; 0x24
 8006974:	e008      	b.n	8006988 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800697c:	2200      	movs	r2, #0
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fb3b 	bl	8006ffc <xQueueGenericCreate>
 8006986:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00c      	beq.n	80069a8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <osMessageQueueNew+0xf0>
        name = attr->name;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e001      	b.n	80069a0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80069a0:	69f9      	ldr	r1, [r7, #28]
 80069a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a4:	f001 fb06 	bl	8007fb4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3728      	adds	r7, #40	; 0x28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	200000a8 	.word	0x200000a8

080069b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	603b      	str	r3, [r7, #0]
 80069c4:	4613      	mov	r3, r2
 80069c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d0:	f3ef 8305 	mrs	r3, IPSR
 80069d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80069d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10f      	bne.n	80069fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069dc:	f3ef 8310 	mrs	r3, PRIMASK
 80069e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d105      	bne.n	80069f4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069e8:	f3ef 8311 	mrs	r3, BASEPRI
 80069ec:	617b      	str	r3, [r7, #20]
  return(result);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d02c      	beq.n	8006a4e <osMessageQueuePut+0x96>
 80069f4:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <osMessageQueuePut+0xe0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d128      	bne.n	8006a4e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d005      	beq.n	8006a0e <osMessageQueuePut+0x56>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <osMessageQueuePut+0x56>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006a0e:	f06f 0303 	mvn.w	r3, #3
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a14:	e039      	b.n	8006a8a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006a1a:	f107 0210 	add.w	r2, r7, #16
 8006a1e:	2300      	movs	r3, #0
 8006a20:	68b9      	ldr	r1, [r7, #8]
 8006a22:	6a38      	ldr	r0, [r7, #32]
 8006a24:	f000 fd82 	bl	800752c <xQueueGenericSendFromISR>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006a2e:	f06f 0302 	mvn.w	r3, #2
 8006a32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a34:	e029      	b.n	8006a8a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d026      	beq.n	8006a8a <osMessageQueuePut+0xd2>
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <osMessageQueuePut+0xe4>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a4c:	e01d      	b.n	8006a8a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <osMessageQueuePut+0xa2>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d103      	bne.n	8006a62 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006a5a:	f06f 0303 	mvn.w	r3, #3
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	e014      	b.n	8006a8c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006a62:	2300      	movs	r3, #0
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	6a38      	ldr	r0, [r7, #32]
 8006a6a:	f000 fc59 	bl	8007320 <xQueueGenericSend>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d00b      	beq.n	8006a8c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006a7a:	f06f 0301 	mvn.w	r3, #1
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a80:	e004      	b.n	8006a8c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006a82:	f06f 0302 	mvn.w	r3, #2
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
 8006a88:	e000      	b.n	8006a8c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006a8a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3728      	adds	r7, #40	; 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200000a8 	.word	0x200000a8
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab6:	f3ef 8305 	mrs	r3, IPSR
 8006aba:	61fb      	str	r3, [r7, #28]
  return(result);
 8006abc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10f      	bne.n	8006ae2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ace:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d02c      	beq.n	8006b34 <osMessageQueueGet+0x94>
 8006ada:	4b28      	ldr	r3, [pc, #160]	; (8006b7c <osMessageQueueGet+0xdc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b02      	cmp	r3, #2
 8006ae0:	d128      	bne.n	8006b34 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <osMessageQueueGet+0x54>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d002      	beq.n	8006af4 <osMessageQueueGet+0x54>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006af4:	f06f 0303 	mvn.w	r3, #3
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006afa:	e038      	b.n	8006b6e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006b00:	f107 0310 	add.w	r3, r7, #16
 8006b04:	461a      	mov	r2, r3
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	6a38      	ldr	r0, [r7, #32]
 8006b0a:	f001 f83f 	bl	8007b8c <xQueueReceiveFromISR>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d003      	beq.n	8006b1c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006b14:	f06f 0302 	mvn.w	r3, #2
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b1a:	e028      	b.n	8006b6e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d025      	beq.n	8006b6e <osMessageQueueGet+0xce>
 8006b22:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <osMessageQueueGet+0xe0>)
 8006b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b32:	e01c      	b.n	8006b6e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <osMessageQueueGet+0xa0>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006b40:	f06f 0303 	mvn.w	r3, #3
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e013      	b.n	8006b70 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	68b9      	ldr	r1, [r7, #8]
 8006b4c:	6a38      	ldr	r0, [r7, #32]
 8006b4e:	f000 fe23 	bl	8007798 <xQueueReceive>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d00b      	beq.n	8006b70 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006b5e:	f06f 0301 	mvn.w	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
 8006b64:	e004      	b.n	8006b70 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006b66:	f06f 0302 	mvn.w	r3, #2
 8006b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b6c:	e000      	b.n	8006b70 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b6e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3728      	adds	r7, #40	; 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	200000a8 	.word	0x200000a8
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d102      	bne.n	8006b9c <osMessageQueueGetCount+0x18>
    count = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	e01e      	b.n	8006bda <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b9c:	f3ef 8305 	mrs	r3, IPSR
 8006ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ba2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bac:	613b      	str	r3, [r7, #16]
  return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8006bb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <osMessageQueueGetCount+0x4e>
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <osMessageQueueGetCount+0x60>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d104      	bne.n	8006bd2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006bc8:	69b8      	ldr	r0, [r7, #24]
 8006bca:	f001 f885 	bl	8007cd8 <uxQueueMessagesWaitingFromISR>
 8006bce:	61f8      	str	r0, [r7, #28]
 8006bd0:	e003      	b.n	8006bda <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006bd2:	69b8      	ldr	r0, [r7, #24]
 8006bd4:	f001 f860 	bl	8007c98 <uxQueueMessagesWaiting>
 8006bd8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8006bda:	69fb      	ldr	r3, [r7, #28]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200000a8 	.word	0x200000a8

08006be8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bf4:	f3ef 8305 	mrs	r3, IPSR
 8006bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10f      	bne.n	8006c20 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c00:	f3ef 8310 	mrs	r3, PRIMASK
 8006c04:	613b      	str	r3, [r7, #16]
  return(result);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c10:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <osMessageQueueDelete+0x40>
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <osMessageQueueDelete+0x68>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d103      	bne.n	8006c28 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8006c20:	f06f 0305 	mvn.w	r3, #5
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e00e      	b.n	8006c46 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8006c2e:	f06f 0303 	mvn.w	r3, #3
 8006c32:	61fb      	str	r3, [r7, #28]
 8006c34:	e007      	b.n	8006c46 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8006c36:	69b8      	ldr	r0, [r7, #24]
 8006c38:	f001 f9e6 	bl	8008008 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8006c40:	69b8      	ldr	r0, [r7, #24]
 8006c42:	f001 f869 	bl	8007d18 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8006c46:	69fb      	ldr	r3, [r7, #28]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3720      	adds	r7, #32
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	200000a8 	.word	0x200000a8

08006c54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <vApplicationGetIdleTaskMemory+0x30>)
 8006c6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	200000ac 	.word	0x200000ac
 8006c84:	20000108 	.word	0x20000108

08006c88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a07      	ldr	r2, [pc, #28]	; (8006cb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4a06      	ldr	r2, [pc, #24]	; (8006cb8 <vApplicationGetTimerTaskMemory+0x30>)
 8006c9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ca6:	601a      	str	r2, [r3, #0]
}
 8006ca8:	bf00      	nop
 8006caa:	3714      	adds	r7, #20
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	20000308 	.word	0x20000308
 8006cb8:	20000364 	.word	0x20000364

08006cbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f103 0208 	add.w	r2, r3, #8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f103 0208 	add.w	r2, r3, #8
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f103 0208 	add.w	r2, r3, #8
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d74:	d103      	bne.n	8006d7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e00c      	b.n	8006d98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3308      	adds	r3, #8
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e002      	b.n	8006d8c <vListInsert+0x2e>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d2f6      	bcs.n	8006d86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	601a      	str	r2, [r3, #0]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6892      	ldr	r2, [r2, #8]
 8006de6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6852      	ldr	r2, [r2, #4]
 8006df0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d103      	bne.n	8006e04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	1e5a      	subs	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10c      	bne.n	8006e52 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	b672      	cpsid	i
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	b662      	cpsie	i
 8006e4c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e52:	f002 fde3 	bl	8009a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	441a      	add	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	3b01      	subs	r3, #1
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d114      	bne.n	8006ed2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01a      	beq.n	8006ee6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fd8f 	bl	80089d8 <xTaskRemoveFromEventList>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d012      	beq.n	8006ee6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <xQueueGenericReset+0xd0>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	e009      	b.n	8006ee6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fef0 	bl	8006cbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3324      	adds	r3, #36	; 0x24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff feeb 	bl	8006cbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ee6:	f002 fdcd 	bl	8009a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eea:	2301      	movs	r3, #1
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10c      	bne.n	8006f26 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	b672      	cpsid	i
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	b662      	cpsie	i
 8006f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f22:	bf00      	nop
 8006f24:	e7fe      	b.n	8006f24 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10c      	bne.n	8006f46 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	b672      	cpsid	i
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	b662      	cpsie	i
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <xQueueGenericCreateStatic+0x5a>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <xQueueGenericCreateStatic+0x5e>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <xQueueGenericCreateStatic+0x60>
 8006f56:	2300      	movs	r3, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10c      	bne.n	8006f76 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f60:	b672      	cpsid	i
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	b662      	cpsie	i
 8006f70:	623b      	str	r3, [r7, #32]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xQueueGenericCreateStatic+0x8a>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueGenericCreateStatic+0x8e>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueGenericCreateStatic+0x90>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10c      	bne.n	8006fa6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	b672      	cpsid	i
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	b662      	cpsie	i
 8006fa0:	61fb      	str	r3, [r7, #28]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fa6:	2350      	movs	r3, #80	; 0x50
 8006fa8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b50      	cmp	r3, #80	; 0x50
 8006fae:	d00c      	beq.n	8006fca <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	b672      	cpsid	i
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	b662      	cpsie	i
 8006fc4:	61bb      	str	r3, [r7, #24]
}
 8006fc6:	bf00      	nop
 8006fc8:	e7fe      	b.n	8006fc8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f847 	bl	8007080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3730      	adds	r7, #48	; 0x30
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	; 0x28
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	4613      	mov	r3, r2
 8007008:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10c      	bne.n	800702a <xQueueGenericCreate+0x2e>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	b672      	cpsid	i
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	b662      	cpsie	i
 8007024:	613b      	str	r3, [r7, #16]
}
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d102      	bne.n	8007036 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
 8007034:	e004      	b.n	8007040 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	3350      	adds	r3, #80	; 0x50
 8007044:	4618      	mov	r0, r3
 8007046:	f002 fe15 	bl	8009c74 <pvPortMalloc>
 800704a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d011      	beq.n	8007076 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	3350      	adds	r3, #80	; 0x50
 800705a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007064:	79fa      	ldrb	r2, [r7, #7]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4613      	mov	r3, r2
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f805 	bl	8007080 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007076:	69bb      	ldr	r3, [r7, #24]
	}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	601a      	str	r2, [r3, #0]
 800709a:	e002      	b.n	80070a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80070ae:	2101      	movs	r1, #1
 80070b0:	69b8      	ldr	r0, [r7, #24]
 80070b2:	f7ff feb7 	bl	8006e24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070be:	bf00      	nop
 80070c0:	3710      	adds	r7, #16
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00e      	beq.n	80070f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80070e6:	2300      	movs	r3, #0
 80070e8:	2200      	movs	r2, #0
 80070ea:	2100      	movs	r1, #0
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f917 	bl	8007320 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b086      	sub	sp, #24
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007104:	2301      	movs	r3, #1
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	461a      	mov	r2, r3
 8007110:	6939      	ldr	r1, [r7, #16]
 8007112:	6978      	ldr	r0, [r7, #20]
 8007114:	f7ff ff72 	bl	8006ffc <xQueueGenericCreate>
 8007118:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f7ff ffd3 	bl	80070c6 <prvInitialiseMutex>

		return xNewQueue;
 8007120:	68fb      	ldr	r3, [r7, #12]
	}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800712a:	b580      	push	{r7, lr}
 800712c:	b088      	sub	sp, #32
 800712e:	af02      	add	r7, sp, #8
 8007130:	4603      	mov	r3, r0
 8007132:	6039      	str	r1, [r7, #0]
 8007134:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007136:	2301      	movs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800713e:	79fb      	ldrb	r3, [r7, #7]
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2200      	movs	r2, #0
 8007146:	6939      	ldr	r1, [r7, #16]
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f7ff fed5 	bl	8006ef8 <xQueueGenericCreateStatic>
 800714e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ffb8 	bl	80070c6 <prvInitialiseMutex>

		return xNewQueue;
 8007156:	68fb      	ldr	r3, [r7, #12]
	}
 8007158:	4618      	mov	r0, r3
 800715a:	3718      	adds	r7, #24
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10c      	bne.n	800718c <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	b672      	cpsid	i
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	b662      	cpsie	i
 8007186:	60fb      	str	r3, [r7, #12]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	689c      	ldr	r4, [r3, #8]
 8007190:	f001 fde8 	bl	8008d64 <xTaskGetCurrentTaskHandle>
 8007194:	4603      	mov	r3, r0
 8007196:	429c      	cmp	r4, r3
 8007198:	d111      	bne.n	80071be <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80071ac:	2300      	movs	r3, #0
 80071ae:	2200      	movs	r2, #0
 80071b0:	2100      	movs	r1, #0
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f000 f8b4 	bl	8007320 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	e001      	b.n	80071c2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80071be:	2300      	movs	r3, #0
 80071c0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80071c2:	697b      	ldr	r3, [r7, #20]
	}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd90      	pop	{r4, r7, pc}

080071cc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10c      	bne.n	80071fa <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	b672      	cpsid	i
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	b662      	cpsie	i
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	689c      	ldr	r4, [r3, #8]
 80071fe:	f001 fdb1 	bl	8008d64 <xTaskGetCurrentTaskHandle>
 8007202:	4603      	mov	r3, r0
 8007204:	429c      	cmp	r4, r3
 8007206:	d107      	bne.n	8007218 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	1c5a      	adds	r2, r3, #1
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007212:	2301      	movs	r3, #1
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	e00c      	b.n	8007232 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f000 fba2 	bl	8007964 <xQueueSemaphoreTake>
 8007220:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007232:	697b      	ldr	r3, [r7, #20]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	bd90      	pop	{r4, r7, pc}

0800723c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10c      	bne.n	8007268 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007252:	b672      	cpsid	i
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	b662      	cpsie	i
 8007262:	61bb      	str	r3, [r7, #24]
}
 8007264:	bf00      	nop
 8007266:	e7fe      	b.n	8007266 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	429a      	cmp	r2, r3
 800726e:	d90c      	bls.n	800728a <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007274:	b672      	cpsid	i
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	b662      	cpsie	i
 8007284:	617b      	str	r3, [r7, #20]
}
 8007286:	bf00      	nop
 8007288:	e7fe      	b.n	8007288 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800728a:	2302      	movs	r3, #2
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	2100      	movs	r1, #0
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fe2f 	bl	8006ef8 <xQueueGenericCreateStatic>
 800729a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80072a8:	69fb      	ldr	r3, [r7, #28]
	}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10c      	bne.n	80072dc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	b672      	cpsid	i
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	b662      	cpsie	i
 80072d6:	613b      	str	r3, [r7, #16]
}
 80072d8:	bf00      	nop
 80072da:	e7fe      	b.n	80072da <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d90c      	bls.n	80072fe <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	b672      	cpsid	i
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	b662      	cpsie	i
 80072f8:	60fb      	str	r3, [r7, #12]
}
 80072fa:	bf00      	nop
 80072fc:	e7fe      	b.n	80072fc <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072fe:	2202      	movs	r2, #2
 8007300:	2100      	movs	r1, #0
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7ff fe7a 	bl	8006ffc <xQueueGenericCreate>
 8007308:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007316:	697b      	ldr	r3, [r7, #20]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3718      	adds	r7, #24
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08e      	sub	sp, #56	; 0x38
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800732e:	2300      	movs	r3, #0
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10c      	bne.n	8007356 <xQueueGenericSend+0x36>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	b672      	cpsid	i
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	b662      	cpsie	i
 8007350:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007352:	bf00      	nop
 8007354:	e7fe      	b.n	8007354 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <xQueueGenericSend+0x44>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <xQueueGenericSend+0x48>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <xQueueGenericSend+0x4a>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10c      	bne.n	8007388 <xQueueGenericSend+0x68>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	b672      	cpsid	i
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	b662      	cpsie	i
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d103      	bne.n	8007396 <xQueueGenericSend+0x76>
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <xQueueGenericSend+0x7a>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueGenericSend+0x7c>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10c      	bne.n	80073ba <xQueueGenericSend+0x9a>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	b672      	cpsid	i
 80073a6:	f383 8811 	msr	BASEPRI, r3
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	f3bf 8f4f 	dsb	sy
 80073b2:	b662      	cpsie	i
 80073b4:	623b      	str	r3, [r7, #32]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ba:	f001 fce3 	bl	8008d84 <xTaskGetSchedulerState>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <xQueueGenericSend+0xaa>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <xQueueGenericSend+0xae>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e000      	b.n	80073d0 <xQueueGenericSend+0xb0>
 80073ce:	2300      	movs	r3, #0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10c      	bne.n	80073ee <xQueueGenericSend+0xce>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	b672      	cpsid	i
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	b662      	cpsie	i
 80073e8:	61fb      	str	r3, [r7, #28]
}
 80073ea:	bf00      	nop
 80073ec:	e7fe      	b.n	80073ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073ee:	f002 fb15 	bl	8009a1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <xQueueGenericSend+0xe4>
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d129      	bne.n	8007458 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800740a:	f000 fcc2 	bl	8007d92 <prvCopyDataToQueue>
 800740e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b00      	cmp	r3, #0
 8007416:	d010      	beq.n	800743a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	3324      	adds	r3, #36	; 0x24
 800741c:	4618      	mov	r0, r3
 800741e:	f001 fadb 	bl	80089d8 <xTaskRemoveFromEventList>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d013      	beq.n	8007450 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007428:	4b3f      	ldr	r3, [pc, #252]	; (8007528 <xQueueGenericSend+0x208>)
 800742a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	e00a      	b.n	8007450 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d007      	beq.n	8007450 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007440:	4b39      	ldr	r3, [pc, #228]	; (8007528 <xQueueGenericSend+0x208>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007450:	f002 fb18 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007454:	2301      	movs	r3, #1
 8007456:	e063      	b.n	8007520 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800745e:	f002 fb11 	bl	8009a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007462:	2300      	movs	r3, #0
 8007464:	e05c      	b.n	8007520 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	4618      	mov	r0, r3
 8007472:	f001 fb17 	bl	8008aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007476:	2301      	movs	r3, #1
 8007478:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800747a:	f002 fb03 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800747e:	f001 f86b 	bl	8008558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007482:	f002 facb 	bl	8009a1c <vPortEnterCritical>
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800748c:	b25b      	sxtb	r3, r3
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d103      	bne.n	800749c <xQueueGenericSend+0x17c>
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d103      	bne.n	80074b2 <xQueueGenericSend+0x192>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b2:	f002 fae7 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074b6:	1d3a      	adds	r2, r7, #4
 80074b8:	f107 0314 	add.w	r3, r7, #20
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fb06 	bl	8008ad0 <xTaskCheckForTimeOut>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d124      	bne.n	8007514 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074cc:	f000 fd59 	bl	8007f82 <prvIsQueueFull>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d018      	beq.n	8007508 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	3310      	adds	r3, #16
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 fa26 	bl	8008930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074e6:	f000 fce4 	bl	8007eb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074ea:	f001 f843 	bl	8008574 <xTaskResumeAll>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f af7c 	bne.w	80073ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80074f6:	4b0c      	ldr	r3, [pc, #48]	; (8007528 <xQueueGenericSend+0x208>)
 80074f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	e772      	b.n	80073ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800750a:	f000 fcd2 	bl	8007eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800750e:	f001 f831 	bl	8008574 <xTaskResumeAll>
 8007512:	e76c      	b.n	80073ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007516:	f000 fccc 	bl	8007eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800751a:	f001 f82b 	bl	8008574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800751e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007520:	4618      	mov	r0, r3
 8007522:	3738      	adds	r7, #56	; 0x38
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	e000ed04 	.word	0xe000ed04

0800752c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08e      	sub	sp, #56	; 0x38
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10c      	bne.n	800755e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	b672      	cpsid	i
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	b662      	cpsie	i
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
}
 800755a:	bf00      	nop
 800755c:	e7fe      	b.n	800755c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <xQueueGenericSendFromISR+0x40>
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <xQueueGenericSendFromISR+0x44>
 800756c:	2301      	movs	r3, #1
 800756e:	e000      	b.n	8007572 <xQueueGenericSendFromISR+0x46>
 8007570:	2300      	movs	r3, #0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	b672      	cpsid	i
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	b662      	cpsie	i
 800758a:	623b      	str	r3, [r7, #32]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d103      	bne.n	800759e <xQueueGenericSendFromISR+0x72>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <xQueueGenericSendFromISR+0x76>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueGenericSendFromISR+0x78>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10c      	bne.n	80075c2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	b672      	cpsid	i
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	b662      	cpsie	i
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075c2:	f002 fb13 	bl	8009bec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075c6:	f3ef 8211 	mrs	r2, BASEPRI
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	61ba      	str	r2, [r7, #24]
 80075e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d302      	bcc.n	80075f8 <xQueueGenericSendFromISR+0xcc>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d12c      	bne.n	8007652 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007608:	f000 fbc3 	bl	8007d92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800760c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d112      	bne.n	800763c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	3324      	adds	r3, #36	; 0x24
 8007622:	4618      	mov	r0, r3
 8007624:	f001 f9d8 	bl	80089d8 <xTaskRemoveFromEventList>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e007      	b.n	800764c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800763c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007640:	3301      	adds	r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	b25a      	sxtb	r2, r3
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800764c:	2301      	movs	r3, #1
 800764e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007650:	e001      	b.n	8007656 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007660:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007664:	4618      	mov	r0, r3
 8007666:	3738      	adds	r7, #56	; 0x38
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08e      	sub	sp, #56	; 0x38
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10c      	bne.n	800769a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007684:	b672      	cpsid	i
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	b662      	cpsie	i
 8007694:	623b      	str	r3, [r7, #32]
}
 8007696:	bf00      	nop
 8007698:	e7fe      	b.n	8007698 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00c      	beq.n	80076bc <xQueueGiveFromISR+0x50>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	b672      	cpsid	i
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	b662      	cpsie	i
 80076b6:	61fb      	str	r3, [r7, #28]
}
 80076b8:	bf00      	nop
 80076ba:	e7fe      	b.n	80076ba <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <xQueueGiveFromISR+0x60>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <xQueueGiveFromISR+0x64>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e000      	b.n	80076d2 <xQueueGiveFromISR+0x66>
 80076d0:	2300      	movs	r3, #0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10c      	bne.n	80076f0 <xQueueGiveFromISR+0x84>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	b672      	cpsid	i
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	b662      	cpsie	i
 80076ea:	61bb      	str	r3, [r7, #24]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076f0:	f002 fa7c 	bl	8009bec <vPortValidateInterruptPriority>
	__asm volatile
 80076f4:	f3ef 8211 	mrs	r2, BASEPRI
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	b672      	cpsid	i
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	b662      	cpsie	i
 800770c:	617a      	str	r2, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007710:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007720:	429a      	cmp	r2, r3
 8007722:	d22b      	bcs.n	800777c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	1c5a      	adds	r2, r3, #1
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800773a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773e:	d112      	bne.n	8007766 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	2b00      	cmp	r3, #0
 8007746:	d016      	beq.n	8007776 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	4618      	mov	r0, r3
 800774e:	f001 f943 	bl	80089d8 <xTaskRemoveFromEventList>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	e007      	b.n	8007776 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800776a:	3301      	adds	r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	b25a      	sxtb	r2, r3
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007776:	2301      	movs	r3, #1
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
 800777a:	e001      	b.n	8007780 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800777c:	2300      	movs	r3, #0
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007782:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f383 8811 	msr	BASEPRI, r3
}
 800778a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800778e:	4618      	mov	r0, r3
 8007790:	3738      	adds	r7, #56	; 0x38
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
	...

08007798 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b08c      	sub	sp, #48	; 0x30
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80077a4:	2300      	movs	r3, #0
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10c      	bne.n	80077cc <xQueueReceive+0x34>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	b672      	cpsid	i
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	b662      	cpsie	i
 80077c6:	623b      	str	r3, [r7, #32]
}
 80077c8:	bf00      	nop
 80077ca:	e7fe      	b.n	80077ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d103      	bne.n	80077da <xQueueReceive+0x42>
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <xQueueReceive+0x46>
 80077da:	2301      	movs	r3, #1
 80077dc:	e000      	b.n	80077e0 <xQueueReceive+0x48>
 80077de:	2300      	movs	r3, #0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <xQueueReceive+0x66>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	b672      	cpsid	i
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	b662      	cpsie	i
 80077f8:	61fb      	str	r3, [r7, #28]
}
 80077fa:	bf00      	nop
 80077fc:	e7fe      	b.n	80077fc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077fe:	f001 fac1 	bl	8008d84 <xTaskGetSchedulerState>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d102      	bne.n	800780e <xQueueReceive+0x76>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <xQueueReceive+0x7a>
 800780e:	2301      	movs	r3, #1
 8007810:	e000      	b.n	8007814 <xQueueReceive+0x7c>
 8007812:	2300      	movs	r3, #0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10c      	bne.n	8007832 <xQueueReceive+0x9a>
	__asm volatile
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	b672      	cpsid	i
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	b662      	cpsie	i
 800782c:	61bb      	str	r3, [r7, #24]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f002 f8f3 	bl	8009a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01f      	beq.n	8007882 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007846:	f000 fb0e 	bl	8007e66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00f      	beq.n	800787a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	3310      	adds	r3, #16
 800785e:	4618      	mov	r0, r3
 8007860:	f001 f8ba 	bl	80089d8 <xTaskRemoveFromEventList>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800786a:	4b3d      	ldr	r3, [pc, #244]	; (8007960 <xQueueReceive+0x1c8>)
 800786c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	f3bf 8f4f 	dsb	sy
 8007876:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800787a:	f002 f903 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 800787e:	2301      	movs	r3, #1
 8007880:	e069      	b.n	8007956 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007888:	f002 f8fc 	bl	8009a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800788c:	2300      	movs	r3, #0
 800788e:	e062      	b.n	8007956 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007896:	f107 0310 	add.w	r3, r7, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f001 f902 	bl	8008aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078a4:	f002 f8ee 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078a8:	f000 fe56 	bl	8008558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ac:	f002 f8b6 	bl	8009a1c <vPortEnterCritical>
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078b6:	b25b      	sxtb	r3, r3
 80078b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078bc:	d103      	bne.n	80078c6 <xQueueReceive+0x12e>
 80078be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078cc:	b25b      	sxtb	r3, r3
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d103      	bne.n	80078dc <xQueueReceive+0x144>
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078dc:	f002 f8d2 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078e0:	1d3a      	adds	r2, r7, #4
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	4611      	mov	r1, r2
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 f8f1 	bl	8008ad0 <xTaskCheckForTimeOut>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d123      	bne.n	800793c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078f6:	f000 fb2e 	bl	8007f56 <prvIsQueueEmpty>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d017      	beq.n	8007930 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	4611      	mov	r1, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f001 f811 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 facf 	bl	8007eb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007914:	f000 fe2e 	bl	8008574 <xTaskResumeAll>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d189      	bne.n	8007832 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800791e:	4b10      	ldr	r3, [pc, #64]	; (8007960 <xQueueReceive+0x1c8>)
 8007920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	e780      	b.n	8007832 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007932:	f000 fabe 	bl	8007eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007936:	f000 fe1d 	bl	8008574 <xTaskResumeAll>
 800793a:	e77a      	b.n	8007832 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800793c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800793e:	f000 fab8 	bl	8007eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007942:	f000 fe17 	bl	8008574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007948:	f000 fb05 	bl	8007f56 <prvIsQueueEmpty>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f af6f 	beq.w	8007832 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007956:	4618      	mov	r0, r3
 8007958:	3730      	adds	r7, #48	; 0x30
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	e000ed04 	.word	0xe000ed04

08007964 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	; 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800796e:	2300      	movs	r3, #0
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800797a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	b672      	cpsid	i
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	b662      	cpsie	i
 8007994:	623b      	str	r3, [r7, #32]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	b672      	cpsid	i
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	b662      	cpsie	i
 80079b6:	61fb      	str	r3, [r7, #28]
}
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079bc:	f001 f9e2 	bl	8008d84 <xTaskGetSchedulerState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d102      	bne.n	80079cc <xQueueSemaphoreTake+0x68>
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <xQueueSemaphoreTake+0x6c>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e000      	b.n	80079d2 <xQueueSemaphoreTake+0x6e>
 80079d0:	2300      	movs	r3, #0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	61bb      	str	r3, [r7, #24]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f0:	f002 f814 	bl	8009a1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d024      	beq.n	8007a4a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a02:	1e5a      	subs	r2, r3, #1
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007a10:	f001 fb36 	bl	8009080 <pvTaskIncrementMutexHeldCount>
 8007a14:	4602      	mov	r2, r0
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00f      	beq.n	8007a42 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	3310      	adds	r3, #16
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 ffd6 	bl	80089d8 <xTaskRemoveFromEventList>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a32:	4b55      	ldr	r3, [pc, #340]	; (8007b88 <xQueueSemaphoreTake+0x224>)
 8007a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a42:	f002 f81f 	bl	8009a84 <vPortExitCritical>
				return pdPASS;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e099      	b.n	8007b7e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d113      	bne.n	8007a78 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00c      	beq.n	8007a70 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5a:	b672      	cpsid	i
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	b662      	cpsie	i
 8007a6a:	617b      	str	r3, [r7, #20]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a70:	f002 f808 	bl	8009a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e082      	b.n	8007b7e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a7e:	f107 030c 	add.w	r3, r7, #12
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f80e 	bl	8008aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a8c:	f001 fffa 	bl	8009a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a90:	f000 fd62 	bl	8008558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a94:	f001 ffc2 	bl	8009a1c <vPortEnterCritical>
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a9e:	b25b      	sxtb	r3, r3
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa4:	d103      	bne.n	8007aae <xQueueSemaphoreTake+0x14a>
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ab4:	b25b      	sxtb	r3, r3
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d103      	bne.n	8007ac4 <xQueueSemaphoreTake+0x160>
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac4:	f001 ffde 	bl	8009a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ac8:	463a      	mov	r2, r7
 8007aca:	f107 030c 	add.w	r3, r7, #12
 8007ace:	4611      	mov	r1, r2
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fffd 	bl	8008ad0 <xTaskCheckForTimeOut>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d132      	bne.n	8007b42 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ade:	f000 fa3a 	bl	8007f56 <prvIsQueueEmpty>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d026      	beq.n	8007b36 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007af0:	f001 ff94 	bl	8009a1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f961 	bl	8008dc0 <xTaskPriorityInherit>
 8007afe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007b00:	f001 ffc0 	bl	8009a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	3324      	adds	r3, #36	; 0x24
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 ff0f 	bl	8008930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b14:	f000 f9cd 	bl	8007eb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b18:	f000 fd2c 	bl	8008574 <xTaskResumeAll>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f47f af66 	bne.w	80079f0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b24:	4b18      	ldr	r3, [pc, #96]	; (8007b88 <xQueueSemaphoreTake+0x224>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	e75c      	b.n	80079f0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b38:	f000 f9bb 	bl	8007eb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b3c:	f000 fd1a 	bl	8008574 <xTaskResumeAll>
 8007b40:	e756      	b.n	80079f0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b44:	f000 f9b5 	bl	8007eb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b48:	f000 fd14 	bl	8008574 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b4e:	f000 fa02 	bl	8007f56 <prvIsQueueEmpty>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f43f af4b 	beq.w	80079f0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00d      	beq.n	8007b7c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b60:	f001 ff5c 	bl	8009a1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b66:	f000 f8fc 	bl	8007d62 <prvGetDisinheritPriorityAfterTimeout>
 8007b6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 f9fe 	bl	8008f74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b78:	f001 ff84 	bl	8009a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3738      	adds	r7, #56	; 0x38
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08e      	sub	sp, #56	; 0x38
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10c      	bne.n	8007bbc <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	b672      	cpsid	i
 8007ba8:	f383 8811 	msr	BASEPRI, r3
 8007bac:	f3bf 8f6f 	isb	sy
 8007bb0:	f3bf 8f4f 	dsb	sy
 8007bb4:	b662      	cpsie	i
 8007bb6:	623b      	str	r3, [r7, #32]
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d103      	bne.n	8007bca <xQueueReceiveFromISR+0x3e>
 8007bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <xQueueReceiveFromISR+0x42>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueReceiveFromISR+0x44>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10c      	bne.n	8007bee <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	b672      	cpsid	i
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	b662      	cpsie	i
 8007be8:	61fb      	str	r3, [r7, #28]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bee:	f001 fffd 	bl	8009bec <vPortValidateInterruptPriority>
	__asm volatile
 8007bf2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	b672      	cpsid	i
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	b662      	cpsie	i
 8007c0a:	61ba      	str	r2, [r7, #24]
 8007c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02f      	beq.n	8007c7e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c2c:	f000 f91b 	bl	8007e66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	1e5a      	subs	r2, r3, #1
 8007c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d112      	bne.n	8007c68 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d016      	beq.n	8007c78 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	3310      	adds	r3, #16
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fec2 	bl	80089d8 <xTaskRemoveFromEventList>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00e      	beq.n	8007c78 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e007      	b.n	8007c78 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	b25a      	sxtb	r2, r3
 8007c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7c:	e001      	b.n	8007c82 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	f383 8811 	msr	BASEPRI, r3
}
 8007c8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3738      	adds	r7, #56	; 0x38
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10c      	bne.n	8007cc0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	b672      	cpsid	i
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	b662      	cpsie	i
 8007cba:	60bb      	str	r3, [r7, #8]
}
 8007cbc:	bf00      	nop
 8007cbe:	e7fe      	b.n	8007cbe <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8007cc0:	f001 feac 	bl	8009a1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007cca:	f001 fedb 	bl	8009a84 <vPortExitCritical>

	return uxReturn;
 8007cce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10c      	bne.n	8007d04 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d08:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007d0a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	371c      	adds	r7, #28
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10c      	bne.n	8007d44 <vQueueDelete+0x2c>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	b672      	cpsid	i
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	b662      	cpsie	i
 8007d3e:	60bb      	str	r3, [r7, #8]
}
 8007d40:	bf00      	nop
 8007d42:	e7fe      	b.n	8007d42 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f95f 	bl	8008008 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f002 f857 	bl	8009e08 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d5a:	bf00      	nop
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}

08007d62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007d62:	b480      	push	{r7}
 8007d64:	b085      	sub	sp, #20
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d006      	beq.n	8007d80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	e001      	b.n	8007d84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007d84:	68fb      	ldr	r3, [r7, #12]
	}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr

08007d92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b086      	sub	sp, #24
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d10d      	bne.n	8007dcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d14d      	bne.n	8007e54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f001 f867 	bl	8008e90 <xTaskPriorityDisinherit>
 8007dc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	609a      	str	r2, [r3, #8]
 8007dca:	e043      	b.n	8007e54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d119      	bne.n	8007e06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6858      	ldr	r0, [r3, #4]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	461a      	mov	r2, r3
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	f00f fddf 	bl	80179a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685a      	ldr	r2, [r3, #4]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	441a      	add	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d32b      	bcc.n	8007e54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	605a      	str	r2, [r3, #4]
 8007e04:	e026      	b.n	8007e54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68d8      	ldr	r0, [r3, #12]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	f00f fdc5 	bl	80179a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	425b      	negs	r3, r3
 8007e20:	441a      	add	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	68da      	ldr	r2, [r3, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d207      	bcs.n	8007e42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	425b      	negs	r3, r3
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d105      	bne.n	8007e54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e5c:	697b      	ldr	r3, [r7, #20]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b082      	sub	sp, #8
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d018      	beq.n	8007eaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e80:	441a      	add	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68da      	ldr	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d303      	bcc.n	8007e9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68d9      	ldr	r1, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	6838      	ldr	r0, [r7, #0]
 8007ea6:	f00f fd7b 	bl	80179a0 <memcpy>
	}
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007eba:	f001 fdaf 	bl	8009a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ec6:	e011      	b.n	8007eec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d012      	beq.n	8007ef6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3324      	adds	r3, #36	; 0x24
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 fd7f 	bl	80089d8 <xTaskRemoveFromEventList>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ee0:	f000 fe5c 	bl	8008b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	dce9      	bgt.n	8007ec8 <prvUnlockQueue+0x16>
 8007ef4:	e000      	b.n	8007ef8 <prvUnlockQueue+0x46>
					break;
 8007ef6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	22ff      	movs	r2, #255	; 0xff
 8007efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007f00:	f001 fdc0 	bl	8009a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f04:	f001 fd8a 	bl	8009a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f10:	e011      	b.n	8007f36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d012      	beq.n	8007f40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3310      	adds	r3, #16
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fd5a 	bl	80089d8 <xTaskRemoveFromEventList>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007f2a:	f000 fe37 	bl	8008b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	dce9      	bgt.n	8007f12 <prvUnlockQueue+0x60>
 8007f3e:	e000      	b.n	8007f42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	22ff      	movs	r2, #255	; 0xff
 8007f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f4a:	f001 fd9b 	bl	8009a84 <vPortExitCritical>
}
 8007f4e:	bf00      	nop
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f5e:	f001 fd5d 	bl	8009a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d102      	bne.n	8007f70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	e001      	b.n	8007f74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f74:	f001 fd86 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b084      	sub	sp, #16
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f8a:	f001 fd47 	bl	8009a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d102      	bne.n	8007fa0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]
 8007f9e:	e001      	b.n	8007fa4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007fa4:	f001 fd6e 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
 8007fc2:	e014      	b.n	8007fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007fc4:	4a0f      	ldr	r2, [pc, #60]	; (8008004 <vQueueAddToRegistry+0x50>)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007fd0:	490c      	ldr	r1, [pc, #48]	; (8008004 <vQueueAddToRegistry+0x50>)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <vQueueAddToRegistry+0x50>)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	00db      	lsls	r3, r3, #3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fe6:	e006      	b.n	8007ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	d9e7      	bls.n	8007fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	200081a0 	.word	0x200081a0

08008008 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008010:	2300      	movs	r3, #0
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	e016      	b.n	8008044 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008016:	4a10      	ldr	r2, [pc, #64]	; (8008058 <vQueueUnregisterQueue+0x50>)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d10b      	bne.n	800803e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008026:	4a0c      	ldr	r2, [pc, #48]	; (8008058 <vQueueUnregisterQueue+0x50>)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2100      	movs	r1, #0
 800802c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008030:	4a09      	ldr	r2, [pc, #36]	; (8008058 <vQueueUnregisterQueue+0x50>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	00db      	lsls	r3, r3, #3
 8008036:	4413      	add	r3, r2
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
				break;
 800803c:	e006      	b.n	800804c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b07      	cmp	r3, #7
 8008048:	d9e5      	bls.n	8008016 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800804a:	bf00      	nop
 800804c:	bf00      	nop
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	200081a0 	.word	0x200081a0

0800805c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800806c:	f001 fcd6 	bl	8009a1c <vPortEnterCritical>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008076:	b25b      	sxtb	r3, r3
 8008078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807c:	d103      	bne.n	8008086 <vQueueWaitForMessageRestricted+0x2a>
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800808c:	b25b      	sxtb	r3, r3
 800808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008092:	d103      	bne.n	800809c <vQueueWaitForMessageRestricted+0x40>
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800809c:	f001 fcf2 	bl	8009a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	3324      	adds	r3, #36	; 0x24
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	68b9      	ldr	r1, [r7, #8]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fc63 	bl	800897c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff fefb 	bl	8007eb2 <prvUnlockQueue>
	}
 80080bc:	bf00      	nop
 80080be:	3718      	adds	r7, #24
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08e      	sub	sp, #56	; 0x38
 80080c8:	af04      	add	r7, sp, #16
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10c      	bne.n	80080f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	b672      	cpsid	i
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	b662      	cpsie	i
 80080ec:	623b      	str	r3, [r7, #32]
}
 80080ee:	bf00      	nop
 80080f0:	e7fe      	b.n	80080f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10c      	bne.n	8008112 <xTaskCreateStatic+0x4e>
	__asm volatile
 80080f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fc:	b672      	cpsid	i
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	b662      	cpsie	i
 800810c:	61fb      	str	r3, [r7, #28]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008112:	235c      	movs	r3, #92	; 0x5c
 8008114:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b5c      	cmp	r3, #92	; 0x5c
 800811a:	d00c      	beq.n	8008136 <xTaskCreateStatic+0x72>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	b672      	cpsid	i
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	b662      	cpsie	i
 8008130:	61bb      	str	r3, [r7, #24]
}
 8008132:	bf00      	nop
 8008134:	e7fe      	b.n	8008134 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01e      	beq.n	800817c <xTaskCreateStatic+0xb8>
 800813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01b      	beq.n	800817c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008156:	2300      	movs	r3, #0
 8008158:	9303      	str	r3, [sp, #12]
 800815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815c:	9302      	str	r3, [sp, #8]
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	9301      	str	r3, [sp, #4]
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f850 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008176:	f000 f8df 	bl	8008338 <prvAddNewTaskToReadyList>
 800817a:	e001      	b.n	8008180 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800817c:	2300      	movs	r3, #0
 800817e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008180:	697b      	ldr	r3, [r7, #20]
	}
 8008182:	4618      	mov	r0, r3
 8008184:	3728      	adds	r7, #40	; 0x28
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800818a:	b580      	push	{r7, lr}
 800818c:	b08c      	sub	sp, #48	; 0x30
 800818e:	af04      	add	r7, sp, #16
 8008190:	60f8      	str	r0, [r7, #12]
 8008192:	60b9      	str	r1, [r7, #8]
 8008194:	603b      	str	r3, [r7, #0]
 8008196:	4613      	mov	r3, r2
 8008198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fd68 	bl	8009c74 <pvPortMalloc>
 80081a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081ac:	205c      	movs	r0, #92	; 0x5c
 80081ae:	f001 fd61 	bl	8009c74 <pvPortMalloc>
 80081b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081ba:	69fb      	ldr	r3, [r7, #28]
 80081bc:	697a      	ldr	r2, [r7, #20]
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
 80081c0:	e005      	b.n	80081ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081c2:	6978      	ldr	r0, [r7, #20]
 80081c4:	f001 fe20 	bl	8009e08 <vPortFree>
 80081c8:	e001      	b.n	80081ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d017      	beq.n	8008204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	2300      	movs	r3, #0
 80081e0:	9303      	str	r3, [sp, #12]
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	9302      	str	r3, [sp, #8]
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 f80e 	bl	8008214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f000 f89d 	bl	8008338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081fe:	2301      	movs	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
 8008202:	e002      	b.n	800820a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800820a:	69bb      	ldr	r3, [r7, #24]
	}
 800820c:	4618      	mov	r0, r3
 800820e:	3720      	adds	r7, #32
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
 8008220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	461a      	mov	r2, r3
 800822c:	21a5      	movs	r1, #165	; 0xa5
 800822e:	f00f fbc5 	bl	80179bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800823c:	440b      	add	r3, r1
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00c      	beq.n	8008270 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825a:	b672      	cpsid	i
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	b662      	cpsie	i
 800826a:	617b      	str	r3, [r7, #20]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01f      	beq.n	80082b6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008276:	2300      	movs	r3, #0
 8008278:	61fb      	str	r3, [r7, #28]
 800827a:	e012      	b.n	80082a2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	7819      	ldrb	r1, [r3, #0]
 8008284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	4413      	add	r3, r2
 800828a:	3334      	adds	r3, #52	; 0x34
 800828c:	460a      	mov	r2, r1
 800828e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d006      	beq.n	80082aa <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	3301      	adds	r3, #1
 80082a0:	61fb      	str	r3, [r7, #28]
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	2b0f      	cmp	r3, #15
 80082a6:	d9e9      	bls.n	800827c <prvInitialiseNewTask+0x68>
 80082a8:	e000      	b.n	80082ac <prvInitialiseNewTask+0x98>
			{
				break;
 80082aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082b4:	e003      	b.n	80082be <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	2b37      	cmp	r3, #55	; 0x37
 80082c2:	d901      	bls.n	80082c8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082c4:	2337      	movs	r3, #55	; 0x37
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	2200      	movs	r2, #0
 80082d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd0c 	bl	8006cfc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	3318      	adds	r3, #24
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fd07 	bl	8006cfc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008306:	2200      	movs	r2, #0
 8008308:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800830a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	69b8      	ldr	r0, [r7, #24]
 8008318:	f001 fa76 	bl	8009808 <pxPortInitialiseStack>
 800831c:	4602      	mov	r2, r0
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800832c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800832e:	bf00      	nop
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008340:	f001 fb6c 	bl	8009a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008344:	4b2d      	ldr	r3, [pc, #180]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3301      	adds	r3, #1
 800834a:	4a2c      	ldr	r2, [pc, #176]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 800834c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800834e:	4b2c      	ldr	r3, [pc, #176]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d109      	bne.n	800836a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008356:	4a2a      	ldr	r2, [pc, #168]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800835c:	4b27      	ldr	r3, [pc, #156]	; (80083fc <prvAddNewTaskToReadyList+0xc4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d110      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008364:	f000 fc3e 	bl	8008be4 <prvInitialiseTaskLists>
 8008368:	e00d      	b.n	8008386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <prvAddNewTaskToReadyList+0xcc>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d109      	bne.n	8008386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008372:	4b23      	ldr	r3, [pc, #140]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837c:	429a      	cmp	r2, r3
 800837e:	d802      	bhi.n	8008386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008380:	4a1f      	ldr	r2, [pc, #124]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008386:	4b20      	ldr	r3, [pc, #128]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	3301      	adds	r3, #1
 800838c:	4a1e      	ldr	r2, [pc, #120]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 800838e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008390:	4b1d      	ldr	r3, [pc, #116]	; (8008408 <prvAddNewTaskToReadyList+0xd0>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <prvAddNewTaskToReadyList+0xd4>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d903      	bls.n	80083ac <prvAddNewTaskToReadyList+0x74>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	4a18      	ldr	r2, [pc, #96]	; (800840c <prvAddNewTaskToReadyList+0xd4>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b0:	4613      	mov	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	4413      	add	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4a15      	ldr	r2, [pc, #84]	; (8008410 <prvAddNewTaskToReadyList+0xd8>)
 80083ba:	441a      	add	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3304      	adds	r3, #4
 80083c0:	4619      	mov	r1, r3
 80083c2:	4610      	mov	r0, r2
 80083c4:	f7fe fca7 	bl	8006d16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083c8:	f001 fb5c 	bl	8009a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083cc:	4b0d      	ldr	r3, [pc, #52]	; (8008404 <prvAddNewTaskToReadyList+0xcc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00e      	beq.n	80083f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083d4:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <prvAddNewTaskToReadyList+0xc8>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083de:	429a      	cmp	r2, r3
 80083e0:	d207      	bcs.n	80083f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <prvAddNewTaskToReadyList+0xdc>)
 80083e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083f2:	bf00      	nop
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20000c38 	.word	0x20000c38
 8008400:	20000764 	.word	0x20000764
 8008404:	20000c44 	.word	0x20000c44
 8008408:	20000c54 	.word	0x20000c54
 800840c:	20000c40 	.word	0x20000c40
 8008410:	20000768 	.word	0x20000768
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d019      	beq.n	800845e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800842a:	4b14      	ldr	r3, [pc, #80]	; (800847c <vTaskDelay+0x64>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <vTaskDelay+0x34>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	b672      	cpsid	i
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	b662      	cpsie	i
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800844c:	f000 f884 	bl	8008558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008450:	2100      	movs	r1, #0
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fe28 	bl	80090a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008458:	f000 f88c 	bl	8008574 <xTaskResumeAll>
 800845c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008464:	4b06      	ldr	r3, [pc, #24]	; (8008480 <vTaskDelay+0x68>)
 8008466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008474:	bf00      	nop
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20000c60 	.word	0x20000c60
 8008480:	e000ed04 	.word	0xe000ed04

08008484 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08a      	sub	sp, #40	; 0x28
 8008488:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008492:	463a      	mov	r2, r7
 8008494:	1d39      	adds	r1, r7, #4
 8008496:	f107 0308 	add.w	r3, r7, #8
 800849a:	4618      	mov	r0, r3
 800849c:	f7fe fbda 	bl	8006c54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	9202      	str	r2, [sp, #8]
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2300      	movs	r3, #0
 80084b0:	460a      	mov	r2, r1
 80084b2:	4923      	ldr	r1, [pc, #140]	; (8008540 <vTaskStartScheduler+0xbc>)
 80084b4:	4823      	ldr	r0, [pc, #140]	; (8008544 <vTaskStartScheduler+0xc0>)
 80084b6:	f7ff fe05 	bl	80080c4 <xTaskCreateStatic>
 80084ba:	4603      	mov	r3, r0
 80084bc:	4a22      	ldr	r2, [pc, #136]	; (8008548 <vTaskStartScheduler+0xc4>)
 80084be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084c0:	4b21      	ldr	r3, [pc, #132]	; (8008548 <vTaskStartScheduler+0xc4>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084c8:	2301      	movs	r3, #1
 80084ca:	617b      	str	r3, [r7, #20]
 80084cc:	e001      	b.n	80084d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084ce:	2300      	movs	r3, #0
 80084d0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d102      	bne.n	80084de <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084d8:	f000 fe3a 	bl	8009150 <xTimerCreateTimerTask>
 80084dc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d118      	bne.n	8008516 <vTaskStartScheduler+0x92>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	b672      	cpsid	i
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	b662      	cpsie	i
 80084f8:	613b      	str	r3, [r7, #16]
}
 80084fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084fc:	4b13      	ldr	r3, [pc, #76]	; (800854c <vTaskStartScheduler+0xc8>)
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008504:	4b12      	ldr	r3, [pc, #72]	; (8008550 <vTaskStartScheduler+0xcc>)
 8008506:	2201      	movs	r2, #1
 8008508:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800850a:	4b12      	ldr	r3, [pc, #72]	; (8008554 <vTaskStartScheduler+0xd0>)
 800850c:	2200      	movs	r2, #0
 800850e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008510:	f001 fa06 	bl	8009920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008514:	e010      	b.n	8008538 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851c:	d10c      	bne.n	8008538 <vTaskStartScheduler+0xb4>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	b672      	cpsid	i
 8008524:	f383 8811 	msr	BASEPRI, r3
 8008528:	f3bf 8f6f 	isb	sy
 800852c:	f3bf 8f4f 	dsb	sy
 8008530:	b662      	cpsie	i
 8008532:	60fb      	str	r3, [r7, #12]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <vTaskStartScheduler+0xb2>
}
 8008538:	bf00      	nop
 800853a:	3718      	adds	r7, #24
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}
 8008540:	08018de4 	.word	0x08018de4
 8008544:	08008bb5 	.word	0x08008bb5
 8008548:	20000c5c 	.word	0x20000c5c
 800854c:	20000c58 	.word	0x20000c58
 8008550:	20000c44 	.word	0x20000c44
 8008554:	20000c3c 	.word	0x20000c3c

08008558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008558:	b480      	push	{r7}
 800855a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800855c:	4b04      	ldr	r3, [pc, #16]	; (8008570 <vTaskSuspendAll+0x18>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a03      	ldr	r2, [pc, #12]	; (8008570 <vTaskSuspendAll+0x18>)
 8008564:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20000c60 	.word	0x20000c60

08008574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008582:	4b43      	ldr	r3, [pc, #268]	; (8008690 <xTaskResumeAll+0x11c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10c      	bne.n	80085a4 <xTaskResumeAll+0x30>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	b672      	cpsid	i
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	b662      	cpsie	i
 800859e:	603b      	str	r3, [r7, #0]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085a4:	f001 fa3a 	bl	8009a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085a8:	4b39      	ldr	r3, [pc, #228]	; (8008690 <xTaskResumeAll+0x11c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	4a38      	ldr	r2, [pc, #224]	; (8008690 <xTaskResumeAll+0x11c>)
 80085b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085b2:	4b37      	ldr	r3, [pc, #220]	; (8008690 <xTaskResumeAll+0x11c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d162      	bne.n	8008680 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085ba:	4b36      	ldr	r3, [pc, #216]	; (8008694 <xTaskResumeAll+0x120>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d05e      	beq.n	8008680 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c2:	e02f      	b.n	8008624 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c4:	4b34      	ldr	r3, [pc, #208]	; (8008698 <xTaskResumeAll+0x124>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3318      	adds	r3, #24
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fbfd 	bl	8006dd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3304      	adds	r3, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fbf8 	bl	8006dd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4b2d      	ldr	r3, [pc, #180]	; (800869c <xTaskResumeAll+0x128>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d903      	bls.n	80085f4 <xTaskResumeAll+0x80>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	4a2a      	ldr	r2, [pc, #168]	; (800869c <xTaskResumeAll+0x128>)
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <xTaskResumeAll+0x12c>)
 8008602:	441a      	add	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3304      	adds	r3, #4
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7fe fb83 	bl	8006d16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	4b23      	ldr	r3, [pc, #140]	; (80086a4 <xTaskResumeAll+0x130>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861a:	429a      	cmp	r2, r3
 800861c:	d302      	bcc.n	8008624 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800861e:	4b22      	ldr	r3, [pc, #136]	; (80086a8 <xTaskResumeAll+0x134>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008624:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <xTaskResumeAll+0x124>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1cb      	bne.n	80085c4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008632:	f000 fb77 	bl	8008d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <xTaskResumeAll+0x138>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d010      	beq.n	8008664 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008642:	f000 f859 	bl	80086f8 <xTaskIncrementTick>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d002      	beq.n	8008652 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800864c:	4b16      	ldr	r3, [pc, #88]	; (80086a8 <xTaskResumeAll+0x134>)
 800864e:	2201      	movs	r2, #1
 8008650:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	3b01      	subs	r3, #1
 8008656:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f1      	bne.n	8008642 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800865e:	4b13      	ldr	r3, [pc, #76]	; (80086ac <xTaskResumeAll+0x138>)
 8008660:	2200      	movs	r2, #0
 8008662:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008664:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <xTaskResumeAll+0x134>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d009      	beq.n	8008680 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008670:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <xTaskResumeAll+0x13c>)
 8008672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008680:	f001 fa00 	bl	8009a84 <vPortExitCritical>

	return xAlreadyYielded;
 8008684:	68bb      	ldr	r3, [r7, #8]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000c60 	.word	0x20000c60
 8008694:	20000c38 	.word	0x20000c38
 8008698:	20000bf8 	.word	0x20000bf8
 800869c:	20000c40 	.word	0x20000c40
 80086a0:	20000768 	.word	0x20000768
 80086a4:	20000764 	.word	0x20000764
 80086a8:	20000c4c 	.word	0x20000c4c
 80086ac:	20000c48 	.word	0x20000c48
 80086b0:	e000ed04 	.word	0xe000ed04

080086b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086ba:	4b05      	ldr	r3, [pc, #20]	; (80086d0 <xTaskGetTickCount+0x1c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086c0:	687b      	ldr	r3, [r7, #4]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	20000c3c 	.word	0x20000c3c

080086d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086da:	f001 fa87 	bl	8009bec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80086de:	2300      	movs	r3, #0
 80086e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80086e2:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <xTaskGetTickCountFromISR+0x20>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086e8:	683b      	ldr	r3, [r7, #0]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000c3c 	.word	0x20000c3c

080086f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008702:	4b50      	ldr	r3, [pc, #320]	; (8008844 <xTaskIncrementTick+0x14c>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 808b 	bne.w	8008822 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800870c:	4b4e      	ldr	r3, [pc, #312]	; (8008848 <xTaskIncrementTick+0x150>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008714:	4a4c      	ldr	r2, [pc, #304]	; (8008848 <xTaskIncrementTick+0x150>)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d122      	bne.n	8008766 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008720:	4b4a      	ldr	r3, [pc, #296]	; (800884c <xTaskIncrementTick+0x154>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <xTaskIncrementTick+0x4c>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	b672      	cpsid	i
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	b662      	cpsie	i
 800873e:	603b      	str	r3, [r7, #0]
}
 8008740:	bf00      	nop
 8008742:	e7fe      	b.n	8008742 <xTaskIncrementTick+0x4a>
 8008744:	4b41      	ldr	r3, [pc, #260]	; (800884c <xTaskIncrementTick+0x154>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	60fb      	str	r3, [r7, #12]
 800874a:	4b41      	ldr	r3, [pc, #260]	; (8008850 <xTaskIncrementTick+0x158>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a3f      	ldr	r2, [pc, #252]	; (800884c <xTaskIncrementTick+0x154>)
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4a3f      	ldr	r2, [pc, #252]	; (8008850 <xTaskIncrementTick+0x158>)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4b3e      	ldr	r3, [pc, #248]	; (8008854 <xTaskIncrementTick+0x15c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3301      	adds	r3, #1
 800875e:	4a3d      	ldr	r2, [pc, #244]	; (8008854 <xTaskIncrementTick+0x15c>)
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	f000 fadf 	bl	8008d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008766:	4b3c      	ldr	r3, [pc, #240]	; (8008858 <xTaskIncrementTick+0x160>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	429a      	cmp	r2, r3
 800876e:	d349      	bcc.n	8008804 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008770:	4b36      	ldr	r3, [pc, #216]	; (800884c <xTaskIncrementTick+0x154>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800877a:	4b37      	ldr	r3, [pc, #220]	; (8008858 <xTaskIncrementTick+0x160>)
 800877c:	f04f 32ff 	mov.w	r2, #4294967295
 8008780:	601a      	str	r2, [r3, #0]
					break;
 8008782:	e03f      	b.n	8008804 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008784:	4b31      	ldr	r3, [pc, #196]	; (800884c <xTaskIncrementTick+0x154>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	429a      	cmp	r2, r3
 800879a:	d203      	bcs.n	80087a4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800879c:	4a2e      	ldr	r2, [pc, #184]	; (8008858 <xTaskIncrementTick+0x160>)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087a2:	e02f      	b.n	8008804 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe fb11 	bl	8006dd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d004      	beq.n	80087c0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	3318      	adds	r3, #24
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fe fb08 	bl	8006dd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c4:	4b25      	ldr	r3, [pc, #148]	; (800885c <xTaskIncrementTick+0x164>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d903      	bls.n	80087d4 <xTaskIncrementTick+0xdc>
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	4a22      	ldr	r2, [pc, #136]	; (800885c <xTaskIncrementTick+0x164>)
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4a1f      	ldr	r2, [pc, #124]	; (8008860 <xTaskIncrementTick+0x168>)
 80087e2:	441a      	add	r2, r3
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	3304      	adds	r3, #4
 80087e8:	4619      	mov	r1, r3
 80087ea:	4610      	mov	r0, r2
 80087ec:	f7fe fa93 	bl	8006d16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f4:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <xTaskIncrementTick+0x16c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3b8      	bcc.n	8008770 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80087fe:	2301      	movs	r3, #1
 8008800:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008802:	e7b5      	b.n	8008770 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008804:	4b17      	ldr	r3, [pc, #92]	; (8008864 <xTaskIncrementTick+0x16c>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880a:	4915      	ldr	r1, [pc, #84]	; (8008860 <xTaskIncrementTick+0x168>)
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d907      	bls.n	800882c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800881c:	2301      	movs	r3, #1
 800881e:	617b      	str	r3, [r7, #20]
 8008820:	e004      	b.n	800882c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008822:	4b11      	ldr	r3, [pc, #68]	; (8008868 <xTaskIncrementTick+0x170>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	4a0f      	ldr	r2, [pc, #60]	; (8008868 <xTaskIncrementTick+0x170>)
 800882a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800882c:	4b0f      	ldr	r3, [pc, #60]	; (800886c <xTaskIncrementTick+0x174>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d001      	beq.n	8008838 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008834:	2301      	movs	r3, #1
 8008836:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008838:	697b      	ldr	r3, [r7, #20]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000c60 	.word	0x20000c60
 8008848:	20000c3c 	.word	0x20000c3c
 800884c:	20000bf0 	.word	0x20000bf0
 8008850:	20000bf4 	.word	0x20000bf4
 8008854:	20000c50 	.word	0x20000c50
 8008858:	20000c58 	.word	0x20000c58
 800885c:	20000c40 	.word	0x20000c40
 8008860:	20000768 	.word	0x20000768
 8008864:	20000764 	.word	0x20000764
 8008868:	20000c48 	.word	0x20000c48
 800886c:	20000c4c 	.word	0x20000c4c

08008870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008876:	4b29      	ldr	r3, [pc, #164]	; (800891c <vTaskSwitchContext+0xac>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800887e:	4b28      	ldr	r3, [pc, #160]	; (8008920 <vTaskSwitchContext+0xb0>)
 8008880:	2201      	movs	r2, #1
 8008882:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008884:	e043      	b.n	800890e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 8008886:	4b26      	ldr	r3, [pc, #152]	; (8008920 <vTaskSwitchContext+0xb0>)
 8008888:	2200      	movs	r2, #0
 800888a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800888c:	4b25      	ldr	r3, [pc, #148]	; (8008924 <vTaskSwitchContext+0xb4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60fb      	str	r3, [r7, #12]
 8008892:	e012      	b.n	80088ba <vTaskSwitchContext+0x4a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10c      	bne.n	80088b4 <vTaskSwitchContext+0x44>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
 80088b2:	e7fe      	b.n	80088b2 <vTaskSwitchContext+0x42>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	491b      	ldr	r1, [pc, #108]	; (8008928 <vTaskSwitchContext+0xb8>)
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d0e2      	beq.n	8008894 <vTaskSwitchContext+0x24>
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4613      	mov	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	4413      	add	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4a13      	ldr	r2, [pc, #76]	; (8008928 <vTaskSwitchContext+0xb8>)
 80088da:	4413      	add	r3, r2
 80088dc:	60bb      	str	r3, [r7, #8]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	605a      	str	r2, [r3, #4]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	3308      	adds	r3, #8
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d104      	bne.n	80088fe <vTaskSwitchContext+0x8e>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	4a09      	ldr	r2, [pc, #36]	; (800892c <vTaskSwitchContext+0xbc>)
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	4a06      	ldr	r2, [pc, #24]	; (8008924 <vTaskSwitchContext+0xb4>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6013      	str	r3, [r2, #0]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	20000c60 	.word	0x20000c60
 8008920:	20000c4c 	.word	0x20000c4c
 8008924:	20000c40 	.word	0x20000c40
 8008928:	20000768 	.word	0x20000768
 800892c:	20000764 	.word	0x20000764

08008930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10c      	bne.n	800895a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008944:	b672      	cpsid	i
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	b662      	cpsie	i
 8008954:	60fb      	str	r3, [r7, #12]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <vTaskPlaceOnEventList+0x48>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3318      	adds	r3, #24
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f7fe f9fb 	bl	8006d5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008968:	2101      	movs	r1, #1
 800896a:	6838      	ldr	r0, [r7, #0]
 800896c:	f000 fb9c 	bl	80090a8 <prvAddCurrentTaskToDelayedList>
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000764 	.word	0x20000764

0800897c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800897c:	b580      	push	{r7, lr}
 800897e:	b086      	sub	sp, #24
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10c      	bne.n	80089a8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	b672      	cpsid	i
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	b662      	cpsie	i
 80089a2:	617b      	str	r3, [r7, #20]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a8:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <vTaskPlaceOnEventListRestricted+0x58>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3318      	adds	r3, #24
 80089ae:	4619      	mov	r1, r3
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	f7fe f9b0 	bl	8006d16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f000 fb6f 	bl	80090a8 <prvAddCurrentTaskToDelayedList>
	}
 80089ca:	bf00      	nop
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000764 	.word	0x20000764

080089d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10c      	bne.n	8008a08 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	b672      	cpsid	i
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	b662      	cpsie	i
 8008a02:	60fb      	str	r3, [r7, #12]
}
 8008a04:	bf00      	nop
 8008a06:	e7fe      	b.n	8008a06 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3318      	adds	r3, #24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f9df 	bl	8006dd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a12:	4b1e      	ldr	r3, [pc, #120]	; (8008a8c <xTaskRemoveFromEventList+0xb4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d11d      	bne.n	8008a56 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe f9d6 	bl	8006dd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <xTaskRemoveFromEventList+0xb8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d903      	bls.n	8008a38 <xTaskRemoveFromEventList+0x60>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	4a16      	ldr	r2, [pc, #88]	; (8008a90 <xTaskRemoveFromEventList+0xb8>)
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4a13      	ldr	r2, [pc, #76]	; (8008a94 <xTaskRemoveFromEventList+0xbc>)
 8008a46:	441a      	add	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4610      	mov	r0, r2
 8008a50:	f7fe f961 	bl	8006d16 <vListInsertEnd>
 8008a54:	e005      	b.n	8008a62 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	3318      	adds	r3, #24
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	480e      	ldr	r0, [pc, #56]	; (8008a98 <xTaskRemoveFromEventList+0xc0>)
 8008a5e:	f7fe f95a 	bl	8006d16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a66:	4b0d      	ldr	r3, [pc, #52]	; (8008a9c <xTaskRemoveFromEventList+0xc4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d905      	bls.n	8008a7c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a70:	2301      	movs	r3, #1
 8008a72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a74:	4b0a      	ldr	r3, [pc, #40]	; (8008aa0 <xTaskRemoveFromEventList+0xc8>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	e001      	b.n	8008a80 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a80:	697b      	ldr	r3, [r7, #20]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000c60 	.word	0x20000c60
 8008a90:	20000c40 	.word	0x20000c40
 8008a94:	20000768 	.word	0x20000768
 8008a98:	20000bf8 	.word	0x20000bf8
 8008a9c:	20000764 	.word	0x20000764
 8008aa0:	20000c4c 	.word	0x20000c4c

08008aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008aac:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <vTaskInternalSetTimeOutState+0x24>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <vTaskInternalSetTimeOutState+0x28>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	605a      	str	r2, [r3, #4]
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000c50 	.word	0x20000c50
 8008acc:	20000c3c 	.word	0x20000c3c

08008ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b088      	sub	sp, #32
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10c      	bne.n	8008afa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	b672      	cpsid	i
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	b662      	cpsie	i
 8008af4:	613b      	str	r3, [r7, #16]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10c      	bne.n	8008b1a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	60fb      	str	r3, [r7, #12]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008b1a:	f000 ff7f 	bl	8009a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b1e:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <xTaskCheckForTimeOut+0xc4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b36:	d102      	bne.n	8008b3e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	e023      	b.n	8008b86 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4b15      	ldr	r3, [pc, #84]	; (8008b98 <xTaskCheckForTimeOut+0xc8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d007      	beq.n	8008b5a <xTaskCheckForTimeOut+0x8a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d302      	bcc.n	8008b5a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	61fb      	str	r3, [r7, #28]
 8008b58:	e015      	b.n	8008b86 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d20b      	bcs.n	8008b7c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	1ad2      	subs	r2, r2, r3
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7ff ff97 	bl	8008aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e004      	b.n	8008b86 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b82:	2301      	movs	r3, #1
 8008b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b86:	f000 ff7d 	bl	8009a84 <vPortExitCritical>

	return xReturn;
 8008b8a:	69fb      	ldr	r3, [r7, #28]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20000c3c 	.word	0x20000c3c
 8008b98:	20000c50 	.word	0x20000c50

08008b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ba0:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <vTaskMissedYield+0x14>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	601a      	str	r2, [r3, #0]
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000c4c 	.word	0x20000c4c

08008bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008bbc:	f000 f852 	bl	8008c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <prvIdleTask+0x28>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d9f9      	bls.n	8008bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <prvIdleTask+0x2c>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bd8:	e7f0      	b.n	8008bbc <prvIdleTask+0x8>
 8008bda:	bf00      	nop
 8008bdc:	20000768 	.word	0x20000768
 8008be0:	e000ed04 	.word	0xe000ed04

08008be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bea:	2300      	movs	r3, #0
 8008bec:	607b      	str	r3, [r7, #4]
 8008bee:	e00c      	b.n	8008c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4a12      	ldr	r2, [pc, #72]	; (8008c44 <prvInitialiseTaskLists+0x60>)
 8008bfc:	4413      	add	r3, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe f85c 	bl	8006cbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3301      	adds	r3, #1
 8008c08:	607b      	str	r3, [r7, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b37      	cmp	r3, #55	; 0x37
 8008c0e:	d9ef      	bls.n	8008bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c10:	480d      	ldr	r0, [pc, #52]	; (8008c48 <prvInitialiseTaskLists+0x64>)
 8008c12:	f7fe f853 	bl	8006cbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c16:	480d      	ldr	r0, [pc, #52]	; (8008c4c <prvInitialiseTaskLists+0x68>)
 8008c18:	f7fe f850 	bl	8006cbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c1c:	480c      	ldr	r0, [pc, #48]	; (8008c50 <prvInitialiseTaskLists+0x6c>)
 8008c1e:	f7fe f84d 	bl	8006cbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c22:	480c      	ldr	r0, [pc, #48]	; (8008c54 <prvInitialiseTaskLists+0x70>)
 8008c24:	f7fe f84a 	bl	8006cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c28:	480b      	ldr	r0, [pc, #44]	; (8008c58 <prvInitialiseTaskLists+0x74>)
 8008c2a:	f7fe f847 	bl	8006cbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c2e:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <prvInitialiseTaskLists+0x78>)
 8008c30:	4a05      	ldr	r2, [pc, #20]	; (8008c48 <prvInitialiseTaskLists+0x64>)
 8008c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <prvInitialiseTaskLists+0x7c>)
 8008c36:	4a05      	ldr	r2, [pc, #20]	; (8008c4c <prvInitialiseTaskLists+0x68>)
 8008c38:	601a      	str	r2, [r3, #0]
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000768 	.word	0x20000768
 8008c48:	20000bc8 	.word	0x20000bc8
 8008c4c:	20000bdc 	.word	0x20000bdc
 8008c50:	20000bf8 	.word	0x20000bf8
 8008c54:	20000c0c 	.word	0x20000c0c
 8008c58:	20000c24 	.word	0x20000c24
 8008c5c:	20000bf0 	.word	0x20000bf0
 8008c60:	20000bf4 	.word	0x20000bf4

08008c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c6a:	e019      	b.n	8008ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c6c:	f000 fed6 	bl	8009a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c70:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <prvCheckTasksWaitingTermination+0x50>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7fe f8a7 	bl	8006dd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c82:	4b0d      	ldr	r3, [pc, #52]	; (8008cb8 <prvCheckTasksWaitingTermination+0x54>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	4a0b      	ldr	r2, [pc, #44]	; (8008cb8 <prvCheckTasksWaitingTermination+0x54>)
 8008c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	4a0a      	ldr	r2, [pc, #40]	; (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c96:	f000 fef5 	bl	8009a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f810 	bl	8008cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ca0:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <prvCheckTasksWaitingTermination+0x58>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d1e1      	bne.n	8008c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ca8:	bf00      	nop
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20000c0c 	.word	0x20000c0c
 8008cb8:	20000c38 	.word	0x20000c38
 8008cbc:	20000c20 	.word	0x20000c20

08008cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d108      	bne.n	8008ce4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 f896 	bl	8009e08 <vPortFree>
				vPortFree( pxTCB );
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 f893 	bl	8009e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ce2:	e01a      	b.n	8008d1a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d103      	bne.n	8008cf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f001 f88a 	bl	8009e08 <vPortFree>
	}
 8008cf4:	e011      	b.n	8008d1a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d00c      	beq.n	8008d1a <prvDeleteTCB+0x5a>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	b672      	cpsid	i
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	b662      	cpsie	i
 8008d14:	60fb      	str	r3, [r7, #12]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <prvDeleteTCB+0x58>
	}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d2a:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <prvResetNextTaskUnblockTime+0x38>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d104      	bne.n	8008d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <prvResetNextTaskUnblockTime+0x3c>)
 8008d36:	f04f 32ff 	mov.w	r2, #4294967295
 8008d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d3c:	e008      	b.n	8008d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d3e:	4b07      	ldr	r3, [pc, #28]	; (8008d5c <prvResetNextTaskUnblockTime+0x38>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvResetNextTaskUnblockTime+0x3c>)
 8008d4e:	6013      	str	r3, [r2, #0]
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr
 8008d5c:	20000bf0 	.word	0x20000bf0
 8008d60:	20000c58 	.word	0x20000c58

08008d64 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d6a:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <xTaskGetCurrentTaskHandle+0x1c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d70:	687b      	ldr	r3, [r7, #4]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	20000764 	.word	0x20000764

08008d84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d8a:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <xTaskGetSchedulerState+0x34>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d92:	2301      	movs	r3, #1
 8008d94:	607b      	str	r3, [r7, #4]
 8008d96:	e008      	b.n	8008daa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <xTaskGetSchedulerState+0x38>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d102      	bne.n	8008da6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008da0:	2302      	movs	r3, #2
 8008da2:	607b      	str	r3, [r7, #4]
 8008da4:	e001      	b.n	8008daa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008da6:	2300      	movs	r3, #0
 8008da8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008daa:	687b      	ldr	r3, [r7, #4]
	}
 8008dac:	4618      	mov	r0, r3
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	20000c44 	.word	0x20000c44
 8008dbc:	20000c60 	.word	0x20000c60

08008dc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d051      	beq.n	8008e7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <xTaskPriorityInherit+0xc4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d241      	bcs.n	8008e68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	db06      	blt.n	8008dfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dec:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <xTaskPriorityInherit+0xc4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6959      	ldr	r1, [r3, #20]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4a1f      	ldr	r2, [pc, #124]	; (8008e88 <xTaskPriorityInherit+0xc8>)
 8008e0c:	4413      	add	r3, r2
 8008e0e:	4299      	cmp	r1, r3
 8008e10:	d122      	bne.n	8008e58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	3304      	adds	r3, #4
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd ffda 	bl	8006dd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <xTaskPriorityInherit+0xc4>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2a:	4b18      	ldr	r3, [pc, #96]	; (8008e8c <xTaskPriorityInherit+0xcc>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d903      	bls.n	8008e3a <xTaskPriorityInherit+0x7a>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <xTaskPriorityInherit+0xcc>)
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e3e:	4613      	mov	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4a10      	ldr	r2, [pc, #64]	; (8008e88 <xTaskPriorityInherit+0xc8>)
 8008e48:	441a      	add	r2, r3
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f7fd ff60 	bl	8006d16 <vListInsertEnd>
 8008e56:	e004      	b.n	8008e62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e58:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <xTaskPriorityInherit+0xc4>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e62:	2301      	movs	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	e008      	b.n	8008e7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <xTaskPriorityInherit+0xc4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d201      	bcs.n	8008e7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e76:	2301      	movs	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	20000764 	.word	0x20000764
 8008e88:	20000768 	.word	0x20000768
 8008e8c:	20000c40 	.word	0x20000c40

08008e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d05a      	beq.n	8008f5c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008ea6:	4b30      	ldr	r3, [pc, #192]	; (8008f68 <xTaskPriorityDisinherit+0xd8>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d00c      	beq.n	8008eca <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	b672      	cpsid	i
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	b662      	cpsie	i
 8008ec4:	60fb      	str	r3, [r7, #12]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10c      	bne.n	8008eec <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	b672      	cpsid	i
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	b662      	cpsie	i
 8008ee6:	60bb      	str	r3, [r7, #8]
}
 8008ee8:	bf00      	nop
 8008eea:	e7fe      	b.n	8008eea <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef0:	1e5a      	subs	r2, r3, #1
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d02c      	beq.n	8008f5c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d128      	bne.n	8008f5c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fd ff5e 	bl	8006dd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2c:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <xTaskPriorityDisinherit+0xdc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d903      	bls.n	8008f3c <xTaskPriorityDisinherit+0xac>
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	4a0c      	ldr	r2, [pc, #48]	; (8008f6c <xTaskPriorityDisinherit+0xdc>)
 8008f3a:	6013      	str	r3, [r2, #0]
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <xTaskPriorityDisinherit+0xe0>)
 8008f4a:	441a      	add	r2, r3
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	4619      	mov	r1, r3
 8008f52:	4610      	mov	r0, r2
 8008f54:	f7fd fedf 	bl	8006d16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f5c:	697b      	ldr	r3, [r7, #20]
	}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000764 	.word	0x20000764
 8008f6c:	20000c40 	.word	0x20000c40
 8008f70:	20000768 	.word	0x20000768

08008f74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f82:	2301      	movs	r3, #1
 8008f84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d06e      	beq.n	800906a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10c      	bne.n	8008fae <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	b672      	cpsid	i
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	b662      	cpsie	i
 8008fa8:	60fb      	str	r3, [r7, #12]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d902      	bls.n	8008fbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e002      	b.n	8008fc4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d04d      	beq.n	800906a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d148      	bne.n	800906a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008fd8:	4b26      	ldr	r3, [pc, #152]	; (8009074 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d10c      	bne.n	8008ffc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	b672      	cpsid	i
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	b662      	cpsie	i
 8008ff6:	60bb      	str	r3, [r7, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	db04      	blt.n	800901a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	6959      	ldr	r1, [r3, #20]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4613      	mov	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4a13      	ldr	r2, [pc, #76]	; (8009078 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800902a:	4413      	add	r3, r2
 800902c:	4299      	cmp	r1, r3
 800902e:	d11c      	bne.n	800906a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	3304      	adds	r3, #4
 8009034:	4618      	mov	r0, r3
 8009036:	f7fd fecb 	bl	8006dd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903e:	4b0f      	ldr	r3, [pc, #60]	; (800907c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	429a      	cmp	r2, r3
 8009044:	d903      	bls.n	800904e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	4a0c      	ldr	r2, [pc, #48]	; (800907c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009052:	4613      	mov	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4413      	add	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4a07      	ldr	r2, [pc, #28]	; (8009078 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800905c:	441a      	add	r2, r3
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	3304      	adds	r3, #4
 8009062:	4619      	mov	r1, r3
 8009064:	4610      	mov	r0, r2
 8009066:	f7fd fe56 	bl	8006d16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800906a:	bf00      	nop
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000764 	.word	0x20000764
 8009078:	20000768 	.word	0x20000768
 800907c:	20000c40 	.word	0x20000c40

08009080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009084:	4b07      	ldr	r3, [pc, #28]	; (80090a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d004      	beq.n	8009096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800908c:	4b05      	ldr	r3, [pc, #20]	; (80090a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009092:	3201      	adds	r2, #1
 8009094:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009096:	4b03      	ldr	r3, [pc, #12]	; (80090a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009098:	681b      	ldr	r3, [r3, #0]
	}
 800909a:	4618      	mov	r0, r3
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	20000764 	.word	0x20000764

080090a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090b2:	4b21      	ldr	r3, [pc, #132]	; (8009138 <prvAddCurrentTaskToDelayedList+0x90>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b8:	4b20      	ldr	r3, [pc, #128]	; (800913c <prvAddCurrentTaskToDelayedList+0x94>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3304      	adds	r3, #4
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fd fe86 	bl	8006dd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ca:	d10a      	bne.n	80090e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d007      	beq.n	80090e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090d2:	4b1a      	ldr	r3, [pc, #104]	; (800913c <prvAddCurrentTaskToDelayedList+0x94>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4819      	ldr	r0, [pc, #100]	; (8009140 <prvAddCurrentTaskToDelayedList+0x98>)
 80090dc:	f7fd fe1b 	bl	8006d16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090e0:	e026      	b.n	8009130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4413      	add	r3, r2
 80090e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <prvAddCurrentTaskToDelayedList+0x94>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090f2:	68ba      	ldr	r2, [r7, #8]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d209      	bcs.n	800910e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090fa:	4b12      	ldr	r3, [pc, #72]	; (8009144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b0f      	ldr	r3, [pc, #60]	; (800913c <prvAddCurrentTaskToDelayedList+0x94>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3304      	adds	r3, #4
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f7fd fe29 	bl	8006d5e <vListInsert>
}
 800910c:	e010      	b.n	8009130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	4b0a      	ldr	r3, [pc, #40]	; (800913c <prvAddCurrentTaskToDelayedList+0x94>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	4619      	mov	r1, r3
 800911a:	4610      	mov	r0, r2
 800911c:	f7fd fe1f 	bl	8006d5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	429a      	cmp	r2, r3
 8009128:	d202      	bcs.n	8009130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800912a:	4a08      	ldr	r2, [pc, #32]	; (800914c <prvAddCurrentTaskToDelayedList+0xa4>)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	6013      	str	r3, [r2, #0]
}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000c3c 	.word	0x20000c3c
 800913c:	20000764 	.word	0x20000764
 8009140:	20000c24 	.word	0x20000c24
 8009144:	20000bf4 	.word	0x20000bf4
 8009148:	20000bf0 	.word	0x20000bf0
 800914c:	20000c58 	.word	0x20000c58

08009150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b08a      	sub	sp, #40	; 0x28
 8009154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800915a:	f000 fb15 	bl	8009788 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800915e:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <xTimerCreateTimerTask+0x84>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d021      	beq.n	80091aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800916a:	2300      	movs	r3, #0
 800916c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800916e:	1d3a      	adds	r2, r7, #4
 8009170:	f107 0108 	add.w	r1, r7, #8
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	4618      	mov	r0, r3
 800917a:	f7fd fd85 	bl	8006c88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800917e:	6879      	ldr	r1, [r7, #4]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	9202      	str	r2, [sp, #8]
 8009186:	9301      	str	r3, [sp, #4]
 8009188:	2302      	movs	r3, #2
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	2300      	movs	r3, #0
 800918e:	460a      	mov	r2, r1
 8009190:	4911      	ldr	r1, [pc, #68]	; (80091d8 <xTimerCreateTimerTask+0x88>)
 8009192:	4812      	ldr	r0, [pc, #72]	; (80091dc <xTimerCreateTimerTask+0x8c>)
 8009194:	f7fe ff96 	bl	80080c4 <xTaskCreateStatic>
 8009198:	4603      	mov	r3, r0
 800919a:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <xTimerCreateTimerTask+0x90>)
 800919c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800919e:	4b10      	ldr	r3, [pc, #64]	; (80091e0 <xTimerCreateTimerTask+0x90>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091a6:	2301      	movs	r3, #1
 80091a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10c      	bne.n	80091ca <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	b672      	cpsid	i
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	b662      	cpsie	i
 80091c4:	613b      	str	r3, [r7, #16]
}
 80091c6:	bf00      	nop
 80091c8:	e7fe      	b.n	80091c8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80091ca:	697b      	ldr	r3, [r7, #20]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	20000c94 	.word	0x20000c94
 80091d8:	08018dec 	.word	0x08018dec
 80091dc:	08009321 	.word	0x08009321
 80091e0:	20000c98 	.word	0x20000c98

080091e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	; 0x28
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <xTimerGenericCommand+0x32>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	623b      	str	r3, [r7, #32]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009216:	4b1a      	ldr	r3, [pc, #104]	; (8009280 <xTimerGenericCommand+0x9c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d02a      	beq.n	8009274 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b05      	cmp	r3, #5
 800922e:	dc18      	bgt.n	8009262 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009230:	f7ff fda8 	bl	8008d84 <xTaskGetSchedulerState>
 8009234:	4603      	mov	r3, r0
 8009236:	2b02      	cmp	r3, #2
 8009238:	d109      	bne.n	800924e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <xTimerGenericCommand+0x9c>)
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	f107 0110 	add.w	r1, r7, #16
 8009242:	2300      	movs	r3, #0
 8009244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009246:	f7fe f86b 	bl	8007320 <xQueueGenericSend>
 800924a:	6278      	str	r0, [r7, #36]	; 0x24
 800924c:	e012      	b.n	8009274 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800924e:	4b0c      	ldr	r3, [pc, #48]	; (8009280 <xTimerGenericCommand+0x9c>)
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	f107 0110 	add.w	r1, r7, #16
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	f7fe f861 	bl	8007320 <xQueueGenericSend>
 800925e:	6278      	str	r0, [r7, #36]	; 0x24
 8009260:	e008      	b.n	8009274 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <xTimerGenericCommand+0x9c>)
 8009264:	6818      	ldr	r0, [r3, #0]
 8009266:	f107 0110 	add.w	r1, r7, #16
 800926a:	2300      	movs	r3, #0
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	f7fe f95d 	bl	800752c <xQueueGenericSendFromISR>
 8009272:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009276:	4618      	mov	r0, r3
 8009278:	3728      	adds	r7, #40	; 0x28
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000c94 	.word	0x20000c94

08009284 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af02      	add	r7, sp, #8
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800928e:	4b23      	ldr	r3, [pc, #140]	; (800931c <prvProcessExpiredTimer+0x98>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	3304      	adds	r3, #4
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd fd97 	bl	8006dd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d024      	beq.n	80092fa <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	18d1      	adds	r1, r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	6978      	ldr	r0, [r7, #20]
 80092be:	f000 f8d3 	bl	8009468 <prvInsertTimerInActiveList>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d021      	beq.n	800930c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092c8:	2300      	movs	r3, #0
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	2300      	movs	r3, #0
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	2100      	movs	r1, #0
 80092d2:	6978      	ldr	r0, [r7, #20]
 80092d4:	f7ff ff86 	bl	80091e4 <xTimerGenericCommand>
 80092d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d115      	bne.n	800930c <prvProcessExpiredTimer+0x88>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	b672      	cpsid	i
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	b662      	cpsie	i
 80092f4:	60fb      	str	r3, [r7, #12]
}
 80092f6:	bf00      	nop
 80092f8:	e7fe      	b.n	80092f8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	b2da      	uxtb	r2, r3
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	6978      	ldr	r0, [r7, #20]
 8009312:	4798      	blx	r3
}
 8009314:	bf00      	nop
 8009316:	3718      	adds	r7, #24
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000c8c 	.word	0x20000c8c

08009320 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009328:	f107 0308 	add.w	r3, r7, #8
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f857 	bl	80093e0 <prvGetNextExpireTime>
 8009332:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4619      	mov	r1, r3
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 f803 	bl	8009344 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800933e:	f000 f8d5 	bl	80094ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009342:	e7f1      	b.n	8009328 <prvTimerTask+0x8>

08009344 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800934e:	f7ff f903 	bl	8008558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009352:	f107 0308 	add.w	r3, r7, #8
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f866 	bl	8009428 <prvSampleTimeNow>
 800935c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d130      	bne.n	80093c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <prvProcessTimerOrBlockTask+0x3c>
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	429a      	cmp	r2, r3
 8009370:	d806      	bhi.n	8009380 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009372:	f7ff f8ff 	bl	8008574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff ff83 	bl	8009284 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800937e:	e024      	b.n	80093ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d008      	beq.n	8009398 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009386:	4b13      	ldr	r3, [pc, #76]	; (80093d4 <prvProcessTimerOrBlockTask+0x90>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <prvProcessTimerOrBlockTask+0x50>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <prvProcessTimerOrBlockTask+0x52>
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009398:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <prvProcessTimerOrBlockTask+0x94>)
 800939a:	6818      	ldr	r0, [r3, #0]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	4619      	mov	r1, r3
 80093a6:	f7fe fe59 	bl	800805c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093aa:	f7ff f8e3 	bl	8008574 <xTaskResumeAll>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093b4:	4b09      	ldr	r3, [pc, #36]	; (80093dc <prvProcessTimerOrBlockTask+0x98>)
 80093b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	f3bf 8f6f 	isb	sy
}
 80093c4:	e001      	b.n	80093ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093c6:	f7ff f8d5 	bl	8008574 <xTaskResumeAll>
}
 80093ca:	bf00      	nop
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000c90 	.word	0x20000c90
 80093d8:	20000c94 	.word	0x20000c94
 80093dc:	e000ed04 	.word	0xe000ed04

080093e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093e8:	4b0e      	ldr	r3, [pc, #56]	; (8009424 <prvGetNextExpireTime+0x44>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d101      	bne.n	80093f6 <prvGetNextExpireTime+0x16>
 80093f2:	2201      	movs	r2, #1
 80093f4:	e000      	b.n	80093f8 <prvGetNextExpireTime+0x18>
 80093f6:	2200      	movs	r2, #0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d105      	bne.n	8009410 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009404:	4b07      	ldr	r3, [pc, #28]	; (8009424 <prvGetNextExpireTime+0x44>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	60fb      	str	r3, [r7, #12]
 800940e:	e001      	b.n	8009414 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009414:	68fb      	ldr	r3, [r7, #12]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	20000c8c 	.word	0x20000c8c

08009428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009430:	f7ff f940 	bl	80086b4 <xTaskGetTickCount>
 8009434:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009436:	4b0b      	ldr	r3, [pc, #44]	; (8009464 <prvSampleTimeNow+0x3c>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	429a      	cmp	r2, r3
 800943e:	d205      	bcs.n	800944c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009440:	f000 f93c 	bl	80096bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2201      	movs	r2, #1
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	e002      	b.n	8009452 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009452:	4a04      	ldr	r2, [pc, #16]	; (8009464 <prvSampleTimeNow+0x3c>)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009458:	68fb      	ldr	r3, [r7, #12]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	20000c9c 	.word	0x20000c9c

08009468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009476:	2300      	movs	r3, #0
 8009478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	429a      	cmp	r2, r3
 800948c:	d812      	bhi.n	80094b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800949c:	2301      	movs	r3, #1
 800949e:	617b      	str	r3, [r7, #20]
 80094a0:	e01b      	b.n	80094da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094a2:	4b10      	ldr	r3, [pc, #64]	; (80094e4 <prvInsertTimerInActiveList+0x7c>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3304      	adds	r3, #4
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7fd fc56 	bl	8006d5e <vListInsert>
 80094b2:	e012      	b.n	80094da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d206      	bcs.n	80094ca <prvInsertTimerInActiveList+0x62>
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d302      	bcc.n	80094ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	e007      	b.n	80094da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ca:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <prvInsertTimerInActiveList+0x80>)
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3304      	adds	r3, #4
 80094d2:	4619      	mov	r1, r3
 80094d4:	4610      	mov	r0, r2
 80094d6:	f7fd fc42 	bl	8006d5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094da:	697b      	ldr	r3, [r7, #20]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	20000c90 	.word	0x20000c90
 80094e8:	20000c8c 	.word	0x20000c8c

080094ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094f2:	e0d0      	b.n	8009696 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	da1a      	bge.n	8009530 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094fa:	1d3b      	adds	r3, r7, #4
 80094fc:	3304      	adds	r3, #4
 80094fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10c      	bne.n	8009520 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	b672      	cpsid	i
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	b662      	cpsie	i
 800951a:	61fb      	str	r3, [r7, #28]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009526:	6850      	ldr	r0, [r2, #4]
 8009528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800952a:	6892      	ldr	r2, [r2, #8]
 800952c:	4611      	mov	r1, r2
 800952e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f2c0 80ae 	blt.w	8009694 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d004      	beq.n	800954e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009546:	3304      	adds	r3, #4
 8009548:	4618      	mov	r0, r3
 800954a:	f7fd fc41 	bl	8006dd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800954e:	463b      	mov	r3, r7
 8009550:	4618      	mov	r0, r3
 8009552:	f7ff ff69 	bl	8009428 <prvSampleTimeNow>
 8009556:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b09      	cmp	r3, #9
 800955c:	f200 809b 	bhi.w	8009696 <prvProcessReceivedCommands+0x1aa>
 8009560:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <prvProcessReceivedCommands+0x7c>)
 8009562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009566:	bf00      	nop
 8009568:	08009591 	.word	0x08009591
 800956c:	08009591 	.word	0x08009591
 8009570:	08009591 	.word	0x08009591
 8009574:	08009609 	.word	0x08009609
 8009578:	0800961d 	.word	0x0800961d
 800957c:	0800966b 	.word	0x0800966b
 8009580:	08009591 	.word	0x08009591
 8009584:	08009591 	.word	0x08009591
 8009588:	08009609 	.word	0x08009609
 800958c:	0800961d 	.word	0x0800961d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	18d1      	adds	r1, r2, r3
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095b0:	f7ff ff5a 	bl	8009468 <prvInsertTimerInActiveList>
 80095b4:	4603      	mov	r3, r0
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d06d      	beq.n	8009696 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d062      	beq.n	8009696 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095d0:	68ba      	ldr	r2, [r7, #8]
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	699b      	ldr	r3, [r3, #24]
 80095d6:	441a      	add	r2, r3
 80095d8:	2300      	movs	r3, #0
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	2300      	movs	r3, #0
 80095de:	2100      	movs	r1, #0
 80095e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095e2:	f7ff fdff 	bl	80091e4 <xTimerGenericCommand>
 80095e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095e8:	6a3b      	ldr	r3, [r7, #32]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d153      	bne.n	8009696 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	61bb      	str	r3, [r7, #24]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f023 0301 	bic.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800961a:	e03c      	b.n	8009696 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	b2da      	uxtb	r2, r3
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10c      	bne.n	8009656 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	b672      	cpsid	i
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	b662      	cpsie	i
 8009650:	617b      	str	r3, [r7, #20]
}
 8009652:	bf00      	nop
 8009654:	e7fe      	b.n	8009654 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	18d1      	adds	r1, r2, r3
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009664:	f7ff ff00 	bl	8009468 <prvInsertTimerInActiveList>
					break;
 8009668:	e015      	b.n	8009696 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967a:	f000 fbc5 	bl	8009e08 <vPortFree>
 800967e:	e00a      	b.n	8009696 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009686:	f023 0301 	bic.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009692:	e000      	b.n	8009696 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009694:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009696:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <prvProcessReceivedCommands+0x1cc>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1d39      	adds	r1, r7, #4
 800969c:	2200      	movs	r2, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe f87a 	bl	8007798 <xQueueReceive>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f47f af24 	bne.w	80094f4 <prvProcessReceivedCommands+0x8>
	}
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	3730      	adds	r7, #48	; 0x30
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000c94 	.word	0x20000c94

080096bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096c2:	e04a      	b.n	800975a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096c4:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <prvSwitchTimerLists+0xc4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ce:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <prvSwitchTimerLists+0xc4>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3304      	adds	r3, #4
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fd fb77 	bl	8006dd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d030      	beq.n	800975a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	429a      	cmp	r2, r3
 8009708:	d90e      	bls.n	8009728 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009716:	4b1a      	ldr	r3, [pc, #104]	; (8009780 <prvSwitchTimerLists+0xc4>)
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f7fd fb1c 	bl	8006d5e <vListInsert>
 8009726:	e018      	b.n	800975a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009728:	2300      	movs	r3, #0
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	2300      	movs	r3, #0
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f7ff fd56 	bl	80091e4 <xTimerGenericCommand>
 8009738:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10c      	bne.n	800975a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009744:	b672      	cpsid	i
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	b662      	cpsie	i
 8009754:	603b      	str	r3, [r7, #0]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <prvSwitchTimerLists+0xc4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1af      	bne.n	80096c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <prvSwitchTimerLists+0xc4>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800976a:	4b06      	ldr	r3, [pc, #24]	; (8009784 <prvSwitchTimerLists+0xc8>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a04      	ldr	r2, [pc, #16]	; (8009780 <prvSwitchTimerLists+0xc4>)
 8009770:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009772:	4a04      	ldr	r2, [pc, #16]	; (8009784 <prvSwitchTimerLists+0xc8>)
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	6013      	str	r3, [r2, #0]
}
 8009778:	bf00      	nop
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000c8c 	.word	0x20000c8c
 8009784:	20000c90 	.word	0x20000c90

08009788 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800978e:	f000 f945 	bl	8009a1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009792:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <prvCheckForValidListAndQueue+0x60>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d120      	bne.n	80097dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800979a:	4814      	ldr	r0, [pc, #80]	; (80097ec <prvCheckForValidListAndQueue+0x64>)
 800979c:	f7fd fa8e 	bl	8006cbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097a0:	4813      	ldr	r0, [pc, #76]	; (80097f0 <prvCheckForValidListAndQueue+0x68>)
 80097a2:	f7fd fa8b 	bl	8006cbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097a6:	4b13      	ldr	r3, [pc, #76]	; (80097f4 <prvCheckForValidListAndQueue+0x6c>)
 80097a8:	4a10      	ldr	r2, [pc, #64]	; (80097ec <prvCheckForValidListAndQueue+0x64>)
 80097aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097ac:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <prvCheckForValidListAndQueue+0x70>)
 80097ae:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <prvCheckForValidListAndQueue+0x68>)
 80097b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097b2:	2300      	movs	r3, #0
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	4b11      	ldr	r3, [pc, #68]	; (80097fc <prvCheckForValidListAndQueue+0x74>)
 80097b8:	4a11      	ldr	r2, [pc, #68]	; (8009800 <prvCheckForValidListAndQueue+0x78>)
 80097ba:	2110      	movs	r1, #16
 80097bc:	200a      	movs	r0, #10
 80097be:	f7fd fb9b 	bl	8006ef8 <xQueueGenericCreateStatic>
 80097c2:	4603      	mov	r3, r0
 80097c4:	4a08      	ldr	r2, [pc, #32]	; (80097e8 <prvCheckForValidListAndQueue+0x60>)
 80097c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097c8:	4b07      	ldr	r3, [pc, #28]	; (80097e8 <prvCheckForValidListAndQueue+0x60>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <prvCheckForValidListAndQueue+0x60>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	490b      	ldr	r1, [pc, #44]	; (8009804 <prvCheckForValidListAndQueue+0x7c>)
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fe fbec 	bl	8007fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097dc:	f000 f952 	bl	8009a84 <vPortExitCritical>
}
 80097e0:	bf00      	nop
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20000c94 	.word	0x20000c94
 80097ec:	20000c64 	.word	0x20000c64
 80097f0:	20000c78 	.word	0x20000c78
 80097f4:	20000c8c 	.word	0x20000c8c
 80097f8:	20000c90 	.word	0x20000c90
 80097fc:	20000d40 	.word	0x20000d40
 8009800:	20000ca0 	.word	0x20000ca0
 8009804:	08018df4 	.word	0x08018df4

08009808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3b04      	subs	r3, #4
 8009818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3b04      	subs	r3, #4
 8009826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f023 0201 	bic.w	r2, r3, #1
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3b04      	subs	r3, #4
 8009836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009838:	4a0c      	ldr	r2, [pc, #48]	; (800986c <pxPortInitialiseStack+0x64>)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	3b14      	subs	r3, #20
 8009842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3b04      	subs	r3, #4
 800984e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f06f 0202 	mvn.w	r2, #2
 8009856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3b20      	subs	r3, #32
 800985c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800985e:	68fb      	ldr	r3, [r7, #12]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	08009871 	.word	0x08009871

08009870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800987a:	4b14      	ldr	r3, [pc, #80]	; (80098cc <prvTaskExitError+0x5c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009882:	d00c      	beq.n	800989e <prvTaskExitError+0x2e>
	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	b672      	cpsid	i
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	b662      	cpsie	i
 8009898:	60fb      	str	r3, [r7, #12]
}
 800989a:	bf00      	nop
 800989c:	e7fe      	b.n	800989c <prvTaskExitError+0x2c>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	b672      	cpsid	i
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	b662      	cpsie	i
 80098b2:	60bb      	str	r3, [r7, #8]
}
 80098b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098b6:	bf00      	nop
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0fc      	beq.n	80098b8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	2000000c 	.word	0x2000000c

080098d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098d0:	4b07      	ldr	r3, [pc, #28]	; (80098f0 <pxCurrentTCBConst2>)
 80098d2:	6819      	ldr	r1, [r3, #0]
 80098d4:	6808      	ldr	r0, [r1, #0]
 80098d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098da:	f380 8809 	msr	PSP, r0
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f04f 0000 	mov.w	r0, #0
 80098e6:	f380 8811 	msr	BASEPRI, r0
 80098ea:	4770      	bx	lr
 80098ec:	f3af 8000 	nop.w

080098f0 <pxCurrentTCBConst2>:
 80098f0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop

080098f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098f8:	4808      	ldr	r0, [pc, #32]	; (800991c <prvPortStartFirstTask+0x24>)
 80098fa:	6800      	ldr	r0, [r0, #0]
 80098fc:	6800      	ldr	r0, [r0, #0]
 80098fe:	f380 8808 	msr	MSP, r0
 8009902:	f04f 0000 	mov.w	r0, #0
 8009906:	f380 8814 	msr	CONTROL, r0
 800990a:	b662      	cpsie	i
 800990c:	b661      	cpsie	f
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	df00      	svc	0
 8009918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800991a:	bf00      	nop
 800991c:	e000ed08 	.word	0xe000ed08

08009920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009926:	4b37      	ldr	r3, [pc, #220]	; (8009a04 <xPortStartScheduler+0xe4>)
 8009928:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	22ff      	movs	r2, #255	; 0xff
 8009936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009948:	b2da      	uxtb	r2, r3
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <xPortStartScheduler+0xe8>)
 800994c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800994e:	4b2f      	ldr	r3, [pc, #188]	; (8009a0c <xPortStartScheduler+0xec>)
 8009950:	2207      	movs	r2, #7
 8009952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009954:	e009      	b.n	800996a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009956:	4b2d      	ldr	r3, [pc, #180]	; (8009a0c <xPortStartScheduler+0xec>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3b01      	subs	r3, #1
 800995c:	4a2b      	ldr	r2, [pc, #172]	; (8009a0c <xPortStartScheduler+0xec>)
 800995e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	b2db      	uxtb	r3, r3
 8009968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800996a:	78fb      	ldrb	r3, [r7, #3]
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009972:	2b80      	cmp	r3, #128	; 0x80
 8009974:	d0ef      	beq.n	8009956 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009976:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <xPortStartScheduler+0xec>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f1c3 0307 	rsb	r3, r3, #7
 800997e:	2b04      	cmp	r3, #4
 8009980:	d00c      	beq.n	800999c <xPortStartScheduler+0x7c>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009986:	b672      	cpsid	i
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	b662      	cpsie	i
 8009996:	60bb      	str	r3, [r7, #8]
}
 8009998:	bf00      	nop
 800999a:	e7fe      	b.n	800999a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800999c:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <xPortStartScheduler+0xec>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	021b      	lsls	r3, r3, #8
 80099a2:	4a1a      	ldr	r2, [pc, #104]	; (8009a0c <xPortStartScheduler+0xec>)
 80099a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099a6:	4b19      	ldr	r3, [pc, #100]	; (8009a0c <xPortStartScheduler+0xec>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099ae:	4a17      	ldr	r2, [pc, #92]	; (8009a0c <xPortStartScheduler+0xec>)
 80099b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	b2da      	uxtb	r2, r3
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a14      	ldr	r2, [pc, #80]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099c6:	4b12      	ldr	r3, [pc, #72]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <xPortStartScheduler+0xf0>)
 80099cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099d2:	f000 f8dd 	bl	8009b90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099d6:	4b0f      	ldr	r3, [pc, #60]	; (8009a14 <xPortStartScheduler+0xf4>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099dc:	f000 f8fc 	bl	8009bd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <xPortStartScheduler+0xf8>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a0c      	ldr	r2, [pc, #48]	; (8009a18 <xPortStartScheduler+0xf8>)
 80099e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ec:	f7ff ff84 	bl	80098f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099f0:	f7fe ff3e 	bl	8008870 <vTaskSwitchContext>
	prvTaskExitError();
 80099f4:	f7ff ff3c 	bl	8009870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	e000e400 	.word	0xe000e400
 8009a08:	20000d90 	.word	0x20000d90
 8009a0c:	20000d94 	.word	0x20000d94
 8009a10:	e000ed20 	.word	0xe000ed20
 8009a14:	2000000c 	.word	0x2000000c
 8009a18:	e000ef34 	.word	0xe000ef34

08009a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a26:	b672      	cpsid	i
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	b662      	cpsie	i
 8009a36:	607b      	str	r3, [r7, #4]
}
 8009a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a3a:	4b10      	ldr	r3, [pc, #64]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	4a0e      	ldr	r2, [pc, #56]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <vPortEnterCritical+0x60>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d111      	bne.n	8009a70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a4c:	4b0c      	ldr	r3, [pc, #48]	; (8009a80 <vPortEnterCritical+0x64>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00c      	beq.n	8009a70 <vPortEnterCritical+0x54>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	b672      	cpsid	i
 8009a5c:	f383 8811 	msr	BASEPRI, r3
 8009a60:	f3bf 8f6f 	isb	sy
 8009a64:	f3bf 8f4f 	dsb	sy
 8009a68:	b662      	cpsie	i
 8009a6a:	603b      	str	r3, [r7, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <vPortEnterCritical+0x52>
	}
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	2000000c 	.word	0x2000000c
 8009a80:	e000ed04 	.word	0xe000ed04

08009a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a8a:	4b13      	ldr	r3, [pc, #76]	; (8009ad8 <vPortExitCritical+0x54>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10c      	bne.n	8009aac <vPortExitCritical+0x28>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	b672      	cpsid	i
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	b662      	cpsie	i
 8009aa6:	607b      	str	r3, [r7, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	e7fe      	b.n	8009aaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <vPortExitCritical+0x54>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	4a09      	ldr	r2, [pc, #36]	; (8009ad8 <vPortExitCritical+0x54>)
 8009ab4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <vPortExitCritical+0x54>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <vPortExitCritical+0x46>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	f383 8811 	msr	BASEPRI, r3
}
 8009ac8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aca:	bf00      	nop
 8009acc:	370c      	adds	r7, #12
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	2000000c 	.word	0x2000000c
 8009adc:	00000000 	.word	0x00000000

08009ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ae0:	f3ef 8009 	mrs	r0, PSP
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <pxCurrentTCBConst>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	f01e 0f10 	tst.w	lr, #16
 8009af0:	bf08      	it	eq
 8009af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	6010      	str	r0, [r2, #0]
 8009afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	f7fe feac 	bl	8008870 <vTaskSwitchContext>
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	f380 8811 	msr	BASEPRI, r0
 8009b20:	bc09      	pop	{r0, r3}
 8009b22:	6819      	ldr	r1, [r3, #0]
 8009b24:	6808      	ldr	r0, [r1, #0]
 8009b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2a:	f01e 0f10 	tst.w	lr, #16
 8009b2e:	bf08      	it	eq
 8009b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b34:	f380 8809 	msr	PSP, r0
 8009b38:	f3bf 8f6f 	isb	sy
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop

08009b40 <pxCurrentTCBConst>:
 8009b40:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop

08009b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	b672      	cpsid	i
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	b662      	cpsie	i
 8009b62:	607b      	str	r3, [r7, #4]
}
 8009b64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b66:	f7fe fdc7 	bl	80086f8 <xTaskIncrementTick>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <SysTick_Handler+0x44>)
 8009b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b76:	601a      	str	r2, [r3, #0]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	f383 8811 	msr	BASEPRI, r3
}
 8009b82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b94:	4b0b      	ldr	r3, [pc, #44]	; (8009bc4 <vPortSetupTimerInterrupt+0x34>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <vPortSetupTimerInterrupt+0x38>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <vPortSetupTimerInterrupt+0x3c>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <vPortSetupTimerInterrupt+0x40>)
 8009ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8009baa:	099b      	lsrs	r3, r3, #6
 8009bac:	4a09      	ldr	r2, [pc, #36]	; (8009bd4 <vPortSetupTimerInterrupt+0x44>)
 8009bae:	3b01      	subs	r3, #1
 8009bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bb2:	4b04      	ldr	r3, [pc, #16]	; (8009bc4 <vPortSetupTimerInterrupt+0x34>)
 8009bb4:	2207      	movs	r2, #7
 8009bb6:	601a      	str	r2, [r3, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	e000e010 	.word	0xe000e010
 8009bc8:	e000e018 	.word	0xe000e018
 8009bcc:	20000000 	.word	0x20000000
 8009bd0:	10624dd3 	.word	0x10624dd3
 8009bd4:	e000e014 	.word	0xe000e014

08009bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009be8 <vPortEnableVFP+0x10>
 8009bdc:	6801      	ldr	r1, [r0, #0]
 8009bde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009be2:	6001      	str	r1, [r0, #0]
 8009be4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009be6:	bf00      	nop
 8009be8:	e000ed88 	.word	0xe000ed88

08009bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bf2:	f3ef 8305 	mrs	r3, IPSR
 8009bf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b0f      	cmp	r3, #15
 8009bfc:	d916      	bls.n	8009c2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bfe:	4a19      	ldr	r2, [pc, #100]	; (8009c64 <vPortValidateInterruptPriority+0x78>)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	4413      	add	r3, r2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c08:	4b17      	ldr	r3, [pc, #92]	; (8009c68 <vPortValidateInterruptPriority+0x7c>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	7afa      	ldrb	r2, [r7, #11]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d20c      	bcs.n	8009c2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c16:	b672      	cpsid	i
 8009c18:	f383 8811 	msr	BASEPRI, r3
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	b662      	cpsie	i
 8009c26:	607b      	str	r3, [r7, #4]
}
 8009c28:	bf00      	nop
 8009c2a:	e7fe      	b.n	8009c2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <vPortValidateInterruptPriority+0x80>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c34:	4b0e      	ldr	r3, [pc, #56]	; (8009c70 <vPortValidateInterruptPriority+0x84>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d90c      	bls.n	8009c56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c40:	b672      	cpsid	i
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	b662      	cpsie	i
 8009c50:	603b      	str	r3, [r7, #0]
}
 8009c52:	bf00      	nop
 8009c54:	e7fe      	b.n	8009c54 <vPortValidateInterruptPriority+0x68>
	}
 8009c56:	bf00      	nop
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	e000e3f0 	.word	0xe000e3f0
 8009c68:	20000d90 	.word	0x20000d90
 8009c6c:	e000ed0c 	.word	0xe000ed0c
 8009c70:	20000d94 	.word	0x20000d94

08009c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b08a      	sub	sp, #40	; 0x28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c80:	f7fe fc6a 	bl	8008558 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c84:	4b5b      	ldr	r3, [pc, #364]	; (8009df4 <pvPortMalloc+0x180>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c8c:	f000 f91a 	bl	8009ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c90:	4b59      	ldr	r3, [pc, #356]	; (8009df8 <pvPortMalloc+0x184>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f040 8092 	bne.w	8009dc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01f      	beq.n	8009ce4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009ca4:	2208      	movs	r2, #8
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f003 0307 	and.w	r3, r3, #7
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d016      	beq.n	8009ce4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f023 0307 	bic.w	r3, r3, #7
 8009cbc:	3308      	adds	r3, #8
 8009cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <pvPortMalloc+0x70>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	b672      	cpsid	i
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	b662      	cpsie	i
 8009cde:	617b      	str	r3, [r7, #20]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d06b      	beq.n	8009dc2 <pvPortMalloc+0x14e>
 8009cea:	4b44      	ldr	r3, [pc, #272]	; (8009dfc <pvPortMalloc+0x188>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d866      	bhi.n	8009dc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cf4:	4b42      	ldr	r3, [pc, #264]	; (8009e00 <pvPortMalloc+0x18c>)
 8009cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cf8:	4b41      	ldr	r3, [pc, #260]	; (8009e00 <pvPortMalloc+0x18c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cfe:	e004      	b.n	8009d0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d903      	bls.n	8009d1c <pvPortMalloc+0xa8>
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f1      	bne.n	8009d00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d1c:	4b35      	ldr	r3, [pc, #212]	; (8009df4 <pvPortMalloc+0x180>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d04d      	beq.n	8009dc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d26:	6a3b      	ldr	r3, [r7, #32]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	4413      	add	r3, r2
 8009d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	6a3b      	ldr	r3, [r7, #32]
 8009d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	2308      	movs	r3, #8
 8009d42:	005b      	lsls	r3, r3, #1
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d921      	bls.n	8009d8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00c      	beq.n	8009d74 <pvPortMalloc+0x100>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	b672      	cpsid	i
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	b662      	cpsie	i
 8009d6e:	613b      	str	r3, [r7, #16]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	1ad2      	subs	r2, r2, r3
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d86:	69b8      	ldr	r0, [r7, #24]
 8009d88:	f000 f8fe 	bl	8009f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <pvPortMalloc+0x188>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	4a19      	ldr	r2, [pc, #100]	; (8009dfc <pvPortMalloc+0x188>)
 8009d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d9a:	4b18      	ldr	r3, [pc, #96]	; (8009dfc <pvPortMalloc+0x188>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b19      	ldr	r3, [pc, #100]	; (8009e04 <pvPortMalloc+0x190>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d203      	bcs.n	8009dae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <pvPortMalloc+0x188>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a16      	ldr	r2, [pc, #88]	; (8009e04 <pvPortMalloc+0x190>)
 8009dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <pvPortMalloc+0x184>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009dc2:	f7fe fbd7 	bl	8008574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <pvPortMalloc+0x176>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	b672      	cpsid	i
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	b662      	cpsie	i
 8009de4:	60fb      	str	r3, [r7, #12]
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <pvPortMalloc+0x174>
	return pvReturn;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3728      	adds	r7, #40	; 0x28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200049a0 	.word	0x200049a0
 8009df8:	200049ac 	.word	0x200049ac
 8009dfc:	200049a4 	.word	0x200049a4
 8009e00:	20004998 	.word	0x20004998
 8009e04:	200049a8 	.word	0x200049a8

08009e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b086      	sub	sp, #24
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d04c      	beq.n	8009eb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e1a:	2308      	movs	r3, #8
 8009e1c:	425b      	negs	r3, r3
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	4413      	add	r3, r2
 8009e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b23      	ldr	r3, [pc, #140]	; (8009ebc <vPortFree+0xb4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4013      	ands	r3, r2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10c      	bne.n	8009e50 <vPortFree+0x48>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	b672      	cpsid	i
 8009e3c:	f383 8811 	msr	BASEPRI, r3
 8009e40:	f3bf 8f6f 	isb	sy
 8009e44:	f3bf 8f4f 	dsb	sy
 8009e48:	b662      	cpsie	i
 8009e4a:	60fb      	str	r3, [r7, #12]
}
 8009e4c:	bf00      	nop
 8009e4e:	e7fe      	b.n	8009e4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <vPortFree+0x6a>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5c:	b672      	cpsid	i
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	b662      	cpsie	i
 8009e6c:	60bb      	str	r3, [r7, #8]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	4b11      	ldr	r3, [pc, #68]	; (8009ebc <vPortFree+0xb4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d019      	beq.n	8009eb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d115      	bne.n	8009eb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	; (8009ebc <vPortFree+0xb4>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	43db      	mvns	r3, r3
 8009e92:	401a      	ands	r2, r3
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e98:	f7fe fb5e 	bl	8008558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <vPortFree+0xb8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	4a06      	ldr	r2, [pc, #24]	; (8009ec0 <vPortFree+0xb8>)
 8009ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eaa:	6938      	ldr	r0, [r7, #16]
 8009eac:	f000 f86c 	bl	8009f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009eb0:	f7fe fb60 	bl	8008574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009eb4:	bf00      	nop
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	200049ac 	.word	0x200049ac
 8009ec0:	200049a4 	.word	0x200049a4

08009ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ed0:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <prvHeapInit+0xac>)
 8009ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00c      	beq.n	8009ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3307      	adds	r3, #7
 8009ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f023 0307 	bic.w	r3, r3, #7
 8009eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <prvHeapInit+0xac>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009efc:	4a1d      	ldr	r2, [pc, #116]	; (8009f74 <prvHeapInit+0xb0>)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f02:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <prvHeapInit+0xb0>)
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f10:	2208      	movs	r2, #8
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f023 0307 	bic.w	r3, r3, #7
 8009f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4a15      	ldr	r2, [pc, #84]	; (8009f78 <prvHeapInit+0xb4>)
 8009f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <prvHeapInit+0xb4>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f2e:	4b12      	ldr	r3, [pc, #72]	; (8009f78 <prvHeapInit+0xb4>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68fa      	ldr	r2, [r7, #12]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvHeapInit+0xb4>)
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <prvHeapInit+0xb8>)
 8009f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	4a09      	ldr	r2, [pc, #36]	; (8009f80 <prvHeapInit+0xbc>)
 8009f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f5c:	4b09      	ldr	r3, [pc, #36]	; (8009f84 <prvHeapInit+0xc0>)
 8009f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	bf00      	nop
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	20000d98 	.word	0x20000d98
 8009f74:	20004998 	.word	0x20004998
 8009f78:	200049a0 	.word	0x200049a0
 8009f7c:	200049a8 	.word	0x200049a8
 8009f80:	200049a4 	.word	0x200049a4
 8009f84:	200049ac 	.word	0x200049ac

08009f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f90:	4b28      	ldr	r3, [pc, #160]	; (800a034 <prvInsertBlockIntoFreeList+0xac>)
 8009f92:	60fb      	str	r3, [r7, #12]
 8009f94:	e002      	b.n	8009f9c <prvInsertBlockIntoFreeList+0x14>
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60fb      	str	r3, [r7, #12]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d8f7      	bhi.n	8009f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d108      	bne.n	8009fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d118      	bne.n	800a010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681a      	ldr	r2, [r3, #0]
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d00d      	beq.n	800a006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e008      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a006:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <prvInsertBlockIntoFreeList+0xb0>)
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	e003      	b.n	800a018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d002      	beq.n	800a026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	20004998 	.word	0x20004998
 800a038:	200049a0 	.word	0x200049a0

0800a03c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	330c      	adds	r3, #12
 800a04c:	461a      	mov	r2, r3
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f002 fa9f 	bl	800c594 <tcpip_send_msg_wait_sem>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a05a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <netconn_apimsg+0x2e>
    return apimsg->err;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a068:	e001      	b.n	800a06e <netconn_apimsg+0x32>
  }
  return err;
 800a06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b08c      	sub	sp, #48	; 0x30
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	603a      	str	r2, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
 800a084:	460b      	mov	r3, r1
 800a086:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	6839      	ldr	r1, [r7, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 f923 	bl	800b2d8 <netconn_alloc>
 800a092:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d054      	beq.n	800a144 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a09a:	79bb      	ldrb	r3, [r7, #6]
 800a09c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a0a2:	f107 0308 	add.w	r3, r7, #8
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4829      	ldr	r0, [pc, #164]	; (800a150 <netconn_new_with_proto_and_callback+0xd8>)
 800a0aa:	f7ff ffc7 	bl	800a03c <netconn_apimsg>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a0b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d043      	beq.n	800a144 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d005      	beq.n	800a0d0 <netconn_new_with_proto_and_callback+0x58>
 800a0c4:	4b23      	ldr	r3, [pc, #140]	; (800a154 <netconn_new_with_proto_and_callback+0xdc>)
 800a0c6:	22a3      	movs	r2, #163	; 0xa3
 800a0c8:	4923      	ldr	r1, [pc, #140]	; (800a158 <netconn_new_with_proto_and_callback+0xe0>)
 800a0ca:	4824      	ldr	r0, [pc, #144]	; (800a15c <netconn_new_with_proto_and_callback+0xe4>)
 800a0cc:	f00d fc7e 	bl	80179cc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d2:	3310      	adds	r3, #16
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f00d fb09 	bl	80176ec <sys_mbox_valid>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <netconn_new_with_proto_and_callback+0x74>
 800a0e0:	4b1c      	ldr	r3, [pc, #112]	; (800a154 <netconn_new_with_proto_and_callback+0xdc>)
 800a0e2:	22a4      	movs	r2, #164	; 0xa4
 800a0e4:	491e      	ldr	r1, [pc, #120]	; (800a160 <netconn_new_with_proto_and_callback+0xe8>)
 800a0e6:	481d      	ldr	r0, [pc, #116]	; (800a15c <netconn_new_with_proto_and_callback+0xe4>)
 800a0e8:	f00d fc70 	bl	80179cc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f00d fafb 	bl	80176ec <sys_mbox_valid>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d005      	beq.n	800a108 <netconn_new_with_proto_and_callback+0x90>
 800a0fc:	4b15      	ldr	r3, [pc, #84]	; (800a154 <netconn_new_with_proto_and_callback+0xdc>)
 800a0fe:	22a6      	movs	r2, #166	; 0xa6
 800a100:	4918      	ldr	r1, [pc, #96]	; (800a164 <netconn_new_with_proto_and_callback+0xec>)
 800a102:	4816      	ldr	r0, [pc, #88]	; (800a15c <netconn_new_with_proto_and_callback+0xe4>)
 800a104:	f00d fc62 	bl	80179cc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10a:	330c      	adds	r3, #12
 800a10c:	4618      	mov	r0, r3
 800a10e:	f00d fb7b 	bl	8017808 <sys_sem_valid>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d105      	bne.n	800a124 <netconn_new_with_proto_and_callback+0xac>
 800a118:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <netconn_new_with_proto_and_callback+0xdc>)
 800a11a:	22a9      	movs	r2, #169	; 0xa9
 800a11c:	4912      	ldr	r1, [pc, #72]	; (800a168 <netconn_new_with_proto_and_callback+0xf0>)
 800a11e:	480f      	ldr	r0, [pc, #60]	; (800a15c <netconn_new_with_proto_and_callback+0xe4>)
 800a120:	f00d fc54 	bl	80179cc <iprintf>
      sys_sem_free(&conn->op_completed);
 800a124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a126:	330c      	adds	r3, #12
 800a128:	4618      	mov	r0, r3
 800a12a:	f00d fb60 	bl	80177ee <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a130:	3310      	adds	r3, #16
 800a132:	4618      	mov	r0, r3
 800a134:	f00d fa66 	bl	8017604 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a13a:	2007      	movs	r0, #7
 800a13c:	f002 ff92 	bl	800d064 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a140:	2300      	movs	r3, #0
 800a142:	e000      	b.n	800a146 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a146:	4618      	mov	r0, r3
 800a148:	3730      	adds	r7, #48	; 0x30
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	0800b2ad 	.word	0x0800b2ad
 800a154:	08018dfc 	.word	0x08018dfc
 800a158:	08018e30 	.word	0x08018e30
 800a15c:	08018e54 	.word	0x08018e54
 800a160:	08018e7c 	.word	0x08018e7c
 800a164:	08018e94 	.word	0x08018e94
 800a168:	08018eb8 	.word	0x08018eb8

0800a16c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08c      	sub	sp, #48	; 0x30
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	e014      	b.n	800a1a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a182:	2329      	movs	r3, #41	; 0x29
 800a184:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a186:	f107 030c 	add.w	r3, r7, #12
 800a18a:	4619      	mov	r1, r3
 800a18c:	4808      	ldr	r0, [pc, #32]	; (800a1b0 <netconn_prepare_delete+0x44>)
 800a18e:	f7ff ff55 	bl	800a03c <netconn_apimsg>
 800a192:	4603      	mov	r3, r0
 800a194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a198:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <netconn_prepare_delete+0x3a>
    return err;
 800a1a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1a4:	e000      	b.n	800a1a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3730      	adds	r7, #48	; 0x30
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	0800b811 	.word	0x0800b811

0800a1b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <netconn_delete+0x12>
    return ERR_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e00d      	b.n	800a1e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7ff ffd0 	bl	800a16c <netconn_prepare_delete>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <netconn_delete+0x2a>
    netconn_free(conn);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 f8eb 	bl	800b3b4 <netconn_free>
  }
  return err;
 800a1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b08e      	sub	sp, #56	; 0x38
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d109      	bne.n	800a214 <netconn_bind+0x28>
 800a200:	4b11      	ldr	r3, [pc, #68]	; (800a248 <netconn_bind+0x5c>)
 800a202:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a206:	4911      	ldr	r1, [pc, #68]	; (800a24c <netconn_bind+0x60>)
 800a208:	4811      	ldr	r0, [pc, #68]	; (800a250 <netconn_bind+0x64>)
 800a20a:	f00d fbdf 	bl	80179cc <iprintf>
 800a20e:	f06f 030f 	mvn.w	r3, #15
 800a212:	e015      	b.n	800a240 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d101      	bne.n	800a21e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a21a:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <netconn_bind+0x68>)
 800a21c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a22a:	f107 0314 	add.w	r3, r7, #20
 800a22e:	4619      	mov	r1, r3
 800a230:	4809      	ldr	r0, [pc, #36]	; (800a258 <netconn_bind+0x6c>)
 800a232:	f7ff ff03 	bl	800a03c <netconn_apimsg>
 800a236:	4603      	mov	r3, r0
 800a238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a23c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a240:	4618      	mov	r0, r3
 800a242:	3738      	adds	r7, #56	; 0x38
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	08018dfc 	.word	0x08018dfc
 800a24c:	08018f34 	.word	0x08018f34
 800a250:	08018e54 	.word	0x08018e54
 800a254:	0801c48c 	.word	0x0801c48c
 800a258:	0800b9d9 	.word	0x0800b9d9

0800a25c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08c      	sub	sp, #48	; 0x30
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	460b      	mov	r3, r1
 800a266:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <netconn_listen_with_backlog+0x26>
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <netconn_listen_with_backlog+0x48>)
 800a270:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a274:	490c      	ldr	r1, [pc, #48]	; (800a2a8 <netconn_listen_with_backlog+0x4c>)
 800a276:	480d      	ldr	r0, [pc, #52]	; (800a2ac <netconn_listen_with_backlog+0x50>)
 800a278:	f00d fba8 	bl	80179cc <iprintf>
 800a27c:	f06f 030f 	mvn.w	r3, #15
 800a280:	e00c      	b.n	800a29c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a286:	f107 030c 	add.w	r3, r7, #12
 800a28a:	4619      	mov	r1, r3
 800a28c:	4808      	ldr	r0, [pc, #32]	; (800a2b0 <netconn_listen_with_backlog+0x54>)
 800a28e:	f7ff fed5 	bl	800a03c <netconn_apimsg>
 800a292:	4603      	mov	r3, r0
 800a294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a298:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3730      	adds	r7, #48	; 0x30
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	08018dfc 	.word	0x08018dfc
 800a2a8:	08018fb4 	.word	0x08018fb4
 800a2ac:	08018e54 	.word	0x08018e54
 800a2b0:	0800ba4d 	.word	0x0800ba4d

0800a2b4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d109      	bne.n	800a2d8 <netconn_accept+0x24>
 800a2c4:	4b3d      	ldr	r3, [pc, #244]	; (800a3bc <netconn_accept+0x108>)
 800a2c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a2ca:	493d      	ldr	r1, [pc, #244]	; (800a3c0 <netconn_accept+0x10c>)
 800a2cc:	483d      	ldr	r0, [pc, #244]	; (800a3c4 <netconn_accept+0x110>)
 800a2ce:	f00d fb7d 	bl	80179cc <iprintf>
 800a2d2:	f06f 030f 	mvn.w	r3, #15
 800a2d6:	e06c      	b.n	800a3b2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d109      	bne.n	800a2f8 <netconn_accept+0x44>
 800a2e4:	4b35      	ldr	r3, [pc, #212]	; (800a3bc <netconn_accept+0x108>)
 800a2e6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a2ea:	4937      	ldr	r1, [pc, #220]	; (800a3c8 <netconn_accept+0x114>)
 800a2ec:	4835      	ldr	r0, [pc, #212]	; (800a3c4 <netconn_accept+0x110>)
 800a2ee:	f00d fb6d 	bl	80179cc <iprintf>
 800a2f2:	f06f 030f 	mvn.w	r3, #15
 800a2f6:	e05c      	b.n	800a3b2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb6c 	bl	800a9d6 <netconn_err>
 800a2fe:	4603      	mov	r3, r0
 800a300:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a302:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a30a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a30e:	e050      	b.n	800a3b2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	3314      	adds	r3, #20
 800a314:	4618      	mov	r0, r3
 800a316:	f00d f9e9 	bl	80176ec <sys_mbox_valid>
 800a31a:	4603      	mov	r3, r0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d005      	beq.n	800a32c <netconn_accept+0x78>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7f1b      	ldrb	r3, [r3, #28]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d002      	beq.n	800a332 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a32c:	f06f 030e 	mvn.w	r3, #14
 800a330:	e03f      	b.n	800a3b2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	7f1b      	ldrb	r3, [r3, #28]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00e      	beq.n	800a35c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	3314      	adds	r3, #20
 800a342:	f107 020c 	add.w	r2, r7, #12
 800a346:	4611      	mov	r1, r2
 800a348:	4618      	mov	r0, r3
 800a34a:	f00d f9b8 	bl	80176be <sys_arch_mbox_tryfetch>
 800a34e:	4603      	mov	r3, r0
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d10a      	bne.n	800a36c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a356:	f06f 0306 	mvn.w	r3, #6
 800a35a:	e02a      	b.n	800a3b2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3314      	adds	r3, #20
 800a360:	f107 010c 	add.w	r1, r7, #12
 800a364:	2200      	movs	r2, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f00d f978 	bl	801765c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <netconn_accept+0xcc>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	2200      	movs	r2, #0
 800a37a:	2101      	movs	r1, #1
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f107 0213 	add.w	r2, r7, #19
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fb75 	bl	800aa78 <lwip_netconn_is_err_msg>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a394:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a398:	e00b      	b.n	800a3b2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d102      	bne.n	800a3a6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a3a0:	f06f 030e 	mvn.w	r3, #14
 800a3a4:	e005      	b.n	800a3b2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a3b0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	08018dfc 	.word	0x08018dfc
 800a3c0:	08018fd4 	.word	0x08018fd4
 800a3c4:	08018e54 	.word	0x08018e54
 800a3c8:	08018ff4 	.word	0x08018ff4

0800a3cc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d109      	bne.n	800a3f8 <netconn_recv_data+0x2c>
 800a3e4:	4b58      	ldr	r3, [pc, #352]	; (800a548 <netconn_recv_data+0x17c>)
 800a3e6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a3ea:	4958      	ldr	r1, [pc, #352]	; (800a54c <netconn_recv_data+0x180>)
 800a3ec:	4858      	ldr	r0, [pc, #352]	; (800a550 <netconn_recv_data+0x184>)
 800a3ee:	f00d faed 	bl	80179cc <iprintf>
 800a3f2:	f06f 030f 	mvn.w	r3, #15
 800a3f6:	e0a2      	b.n	800a53e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <netconn_recv_data+0x4c>
 800a404:	4b50      	ldr	r3, [pc, #320]	; (800a548 <netconn_recv_data+0x17c>)
 800a406:	f240 224a 	movw	r2, #586	; 0x24a
 800a40a:	4952      	ldr	r1, [pc, #328]	; (800a554 <netconn_recv_data+0x188>)
 800a40c:	4850      	ldr	r0, [pc, #320]	; (800a550 <netconn_recv_data+0x184>)
 800a40e:	f00d fadd 	bl	80179cc <iprintf>
 800a412:	f06f 030f 	mvn.w	r3, #15
 800a416:	e092      	b.n	800a53e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3310      	adds	r3, #16
 800a41c:	4618      	mov	r0, r3
 800a41e:	f00d f965 	bl	80176ec <sys_mbox_valid>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10e      	bne.n	800a446 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 fad4 	bl	800a9d6 <netconn_err>
 800a42e:	4603      	mov	r3, r0
 800a430:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a432:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a43a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a43e:	e07e      	b.n	800a53e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a440:	f06f 030a 	mvn.w	r3, #10
 800a444:	e07b      	b.n	800a53e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	7f1b      	ldrb	r3, [r3, #28]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d10f      	bne.n	800a472 <netconn_recv_data+0xa6>
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	7f1b      	ldrb	r3, [r3, #28]
 800a460:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a464:	2b00      	cmp	r3, #0
 800a466:	d104      	bne.n	800a472 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d023      	beq.n	800a4ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	3310      	adds	r3, #16
 800a476:	f107 0218 	add.w	r2, r7, #24
 800a47a:	4611      	mov	r1, r2
 800a47c:	4618      	mov	r0, r3
 800a47e:	f00d f91e 	bl	80176be <sys_arch_mbox_tryfetch>
 800a482:	4603      	mov	r3, r0
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a488:	d11f      	bne.n	800a4ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 faa3 	bl	800a9d6 <netconn_err>
 800a490:	4603      	mov	r3, r0
 800a492:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a494:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a49c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a4a0:	e04d      	b.n	800a53e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	7f1b      	ldrb	r3, [r3, #28]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a4ae:	f06f 030a 	mvn.w	r3, #10
 800a4b2:	e044      	b.n	800a53e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a4b4:	f06f 0306 	mvn.w	r3, #6
 800a4b8:	e041      	b.n	800a53e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	3310      	adds	r3, #16
 800a4be:	f107 0118 	add.w	r1, r7, #24
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f00d f8c9 	bl	801765c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4d2:	2b10      	cmp	r3, #16
 800a4d4:	d117      	bne.n	800a506 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f107 0217 	add.w	r2, r7, #23
 800a4dc:	4611      	mov	r1, r2
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 faca 	bl	800aa78 <lwip_netconn_is_err_msg>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4ee:	f113 0f0f 	cmn.w	r3, #15
 800a4f2:	d101      	bne.n	800a4f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e022      	b.n	800a53e <netconn_recv_data+0x172>
      }
      return err;
 800a4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4fc:	e01f      	b.n	800a53e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	891b      	ldrh	r3, [r3, #8]
 800a502:	83fb      	strh	r3, [r7, #30]
 800a504:	e00d      	b.n	800a522 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <netconn_recv_data+0x14e>
 800a50c:	4b0e      	ldr	r3, [pc, #56]	; (800a548 <netconn_recv_data+0x17c>)
 800a50e:	f240 2291 	movw	r2, #657	; 0x291
 800a512:	4911      	ldr	r1, [pc, #68]	; (800a558 <netconn_recv_data+0x18c>)
 800a514:	480e      	ldr	r0, [pc, #56]	; (800a550 <netconn_recv_data+0x184>)
 800a516:	f00d fa59 	bl	80179cc <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	891b      	ldrh	r3, [r3, #8]
 800a520:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b00      	cmp	r3, #0
 800a528:	d005      	beq.n	800a536 <netconn_recv_data+0x16a>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	8bfa      	ldrh	r2, [r7, #30]
 800a530:	2101      	movs	r1, #1
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3720      	adds	r7, #32
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	08018dfc 	.word	0x08018dfc
 800a54c:	08019014 	.word	0x08019014
 800a550:	08018e54 	.word	0x08018e54
 800a554:	08019034 	.word	0x08019034
 800a558:	08019050 	.word	0x08019050

0800a55c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d005      	beq.n	800a57a <netconn_tcp_recvd_msg+0x1e>
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a576:	2b10      	cmp	r3, #16
 800a578:	d009      	beq.n	800a58e <netconn_tcp_recvd_msg+0x32>
 800a57a:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <netconn_tcp_recvd_msg+0x50>)
 800a57c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a580:	490b      	ldr	r1, [pc, #44]	; (800a5b0 <netconn_tcp_recvd_msg+0x54>)
 800a582:	480c      	ldr	r0, [pc, #48]	; (800a5b4 <netconn_tcp_recvd_msg+0x58>)
 800a584:	f00d fa22 	bl	80179cc <iprintf>
 800a588:	f06f 030f 	mvn.w	r3, #15
 800a58c:	e00a      	b.n	800a5a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a59a:	6879      	ldr	r1, [r7, #4]
 800a59c:	4806      	ldr	r0, [pc, #24]	; (800a5b8 <netconn_tcp_recvd_msg+0x5c>)
 800a59e:	f7ff fd4d 	bl	800a03c <netconn_apimsg>
 800a5a2:	4603      	mov	r3, r0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	08018dfc 	.word	0x08018dfc
 800a5b0:	0801905c 	.word	0x0801905c
 800a5b4:	08018e54 	.word	0x08018e54
 800a5b8:	0800bb7d 	.word	0x0800bb7d

0800a5bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b090      	sub	sp, #64	; 0x40
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3310      	adds	r3, #16
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f00d f88c 	bl	80176ec <sys_mbox_valid>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d102      	bne.n	800a5e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a5da:	f06f 030a 	mvn.w	r3, #10
 800a5de:	e06d      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	7f1b      	ldrb	r3, [r3, #28]
 800a5e4:	b25b      	sxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	da07      	bge.n	800a5fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	7f1b      	ldrb	r3, [r3, #28]
 800a5ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a5f8:	e039      	b.n	800a66e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff fee3 	bl	800a3cc <netconn_recv_data>
 800a606:	4603      	mov	r3, r0
 800a608:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a60c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a614:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a618:	e050      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10e      	bne.n	800a648 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <netconn_recv_data_tcp+0x7a>
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	891b      	ldrh	r3, [r3, #8]
 800a634:	e000      	b.n	800a638 <netconn_recv_data_tcp+0x7c>
 800a636:	2301      	movs	r3, #1
 800a638:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a63a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a63c:	f107 0214 	add.w	r2, r7, #20
 800a640:	4619      	mov	r1, r3
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	f7ff ff8a 	bl	800a55c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d134      	bne.n	800a6b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	f003 0310 	and.w	r3, r3, #16
 800a654:	2b00      	cmp	r3, #0
 800a656:	d009      	beq.n	800a66c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	7f1b      	ldrb	r3, [r3, #28]
 800a65c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a660:	b2da      	uxtb	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a666:	f06f 0306 	mvn.w	r3, #6
 800a66a:	e027      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a66c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <netconn_recv_data_tcp+0xc6>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	2101      	movs	r1, #1
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10f      	bne.n	800a6aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 f9a3 	bl	800a9d6 <netconn_err>
 800a690:	4603      	mov	r3, r0
 800a692:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a696:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800a69e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a6a2:	e00b      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a6a4:	f06f 030d 	mvn.w	r3, #13
 800a6a8:	e008      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	68f8      	ldr	r0, [r7, #12]
 800a6ae:	f000 f955 	bl	800a95c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a6b2:	f06f 030e 	mvn.w	r3, #14
 800a6b6:	e001      	b.n	800a6bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a6b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3740      	adds	r7, #64	; 0x40
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <netconn_recv+0x28>
 800a6d8:	4b32      	ldr	r3, [pc, #200]	; (800a7a4 <netconn_recv+0xe0>)
 800a6da:	f240 3263 	movw	r2, #867	; 0x363
 800a6de:	4932      	ldr	r1, [pc, #200]	; (800a7a8 <netconn_recv+0xe4>)
 800a6e0:	4832      	ldr	r0, [pc, #200]	; (800a7ac <netconn_recv+0xe8>)
 800a6e2:	f00d f973 	bl	80179cc <iprintf>
 800a6e6:	f06f 030f 	mvn.w	r3, #15
 800a6ea:	e056      	b.n	800a79a <netconn_recv+0xd6>
  *new_buf = NULL;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d109      	bne.n	800a70c <netconn_recv+0x48>
 800a6f8:	4b2a      	ldr	r3, [pc, #168]	; (800a7a4 <netconn_recv+0xe0>)
 800a6fa:	f240 3265 	movw	r2, #869	; 0x365
 800a6fe:	492c      	ldr	r1, [pc, #176]	; (800a7b0 <netconn_recv+0xec>)
 800a700:	482a      	ldr	r0, [pc, #168]	; (800a7ac <netconn_recv+0xe8>)
 800a702:	f00d f963 	bl	80179cc <iprintf>
 800a706:	f06f 030f 	mvn.w	r3, #15
 800a70a:	e046      	b.n	800a79a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a714:	2b10      	cmp	r3, #16
 800a716:	d13a      	bne.n	800a78e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a71c:	2006      	movs	r0, #6
 800a71e:	f002 fc4f 	bl	800cfc0 <memp_malloc>
 800a722:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d102      	bne.n	800a730 <netconn_recv+0x6c>
      return ERR_MEM;
 800a72a:	f04f 33ff 	mov.w	r3, #4294967295
 800a72e:	e034      	b.n	800a79a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a730:	f107 030c 	add.w	r3, r7, #12
 800a734:	2200      	movs	r2, #0
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ff3f 	bl	800a5bc <netconn_recv_data_tcp>
 800a73e:	4603      	mov	r3, r0
 800a740:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a742:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d006      	beq.n	800a758 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a74a:	6979      	ldr	r1, [r7, #20]
 800a74c:	2006      	movs	r0, #6
 800a74e:	f002 fc89 	bl	800d064 <memp_free>
      return err;
 800a752:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a756:	e020      	b.n	800a79a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <netconn_recv+0xa8>
 800a75e:	4b11      	ldr	r3, [pc, #68]	; (800a7a4 <netconn_recv+0xe0>)
 800a760:	f240 3279 	movw	r2, #889	; 0x379
 800a764:	4913      	ldr	r1, [pc, #76]	; (800a7b4 <netconn_recv+0xf0>)
 800a766:	4811      	ldr	r0, [pc, #68]	; (800a7ac <netconn_recv+0xe8>)
 800a768:	f00d f930 	bl	80179cc <iprintf>

    buf->p = p;
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2200      	movs	r2, #0
 800a77c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	2200      	movs	r2, #0
 800a782:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e005      	b.n	800a79a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a78e:	2200      	movs	r2, #0
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f7ff fe1a 	bl	800a3cc <netconn_recv_data>
 800a798:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	08018dfc 	.word	0x08018dfc
 800a7a8:	08019014 	.word	0x08019014
 800a7ac:	08018e54 	.word	0x08018e54
 800a7b0:	08019034 	.word	0x08019034
 800a7b4:	080190ac 	.word	0x080190ac

0800a7b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b088      	sub	sp, #32
 800a7bc:	af02      	add	r7, sp, #8
 800a7be:	60f8      	str	r0, [r7, #12]
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	607a      	str	r2, [r7, #4]
 800a7c4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	f107 0110 	add.w	r1, r7, #16
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	2201      	movs	r2, #1
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f000 f805 	bl	800a7ec <netconn_write_vectors_partly>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3718      	adds	r7, #24
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b092      	sub	sp, #72	; 0x48
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	80fb      	strh	r3, [r7, #6]
 800a7fe:	4613      	mov	r3, r2
 800a800:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d109      	bne.n	800a81c <netconn_write_vectors_partly+0x30>
 800a808:	4b4e      	ldr	r3, [pc, #312]	; (800a944 <netconn_write_vectors_partly+0x158>)
 800a80a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a80e:	494e      	ldr	r1, [pc, #312]	; (800a948 <netconn_write_vectors_partly+0x15c>)
 800a810:	484e      	ldr	r0, [pc, #312]	; (800a94c <netconn_write_vectors_partly+0x160>)
 800a812:	f00d f8db 	bl	80179cc <iprintf>
 800a816:	f06f 030f 	mvn.w	r3, #15
 800a81a:	e08e      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a824:	2b10      	cmp	r3, #16
 800a826:	d009      	beq.n	800a83c <netconn_write_vectors_partly+0x50>
 800a828:	4b46      	ldr	r3, [pc, #280]	; (800a944 <netconn_write_vectors_partly+0x158>)
 800a82a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a82e:	4948      	ldr	r1, [pc, #288]	; (800a950 <netconn_write_vectors_partly+0x164>)
 800a830:	4846      	ldr	r0, [pc, #280]	; (800a94c <netconn_write_vectors_partly+0x160>)
 800a832:	f00d f8cb 	bl	80179cc <iprintf>
 800a836:	f06f 0305 	mvn.w	r3, #5
 800a83a:	e07e      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	7f1b      	ldrb	r3, [r3, #28]
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <netconn_write_vectors_partly+0x66>
 800a848:	797b      	ldrb	r3, [r7, #5]
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <netconn_write_vectors_partly+0x6a>
 800a852:	2301      	movs	r3, #1
 800a854:	e000      	b.n	800a858 <netconn_write_vectors_partly+0x6c>
 800a856:	2300      	movs	r3, #0
 800a858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a85c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <netconn_write_vectors_partly+0x84>
 800a864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a86a:	f06f 0305 	mvn.w	r3, #5
 800a86e:	e064      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a870:	2300      	movs	r3, #0
 800a872:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a874:	2300      	movs	r3, #0
 800a876:	643b      	str	r3, [r7, #64]	; 0x40
 800a878:	e015      	b.n	800a8a6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a87a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a886:	4413      	add	r3, r2
 800a888:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a88a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a88c:	00db      	lsls	r3, r3, #3
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	4413      	add	r3, r2
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a896:	429a      	cmp	r2, r3
 800a898:	d202      	bcs.n	800a8a0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a89a:	f06f 0305 	mvn.w	r3, #5
 800a89e:	e04c      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a6:	88fb      	ldrh	r3, [r7, #6]
 800a8a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	dbe5      	blt.n	800a87a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800a8ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	e040      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800a8b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	da0a      	bge.n	800a8d4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800a8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800a8c4:	f06f 0305 	mvn.w	r3, #5
 800a8c8:	e037      	b.n	800a93a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800a8ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a8ce:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800a8dc:	88fb      	ldrh	r3, [r7, #6]
 800a8de:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800a8e4:	797b      	ldrb	r3, [r7, #5]
 800a8e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800a8ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8ec:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	4619      	mov	r1, r3
 800a8f8:	4816      	ldr	r0, [pc, #88]	; (800a954 <netconn_write_vectors_partly+0x168>)
 800a8fa:	f7ff fb9f 	bl	800a03c <netconn_apimsg>
 800a8fe:	4603      	mov	r3, r0
 800a900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800a904:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d114      	bne.n	800a936 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800a90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800a912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a916:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800a918:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a924:	429a      	cmp	r2, r3
 800a926:	d006      	beq.n	800a936 <netconn_write_vectors_partly+0x14a>
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <netconn_write_vectors_partly+0x158>)
 800a92a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a92e:	490a      	ldr	r1, [pc, #40]	; (800a958 <netconn_write_vectors_partly+0x16c>)
 800a930:	4806      	ldr	r0, [pc, #24]	; (800a94c <netconn_write_vectors_partly+0x160>)
 800a932:	f00d f84b 	bl	80179cc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800a936:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3748      	adds	r7, #72	; 0x48
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	08018dfc 	.word	0x08018dfc
 800a948:	080190d4 	.word	0x080190d4
 800a94c:	08018e54 	.word	0x08018e54
 800a950:	080190f0 	.word	0x080190f0
 800a954:	0800bf81 	.word	0x0800bf81
 800a958:	08019114 	.word	0x08019114

0800a95c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08c      	sub	sp, #48	; 0x30
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <netconn_close_shutdown+0x26>
 800a96e:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <netconn_close_shutdown+0x50>)
 800a970:	f240 4247 	movw	r2, #1095	; 0x447
 800a974:	490e      	ldr	r1, [pc, #56]	; (800a9b0 <netconn_close_shutdown+0x54>)
 800a976:	480f      	ldr	r0, [pc, #60]	; (800a9b4 <netconn_close_shutdown+0x58>)
 800a978:	f00d f828 	bl	80179cc <iprintf>
 800a97c:	f06f 030f 	mvn.w	r3, #15
 800a980:	e010      	b.n	800a9a4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a98a:	2329      	movs	r3, #41	; 0x29
 800a98c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800a98e:	f107 030c 	add.w	r3, r7, #12
 800a992:	4619      	mov	r1, r3
 800a994:	4808      	ldr	r0, [pc, #32]	; (800a9b8 <netconn_close_shutdown+0x5c>)
 800a996:	f7ff fb51 	bl	800a03c <netconn_apimsg>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a9a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3730      	adds	r7, #48	; 0x30
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	08018dfc 	.word	0x08018dfc
 800a9b0:	08019138 	.word	0x08019138
 800a9b4:	08018e54 	.word	0x08018e54
 800a9b8:	0800c099 	.word	0x0800c099

0800a9bc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800a9c4:	2103      	movs	r1, #3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff ffc8 	bl	800a95c <netconn_close_shutdown>
 800a9cc:	4603      	mov	r3, r0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b084      	sub	sp, #16
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <netconn_err+0x12>
    return ERR_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e00d      	b.n	800aa04 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800a9e8:	f00c ff8a 	bl	8017900 <sys_arch_protect>
 800a9ec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7a1b      	ldrb	r3, [r3, #8]
 800a9f2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f00c ff8e 	bl	801791c <sys_arch_unprotect>
  return err;
 800aa00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800aa16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa1a:	f113 0f0d 	cmn.w	r3, #13
 800aa1e:	d009      	beq.n	800aa34 <lwip_netconn_err_to_msg+0x28>
 800aa20:	f113 0f0d 	cmn.w	r3, #13
 800aa24:	dc0c      	bgt.n	800aa40 <lwip_netconn_err_to_msg+0x34>
 800aa26:	f113 0f0f 	cmn.w	r3, #15
 800aa2a:	d007      	beq.n	800aa3c <lwip_netconn_err_to_msg+0x30>
 800aa2c:	f113 0f0e 	cmn.w	r3, #14
 800aa30:	d002      	beq.n	800aa38 <lwip_netconn_err_to_msg+0x2c>
 800aa32:	e005      	b.n	800aa40 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800aa34:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <lwip_netconn_err_to_msg+0x54>)
 800aa36:	e00e      	b.n	800aa56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <lwip_netconn_err_to_msg+0x58>)
 800aa3a:	e00c      	b.n	800aa56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800aa3c:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <lwip_netconn_err_to_msg+0x5c>)
 800aa3e:	e00a      	b.n	800aa56 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800aa40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d005      	beq.n	800aa54 <lwip_netconn_err_to_msg+0x48>
 800aa48:	4b08      	ldr	r3, [pc, #32]	; (800aa6c <lwip_netconn_err_to_msg+0x60>)
 800aa4a:	227d      	movs	r2, #125	; 0x7d
 800aa4c:	4908      	ldr	r1, [pc, #32]	; (800aa70 <lwip_netconn_err_to_msg+0x64>)
 800aa4e:	4809      	ldr	r0, [pc, #36]	; (800aa74 <lwip_netconn_err_to_msg+0x68>)
 800aa50:	f00c ffbc 	bl	80179cc <iprintf>
      return NULL;
 800aa54:	2300      	movs	r3, #0
  }
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3708      	adds	r7, #8
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0801c378 	.word	0x0801c378
 800aa64:	0801c379 	.word	0x0801c379
 800aa68:	0801c37a 	.word	0x0801c37a
 800aa6c:	08019154 	.word	0x08019154
 800aa70:	08019188 	.word	0x08019188
 800aa74:	08019198 	.word	0x08019198

0800aa78 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <lwip_netconn_is_err_msg+0x1c>
 800aa88:	4b12      	ldr	r3, [pc, #72]	; (800aad4 <lwip_netconn_is_err_msg+0x5c>)
 800aa8a:	2285      	movs	r2, #133	; 0x85
 800aa8c:	4912      	ldr	r1, [pc, #72]	; (800aad8 <lwip_netconn_is_err_msg+0x60>)
 800aa8e:	4813      	ldr	r0, [pc, #76]	; (800aadc <lwip_netconn_is_err_msg+0x64>)
 800aa90:	f00c ff9c 	bl	80179cc <iprintf>

  if (msg == &netconn_aborted) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a12      	ldr	r2, [pc, #72]	; (800aae0 <lwip_netconn_is_err_msg+0x68>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d104      	bne.n	800aaa6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	22f3      	movs	r2, #243	; 0xf3
 800aaa0:	701a      	strb	r2, [r3, #0]
    return 1;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e012      	b.n	800aacc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a0e      	ldr	r2, [pc, #56]	; (800aae4 <lwip_netconn_is_err_msg+0x6c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d104      	bne.n	800aab8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	22f2      	movs	r2, #242	; 0xf2
 800aab2:	701a      	strb	r2, [r3, #0]
    return 1;
 800aab4:	2301      	movs	r3, #1
 800aab6:	e009      	b.n	800aacc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a0b      	ldr	r2, [pc, #44]	; (800aae8 <lwip_netconn_is_err_msg+0x70>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d104      	bne.n	800aaca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	22f1      	movs	r2, #241	; 0xf1
 800aac4:	701a      	strb	r2, [r3, #0]
    return 1;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	08019154 	.word	0x08019154
 800aad8:	080191c0 	.word	0x080191c0
 800aadc:	08019198 	.word	0x08019198
 800aae0:	0801c378 	.word	0x0801c378
 800aae4:	0801c379 	.word	0x0801c379
 800aae8:	0801c37a 	.word	0x0801c37a

0800aaec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b088      	sub	sp, #32
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d105      	bne.n	800ab0c <recv_udp+0x20>
 800ab00:	4b34      	ldr	r3, [pc, #208]	; (800abd4 <recv_udp+0xe8>)
 800ab02:	22e5      	movs	r2, #229	; 0xe5
 800ab04:	4934      	ldr	r1, [pc, #208]	; (800abd8 <recv_udp+0xec>)
 800ab06:	4835      	ldr	r0, [pc, #212]	; (800abdc <recv_udp+0xf0>)
 800ab08:	f00c ff60 	bl	80179cc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d105      	bne.n	800ab1e <recv_udp+0x32>
 800ab12:	4b30      	ldr	r3, [pc, #192]	; (800abd4 <recv_udp+0xe8>)
 800ab14:	22e6      	movs	r2, #230	; 0xe6
 800ab16:	4932      	ldr	r1, [pc, #200]	; (800abe0 <recv_udp+0xf4>)
 800ab18:	4830      	ldr	r0, [pc, #192]	; (800abdc <recv_udp+0xf0>)
 800ab1a:	f00c ff57 	bl	80179cc <iprintf>
  conn = (struct netconn *)arg;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d103      	bne.n	800ab30 <recv_udp+0x44>
    pbuf_free(p);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f003 f93f 	bl	800ddac <pbuf_free>
    return;
 800ab2e:	e04d      	b.n	800abcc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d005      	beq.n	800ab46 <recv_udp+0x5a>
 800ab3a:	4b26      	ldr	r3, [pc, #152]	; (800abd4 <recv_udp+0xe8>)
 800ab3c:	22ee      	movs	r2, #238	; 0xee
 800ab3e:	4929      	ldr	r1, [pc, #164]	; (800abe4 <recv_udp+0xf8>)
 800ab40:	4826      	ldr	r0, [pc, #152]	; (800abdc <recv_udp+0xf0>)
 800ab42:	f00c ff43 	bl	80179cc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	3310      	adds	r3, #16
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f00c fdce 	bl	80176ec <sys_mbox_valid>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d103      	bne.n	800ab5e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f003 f928 	bl	800ddac <pbuf_free>
    return;
 800ab5c:	e036      	b.n	800abcc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ab5e:	2006      	movs	r0, #6
 800ab60:	f002 fa2e 	bl	800cfc0 <memp_malloc>
 800ab64:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <recv_udp+0x88>
    pbuf_free(p);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f003 f91d 	bl	800ddac <pbuf_free>
    return;
 800ab72:	e02b      	b.n	800abcc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d002      	beq.n	800ab8c <recv_udp+0xa0>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	e000      	b.n	800ab8e <recv_udp+0xa2>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	69ba      	ldr	r2, [r7, #24]
 800ab90:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ab96:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	891b      	ldrh	r3, [r3, #8]
 800ab9c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	3310      	adds	r3, #16
 800aba2:	69b9      	ldr	r1, [r7, #24]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00c fd3f 	bl	8017628 <sys_mbox_trypost>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800abb0:	69b8      	ldr	r0, [r7, #24]
 800abb2:	f001 fafd 	bl	800c1b0 <netbuf_delete>
    return;
 800abb6:	e009      	b.n	800abcc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <recv_udp+0xe0>
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	8afa      	ldrh	r2, [r7, #22]
 800abc6:	2100      	movs	r1, #0
 800abc8:	69f8      	ldr	r0, [r7, #28]
 800abca:	4798      	blx	r3
  }
}
 800abcc:	3720      	adds	r7, #32
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	08019154 	.word	0x08019154
 800abd8:	080191cc 	.word	0x080191cc
 800abdc:	08019198 	.word	0x08019198
 800abe0:	080191f0 	.word	0x080191f0
 800abe4:	08019210 	.word	0x08019210

0800abe8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b088      	sub	sp, #32
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d106      	bne.n	800ac0a <recv_tcp+0x22>
 800abfc:	4b36      	ldr	r3, [pc, #216]	; (800acd8 <recv_tcp+0xf0>)
 800abfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac02:	4936      	ldr	r1, [pc, #216]	; (800acdc <recv_tcp+0xf4>)
 800ac04:	4836      	ldr	r0, [pc, #216]	; (800ace0 <recv_tcp+0xf8>)
 800ac06:	f00c fee1 	bl	80179cc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d106      	bne.n	800ac1e <recv_tcp+0x36>
 800ac10:	4b31      	ldr	r3, [pc, #196]	; (800acd8 <recv_tcp+0xf0>)
 800ac12:	f240 122d 	movw	r2, #301	; 0x12d
 800ac16:	4933      	ldr	r1, [pc, #204]	; (800ace4 <recv_tcp+0xfc>)
 800ac18:	4831      	ldr	r0, [pc, #196]	; (800ace0 <recv_tcp+0xf8>)
 800ac1a:	f00c fed7 	bl	80179cc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ac1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d006      	beq.n	800ac34 <recv_tcp+0x4c>
 800ac26:	4b2c      	ldr	r3, [pc, #176]	; (800acd8 <recv_tcp+0xf0>)
 800ac28:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ac2c:	492e      	ldr	r1, [pc, #184]	; (800ace8 <recv_tcp+0x100>)
 800ac2e:	482c      	ldr	r0, [pc, #176]	; (800ace0 <recv_tcp+0xf8>)
 800ac30:	f00c fecc 	bl	80179cc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <recv_tcp+0x5c>
    return ERR_VAL;
 800ac3e:	f06f 0305 	mvn.w	r3, #5
 800ac42:	e045      	b.n	800acd0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d006      	beq.n	800ac5c <recv_tcp+0x74>
 800ac4e:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <recv_tcp+0xf0>)
 800ac50:	f240 1235 	movw	r2, #309	; 0x135
 800ac54:	4925      	ldr	r1, [pc, #148]	; (800acec <recv_tcp+0x104>)
 800ac56:	4822      	ldr	r0, [pc, #136]	; (800ace0 <recv_tcp+0xf8>)
 800ac58:	f00c feb8 	bl	80179cc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3310      	adds	r3, #16
 800ac60:	4618      	mov	r0, r3
 800ac62:	f00c fd43 	bl	80176ec <sys_mbox_valid>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10d      	bne.n	800ac88 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d008      	beq.n	800ac84 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	891b      	ldrh	r3, [r3, #8]
 800ac76:	4619      	mov	r1, r3
 800ac78:	68b8      	ldr	r0, [r7, #8]
 800ac7a:	f004 f84f 	bl	800ed1c <tcp_recved>
      pbuf_free(p);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f003 f894 	bl	800ddac <pbuf_free>
    }
    return ERR_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e023      	b.n	800acd0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d005      	beq.n	800ac9a <recv_tcp+0xb2>
    msg = p;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	891b      	ldrh	r3, [r3, #8]
 800ac96:	83fb      	strh	r3, [r7, #30]
 800ac98:	e003      	b.n	800aca2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800ac9a:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <recv_tcp+0x108>)
 800ac9c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	3310      	adds	r3, #16
 800aca6:	69b9      	ldr	r1, [r7, #24]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f00c fcbd 	bl	8017628 <sys_mbox_trypost>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800acb4:	f04f 33ff 	mov.w	r3, #4294967295
 800acb8:	e00a      	b.n	800acd0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d005      	beq.n	800acce <recv_tcp+0xe6>
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc6:	8bfa      	ldrh	r2, [r7, #30]
 800acc8:	2100      	movs	r1, #0
 800acca:	6978      	ldr	r0, [r7, #20]
 800accc:	4798      	blx	r3
  }

  return ERR_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3720      	adds	r7, #32
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	08019154 	.word	0x08019154
 800acdc:	08019230 	.word	0x08019230
 800ace0:	08019198 	.word	0x08019198
 800ace4:	08019254 	.word	0x08019254
 800ace8:	08019274 	.word	0x08019274
 800acec:	0801928c 	.word	0x0801928c
 800acf0:	0801c37a 	.word	0x0801c37a

0800acf4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d106      	bne.n	800ad16 <poll_tcp+0x22>
 800ad08:	4b29      	ldr	r3, [pc, #164]	; (800adb0 <poll_tcp+0xbc>)
 800ad0a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ad0e:	4929      	ldr	r1, [pc, #164]	; (800adb4 <poll_tcp+0xc0>)
 800ad10:	4829      	ldr	r0, [pc, #164]	; (800adb8 <poll_tcp+0xc4>)
 800ad12:	f00c fe5b 	bl	80179cc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d104      	bne.n	800ad28 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ad1e:	2101      	movs	r1, #1
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 ff61 	bl	800bbe8 <lwip_netconn_do_writemore>
 800ad26:	e016      	b.n	800ad56 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d112      	bne.n	800ad56 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <poll_tcp+0x5a>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	7a5b      	ldrb	r3, [r3, #9]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	7a5a      	ldrb	r2, [r3, #9]
 800ad48:	3a01      	subs	r2, #1
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ad4e:	2101      	movs	r1, #1
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fbf7 	bl	800b544 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	7f1b      	ldrb	r3, [r3, #28]
 800ad5a:	f003 0310 	and.w	r3, r3, #16
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d021      	beq.n	800ada6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d01d      	beq.n	800ada6 <poll_tcp+0xb2>
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad72:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ad76:	d316      	bcc.n	800ada6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ad80:	2b04      	cmp	r3, #4
 800ad82:	d810      	bhi.n	800ada6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	7f1b      	ldrb	r3, [r3, #28]
 800ad88:	f023 0310 	bic.w	r3, r3, #16
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d005      	beq.n	800ada6 <poll_tcp+0xb2>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2102      	movs	r1, #2
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	08019154 	.word	0x08019154
 800adb4:	080192ac 	.word	0x080192ac
 800adb8:	08019198 	.word	0x08019198

0800adbc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	4613      	mov	r3, r2
 800adc8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d106      	bne.n	800ade2 <sent_tcp+0x26>
 800add4:	4b20      	ldr	r3, [pc, #128]	; (800ae58 <sent_tcp+0x9c>)
 800add6:	f240 1293 	movw	r2, #403	; 0x193
 800adda:	4920      	ldr	r1, [pc, #128]	; (800ae5c <sent_tcp+0xa0>)
 800addc:	4820      	ldr	r0, [pc, #128]	; (800ae60 <sent_tcp+0xa4>)
 800adde:	f00c fdf5 	bl	80179cc <iprintf>

  if (conn) {
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d032      	beq.n	800ae4e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	785b      	ldrb	r3, [r3, #1]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d104      	bne.n	800adfa <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800adf0:	2101      	movs	r1, #1
 800adf2:	6978      	ldr	r0, [r7, #20]
 800adf4:	f000 fef8 	bl	800bbe8 <lwip_netconn_do_writemore>
 800adf8:	e007      	b.n	800ae0a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d103      	bne.n	800ae0a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ae02:	2101      	movs	r1, #1
 800ae04:	6978      	ldr	r0, [r7, #20]
 800ae06:	f000 fb9d 	bl	800b544 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d01d      	beq.n	800ae4e <sent_tcp+0x92>
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae1a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ae1e:	d316      	bcc.n	800ae4e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ae28:	2b04      	cmp	r3, #4
 800ae2a:	d810      	bhi.n	800ae4e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	7f1b      	ldrb	r3, [r3, #28]
 800ae30:	f023 0310 	bic.w	r3, r3, #16
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d005      	beq.n	800ae4e <sent_tcp+0x92>
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae46:	88fa      	ldrh	r2, [r7, #6]
 800ae48:	2102      	movs	r1, #2
 800ae4a:	6978      	ldr	r0, [r7, #20]
 800ae4c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3718      	adds	r7, #24
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	08019154 	.word	0x08019154
 800ae5c:	080192ac 	.word	0x080192ac
 800ae60:	08019198 	.word	0x08019198

0800ae64 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b088      	sub	sp, #32
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <err_tcp+0x24>
 800ae7a:	4b5f      	ldr	r3, [pc, #380]	; (800aff8 <err_tcp+0x194>)
 800ae7c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ae80:	495e      	ldr	r1, [pc, #376]	; (800affc <err_tcp+0x198>)
 800ae82:	485f      	ldr	r0, [pc, #380]	; (800b000 <err_tcp+0x19c>)
 800ae84:	f00c fda2 	bl	80179cc <iprintf>

  SYS_ARCH_PROTECT(lev);
 800ae88:	f00c fd3a 	bl	8017900 <sys_arch_protect>
 800ae8c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	78fa      	ldrb	r2, [r7, #3]
 800ae98:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	7f1b      	ldrb	r3, [r3, #28]
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	785b      	ldrb	r3, [r3, #1]
 800aeac:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800aeb4:	69b8      	ldr	r0, [r7, #24]
 800aeb6:	f00c fd31 	bl	801791c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d005      	beq.n	800aece <err_tcp+0x6a>
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec6:	2200      	movs	r2, #0
 800aec8:	2104      	movs	r1, #4
 800aeca:	69f8      	ldr	r0, [r7, #28]
 800aecc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <err_tcp+0x7e>
 800aed6:	69fb      	ldr	r3, [r7, #28]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	2200      	movs	r2, #0
 800aedc:	2100      	movs	r1, #0
 800aede:	69f8      	ldr	r0, [r7, #28]
 800aee0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <err_tcp+0x92>
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	2200      	movs	r2, #0
 800aef0:	2102      	movs	r1, #2
 800aef2:	69f8      	ldr	r0, [r7, #28]
 800aef4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800aef6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fd86 	bl	800aa0c <lwip_netconn_err_to_msg>
 800af00:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	3310      	adds	r3, #16
 800af06:	4618      	mov	r0, r3
 800af08:	f00c fbf0 	bl	80176ec <sys_mbox_valid>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	3310      	adds	r3, #16
 800af16:	6939      	ldr	r1, [r7, #16]
 800af18:	4618      	mov	r0, r3
 800af1a:	f00c fb85 	bl	8017628 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3314      	adds	r3, #20
 800af22:	4618      	mov	r0, r3
 800af24:	f00c fbe2 	bl	80176ec <sys_mbox_valid>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d005      	beq.n	800af3a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	3314      	adds	r3, #20
 800af32:	6939      	ldr	r1, [r7, #16]
 800af34:	4618      	mov	r0, r3
 800af36:	f00c fb77 	bl	8017628 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800af3a:	7dfb      	ldrb	r3, [r7, #23]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d005      	beq.n	800af4c <err_tcp+0xe8>
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d002      	beq.n	800af4c <err_tcp+0xe8>
 800af46:	7dfb      	ldrb	r3, [r7, #23]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d143      	bne.n	800afd4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	7f1b      	ldrb	r3, [r3, #28]
 800af50:	f003 0304 	and.w	r3, r3, #4
 800af54:	2b00      	cmp	r3, #0
 800af56:	bf14      	ite	ne
 800af58:	2301      	movne	r3, #1
 800af5a:	2300      	moveq	r3, #0
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	7f1b      	ldrb	r3, [r3, #28]
 800af64:	f023 0304 	bic.w	r3, r3, #4
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d13b      	bne.n	800afec <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d106      	bne.n	800af8a <err_tcp+0x126>
 800af7c:	4b1e      	ldr	r3, [pc, #120]	; (800aff8 <err_tcp+0x194>)
 800af7e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800af82:	4920      	ldr	r1, [pc, #128]	; (800b004 <err_tcp+0x1a0>)
 800af84:	481e      	ldr	r0, [pc, #120]	; (800b000 <err_tcp+0x19c>)
 800af86:	f00c fd21 	bl	80179cc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800af8a:	7dfb      	ldrb	r3, [r7, #23]
 800af8c:	2b04      	cmp	r3, #4
 800af8e:	d104      	bne.n	800af9a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	2200      	movs	r2, #0
 800af96:	711a      	strb	r2, [r3, #4]
 800af98:	e003      	b.n	800afa2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	6a1b      	ldr	r3, [r3, #32]
 800af9e:	78fa      	ldrb	r2, [r7, #3]
 800afa0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	330c      	adds	r3, #12
 800afaa:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800afac:	68b8      	ldr	r0, [r7, #8]
 800afae:	f00c fc2b 	bl	8017808 <sys_sem_valid>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d106      	bne.n	800afc6 <err_tcp+0x162>
 800afb8:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <err_tcp+0x194>)
 800afba:	f240 12ef 	movw	r2, #495	; 0x1ef
 800afbe:	4912      	ldr	r1, [pc, #72]	; (800b008 <err_tcp+0x1a4>)
 800afc0:	480f      	ldr	r0, [pc, #60]	; (800b000 <err_tcp+0x19c>)
 800afc2:	f00c fd03 	bl	80179cc <iprintf>
      conn->current_msg = NULL;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	2200      	movs	r2, #0
 800afca:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800afcc:	68b8      	ldr	r0, [r7, #8]
 800afce:	f00c fc01 	bl	80177d4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800afd2:	e00b      	b.n	800afec <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d008      	beq.n	800afee <err_tcp+0x18a>
 800afdc:	4b06      	ldr	r3, [pc, #24]	; (800aff8 <err_tcp+0x194>)
 800afde:	f240 12f7 	movw	r2, #503	; 0x1f7
 800afe2:	490a      	ldr	r1, [pc, #40]	; (800b00c <err_tcp+0x1a8>)
 800afe4:	4806      	ldr	r0, [pc, #24]	; (800b000 <err_tcp+0x19c>)
 800afe6:	f00c fcf1 	bl	80179cc <iprintf>
  }
}
 800afea:	e000      	b.n	800afee <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800afec:	bf00      	nop
}
 800afee:	bf00      	nop
 800aff0:	3720      	adds	r7, #32
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	08019154 	.word	0x08019154
 800affc:	080192ac 	.word	0x080192ac
 800b000:	08019198 	.word	0x08019198
 800b004:	080192bc 	.word	0x080192bc
 800b008:	080192d8 	.word	0x080192d8
 800b00c:	080192f4 	.word	0x080192f4

0800b010 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b01e:	6879      	ldr	r1, [r7, #4]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f004 fd41 	bl	800faa8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b026:	490a      	ldr	r1, [pc, #40]	; (800b050 <setup_tcp+0x40>)
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f004 fd4f 	bl	800facc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b02e:	4909      	ldr	r1, [pc, #36]	; (800b054 <setup_tcp+0x44>)
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f004 fd6d 	bl	800fb10 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b036:	2202      	movs	r2, #2
 800b038:	4907      	ldr	r1, [pc, #28]	; (800b058 <setup_tcp+0x48>)
 800b03a:	68f8      	ldr	r0, [r7, #12]
 800b03c:	f004 fdc4 	bl	800fbc8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b040:	4906      	ldr	r1, [pc, #24]	; (800b05c <setup_tcp+0x4c>)
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f004 fd86 	bl	800fb54 <tcp_err>
}
 800b048:	bf00      	nop
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	0800abe9 	.word	0x0800abe9
 800b054:	0800adbd 	.word	0x0800adbd
 800b058:	0800acf5 	.word	0x0800acf5
 800b05c:	0800ae65 	.word	0x0800ae65

0800b060 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b060:	b590      	push	{r4, r7, lr}
 800b062:	b089      	sub	sp, #36	; 0x24
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <accept_function+0x1e>
    return ERR_VAL;
 800b078:	f06f 0305 	mvn.w	r3, #5
 800b07c:	e0a1      	b.n	800b1c2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	3314      	adds	r3, #20
 800b082:	4618      	mov	r0, r3
 800b084:	f00c fb32 	bl	80176ec <sys_mbox_valid>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d102      	bne.n	800b094 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b08e:	f06f 0305 	mvn.w	r3, #5
 800b092:	e096      	b.n	800b1c2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d11b      	bne.n	800b0d2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	f103 0414 	add.w	r4, r3, #20
 800b0a0:	f06f 000c 	mvn.w	r0, #12
 800b0a4:	f7ff fcb2 	bl	800aa0c <lwip_netconn_err_to_msg>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f00c fabb 	bl	8017628 <sys_mbox_trypost>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d109      	bne.n	800b0cc <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d005      	beq.n	800b0cc <accept_function+0x6c>
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	69f8      	ldr	r0, [r7, #28]
 800b0ca:	4798      	blx	r3
    }
    return ERR_VAL;
 800b0cc:	f06f 0305 	mvn.w	r3, #5
 800b0d0:	e077      	b.n	800b1c2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d006      	beq.n	800b0e8 <accept_function+0x88>
 800b0da:	4b3c      	ldr	r3, [pc, #240]	; (800b1cc <accept_function+0x16c>)
 800b0dc:	f240 222a 	movw	r2, #554	; 0x22a
 800b0e0:	493b      	ldr	r1, [pc, #236]	; (800b1d0 <accept_function+0x170>)
 800b0e2:	483c      	ldr	r0, [pc, #240]	; (800b1d4 <accept_function+0x174>)
 800b0e4:	f00c fc72 	bl	80179cc <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	781a      	ldrb	r2, [r3, #0]
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	4610      	mov	r0, r2
 800b0f4:	f000 f8f0 	bl	800b2d8 <netconn_alloc>
 800b0f8:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d11b      	bne.n	800b138 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	f103 0414 	add.w	r4, r3, #20
 800b106:	f06f 000c 	mvn.w	r0, #12
 800b10a:	f7ff fc7f 	bl	800aa0c <lwip_netconn_err_to_msg>
 800b10e:	4603      	mov	r3, r0
 800b110:	4619      	mov	r1, r3
 800b112:	4620      	mov	r0, r4
 800b114:	f00c fa88 	bl	8017628 <sys_mbox_trypost>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <accept_function+0xd2>
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	2200      	movs	r2, #0
 800b12c:	2100      	movs	r1, #0
 800b12e:	69f8      	ldr	r0, [r7, #28]
 800b130:	4798      	blx	r3
    }
    return ERR_MEM;
 800b132:	f04f 33ff 	mov.w	r3, #4294967295
 800b136:	e044      	b.n	800b1c2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b13e:	69b8      	ldr	r0, [r7, #24]
 800b140:	f7ff ff66 	bl	800b010 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	3314      	adds	r3, #20
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f00c fa6c 	bl	8017628 <sys_mbox_trypost>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d02a      	beq.n	800b1ac <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b15c:	2100      	movs	r1, #0
 800b15e:	6978      	ldr	r0, [r7, #20]
 800b160:	f004 fca2 	bl	800faa8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b164:	2100      	movs	r1, #0
 800b166:	6978      	ldr	r0, [r7, #20]
 800b168:	f004 fcb0 	bl	800facc <tcp_recv>
    tcp_sent(pcb, NULL);
 800b16c:	2100      	movs	r1, #0
 800b16e:	6978      	ldr	r0, [r7, #20]
 800b170:	f004 fcce 	bl	800fb10 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b174:	2200      	movs	r2, #0
 800b176:	2100      	movs	r1, #0
 800b178:	6978      	ldr	r0, [r7, #20]
 800b17a:	f004 fd25 	bl	800fbc8 <tcp_poll>
    tcp_err(pcb, NULL);
 800b17e:	2100      	movs	r1, #0
 800b180:	6978      	ldr	r0, [r7, #20]
 800b182:	f004 fce7 	bl	800fb54 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2200      	movs	r2, #0
 800b18a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	3310      	adds	r3, #16
 800b190:	4618      	mov	r0, r3
 800b192:	f00c fa37 	bl	8017604 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	3310      	adds	r3, #16
 800b19a:	4618      	mov	r0, r3
 800b19c:	f00c fab7 	bl	801770e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b1a0:	69b8      	ldr	r0, [r7, #24]
 800b1a2:	f000 f907 	bl	800b3b4 <netconn_free>
    return ERR_MEM;
 800b1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1aa:	e00a      	b.n	800b1c2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <accept_function+0x160>
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	69f8      	ldr	r0, [r7, #28]
 800b1be:	4798      	blx	r3
  }

  return ERR_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3724      	adds	r7, #36	; 0x24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd90      	pop	{r4, r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	08019154 	.word	0x08019154
 800b1d0:	08019310 	.word	0x08019310
 800b1d4:	08019198 	.word	0x08019198

0800b1d8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b1d8:	b590      	push	{r4, r7, lr}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d006      	beq.n	800b1fc <pcb_new+0x24>
 800b1ee:	4b2b      	ldr	r3, [pc, #172]	; (800b29c <pcb_new+0xc4>)
 800b1f0:	f240 2265 	movw	r2, #613	; 0x265
 800b1f4:	492a      	ldr	r1, [pc, #168]	; (800b2a0 <pcb_new+0xc8>)
 800b1f6:	482b      	ldr	r0, [pc, #172]	; (800b2a4 <pcb_new+0xcc>)
 800b1f8:	f00c fbe8 	bl	80179cc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b206:	2b10      	cmp	r3, #16
 800b208:	d022      	beq.n	800b250 <pcb_new+0x78>
 800b20a:	2b20      	cmp	r3, #32
 800b20c:	d133      	bne.n	800b276 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	4618      	mov	r0, r3
 800b216:	f009 fd22 	bl	8014c5e <udp_new_ip_type>
 800b21a:	4603      	mov	r3, r0
 800b21c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d02a      	beq.n	800b27e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	2b22      	cmp	r3, #34	; 0x22
 800b230:	d104      	bne.n	800b23c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6858      	ldr	r0, [r3, #4]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	4917      	ldr	r1, [pc, #92]	; (800b2a8 <pcb_new+0xd0>)
 800b24a:	f009 fc8f 	bl	8014b6c <udp_recv>
      }
      break;
 800b24e:	e016      	b.n	800b27e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681c      	ldr	r4, [r3, #0]
 800b254:	7bfb      	ldrb	r3, [r7, #15]
 800b256:	4618      	mov	r0, r3
 800b258:	f004 fc18 	bl	800fa8c <tcp_new_ip_type>
 800b25c:	4603      	mov	r3, r0
 800b25e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d00b      	beq.n	800b282 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fece 	bl	800b010 <setup_tcp>
      }
      break;
 800b274:	e005      	b.n	800b282 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	22fa      	movs	r2, #250	; 0xfa
 800b27a:	711a      	strb	r2, [r3, #4]
      return;
 800b27c:	e00a      	b.n	800b294 <pcb_new+0xbc>
      break;
 800b27e:	bf00      	nop
 800b280:	e000      	b.n	800b284 <pcb_new+0xac>
      break;
 800b282:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	22ff      	movs	r2, #255	; 0xff
 800b292:	711a      	strb	r2, [r3, #4]
  }
}
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	bd90      	pop	{r4, r7, pc}
 800b29a:	bf00      	nop
 800b29c:	08019154 	.word	0x08019154
 800b2a0:	08019338 	.word	0x08019338
 800b2a4:	08019198 	.word	0x08019198
 800b2a8:	0800aaed 	.word	0x0800aaed

0800b2ac <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d102      	bne.n	800b2ce <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7ff ff85 	bl	800b1d8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b2ce:	bf00      	nop
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b2e8:	2007      	movs	r0, #7
 800b2ea:	f001 fe69 	bl	800cfc0 <memp_malloc>
 800b2ee:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <netconn_alloc+0x22>
    return NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e052      	b.n	800b3a0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	79fa      	ldrb	r2, [r7, #7]
 800b304:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b30c:	79fb      	ldrb	r3, [r7, #7]
 800b30e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b312:	2b10      	cmp	r3, #16
 800b314:	d004      	beq.n	800b320 <netconn_alloc+0x48>
 800b316:	2b20      	cmp	r3, #32
 800b318:	d105      	bne.n	800b326 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b31a:	2306      	movs	r3, #6
 800b31c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b31e:	e00a      	b.n	800b336 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b320:	2306      	movs	r3, #6
 800b322:	617b      	str	r3, [r7, #20]
      break;
 800b324:	e007      	b.n	800b336 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b326:	4b20      	ldr	r3, [pc, #128]	; (800b3a8 <netconn_alloc+0xd0>)
 800b328:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b32c:	491f      	ldr	r1, [pc, #124]	; (800b3ac <netconn_alloc+0xd4>)
 800b32e:	4820      	ldr	r0, [pc, #128]	; (800b3b0 <netconn_alloc+0xd8>)
 800b330:	f00c fb4c 	bl	80179cc <iprintf>
      goto free_and_return;
 800b334:	e02f      	b.n	800b396 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	3310      	adds	r3, #16
 800b33a:	6979      	ldr	r1, [r7, #20]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f00c f947 	bl	80175d0 <sys_mbox_new>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d125      	bne.n	800b394 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	330c      	adds	r3, #12
 800b34c:	2100      	movs	r1, #0
 800b34e:	4618      	mov	r0, r3
 800b350:	f00c f9ea 	bl	8017728 <sys_sem_new>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d005      	beq.n	800b366 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3310      	adds	r3, #16
 800b35e:	4618      	mov	r0, r3
 800b360:	f00c f950 	bl	8017604 <sys_mbox_free>
    goto free_and_return;
 800b364:	e017      	b.n	800b396 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3314      	adds	r3, #20
 800b36a:	4618      	mov	r0, r3
 800b36c:	f00c f9cf 	bl	801770e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f04f 32ff 	mov.w	r2, #4294967295
 800b37c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	7cfa      	ldrb	r2, [r7, #19]
 800b38e:	771a      	strb	r2, [r3, #28]
  return conn;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	e005      	b.n	800b3a0 <netconn_alloc+0xc8>
    goto free_and_return;
 800b394:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b396:	68f9      	ldr	r1, [r7, #12]
 800b398:	2007      	movs	r0, #7
 800b39a:	f001 fe63 	bl	800d064 <memp_free>
  return NULL;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	08019154 	.word	0x08019154
 800b3ac:	08019358 	.word	0x08019358
 800b3b0:	08019198 	.word	0x08019198

0800b3b4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d006      	beq.n	800b3d2 <netconn_free+0x1e>
 800b3c4:	4b1b      	ldr	r3, [pc, #108]	; (800b434 <netconn_free+0x80>)
 800b3c6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b3ca:	491b      	ldr	r1, [pc, #108]	; (800b438 <netconn_free+0x84>)
 800b3cc:	481b      	ldr	r0, [pc, #108]	; (800b43c <netconn_free+0x88>)
 800b3ce:	f00c fafd 	bl	80179cc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3310      	adds	r3, #16
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f00c f988 	bl	80176ec <sys_mbox_valid>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d006      	beq.n	800b3f0 <netconn_free+0x3c>
 800b3e2:	4b14      	ldr	r3, [pc, #80]	; (800b434 <netconn_free+0x80>)
 800b3e4:	f240 3223 	movw	r2, #803	; 0x323
 800b3e8:	4915      	ldr	r1, [pc, #84]	; (800b440 <netconn_free+0x8c>)
 800b3ea:	4814      	ldr	r0, [pc, #80]	; (800b43c <netconn_free+0x88>)
 800b3ec:	f00c faee 	bl	80179cc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3314      	adds	r3, #20
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f00c f979 	bl	80176ec <sys_mbox_valid>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d006      	beq.n	800b40e <netconn_free+0x5a>
 800b400:	4b0c      	ldr	r3, [pc, #48]	; (800b434 <netconn_free+0x80>)
 800b402:	f240 3226 	movw	r2, #806	; 0x326
 800b406:	490f      	ldr	r1, [pc, #60]	; (800b444 <netconn_free+0x90>)
 800b408:	480c      	ldr	r0, [pc, #48]	; (800b43c <netconn_free+0x88>)
 800b40a:	f00c fadf 	bl	80179cc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	330c      	adds	r3, #12
 800b412:	4618      	mov	r0, r3
 800b414:	f00c f9eb 	bl	80177ee <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	330c      	adds	r3, #12
 800b41c:	4618      	mov	r0, r3
 800b41e:	f00c fa04 	bl	801782a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b422:	6879      	ldr	r1, [r7, #4]
 800b424:	2007      	movs	r0, #7
 800b426:	f001 fe1d 	bl	800d064 <memp_free>
}
 800b42a:	bf00      	nop
 800b42c:	3708      	adds	r7, #8
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	08019154 	.word	0x08019154
 800b438:	08019380 	.word	0x08019380
 800b43c:	08019198 	.word	0x08019198
 800b440:	080193b0 	.word	0x080193b0
 800b444:	080193ec 	.word	0x080193ec

0800b448 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b086      	sub	sp, #24
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	3310      	adds	r3, #16
 800b454:	4618      	mov	r0, r3
 800b456:	f00c f949 	bl	80176ec <sys_mbox_valid>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d02f      	beq.n	800b4c0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b460:	e018      	b.n	800b494 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b46a:	2b10      	cmp	r3, #16
 800b46c:	d10e      	bne.n	800b48c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f107 020f 	add.w	r2, r7, #15
 800b474:	4611      	mov	r1, r2
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fafe 	bl	800aa78 <lwip_netconn_is_err_msg>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d108      	bne.n	800b494 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4618      	mov	r0, r3
 800b486:	f002 fc91 	bl	800ddac <pbuf_free>
 800b48a:	e003      	b.n	800b494 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fe8e 	bl	800c1b0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	3310      	adds	r3, #16
 800b498:	f107 0210 	add.w	r2, r7, #16
 800b49c:	4611      	mov	r1, r2
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f00c f90d 	bl	80176be <sys_arch_mbox_tryfetch>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	d1da      	bne.n	800b462 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	3310      	adds	r3, #16
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f00c f8a7 	bl	8017604 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f00c f927 	bl	801770e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	3314      	adds	r3, #20
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f00c f911 	bl	80176ec <sys_mbox_valid>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d034      	beq.n	800b53a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b4d0:	e01d      	b.n	800b50e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	f107 020e 	add.w	r2, r7, #14
 800b4d8:	4611      	mov	r1, r2
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff facc 	bl	800aa78 <lwip_netconn_is_err_msg>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d113      	bne.n	800b50e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b4ea:	6978      	ldr	r0, [r7, #20]
 800b4ec:	f7ff ffac 	bl	800b448 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d007      	beq.n	800b508 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f003 fa45 	bl	800e98c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b508:	6978      	ldr	r0, [r7, #20]
 800b50a:	f7ff ff53 	bl	800b3b4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	3314      	adds	r3, #20
 800b512:	f107 0210 	add.w	r2, r7, #16
 800b516:	4611      	mov	r1, r2
 800b518:	4618      	mov	r0, r3
 800b51a:	f00c f8d0 	bl	80176be <sys_arch_mbox_tryfetch>
 800b51e:	4603      	mov	r3, r0
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b524:	d1d5      	bne.n	800b4d2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	3314      	adds	r3, #20
 800b52a:	4618      	mov	r0, r3
 800b52c:	f00c f86a 	bl	8017604 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3314      	adds	r3, #20
 800b534:	4618      	mov	r0, r3
 800b536:	f00c f8ea 	bl	801770e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b53a:	bf00      	nop
 800b53c:	3718      	adds	r7, #24
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <lwip_netconn_do_close_internal+0x24>
 800b55a:	4ba1      	ldr	r3, [pc, #644]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b55c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b560:	49a0      	ldr	r1, [pc, #640]	; (800b7e4 <lwip_netconn_do_close_internal+0x2a0>)
 800b562:	48a1      	ldr	r0, [pc, #644]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b564:	f00c fa32 	bl	80179cc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b570:	2b10      	cmp	r3, #16
 800b572:	d006      	beq.n	800b582 <lwip_netconn_do_close_internal+0x3e>
 800b574:	4b9a      	ldr	r3, [pc, #616]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b576:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b57a:	499c      	ldr	r1, [pc, #624]	; (800b7ec <lwip_netconn_do_close_internal+0x2a8>)
 800b57c:	489a      	ldr	r0, [pc, #616]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b57e:	f00c fa25 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	785b      	ldrb	r3, [r3, #1]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d006      	beq.n	800b598 <lwip_netconn_do_close_internal+0x54>
 800b58a:	4b95      	ldr	r3, [pc, #596]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b58c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b590:	4997      	ldr	r1, [pc, #604]	; (800b7f0 <lwip_netconn_do_close_internal+0x2ac>)
 800b592:	4895      	ldr	r0, [pc, #596]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b594:	f00c fa1a 	bl	80179cc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d106      	bne.n	800b5ae <lwip_netconn_do_close_internal+0x6a>
 800b5a0:	4b8f      	ldr	r3, [pc, #572]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b5a2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b5a6:	4993      	ldr	r1, [pc, #588]	; (800b7f4 <lwip_netconn_do_close_internal+0x2b0>)
 800b5a8:	488f      	ldr	r0, [pc, #572]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b5aa:	f00c fa0f 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <lwip_netconn_do_close_internal+0x80>
 800b5b6:	4b8a      	ldr	r3, [pc, #552]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b5b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b5bc:	498e      	ldr	r1, [pc, #568]	; (800b7f8 <lwip_netconn_do_close_internal+0x2b4>)
 800b5be:	488a      	ldr	r0, [pc, #552]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b5c0:	f00c fa04 	bl	80179cc <iprintf>

  tpcb = conn->pcb.tcp;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	7a1b      	ldrb	r3, [r3, #8]
 800b5d0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b5da:	7bfb      	ldrb	r3, [r7, #15]
 800b5dc:	f003 0302 	and.w	r3, r3, #2
 800b5e0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b5e2:	7bfb      	ldrb	r3, [r7, #15]
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d102      	bne.n	800b5ee <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	75bb      	strb	r3, [r7, #22]
 800b5ec:	e01f      	b.n	800b62e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00e      	beq.n	800b612 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b5f8:	2b05      	cmp	r3, #5
 800b5fa:	d007      	beq.n	800b60c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b600:	2b06      	cmp	r3, #6
 800b602:	d003      	beq.n	800b60c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d102      	bne.n	800b612 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	75bb      	strb	r3, [r7, #22]
 800b610:	e00d      	b.n	800b62e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b612:	7b7b      	ldrb	r3, [r7, #13]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d008      	beq.n	800b62a <lwip_netconn_do_close_internal+0xe6>
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	8b5b      	ldrh	r3, [r3, #26]
 800b61c:	f003 0310 	and.w	r3, r3, #16
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b624:	2301      	movs	r3, #1
 800b626:	75bb      	strb	r3, [r7, #22]
 800b628:	e001      	b.n	800b62e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b62a:	2300      	movs	r3, #0
 800b62c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b62e:	7dbb      	ldrb	r3, [r7, #22]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b634:	2100      	movs	r1, #0
 800b636:	6938      	ldr	r0, [r7, #16]
 800b638:	f004 fa36 	bl	800faa8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	7d1b      	ldrb	r3, [r3, #20]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d104      	bne.n	800b64e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b644:	2100      	movs	r1, #0
 800b646:	6938      	ldr	r0, [r7, #16]
 800b648:	f004 faa6 	bl	800fb98 <tcp_accept>
 800b64c:	e01d      	b.n	800b68a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b64e:	7bbb      	ldrb	r3, [r7, #14]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d007      	beq.n	800b664 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b654:	2100      	movs	r1, #0
 800b656:	6938      	ldr	r0, [r7, #16]
 800b658:	f004 fa38 	bl	800facc <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b65c:	2100      	movs	r1, #0
 800b65e:	6938      	ldr	r0, [r7, #16]
 800b660:	f004 fa9a 	bl	800fb98 <tcp_accept>
    }
    if (shut_tx) {
 800b664:	7b7b      	ldrb	r3, [r7, #13]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b66a:	2100      	movs	r1, #0
 800b66c:	6938      	ldr	r0, [r7, #16]
 800b66e:	f004 fa4f 	bl	800fb10 <tcp_sent>
    }
    if (shut_close) {
 800b672:	7dbb      	ldrb	r3, [r7, #22]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	6938      	ldr	r0, [r7, #16]
 800b67e:	f004 faa3 	bl	800fbc8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b682:	2100      	movs	r1, #0
 800b684:	6938      	ldr	r0, [r7, #16]
 800b686:	f004 fa65 	bl	800fb54 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b68a:	7dbb      	ldrb	r3, [r7, #22]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d005      	beq.n	800b69c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b690:	6938      	ldr	r0, [r7, #16]
 800b692:	f003 f835 	bl	800e700 <tcp_close>
 800b696:	4603      	mov	r3, r0
 800b698:	75fb      	strb	r3, [r7, #23]
 800b69a:	e007      	b.n	800b6ac <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b69c:	7bbb      	ldrb	r3, [r7, #14]
 800b69e:	7b7a      	ldrb	r2, [r7, #13]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	6938      	ldr	r0, [r7, #16]
 800b6a4:	f003 f858 	bl	800e758 <tcp_shutdown>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b6ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d102      	bne.n	800b6ba <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	757b      	strb	r3, [r7, #21]
 800b6b8:	e016      	b.n	800b6e8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d10f      	bne.n	800b6e4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a1b      	ldr	r3, [r3, #32]
 800b6c8:	7a5b      	ldrb	r3, [r3, #9]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10c      	bne.n	800b6e8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b6d2:	7dbb      	ldrb	r3, [r7, #22]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d007      	beq.n	800b6e8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b6d8:	6938      	ldr	r0, [r7, #16]
 800b6da:	f003 f957 	bl	800e98c <tcp_abort>
          err = ERR_OK;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	75fb      	strb	r3, [r7, #23]
 800b6e2:	e001      	b.n	800b6e8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b6e8:	7d7b      	ldrb	r3, [r7, #21]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d044      	beq.n	800b778 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	330c      	adds	r3, #12
 800b6f6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	7dfa      	ldrb	r2, [r7, #23]
 800b6fe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d129      	bne.n	800b768 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b714:	7dbb      	ldrb	r3, [r7, #22]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00c      	beq.n	800b734 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <lwip_netconn_do_close_internal+0x1f0>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72c:	2200      	movs	r2, #0
 800b72e:	2104      	movs	r1, #4
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
      }
      if (shut_rx) {
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d005      	beq.n	800b74e <lwip_netconn_do_close_internal+0x20a>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	4798      	blx	r3
      }
      if (shut_tx) {
 800b74e:	7b7b      	ldrb	r3, [r7, #13]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d009      	beq.n	800b768 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <lwip_netconn_do_close_internal+0x224>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b760:	2200      	movs	r2, #0
 800b762:	2102      	movs	r1, #2
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f00c f830 	bl	80177d4 <sys_sem_signal>
    }
    return ERR_OK;
 800b774:	2300      	movs	r3, #0
 800b776:	e02e      	b.n	800b7d6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800b778:	7d7b      	ldrb	r3, [r7, #21]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d11e      	bne.n	800b7bc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	7d1b      	ldrb	r3, [r3, #20]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d106      	bne.n	800b794 <lwip_netconn_do_close_internal+0x250>
 800b786:	4b16      	ldr	r3, [pc, #88]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b788:	f240 4241 	movw	r2, #1089	; 0x441
 800b78c:	491b      	ldr	r1, [pc, #108]	; (800b7fc <lwip_netconn_do_close_internal+0x2b8>)
 800b78e:	4816      	ldr	r0, [pc, #88]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b790:	f00c f91c 	bl	80179cc <iprintf>
    if (shut_tx) {
 800b794:	7b7b      	ldrb	r3, [r7, #13]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800b79a:	4919      	ldr	r1, [pc, #100]	; (800b800 <lwip_netconn_do_close_internal+0x2bc>)
 800b79c:	6938      	ldr	r0, [r7, #16]
 800b79e:	f004 f9b7 	bl	800fb10 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4917      	ldr	r1, [pc, #92]	; (800b804 <lwip_netconn_do_close_internal+0x2c0>)
 800b7a6:	6938      	ldr	r0, [r7, #16]
 800b7a8:	f004 fa0e 	bl	800fbc8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b7ac:	4916      	ldr	r1, [pc, #88]	; (800b808 <lwip_netconn_do_close_internal+0x2c4>)
 800b7ae:	6938      	ldr	r0, [r7, #16]
 800b7b0:	f004 f9d0 	bl	800fb54 <tcp_err>
    tcp_arg(tpcb, conn);
 800b7b4:	6879      	ldr	r1, [r7, #4]
 800b7b6:	6938      	ldr	r0, [r7, #16]
 800b7b8:	f004 f976 	bl	800faa8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <lwip_netconn_do_close_internal+0x28e>
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <lwip_netconn_do_close_internal+0x29c>)
 800b7c6:	f240 424d 	movw	r2, #1101	; 0x44d
 800b7ca:	4910      	ldr	r1, [pc, #64]	; (800b80c <lwip_netconn_do_close_internal+0x2c8>)
 800b7cc:	4806      	ldr	r0, [pc, #24]	; (800b7e8 <lwip_netconn_do_close_internal+0x2a4>)
 800b7ce:	f00c f8fd 	bl	80179cc <iprintf>
  return err;
 800b7d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	08019154 	.word	0x08019154
 800b7e4:	08019428 	.word	0x08019428
 800b7e8:	08019198 	.word	0x08019198
 800b7ec:	08019438 	.word	0x08019438
 800b7f0:	08019458 	.word	0x08019458
 800b7f4:	0801947c 	.word	0x0801947c
 800b7f8:	080192bc 	.word	0x080192bc
 800b7fc:	08019490 	.word	0x08019490
 800b800:	0800adbd 	.word	0x0800adbd
 800b804:	0800acf5 	.word	0x0800acf5
 800b808:	0800ae65 	.word	0x0800ae65
 800b80c:	080194b4 	.word	0x080194b4

0800b810 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b824:	7afb      	ldrb	r3, [r7, #11]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00d      	beq.n	800b846 <lwip_netconn_do_delconn+0x36>
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b834:	2b10      	cmp	r3, #16
 800b836:	d006      	beq.n	800b846 <lwip_netconn_do_delconn+0x36>
 800b838:	4b60      	ldr	r3, [pc, #384]	; (800b9bc <lwip_netconn_do_delconn+0x1ac>)
 800b83a:	f240 425e 	movw	r2, #1118	; 0x45e
 800b83e:	4960      	ldr	r1, [pc, #384]	; (800b9c0 <lwip_netconn_do_delconn+0x1b0>)
 800b840:	4860      	ldr	r0, [pc, #384]	; (800b9c4 <lwip_netconn_do_delconn+0x1b4>)
 800b842:	f00c f8c3 	bl	80179cc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b846:	7afb      	ldrb	r3, [r7, #11]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d005      	beq.n	800b858 <lwip_netconn_do_delconn+0x48>
 800b84c:	7afb      	ldrb	r3, [r7, #11]
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d002      	beq.n	800b858 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b852:	7afb      	ldrb	r3, [r7, #11]
 800b854:	2b03      	cmp	r3, #3
 800b856:	d109      	bne.n	800b86c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b858:	7afb      	ldrb	r3, [r7, #11]
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d10a      	bne.n	800b874 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	7f1b      	ldrb	r3, [r3, #28]
 800b864:	f003 0304 	and.w	r3, r3, #4
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d103      	bne.n	800b874 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	22fb      	movs	r2, #251	; 0xfb
 800b870:	711a      	strb	r2, [r3, #4]
 800b872:	e097      	b.n	800b9a4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b874:	7afb      	ldrb	r3, [r7, #11]
 800b876:	2b03      	cmp	r3, #3
 800b878:	d10d      	bne.n	800b896 <lwip_netconn_do_delconn+0x86>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	7f1b      	ldrb	r3, [r3, #28]
 800b880:	f003 0304 	and.w	r3, r3, #4
 800b884:	2b00      	cmp	r3, #0
 800b886:	d106      	bne.n	800b896 <lwip_netconn_do_delconn+0x86>
 800b888:	4b4c      	ldr	r3, [pc, #304]	; (800b9bc <lwip_netconn_do_delconn+0x1ac>)
 800b88a:	f240 427a 	movw	r2, #1146	; 0x47a
 800b88e:	494e      	ldr	r1, [pc, #312]	; (800b9c8 <lwip_netconn_do_delconn+0x1b8>)
 800b890:	484c      	ldr	r0, [pc, #304]	; (800b9c4 <lwip_netconn_do_delconn+0x1b4>)
 800b892:	f00c f89b 	bl	80179cc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f7ff fdd1 	bl	800b448 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d05f      	beq.n	800b970 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8ba:	2b10      	cmp	r3, #16
 800b8bc:	d00d      	beq.n	800b8da <lwip_netconn_do_delconn+0xca>
 800b8be:	2b20      	cmp	r3, #32
 800b8c0:	d151      	bne.n	800b966 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f009 f96a 	bl	8014bac <udp_remove>
          break;
 800b8d8:	e046      	b.n	800b968 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6a1b      	ldr	r3, [r3, #32]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d006      	beq.n	800b8f2 <lwip_netconn_do_delconn+0xe2>
 800b8e4:	4b35      	ldr	r3, [pc, #212]	; (800b9bc <lwip_netconn_do_delconn+0x1ac>)
 800b8e6:	f240 4294 	movw	r2, #1172	; 0x494
 800b8ea:	4938      	ldr	r1, [pc, #224]	; (800b9cc <lwip_netconn_do_delconn+0x1bc>)
 800b8ec:	4835      	ldr	r0, [pc, #212]	; (800b9c4 <lwip_netconn_do_delconn+0x1b4>)
 800b8ee:	f00c f86d 	bl	80179cc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2204      	movs	r2, #4
 800b8f8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff fe18 	bl	800b544 <lwip_netconn_do_close_internal>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d04b      	beq.n	800b9b2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	785b      	ldrb	r3, [r3, #1]
 800b920:	2b04      	cmp	r3, #4
 800b922:	d006      	beq.n	800b932 <lwip_netconn_do_delconn+0x122>
 800b924:	4b25      	ldr	r3, [pc, #148]	; (800b9bc <lwip_netconn_do_delconn+0x1ac>)
 800b926:	f240 429a 	movw	r2, #1178	; 0x49a
 800b92a:	4929      	ldr	r1, [pc, #164]	; (800b9d0 <lwip_netconn_do_delconn+0x1c0>)
 800b92c:	4825      	ldr	r0, [pc, #148]	; (800b9c4 <lwip_netconn_do_delconn+0x1b4>)
 800b92e:	f00c f84d 	bl	80179cc <iprintf>
            UNLOCK_TCPIP_CORE();
 800b932:	4828      	ldr	r0, [pc, #160]	; (800b9d4 <lwip_netconn_do_delconn+0x1c4>)
 800b934:	f00b ffb7 	bl	80178a6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	330c      	adds	r3, #12
 800b93e:	2100      	movs	r1, #0
 800b940:	4618      	mov	r0, r3
 800b942:	f00b ff16 	bl	8017772 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800b946:	4823      	ldr	r0, [pc, #140]	; (800b9d4 <lwip_netconn_do_delconn+0x1c4>)
 800b948:	f00b ff9e 	bl	8017888 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	785b      	ldrb	r3, [r3, #1]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d02d      	beq.n	800b9b2 <lwip_netconn_do_delconn+0x1a2>
 800b956:	4b19      	ldr	r3, [pc, #100]	; (800b9bc <lwip_netconn_do_delconn+0x1ac>)
 800b958:	f240 429e 	movw	r2, #1182	; 0x49e
 800b95c:	491c      	ldr	r1, [pc, #112]	; (800b9d0 <lwip_netconn_do_delconn+0x1c0>)
 800b95e:	4819      	ldr	r0, [pc, #100]	; (800b9c4 <lwip_netconn_do_delconn+0x1b4>)
 800b960:	f00c f834 	bl	80179cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800b964:	e025      	b.n	800b9b2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800b966:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	2200      	movs	r2, #0
 800b96e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b976:	2b00      	cmp	r3, #0
 800b978:	d007      	beq.n	800b98a <lwip_netconn_do_delconn+0x17a>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	6810      	ldr	r0, [r2, #0]
 800b984:	2200      	movs	r2, #0
 800b986:	2100      	movs	r1, #0
 800b988:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b00      	cmp	r3, #0
 800b992:	d007      	beq.n	800b9a4 <lwip_netconn_do_delconn+0x194>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	6810      	ldr	r0, [r2, #0]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	2102      	movs	r1, #2
 800b9a2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	330c      	adds	r3, #12
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f00b ff2c 	bl	8017808 <sys_sem_valid>
 800b9b0:	e000      	b.n	800b9b4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800b9b2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	08019154 	.word	0x08019154
 800b9c0:	080194c4 	.word	0x080194c4
 800b9c4:	08019198 	.word	0x08019198
 800b9c8:	080194d8 	.word	0x080194d8
 800b9cc:	080194f8 	.word	0x080194f8
 800b9d0:	08019514 	.word	0x08019514
 800b9d4:	200081e0 	.word	0x200081e0

0800b9d8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d025      	beq.n	800ba3a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9f8:	2b10      	cmp	r3, #16
 800b9fa:	d00e      	beq.n	800ba1a <lwip_netconn_do_bind+0x42>
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d119      	bne.n	800ba34 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6858      	ldr	r0, [r3, #4]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6899      	ldr	r1, [r3, #8]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	899b      	ldrh	r3, [r3, #12]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f009 f824 	bl	8014a5c <udp_bind>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
        break;
 800ba18:	e011      	b.n	800ba3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6858      	ldr	r0, [r3, #4]
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	6899      	ldr	r1, [r3, #8]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	899b      	ldrh	r3, [r3, #12]
 800ba28:	461a      	mov	r2, r3
 800ba2a:	f002 ffbb 	bl	800e9a4 <tcp_bind>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
        break;
 800ba32:	e004      	b.n	800ba3e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ba34:	23fa      	movs	r3, #250	; 0xfa
 800ba36:	73fb      	strb	r3, [r7, #15]
        break;
 800ba38:	e001      	b.n	800ba3e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ba3a:	23fa      	movs	r3, #250	; 0xfa
 800ba3c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	7bfa      	ldrb	r2, [r7, #15]
 800ba42:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ba44:	bf00      	nop
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d07f      	beq.n	800bb62 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba6c:	2b10      	cmp	r3, #16
 800ba6e:	d175      	bne.n	800bb5c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	785b      	ldrb	r3, [r3, #1]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d165      	bne.n	800bb46 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	7d1b      	ldrb	r3, [r3, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ba86:	23fa      	movs	r3, #250	; 0xfa
 800ba88:	72fb      	strb	r3, [r7, #11]
 800ba8a:	e06c      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ba8c:	23ff      	movs	r3, #255	; 0xff
 800ba8e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	f107 020b 	add.w	r2, r7, #11
 800ba9a:	7cf9      	ldrb	r1, [r7, #19]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f003 f839 	bl	800eb14 <tcp_listen_with_backlog_and_err>
 800baa2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d05d      	beq.n	800bb66 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3310      	adds	r3, #16
 800bab0:	4618      	mov	r0, r3
 800bab2:	f00b fe1b 	bl	80176ec <sys_mbox_valid>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3310      	adds	r3, #16
 800bac2:	4618      	mov	r0, r3
 800bac4:	f00b fd9e 	bl	8017604 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3310      	adds	r3, #16
 800bace:	4618      	mov	r0, r3
 800bad0:	f00b fe1d 	bl	801770e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3314      	adds	r3, #20
 800bade:	4618      	mov	r0, r3
 800bae0:	f00b fe04 	bl	80176ec <sys_mbox_valid>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d108      	bne.n	800bafc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3314      	adds	r3, #20
 800baf0:	2106      	movs	r1, #6
 800baf2:	4618      	mov	r0, r3
 800baf4:	f00b fd6c 	bl	80175d0 <sys_mbox_new>
 800baf8:	4603      	mov	r3, r0
 800bafa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bafc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d118      	bne.n	800bb36 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685a      	ldr	r2, [r3, #4]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4610      	mov	r0, r2
 800bb22:	f003 ffc1 	bl	800faa8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	4912      	ldr	r1, [pc, #72]	; (800bb78 <lwip_netconn_do_listen+0x12c>)
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f004 f832 	bl	800fb98 <tcp_accept>
 800bb34:	e017      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f002 fde2 	bl	800e700 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2200      	movs	r2, #0
 800bb42:	605a      	str	r2, [r3, #4]
 800bb44:	e00f      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d102      	bne.n	800bb56 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	72fb      	strb	r3, [r7, #11]
 800bb54:	e007      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bb56:	23f5      	movs	r3, #245	; 0xf5
 800bb58:	72fb      	strb	r3, [r7, #11]
 800bb5a:	e004      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bb5c:	23f0      	movs	r3, #240	; 0xf0
 800bb5e:	72fb      	strb	r3, [r7, #11]
 800bb60:	e001      	b.n	800bb66 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bb62:	23f5      	movs	r3, #245	; 0xf5
 800bb64:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bb66:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	0800b061 	.word	0x0800b061

0800bb7c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b086      	sub	sp, #24
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d022      	beq.n	800bbde <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bba2:	2b10      	cmp	r3, #16
 800bba4:	d11b      	bne.n	800bbde <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbb2:	d202      	bcs.n	800bbba <lwip_netconn_do_recv+0x3e>
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	e001      	b.n	800bbbe <lwip_netconn_do_recv+0x42>
 800bbba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbbe:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	89fa      	ldrh	r2, [r7, #14]
 800bbc8:	4611      	mov	r1, r2
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f003 f8a6 	bl	800ed1c <tcp_recved>
        remaining -= recved;
 800bbd0:	89fb      	ldrh	r3, [r7, #14]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	1ad3      	subs	r3, r2, r3
 800bbd6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1e6      	bne.n	800bbac <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bbde:	bf00      	nop
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b088      	sub	sp, #32
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d106      	bne.n	800bc0c <lwip_netconn_do_writemore+0x24>
 800bbfe:	4b96      	ldr	r3, [pc, #600]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc00:	f240 6273 	movw	r2, #1651	; 0x673
 800bc04:	4995      	ldr	r1, [pc, #596]	; (800be5c <lwip_netconn_do_writemore+0x274>)
 800bc06:	4896      	ldr	r0, [pc, #600]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc08:	f00b fee0 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	785b      	ldrb	r3, [r3, #1]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d006      	beq.n	800bc22 <lwip_netconn_do_writemore+0x3a>
 800bc14:	4b90      	ldr	r3, [pc, #576]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc16:	f240 6274 	movw	r2, #1652	; 0x674
 800bc1a:	4992      	ldr	r1, [pc, #584]	; (800be64 <lwip_netconn_do_writemore+0x27c>)
 800bc1c:	4890      	ldr	r0, [pc, #576]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc1e:	f00b fed5 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <lwip_netconn_do_writemore+0x50>
 800bc2a:	4b8b      	ldr	r3, [pc, #556]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc2c:	f240 6275 	movw	r2, #1653	; 0x675
 800bc30:	498d      	ldr	r1, [pc, #564]	; (800be68 <lwip_netconn_do_writemore+0x280>)
 800bc32:	488b      	ldr	r0, [pc, #556]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc34:	f00b feca 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d106      	bne.n	800bc4e <lwip_netconn_do_writemore+0x66>
 800bc40:	4b85      	ldr	r3, [pc, #532]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc42:	f240 6276 	movw	r2, #1654	; 0x676
 800bc46:	4989      	ldr	r1, [pc, #548]	; (800be6c <lwip_netconn_do_writemore+0x284>)
 800bc48:	4885      	ldr	r0, [pc, #532]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc4a:	f00b febf 	bl	80179cc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	699a      	ldr	r2, [r3, #24]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6a1b      	ldr	r3, [r3, #32]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d306      	bcc.n	800bc6c <lwip_netconn_do_writemore+0x84>
 800bc5e:	4b7e      	ldr	r3, [pc, #504]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc60:	f240 6277 	movw	r2, #1655	; 0x677
 800bc64:	4982      	ldr	r1, [pc, #520]	; (800be70 <lwip_netconn_do_writemore+0x288>)
 800bc66:	487e      	ldr	r0, [pc, #504]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc68:	f00b feb0 	bl	80179cc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	899b      	ldrh	r3, [r3, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d106      	bne.n	800bc84 <lwip_netconn_do_writemore+0x9c>
 800bc76:	4b78      	ldr	r3, [pc, #480]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bc78:	f240 6279 	movw	r2, #1657	; 0x679
 800bc7c:	497d      	ldr	r1, [pc, #500]	; (800be74 <lwip_netconn_do_writemore+0x28c>)
 800bc7e:	4878      	ldr	r0, [pc, #480]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bc80:	f00b fea4 	bl	80179cc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	7f1b      	ldrb	r3, [r3, #28]
 800bc8a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	7f1b      	ldrb	r3, [r3, #28]
 800bc90:	f003 0302 	and.w	r3, r3, #2
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d104      	bne.n	800bca2 <lwip_netconn_do_writemore+0xba>
 800bc98:	7ebb      	ldrb	r3, [r7, #26]
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <lwip_netconn_do_writemore+0xbe>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e000      	b.n	800bca8 <lwip_netconn_do_writemore+0xc0>
 800bca6:	2300      	movs	r3, #0
 800bca8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6a1b      	ldr	r3, [r3, #32]
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	4413      	add	r3, r2
 800bcba:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a1b      	ldr	r3, [r3, #32]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcd4:	d307      	bcc.n	800bce6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800bcd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcda:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bcdc:	7ebb      	ldrb	r3, [r7, #26]
 800bcde:	f043 0302 	orr.w	r3, r3, #2
 800bce2:	76bb      	strb	r3, [r7, #26]
 800bce4:	e001      	b.n	800bcea <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bcf2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800bcf4:	89fa      	ldrh	r2, [r7, #14]
 800bcf6:	8bbb      	ldrh	r3, [r7, #28]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d216      	bcs.n	800bd2a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
 800bcfe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800bd00:	7e3b      	ldrb	r3, [r7, #24]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00d      	beq.n	800bd22 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800bd06:	8bbb      	ldrh	r3, [r7, #28]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d10e      	bne.n	800bd2a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	6a1b      	ldr	r3, [r3, #32]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <lwip_netconn_do_writemore+0x134>
 800bd16:	f06f 0306 	mvn.w	r3, #6
 800bd1a:	e000      	b.n	800bd1e <lwip_netconn_do_writemore+0x136>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800bd20:	e07d      	b.n	800be1e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800bd22:	7ebb      	ldrb	r3, [r7, #26]
 800bd24:	f043 0302 	orr.w	r3, r3, #2
 800bd28:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	691a      	ldr	r2, [r3, #16]
 800bd30:	8bbb      	ldrh	r3, [r7, #28]
 800bd32:	441a      	add	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6a1b      	ldr	r3, [r3, #32]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d906      	bls.n	800bd4e <lwip_netconn_do_writemore+0x166>
 800bd40:	4b45      	ldr	r3, [pc, #276]	; (800be58 <lwip_netconn_do_writemore+0x270>)
 800bd42:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800bd46:	494c      	ldr	r1, [pc, #304]	; (800be78 <lwip_netconn_do_writemore+0x290>)
 800bd48:	4845      	ldr	r0, [pc, #276]	; (800be60 <lwip_netconn_do_writemore+0x278>)
 800bd4a:	f00b fe3f 	bl	80179cc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bd4e:	8bbb      	ldrh	r3, [r7, #28]
 800bd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d103      	bne.n	800bd60 <lwip_netconn_do_writemore+0x178>
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5e:	d209      	bcs.n	800bd74 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bd64:	8bba      	ldrh	r2, [r7, #28]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d10b      	bne.n	800bd82 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a1b      	ldr	r3, [r3, #32]
 800bd6e:	899b      	ldrh	r3, [r3, #12]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d906      	bls.n	800bd82 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800bd74:	2301      	movs	r3, #1
 800bd76:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bd78:	7ebb      	ldrb	r3, [r7, #26]
 800bd7a:	f043 0302 	orr.w	r3, r3, #2
 800bd7e:	76bb      	strb	r3, [r7, #26]
 800bd80:	e001      	b.n	800bd86 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6858      	ldr	r0, [r3, #4]
 800bd8a:	7ebb      	ldrb	r3, [r7, #26]
 800bd8c:	8bba      	ldrh	r2, [r7, #28]
 800bd8e:	6979      	ldr	r1, [r7, #20]
 800bd90:	f006 fdc8 	bl	8012924 <tcp_write>
 800bd94:	4603      	mov	r3, r0
 800bd96:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800bd98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d12c      	bne.n	800bdfa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a1b      	ldr	r3, [r3, #32]
 800bda4:	6999      	ldr	r1, [r3, #24]
 800bda6:	8bba      	ldrh	r2, [r7, #28]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	440a      	add	r2, r1
 800bdae:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	6919      	ldr	r1, [r3, #16]
 800bdb6:	8bba      	ldrh	r2, [r7, #28]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	440a      	add	r2, r1
 800bdbe:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6a1b      	ldr	r3, [r3, #32]
 800bdc4:	691a      	ldr	r2, [r3, #16]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d113      	bne.n	800bdfa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	899a      	ldrh	r2, [r3, #12]
 800bdd8:	3a01      	subs	r2, #1
 800bdda:	b292      	uxth	r2, r2
 800bddc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	899b      	ldrh	r3, [r3, #12]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	689a      	ldr	r2, [r3, #8]
 800bdee:	3208      	adds	r2, #8
 800bdf0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800bdfa:	7e7b      	ldrb	r3, [r7, #25]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d004      	beq.n	800be0a <lwip_netconn_do_writemore+0x222>
 800be00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f43f af50 	beq.w	800bcaa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800be0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d004      	beq.n	800be1c <lwip_netconn_do_writemore+0x234>
 800be12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1a:	d146      	bne.n	800beaa <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800be1c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800be1e:	7e3b      	ldrb	r3, [r7, #24]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d02b      	beq.n	800be7c <lwip_netconn_do_writemore+0x294>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	429a      	cmp	r2, r3
 800be32:	d223      	bcs.n	800be7c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d005      	beq.n	800be48 <lwip_netconn_do_writemore+0x260>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be40:	2200      	movs	r2, #0
 800be42:	2103      	movs	r1, #3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	7f1b      	ldrb	r3, [r3, #28]
 800be4c:	f043 0310 	orr.w	r3, r3, #16
 800be50:	b2da      	uxtb	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	771a      	strb	r2, [r3, #28]
 800be56:	e028      	b.n	800beaa <lwip_netconn_do_writemore+0x2c2>
 800be58:	08019154 	.word	0x08019154
 800be5c:	080192ac 	.word	0x080192ac
 800be60:	08019198 	.word	0x08019198
 800be64:	080195b4 	.word	0x080195b4
 800be68:	080192bc 	.word	0x080192bc
 800be6c:	080195d4 	.word	0x080195d4
 800be70:	080195ec 	.word	0x080195ec
 800be74:	0801962c 	.word	0x0801962c
 800be78:	08019654 	.word	0x08019654
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800be84:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800be88:	d305      	bcc.n	800be96 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800be92:	2b04      	cmp	r3, #4
 800be94:	d909      	bls.n	800beaa <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d005      	beq.n	800beaa <lwip_netconn_do_writemore+0x2c2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea2:	2200      	movs	r2, #0
 800bea4:	2103      	movs	r1, #3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800beaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11d      	bne.n	800beee <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	699a      	ldr	r2, [r3, #24]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a1b      	ldr	r3, [r3, #32]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d002      	beq.n	800bec8 <lwip_netconn_do_writemore+0x2e0>
 800bec2:	7e3b      	ldrb	r3, [r7, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800bec8:	2301      	movs	r3, #1
 800beca:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	685b      	ldr	r3, [r3, #4]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f007 fb11 	bl	80134f8 <tcp_output>
 800bed6:	4603      	mov	r3, r0
 800bed8:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800beda:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800bede:	f113 0f04 	cmn.w	r3, #4
 800bee2:	d12c      	bne.n	800bf3e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bee4:	7b3b      	ldrb	r3, [r7, #12]
 800bee6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bee8:	2301      	movs	r3, #1
 800beea:	76fb      	strb	r3, [r7, #27]
 800beec:	e027      	b.n	800bf3e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800beee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef6:	d120      	bne.n	800bf3a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	f007 fafb 	bl	80134f8 <tcp_output>
 800bf02:	4603      	mov	r3, r0
 800bf04:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800bf06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800bf0a:	f113 0f04 	cmn.w	r3, #4
 800bf0e:	d104      	bne.n	800bf1a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800bf10:	7b7b      	ldrb	r3, [r7, #13]
 800bf12:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf14:	2301      	movs	r3, #1
 800bf16:	76fb      	strb	r3, [r7, #27]
 800bf18:	e011      	b.n	800bf3e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800bf1a:	7e3b      	ldrb	r3, [r7, #24]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00e      	beq.n	800bf3e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d102      	bne.n	800bf30 <lwip_netconn_do_writemore+0x348>
 800bf2a:	f06f 0306 	mvn.w	r3, #6
 800bf2e:	e000      	b.n	800bf32 <lwip_netconn_do_writemore+0x34a>
 800bf30:	2300      	movs	r3, #0
 800bf32:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800bf34:	2301      	movs	r3, #1
 800bf36:	76fb      	strb	r3, [r7, #27]
 800bf38:	e001      	b.n	800bf3e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800bf3e:	7efb      	ldrb	r3, [r7, #27]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d015      	beq.n	800bf70 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	330c      	adds	r3, #12
 800bf4c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	7ffa      	ldrb	r2, [r7, #31]
 800bf54:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800bf62:	78fb      	ldrb	r3, [r7, #3]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d006      	beq.n	800bf76 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800bf68:	68b8      	ldr	r0, [r7, #8]
 800bf6a:	f00b fc33 	bl	80177d4 <sys_sem_signal>
 800bf6e:	e002      	b.n	800bf76 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800bf70:	f04f 33ff 	mov.w	r3, #4294967295
 800bf74:	e000      	b.n	800bf78 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3720      	adds	r7, #32
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7fe fd20 	bl	800a9d6 <netconn_err>
 800bf96:	4603      	mov	r3, r0
 800bf98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800bf9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d166      	bne.n	800c070 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfac:	2b10      	cmp	r3, #16
 800bfae:	d15d      	bne.n	800c06c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	785b      	ldrb	r3, [r3, #1]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800bfba:	23fb      	movs	r3, #251	; 0xfb
 800bfbc:	73fb      	strb	r3, [r7, #15]
 800bfbe:	e057      	b.n	800c070 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d04d      	beq.n	800c066 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d006      	beq.n	800bfea <lwip_netconn_do_write+0x6a>
 800bfdc:	4b28      	ldr	r3, [pc, #160]	; (800c080 <lwip_netconn_do_write+0x100>)
 800bfde:	f240 7223 	movw	r2, #1827	; 0x723
 800bfe2:	4928      	ldr	r1, [pc, #160]	; (800c084 <lwip_netconn_do_write+0x104>)
 800bfe4:	4828      	ldr	r0, [pc, #160]	; (800c088 <lwip_netconn_do_write+0x108>)
 800bfe6:	f00b fcf1 	bl	80179cc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d106      	bne.n	800c000 <lwip_netconn_do_write+0x80>
 800bff2:	4b23      	ldr	r3, [pc, #140]	; (800c080 <lwip_netconn_do_write+0x100>)
 800bff4:	f240 7224 	movw	r2, #1828	; 0x724
 800bff8:	4924      	ldr	r1, [pc, #144]	; (800c08c <lwip_netconn_do_write+0x10c>)
 800bffa:	4823      	ldr	r0, [pc, #140]	; (800c088 <lwip_netconn_do_write+0x108>)
 800bffc:	f00b fce6 	bl	80179cc <iprintf>
        msg->conn->current_msg = msg;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2100      	movs	r1, #0
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff fdea 	bl	800bbe8 <lwip_netconn_do_writemore>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d02e      	beq.n	800c078 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	785b      	ldrb	r3, [r3, #1]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d006      	beq.n	800c032 <lwip_netconn_do_write+0xb2>
 800c024:	4b16      	ldr	r3, [pc, #88]	; (800c080 <lwip_netconn_do_write+0x100>)
 800c026:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c02a:	4919      	ldr	r1, [pc, #100]	; (800c090 <lwip_netconn_do_write+0x110>)
 800c02c:	4816      	ldr	r0, [pc, #88]	; (800c088 <lwip_netconn_do_write+0x108>)
 800c02e:	f00b fccd 	bl	80179cc <iprintf>
          UNLOCK_TCPIP_CORE();
 800c032:	4818      	ldr	r0, [pc, #96]	; (800c094 <lwip_netconn_do_write+0x114>)
 800c034:	f00b fc37 	bl	80178a6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	330c      	adds	r3, #12
 800c03e:	2100      	movs	r1, #0
 800c040:	4618      	mov	r0, r3
 800c042:	f00b fb96 	bl	8017772 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c046:	4813      	ldr	r0, [pc, #76]	; (800c094 <lwip_netconn_do_write+0x114>)
 800c048:	f00b fc1e 	bl	8017888 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	785b      	ldrb	r3, [r3, #1]
 800c052:	2b01      	cmp	r3, #1
 800c054:	d110      	bne.n	800c078 <lwip_netconn_do_write+0xf8>
 800c056:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <lwip_netconn_do_write+0x100>)
 800c058:	f240 722c 	movw	r2, #1836	; 0x72c
 800c05c:	490c      	ldr	r1, [pc, #48]	; (800c090 <lwip_netconn_do_write+0x110>)
 800c05e:	480a      	ldr	r0, [pc, #40]	; (800c088 <lwip_netconn_do_write+0x108>)
 800c060:	f00b fcb4 	bl	80179cc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c064:	e008      	b.n	800c078 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c066:	23f5      	movs	r3, #245	; 0xf5
 800c068:	73fb      	strb	r3, [r7, #15]
 800c06a:	e001      	b.n	800c070 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c06c:	23fa      	movs	r3, #250	; 0xfa
 800c06e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	7bfa      	ldrb	r2, [r7, #15]
 800c074:	711a      	strb	r2, [r3, #4]
 800c076:	e000      	b.n	800c07a <lwip_netconn_do_write+0xfa>
        return;
 800c078:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	08019154 	.word	0x08019154
 800c084:	080194f8 	.word	0x080194f8
 800c088:	08019198 	.word	0x08019198
 800c08c:	08019680 	.word	0x08019680
 800c090:	08019514 	.word	0x08019514
 800c094:	200081e0 	.word	0x200081e0

0800c098 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	785b      	ldrb	r3, [r3, #1]
 800c0aa:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d069      	beq.n	800c18a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c0c0:	2b10      	cmp	r3, #16
 800c0c2:	d162      	bne.n	800c18a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d002      	beq.n	800c0d2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c0cc:	7afb      	ldrb	r3, [r7, #11]
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d05b      	beq.n	800c18a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d103      	bne.n	800c0e0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	22f5      	movs	r2, #245	; 0xf5
 800c0dc:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c0de:	e059      	b.n	800c194 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c0e0:	7afb      	ldrb	r3, [r7, #11]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d103      	bne.n	800c0ee <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	22fb      	movs	r2, #251	; 0xfb
 800c0ea:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c0ec:	e052      	b.n	800c194 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	7a1b      	ldrb	r3, [r3, #8]
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff f9a2 	bl	800b448 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d006      	beq.n	800c11c <lwip_netconn_do_close+0x84>
 800c10e:	4b23      	ldr	r3, [pc, #140]	; (800c19c <lwip_netconn_do_close+0x104>)
 800c110:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c114:	4922      	ldr	r1, [pc, #136]	; (800c1a0 <lwip_netconn_do_close+0x108>)
 800c116:	4823      	ldr	r0, [pc, #140]	; (800c1a4 <lwip_netconn_do_close+0x10c>)
 800c118:	f00b fc58 	bl	80179cc <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2204      	movs	r2, #4
 800c122:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	2100      	movs	r1, #0
 800c132:	4618      	mov	r0, r3
 800c134:	f7ff fa06 	bl	800b544 <lwip_netconn_do_close_internal>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d029      	beq.n	800c192 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	785b      	ldrb	r3, [r3, #1]
 800c144:	2b04      	cmp	r3, #4
 800c146:	d006      	beq.n	800c156 <lwip_netconn_do_close+0xbe>
 800c148:	4b14      	ldr	r3, [pc, #80]	; (800c19c <lwip_netconn_do_close+0x104>)
 800c14a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c14e:	4916      	ldr	r1, [pc, #88]	; (800c1a8 <lwip_netconn_do_close+0x110>)
 800c150:	4814      	ldr	r0, [pc, #80]	; (800c1a4 <lwip_netconn_do_close+0x10c>)
 800c152:	f00b fc3b 	bl	80179cc <iprintf>
        UNLOCK_TCPIP_CORE();
 800c156:	4815      	ldr	r0, [pc, #84]	; (800c1ac <lwip_netconn_do_close+0x114>)
 800c158:	f00b fba5 	bl	80178a6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	330c      	adds	r3, #12
 800c162:	2100      	movs	r1, #0
 800c164:	4618      	mov	r0, r3
 800c166:	f00b fb04 	bl	8017772 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c16a:	4810      	ldr	r0, [pc, #64]	; (800c1ac <lwip_netconn_do_close+0x114>)
 800c16c:	f00b fb8c 	bl	8017888 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00b      	beq.n	800c192 <lwip_netconn_do_close+0xfa>
 800c17a:	4b08      	ldr	r3, [pc, #32]	; (800c19c <lwip_netconn_do_close+0x104>)
 800c17c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c180:	4909      	ldr	r1, [pc, #36]	; (800c1a8 <lwip_netconn_do_close+0x110>)
 800c182:	4808      	ldr	r0, [pc, #32]	; (800c1a4 <lwip_netconn_do_close+0x10c>)
 800c184:	f00b fc22 	bl	80179cc <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c188:	e003      	b.n	800c192 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	22f5      	movs	r2, #245	; 0xf5
 800c18e:	711a      	strb	r2, [r3, #4]
 800c190:	e000      	b.n	800c194 <lwip_netconn_do_close+0xfc>
      return;
 800c192:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c194:	3710      	adds	r7, #16
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	08019154 	.word	0x08019154
 800c1a0:	080194f8 	.word	0x080194f8
 800c1a4:	08019198 	.word	0x08019198
 800c1a8:	08019514 	.word	0x08019514
 800c1ac:	200081e0 	.word	0x200081e0

0800c1b0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d013      	beq.n	800c1e6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00b      	beq.n	800c1de <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f001 fdee 	bl	800ddac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	605a      	str	r2, [r3, #4]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	2006      	movs	r0, #6
 800c1e2:	f000 ff3f 	bl	800d064 <memp_free>
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3708      	adds	r7, #8
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
	...

0800c1f0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d108      	bne.n	800c214 <netbuf_data+0x24>
 800c202:	4b1b      	ldr	r3, [pc, #108]	; (800c270 <netbuf_data+0x80>)
 800c204:	22c6      	movs	r2, #198	; 0xc6
 800c206:	491b      	ldr	r1, [pc, #108]	; (800c274 <netbuf_data+0x84>)
 800c208:	481b      	ldr	r0, [pc, #108]	; (800c278 <netbuf_data+0x88>)
 800c20a:	f00b fbdf 	bl	80179cc <iprintf>
 800c20e:	f06f 030f 	mvn.w	r3, #15
 800c212:	e029      	b.n	800c268 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d108      	bne.n	800c22c <netbuf_data+0x3c>
 800c21a:	4b15      	ldr	r3, [pc, #84]	; (800c270 <netbuf_data+0x80>)
 800c21c:	22c7      	movs	r2, #199	; 0xc7
 800c21e:	4917      	ldr	r1, [pc, #92]	; (800c27c <netbuf_data+0x8c>)
 800c220:	4815      	ldr	r0, [pc, #84]	; (800c278 <netbuf_data+0x88>)
 800c222:	f00b fbd3 	bl	80179cc <iprintf>
 800c226:	f06f 030f 	mvn.w	r3, #15
 800c22a:	e01d      	b.n	800c268 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d108      	bne.n	800c244 <netbuf_data+0x54>
 800c232:	4b0f      	ldr	r3, [pc, #60]	; (800c270 <netbuf_data+0x80>)
 800c234:	22c8      	movs	r2, #200	; 0xc8
 800c236:	4912      	ldr	r1, [pc, #72]	; (800c280 <netbuf_data+0x90>)
 800c238:	480f      	ldr	r0, [pc, #60]	; (800c278 <netbuf_data+0x88>)
 800c23a:	f00b fbc7 	bl	80179cc <iprintf>
 800c23e:	f06f 030f 	mvn.w	r3, #15
 800c242:	e011      	b.n	800c268 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d102      	bne.n	800c252 <netbuf_data+0x62>
    return ERR_BUF;
 800c24c:	f06f 0301 	mvn.w	r3, #1
 800c250:	e00a      	b.n	800c268 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	685b      	ldr	r3, [r3, #4]
 800c256:	685a      	ldr	r2, [r3, #4]
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	895a      	ldrh	r2, [r3, #10]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	080196ac 	.word	0x080196ac
 800c274:	080197b4 	.word	0x080197b4
 800c278:	080196fc 	.word	0x080196fc
 800c27c:	080197d0 	.word	0x080197d0
 800c280:	080197f0 	.word	0x080197f0

0800c284 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d108      	bne.n	800c2a4 <netbuf_next+0x20>
 800c292:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <netbuf_next+0x54>)
 800c294:	22e0      	movs	r2, #224	; 0xe0
 800c296:	4911      	ldr	r1, [pc, #68]	; (800c2dc <netbuf_next+0x58>)
 800c298:	4811      	ldr	r0, [pc, #68]	; (800c2e0 <netbuf_next+0x5c>)
 800c29a:	f00b fb97 	bl	80179cc <iprintf>
 800c29e:	f04f 33ff 	mov.w	r3, #4294967295
 800c2a2:	e014      	b.n	800c2ce <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d102      	bne.n	800c2b4 <netbuf_next+0x30>
    return -1;
 800c2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b2:	e00c      	b.n	800c2ce <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <netbuf_next+0x48>
    return 1;
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <netbuf_next+0x4a>
  }
  return 0;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	080196ac 	.word	0x080196ac
 800c2dc:	0801980c 	.word	0x0801980c
 800c2e0:	080196fc 	.word	0x080196fc

0800c2e4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c2ee:	f008 f9bb 	bl	8014668 <sys_timeouts_sleeptime>
 800c2f2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2fa:	d10b      	bne.n	800c314 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c2fc:	4813      	ldr	r0, [pc, #76]	; (800c34c <tcpip_timeouts_mbox_fetch+0x68>)
 800c2fe:	f00b fad2 	bl	80178a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c302:	2200      	movs	r2, #0
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f00b f9a8 	bl	801765c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c30c:	480f      	ldr	r0, [pc, #60]	; (800c34c <tcpip_timeouts_mbox_fetch+0x68>)
 800c30e:	f00b fabb 	bl	8017888 <sys_mutex_lock>
    return;
 800c312:	e018      	b.n	800c346 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d102      	bne.n	800c320 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c31a:	f008 f96b 	bl	80145f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c31e:	e7e6      	b.n	800c2ee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c320:	480a      	ldr	r0, [pc, #40]	; (800c34c <tcpip_timeouts_mbox_fetch+0x68>)
 800c322:	f00b fac0 	bl	80178a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f00b f996 	bl	801765c <sys_arch_mbox_fetch>
 800c330:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c332:	4806      	ldr	r0, [pc, #24]	; (800c34c <tcpip_timeouts_mbox_fetch+0x68>)
 800c334:	f00b faa8 	bl	8017888 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33e:	d102      	bne.n	800c346 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c340:	f008 f958 	bl	80145f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c344:	e7d3      	b.n	800c2ee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	200081e0 	.word	0x200081e0

0800c350 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c358:	4810      	ldr	r0, [pc, #64]	; (800c39c <tcpip_thread+0x4c>)
 800c35a:	f00b fa95 	bl	8017888 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c35e:	4b10      	ldr	r3, [pc, #64]	; (800c3a0 <tcpip_thread+0x50>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d005      	beq.n	800c372 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c366:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <tcpip_thread+0x50>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4a0e      	ldr	r2, [pc, #56]	; (800c3a4 <tcpip_thread+0x54>)
 800c36c:	6812      	ldr	r2, [r2, #0]
 800c36e:	4610      	mov	r0, r2
 800c370:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c372:	f107 030c 	add.w	r3, r7, #12
 800c376:	4619      	mov	r1, r3
 800c378:	480b      	ldr	r0, [pc, #44]	; (800c3a8 <tcpip_thread+0x58>)
 800c37a:	f7ff ffb3 	bl	800c2e4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d106      	bne.n	800c392 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c384:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <tcpip_thread+0x5c>)
 800c386:	2291      	movs	r2, #145	; 0x91
 800c388:	4909      	ldr	r1, [pc, #36]	; (800c3b0 <tcpip_thread+0x60>)
 800c38a:	480a      	ldr	r0, [pc, #40]	; (800c3b4 <tcpip_thread+0x64>)
 800c38c:	f00b fb1e 	bl	80179cc <iprintf>
      continue;
 800c390:	e003      	b.n	800c39a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4618      	mov	r0, r3
 800c396:	f000 f80f 	bl	800c3b8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c39a:	e7ea      	b.n	800c372 <tcpip_thread+0x22>
 800c39c:	200081e0 	.word	0x200081e0
 800c3a0:	200049b0 	.word	0x200049b0
 800c3a4:	200049b4 	.word	0x200049b4
 800c3a8:	200049b8 	.word	0x200049b8
 800c3ac:	08019844 	.word	0x08019844
 800c3b0:	08019874 	.word	0x08019874
 800c3b4:	08019894 	.word	0x08019894

0800c3b8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d026      	beq.n	800c416 <tcpip_thread_handle_msg+0x5e>
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	dc2b      	bgt.n	800c424 <tcpip_thread_handle_msg+0x6c>
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <tcpip_thread_handle_msg+0x1e>
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d015      	beq.n	800c400 <tcpip_thread_handle_msg+0x48>
 800c3d4:	e026      	b.n	800c424 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	6850      	ldr	r0, [r2, #4]
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	6892      	ldr	r2, [r2, #8]
 800c3e2:	4611      	mov	r1, r2
 800c3e4:	4798      	blx	r3
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d004      	beq.n	800c3f6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 fcdb 	bl	800ddac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	2009      	movs	r0, #9
 800c3fa:	f000 fe33 	bl	800d064 <memp_free>
      break;
 800c3fe:	e018      	b.n	800c432 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	6892      	ldr	r2, [r2, #8]
 800c408:	4610      	mov	r0, r2
 800c40a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	2008      	movs	r0, #8
 800c410:	f000 fe28 	bl	800d064 <memp_free>
      break;
 800c414:	e00d      	b.n	800c432 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	6892      	ldr	r2, [r2, #8]
 800c41e:	4610      	mov	r0, r2
 800c420:	4798      	blx	r3
      break;
 800c422:	e006      	b.n	800c432 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c424:	4b05      	ldr	r3, [pc, #20]	; (800c43c <tcpip_thread_handle_msg+0x84>)
 800c426:	22cf      	movs	r2, #207	; 0xcf
 800c428:	4905      	ldr	r1, [pc, #20]	; (800c440 <tcpip_thread_handle_msg+0x88>)
 800c42a:	4806      	ldr	r0, [pc, #24]	; (800c444 <tcpip_thread_handle_msg+0x8c>)
 800c42c:	f00b face 	bl	80179cc <iprintf>
      break;
 800c430:	bf00      	nop
  }
}
 800c432:	bf00      	nop
 800c434:	3708      	adds	r7, #8
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	08019844 	.word	0x08019844
 800c440:	08019874 	.word	0x08019874
 800c444:	08019894 	.word	0x08019894

0800c448 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b086      	sub	sp, #24
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c454:	481a      	ldr	r0, [pc, #104]	; (800c4c0 <tcpip_inpkt+0x78>)
 800c456:	f00b f949 	bl	80176ec <sys_mbox_valid>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d105      	bne.n	800c46c <tcpip_inpkt+0x24>
 800c460:	4b18      	ldr	r3, [pc, #96]	; (800c4c4 <tcpip_inpkt+0x7c>)
 800c462:	22fc      	movs	r2, #252	; 0xfc
 800c464:	4918      	ldr	r1, [pc, #96]	; (800c4c8 <tcpip_inpkt+0x80>)
 800c466:	4819      	ldr	r0, [pc, #100]	; (800c4cc <tcpip_inpkt+0x84>)
 800c468:	f00b fab0 	bl	80179cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c46c:	2009      	movs	r0, #9
 800c46e:	f000 fda7 	bl	800cfc0 <memp_malloc>
 800c472:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d102      	bne.n	800c480 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c47a:	f04f 33ff 	mov.w	r3, #4294967295
 800c47e:	e01a      	b.n	800c4b6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	2200      	movs	r2, #0
 800c484:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c498:	6979      	ldr	r1, [r7, #20]
 800c49a:	4809      	ldr	r0, [pc, #36]	; (800c4c0 <tcpip_inpkt+0x78>)
 800c49c:	f00b f8c4 	bl	8017628 <sys_mbox_trypost>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d006      	beq.n	800c4b4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4a6:	6979      	ldr	r1, [r7, #20]
 800c4a8:	2009      	movs	r0, #9
 800c4aa:	f000 fddb 	bl	800d064 <memp_free>
    return ERR_MEM;
 800c4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c4b2:	e000      	b.n	800c4b6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c4b4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3718      	adds	r7, #24
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
 800c4be:	bf00      	nop
 800c4c0:	200049b8 	.word	0x200049b8
 800c4c4:	08019844 	.word	0x08019844
 800c4c8:	080198bc 	.word	0x080198bc
 800c4cc:	08019894 	.word	0x08019894

0800c4d0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b082      	sub	sp, #8
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c4e0:	f003 0318 	and.w	r3, r3, #24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c4e8:	4a08      	ldr	r2, [pc, #32]	; (800c50c <tcpip_input+0x3c>)
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7ff ffab 	bl	800c448 <tcpip_inpkt>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	e005      	b.n	800c502 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c4f6:	4a06      	ldr	r2, [pc, #24]	; (800c510 <tcpip_input+0x40>)
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f7ff ffa4 	bl	800c448 <tcpip_inpkt>
 800c500:	4603      	mov	r3, r0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3708      	adds	r7, #8
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	08017425 	.word	0x08017425
 800c510:	08015fc1 	.word	0x08015fc1

0800c514 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c51e:	4819      	ldr	r0, [pc, #100]	; (800c584 <tcpip_try_callback+0x70>)
 800c520:	f00b f8e4 	bl	80176ec <sys_mbox_valid>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d106      	bne.n	800c538 <tcpip_try_callback+0x24>
 800c52a:	4b17      	ldr	r3, [pc, #92]	; (800c588 <tcpip_try_callback+0x74>)
 800c52c:	f240 125d 	movw	r2, #349	; 0x15d
 800c530:	4916      	ldr	r1, [pc, #88]	; (800c58c <tcpip_try_callback+0x78>)
 800c532:	4817      	ldr	r0, [pc, #92]	; (800c590 <tcpip_try_callback+0x7c>)
 800c534:	f00b fa4a 	bl	80179cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c538:	2008      	movs	r0, #8
 800c53a:	f000 fd41 	bl	800cfc0 <memp_malloc>
 800c53e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d102      	bne.n	800c54c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c546:	f04f 33ff 	mov.w	r3, #4294967295
 800c54a:	e017      	b.n	800c57c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2201      	movs	r2, #1
 800c550:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c55e:	68f9      	ldr	r1, [r7, #12]
 800c560:	4808      	ldr	r0, [pc, #32]	; (800c584 <tcpip_try_callback+0x70>)
 800c562:	f00b f861 	bl	8017628 <sys_mbox_trypost>
 800c566:	4603      	mov	r3, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d006      	beq.n	800c57a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c56c:	68f9      	ldr	r1, [r7, #12]
 800c56e:	2008      	movs	r0, #8
 800c570:	f000 fd78 	bl	800d064 <memp_free>
    return ERR_MEM;
 800c574:	f04f 33ff 	mov.w	r3, #4294967295
 800c578:	e000      	b.n	800c57c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	200049b8 	.word	0x200049b8
 800c588:	08019844 	.word	0x08019844
 800c58c:	080198bc 	.word	0x080198bc
 800c590:	08019894 	.word	0x08019894

0800c594 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c5a0:	4806      	ldr	r0, [pc, #24]	; (800c5bc <tcpip_send_msg_wait_sem+0x28>)
 800c5a2:	f00b f971 	bl	8017888 <sys_mutex_lock>
  fn(apimsg);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68b8      	ldr	r0, [r7, #8]
 800c5aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c5ac:	4803      	ldr	r0, [pc, #12]	; (800c5bc <tcpip_send_msg_wait_sem+0x28>)
 800c5ae:	f00b f97a 	bl	80178a6 <sys_mutex_unlock>
  return ERR_OK;
 800c5b2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	200081e0 	.word	0x200081e0

0800c5c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af02      	add	r7, sp, #8
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c5ca:	f000 f871 	bl	800c6b0 <lwip_init>

  tcpip_init_done = initfunc;
 800c5ce:	4a17      	ldr	r2, [pc, #92]	; (800c62c <tcpip_init+0x6c>)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c5d4:	4a16      	ldr	r2, [pc, #88]	; (800c630 <tcpip_init+0x70>)
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c5da:	2106      	movs	r1, #6
 800c5dc:	4815      	ldr	r0, [pc, #84]	; (800c634 <tcpip_init+0x74>)
 800c5de:	f00a fff7 	bl	80175d0 <sys_mbox_new>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d006      	beq.n	800c5f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c5e8:	4b13      	ldr	r3, [pc, #76]	; (800c638 <tcpip_init+0x78>)
 800c5ea:	f240 2261 	movw	r2, #609	; 0x261
 800c5ee:	4913      	ldr	r1, [pc, #76]	; (800c63c <tcpip_init+0x7c>)
 800c5f0:	4813      	ldr	r0, [pc, #76]	; (800c640 <tcpip_init+0x80>)
 800c5f2:	f00b f9eb 	bl	80179cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c5f6:	4813      	ldr	r0, [pc, #76]	; (800c644 <tcpip_init+0x84>)
 800c5f8:	f00b f930 	bl	801785c <sys_mutex_new>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d006      	beq.n	800c610 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c602:	4b0d      	ldr	r3, [pc, #52]	; (800c638 <tcpip_init+0x78>)
 800c604:	f240 2265 	movw	r2, #613	; 0x265
 800c608:	490f      	ldr	r1, [pc, #60]	; (800c648 <tcpip_init+0x88>)
 800c60a:	480d      	ldr	r0, [pc, #52]	; (800c640 <tcpip_init+0x80>)
 800c60c:	f00b f9de 	bl	80179cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c610:	2318      	movs	r3, #24
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c618:	2200      	movs	r2, #0
 800c61a:	490c      	ldr	r1, [pc, #48]	; (800c64c <tcpip_init+0x8c>)
 800c61c:	480c      	ldr	r0, [pc, #48]	; (800c650 <tcpip_init+0x90>)
 800c61e:	f00b f94f 	bl	80178c0 <sys_thread_new>
}
 800c622:	bf00      	nop
 800c624:	3708      	adds	r7, #8
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	200049b0 	.word	0x200049b0
 800c630:	200049b4 	.word	0x200049b4
 800c634:	200049b8 	.word	0x200049b8
 800c638:	08019844 	.word	0x08019844
 800c63c:	080198cc 	.word	0x080198cc
 800c640:	08019894 	.word	0x08019894
 800c644:	200081e0 	.word	0x200081e0
 800c648:	080198f0 	.word	0x080198f0
 800c64c:	0800c351 	.word	0x0800c351
 800c650:	08019914 	.word	0x08019914

0800c654 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	4603      	mov	r3, r0
 800c65c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c65e:	88fb      	ldrh	r3, [r7, #6]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b21a      	sxth	r2, r3
 800c664:	88fb      	ldrh	r3, [r7, #6]
 800c666:	0a1b      	lsrs	r3, r3, #8
 800c668:	b29b      	uxth	r3, r3
 800c66a:	b21b      	sxth	r3, r3
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b21b      	sxth	r3, r3
 800c670:	b29b      	uxth	r3, r3
}
 800c672:	4618      	mov	r0, r3
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c67e:	b480      	push	{r7}
 800c680:	b083      	sub	sp, #12
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	061a      	lsls	r2, r3, #24
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	021b      	lsls	r3, r3, #8
 800c68e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	0a1b      	lsrs	r3, r3, #8
 800c698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c69c:	431a      	orrs	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	0e1b      	lsrs	r3, r3, #24
 800c6a2:	4313      	orrs	r3, r2
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	370c      	adds	r7, #12
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c6ba:	f00b f8c3 	bl	8017844 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c6be:	f000 f8d5 	bl	800c86c <mem_init>
  memp_init();
 800c6c2:	f000 fc31 	bl	800cf28 <memp_init>
  pbuf_init();
  netif_init();
 800c6c6:	f000 fcf7 	bl	800d0b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c6ca:	f008 f805 	bl	80146d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c6ce:	f001 fe07 	bl	800e2e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c6d2:	f007 ff47 	bl	8014564 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c6d6:	bf00      	nop
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <ptr_to_mem+0x20>)
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	88fb      	ldrh	r3, [r7, #6]
 800c6f0:	4413      	add	r3, r2
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	200049bc 	.word	0x200049bc

0800c704 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c70c:	4b05      	ldr	r3, [pc, #20]	; (800c724 <mem_to_ptr+0x20>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	b29b      	uxth	r3, r3
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	200049bc 	.word	0x200049bc

0800c728 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c730:	4b45      	ldr	r3, [pc, #276]	; (800c848 <plug_holes+0x120>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d206      	bcs.n	800c748 <plug_holes+0x20>
 800c73a:	4b44      	ldr	r3, [pc, #272]	; (800c84c <plug_holes+0x124>)
 800c73c:	f240 12df 	movw	r2, #479	; 0x1df
 800c740:	4943      	ldr	r1, [pc, #268]	; (800c850 <plug_holes+0x128>)
 800c742:	4844      	ldr	r0, [pc, #272]	; (800c854 <plug_holes+0x12c>)
 800c744:	f00b f942 	bl	80179cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c748:	4b43      	ldr	r3, [pc, #268]	; (800c858 <plug_holes+0x130>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d306      	bcc.n	800c760 <plug_holes+0x38>
 800c752:	4b3e      	ldr	r3, [pc, #248]	; (800c84c <plug_holes+0x124>)
 800c754:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c758:	4940      	ldr	r1, [pc, #256]	; (800c85c <plug_holes+0x134>)
 800c75a:	483e      	ldr	r0, [pc, #248]	; (800c854 <plug_holes+0x12c>)
 800c75c:	f00b f936 	bl	80179cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	791b      	ldrb	r3, [r3, #4]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d006      	beq.n	800c776 <plug_holes+0x4e>
 800c768:	4b38      	ldr	r3, [pc, #224]	; (800c84c <plug_holes+0x124>)
 800c76a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c76e:	493c      	ldr	r1, [pc, #240]	; (800c860 <plug_holes+0x138>)
 800c770:	4838      	ldr	r0, [pc, #224]	; (800c854 <plug_holes+0x12c>)
 800c772:	f00b f92b 	bl	80179cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c77e:	d906      	bls.n	800c78e <plug_holes+0x66>
 800c780:	4b32      	ldr	r3, [pc, #200]	; (800c84c <plug_holes+0x124>)
 800c782:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c786:	4937      	ldr	r1, [pc, #220]	; (800c864 <plug_holes+0x13c>)
 800c788:	4832      	ldr	r0, [pc, #200]	; (800c854 <plug_holes+0x12c>)
 800c78a:	f00b f91f 	bl	80179cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	881b      	ldrh	r3, [r3, #0]
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff ffa4 	bl	800c6e0 <ptr_to_mem>
 800c798:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d024      	beq.n	800c7ec <plug_holes+0xc4>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	791b      	ldrb	r3, [r3, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d120      	bne.n	800c7ec <plug_holes+0xc4>
 800c7aa:	4b2b      	ldr	r3, [pc, #172]	; (800c858 <plug_holes+0x130>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d01b      	beq.n	800c7ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c7b4:	4b2c      	ldr	r3, [pc, #176]	; (800c868 <plug_holes+0x140>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d102      	bne.n	800c7c4 <plug_holes+0x9c>
      lfree = mem;
 800c7be:	4a2a      	ldr	r2, [pc, #168]	; (800c868 <plug_holes+0x140>)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	881a      	ldrh	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7d4:	d00a      	beq.n	800c7ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	881b      	ldrh	r3, [r3, #0]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7ff ff80 	bl	800c6e0 <ptr_to_mem>
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f7ff ff8e 	bl	800c704 <mem_to_ptr>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	885b      	ldrh	r3, [r3, #2]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff ff75 	bl	800c6e0 <ptr_to_mem>
 800c7f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c7f8:	68ba      	ldr	r2, [r7, #8]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d01f      	beq.n	800c840 <plug_holes+0x118>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	791b      	ldrb	r3, [r3, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d11b      	bne.n	800c840 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c808:	4b17      	ldr	r3, [pc, #92]	; (800c868 <plug_holes+0x140>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d102      	bne.n	800c818 <plug_holes+0xf0>
      lfree = pmem;
 800c812:	4a15      	ldr	r2, [pc, #84]	; (800c868 <plug_holes+0x140>)
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	881a      	ldrh	r2, [r3, #0]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c828:	d00a      	beq.n	800c840 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff ff56 	bl	800c6e0 <ptr_to_mem>
 800c834:	4604      	mov	r4, r0
 800c836:	68b8      	ldr	r0, [r7, #8]
 800c838:	f7ff ff64 	bl	800c704 <mem_to_ptr>
 800c83c:	4603      	mov	r3, r0
 800c83e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c840:	bf00      	nop
 800c842:	3714      	adds	r7, #20
 800c844:	46bd      	mov	sp, r7
 800c846:	bd90      	pop	{r4, r7, pc}
 800c848:	200049bc 	.word	0x200049bc
 800c84c:	08019924 	.word	0x08019924
 800c850:	08019954 	.word	0x08019954
 800c854:	0801996c 	.word	0x0801996c
 800c858:	200049c0 	.word	0x200049c0
 800c85c:	08019994 	.word	0x08019994
 800c860:	080199b0 	.word	0x080199b0
 800c864:	080199cc 	.word	0x080199cc
 800c868:	200049c8 	.word	0x200049c8

0800c86c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c872:	4b1f      	ldr	r3, [pc, #124]	; (800c8f0 <mem_init+0x84>)
 800c874:	3303      	adds	r3, #3
 800c876:	f023 0303 	bic.w	r3, r3, #3
 800c87a:	461a      	mov	r2, r3
 800c87c:	4b1d      	ldr	r3, [pc, #116]	; (800c8f4 <mem_init+0x88>)
 800c87e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c880:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <mem_init+0x88>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c88c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c89a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c89e:	f7ff ff1f 	bl	800c6e0 <ptr_to_mem>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	4a14      	ldr	r2, [pc, #80]	; (800c8f8 <mem_init+0x8c>)
 800c8a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c8a8:	4b13      	ldr	r3, [pc, #76]	; (800c8f8 <mem_init+0x8c>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c8b0:	4b11      	ldr	r3, [pc, #68]	; (800c8f8 <mem_init+0x8c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c8ba:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <mem_init+0x8c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c8c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c8c4:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <mem_init+0x88>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <mem_init+0x90>)
 800c8ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c8cc:	480c      	ldr	r0, [pc, #48]	; (800c900 <mem_init+0x94>)
 800c8ce:	f00a ffc5 	bl	801785c <sys_mutex_new>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d006      	beq.n	800c8e6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <mem_init+0x98>)
 800c8da:	f240 221f 	movw	r2, #543	; 0x21f
 800c8de:	490a      	ldr	r1, [pc, #40]	; (800c908 <mem_init+0x9c>)
 800c8e0:	480a      	ldr	r0, [pc, #40]	; (800c90c <mem_init+0xa0>)
 800c8e2:	f00b f873 	bl	80179cc <iprintf>
  }
}
 800c8e6:	bf00      	nop
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200081fc 	.word	0x200081fc
 800c8f4:	200049bc 	.word	0x200049bc
 800c8f8:	200049c0 	.word	0x200049c0
 800c8fc:	200049c8 	.word	0x200049c8
 800c900:	200049c4 	.word	0x200049c4
 800c904:	08019924 	.word	0x08019924
 800c908:	080199f8 	.word	0x080199f8
 800c90c:	0801996c 	.word	0x0801996c

0800c910 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7ff fef3 	bl	800c704 <mem_to_ptr>
 800c91e:	4603      	mov	r3, r0
 800c920:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff feda 	bl	800c6e0 <ptr_to_mem>
 800c92c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	885b      	ldrh	r3, [r3, #2]
 800c932:	4618      	mov	r0, r3
 800c934:	f7ff fed4 	bl	800c6e0 <ptr_to_mem>
 800c938:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c942:	d818      	bhi.n	800c976 <mem_link_valid+0x66>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	885b      	ldrh	r3, [r3, #2]
 800c948:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c94c:	d813      	bhi.n	800c976 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c952:	8afa      	ldrh	r2, [r7, #22]
 800c954:	429a      	cmp	r2, r3
 800c956:	d004      	beq.n	800c962 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	8afa      	ldrh	r2, [r7, #22]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d109      	bne.n	800c976 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c962:	4b08      	ldr	r3, [pc, #32]	; (800c984 <mem_link_valid+0x74>)
 800c964:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c966:	693a      	ldr	r2, [r7, #16]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d006      	beq.n	800c97a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	885b      	ldrh	r3, [r3, #2]
 800c970:	8afa      	ldrh	r2, [r7, #22]
 800c972:	429a      	cmp	r2, r3
 800c974:	d001      	beq.n	800c97a <mem_link_valid+0x6a>
    return 0;
 800c976:	2300      	movs	r3, #0
 800c978:	e000      	b.n	800c97c <mem_link_valid+0x6c>
  }
  return 1;
 800c97a:	2301      	movs	r3, #1
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	200049c0 	.word	0x200049c0

0800c988 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d070      	beq.n	800ca78 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00d      	beq.n	800c9bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c9a0:	4b37      	ldr	r3, [pc, #220]	; (800ca80 <mem_free+0xf8>)
 800c9a2:	f240 2273 	movw	r2, #627	; 0x273
 800c9a6:	4937      	ldr	r1, [pc, #220]	; (800ca84 <mem_free+0xfc>)
 800c9a8:	4837      	ldr	r0, [pc, #220]	; (800ca88 <mem_free+0x100>)
 800c9aa:	f00b f80f 	bl	80179cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9ae:	f00a ffa7 	bl	8017900 <sys_arch_protect>
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f00a ffb1 	bl	801791c <sys_arch_unprotect>
    return;
 800c9ba:	e05e      	b.n	800ca7a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3b08      	subs	r3, #8
 800c9c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c9c2:	4b32      	ldr	r3, [pc, #200]	; (800ca8c <mem_free+0x104>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d306      	bcc.n	800c9da <mem_free+0x52>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f103 020c 	add.w	r2, r3, #12
 800c9d2:	4b2f      	ldr	r3, [pc, #188]	; (800ca90 <mem_free+0x108>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d90d      	bls.n	800c9f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c9da:	4b29      	ldr	r3, [pc, #164]	; (800ca80 <mem_free+0xf8>)
 800c9dc:	f240 227f 	movw	r2, #639	; 0x27f
 800c9e0:	492c      	ldr	r1, [pc, #176]	; (800ca94 <mem_free+0x10c>)
 800c9e2:	4829      	ldr	r0, [pc, #164]	; (800ca88 <mem_free+0x100>)
 800c9e4:	f00a fff2 	bl	80179cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c9e8:	f00a ff8a 	bl	8017900 <sys_arch_protect>
 800c9ec:	6138      	str	r0, [r7, #16]
 800c9ee:	6938      	ldr	r0, [r7, #16]
 800c9f0:	f00a ff94 	bl	801791c <sys_arch_unprotect>
    return;
 800c9f4:	e041      	b.n	800ca7a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c9f6:	4828      	ldr	r0, [pc, #160]	; (800ca98 <mem_free+0x110>)
 800c9f8:	f00a ff46 	bl	8017888 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	791b      	ldrb	r3, [r3, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d110      	bne.n	800ca26 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ca04:	4b1e      	ldr	r3, [pc, #120]	; (800ca80 <mem_free+0xf8>)
 800ca06:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ca0a:	4924      	ldr	r1, [pc, #144]	; (800ca9c <mem_free+0x114>)
 800ca0c:	481e      	ldr	r0, [pc, #120]	; (800ca88 <mem_free+0x100>)
 800ca0e:	f00a ffdd 	bl	80179cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca12:	4821      	ldr	r0, [pc, #132]	; (800ca98 <mem_free+0x110>)
 800ca14:	f00a ff47 	bl	80178a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca18:	f00a ff72 	bl	8017900 <sys_arch_protect>
 800ca1c:	6178      	str	r0, [r7, #20]
 800ca1e:	6978      	ldr	r0, [r7, #20]
 800ca20:	f00a ff7c 	bl	801791c <sys_arch_unprotect>
    return;
 800ca24:	e029      	b.n	800ca7a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ca26:	69f8      	ldr	r0, [r7, #28]
 800ca28:	f7ff ff72 	bl	800c910 <mem_link_valid>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d110      	bne.n	800ca54 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ca32:	4b13      	ldr	r3, [pc, #76]	; (800ca80 <mem_free+0xf8>)
 800ca34:	f240 2295 	movw	r2, #661	; 0x295
 800ca38:	4919      	ldr	r1, [pc, #100]	; (800caa0 <mem_free+0x118>)
 800ca3a:	4813      	ldr	r0, [pc, #76]	; (800ca88 <mem_free+0x100>)
 800ca3c:	f00a ffc6 	bl	80179cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ca40:	4815      	ldr	r0, [pc, #84]	; (800ca98 <mem_free+0x110>)
 800ca42:	f00a ff30 	bl	80178a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ca46:	f00a ff5b 	bl	8017900 <sys_arch_protect>
 800ca4a:	61b8      	str	r0, [r7, #24]
 800ca4c:	69b8      	ldr	r0, [r7, #24]
 800ca4e:	f00a ff65 	bl	801791c <sys_arch_unprotect>
    return;
 800ca52:	e012      	b.n	800ca7a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	2200      	movs	r2, #0
 800ca58:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ca5a:	4b12      	ldr	r3, [pc, #72]	; (800caa4 <mem_free+0x11c>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	69fa      	ldr	r2, [r7, #28]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d202      	bcs.n	800ca6a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ca64:	4a0f      	ldr	r2, [pc, #60]	; (800caa4 <mem_free+0x11c>)
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ca6a:	69f8      	ldr	r0, [r7, #28]
 800ca6c:	f7ff fe5c 	bl	800c728 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ca70:	4809      	ldr	r0, [pc, #36]	; (800ca98 <mem_free+0x110>)
 800ca72:	f00a ff18 	bl	80178a6 <sys_mutex_unlock>
 800ca76:	e000      	b.n	800ca7a <mem_free+0xf2>
    return;
 800ca78:	bf00      	nop
}
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	08019924 	.word	0x08019924
 800ca84:	08019a14 	.word	0x08019a14
 800ca88:	0801996c 	.word	0x0801996c
 800ca8c:	200049bc 	.word	0x200049bc
 800ca90:	200049c0 	.word	0x200049c0
 800ca94:	08019a38 	.word	0x08019a38
 800ca98:	200049c4 	.word	0x200049c4
 800ca9c:	08019a54 	.word	0x08019a54
 800caa0:	08019a7c 	.word	0x08019a7c
 800caa4:	200049c8 	.word	0x200049c8

0800caa8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b088      	sub	sp, #32
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cab4:	887b      	ldrh	r3, [r7, #2]
 800cab6:	3303      	adds	r3, #3
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f023 0303 	bic.w	r3, r3, #3
 800cabe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cac0:	8bfb      	ldrh	r3, [r7, #30]
 800cac2:	2b0b      	cmp	r3, #11
 800cac4:	d801      	bhi.n	800caca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cac6:	230c      	movs	r3, #12
 800cac8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800caca:	8bfb      	ldrh	r3, [r7, #30]
 800cacc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cad0:	d803      	bhi.n	800cada <mem_trim+0x32>
 800cad2:	8bfa      	ldrh	r2, [r7, #30]
 800cad4:	887b      	ldrh	r3, [r7, #2]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d201      	bcs.n	800cade <mem_trim+0x36>
    return NULL;
 800cada:	2300      	movs	r3, #0
 800cadc:	e0d8      	b.n	800cc90 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cade:	4b6e      	ldr	r3, [pc, #440]	; (800cc98 <mem_trim+0x1f0>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d304      	bcc.n	800caf2 <mem_trim+0x4a>
 800cae8:	4b6c      	ldr	r3, [pc, #432]	; (800cc9c <mem_trim+0x1f4>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d306      	bcc.n	800cb00 <mem_trim+0x58>
 800caf2:	4b6b      	ldr	r3, [pc, #428]	; (800cca0 <mem_trim+0x1f8>)
 800caf4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800caf8:	496a      	ldr	r1, [pc, #424]	; (800cca4 <mem_trim+0x1fc>)
 800cafa:	486b      	ldr	r0, [pc, #428]	; (800cca8 <mem_trim+0x200>)
 800cafc:	f00a ff66 	bl	80179cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cb00:	4b65      	ldr	r3, [pc, #404]	; (800cc98 <mem_trim+0x1f0>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d304      	bcc.n	800cb14 <mem_trim+0x6c>
 800cb0a:	4b64      	ldr	r3, [pc, #400]	; (800cc9c <mem_trim+0x1f4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d307      	bcc.n	800cb24 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800cb14:	f00a fef4 	bl	8017900 <sys_arch_protect>
 800cb18:	60b8      	str	r0, [r7, #8]
 800cb1a:	68b8      	ldr	r0, [r7, #8]
 800cb1c:	f00a fefe 	bl	801791c <sys_arch_unprotect>
    return rmem;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	e0b5      	b.n	800cc90 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3b08      	subs	r3, #8
 800cb28:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cb2a:	69b8      	ldr	r0, [r7, #24]
 800cb2c:	f7ff fdea 	bl	800c704 <mem_to_ptr>
 800cb30:	4603      	mov	r3, r0
 800cb32:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cb34:	69bb      	ldr	r3, [r7, #24]
 800cb36:	881a      	ldrh	r2, [r3, #0]
 800cb38:	8afb      	ldrh	r3, [r7, #22]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	b29b      	uxth	r3, r3
 800cb3e:	3b08      	subs	r3, #8
 800cb40:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cb42:	8bfa      	ldrh	r2, [r7, #30]
 800cb44:	8abb      	ldrh	r3, [r7, #20]
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d906      	bls.n	800cb58 <mem_trim+0xb0>
 800cb4a:	4b55      	ldr	r3, [pc, #340]	; (800cca0 <mem_trim+0x1f8>)
 800cb4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cb50:	4956      	ldr	r1, [pc, #344]	; (800ccac <mem_trim+0x204>)
 800cb52:	4855      	ldr	r0, [pc, #340]	; (800cca8 <mem_trim+0x200>)
 800cb54:	f00a ff3a 	bl	80179cc <iprintf>
  if (newsize > size) {
 800cb58:	8bfa      	ldrh	r2, [r7, #30]
 800cb5a:	8abb      	ldrh	r3, [r7, #20]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d901      	bls.n	800cb64 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	e095      	b.n	800cc90 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800cb64:	8bfa      	ldrh	r2, [r7, #30]
 800cb66:	8abb      	ldrh	r3, [r7, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d101      	bne.n	800cb70 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	e08f      	b.n	800cc90 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800cb70:	484f      	ldr	r0, [pc, #316]	; (800ccb0 <mem_trim+0x208>)
 800cb72:	f00a fe89 	bl	8017888 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff fdb0 	bl	800c6e0 <ptr_to_mem>
 800cb80:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	791b      	ldrb	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d13f      	bne.n	800cc0a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb92:	d106      	bne.n	800cba2 <mem_trim+0xfa>
 800cb94:	4b42      	ldr	r3, [pc, #264]	; (800cca0 <mem_trim+0x1f8>)
 800cb96:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cb9a:	4946      	ldr	r1, [pc, #280]	; (800ccb4 <mem_trim+0x20c>)
 800cb9c:	4842      	ldr	r0, [pc, #264]	; (800cca8 <mem_trim+0x200>)
 800cb9e:	f00a ff15 	bl	80179cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	881b      	ldrh	r3, [r3, #0]
 800cba6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cba8:	8afa      	ldrh	r2, [r7, #22]
 800cbaa:	8bfb      	ldrh	r3, [r7, #30]
 800cbac:	4413      	add	r3, r2
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cbb4:	4b40      	ldr	r3, [pc, #256]	; (800ccb8 <mem_trim+0x210>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	693a      	ldr	r2, [r7, #16]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d106      	bne.n	800cbcc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800cbbe:	89fb      	ldrh	r3, [r7, #14]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f7ff fd8d 	bl	800c6e0 <ptr_to_mem>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	4a3b      	ldr	r2, [pc, #236]	; (800ccb8 <mem_trim+0x210>)
 800cbca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cbcc:	89fb      	ldrh	r3, [r7, #14]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fd86 	bl	800c6e0 <ptr_to_mem>
 800cbd4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	89ba      	ldrh	r2, [r7, #12]
 800cbe0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	8afa      	ldrh	r2, [r7, #22]
 800cbe6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	89fa      	ldrh	r2, [r7, #14]
 800cbec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbf6:	d047      	beq.n	800cc88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7ff fd6f 	bl	800c6e0 <ptr_to_mem>
 800cc02:	4602      	mov	r2, r0
 800cc04:	89fb      	ldrh	r3, [r7, #14]
 800cc06:	8053      	strh	r3, [r2, #2]
 800cc08:	e03e      	b.n	800cc88 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cc0a:	8bfb      	ldrh	r3, [r7, #30]
 800cc0c:	f103 0214 	add.w	r2, r3, #20
 800cc10:	8abb      	ldrh	r3, [r7, #20]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d838      	bhi.n	800cc88 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cc16:	8afa      	ldrh	r2, [r7, #22]
 800cc18:	8bfb      	ldrh	r3, [r7, #30]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	3308      	adds	r3, #8
 800cc20:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	881b      	ldrh	r3, [r3, #0]
 800cc26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc2a:	d106      	bne.n	800cc3a <mem_trim+0x192>
 800cc2c:	4b1c      	ldr	r3, [pc, #112]	; (800cca0 <mem_trim+0x1f8>)
 800cc2e:	f240 3216 	movw	r2, #790	; 0x316
 800cc32:	4920      	ldr	r1, [pc, #128]	; (800ccb4 <mem_trim+0x20c>)
 800cc34:	481c      	ldr	r0, [pc, #112]	; (800cca8 <mem_trim+0x200>)
 800cc36:	f00a fec9 	bl	80179cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cc3a:	89fb      	ldrh	r3, [r7, #14]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7ff fd4f 	bl	800c6e0 <ptr_to_mem>
 800cc42:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cc44:	4b1c      	ldr	r3, [pc, #112]	; (800ccb8 <mem_trim+0x210>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d202      	bcs.n	800cc54 <mem_trim+0x1ac>
      lfree = mem2;
 800cc4e:	4a1a      	ldr	r2, [pc, #104]	; (800ccb8 <mem_trim+0x210>)
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2200      	movs	r2, #0
 800cc58:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	881a      	ldrh	r2, [r3, #0]
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	8afa      	ldrh	r2, [r7, #22]
 800cc66:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	89fa      	ldrh	r2, [r7, #14]
 800cc6c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc76:	d007      	beq.n	800cc88 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	881b      	ldrh	r3, [r3, #0]
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff fd2f 	bl	800c6e0 <ptr_to_mem>
 800cc82:	4602      	mov	r2, r0
 800cc84:	89fb      	ldrh	r3, [r7, #14]
 800cc86:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800cc88:	4809      	ldr	r0, [pc, #36]	; (800ccb0 <mem_trim+0x208>)
 800cc8a:	f00a fe0c 	bl	80178a6 <sys_mutex_unlock>
  return rmem;
 800cc8e:	687b      	ldr	r3, [r7, #4]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	200049bc 	.word	0x200049bc
 800cc9c:	200049c0 	.word	0x200049c0
 800cca0:	08019924 	.word	0x08019924
 800cca4:	08019ab0 	.word	0x08019ab0
 800cca8:	0801996c 	.word	0x0801996c
 800ccac:	08019ac8 	.word	0x08019ac8
 800ccb0:	200049c4 	.word	0x200049c4
 800ccb4:	08019ae8 	.word	0x08019ae8
 800ccb8:	200049c8 	.word	0x200049c8

0800ccbc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b088      	sub	sp, #32
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ccc6:	88fb      	ldrh	r3, [r7, #6]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <mem_malloc+0x14>
    return NULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	e0e2      	b.n	800ce96 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ccd0:	88fb      	ldrh	r3, [r7, #6]
 800ccd2:	3303      	adds	r3, #3
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	f023 0303 	bic.w	r3, r3, #3
 800ccda:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ccdc:	8bbb      	ldrh	r3, [r7, #28]
 800ccde:	2b0b      	cmp	r3, #11
 800cce0:	d801      	bhi.n	800cce6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cce2:	230c      	movs	r3, #12
 800cce4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cce6:	8bbb      	ldrh	r3, [r7, #28]
 800cce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ccec:	d803      	bhi.n	800ccf6 <mem_malloc+0x3a>
 800ccee:	8bba      	ldrh	r2, [r7, #28]
 800ccf0:	88fb      	ldrh	r3, [r7, #6]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d201      	bcs.n	800ccfa <mem_malloc+0x3e>
    return NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e0cd      	b.n	800ce96 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ccfa:	4869      	ldr	r0, [pc, #420]	; (800cea0 <mem_malloc+0x1e4>)
 800ccfc:	f00a fdc4 	bl	8017888 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd00:	4b68      	ldr	r3, [pc, #416]	; (800cea4 <mem_malloc+0x1e8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fcfd 	bl	800c704 <mem_to_ptr>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	83fb      	strh	r3, [r7, #30]
 800cd0e:	e0b7      	b.n	800ce80 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cd10:	8bfb      	ldrh	r3, [r7, #30]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff fce4 	bl	800c6e0 <ptr_to_mem>
 800cd18:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	791b      	ldrb	r3, [r3, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f040 80a7 	bne.w	800ce72 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	8bfb      	ldrh	r3, [r7, #30]
 800cd2c:	1ad3      	subs	r3, r2, r3
 800cd2e:	f1a3 0208 	sub.w	r2, r3, #8
 800cd32:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cd34:	429a      	cmp	r2, r3
 800cd36:	f0c0 809c 	bcc.w	800ce72 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	881b      	ldrh	r3, [r3, #0]
 800cd3e:	461a      	mov	r2, r3
 800cd40:	8bfb      	ldrh	r3, [r7, #30]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	f1a3 0208 	sub.w	r2, r3, #8
 800cd48:	8bbb      	ldrh	r3, [r7, #28]
 800cd4a:	3314      	adds	r3, #20
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d333      	bcc.n	800cdb8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cd50:	8bfa      	ldrh	r2, [r7, #30]
 800cd52:	8bbb      	ldrh	r3, [r7, #28]
 800cd54:	4413      	add	r3, r2
 800cd56:	b29b      	uxth	r3, r3
 800cd58:	3308      	adds	r3, #8
 800cd5a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cd5c:	8a7b      	ldrh	r3, [r7, #18]
 800cd5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd62:	d106      	bne.n	800cd72 <mem_malloc+0xb6>
 800cd64:	4b50      	ldr	r3, [pc, #320]	; (800cea8 <mem_malloc+0x1ec>)
 800cd66:	f240 3287 	movw	r2, #903	; 0x387
 800cd6a:	4950      	ldr	r1, [pc, #320]	; (800ceac <mem_malloc+0x1f0>)
 800cd6c:	4850      	ldr	r0, [pc, #320]	; (800ceb0 <mem_malloc+0x1f4>)
 800cd6e:	f00a fe2d 	bl	80179cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cd72:	8a7b      	ldrh	r3, [r7, #18]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff fcb3 	bl	800c6e0 <ptr_to_mem>
 800cd7a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	881a      	ldrh	r2, [r3, #0]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	8bfa      	ldrh	r2, [r7, #30]
 800cd8e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	8a7a      	ldrh	r2, [r7, #18]
 800cd94:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	2201      	movs	r2, #1
 800cd9a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	881b      	ldrh	r3, [r3, #0]
 800cda0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cda4:	d00b      	beq.n	800cdbe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7ff fc98 	bl	800c6e0 <ptr_to_mem>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	8a7b      	ldrh	r3, [r7, #18]
 800cdb4:	8053      	strh	r3, [r2, #2]
 800cdb6:	e002      	b.n	800cdbe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cdbe:	4b39      	ldr	r3, [pc, #228]	; (800cea4 <mem_malloc+0x1e8>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d127      	bne.n	800ce18 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cdc8:	4b36      	ldr	r3, [pc, #216]	; (800cea4 <mem_malloc+0x1e8>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cdce:	e005      	b.n	800cddc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff fc83 	bl	800c6e0 <ptr_to_mem>
 800cdda:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	791b      	ldrb	r3, [r3, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d004      	beq.n	800cdee <mem_malloc+0x132>
 800cde4:	4b33      	ldr	r3, [pc, #204]	; (800ceb4 <mem_malloc+0x1f8>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	69ba      	ldr	r2, [r7, #24]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d1f0      	bne.n	800cdd0 <mem_malloc+0x114>
          }
          lfree = cur;
 800cdee:	4a2d      	ldr	r2, [pc, #180]	; (800cea4 <mem_malloc+0x1e8>)
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cdf4:	4b2b      	ldr	r3, [pc, #172]	; (800cea4 <mem_malloc+0x1e8>)
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	4b2e      	ldr	r3, [pc, #184]	; (800ceb4 <mem_malloc+0x1f8>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d00b      	beq.n	800ce18 <mem_malloc+0x15c>
 800ce00:	4b28      	ldr	r3, [pc, #160]	; (800cea4 <mem_malloc+0x1e8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	791b      	ldrb	r3, [r3, #4]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d006      	beq.n	800ce18 <mem_malloc+0x15c>
 800ce0a:	4b27      	ldr	r3, [pc, #156]	; (800cea8 <mem_malloc+0x1ec>)
 800ce0c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ce10:	4929      	ldr	r1, [pc, #164]	; (800ceb8 <mem_malloc+0x1fc>)
 800ce12:	4827      	ldr	r0, [pc, #156]	; (800ceb0 <mem_malloc+0x1f4>)
 800ce14:	f00a fdda 	bl	80179cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ce18:	4821      	ldr	r0, [pc, #132]	; (800cea0 <mem_malloc+0x1e4>)
 800ce1a:	f00a fd44 	bl	80178a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ce1e:	8bba      	ldrh	r2, [r7, #28]
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	4413      	add	r3, r2
 800ce24:	3308      	adds	r3, #8
 800ce26:	4a23      	ldr	r2, [pc, #140]	; (800ceb4 <mem_malloc+0x1f8>)
 800ce28:	6812      	ldr	r2, [r2, #0]
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d906      	bls.n	800ce3c <mem_malloc+0x180>
 800ce2e:	4b1e      	ldr	r3, [pc, #120]	; (800cea8 <mem_malloc+0x1ec>)
 800ce30:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ce34:	4921      	ldr	r1, [pc, #132]	; (800cebc <mem_malloc+0x200>)
 800ce36:	481e      	ldr	r0, [pc, #120]	; (800ceb0 <mem_malloc+0x1f4>)
 800ce38:	f00a fdc8 	bl	80179cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d006      	beq.n	800ce54 <mem_malloc+0x198>
 800ce46:	4b18      	ldr	r3, [pc, #96]	; (800cea8 <mem_malloc+0x1ec>)
 800ce48:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ce4c:	491c      	ldr	r1, [pc, #112]	; (800cec0 <mem_malloc+0x204>)
 800ce4e:	4818      	ldr	r0, [pc, #96]	; (800ceb0 <mem_malloc+0x1f4>)
 800ce50:	f00a fdbc 	bl	80179cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f003 0303 	and.w	r3, r3, #3
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d006      	beq.n	800ce6c <mem_malloc+0x1b0>
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <mem_malloc+0x1ec>)
 800ce60:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ce64:	4917      	ldr	r1, [pc, #92]	; (800cec4 <mem_malloc+0x208>)
 800ce66:	4812      	ldr	r0, [pc, #72]	; (800ceb0 <mem_malloc+0x1f4>)
 800ce68:	f00a fdb0 	bl	80179cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	3308      	adds	r3, #8
 800ce70:	e011      	b.n	800ce96 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ce72:	8bfb      	ldrh	r3, [r7, #30]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff fc33 	bl	800c6e0 <ptr_to_mem>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce80:	8bfa      	ldrh	r2, [r7, #30]
 800ce82:	8bbb      	ldrh	r3, [r7, #28]
 800ce84:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	f4ff af41 	bcc.w	800cd10 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ce8e:	4804      	ldr	r0, [pc, #16]	; (800cea0 <mem_malloc+0x1e4>)
 800ce90:	f00a fd09 	bl	80178a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3720      	adds	r7, #32
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	200049c4 	.word	0x200049c4
 800cea4:	200049c8 	.word	0x200049c8
 800cea8:	08019924 	.word	0x08019924
 800ceac:	08019ae8 	.word	0x08019ae8
 800ceb0:	0801996c 	.word	0x0801996c
 800ceb4:	200049c0 	.word	0x200049c0
 800ceb8:	08019afc 	.word	0x08019afc
 800cebc:	08019b18 	.word	0x08019b18
 800cec0:	08019b48 	.word	0x08019b48
 800cec4:	08019b78 	.word	0x08019b78

0800cec8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	689b      	ldr	r3, [r3, #8]
 800ced4:	2200      	movs	r2, #0
 800ced6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	3303      	adds	r3, #3
 800cede:	f023 0303 	bic.w	r3, r3, #3
 800cee2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e011      	b.n	800cf0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	461a      	mov	r2, r3
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	4413      	add	r3, r2
 800cf06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	60fb      	str	r3, [r7, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	885b      	ldrh	r3, [r3, #2]
 800cf12:	461a      	mov	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	4293      	cmp	r3, r2
 800cf18:	dbe7      	blt.n	800ceea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cf1a:	bf00      	nop
 800cf1c:	bf00      	nop
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf2e:	2300      	movs	r3, #0
 800cf30:	80fb      	strh	r3, [r7, #6]
 800cf32:	e009      	b.n	800cf48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cf34:	88fb      	ldrh	r3, [r7, #6]
 800cf36:	4a08      	ldr	r2, [pc, #32]	; (800cf58 <memp_init+0x30>)
 800cf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff ffc3 	bl	800cec8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cf42:	88fb      	ldrh	r3, [r7, #6]
 800cf44:	3301      	adds	r3, #1
 800cf46:	80fb      	strh	r3, [r7, #6]
 800cf48:	88fb      	ldrh	r3, [r7, #6]
 800cf4a:	2b0c      	cmp	r3, #12
 800cf4c:	d9f2      	bls.n	800cf34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	0801c418 	.word	0x0801c418

0800cf5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cf64:	f00a fccc 	bl	8017900 <sys_arch_protect>
 800cf68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d015      	beq.n	800cfa4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	68ba      	ldr	r2, [r7, #8]
 800cf7e:	6812      	ldr	r2, [r2, #0]
 800cf80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	f003 0303 	and.w	r3, r3, #3
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d006      	beq.n	800cf9a <do_memp_malloc_pool+0x3e>
 800cf8c:	4b09      	ldr	r3, [pc, #36]	; (800cfb4 <do_memp_malloc_pool+0x58>)
 800cf8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cf92:	4909      	ldr	r1, [pc, #36]	; (800cfb8 <do_memp_malloc_pool+0x5c>)
 800cf94:	4809      	ldr	r0, [pc, #36]	; (800cfbc <do_memp_malloc_pool+0x60>)
 800cf96:	f00a fd19 	bl	80179cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cf9a:	68f8      	ldr	r0, [r7, #12]
 800cf9c:	f00a fcbe 	bl	801791c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	e003      	b.n	800cfac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f00a fcb9 	bl	801791c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}
 800cfb4:	08019b9c 	.word	0x08019b9c
 800cfb8:	08019bcc 	.word	0x08019bcc
 800cfbc:	08019bf0 	.word	0x08019bf0

0800cfc0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cfca:	79fb      	ldrb	r3, [r7, #7]
 800cfcc:	2b0c      	cmp	r3, #12
 800cfce:	d908      	bls.n	800cfe2 <memp_malloc+0x22>
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <memp_malloc+0x3c>)
 800cfd2:	f240 1257 	movw	r2, #343	; 0x157
 800cfd6:	490a      	ldr	r1, [pc, #40]	; (800d000 <memp_malloc+0x40>)
 800cfd8:	480a      	ldr	r0, [pc, #40]	; (800d004 <memp_malloc+0x44>)
 800cfda:	f00a fcf7 	bl	80179cc <iprintf>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e008      	b.n	800cff4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cfe2:	79fb      	ldrb	r3, [r7, #7]
 800cfe4:	4a08      	ldr	r2, [pc, #32]	; (800d008 <memp_malloc+0x48>)
 800cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff ffb6 	bl	800cf5c <do_memp_malloc_pool>
 800cff0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cff2:	68fb      	ldr	r3, [r7, #12]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	08019b9c 	.word	0x08019b9c
 800d000:	08019c2c 	.word	0x08019c2c
 800d004:	08019bf0 	.word	0x08019bf0
 800d008:	0801c418 	.word	0x0801c418

0800d00c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	f003 0303 	and.w	r3, r3, #3
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d006      	beq.n	800d02e <do_memp_free_pool+0x22>
 800d020:	4b0d      	ldr	r3, [pc, #52]	; (800d058 <do_memp_free_pool+0x4c>)
 800d022:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d026:	490d      	ldr	r1, [pc, #52]	; (800d05c <do_memp_free_pool+0x50>)
 800d028:	480d      	ldr	r0, [pc, #52]	; (800d060 <do_memp_free_pool+0x54>)
 800d02a:	f00a fccf 	bl	80179cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d032:	f00a fc65 	bl	8017900 <sys_arch_protect>
 800d036:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	681a      	ldr	r2, [r3, #0]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d04a:	68b8      	ldr	r0, [r7, #8]
 800d04c:	f00a fc66 	bl	801791c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d050:	bf00      	nop
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08019b9c 	.word	0x08019b9c
 800d05c:	08019c4c 	.word	0x08019c4c
 800d060:	08019bf0 	.word	0x08019bf0

0800d064 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	6039      	str	r1, [r7, #0]
 800d06e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d070:	79fb      	ldrb	r3, [r7, #7]
 800d072:	2b0c      	cmp	r3, #12
 800d074:	d907      	bls.n	800d086 <memp_free+0x22>
 800d076:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <memp_free+0x44>)
 800d078:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d07c:	490b      	ldr	r1, [pc, #44]	; (800d0ac <memp_free+0x48>)
 800d07e:	480c      	ldr	r0, [pc, #48]	; (800d0b0 <memp_free+0x4c>)
 800d080:	f00a fca4 	bl	80179cc <iprintf>
 800d084:	e00c      	b.n	800d0a0 <memp_free+0x3c>

  if (mem == NULL) {
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d008      	beq.n	800d09e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d08c:	79fb      	ldrb	r3, [r7, #7]
 800d08e:	4a09      	ldr	r2, [pc, #36]	; (800d0b4 <memp_free+0x50>)
 800d090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff ffb8 	bl	800d00c <do_memp_free_pool>
 800d09c:	e000      	b.n	800d0a0 <memp_free+0x3c>
    return;
 800d09e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d0a0:	3708      	adds	r7, #8
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	08019b9c 	.word	0x08019b9c
 800d0ac:	08019c6c 	.word	0x08019c6c
 800d0b0:	08019bf0 	.word	0x08019bf0
 800d0b4:	0801c418 	.word	0x0801c418

0800d0b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d0bc:	bf00      	nop
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
 800d0d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d108      	bne.n	800d0ee <netif_add+0x26>
 800d0dc:	4b57      	ldr	r3, [pc, #348]	; (800d23c <netif_add+0x174>)
 800d0de:	f240 1227 	movw	r2, #295	; 0x127
 800d0e2:	4957      	ldr	r1, [pc, #348]	; (800d240 <netif_add+0x178>)
 800d0e4:	4857      	ldr	r0, [pc, #348]	; (800d244 <netif_add+0x17c>)
 800d0e6:	f00a fc71 	bl	80179cc <iprintf>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e0a2      	b.n	800d234 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d108      	bne.n	800d106 <netif_add+0x3e>
 800d0f4:	4b51      	ldr	r3, [pc, #324]	; (800d23c <netif_add+0x174>)
 800d0f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d0fa:	4953      	ldr	r1, [pc, #332]	; (800d248 <netif_add+0x180>)
 800d0fc:	4851      	ldr	r0, [pc, #324]	; (800d244 <netif_add+0x17c>)
 800d0fe:	f00a fc65 	bl	80179cc <iprintf>
 800d102:	2300      	movs	r3, #0
 800d104:	e096      	b.n	800d234 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d10c:	4b4f      	ldr	r3, [pc, #316]	; (800d24c <netif_add+0x184>)
 800d10e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d101      	bne.n	800d11a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d116:	4b4d      	ldr	r3, [pc, #308]	; (800d24c <netif_add+0x184>)
 800d118:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d101      	bne.n	800d124 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d120:	4b4a      	ldr	r3, [pc, #296]	; (800d24c <netif_add+0x184>)
 800d122:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	4a45      	ldr	r2, [pc, #276]	; (800d250 <netif_add+0x188>)
 800d13a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	6a3a      	ldr	r2, [r7, #32]
 800d154:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d156:	4b3f      	ldr	r3, [pc, #252]	; (800d254 <netif_add+0x18c>)
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d164:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	68b9      	ldr	r1, [r7, #8]
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 f913 	bl	800d398 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	4798      	blx	r3
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d001      	beq.n	800d182 <netif_add+0xba>
    return NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	e058      	b.n	800d234 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d188:	2bff      	cmp	r3, #255	; 0xff
 800d18a:	d103      	bne.n	800d194 <netif_add+0xcc>
        netif->num = 0;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2200      	movs	r2, #0
 800d190:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d198:	4b2f      	ldr	r3, [pc, #188]	; (800d258 <netif_add+0x190>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e02b      	b.n	800d1f8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d106      	bne.n	800d1b6 <netif_add+0xee>
 800d1a8:	4b24      	ldr	r3, [pc, #144]	; (800d23c <netif_add+0x174>)
 800d1aa:	f240 128b 	movw	r2, #395	; 0x18b
 800d1ae:	492b      	ldr	r1, [pc, #172]	; (800d25c <netif_add+0x194>)
 800d1b0:	4824      	ldr	r0, [pc, #144]	; (800d244 <netif_add+0x17c>)
 800d1b2:	f00a fc0b 	bl	80179cc <iprintf>
        num_netifs++;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	dd06      	ble.n	800d1d0 <netif_add+0x108>
 800d1c2:	4b1e      	ldr	r3, [pc, #120]	; (800d23c <netif_add+0x174>)
 800d1c4:	f240 128d 	movw	r2, #397	; 0x18d
 800d1c8:	4925      	ldr	r1, [pc, #148]	; (800d260 <netif_add+0x198>)
 800d1ca:	481e      	ldr	r0, [pc, #120]	; (800d244 <netif_add+0x17c>)
 800d1cc:	f00a fbfe 	bl	80179cc <iprintf>
        if (netif2->num == netif->num) {
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d108      	bne.n	800d1f2 <netif_add+0x12a>
          netif->num++;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d1f0:	e005      	b.n	800d1fe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1d0      	bne.n	800d1a0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1be      	bne.n	800d182 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d20a:	2bfe      	cmp	r3, #254	; 0xfe
 800d20c:	d103      	bne.n	800d216 <netif_add+0x14e>
    netif_num = 0;
 800d20e:	4b11      	ldr	r3, [pc, #68]	; (800d254 <netif_add+0x18c>)
 800d210:	2200      	movs	r2, #0
 800d212:	701a      	strb	r2, [r3, #0]
 800d214:	e006      	b.n	800d224 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d21c:	3301      	adds	r3, #1
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	4b0c      	ldr	r3, [pc, #48]	; (800d254 <netif_add+0x18c>)
 800d222:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <netif_add+0x190>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d22c:	4a0a      	ldr	r2, [pc, #40]	; (800d258 <netif_add+0x190>)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d232:	68fb      	ldr	r3, [r7, #12]
}
 800d234:	4618      	mov	r0, r3
 800d236:	3718      	adds	r7, #24
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	08019c88 	.word	0x08019c88
 800d240:	08019d1c 	.word	0x08019d1c
 800d244:	08019cd8 	.word	0x08019cd8
 800d248:	08019d38 	.word	0x08019d38
 800d24c:	0801c48c 	.word	0x0801c48c
 800d250:	0800d673 	.word	0x0800d673
 800d254:	20004a00 	.word	0x20004a00
 800d258:	2000b8e8 	.word	0x2000b8e8
 800d25c:	08019d5c 	.word	0x08019d5c
 800d260:	08019d70 	.word	0x08019d70

0800d264 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f002 fe4f 	bl	800ff14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f007 fcfd 	bl	8014c78 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d27e:	bf00      	nop
 800d280:	3708      	adds	r7, #8
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
	...

0800d288 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	60f8      	str	r0, [r7, #12]
 800d290:	60b9      	str	r1, [r7, #8]
 800d292:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <netif_do_set_ipaddr+0x20>
 800d29a:	4b1d      	ldr	r3, [pc, #116]	; (800d310 <netif_do_set_ipaddr+0x88>)
 800d29c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d2a0:	491c      	ldr	r1, [pc, #112]	; (800d314 <netif_do_set_ipaddr+0x8c>)
 800d2a2:	481d      	ldr	r0, [pc, #116]	; (800d318 <netif_do_set_ipaddr+0x90>)
 800d2a4:	f00a fb92 	bl	80179cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d106      	bne.n	800d2bc <netif_do_set_ipaddr+0x34>
 800d2ae:	4b18      	ldr	r3, [pc, #96]	; (800d310 <netif_do_set_ipaddr+0x88>)
 800d2b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d2b4:	4917      	ldr	r1, [pc, #92]	; (800d314 <netif_do_set_ipaddr+0x8c>)
 800d2b6:	4818      	ldr	r0, [pc, #96]	; (800d318 <netif_do_set_ipaddr+0x90>)
 800d2b8:	f00a fb88 	bl	80179cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d01c      	beq.n	800d304 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	681a      	ldr	r2, [r3, #0]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d2da:	f107 0314 	add.w	r3, r7, #20
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff ffbf 	bl	800d264 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <netif_do_set_ipaddr+0x6a>
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	e000      	b.n	800d2f4 <netif_do_set_ipaddr+0x6c>
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d2f8:	2101      	movs	r1, #1
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 f8d2 	bl	800d4a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	08019c88 	.word	0x08019c88
 800d314:	08019da0 	.word	0x08019da0
 800d318:	08019cd8 	.word	0x08019cd8

0800d31c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	3308      	adds	r3, #8
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	429a      	cmp	r2, r3
 800d334:	d00a      	beq.n	800d34c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d002      	beq.n	800d342 <netif_do_set_netmask+0x26>
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	e000      	b.n	800d344 <netif_do_set_netmask+0x28>
 800d342:	2300      	movs	r3, #0
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d348:	2301      	movs	r3, #1
 800d34a:	e000      	b.n	800d34e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3714      	adds	r7, #20
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d35a:	b480      	push	{r7}
 800d35c:	b085      	sub	sp, #20
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	330c      	adds	r3, #12
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	429a      	cmp	r2, r3
 800d372:	d00a      	beq.n	800d38a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <netif_do_set_gw+0x26>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	e000      	b.n	800d382 <netif_do_set_gw+0x28>
 800d380:	2300      	movs	r3, #0
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d386:	2301      	movs	r3, #1
 800d388:	e000      	b.n	800d38c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3714      	adds	r7, #20
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	60b9      	str	r1, [r7, #8]
 800d3a2:	607a      	str	r2, [r7, #4]
 800d3a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <netif_set_addr+0x90>)
 800d3b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d101      	bne.n	800d3c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d3be:	4b1a      	ldr	r3, [pc, #104]	; (800d428 <netif_set_addr+0x90>)
 800d3c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d101      	bne.n	800d3cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d3c8:	4b17      	ldr	r3, [pc, #92]	; (800d428 <netif_set_addr+0x90>)
 800d3ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d003      	beq.n	800d3da <netif_set_addr+0x42>
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <netif_set_addr+0x46>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e000      	b.n	800d3e0 <netif_set_addr+0x48>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d006      	beq.n	800d3f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d3e8:	f107 0310 	add.w	r3, r7, #16
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	68b9      	ldr	r1, [r7, #8]
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f7ff ff49 	bl	800d288 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d3f6:	69fa      	ldr	r2, [r7, #28]
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7ff ff8e 	bl	800d31c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d400:	69ba      	ldr	r2, [r7, #24]
 800d402:	6839      	ldr	r1, [r7, #0]
 800d404:	68f8      	ldr	r0, [r7, #12]
 800d406:	f7ff ffa8 	bl	800d35a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d410:	f107 0310 	add.w	r3, r7, #16
 800d414:	461a      	mov	r2, r3
 800d416:	68b9      	ldr	r1, [r7, #8]
 800d418:	68f8      	ldr	r0, [r7, #12]
 800d41a:	f7ff ff35 	bl	800d288 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d41e:	bf00      	nop
 800d420:	3720      	adds	r7, #32
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	0801c48c 	.word	0x0801c48c

0800d42c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d434:	4a04      	ldr	r2, [pc, #16]	; (800d448 <netif_set_default+0x1c>)
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d43a:	bf00      	nop
 800d43c:	370c      	adds	r7, #12
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	2000b8ec 	.word	0x2000b8ec

0800d44c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d107      	bne.n	800d46a <netif_set_up+0x1e>
 800d45a:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <netif_set_up+0x4c>)
 800d45c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d460:	490e      	ldr	r1, [pc, #56]	; (800d49c <netif_set_up+0x50>)
 800d462:	480f      	ldr	r0, [pc, #60]	; (800d4a0 <netif_set_up+0x54>)
 800d464:	f00a fab2 	bl	80179cc <iprintf>
 800d468:	e013      	b.n	800d492 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b00      	cmp	r3, #0
 800d476:	d10c      	bne.n	800d492 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	b2da      	uxtb	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d48a:	2103      	movs	r1, #3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f809 	bl	800d4a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	08019c88 	.word	0x08019c88
 800d49c:	08019e10 	.word	0x08019e10
 800d4a0:	08019cd8 	.word	0x08019cd8

0800d4a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d106      	bne.n	800d4c4 <netif_issue_reports+0x20>
 800d4b6:	4b18      	ldr	r3, [pc, #96]	; (800d518 <netif_issue_reports+0x74>)
 800d4b8:	f240 326d 	movw	r2, #877	; 0x36d
 800d4bc:	4917      	ldr	r1, [pc, #92]	; (800d51c <netif_issue_reports+0x78>)
 800d4be:	4818      	ldr	r0, [pc, #96]	; (800d520 <netif_issue_reports+0x7c>)
 800d4c0:	f00a fa84 	bl	80179cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4ca:	f003 0304 	and.w	r3, r3, #4
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d01e      	beq.n	800d510 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d017      	beq.n	800d510 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4e0:	78fb      	ldrb	r3, [r7, #3]
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d013      	beq.n	800d512 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d00e      	beq.n	800d512 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4fa:	f003 0308 	and.w	r3, r3, #8
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d007      	beq.n	800d512 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	3304      	adds	r3, #4
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f008 fb1f 	bl	8015b4c <etharp_request>
 800d50e:	e000      	b.n	800d512 <netif_issue_reports+0x6e>
    return;
 800d510:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	08019c88 	.word	0x08019c88
 800d51c:	08019e2c 	.word	0x08019e2c
 800d520:	08019cd8 	.word	0x08019cd8

0800d524 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b082      	sub	sp, #8
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d107      	bne.n	800d542 <netif_set_down+0x1e>
 800d532:	4b12      	ldr	r3, [pc, #72]	; (800d57c <netif_set_down+0x58>)
 800d534:	f240 329b 	movw	r2, #923	; 0x39b
 800d538:	4911      	ldr	r1, [pc, #68]	; (800d580 <netif_set_down+0x5c>)
 800d53a:	4812      	ldr	r0, [pc, #72]	; (800d584 <netif_set_down+0x60>)
 800d53c:	f00a fa46 	bl	80179cc <iprintf>
 800d540:	e019      	b.n	800d576 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d548:	f003 0301 	and.w	r3, r3, #1
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d012      	beq.n	800d576 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d556:	f023 0301 	bic.w	r3, r3, #1
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d568:	f003 0308 	and.w	r3, r3, #8
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f007 fea9 	bl	80152c8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}
 800d57c:	08019c88 	.word	0x08019c88
 800d580:	08019e50 	.word	0x08019e50
 800d584:	08019cd8 	.word	0x08019cd8

0800d588 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b082      	sub	sp, #8
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d107      	bne.n	800d5a6 <netif_set_link_up+0x1e>
 800d596:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <netif_set_link_up+0x5c>)
 800d598:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d59c:	4912      	ldr	r1, [pc, #72]	; (800d5e8 <netif_set_link_up+0x60>)
 800d59e:	4813      	ldr	r0, [pc, #76]	; (800d5ec <netif_set_link_up+0x64>)
 800d5a0:	f00a fa14 	bl	80179cc <iprintf>
 800d5a4:	e01b      	b.n	800d5de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ac:	f003 0304 	and.w	r3, r3, #4
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d114      	bne.n	800d5de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5ba:	f043 0304 	orr.w	r3, r3, #4
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d5c6:	2103      	movs	r1, #3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7ff ff6b 	bl	800d4a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	69db      	ldr	r3, [r3, #28]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <netif_set_link_up+0x56>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	69db      	ldr	r3, [r3, #28]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	08019c88 	.word	0x08019c88
 800d5e8:	08019e70 	.word	0x08019e70
 800d5ec:	08019cd8 	.word	0x08019cd8

0800d5f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d107      	bne.n	800d60e <netif_set_link_down+0x1e>
 800d5fe:	4b11      	ldr	r3, [pc, #68]	; (800d644 <netif_set_link_down+0x54>)
 800d600:	f240 4206 	movw	r2, #1030	; 0x406
 800d604:	4910      	ldr	r1, [pc, #64]	; (800d648 <netif_set_link_down+0x58>)
 800d606:	4811      	ldr	r0, [pc, #68]	; (800d64c <netif_set_link_down+0x5c>)
 800d608:	f00a f9e0 	bl	80179cc <iprintf>
 800d60c:	e017      	b.n	800d63e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d614:	f003 0304 	and.w	r3, r3, #4
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d010      	beq.n	800d63e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d622:	f023 0304 	bic.w	r3, r3, #4
 800d626:	b2da      	uxtb	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	69db      	ldr	r3, [r3, #28]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <netif_set_link_down+0x4e>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	69db      	ldr	r3, [r3, #28]
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	08019c88 	.word	0x08019c88
 800d648:	08019e94 	.word	0x08019e94
 800d64c:	08019cd8 	.word	0x08019cd8

0800d650 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	61da      	str	r2, [r3, #28]
  }
}
 800d666:	bf00      	nop
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d672:	b480      	push	{r7}
 800d674:	b085      	sub	sp, #20
 800d676:	af00      	add	r7, sp, #0
 800d678:	60f8      	str	r0, [r7, #12]
 800d67a:	60b9      	str	r1, [r7, #8]
 800d67c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d67e:	f06f 030b 	mvn.w	r3, #11
}
 800d682:	4618      	mov	r0, r3
 800d684:	3714      	adds	r7, #20
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
	...

0800d690 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	4603      	mov	r3, r0
 800d698:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d013      	beq.n	800d6c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d6a0:	4b0d      	ldr	r3, [pc, #52]	; (800d6d8 <netif_get_by_index+0x48>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e00c      	b.n	800d6c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	79fa      	ldrb	r2, [r7, #7]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d101      	bne.n	800d6bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	e006      	b.n	800d6ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1ef      	bne.n	800d6a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	2000b8e8 	.word	0x2000b8e8

0800d6dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d6e2:	f00a f90d 	bl	8017900 <sys_arch_protect>
 800d6e6:	6038      	str	r0, [r7, #0]
 800d6e8:	4b0d      	ldr	r3, [pc, #52]	; (800d720 <pbuf_free_ooseq+0x44>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	701a      	strb	r2, [r3, #0]
 800d6ee:	6838      	ldr	r0, [r7, #0]
 800d6f0:	f00a f914 	bl	801791c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d6f4:	4b0b      	ldr	r3, [pc, #44]	; (800d724 <pbuf_free_ooseq+0x48>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	607b      	str	r3, [r7, #4]
 800d6fa:	e00a      	b.n	800d712 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d700:	2b00      	cmp	r3, #0
 800d702:	d003      	beq.n	800d70c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f002 fc43 	bl	800ff90 <tcp_free_ooseq>
      return;
 800d70a:	e005      	b.n	800d718 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	607b      	str	r3, [r7, #4]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1f1      	bne.n	800d6fc <pbuf_free_ooseq+0x20>
    }
  }
}
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	2000b8f0 	.word	0x2000b8f0
 800d724:	2000b8f8 	.word	0x2000b8f8

0800d728 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d730:	f7ff ffd4 	bl	800d6dc <pbuf_free_ooseq>
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d742:	f00a f8dd 	bl	8017900 <sys_arch_protect>
 800d746:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d748:	4b0f      	ldr	r3, [pc, #60]	; (800d788 <pbuf_pool_is_empty+0x4c>)
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <pbuf_pool_is_empty+0x4c>)
 800d750:	2201      	movs	r2, #1
 800d752:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f00a f8e1 	bl	801791c <sys_arch_unprotect>

  if (!queued) {
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10f      	bne.n	800d780 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d760:	2100      	movs	r1, #0
 800d762:	480a      	ldr	r0, [pc, #40]	; (800d78c <pbuf_pool_is_empty+0x50>)
 800d764:	f7fe fed6 	bl	800c514 <tcpip_try_callback>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d008      	beq.n	800d780 <pbuf_pool_is_empty+0x44>
 800d76e:	f00a f8c7 	bl	8017900 <sys_arch_protect>
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	4b04      	ldr	r3, [pc, #16]	; (800d788 <pbuf_pool_is_empty+0x4c>)
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f00a f8ce 	bl	801791c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d780:	bf00      	nop
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	2000b8f0 	.word	0x2000b8f0
 800d78c:	0800d729 	.word	0x0800d729

0800d790 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	4611      	mov	r1, r2
 800d79c:	461a      	mov	r2, r3
 800d79e:	460b      	mov	r3, r1
 800d7a0:	80fb      	strh	r3, [r7, #6]
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	68ba      	ldr	r2, [r7, #8]
 800d7b0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	88fa      	ldrh	r2, [r7, #6]
 800d7b6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	88ba      	ldrh	r2, [r7, #4]
 800d7bc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d7be:	8b3b      	ldrh	r3, [r7, #24]
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	7f3a      	ldrb	r2, [r7, #28]
 800d7ca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	73da      	strb	r2, [r3, #15]
}
 800d7d8:	bf00      	nop
 800d7da:	3714      	adds	r7, #20
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b08c      	sub	sp, #48	; 0x30
 800d7e8:	af02      	add	r7, sp, #8
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	80bb      	strh	r3, [r7, #4]
 800d7f2:	4613      	mov	r3, r2
 800d7f4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d7f6:	79fb      	ldrb	r3, [r7, #7]
 800d7f8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d7fa:	887b      	ldrh	r3, [r7, #2]
 800d7fc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d800:	d07f      	beq.n	800d902 <pbuf_alloc+0x11e>
 800d802:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d806:	f300 80c8 	bgt.w	800d99a <pbuf_alloc+0x1b6>
 800d80a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d80e:	d010      	beq.n	800d832 <pbuf_alloc+0x4e>
 800d810:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d814:	f300 80c1 	bgt.w	800d99a <pbuf_alloc+0x1b6>
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d002      	beq.n	800d822 <pbuf_alloc+0x3e>
 800d81c:	2b41      	cmp	r3, #65	; 0x41
 800d81e:	f040 80bc 	bne.w	800d99a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d822:	887a      	ldrh	r2, [r7, #2]
 800d824:	88bb      	ldrh	r3, [r7, #4]
 800d826:	4619      	mov	r1, r3
 800d828:	2000      	movs	r0, #0
 800d82a:	f000 f8d1 	bl	800d9d0 <pbuf_alloc_reference>
 800d82e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d830:	e0bd      	b.n	800d9ae <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d836:	2300      	movs	r3, #0
 800d838:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d83a:	88bb      	ldrh	r3, [r7, #4]
 800d83c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d83e:	200c      	movs	r0, #12
 800d840:	f7ff fbbe 	bl	800cfc0 <memp_malloc>
 800d844:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d109      	bne.n	800d860 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d84c:	f7ff ff76 	bl	800d73c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	2b00      	cmp	r3, #0
 800d854:	d002      	beq.n	800d85c <pbuf_alloc+0x78>
            pbuf_free(p);
 800d856:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d858:	f000 faa8 	bl	800ddac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d85c:	2300      	movs	r3, #0
 800d85e:	e0a7      	b.n	800d9b0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d862:	3303      	adds	r3, #3
 800d864:	b29b      	uxth	r3, r3
 800d866:	f023 0303 	bic.w	r3, r3, #3
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d870:	b29b      	uxth	r3, r3
 800d872:	8b7a      	ldrh	r2, [r7, #26]
 800d874:	4293      	cmp	r3, r2
 800d876:	bf28      	it	cs
 800d878:	4613      	movcs	r3, r2
 800d87a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d87c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d87e:	3310      	adds	r3, #16
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	4413      	add	r3, r2
 800d884:	3303      	adds	r3, #3
 800d886:	f023 0303 	bic.w	r3, r3, #3
 800d88a:	4618      	mov	r0, r3
 800d88c:	89f9      	ldrh	r1, [r7, #14]
 800d88e:	8b7a      	ldrh	r2, [r7, #26]
 800d890:	2300      	movs	r3, #0
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	887b      	ldrh	r3, [r7, #2]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	460b      	mov	r3, r1
 800d89a:	4601      	mov	r1, r0
 800d89c:	6938      	ldr	r0, [r7, #16]
 800d89e:	f7ff ff77 	bl	800d790 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	f003 0303 	and.w	r3, r3, #3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d006      	beq.n	800d8bc <pbuf_alloc+0xd8>
 800d8ae:	4b42      	ldr	r3, [pc, #264]	; (800d9b8 <pbuf_alloc+0x1d4>)
 800d8b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8b4:	4941      	ldr	r1, [pc, #260]	; (800d9bc <pbuf_alloc+0x1d8>)
 800d8b6:	4842      	ldr	r0, [pc, #264]	; (800d9c0 <pbuf_alloc+0x1dc>)
 800d8b8:	f00a f888 	bl	80179cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d8bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8be:	3303      	adds	r3, #3
 800d8c0:	f023 0303 	bic.w	r3, r3, #3
 800d8c4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d8c8:	d106      	bne.n	800d8d8 <pbuf_alloc+0xf4>
 800d8ca:	4b3b      	ldr	r3, [pc, #236]	; (800d9b8 <pbuf_alloc+0x1d4>)
 800d8cc:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d8d0:	493c      	ldr	r1, [pc, #240]	; (800d9c4 <pbuf_alloc+0x1e0>)
 800d8d2:	483b      	ldr	r0, [pc, #236]	; (800d9c0 <pbuf_alloc+0x1dc>)
 800d8d4:	f00a f87a 	bl	80179cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d102      	bne.n	800d8e4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800d8e2:	e002      	b.n	800d8ea <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	693a      	ldr	r2, [r7, #16]
 800d8e8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d8ee:	8b7a      	ldrh	r2, [r7, #26]
 800d8f0:	89fb      	ldrh	r3, [r7, #14]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d8fa:	8b7b      	ldrh	r3, [r7, #26]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d19e      	bne.n	800d83e <pbuf_alloc+0x5a>
      break;
 800d900:	e055      	b.n	800d9ae <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d904:	3303      	adds	r3, #3
 800d906:	b29b      	uxth	r3, r3
 800d908:	f023 0303 	bic.w	r3, r3, #3
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	88bb      	ldrh	r3, [r7, #4]
 800d910:	3303      	adds	r3, #3
 800d912:	b29b      	uxth	r3, r3
 800d914:	f023 0303 	bic.w	r3, r3, #3
 800d918:	b29b      	uxth	r3, r3
 800d91a:	4413      	add	r3, r2
 800d91c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d91e:	8b3b      	ldrh	r3, [r7, #24]
 800d920:	3310      	adds	r3, #16
 800d922:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d924:	8b3a      	ldrh	r2, [r7, #24]
 800d926:	88bb      	ldrh	r3, [r7, #4]
 800d928:	3303      	adds	r3, #3
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	429a      	cmp	r2, r3
 800d930:	d306      	bcc.n	800d940 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d932:	8afa      	ldrh	r2, [r7, #22]
 800d934:	88bb      	ldrh	r3, [r7, #4]
 800d936:	3303      	adds	r3, #3
 800d938:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d201      	bcs.n	800d944 <pbuf_alloc+0x160>
        return NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	e035      	b.n	800d9b0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d944:	8afb      	ldrh	r3, [r7, #22]
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff f9b8 	bl	800ccbc <mem_malloc>
 800d94c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d950:	2b00      	cmp	r3, #0
 800d952:	d101      	bne.n	800d958 <pbuf_alloc+0x174>
        return NULL;
 800d954:	2300      	movs	r3, #0
 800d956:	e02b      	b.n	800d9b0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d95a:	3310      	adds	r3, #16
 800d95c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d95e:	4413      	add	r3, r2
 800d960:	3303      	adds	r3, #3
 800d962:	f023 0303 	bic.w	r3, r3, #3
 800d966:	4618      	mov	r0, r3
 800d968:	88b9      	ldrh	r1, [r7, #4]
 800d96a:	88ba      	ldrh	r2, [r7, #4]
 800d96c:	2300      	movs	r3, #0
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	887b      	ldrh	r3, [r7, #2]
 800d972:	9300      	str	r3, [sp, #0]
 800d974:	460b      	mov	r3, r1
 800d976:	4601      	mov	r1, r0
 800d978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d97a:	f7ff ff09 	bl	800d790 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	f003 0303 	and.w	r3, r3, #3
 800d986:	2b00      	cmp	r3, #0
 800d988:	d010      	beq.n	800d9ac <pbuf_alloc+0x1c8>
 800d98a:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <pbuf_alloc+0x1d4>)
 800d98c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d990:	490d      	ldr	r1, [pc, #52]	; (800d9c8 <pbuf_alloc+0x1e4>)
 800d992:	480b      	ldr	r0, [pc, #44]	; (800d9c0 <pbuf_alloc+0x1dc>)
 800d994:	f00a f81a 	bl	80179cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d998:	e008      	b.n	800d9ac <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d99a:	4b07      	ldr	r3, [pc, #28]	; (800d9b8 <pbuf_alloc+0x1d4>)
 800d99c:	f240 1227 	movw	r2, #295	; 0x127
 800d9a0:	490a      	ldr	r1, [pc, #40]	; (800d9cc <pbuf_alloc+0x1e8>)
 800d9a2:	4807      	ldr	r0, [pc, #28]	; (800d9c0 <pbuf_alloc+0x1dc>)
 800d9a4:	f00a f812 	bl	80179cc <iprintf>
      return NULL;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e001      	b.n	800d9b0 <pbuf_alloc+0x1cc>
      break;
 800d9ac:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3728      	adds	r7, #40	; 0x28
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	08019eb8 	.word	0x08019eb8
 800d9bc:	08019ee8 	.word	0x08019ee8
 800d9c0:	08019f18 	.word	0x08019f18
 800d9c4:	08019f40 	.word	0x08019f40
 800d9c8:	08019f74 	.word	0x08019f74
 800d9cc:	08019fa0 	.word	0x08019fa0

0800d9d0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b086      	sub	sp, #24
 800d9d4:	af02      	add	r7, sp, #8
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	460b      	mov	r3, r1
 800d9da:	807b      	strh	r3, [r7, #2]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d9e0:	883b      	ldrh	r3, [r7, #0]
 800d9e2:	2b41      	cmp	r3, #65	; 0x41
 800d9e4:	d009      	beq.n	800d9fa <pbuf_alloc_reference+0x2a>
 800d9e6:	883b      	ldrh	r3, [r7, #0]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d006      	beq.n	800d9fa <pbuf_alloc_reference+0x2a>
 800d9ec:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <pbuf_alloc_reference+0x5c>)
 800d9ee:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d9f2:	490f      	ldr	r1, [pc, #60]	; (800da30 <pbuf_alloc_reference+0x60>)
 800d9f4:	480f      	ldr	r0, [pc, #60]	; (800da34 <pbuf_alloc_reference+0x64>)
 800d9f6:	f009 ffe9 	bl	80179cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d9fa:	200b      	movs	r0, #11
 800d9fc:	f7ff fae0 	bl	800cfc0 <memp_malloc>
 800da00:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d101      	bne.n	800da0c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800da08:	2300      	movs	r3, #0
 800da0a:	e00b      	b.n	800da24 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800da0c:	8879      	ldrh	r1, [r7, #2]
 800da0e:	887a      	ldrh	r2, [r7, #2]
 800da10:	2300      	movs	r3, #0
 800da12:	9301      	str	r3, [sp, #4]
 800da14:	883b      	ldrh	r3, [r7, #0]
 800da16:	9300      	str	r3, [sp, #0]
 800da18:	460b      	mov	r3, r1
 800da1a:	6879      	ldr	r1, [r7, #4]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff feb7 	bl	800d790 <pbuf_init_alloced_pbuf>
  return p;
 800da22:	68fb      	ldr	r3, [r7, #12]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	08019eb8 	.word	0x08019eb8
 800da30:	08019fbc 	.word	0x08019fbc
 800da34:	08019f18 	.word	0x08019f18

0800da38 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	607b      	str	r3, [r7, #4]
 800da40:	4603      	mov	r3, r0
 800da42:	73fb      	strb	r3, [r7, #15]
 800da44:	460b      	mov	r3, r1
 800da46:	81bb      	strh	r3, [r7, #12]
 800da48:	4613      	mov	r3, r2
 800da4a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
 800da4e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800da50:	8a7b      	ldrh	r3, [r7, #18]
 800da52:	3303      	adds	r3, #3
 800da54:	f023 0203 	bic.w	r2, r3, #3
 800da58:	89bb      	ldrh	r3, [r7, #12]
 800da5a:	441a      	add	r2, r3
 800da5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da5e:	429a      	cmp	r2, r3
 800da60:	d901      	bls.n	800da66 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	e018      	b.n	800da98 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d007      	beq.n	800da7c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800da6c:	8a7b      	ldrh	r3, [r7, #18]
 800da6e:	3303      	adds	r3, #3
 800da70:	f023 0303 	bic.w	r3, r3, #3
 800da74:	6a3a      	ldr	r2, [r7, #32]
 800da76:	4413      	add	r3, r2
 800da78:	617b      	str	r3, [r7, #20]
 800da7a:	e001      	b.n	800da80 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800da7c:	2300      	movs	r3, #0
 800da7e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	89b9      	ldrh	r1, [r7, #12]
 800da84:	89ba      	ldrh	r2, [r7, #12]
 800da86:	2302      	movs	r3, #2
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	897b      	ldrh	r3, [r7, #10]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	460b      	mov	r3, r1
 800da90:	6979      	ldr	r1, [r7, #20]
 800da92:	f7ff fe7d 	bl	800d790 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800da96:	687b      	ldr	r3, [r7, #4]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d106      	bne.n	800dac0 <pbuf_realloc+0x20>
 800dab2:	4b3a      	ldr	r3, [pc, #232]	; (800db9c <pbuf_realloc+0xfc>)
 800dab4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dab8:	4939      	ldr	r1, [pc, #228]	; (800dba0 <pbuf_realloc+0x100>)
 800daba:	483a      	ldr	r0, [pc, #232]	; (800dba4 <pbuf_realloc+0x104>)
 800dabc:	f009 ff86 	bl	80179cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	891b      	ldrh	r3, [r3, #8]
 800dac4:	887a      	ldrh	r2, [r7, #2]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d263      	bcs.n	800db92 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	891a      	ldrh	r2, [r3, #8]
 800dace:	887b      	ldrh	r3, [r7, #2]
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dad4:	887b      	ldrh	r3, [r7, #2]
 800dad6:	817b      	strh	r3, [r7, #10]
  q = p;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dadc:	e018      	b.n	800db10 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	895b      	ldrh	r3, [r3, #10]
 800dae2:	897a      	ldrh	r2, [r7, #10]
 800dae4:	1ad3      	subs	r3, r2, r3
 800dae6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	891a      	ldrh	r2, [r3, #8]
 800daec:	893b      	ldrh	r3, [r7, #8]
 800daee:	1ad3      	subs	r3, r2, r3
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d106      	bne.n	800db10 <pbuf_realloc+0x70>
 800db02:	4b26      	ldr	r3, [pc, #152]	; (800db9c <pbuf_realloc+0xfc>)
 800db04:	f240 12af 	movw	r2, #431	; 0x1af
 800db08:	4927      	ldr	r1, [pc, #156]	; (800dba8 <pbuf_realloc+0x108>)
 800db0a:	4826      	ldr	r0, [pc, #152]	; (800dba4 <pbuf_realloc+0x104>)
 800db0c:	f009 ff5e 	bl	80179cc <iprintf>
  while (rem_len > q->len) {
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	895b      	ldrh	r3, [r3, #10]
 800db14:	897a      	ldrh	r2, [r7, #10]
 800db16:	429a      	cmp	r2, r3
 800db18:	d8e1      	bhi.n	800dade <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	7b1b      	ldrb	r3, [r3, #12]
 800db1e:	f003 030f 	and.w	r3, r3, #15
 800db22:	2b00      	cmp	r3, #0
 800db24:	d121      	bne.n	800db6a <pbuf_realloc+0xca>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	895b      	ldrh	r3, [r3, #10]
 800db2a:	897a      	ldrh	r2, [r7, #10]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d01c      	beq.n	800db6a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	7b5b      	ldrb	r3, [r3, #13]
 800db34:	f003 0302 	and.w	r3, r3, #2
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d116      	bne.n	800db6a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	b29a      	uxth	r2, r3
 800db46:	897b      	ldrh	r3, [r7, #10]
 800db48:	4413      	add	r3, r2
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	4619      	mov	r1, r3
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe ffaa 	bl	800caa8 <mem_trim>
 800db54:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <pbuf_realloc+0xca>
 800db5c:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <pbuf_realloc+0xfc>)
 800db5e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800db62:	4912      	ldr	r1, [pc, #72]	; (800dbac <pbuf_realloc+0x10c>)
 800db64:	480f      	ldr	r0, [pc, #60]	; (800dba4 <pbuf_realloc+0x104>)
 800db66:	f009 ff31 	bl	80179cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	897a      	ldrh	r2, [r7, #10]
 800db6e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	895a      	ldrh	r2, [r3, #10]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4618      	mov	r0, r3
 800db86:	f000 f911 	bl	800ddac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	601a      	str	r2, [r3, #0]
 800db90:	e000      	b.n	800db94 <pbuf_realloc+0xf4>
    return;
 800db92:	bf00      	nop

}
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	08019eb8 	.word	0x08019eb8
 800dba0:	08019fd0 	.word	0x08019fd0
 800dba4:	08019f18 	.word	0x08019f18
 800dba8:	08019fe8 	.word	0x08019fe8
 800dbac:	0801a000 	.word	0x0801a000

0800dbb0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	4613      	mov	r3, r2
 800dbbc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d106      	bne.n	800dbd2 <pbuf_add_header_impl+0x22>
 800dbc4:	4b2b      	ldr	r3, [pc, #172]	; (800dc74 <pbuf_add_header_impl+0xc4>)
 800dbc6:	f240 12df 	movw	r2, #479	; 0x1df
 800dbca:	492b      	ldr	r1, [pc, #172]	; (800dc78 <pbuf_add_header_impl+0xc8>)
 800dbcc:	482b      	ldr	r0, [pc, #172]	; (800dc7c <pbuf_add_header_impl+0xcc>)
 800dbce:	f009 fefd 	bl	80179cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <pbuf_add_header_impl+0x30>
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbde:	d301      	bcc.n	800dbe4 <pbuf_add_header_impl+0x34>
    return 1;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e043      	b.n	800dc6c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d101      	bne.n	800dbee <pbuf_add_header_impl+0x3e>
    return 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e03e      	b.n	800dc6c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	891a      	ldrh	r2, [r3, #8]
 800dbf6:	8a7b      	ldrh	r3, [r7, #18]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	8a7a      	ldrh	r2, [r7, #18]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d901      	bls.n	800dc06 <pbuf_add_header_impl+0x56>
    return 1;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e032      	b.n	800dc6c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	7b1b      	ldrb	r3, [r3, #12]
 800dc0a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dc0c:	8a3b      	ldrh	r3, [r7, #16]
 800dc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00c      	beq.n	800dc30 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	425b      	negs	r3, r3
 800dc1e:	4413      	add	r3, r2
 800dc20:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3310      	adds	r3, #16
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d20d      	bcs.n	800dc48 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e01d      	b.n	800dc6c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	685a      	ldr	r2, [r3, #4]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	425b      	negs	r3, r3
 800dc3e:	4413      	add	r3, r2
 800dc40:	617b      	str	r3, [r7, #20]
 800dc42:	e001      	b.n	800dc48 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc44:	2301      	movs	r3, #1
 800dc46:	e011      	b.n	800dc6c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	895a      	ldrh	r2, [r3, #10]
 800dc52:	8a7b      	ldrh	r3, [r7, #18]
 800dc54:	4413      	add	r3, r2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	891a      	ldrh	r2, [r3, #8]
 800dc60:	8a7b      	ldrh	r3, [r7, #18]
 800dc62:	4413      	add	r3, r2
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	811a      	strh	r2, [r3, #8]


  return 0;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	08019eb8 	.word	0x08019eb8
 800dc78:	0801a01c 	.word	0x0801a01c
 800dc7c:	08019f18 	.word	0x08019f18

0800dc80 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff ff8e 	bl	800dbb0 <pbuf_add_header_impl>
 800dc94:	4603      	mov	r3, r0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <pbuf_remove_header+0x1e>
 800dcb0:	4b20      	ldr	r3, [pc, #128]	; (800dd34 <pbuf_remove_header+0x94>)
 800dcb2:	f240 224b 	movw	r2, #587	; 0x24b
 800dcb6:	4920      	ldr	r1, [pc, #128]	; (800dd38 <pbuf_remove_header+0x98>)
 800dcb8:	4820      	ldr	r0, [pc, #128]	; (800dd3c <pbuf_remove_header+0x9c>)
 800dcba:	f009 fe87 	bl	80179cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d003      	beq.n	800dccc <pbuf_remove_header+0x2c>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dcca:	d301      	bcc.n	800dcd0 <pbuf_remove_header+0x30>
    return 1;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e02c      	b.n	800dd2a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <pbuf_remove_header+0x3a>
    return 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e027      	b.n	800dd2a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	895b      	ldrh	r3, [r3, #10]
 800dce2:	89fa      	ldrh	r2, [r7, #14]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d908      	bls.n	800dcfa <pbuf_remove_header+0x5a>
 800dce8:	4b12      	ldr	r3, [pc, #72]	; (800dd34 <pbuf_remove_header+0x94>)
 800dcea:	f240 2255 	movw	r2, #597	; 0x255
 800dcee:	4914      	ldr	r1, [pc, #80]	; (800dd40 <pbuf_remove_header+0xa0>)
 800dcf0:	4812      	ldr	r0, [pc, #72]	; (800dd3c <pbuf_remove_header+0x9c>)
 800dcf2:	f009 fe6b 	bl	80179cc <iprintf>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e017      	b.n	800dd2a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685a      	ldr	r2, [r3, #4]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	441a      	add	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	895a      	ldrh	r2, [r3, #10]
 800dd10:	89fb      	ldrh	r3, [r7, #14]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	b29a      	uxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	891a      	ldrh	r2, [r3, #8]
 800dd1e:	89fb      	ldrh	r3, [r7, #14]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	08019eb8 	.word	0x08019eb8
 800dd38:	0801a01c 	.word	0x0801a01c
 800dd3c:	08019f18 	.word	0x08019f18
 800dd40:	0801a028 	.word	0x0801a028

0800dd44 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	807b      	strh	r3, [r7, #2]
 800dd50:	4613      	mov	r3, r2
 800dd52:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dd54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	da08      	bge.n	800dd6e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dd5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd60:	425b      	negs	r3, r3
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff ff9b 	bl	800dca0 <pbuf_remove_header>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	e007      	b.n	800dd7e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dd6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd72:	787a      	ldrb	r2, [r7, #1]
 800dd74:	4619      	mov	r1, r3
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff1a 	bl	800dbb0 <pbuf_add_header_impl>
 800dd7c:	4603      	mov	r3, r0
  }
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}

0800dd86 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dd86:	b580      	push	{r7, lr}
 800dd88:	b082      	sub	sp, #8
 800dd8a:	af00      	add	r7, sp, #0
 800dd8c:	6078      	str	r0, [r7, #4]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dd92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dd96:	2201      	movs	r2, #1
 800dd98:	4619      	mov	r1, r3
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff ffd2 	bl	800dd44 <pbuf_header_impl>
 800dda0:	4603      	mov	r3, r0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d10b      	bne.n	800ddd2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <pbuf_free+0x22>
 800ddc0:	4b3b      	ldr	r3, [pc, #236]	; (800deb0 <pbuf_free+0x104>)
 800ddc2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ddc6:	493b      	ldr	r1, [pc, #236]	; (800deb4 <pbuf_free+0x108>)
 800ddc8:	483b      	ldr	r0, [pc, #236]	; (800deb8 <pbuf_free+0x10c>)
 800ddca:	f009 fdff 	bl	80179cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	e069      	b.n	800dea6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ddd6:	e062      	b.n	800de9e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ddd8:	f009 fd92 	bl	8017900 <sys_arch_protect>
 800dddc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	7b9b      	ldrb	r3, [r3, #14]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d106      	bne.n	800ddf4 <pbuf_free+0x48>
 800dde6:	4b32      	ldr	r3, [pc, #200]	; (800deb0 <pbuf_free+0x104>)
 800dde8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ddec:	4933      	ldr	r1, [pc, #204]	; (800debc <pbuf_free+0x110>)
 800ddee:	4832      	ldr	r0, [pc, #200]	; (800deb8 <pbuf_free+0x10c>)
 800ddf0:	f009 fdec 	bl	80179cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	7b9b      	ldrb	r3, [r3, #14]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	739a      	strb	r2, [r3, #14]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7b9b      	ldrb	r3, [r3, #14]
 800de04:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800de06:	69b8      	ldr	r0, [r7, #24]
 800de08:	f009 fd88 	bl	801791c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800de0c:	7dfb      	ldrb	r3, [r7, #23]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d143      	bne.n	800de9a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7b1b      	ldrb	r3, [r3, #12]
 800de1c:	f003 030f 	and.w	r3, r3, #15
 800de20:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	7b5b      	ldrb	r3, [r3, #13]
 800de26:	f003 0302 	and.w	r3, r3, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d011      	beq.n	800de52 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d106      	bne.n	800de48 <pbuf_free+0x9c>
 800de3a:	4b1d      	ldr	r3, [pc, #116]	; (800deb0 <pbuf_free+0x104>)
 800de3c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800de40:	491f      	ldr	r1, [pc, #124]	; (800dec0 <pbuf_free+0x114>)
 800de42:	481d      	ldr	r0, [pc, #116]	; (800deb8 <pbuf_free+0x10c>)
 800de44:	f009 fdc2 	bl	80179cc <iprintf>
        pc->custom_free_function(p);
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	4798      	blx	r3
 800de50:	e01d      	b.n	800de8e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800de52:	7bfb      	ldrb	r3, [r7, #15]
 800de54:	2b02      	cmp	r3, #2
 800de56:	d104      	bne.n	800de62 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800de58:	6879      	ldr	r1, [r7, #4]
 800de5a:	200c      	movs	r0, #12
 800de5c:	f7ff f902 	bl	800d064 <memp_free>
 800de60:	e015      	b.n	800de8e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800de62:	7bfb      	ldrb	r3, [r7, #15]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d104      	bne.n	800de72 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800de68:	6879      	ldr	r1, [r7, #4]
 800de6a:	200b      	movs	r0, #11
 800de6c:	f7ff f8fa 	bl	800d064 <memp_free>
 800de70:	e00d      	b.n	800de8e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800de72:	7bfb      	ldrb	r3, [r7, #15]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d103      	bne.n	800de80 <pbuf_free+0xd4>
          mem_free(p);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7fe fd85 	bl	800c988 <mem_free>
 800de7e:	e006      	b.n	800de8e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800de80:	4b0b      	ldr	r3, [pc, #44]	; (800deb0 <pbuf_free+0x104>)
 800de82:	f240 320f 	movw	r2, #783	; 0x30f
 800de86:	490f      	ldr	r1, [pc, #60]	; (800dec4 <pbuf_free+0x118>)
 800de88:	480b      	ldr	r0, [pc, #44]	; (800deb8 <pbuf_free+0x10c>)
 800de8a:	f009 fd9f 	bl	80179cc <iprintf>
        }
      }
      count++;
 800de8e:	7ffb      	ldrb	r3, [r7, #31]
 800de90:	3301      	adds	r3, #1
 800de92:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	607b      	str	r3, [r7, #4]
 800de98:	e001      	b.n	800de9e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d199      	bne.n	800ddd8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dea4:	7ffb      	ldrb	r3, [r7, #31]
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3720      	adds	r7, #32
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	08019eb8 	.word	0x08019eb8
 800deb4:	0801a01c 	.word	0x0801a01c
 800deb8:	08019f18 	.word	0x08019f18
 800debc:	0801a048 	.word	0x0801a048
 800dec0:	0801a060 	.word	0x0801a060
 800dec4:	0801a084 	.word	0x0801a084

0800dec8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ded0:	2300      	movs	r3, #0
 800ded2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ded4:	e005      	b.n	800dee2 <pbuf_clen+0x1a>
    ++len;
 800ded6:	89fb      	ldrh	r3, [r7, #14]
 800ded8:	3301      	adds	r3, #1
 800deda:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d1f6      	bne.n	800ded6 <pbuf_clen+0xe>
  }
  return len;
 800dee8:	89fb      	ldrh	r3, [r7, #14]
}
 800deea:	4618      	mov	r0, r3
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d016      	beq.n	800df34 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800df06:	f009 fcfb 	bl	8017900 <sys_arch_protect>
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7b9b      	ldrb	r3, [r3, #14]
 800df10:	3301      	adds	r3, #1
 800df12:	b2da      	uxtb	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	739a      	strb	r2, [r3, #14]
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f009 fcff 	bl	801791c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	7b9b      	ldrb	r3, [r3, #14]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d106      	bne.n	800df34 <pbuf_ref+0x3c>
 800df26:	4b05      	ldr	r3, [pc, #20]	; (800df3c <pbuf_ref+0x44>)
 800df28:	f240 3242 	movw	r2, #834	; 0x342
 800df2c:	4904      	ldr	r1, [pc, #16]	; (800df40 <pbuf_ref+0x48>)
 800df2e:	4805      	ldr	r0, [pc, #20]	; (800df44 <pbuf_ref+0x4c>)
 800df30:	f009 fd4c 	bl	80179cc <iprintf>
  }
}
 800df34:	bf00      	nop
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	08019eb8 	.word	0x08019eb8
 800df40:	0801a098 	.word	0x0801a098
 800df44:	08019f18 	.word	0x08019f18

0800df48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <pbuf_cat+0x16>
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d107      	bne.n	800df6e <pbuf_cat+0x26>
 800df5e:	4b20      	ldr	r3, [pc, #128]	; (800dfe0 <pbuf_cat+0x98>)
 800df60:	f240 3259 	movw	r2, #857	; 0x359
 800df64:	491f      	ldr	r1, [pc, #124]	; (800dfe4 <pbuf_cat+0x9c>)
 800df66:	4820      	ldr	r0, [pc, #128]	; (800dfe8 <pbuf_cat+0xa0>)
 800df68:	f009 fd30 	bl	80179cc <iprintf>
 800df6c:	e034      	b.n	800dfd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	60fb      	str	r3, [r7, #12]
 800df72:	e00a      	b.n	800df8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	891a      	ldrh	r2, [r3, #8]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	891b      	ldrh	r3, [r3, #8]
 800df7c:	4413      	add	r3, r2
 800df7e:	b29a      	uxth	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d1f0      	bne.n	800df74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	891a      	ldrh	r2, [r3, #8]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	895b      	ldrh	r3, [r3, #10]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d006      	beq.n	800dfac <pbuf_cat+0x64>
 800df9e:	4b10      	ldr	r3, [pc, #64]	; (800dfe0 <pbuf_cat+0x98>)
 800dfa0:	f240 3262 	movw	r2, #866	; 0x362
 800dfa4:	4911      	ldr	r1, [pc, #68]	; (800dfec <pbuf_cat+0xa4>)
 800dfa6:	4810      	ldr	r0, [pc, #64]	; (800dfe8 <pbuf_cat+0xa0>)
 800dfa8:	f009 fd10 	bl	80179cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d006      	beq.n	800dfc2 <pbuf_cat+0x7a>
 800dfb4:	4b0a      	ldr	r3, [pc, #40]	; (800dfe0 <pbuf_cat+0x98>)
 800dfb6:	f240 3263 	movw	r2, #867	; 0x363
 800dfba:	490d      	ldr	r1, [pc, #52]	; (800dff0 <pbuf_cat+0xa8>)
 800dfbc:	480a      	ldr	r0, [pc, #40]	; (800dfe8 <pbuf_cat+0xa0>)
 800dfbe:	f009 fd05 	bl	80179cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	891a      	ldrh	r2, [r3, #8]
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	891b      	ldrh	r3, [r3, #8]
 800dfca:	4413      	add	r3, r2
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	08019eb8 	.word	0x08019eb8
 800dfe4:	0801a0ac 	.word	0x0801a0ac
 800dfe8:	08019f18 	.word	0x08019f18
 800dfec:	0801a0e4 	.word	0x0801a0e4
 800dff0:	0801a114 	.word	0x0801a114

0800dff4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b086      	sub	sp, #24
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dffe:	2300      	movs	r3, #0
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	2300      	movs	r3, #0
 800e004:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d008      	beq.n	800e01e <pbuf_copy+0x2a>
 800e00c:	683b      	ldr	r3, [r7, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d005      	beq.n	800e01e <pbuf_copy+0x2a>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	891a      	ldrh	r2, [r3, #8]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	891b      	ldrh	r3, [r3, #8]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d209      	bcs.n	800e032 <pbuf_copy+0x3e>
 800e01e:	4b57      	ldr	r3, [pc, #348]	; (800e17c <pbuf_copy+0x188>)
 800e020:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e024:	4956      	ldr	r1, [pc, #344]	; (800e180 <pbuf_copy+0x18c>)
 800e026:	4857      	ldr	r0, [pc, #348]	; (800e184 <pbuf_copy+0x190>)
 800e028:	f009 fcd0 	bl	80179cc <iprintf>
 800e02c:	f06f 030f 	mvn.w	r3, #15
 800e030:	e09f      	b.n	800e172 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	895b      	ldrh	r3, [r3, #10]
 800e036:	461a      	mov	r2, r3
 800e038:	697b      	ldr	r3, [r7, #20]
 800e03a:	1ad2      	subs	r2, r2, r3
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	895b      	ldrh	r3, [r3, #10]
 800e040:	4619      	mov	r1, r3
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	1acb      	subs	r3, r1, r3
 800e046:	429a      	cmp	r2, r3
 800e048:	d306      	bcc.n	800e058 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	895b      	ldrh	r3, [r3, #10]
 800e04e:	461a      	mov	r2, r3
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	1ad3      	subs	r3, r2, r3
 800e054:	60fb      	str	r3, [r7, #12]
 800e056:	e005      	b.n	800e064 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	895b      	ldrh	r3, [r3, #10]
 800e05c:	461a      	mov	r2, r3
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685a      	ldr	r2, [r3, #4]
 800e068:	697b      	ldr	r3, [r7, #20]
 800e06a:	18d0      	adds	r0, r2, r3
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	4413      	add	r3, r2
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4619      	mov	r1, r3
 800e078:	f009 fc92 	bl	80179a0 <memcpy>
    offset_to += len;
 800e07c:	697a      	ldr	r2, [r7, #20]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4413      	add	r3, r2
 800e082:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e084:	693a      	ldr	r2, [r7, #16]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	4413      	add	r3, r2
 800e08a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	895b      	ldrh	r3, [r3, #10]
 800e090:	461a      	mov	r2, r3
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	4293      	cmp	r3, r2
 800e096:	d906      	bls.n	800e0a6 <pbuf_copy+0xb2>
 800e098:	4b38      	ldr	r3, [pc, #224]	; (800e17c <pbuf_copy+0x188>)
 800e09a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e09e:	493a      	ldr	r1, [pc, #232]	; (800e188 <pbuf_copy+0x194>)
 800e0a0:	4838      	ldr	r0, [pc, #224]	; (800e184 <pbuf_copy+0x190>)
 800e0a2:	f009 fc93 	bl	80179cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	895b      	ldrh	r3, [r3, #10]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d906      	bls.n	800e0c0 <pbuf_copy+0xcc>
 800e0b2:	4b32      	ldr	r3, [pc, #200]	; (800e17c <pbuf_copy+0x188>)
 800e0b4:	f240 32da 	movw	r2, #986	; 0x3da
 800e0b8:	4934      	ldr	r1, [pc, #208]	; (800e18c <pbuf_copy+0x198>)
 800e0ba:	4832      	ldr	r0, [pc, #200]	; (800e184 <pbuf_copy+0x190>)
 800e0bc:	f009 fc86 	bl	80179cc <iprintf>
    if (offset_from >= p_from->len) {
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	895b      	ldrh	r3, [r3, #10]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d304      	bcc.n	800e0d6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	895b      	ldrh	r3, [r3, #10]
 800e0da:	461a      	mov	r2, r3
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d114      	bne.n	800e10c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d10c      	bne.n	800e10c <pbuf_copy+0x118>
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d009      	beq.n	800e10c <pbuf_copy+0x118>
 800e0f8:	4b20      	ldr	r3, [pc, #128]	; (800e17c <pbuf_copy+0x188>)
 800e0fa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e0fe:	4924      	ldr	r1, [pc, #144]	; (800e190 <pbuf_copy+0x19c>)
 800e100:	4820      	ldr	r0, [pc, #128]	; (800e184 <pbuf_copy+0x190>)
 800e102:	f009 fc63 	bl	80179cc <iprintf>
 800e106:	f06f 030f 	mvn.w	r3, #15
 800e10a:	e032      	b.n	800e172 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d013      	beq.n	800e13a <pbuf_copy+0x146>
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	895a      	ldrh	r2, [r3, #10]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	891b      	ldrh	r3, [r3, #8]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d10d      	bne.n	800e13a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <pbuf_copy+0x146>
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <pbuf_copy+0x188>)
 800e128:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e12c:	4919      	ldr	r1, [pc, #100]	; (800e194 <pbuf_copy+0x1a0>)
 800e12e:	4815      	ldr	r0, [pc, #84]	; (800e184 <pbuf_copy+0x190>)
 800e130:	f009 fc4c 	bl	80179cc <iprintf>
 800e134:	f06f 0305 	mvn.w	r3, #5
 800e138:	e01b      	b.n	800e172 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d013      	beq.n	800e168 <pbuf_copy+0x174>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	895a      	ldrh	r2, [r3, #10]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	891b      	ldrh	r3, [r3, #8]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d10d      	bne.n	800e168 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d009      	beq.n	800e168 <pbuf_copy+0x174>
 800e154:	4b09      	ldr	r3, [pc, #36]	; (800e17c <pbuf_copy+0x188>)
 800e156:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e15a:	490e      	ldr	r1, [pc, #56]	; (800e194 <pbuf_copy+0x1a0>)
 800e15c:	4809      	ldr	r0, [pc, #36]	; (800e184 <pbuf_copy+0x190>)
 800e15e:	f009 fc35 	bl	80179cc <iprintf>
 800e162:	f06f 0305 	mvn.w	r3, #5
 800e166:	e004      	b.n	800e172 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f47f af61 	bne.w	800e032 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e170:	2300      	movs	r3, #0
}
 800e172:	4618      	mov	r0, r3
 800e174:	3718      	adds	r7, #24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
 800e17a:	bf00      	nop
 800e17c:	08019eb8 	.word	0x08019eb8
 800e180:	0801a160 	.word	0x0801a160
 800e184:	08019f18 	.word	0x08019f18
 800e188:	0801a190 	.word	0x0801a190
 800e18c:	0801a1a8 	.word	0x0801a1a8
 800e190:	0801a1c4 	.word	0x0801a1c4
 800e194:	0801a1d4 	.word	0x0801a1d4

0800e198 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b088      	sub	sp, #32
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	4611      	mov	r1, r2
 800e1a4:	461a      	mov	r2, r3
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	80fb      	strh	r3, [r7, #6]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d108      	bne.n	800e1ce <pbuf_copy_partial+0x36>
 800e1bc:	4b2b      	ldr	r3, [pc, #172]	; (800e26c <pbuf_copy_partial+0xd4>)
 800e1be:	f240 420a 	movw	r2, #1034	; 0x40a
 800e1c2:	492b      	ldr	r1, [pc, #172]	; (800e270 <pbuf_copy_partial+0xd8>)
 800e1c4:	482b      	ldr	r0, [pc, #172]	; (800e274 <pbuf_copy_partial+0xdc>)
 800e1c6:	f009 fc01 	bl	80179cc <iprintf>
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	e04a      	b.n	800e264 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d108      	bne.n	800e1e6 <pbuf_copy_partial+0x4e>
 800e1d4:	4b25      	ldr	r3, [pc, #148]	; (800e26c <pbuf_copy_partial+0xd4>)
 800e1d6:	f240 420b 	movw	r2, #1035	; 0x40b
 800e1da:	4927      	ldr	r1, [pc, #156]	; (800e278 <pbuf_copy_partial+0xe0>)
 800e1dc:	4825      	ldr	r0, [pc, #148]	; (800e274 <pbuf_copy_partial+0xdc>)
 800e1de:	f009 fbf5 	bl	80179cc <iprintf>
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	e03e      	b.n	800e264 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	61fb      	str	r3, [r7, #28]
 800e1ea:	e034      	b.n	800e256 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e1ec:	88bb      	ldrh	r3, [r7, #4]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d00a      	beq.n	800e208 <pbuf_copy_partial+0x70>
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	895b      	ldrh	r3, [r3, #10]
 800e1f6:	88ba      	ldrh	r2, [r7, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d305      	bcc.n	800e208 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	895b      	ldrh	r3, [r3, #10]
 800e200:	88ba      	ldrh	r2, [r7, #4]
 800e202:	1ad3      	subs	r3, r2, r3
 800e204:	80bb      	strh	r3, [r7, #4]
 800e206:	e023      	b.n	800e250 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	895a      	ldrh	r2, [r3, #10]
 800e20c:	88bb      	ldrh	r3, [r7, #4]
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e212:	8b3a      	ldrh	r2, [r7, #24]
 800e214:	88fb      	ldrh	r3, [r7, #6]
 800e216:	429a      	cmp	r2, r3
 800e218:	d901      	bls.n	800e21e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e21a:	88fb      	ldrh	r3, [r7, #6]
 800e21c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e21e:	8b7b      	ldrh	r3, [r7, #26]
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	18d0      	adds	r0, r2, r3
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	88bb      	ldrh	r3, [r7, #4]
 800e22a:	4413      	add	r3, r2
 800e22c:	8b3a      	ldrh	r2, [r7, #24]
 800e22e:	4619      	mov	r1, r3
 800e230:	f009 fbb6 	bl	80179a0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e234:	8afa      	ldrh	r2, [r7, #22]
 800e236:	8b3b      	ldrh	r3, [r7, #24]
 800e238:	4413      	add	r3, r2
 800e23a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e23c:	8b7a      	ldrh	r2, [r7, #26]
 800e23e:	8b3b      	ldrh	r3, [r7, #24]
 800e240:	4413      	add	r3, r2
 800e242:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e244:	88fa      	ldrh	r2, [r7, #6]
 800e246:	8b3b      	ldrh	r3, [r7, #24]
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	61fb      	str	r3, [r7, #28]
 800e256:	88fb      	ldrh	r3, [r7, #6]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <pbuf_copy_partial+0xca>
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1c4      	bne.n	800e1ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e262:	8afb      	ldrh	r3, [r7, #22]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}
 800e26c:	08019eb8 	.word	0x08019eb8
 800e270:	0801a200 	.word	0x0801a200
 800e274:	08019f18 	.word	0x08019f18
 800e278:	0801a220 	.word	0x0801a220

0800e27c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	603a      	str	r2, [r7, #0]
 800e286:	71fb      	strb	r3, [r7, #7]
 800e288:	460b      	mov	r3, r1
 800e28a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	8919      	ldrh	r1, [r3, #8]
 800e290:	88ba      	ldrh	r2, [r7, #4]
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	4618      	mov	r0, r3
 800e296:	f7ff faa5 	bl	800d7e4 <pbuf_alloc>
 800e29a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d101      	bne.n	800e2a6 <pbuf_clone+0x2a>
    return NULL;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	e011      	b.n	800e2ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e2a6:	6839      	ldr	r1, [r7, #0]
 800e2a8:	68f8      	ldr	r0, [r7, #12]
 800e2aa:	f7ff fea3 	bl	800dff4 <pbuf_copy>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e2b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d006      	beq.n	800e2c8 <pbuf_clone+0x4c>
 800e2ba:	4b06      	ldr	r3, [pc, #24]	; (800e2d4 <pbuf_clone+0x58>)
 800e2bc:	f240 5224 	movw	r2, #1316	; 0x524
 800e2c0:	4905      	ldr	r1, [pc, #20]	; (800e2d8 <pbuf_clone+0x5c>)
 800e2c2:	4806      	ldr	r0, [pc, #24]	; (800e2dc <pbuf_clone+0x60>)
 800e2c4:	f009 fb82 	bl	80179cc <iprintf>
  return q;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	08019eb8 	.word	0x08019eb8
 800e2d8:	0801a32c 	.word	0x0801a32c
 800e2dc:	08019f18 	.word	0x08019f18

0800e2e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2e4:	f009 fc00 	bl	8017ae8 <rand>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	4b01      	ldr	r3, [pc, #4]	; (800e300 <tcp_init+0x20>)
 800e2fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2fc:	bf00      	nop
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20000010 	.word	0x20000010

0800e304 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	7d1b      	ldrb	r3, [r3, #20]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d105      	bne.n	800e320 <tcp_free+0x1c>
 800e314:	4b06      	ldr	r3, [pc, #24]	; (800e330 <tcp_free+0x2c>)
 800e316:	22d4      	movs	r2, #212	; 0xd4
 800e318:	4906      	ldr	r1, [pc, #24]	; (800e334 <tcp_free+0x30>)
 800e31a:	4807      	ldr	r0, [pc, #28]	; (800e338 <tcp_free+0x34>)
 800e31c:	f009 fb56 	bl	80179cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	2001      	movs	r0, #1
 800e324:	f7fe fe9e 	bl	800d064 <memp_free>
}
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	0801a3b8 	.word	0x0801a3b8
 800e334:	0801a3e8 	.word	0x0801a3e8
 800e338:	0801a3fc 	.word	0x0801a3fc

0800e33c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	7d1b      	ldrb	r3, [r3, #20]
 800e348:	2b01      	cmp	r3, #1
 800e34a:	d105      	bne.n	800e358 <tcp_free_listen+0x1c>
 800e34c:	4b06      	ldr	r3, [pc, #24]	; (800e368 <tcp_free_listen+0x2c>)
 800e34e:	22df      	movs	r2, #223	; 0xdf
 800e350:	4906      	ldr	r1, [pc, #24]	; (800e36c <tcp_free_listen+0x30>)
 800e352:	4807      	ldr	r0, [pc, #28]	; (800e370 <tcp_free_listen+0x34>)
 800e354:	f009 fb3a 	bl	80179cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	2002      	movs	r0, #2
 800e35c:	f7fe fe82 	bl	800d064 <memp_free>
}
 800e360:	bf00      	nop
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	0801a3b8 	.word	0x0801a3b8
 800e36c:	0801a424 	.word	0x0801a424
 800e370:	0801a3fc 	.word	0x0801a3fc

0800e374 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e378:	f001 f8a6 	bl	800f4c8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e37c:	4b07      	ldr	r3, [pc, #28]	; (800e39c <tcp_tmr+0x28>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	3301      	adds	r3, #1
 800e382:	b2da      	uxtb	r2, r3
 800e384:	4b05      	ldr	r3, [pc, #20]	; (800e39c <tcp_tmr+0x28>)
 800e386:	701a      	strb	r2, [r3, #0]
 800e388:	4b04      	ldr	r3, [pc, #16]	; (800e39c <tcp_tmr+0x28>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	f003 0301 	and.w	r3, r3, #1
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e394:	f000 fd58 	bl	800ee48 <tcp_slowtmr>
  }
}
 800e398:	bf00      	nop
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	20004a01 	.word	0x20004a01

0800e3a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d105      	bne.n	800e3bc <tcp_remove_listener+0x1c>
 800e3b0:	4b0d      	ldr	r3, [pc, #52]	; (800e3e8 <tcp_remove_listener+0x48>)
 800e3b2:	22ff      	movs	r2, #255	; 0xff
 800e3b4:	490d      	ldr	r1, [pc, #52]	; (800e3ec <tcp_remove_listener+0x4c>)
 800e3b6:	480e      	ldr	r0, [pc, #56]	; (800e3f0 <tcp_remove_listener+0x50>)
 800e3b8:	f009 fb08 	bl	80179cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	60fb      	str	r3, [r7, #12]
 800e3c0:	e00a      	b.n	800e3d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	429a      	cmp	r2, r3
 800e3ca:	d102      	bne.n	800e3d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	60fb      	str	r3, [r7, #12]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1f1      	bne.n	800e3c2 <tcp_remove_listener+0x22>
    }
  }
}
 800e3de:	bf00      	nop
 800e3e0:	bf00      	nop
 800e3e2:	3710      	adds	r7, #16
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	0801a3b8 	.word	0x0801a3b8
 800e3ec:	0801a440 	.word	0x0801a440
 800e3f0:	0801a3fc 	.word	0x0801a3fc

0800e3f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d106      	bne.n	800e410 <tcp_listen_closed+0x1c>
 800e402:	4b14      	ldr	r3, [pc, #80]	; (800e454 <tcp_listen_closed+0x60>)
 800e404:	f240 1211 	movw	r2, #273	; 0x111
 800e408:	4913      	ldr	r1, [pc, #76]	; (800e458 <tcp_listen_closed+0x64>)
 800e40a:	4814      	ldr	r0, [pc, #80]	; (800e45c <tcp_listen_closed+0x68>)
 800e40c:	f009 fade 	bl	80179cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	7d1b      	ldrb	r3, [r3, #20]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d006      	beq.n	800e426 <tcp_listen_closed+0x32>
 800e418:	4b0e      	ldr	r3, [pc, #56]	; (800e454 <tcp_listen_closed+0x60>)
 800e41a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e41e:	4910      	ldr	r1, [pc, #64]	; (800e460 <tcp_listen_closed+0x6c>)
 800e420:	480e      	ldr	r0, [pc, #56]	; (800e45c <tcp_listen_closed+0x68>)
 800e422:	f009 fad3 	bl	80179cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e426:	2301      	movs	r3, #1
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	e00b      	b.n	800e444 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e42c:	4a0d      	ldr	r2, [pc, #52]	; (800e464 <tcp_listen_closed+0x70>)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff ffb1 	bl	800e3a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3301      	adds	r3, #1
 800e442:	60fb      	str	r3, [r7, #12]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b03      	cmp	r3, #3
 800e448:	d9f0      	bls.n	800e42c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e44a:	bf00      	nop
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	0801a3b8 	.word	0x0801a3b8
 800e458:	0801a468 	.word	0x0801a468
 800e45c:	0801a3fc 	.word	0x0801a3fc
 800e460:	0801a474 	.word	0x0801a474
 800e464:	0801c464 	.word	0x0801c464

0800e468 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e468:	b5b0      	push	{r4, r5, r7, lr}
 800e46a:	b088      	sub	sp, #32
 800e46c:	af04      	add	r7, sp, #16
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d106      	bne.n	800e488 <tcp_close_shutdown+0x20>
 800e47a:	4b63      	ldr	r3, [pc, #396]	; (800e608 <tcp_close_shutdown+0x1a0>)
 800e47c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e480:	4962      	ldr	r1, [pc, #392]	; (800e60c <tcp_close_shutdown+0x1a4>)
 800e482:	4863      	ldr	r0, [pc, #396]	; (800e610 <tcp_close_shutdown+0x1a8>)
 800e484:	f009 faa2 	bl	80179cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e488:	78fb      	ldrb	r3, [r7, #3]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d066      	beq.n	800e55c <tcp_close_shutdown+0xf4>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	7d1b      	ldrb	r3, [r3, #20]
 800e492:	2b04      	cmp	r3, #4
 800e494:	d003      	beq.n	800e49e <tcp_close_shutdown+0x36>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	7d1b      	ldrb	r3, [r3, #20]
 800e49a:	2b07      	cmp	r3, #7
 800e49c:	d15e      	bne.n	800e55c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d104      	bne.n	800e4b0 <tcp_close_shutdown+0x48>
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4ae:	d055      	beq.n	800e55c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	8b5b      	ldrh	r3, [r3, #26]
 800e4b4:	f003 0310 	and.w	r3, r3, #16
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <tcp_close_shutdown+0x62>
 800e4bc:	4b52      	ldr	r3, [pc, #328]	; (800e608 <tcp_close_shutdown+0x1a0>)
 800e4be:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e4c2:	4954      	ldr	r1, [pc, #336]	; (800e614 <tcp_close_shutdown+0x1ac>)
 800e4c4:	4852      	ldr	r0, [pc, #328]	; (800e610 <tcp_close_shutdown+0x1a8>)
 800e4c6:	f009 fa81 	bl	80179cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4d2:	687d      	ldr	r5, [r7, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	8ad2      	ldrh	r2, [r2, #22]
 800e4dc:	6879      	ldr	r1, [r7, #4]
 800e4de:	8b09      	ldrh	r1, [r1, #24]
 800e4e0:	9102      	str	r1, [sp, #8]
 800e4e2:	9201      	str	r2, [sp, #4]
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	462b      	mov	r3, r5
 800e4e8:	4622      	mov	r2, r4
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f005 fdb7 	bl	8014060 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f001 fb98 	bl	800fc28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e4f8:	4b47      	ldr	r3, [pc, #284]	; (800e618 <tcp_close_shutdown+0x1b0>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d105      	bne.n	800e50e <tcp_close_shutdown+0xa6>
 800e502:	4b45      	ldr	r3, [pc, #276]	; (800e618 <tcp_close_shutdown+0x1b0>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	4a43      	ldr	r2, [pc, #268]	; (800e618 <tcp_close_shutdown+0x1b0>)
 800e50a:	6013      	str	r3, [r2, #0]
 800e50c:	e013      	b.n	800e536 <tcp_close_shutdown+0xce>
 800e50e:	4b42      	ldr	r3, [pc, #264]	; (800e618 <tcp_close_shutdown+0x1b0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	60fb      	str	r3, [r7, #12]
 800e514:	e00c      	b.n	800e530 <tcp_close_shutdown+0xc8>
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d104      	bne.n	800e52a <tcp_close_shutdown+0xc2>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	68da      	ldr	r2, [r3, #12]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	60da      	str	r2, [r3, #12]
 800e528:	e005      	b.n	800e536 <tcp_close_shutdown+0xce>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	60fb      	str	r3, [r7, #12]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1ef      	bne.n	800e516 <tcp_close_shutdown+0xae>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	60da      	str	r2, [r3, #12]
 800e53c:	4b37      	ldr	r3, [pc, #220]	; (800e61c <tcp_close_shutdown+0x1b4>)
 800e53e:	2201      	movs	r2, #1
 800e540:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e542:	4b37      	ldr	r3, [pc, #220]	; (800e620 <tcp_close_shutdown+0x1b8>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d102      	bne.n	800e552 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e54c:	f004 f82c 	bl	80125a8 <tcp_trigger_input_pcb_close>
 800e550:	e002      	b.n	800e558 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fed6 	bl	800e304 <tcp_free>
      }
      return ERR_OK;
 800e558:	2300      	movs	r3, #0
 800e55a:	e050      	b.n	800e5fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b02      	cmp	r3, #2
 800e562:	d03b      	beq.n	800e5dc <tcp_close_shutdown+0x174>
 800e564:	2b02      	cmp	r3, #2
 800e566:	dc44      	bgt.n	800e5f2 <tcp_close_shutdown+0x18a>
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <tcp_close_shutdown+0x10a>
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d02a      	beq.n	800e5c6 <tcp_close_shutdown+0x15e>
 800e570:	e03f      	b.n	800e5f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8adb      	ldrh	r3, [r3, #22]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d021      	beq.n	800e5be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e57a:	4b2a      	ldr	r3, [pc, #168]	; (800e624 <tcp_close_shutdown+0x1bc>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	429a      	cmp	r2, r3
 800e582:	d105      	bne.n	800e590 <tcp_close_shutdown+0x128>
 800e584:	4b27      	ldr	r3, [pc, #156]	; (800e624 <tcp_close_shutdown+0x1bc>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	4a26      	ldr	r2, [pc, #152]	; (800e624 <tcp_close_shutdown+0x1bc>)
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	e013      	b.n	800e5b8 <tcp_close_shutdown+0x150>
 800e590:	4b24      	ldr	r3, [pc, #144]	; (800e624 <tcp_close_shutdown+0x1bc>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	60bb      	str	r3, [r7, #8]
 800e596:	e00c      	b.n	800e5b2 <tcp_close_shutdown+0x14a>
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d104      	bne.n	800e5ac <tcp_close_shutdown+0x144>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	60da      	str	r2, [r3, #12]
 800e5aa:	e005      	b.n	800e5b8 <tcp_close_shutdown+0x150>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	60bb      	str	r3, [r7, #8]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1ef      	bne.n	800e598 <tcp_close_shutdown+0x130>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f7ff fea0 	bl	800e304 <tcp_free>
      break;
 800e5c4:	e01a      	b.n	800e5fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f7ff ff14 	bl	800e3f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5cc:	6879      	ldr	r1, [r7, #4]
 800e5ce:	4816      	ldr	r0, [pc, #88]	; (800e628 <tcp_close_shutdown+0x1c0>)
 800e5d0:	f001 fb7a 	bl	800fcc8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7ff feb1 	bl	800e33c <tcp_free_listen>
      break;
 800e5da:	e00f      	b.n	800e5fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5dc:	6879      	ldr	r1, [r7, #4]
 800e5de:	480e      	ldr	r0, [pc, #56]	; (800e618 <tcp_close_shutdown+0x1b0>)
 800e5e0:	f001 fb72 	bl	800fcc8 <tcp_pcb_remove>
 800e5e4:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <tcp_close_shutdown+0x1b4>)
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff fe8a 	bl	800e304 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e5f0:	e004      	b.n	800e5fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 f81a 	bl	800e62c <tcp_close_shutdown_fin>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	e000      	b.n	800e5fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e5fc:	2300      	movs	r3, #0
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bdb0      	pop	{r4, r5, r7, pc}
 800e606:	bf00      	nop
 800e608:	0801a3b8 	.word	0x0801a3b8
 800e60c:	0801a48c 	.word	0x0801a48c
 800e610:	0801a3fc 	.word	0x0801a3fc
 800e614:	0801a4ac 	.word	0x0801a4ac
 800e618:	2000b8f8 	.word	0x2000b8f8
 800e61c:	2000b8f4 	.word	0x2000b8f4
 800e620:	2000b90c 	.word	0x2000b90c
 800e624:	2000b904 	.word	0x2000b904
 800e628:	2000b900 	.word	0x2000b900

0800e62c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d106      	bne.n	800e648 <tcp_close_shutdown_fin+0x1c>
 800e63a:	4b2e      	ldr	r3, [pc, #184]	; (800e6f4 <tcp_close_shutdown_fin+0xc8>)
 800e63c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e640:	492d      	ldr	r1, [pc, #180]	; (800e6f8 <tcp_close_shutdown_fin+0xcc>)
 800e642:	482e      	ldr	r0, [pc, #184]	; (800e6fc <tcp_close_shutdown_fin+0xd0>)
 800e644:	f009 f9c2 	bl	80179cc <iprintf>

  switch (pcb->state) {
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	7d1b      	ldrb	r3, [r3, #20]
 800e64c:	2b07      	cmp	r3, #7
 800e64e:	d020      	beq.n	800e692 <tcp_close_shutdown_fin+0x66>
 800e650:	2b07      	cmp	r3, #7
 800e652:	dc2b      	bgt.n	800e6ac <tcp_close_shutdown_fin+0x80>
 800e654:	2b03      	cmp	r3, #3
 800e656:	d002      	beq.n	800e65e <tcp_close_shutdown_fin+0x32>
 800e658:	2b04      	cmp	r3, #4
 800e65a:	d00d      	beq.n	800e678 <tcp_close_shutdown_fin+0x4c>
 800e65c:	e026      	b.n	800e6ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f004 fe0c 	bl	801327c <tcp_send_fin>
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d11f      	bne.n	800e6b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2205      	movs	r2, #5
 800e674:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e676:	e01b      	b.n	800e6b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f004 fdff 	bl	801327c <tcp_send_fin>
 800e67e:	4603      	mov	r3, r0
 800e680:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d114      	bne.n	800e6b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2205      	movs	r2, #5
 800e68e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e690:	e010      	b.n	800e6b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f004 fdf2 	bl	801327c <tcp_send_fin>
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d109      	bne.n	800e6b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2209      	movs	r2, #9
 800e6a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6aa:	e005      	b.n	800e6b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	e01c      	b.n	800e6ea <tcp_close_shutdown_fin+0xbe>
      break;
 800e6b0:	bf00      	nop
 800e6b2:	e002      	b.n	800e6ba <tcp_close_shutdown_fin+0x8e>
      break;
 800e6b4:	bf00      	nop
 800e6b6:	e000      	b.n	800e6ba <tcp_close_shutdown_fin+0x8e>
      break;
 800e6b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d103      	bne.n	800e6ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f004 ff18 	bl	80134f8 <tcp_output>
 800e6c8:	e00d      	b.n	800e6e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6d2:	d108      	bne.n	800e6e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	8b5b      	ldrh	r3, [r3, #26]
 800e6d8:	f043 0308 	orr.w	r3, r3, #8
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	e001      	b.n	800e6ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	0801a3b8 	.word	0x0801a3b8
 800e6f8:	0801a468 	.word	0x0801a468
 800e6fc:	0801a3fc 	.word	0x0801a3fc

0800e700 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d109      	bne.n	800e722 <tcp_close+0x22>
 800e70e:	4b0f      	ldr	r3, [pc, #60]	; (800e74c <tcp_close+0x4c>)
 800e710:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e714:	490e      	ldr	r1, [pc, #56]	; (800e750 <tcp_close+0x50>)
 800e716:	480f      	ldr	r0, [pc, #60]	; (800e754 <tcp_close+0x54>)
 800e718:	f009 f958 	bl	80179cc <iprintf>
 800e71c:	f06f 030f 	mvn.w	r3, #15
 800e720:	e00f      	b.n	800e742 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	7d1b      	ldrb	r3, [r3, #20]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d006      	beq.n	800e738 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	8b5b      	ldrh	r3, [r3, #26]
 800e72e:	f043 0310 	orr.w	r3, r3, #16
 800e732:	b29a      	uxth	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e738:	2101      	movs	r1, #1
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7ff fe94 	bl	800e468 <tcp_close_shutdown>
 800e740:	4603      	mov	r3, r0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3708      	adds	r7, #8
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	0801a3b8 	.word	0x0801a3b8
 800e750:	0801a4c8 	.word	0x0801a4c8
 800e754:	0801a3fc 	.word	0x0801a3fc

0800e758 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <tcp_shutdown+0x26>
 800e76a:	4b26      	ldr	r3, [pc, #152]	; (800e804 <tcp_shutdown+0xac>)
 800e76c:	f240 2207 	movw	r2, #519	; 0x207
 800e770:	4925      	ldr	r1, [pc, #148]	; (800e808 <tcp_shutdown+0xb0>)
 800e772:	4826      	ldr	r0, [pc, #152]	; (800e80c <tcp_shutdown+0xb4>)
 800e774:	f009 f92a 	bl	80179cc <iprintf>
 800e778:	f06f 030f 	mvn.w	r3, #15
 800e77c:	e03d      	b.n	800e7fa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	7d1b      	ldrb	r3, [r3, #20]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d102      	bne.n	800e78c <tcp_shutdown+0x34>
    return ERR_CONN;
 800e786:	f06f 030a 	mvn.w	r3, #10
 800e78a:	e036      	b.n	800e7fa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d01b      	beq.n	800e7ca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	8b5b      	ldrh	r3, [r3, #26]
 800e796:	f043 0310 	orr.w	r3, r3, #16
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d005      	beq.n	800e7b2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	68f8      	ldr	r0, [r7, #12]
 800e7aa:	f7ff fe5d 	bl	800e468 <tcp_close_shutdown>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	e023      	b.n	800e7fa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d007      	beq.n	800e7ca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f7ff faf4 	bl	800ddac <pbuf_free>
      pcb->refused_data = NULL;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d013      	beq.n	800e7f8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	7d1b      	ldrb	r3, [r3, #20]
 800e7d4:	2b04      	cmp	r3, #4
 800e7d6:	dc02      	bgt.n	800e7de <tcp_shutdown+0x86>
 800e7d8:	2b03      	cmp	r3, #3
 800e7da:	da02      	bge.n	800e7e2 <tcp_shutdown+0x8a>
 800e7dc:	e009      	b.n	800e7f2 <tcp_shutdown+0x9a>
 800e7de:	2b07      	cmp	r3, #7
 800e7e0:	d107      	bne.n	800e7f2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f7ff fe3d 	bl	800e468 <tcp_close_shutdown>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	e003      	b.n	800e7fa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e7f2:	f06f 030a 	mvn.w	r3, #10
 800e7f6:	e000      	b.n	800e7fa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	0801a3b8 	.word	0x0801a3b8
 800e808:	0801a4e0 	.word	0x0801a4e0
 800e80c:	0801a3fc 	.word	0x0801a3fc

0800e810 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b08e      	sub	sp, #56	; 0x38
 800e814:	af04      	add	r7, sp, #16
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d107      	bne.n	800e830 <tcp_abandon+0x20>
 800e820:	4b52      	ldr	r3, [pc, #328]	; (800e96c <tcp_abandon+0x15c>)
 800e822:	f240 223d 	movw	r2, #573	; 0x23d
 800e826:	4952      	ldr	r1, [pc, #328]	; (800e970 <tcp_abandon+0x160>)
 800e828:	4852      	ldr	r0, [pc, #328]	; (800e974 <tcp_abandon+0x164>)
 800e82a:	f009 f8cf 	bl	80179cc <iprintf>
 800e82e:	e099      	b.n	800e964 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d106      	bne.n	800e846 <tcp_abandon+0x36>
 800e838:	4b4c      	ldr	r3, [pc, #304]	; (800e96c <tcp_abandon+0x15c>)
 800e83a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e83e:	494e      	ldr	r1, [pc, #312]	; (800e978 <tcp_abandon+0x168>)
 800e840:	484c      	ldr	r0, [pc, #304]	; (800e974 <tcp_abandon+0x164>)
 800e842:	f009 f8c3 	bl	80179cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7d1b      	ldrb	r3, [r3, #20]
 800e84a:	2b0a      	cmp	r3, #10
 800e84c:	d107      	bne.n	800e85e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	484a      	ldr	r0, [pc, #296]	; (800e97c <tcp_abandon+0x16c>)
 800e852:	f001 fa39 	bl	800fcc8 <tcp_pcb_remove>
    tcp_free(pcb);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f7ff fd54 	bl	800e304 <tcp_free>
 800e85c:	e082      	b.n	800e964 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e862:	2300      	movs	r3, #0
 800e864:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e86a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e870:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e878:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	7d1b      	ldrb	r3, [r3, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d126      	bne.n	800e8d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	8adb      	ldrh	r3, [r3, #22]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d02e      	beq.n	800e8ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e890:	4b3b      	ldr	r3, [pc, #236]	; (800e980 <tcp_abandon+0x170>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	429a      	cmp	r2, r3
 800e898:	d105      	bne.n	800e8a6 <tcp_abandon+0x96>
 800e89a:	4b39      	ldr	r3, [pc, #228]	; (800e980 <tcp_abandon+0x170>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	68db      	ldr	r3, [r3, #12]
 800e8a0:	4a37      	ldr	r2, [pc, #220]	; (800e980 <tcp_abandon+0x170>)
 800e8a2:	6013      	str	r3, [r2, #0]
 800e8a4:	e013      	b.n	800e8ce <tcp_abandon+0xbe>
 800e8a6:	4b36      	ldr	r3, [pc, #216]	; (800e980 <tcp_abandon+0x170>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	61fb      	str	r3, [r7, #28]
 800e8ac:	e00c      	b.n	800e8c8 <tcp_abandon+0xb8>
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d104      	bne.n	800e8c2 <tcp_abandon+0xb2>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	68da      	ldr	r2, [r3, #12]
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	60da      	str	r2, [r3, #12]
 800e8c0:	e005      	b.n	800e8ce <tcp_abandon+0xbe>
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	61fb      	str	r3, [r7, #28]
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1ef      	bne.n	800e8ae <tcp_abandon+0x9e>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	60da      	str	r2, [r3, #12]
 800e8d4:	e00b      	b.n	800e8ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	8adb      	ldrh	r3, [r3, #22]
 800e8de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e8e0:	6879      	ldr	r1, [r7, #4]
 800e8e2:	4828      	ldr	r0, [pc, #160]	; (800e984 <tcp_abandon+0x174>)
 800e8e4:	f001 f9f0 	bl	800fcc8 <tcp_pcb_remove>
 800e8e8:	4b27      	ldr	r3, [pc, #156]	; (800e988 <tcp_abandon+0x178>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d004      	beq.n	800e900 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f000 fec4 	bl	800f688 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e904:	2b00      	cmp	r3, #0
 800e906:	d004      	beq.n	800e912 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e90c:	4618      	mov	r0, r3
 800e90e:	f000 febb 	bl	800f688 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 feb2 	bl	800f688 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00e      	beq.n	800e948 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e92a:	6879      	ldr	r1, [r7, #4]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	3304      	adds	r3, #4
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	8b12      	ldrh	r2, [r2, #24]
 800e934:	9202      	str	r2, [sp, #8]
 800e936:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e938:	9201      	str	r2, [sp, #4]
 800e93a:	9300      	str	r3, [sp, #0]
 800e93c:	460b      	mov	r3, r1
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	69b9      	ldr	r1, [r7, #24]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f005 fb8c 	bl	8014060 <tcp_rst>
    }
    last_state = pcb->state;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff fcd8 	bl	800e304 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d004      	beq.n	800e964 <tcp_abandon+0x154>
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	f06f 010c 	mvn.w	r1, #12
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	4798      	blx	r3
  }
}
 800e964:	3728      	adds	r7, #40	; 0x28
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	0801a3b8 	.word	0x0801a3b8
 800e970:	0801a4fc 	.word	0x0801a4fc
 800e974:	0801a3fc 	.word	0x0801a3fc
 800e978:	0801a518 	.word	0x0801a518
 800e97c:	2000b908 	.word	0x2000b908
 800e980:	2000b904 	.word	0x2000b904
 800e984:	2000b8f8 	.word	0x2000b8f8
 800e988:	2000b8f4 	.word	0x2000b8f4

0800e98c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e994:	2101      	movs	r1, #1
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f7ff ff3a 	bl	800e810 <tcp_abandon>
}
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b088      	sub	sp, #32
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e9b2:	2304      	movs	r3, #4
 800e9b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d101      	bne.n	800e9c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e9bc:	4b3e      	ldr	r3, [pc, #248]	; (800eab8 <tcp_bind+0x114>)
 800e9be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d109      	bne.n	800e9da <tcp_bind+0x36>
 800e9c6:	4b3d      	ldr	r3, [pc, #244]	; (800eabc <tcp_bind+0x118>)
 800e9c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e9cc:	493c      	ldr	r1, [pc, #240]	; (800eac0 <tcp_bind+0x11c>)
 800e9ce:	483d      	ldr	r0, [pc, #244]	; (800eac4 <tcp_bind+0x120>)
 800e9d0:	f008 fffc 	bl	80179cc <iprintf>
 800e9d4:	f06f 030f 	mvn.w	r3, #15
 800e9d8:	e06a      	b.n	800eab0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	7d1b      	ldrb	r3, [r3, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d009      	beq.n	800e9f6 <tcp_bind+0x52>
 800e9e2:	4b36      	ldr	r3, [pc, #216]	; (800eabc <tcp_bind+0x118>)
 800e9e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e9e8:	4937      	ldr	r1, [pc, #220]	; (800eac8 <tcp_bind+0x124>)
 800e9ea:	4836      	ldr	r0, [pc, #216]	; (800eac4 <tcp_bind+0x120>)
 800e9ec:	f008 ffee 	bl	80179cc <iprintf>
 800e9f0:	f06f 0305 	mvn.w	r3, #5
 800e9f4:	e05c      	b.n	800eab0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e9f6:	88fb      	ldrh	r3, [r7, #6]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d109      	bne.n	800ea10 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e9fc:	f000 f9de 	bl	800edbc <tcp_new_port>
 800ea00:	4603      	mov	r3, r0
 800ea02:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ea04:	88fb      	ldrh	r3, [r7, #6]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d135      	bne.n	800ea76 <tcp_bind+0xd2>
      return ERR_BUF;
 800ea0a:	f06f 0301 	mvn.w	r3, #1
 800ea0e:	e04f      	b.n	800eab0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ea10:	2300      	movs	r3, #0
 800ea12:	61fb      	str	r3, [r7, #28]
 800ea14:	e02b      	b.n	800ea6e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea16:	4a2d      	ldr	r2, [pc, #180]	; (800eacc <tcp_bind+0x128>)
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	e01e      	b.n	800ea62 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800ea24:	69bb      	ldr	r3, [r7, #24]
 800ea26:	8adb      	ldrh	r3, [r3, #22]
 800ea28:	88fa      	ldrh	r2, [r7, #6]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d116      	bne.n	800ea5c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea2e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d010      	beq.n	800ea56 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d00c      	beq.n	800ea56 <tcp_bind+0xb2>
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d009      	beq.n	800ea56 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d005      	beq.n	800ea56 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ea4a:	69bb      	ldr	r3, [r7, #24]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d102      	bne.n	800ea5c <tcp_bind+0xb8>
              return ERR_USE;
 800ea56:	f06f 0307 	mvn.w	r3, #7
 800ea5a:	e029      	b.n	800eab0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	61bb      	str	r3, [r7, #24]
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d1dd      	bne.n	800ea24 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	3301      	adds	r3, #1
 800ea6c:	61fb      	str	r3, [r7, #28]
 800ea6e:	69fa      	ldr	r2, [r7, #28]
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	dbcf      	blt.n	800ea16 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00c      	beq.n	800ea96 <tcp_bind+0xf2>
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d008      	beq.n	800ea96 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d002      	beq.n	800ea90 <tcp_bind+0xec>
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	e000      	b.n	800ea92 <tcp_bind+0xee>
 800ea90:	2300      	movs	r3, #0
 800ea92:	68fa      	ldr	r2, [r7, #12]
 800ea94:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	88fa      	ldrh	r2, [r7, #6]
 800ea9a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ea9c:	4b0c      	ldr	r3, [pc, #48]	; (800ead0 <tcp_bind+0x12c>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	60da      	str	r2, [r3, #12]
 800eaa4:	4a0a      	ldr	r2, [pc, #40]	; (800ead0 <tcp_bind+0x12c>)
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6013      	str	r3, [r2, #0]
 800eaaa:	f005 fc9b 	bl	80143e4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3720      	adds	r7, #32
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	0801c48c 	.word	0x0801c48c
 800eabc:	0801a3b8 	.word	0x0801a3b8
 800eac0:	0801a54c 	.word	0x0801a54c
 800eac4:	0801a3fc 	.word	0x0801a3fc
 800eac8:	0801a564 	.word	0x0801a564
 800eacc:	0801c464 	.word	0x0801c464
 800ead0:	2000b904 	.word	0x2000b904

0800ead4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	4613      	mov	r3, r2
 800eae0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d106      	bne.n	800eaf6 <tcp_accept_null+0x22>
 800eae8:	4b07      	ldr	r3, [pc, #28]	; (800eb08 <tcp_accept_null+0x34>)
 800eaea:	f240 320f 	movw	r2, #783	; 0x30f
 800eaee:	4907      	ldr	r1, [pc, #28]	; (800eb0c <tcp_accept_null+0x38>)
 800eaf0:	4807      	ldr	r0, [pc, #28]	; (800eb10 <tcp_accept_null+0x3c>)
 800eaf2:	f008 ff6b 	bl	80179cc <iprintf>

  tcp_abort(pcb);
 800eaf6:	68b8      	ldr	r0, [r7, #8]
 800eaf8:	f7ff ff48 	bl	800e98c <tcp_abort>

  return ERR_ABRT;
 800eafc:	f06f 030c 	mvn.w	r3, #12
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	0801a3b8 	.word	0x0801a3b8
 800eb0c:	0801a58c 	.word	0x0801a58c
 800eb10:	0801a3fc 	.word	0x0801a3fc

0800eb14 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b088      	sub	sp, #32
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	460b      	mov	r3, r1
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d109      	bne.n	800eb40 <tcp_listen_with_backlog_and_err+0x2c>
 800eb2c:	4b47      	ldr	r3, [pc, #284]	; (800ec4c <tcp_listen_with_backlog_and_err+0x138>)
 800eb2e:	f240 3259 	movw	r2, #857	; 0x359
 800eb32:	4947      	ldr	r1, [pc, #284]	; (800ec50 <tcp_listen_with_backlog_and_err+0x13c>)
 800eb34:	4847      	ldr	r0, [pc, #284]	; (800ec54 <tcp_listen_with_backlog_and_err+0x140>)
 800eb36:	f008 ff49 	bl	80179cc <iprintf>
 800eb3a:	23f0      	movs	r3, #240	; 0xf0
 800eb3c:	76fb      	strb	r3, [r7, #27]
 800eb3e:	e079      	b.n	800ec34 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	7d1b      	ldrb	r3, [r3, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <tcp_listen_with_backlog_and_err+0x48>
 800eb48:	4b40      	ldr	r3, [pc, #256]	; (800ec4c <tcp_listen_with_backlog_and_err+0x138>)
 800eb4a:	f240 325a 	movw	r2, #858	; 0x35a
 800eb4e:	4942      	ldr	r1, [pc, #264]	; (800ec58 <tcp_listen_with_backlog_and_err+0x144>)
 800eb50:	4840      	ldr	r0, [pc, #256]	; (800ec54 <tcp_listen_with_backlog_and_err+0x140>)
 800eb52:	f008 ff3b 	bl	80179cc <iprintf>
 800eb56:	23f1      	movs	r3, #241	; 0xf1
 800eb58:	76fb      	strb	r3, [r7, #27]
 800eb5a:	e06b      	b.n	800ec34 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	7d1b      	ldrb	r3, [r3, #20]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d104      	bne.n	800eb6e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800eb68:	23f7      	movs	r3, #247	; 0xf7
 800eb6a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eb6c:	e062      	b.n	800ec34 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800eb6e:	2002      	movs	r0, #2
 800eb70:	f7fe fa26 	bl	800cfc0 <memp_malloc>
 800eb74:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d102      	bne.n	800eb82 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800eb7c:	23ff      	movs	r3, #255	; 0xff
 800eb7e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800eb80:	e058      	b.n	800ec34 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	691a      	ldr	r2, [r3, #16]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	8ada      	ldrh	r2, [r3, #22]
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800eb92:	69fb      	ldr	r3, [r7, #28]
 800eb94:	2201      	movs	r2, #1
 800eb96:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	7d5a      	ldrb	r2, [r3, #21]
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	7a5a      	ldrb	r2, [r3, #9]
 800eba4:	69fb      	ldr	r3, [r7, #28]
 800eba6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	7ada      	ldrb	r2, [r3, #11]
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	7a9a      	ldrb	r2, [r3, #10]
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	69fb      	ldr	r3, [r7, #28]
 800ebc4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	8adb      	ldrh	r3, [r3, #22]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d021      	beq.n	800ec12 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ebce:	4b23      	ldr	r3, [pc, #140]	; (800ec5c <tcp_listen_with_backlog_and_err+0x148>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	68fa      	ldr	r2, [r7, #12]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d105      	bne.n	800ebe4 <tcp_listen_with_backlog_and_err+0xd0>
 800ebd8:	4b20      	ldr	r3, [pc, #128]	; (800ec5c <tcp_listen_with_backlog_and_err+0x148>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	4a1f      	ldr	r2, [pc, #124]	; (800ec5c <tcp_listen_with_backlog_and_err+0x148>)
 800ebe0:	6013      	str	r3, [r2, #0]
 800ebe2:	e013      	b.n	800ec0c <tcp_listen_with_backlog_and_err+0xf8>
 800ebe4:	4b1d      	ldr	r3, [pc, #116]	; (800ec5c <tcp_listen_with_backlog_and_err+0x148>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	617b      	str	r3, [r7, #20]
 800ebea:	e00c      	b.n	800ec06 <tcp_listen_with_backlog_and_err+0xf2>
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d104      	bne.n	800ec00 <tcp_listen_with_backlog_and_err+0xec>
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	68da      	ldr	r2, [r3, #12]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	60da      	str	r2, [r3, #12]
 800ebfe:	e005      	b.n	800ec0c <tcp_listen_with_backlog_and_err+0xf8>
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	617b      	str	r3, [r7, #20]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d1ef      	bne.n	800ebec <tcp_listen_with_backlog_and_err+0xd8>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800ec12:	68f8      	ldr	r0, [r7, #12]
 800ec14:	f7ff fb76 	bl	800e304 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	4a11      	ldr	r2, [pc, #68]	; (800ec60 <tcp_listen_with_backlog_and_err+0x14c>)
 800ec1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ec1e:	4b11      	ldr	r3, [pc, #68]	; (800ec64 <tcp_listen_with_backlog_and_err+0x150>)
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	60da      	str	r2, [r3, #12]
 800ec26:	4a0f      	ldr	r2, [pc, #60]	; (800ec64 <tcp_listen_with_backlog_and_err+0x150>)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	f005 fbda 	bl	80143e4 <tcp_timer_needed>
  res = ERR_OK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	7efa      	ldrb	r2, [r7, #27]
 800ec3e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800ec40:	69fb      	ldr	r3, [r7, #28]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3720      	adds	r7, #32
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	0801a3b8 	.word	0x0801a3b8
 800ec50:	0801a5ac 	.word	0x0801a5ac
 800ec54:	0801a3fc 	.word	0x0801a3fc
 800ec58:	0801a5dc 	.word	0x0801a5dc
 800ec5c:	2000b904 	.word	0x2000b904
 800ec60:	0800ead5 	.word	0x0800ead5
 800ec64:	2000b900 	.word	0x2000b900

0800ec68 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d106      	bne.n	800ec84 <tcp_update_rcv_ann_wnd+0x1c>
 800ec76:	4b25      	ldr	r3, [pc, #148]	; (800ed0c <tcp_update_rcv_ann_wnd+0xa4>)
 800ec78:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ec7c:	4924      	ldr	r1, [pc, #144]	; (800ed10 <tcp_update_rcv_ann_wnd+0xa8>)
 800ec7e:	4825      	ldr	r0, [pc, #148]	; (800ed14 <tcp_update_rcv_ann_wnd+0xac>)
 800ec80:	f008 fea4 	bl	80179cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec8c:	4413      	add	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ec98:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ec9c:	bf28      	it	cs
 800ec9e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800eca2:	b292      	uxth	r2, r2
 800eca4:	4413      	add	r3, r2
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	1ad3      	subs	r3, r2, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	db08      	blt.n	800ecc0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecba:	68fa      	ldr	r2, [r7, #12]
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	e020      	b.n	800ed02 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	dd03      	ble.n	800ecd6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecd4:	e014      	b.n	800ed00 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ece8:	d306      	bcc.n	800ecf8 <tcp_update_rcv_ann_wnd+0x90>
 800ecea:	4b08      	ldr	r3, [pc, #32]	; (800ed0c <tcp_update_rcv_ann_wnd+0xa4>)
 800ecec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ecf0:	4909      	ldr	r1, [pc, #36]	; (800ed18 <tcp_update_rcv_ann_wnd+0xb0>)
 800ecf2:	4808      	ldr	r0, [pc, #32]	; (800ed14 <tcp_update_rcv_ann_wnd+0xac>)
 800ecf4:	f008 fe6a 	bl	80179cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed00:	2300      	movs	r3, #0
  }
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3710      	adds	r7, #16
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	0801a3b8 	.word	0x0801a3b8
 800ed10:	0801a614 	.word	0x0801a614
 800ed14:	0801a3fc 	.word	0x0801a3fc
 800ed18:	0801a638 	.word	0x0801a638

0800ed1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d107      	bne.n	800ed3e <tcp_recved+0x22>
 800ed2e:	4b1f      	ldr	r3, [pc, #124]	; (800edac <tcp_recved+0x90>)
 800ed30:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed34:	491e      	ldr	r1, [pc, #120]	; (800edb0 <tcp_recved+0x94>)
 800ed36:	481f      	ldr	r0, [pc, #124]	; (800edb4 <tcp_recved+0x98>)
 800ed38:	f008 fe48 	bl	80179cc <iprintf>
 800ed3c:	e032      	b.n	800eda4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	7d1b      	ldrb	r3, [r3, #20]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d106      	bne.n	800ed54 <tcp_recved+0x38>
 800ed46:	4b19      	ldr	r3, [pc, #100]	; (800edac <tcp_recved+0x90>)
 800ed48:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ed4c:	491a      	ldr	r1, [pc, #104]	; (800edb8 <tcp_recved+0x9c>)
 800ed4e:	4819      	ldr	r0, [pc, #100]	; (800edb4 <tcp_recved+0x98>)
 800ed50:	f008 fe3c 	bl	80179cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed58:	887b      	ldrh	r3, [r7, #2]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ed5e:	89fb      	ldrh	r3, [r7, #14]
 800ed60:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed64:	d804      	bhi.n	800ed70 <tcp_recved+0x54>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed6a:	89fa      	ldrh	r2, [r7, #14]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d204      	bcs.n	800ed7a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed76:	851a      	strh	r2, [r3, #40]	; 0x28
 800ed78:	e002      	b.n	800ed80 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	89fa      	ldrh	r2, [r7, #14]
 800ed7e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff ff71 	bl	800ec68 <tcp_update_rcv_ann_wnd>
 800ed86:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed8e:	d309      	bcc.n	800eda4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	8b5b      	ldrh	r3, [r3, #26]
 800ed94:	f043 0302 	orr.w	r3, r3, #2
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f004 fbaa 	bl	80134f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	0801a3b8 	.word	0x0801a3b8
 800edb0:	0801a654 	.word	0x0801a654
 800edb4:	0801a3fc 	.word	0x0801a3fc
 800edb8:	0801a66c 	.word	0x0801a66c

0800edbc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800edc2:	2300      	movs	r3, #0
 800edc4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800edc6:	4b1e      	ldr	r3, [pc, #120]	; (800ee40 <tcp_new_port+0x84>)
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	3301      	adds	r3, #1
 800edcc:	b29a      	uxth	r2, r3
 800edce:	4b1c      	ldr	r3, [pc, #112]	; (800ee40 <tcp_new_port+0x84>)
 800edd0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800edd2:	4b1b      	ldr	r3, [pc, #108]	; (800ee40 <tcp_new_port+0x84>)
 800edd4:	881b      	ldrh	r3, [r3, #0]
 800edd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edda:	4293      	cmp	r3, r2
 800eddc:	d103      	bne.n	800ede6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800edde:	4b18      	ldr	r3, [pc, #96]	; (800ee40 <tcp_new_port+0x84>)
 800ede0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ede4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ede6:	2300      	movs	r3, #0
 800ede8:	71fb      	strb	r3, [r7, #7]
 800edea:	e01e      	b.n	800ee2a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	4a15      	ldr	r2, [pc, #84]	; (800ee44 <tcp_new_port+0x88>)
 800edf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	603b      	str	r3, [r7, #0]
 800edf8:	e011      	b.n	800ee1e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	8ada      	ldrh	r2, [r3, #22]
 800edfe:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <tcp_new_port+0x84>)
 800ee00:	881b      	ldrh	r3, [r3, #0]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d108      	bne.n	800ee18 <tcp_new_port+0x5c>
        n++;
 800ee06:	88bb      	ldrh	r3, [r7, #4]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ee0c:	88bb      	ldrh	r3, [r7, #4]
 800ee0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee12:	d3d8      	bcc.n	800edc6 <tcp_new_port+0xa>
          return 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	e00d      	b.n	800ee34 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	603b      	str	r3, [r7, #0]
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1ea      	bne.n	800edfa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ee24:	79fb      	ldrb	r3, [r7, #7]
 800ee26:	3301      	adds	r3, #1
 800ee28:	71fb      	strb	r3, [r7, #7]
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	2b03      	cmp	r3, #3
 800ee2e:	d9dd      	bls.n	800edec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <tcp_new_port+0x84>)
 800ee32:	881b      	ldrh	r3, [r3, #0]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	370c      	adds	r7, #12
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr
 800ee40:	20000010 	.word	0x20000010
 800ee44:	0801c464 	.word	0x0801c464

0800ee48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee48:	b5b0      	push	{r4, r5, r7, lr}
 800ee4a:	b090      	sub	sp, #64	; 0x40
 800ee4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee54:	4b94      	ldr	r3, [pc, #592]	; (800f0a8 <tcp_slowtmr+0x260>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	4a93      	ldr	r2, [pc, #588]	; (800f0a8 <tcp_slowtmr+0x260>)
 800ee5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ee5e:	4b93      	ldr	r3, [pc, #588]	; (800f0ac <tcp_slowtmr+0x264>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	4b91      	ldr	r3, [pc, #580]	; (800f0ac <tcp_slowtmr+0x264>)
 800ee68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ee6e:	4b90      	ldr	r3, [pc, #576]	; (800f0b0 <tcp_slowtmr+0x268>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ee74:	e29d      	b.n	800f3b2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	7d1b      	ldrb	r3, [r3, #20]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <tcp_slowtmr+0x44>
 800ee7e:	4b8d      	ldr	r3, [pc, #564]	; (800f0b4 <tcp_slowtmr+0x26c>)
 800ee80:	f240 42be 	movw	r2, #1214	; 0x4be
 800ee84:	498c      	ldr	r1, [pc, #560]	; (800f0b8 <tcp_slowtmr+0x270>)
 800ee86:	488d      	ldr	r0, [pc, #564]	; (800f0bc <tcp_slowtmr+0x274>)
 800ee88:	f008 fda0 	bl	80179cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ee8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee8e:	7d1b      	ldrb	r3, [r3, #20]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d106      	bne.n	800eea2 <tcp_slowtmr+0x5a>
 800ee94:	4b87      	ldr	r3, [pc, #540]	; (800f0b4 <tcp_slowtmr+0x26c>)
 800ee96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ee9a:	4989      	ldr	r1, [pc, #548]	; (800f0c0 <tcp_slowtmr+0x278>)
 800ee9c:	4887      	ldr	r0, [pc, #540]	; (800f0bc <tcp_slowtmr+0x274>)
 800ee9e:	f008 fd95 	bl	80179cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	7d1b      	ldrb	r3, [r3, #20]
 800eea6:	2b0a      	cmp	r3, #10
 800eea8:	d106      	bne.n	800eeb8 <tcp_slowtmr+0x70>
 800eeaa:	4b82      	ldr	r3, [pc, #520]	; (800f0b4 <tcp_slowtmr+0x26c>)
 800eeac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eeb0:	4984      	ldr	r1, [pc, #528]	; (800f0c4 <tcp_slowtmr+0x27c>)
 800eeb2:	4882      	ldr	r0, [pc, #520]	; (800f0bc <tcp_slowtmr+0x274>)
 800eeb4:	f008 fd8a 	bl	80179cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	7f9a      	ldrb	r2, [r3, #30]
 800eebc:	4b7b      	ldr	r3, [pc, #492]	; (800f0ac <tcp_slowtmr+0x264>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d105      	bne.n	800eed0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eece:	e270      	b.n	800f3b2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eed0:	4b76      	ldr	r3, [pc, #472]	; (800f0ac <tcp_slowtmr+0x264>)
 800eed2:	781a      	ldrb	r2, [r3, #0]
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	7d1b      	ldrb	r3, [r3, #20]
 800eee8:	2b02      	cmp	r3, #2
 800eeea:	d10a      	bne.n	800ef02 <tcp_slowtmr+0xba>
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eef2:	2b05      	cmp	r3, #5
 800eef4:	d905      	bls.n	800ef02 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eefa:	3301      	adds	r3, #1
 800eefc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef00:	e11e      	b.n	800f140 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef08:	2b0b      	cmp	r3, #11
 800ef0a:	d905      	bls.n	800ef18 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef10:	3301      	adds	r3, #1
 800ef12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef16:	e113      	b.n	800f140 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d075      	beq.n	800f00e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d006      	beq.n	800ef38 <tcp_slowtmr+0xf0>
 800ef2a:	4b62      	ldr	r3, [pc, #392]	; (800f0b4 <tcp_slowtmr+0x26c>)
 800ef2c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef30:	4965      	ldr	r1, [pc, #404]	; (800f0c8 <tcp_slowtmr+0x280>)
 800ef32:	4862      	ldr	r0, [pc, #392]	; (800f0bc <tcp_slowtmr+0x274>)
 800ef34:	f008 fd4a 	bl	80179cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d106      	bne.n	800ef4e <tcp_slowtmr+0x106>
 800ef40:	4b5c      	ldr	r3, [pc, #368]	; (800f0b4 <tcp_slowtmr+0x26c>)
 800ef42:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef46:	4961      	ldr	r1, [pc, #388]	; (800f0cc <tcp_slowtmr+0x284>)
 800ef48:	485c      	ldr	r0, [pc, #368]	; (800f0bc <tcp_slowtmr+0x274>)
 800ef4a:	f008 fd3f 	bl	80179cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef54:	2b0b      	cmp	r3, #11
 800ef56:	d905      	bls.n	800ef64 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef62:	e0ed      	b.n	800f140 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	4a58      	ldr	r2, [pc, #352]	; (800f0d0 <tcp_slowtmr+0x288>)
 800ef6e:	5cd3      	ldrb	r3, [r2, r3]
 800ef70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef78:	7c7a      	ldrb	r2, [r7, #17]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d907      	bls.n	800ef8e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef84:	3301      	adds	r3, #1
 800ef86:	b2da      	uxtb	r2, r3
 800ef88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ef8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef94:	7c7a      	ldrb	r2, [r7, #17]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	f200 80d2 	bhi.w	800f140 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d108      	bne.n	800efbc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800efaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efac:	f005 f94c 	bl	8014248 <tcp_zero_window_probe>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d014      	beq.n	800efe0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800efb6:	2300      	movs	r3, #0
 800efb8:	623b      	str	r3, [r7, #32]
 800efba:	e011      	b.n	800efe0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800efbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efc2:	4619      	mov	r1, r3
 800efc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efc6:	f004 f811 	bl	8012fec <tcp_split_unsent_seg>
 800efca:	4603      	mov	r3, r0
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d107      	bne.n	800efe0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800efd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efd2:	f004 fa91 	bl	80134f8 <tcp_output>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d101      	bne.n	800efe0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800efe0:	6a3b      	ldr	r3, [r7, #32]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	f000 80ac 	beq.w	800f140 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	2200      	movs	r2, #0
 800efec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eff6:	2b06      	cmp	r3, #6
 800eff8:	f200 80a2 	bhi.w	800f140 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f002:	3301      	adds	r3, #1
 800f004:	b2da      	uxtb	r2, r3
 800f006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f008:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f00c:	e098      	b.n	800f140 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f010:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f014:	2b00      	cmp	r3, #0
 800f016:	db0f      	blt.n	800f038 <tcp_slowtmr+0x1f0>
 800f018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f01e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f022:	4293      	cmp	r3, r2
 800f024:	d008      	beq.n	800f038 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	3301      	adds	r3, #1
 800f030:	b29b      	uxth	r3, r3
 800f032:	b21a      	sxth	r2, r3
 800f034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f036:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f040:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f044:	429a      	cmp	r2, r3
 800f046:	db7b      	blt.n	800f140 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f04a:	f004 fd47 	bl	8013adc <tcp_rexmit_rto_prepare>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d007      	beq.n	800f064 <tcp_slowtmr+0x21c>
 800f054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d171      	bne.n	800f140 <tcp_slowtmr+0x2f8>
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f060:	2b00      	cmp	r3, #0
 800f062:	d06d      	beq.n	800f140 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	2b02      	cmp	r3, #2
 800f06a:	d03a      	beq.n	800f0e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f072:	2b0c      	cmp	r3, #12
 800f074:	bf28      	it	cs
 800f076:	230c      	movcs	r3, #12
 800f078:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f07c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f080:	10db      	asrs	r3, r3, #3
 800f082:	b21b      	sxth	r3, r3
 800f084:	461a      	mov	r2, r3
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f08c:	4413      	add	r3, r2
 800f08e:	7efa      	ldrb	r2, [r7, #27]
 800f090:	4910      	ldr	r1, [pc, #64]	; (800f0d4 <tcp_slowtmr+0x28c>)
 800f092:	5c8a      	ldrb	r2, [r1, r2]
 800f094:	4093      	lsls	r3, r2
 800f096:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f098:	697b      	ldr	r3, [r7, #20]
 800f09a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	dc1a      	bgt.n	800f0d8 <tcp_slowtmr+0x290>
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	b21a      	sxth	r2, r3
 800f0a6:	e019      	b.n	800f0dc <tcp_slowtmr+0x294>
 800f0a8:	2000b8fc 	.word	0x2000b8fc
 800f0ac:	20004a02 	.word	0x20004a02
 800f0b0:	2000b8f8 	.word	0x2000b8f8
 800f0b4:	0801a3b8 	.word	0x0801a3b8
 800f0b8:	0801a6fc 	.word	0x0801a6fc
 800f0bc:	0801a3fc 	.word	0x0801a3fc
 800f0c0:	0801a728 	.word	0x0801a728
 800f0c4:	0801a754 	.word	0x0801a754
 800f0c8:	0801a784 	.word	0x0801a784
 800f0cc:	0801a7b8 	.word	0x0801a7b8
 800f0d0:	0801c45c 	.word	0x0801c45c
 800f0d4:	0801c44c 	.word	0x0801c44c
 800f0d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	bf28      	it	cs
 800f0f8:	4613      	movcs	r3, r2
 800f0fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f0fc:	8a7b      	ldrh	r3, [r7, #18]
 800f0fe:	085b      	lsrs	r3, r3, #1
 800f100:	b29a      	uxth	r2, r3
 800f102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f104:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f112:	005b      	lsls	r3, r3, #1
 800f114:	b29b      	uxth	r3, r3
 800f116:	429a      	cmp	r2, r3
 800f118:	d206      	bcs.n	800f128 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f11e:	005b      	lsls	r3, r3, #1
 800f120:	b29a      	uxth	r2, r3
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	2200      	movs	r2, #0
 800f136:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f13a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f13c:	f004 fd3e 	bl	8013bbc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f142:	7d1b      	ldrb	r3, [r3, #20]
 800f144:	2b06      	cmp	r3, #6
 800f146:	d111      	bne.n	800f16c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	8b5b      	ldrh	r3, [r3, #26]
 800f14c:	f003 0310 	and.w	r3, r3, #16
 800f150:	2b00      	cmp	r3, #0
 800f152:	d00b      	beq.n	800f16c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f154:	4b9c      	ldr	r3, [pc, #624]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f156:	681a      	ldr	r2, [r3, #0]
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	6a1b      	ldr	r3, [r3, #32]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	2b28      	cmp	r3, #40	; 0x28
 800f160:	d904      	bls.n	800f16c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f166:	3301      	adds	r3, #1
 800f168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	7a5b      	ldrb	r3, [r3, #9]
 800f170:	f003 0308 	and.w	r3, r3, #8
 800f174:	2b00      	cmp	r3, #0
 800f176:	d04a      	beq.n	800f20e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f17c:	2b04      	cmp	r3, #4
 800f17e:	d003      	beq.n	800f188 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f184:	2b07      	cmp	r3, #7
 800f186:	d142      	bne.n	800f20e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f188:	4b8f      	ldr	r3, [pc, #572]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f194:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f198:	4b8c      	ldr	r3, [pc, #560]	; (800f3cc <tcp_slowtmr+0x584>)
 800f19a:	440b      	add	r3, r1
 800f19c:	498c      	ldr	r1, [pc, #560]	; (800f3d0 <tcp_slowtmr+0x588>)
 800f19e:	fba1 1303 	umull	r1, r3, r1, r3
 800f1a2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d90a      	bls.n	800f1be <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1bc:	e027      	b.n	800f20e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1be:	4b82      	ldr	r3, [pc, #520]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c4:	6a1b      	ldr	r3, [r3, #32]
 800f1c6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	4b7f      	ldr	r3, [pc, #508]	; (800f3d4 <tcp_slowtmr+0x58c>)
 800f1d8:	fb03 f300 	mul.w	r3, r3, r0
 800f1dc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f1de:	497c      	ldr	r1, [pc, #496]	; (800f3d0 <tcp_slowtmr+0x588>)
 800f1e0:	fba1 1303 	umull	r1, r3, r1, r3
 800f1e4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d911      	bls.n	800f20e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f1ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1ec:	f004 ffec 	bl	80141c8 <tcp_keepalive>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f1f6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d107      	bne.n	800f20e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f204:	3301      	adds	r3, #1
 800f206:	b2da      	uxtb	r2, r3
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f212:	2b00      	cmp	r3, #0
 800f214:	d011      	beq.n	800f23a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f216:	4b6c      	ldr	r3, [pc, #432]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	1ad2      	subs	r2, r2, r3
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f226:	4619      	mov	r1, r3
 800f228:	460b      	mov	r3, r1
 800f22a:	005b      	lsls	r3, r3, #1
 800f22c:	440b      	add	r3, r1
 800f22e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f230:	429a      	cmp	r2, r3
 800f232:	d302      	bcc.n	800f23a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f236:	f000 feab 	bl	800ff90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	7d1b      	ldrb	r3, [r3, #20]
 800f23e:	2b03      	cmp	r3, #3
 800f240:	d10b      	bne.n	800f25a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f242:	4b61      	ldr	r3, [pc, #388]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	6a1b      	ldr	r3, [r3, #32]
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	2b28      	cmp	r3, #40	; 0x28
 800f24e:	d904      	bls.n	800f25a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f254:	3301      	adds	r3, #1
 800f256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25c:	7d1b      	ldrb	r3, [r3, #20]
 800f25e:	2b09      	cmp	r3, #9
 800f260:	d10b      	bne.n	800f27a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f262:	4b59      	ldr	r3, [pc, #356]	; (800f3c8 <tcp_slowtmr+0x580>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	6a1b      	ldr	r3, [r3, #32]
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	2bf0      	cmp	r3, #240	; 0xf0
 800f26e:	d904      	bls.n	800f27a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f274:	3301      	adds	r3, #1
 800f276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f27a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d060      	beq.n	800f344 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f288:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f28a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f28c:	f000 fccc 	bl	800fc28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f292:	2b00      	cmp	r3, #0
 800f294:	d010      	beq.n	800f2b8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f296:	4b50      	ldr	r3, [pc, #320]	; (800f3d8 <tcp_slowtmr+0x590>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d106      	bne.n	800f2ae <tcp_slowtmr+0x466>
 800f2a0:	4b4e      	ldr	r3, [pc, #312]	; (800f3dc <tcp_slowtmr+0x594>)
 800f2a2:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2a6:	494e      	ldr	r1, [pc, #312]	; (800f3e0 <tcp_slowtmr+0x598>)
 800f2a8:	484e      	ldr	r0, [pc, #312]	; (800f3e4 <tcp_slowtmr+0x59c>)
 800f2aa:	f008 fb8f 	bl	80179cc <iprintf>
        prev->next = pcb->next;
 800f2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b0:	68da      	ldr	r2, [r3, #12]
 800f2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b4:	60da      	str	r2, [r3, #12]
 800f2b6:	e00f      	b.n	800f2d8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f2b8:	4b47      	ldr	r3, [pc, #284]	; (800f3d8 <tcp_slowtmr+0x590>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d006      	beq.n	800f2d0 <tcp_slowtmr+0x488>
 800f2c2:	4b46      	ldr	r3, [pc, #280]	; (800f3dc <tcp_slowtmr+0x594>)
 800f2c4:	f240 5271 	movw	r2, #1393	; 0x571
 800f2c8:	4947      	ldr	r1, [pc, #284]	; (800f3e8 <tcp_slowtmr+0x5a0>)
 800f2ca:	4846      	ldr	r0, [pc, #280]	; (800f3e4 <tcp_slowtmr+0x59c>)
 800f2cc:	f008 fb7e 	bl	80179cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800f2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	4a40      	ldr	r2, [pc, #256]	; (800f3d8 <tcp_slowtmr+0x590>)
 800f2d6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f2d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d013      	beq.n	800f308 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2e8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ec:	3304      	adds	r3, #4
 800f2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2f0:	8ad2      	ldrh	r2, [r2, #22]
 800f2f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2f4:	8b09      	ldrh	r1, [r1, #24]
 800f2f6:	9102      	str	r1, [sp, #8]
 800f2f8:	9201      	str	r2, [sp, #4]
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	462b      	mov	r3, r5
 800f2fe:	4622      	mov	r2, r4
 800f300:	4601      	mov	r1, r0
 800f302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f304:	f004 feac 	bl	8014060 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30a:	691b      	ldr	r3, [r3, #16]
 800f30c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	7d1b      	ldrb	r3, [r3, #20]
 800f312:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f31e:	6838      	ldr	r0, [r7, #0]
 800f320:	f7fe fff0 	bl	800e304 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f324:	4b31      	ldr	r3, [pc, #196]	; (800f3ec <tcp_slowtmr+0x5a4>)
 800f326:	2200      	movs	r2, #0
 800f328:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d004      	beq.n	800f33a <tcp_slowtmr+0x4f2>
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f06f 010c 	mvn.w	r1, #12
 800f336:	68b8      	ldr	r0, [r7, #8]
 800f338:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f33a:	4b2c      	ldr	r3, [pc, #176]	; (800f3ec <tcp_slowtmr+0x5a4>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d037      	beq.n	800f3b2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f342:	e592      	b.n	800ee6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f346:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f350:	7f1b      	ldrb	r3, [r3, #28]
 800f352:	3301      	adds	r3, #1
 800f354:	b2da      	uxtb	r2, r3
 800f356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f358:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	7f1a      	ldrb	r2, [r3, #28]
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	7f5b      	ldrb	r3, [r3, #29]
 800f362:	429a      	cmp	r2, r3
 800f364:	d325      	bcc.n	800f3b2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	2200      	movs	r2, #0
 800f36a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f36c:	4b1f      	ldr	r3, [pc, #124]	; (800f3ec <tcp_slowtmr+0x5a4>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d00b      	beq.n	800f394 <tcp_slowtmr+0x54c>
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f384:	6912      	ldr	r2, [r2, #16]
 800f386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f388:	4610      	mov	r0, r2
 800f38a:	4798      	blx	r3
 800f38c:	4603      	mov	r3, r0
 800f38e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f392:	e002      	b.n	800f39a <tcp_slowtmr+0x552>
 800f394:	2300      	movs	r3, #0
 800f396:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f39a:	4b14      	ldr	r3, [pc, #80]	; (800f3ec <tcp_slowtmr+0x5a4>)
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d000      	beq.n	800f3a4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f3a2:	e562      	b.n	800ee6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3a4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d102      	bne.n	800f3b2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f3ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ae:	f004 f8a3 	bl	80134f8 <tcp_output>
  while (pcb != NULL) {
 800f3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f47f ad5e 	bne.w	800ee76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f3be:	4b0c      	ldr	r3, [pc, #48]	; (800f3f0 <tcp_slowtmr+0x5a8>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f3c4:	e069      	b.n	800f49a <tcp_slowtmr+0x652>
 800f3c6:	bf00      	nop
 800f3c8:	2000b8fc 	.word	0x2000b8fc
 800f3cc:	000a4cb8 	.word	0x000a4cb8
 800f3d0:	10624dd3 	.word	0x10624dd3
 800f3d4:	000124f8 	.word	0x000124f8
 800f3d8:	2000b8f8 	.word	0x2000b8f8
 800f3dc:	0801a3b8 	.word	0x0801a3b8
 800f3e0:	0801a7f0 	.word	0x0801a7f0
 800f3e4:	0801a3fc 	.word	0x0801a3fc
 800f3e8:	0801a81c 	.word	0x0801a81c
 800f3ec:	2000b8f4 	.word	0x2000b8f4
 800f3f0:	2000b908 	.word	0x2000b908
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f6:	7d1b      	ldrb	r3, [r3, #20]
 800f3f8:	2b0a      	cmp	r3, #10
 800f3fa:	d006      	beq.n	800f40a <tcp_slowtmr+0x5c2>
 800f3fc:	4b2b      	ldr	r3, [pc, #172]	; (800f4ac <tcp_slowtmr+0x664>)
 800f3fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f402:	492b      	ldr	r1, [pc, #172]	; (800f4b0 <tcp_slowtmr+0x668>)
 800f404:	482b      	ldr	r0, [pc, #172]	; (800f4b4 <tcp_slowtmr+0x66c>)
 800f406:	f008 fae1 	bl	80179cc <iprintf>
    pcb_remove = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f410:	4b29      	ldr	r3, [pc, #164]	; (800f4b8 <tcp_slowtmr+0x670>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	1ad3      	subs	r3, r2, r3
 800f41a:	2bf0      	cmp	r3, #240	; 0xf0
 800f41c:	d904      	bls.n	800f428 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f422:	3301      	adds	r3, #1
 800f424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d02f      	beq.n	800f490 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f432:	f000 fbf9 	bl	800fc28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d010      	beq.n	800f45e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f43c:	4b1f      	ldr	r3, [pc, #124]	; (800f4bc <tcp_slowtmr+0x674>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f442:	429a      	cmp	r2, r3
 800f444:	d106      	bne.n	800f454 <tcp_slowtmr+0x60c>
 800f446:	4b19      	ldr	r3, [pc, #100]	; (800f4ac <tcp_slowtmr+0x664>)
 800f448:	f240 52af 	movw	r2, #1455	; 0x5af
 800f44c:	491c      	ldr	r1, [pc, #112]	; (800f4c0 <tcp_slowtmr+0x678>)
 800f44e:	4819      	ldr	r0, [pc, #100]	; (800f4b4 <tcp_slowtmr+0x66c>)
 800f450:	f008 fabc 	bl	80179cc <iprintf>
        prev->next = pcb->next;
 800f454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f456:	68da      	ldr	r2, [r3, #12]
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	60da      	str	r2, [r3, #12]
 800f45c:	e00f      	b.n	800f47e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f45e:	4b17      	ldr	r3, [pc, #92]	; (800f4bc <tcp_slowtmr+0x674>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f464:	429a      	cmp	r2, r3
 800f466:	d006      	beq.n	800f476 <tcp_slowtmr+0x62e>
 800f468:	4b10      	ldr	r3, [pc, #64]	; (800f4ac <tcp_slowtmr+0x664>)
 800f46a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f46e:	4915      	ldr	r1, [pc, #84]	; (800f4c4 <tcp_slowtmr+0x67c>)
 800f470:	4810      	ldr	r0, [pc, #64]	; (800f4b4 <tcp_slowtmr+0x66c>)
 800f472:	f008 faab 	bl	80179cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	4a10      	ldr	r2, [pc, #64]	; (800f4bc <tcp_slowtmr+0x674>)
 800f47c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f480:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f488:	69f8      	ldr	r0, [r7, #28]
 800f48a:	f7fe ff3b 	bl	800e304 <tcp_free>
 800f48e:	e004      	b.n	800f49a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f492:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1a9      	bne.n	800f3f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4a0:	bf00      	nop
 800f4a2:	bf00      	nop
 800f4a4:	3730      	adds	r7, #48	; 0x30
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bdb0      	pop	{r4, r5, r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0801a3b8 	.word	0x0801a3b8
 800f4b0:	0801a848 	.word	0x0801a848
 800f4b4:	0801a3fc 	.word	0x0801a3fc
 800f4b8:	2000b8fc 	.word	0x2000b8fc
 800f4bc:	2000b908 	.word	0x2000b908
 800f4c0:	0801a878 	.word	0x0801a878
 800f4c4:	0801a8a0 	.word	0x0801a8a0

0800f4c8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f4ce:	4b2d      	ldr	r3, [pc, #180]	; (800f584 <tcp_fasttmr+0xbc>)
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	4b2b      	ldr	r3, [pc, #172]	; (800f584 <tcp_fasttmr+0xbc>)
 800f4d8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f4da:	4b2b      	ldr	r3, [pc, #172]	; (800f588 <tcp_fasttmr+0xc0>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f4e0:	e048      	b.n	800f574 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	7f9a      	ldrb	r2, [r3, #30]
 800f4e6:	4b27      	ldr	r3, [pc, #156]	; (800f584 <tcp_fasttmr+0xbc>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d03f      	beq.n	800f56e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f4ee:	4b25      	ldr	r3, [pc, #148]	; (800f584 <tcp_fasttmr+0xbc>)
 800f4f0:	781a      	ldrb	r2, [r3, #0]
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	8b5b      	ldrh	r3, [r3, #26]
 800f4fa:	f003 0301 	and.w	r3, r3, #1
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d010      	beq.n	800f524 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8b5b      	ldrh	r3, [r3, #26]
 800f506:	f043 0302 	orr.w	r3, r3, #2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f003 fff1 	bl	80134f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	8b5b      	ldrh	r3, [r3, #26]
 800f51a:	f023 0303 	bic.w	r3, r3, #3
 800f51e:	b29a      	uxth	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	8b5b      	ldrh	r3, [r3, #26]
 800f528:	f003 0308 	and.w	r3, r3, #8
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d009      	beq.n	800f544 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8b5b      	ldrh	r3, [r3, #26]
 800f534:	f023 0308 	bic.w	r3, r3, #8
 800f538:	b29a      	uxth	r2, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f7ff f874 	bl	800e62c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00a      	beq.n	800f568 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f552:	4b0e      	ldr	r3, [pc, #56]	; (800f58c <tcp_fasttmr+0xc4>)
 800f554:	2200      	movs	r2, #0
 800f556:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f819 	bl	800f590 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f55e:	4b0b      	ldr	r3, [pc, #44]	; (800f58c <tcp_fasttmr+0xc4>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d000      	beq.n	800f568 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f566:	e7b8      	b.n	800f4da <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	607b      	str	r3, [r7, #4]
 800f56c:	e002      	b.n	800f574 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	68db      	ldr	r3, [r3, #12]
 800f572:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1b3      	bne.n	800f4e2 <tcp_fasttmr+0x1a>
    }
  }
}
 800f57a:	bf00      	nop
 800f57c:	bf00      	nop
 800f57e:	3708      	adds	r7, #8
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20004a02 	.word	0x20004a02
 800f588:	2000b8f8 	.word	0x2000b8f8
 800f58c:	2000b8f4 	.word	0x2000b8f4

0800f590 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f590:	b590      	push	{r4, r7, lr}
 800f592:	b085      	sub	sp, #20
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d109      	bne.n	800f5b2 <tcp_process_refused_data+0x22>
 800f59e:	4b37      	ldr	r3, [pc, #220]	; (800f67c <tcp_process_refused_data+0xec>)
 800f5a0:	f240 6209 	movw	r2, #1545	; 0x609
 800f5a4:	4936      	ldr	r1, [pc, #216]	; (800f680 <tcp_process_refused_data+0xf0>)
 800f5a6:	4837      	ldr	r0, [pc, #220]	; (800f684 <tcp_process_refused_data+0xf4>)
 800f5a8:	f008 fa10 	bl	80179cc <iprintf>
 800f5ac:	f06f 030f 	mvn.w	r3, #15
 800f5b0:	e060      	b.n	800f674 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5b6:	7b5b      	ldrb	r3, [r3, #13]
 800f5b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00b      	beq.n	800f5e8 <tcp_process_refused_data+0x58>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6918      	ldr	r0, [r3, #16]
 800f5da:	2300      	movs	r3, #0
 800f5dc:	68ba      	ldr	r2, [r7, #8]
 800f5de:	6879      	ldr	r1, [r7, #4]
 800f5e0:	47a0      	blx	r4
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	73fb      	strb	r3, [r7, #15]
 800f5e6:	e007      	b.n	800f5f8 <tcp_process_refused_data+0x68>
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	68ba      	ldr	r2, [r7, #8]
 800f5ec:	6879      	ldr	r1, [r7, #4]
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f000 f8a4 	bl	800f73c <tcp_recv_null>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d12a      	bne.n	800f656 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f600:	7bbb      	ldrb	r3, [r7, #14]
 800f602:	f003 0320 	and.w	r3, r3, #32
 800f606:	2b00      	cmp	r3, #0
 800f608:	d033      	beq.n	800f672 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f60e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f612:	d005      	beq.n	800f620 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f618:	3301      	adds	r3, #1
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00b      	beq.n	800f642 <tcp_process_refused_data+0xb2>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6918      	ldr	r0, [r3, #16]
 800f634:	2300      	movs	r3, #0
 800f636:	2200      	movs	r2, #0
 800f638:	6879      	ldr	r1, [r7, #4]
 800f63a:	47a0      	blx	r4
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
 800f640:	e001      	b.n	800f646 <tcp_process_refused_data+0xb6>
 800f642:	2300      	movs	r3, #0
 800f644:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f64a:	f113 0f0d 	cmn.w	r3, #13
 800f64e:	d110      	bne.n	800f672 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f650:	f06f 030c 	mvn.w	r3, #12
 800f654:	e00e      	b.n	800f674 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f65a:	f113 0f0d 	cmn.w	r3, #13
 800f65e:	d102      	bne.n	800f666 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f660:	f06f 030c 	mvn.w	r3, #12
 800f664:	e006      	b.n	800f674 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68ba      	ldr	r2, [r7, #8]
 800f66a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f66c:	f06f 0304 	mvn.w	r3, #4
 800f670:	e000      	b.n	800f674 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f672:	2300      	movs	r3, #0
}
 800f674:	4618      	mov	r0, r3
 800f676:	3714      	adds	r7, #20
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd90      	pop	{r4, r7, pc}
 800f67c:	0801a3b8 	.word	0x0801a3b8
 800f680:	0801a8c8 	.word	0x0801a8c8
 800f684:	0801a3fc 	.word	0x0801a3fc

0800f688 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f690:	e007      	b.n	800f6a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 f80a 	bl	800f6b2 <tcp_seg_free>
    seg = next;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1f4      	bne.n	800f692 <tcp_segs_free+0xa>
  }
}
 800f6a8:	bf00      	nop
 800f6aa:	bf00      	nop
 800f6ac:	3710      	adds	r7, #16
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b082      	sub	sp, #8
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00c      	beq.n	800f6da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d004      	beq.n	800f6d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fb6d 	bl	800ddac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f6d2:	6879      	ldr	r1, [r7, #4]
 800f6d4:	2003      	movs	r0, #3
 800f6d6:	f7fd fcc5 	bl	800d064 <memp_free>
  }
}
 800f6da:	bf00      	nop
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
	...

0800f6e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <tcp_seg_copy+0x1c>
 800f6f2:	4b0f      	ldr	r3, [pc, #60]	; (800f730 <tcp_seg_copy+0x4c>)
 800f6f4:	f240 6282 	movw	r2, #1666	; 0x682
 800f6f8:	490e      	ldr	r1, [pc, #56]	; (800f734 <tcp_seg_copy+0x50>)
 800f6fa:	480f      	ldr	r0, [pc, #60]	; (800f738 <tcp_seg_copy+0x54>)
 800f6fc:	f008 f966 	bl	80179cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f700:	2003      	movs	r0, #3
 800f702:	f7fd fc5d 	bl	800cfc0 <memp_malloc>
 800f706:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d101      	bne.n	800f712 <tcp_seg_copy+0x2e>
    return NULL;
 800f70e:	2300      	movs	r3, #0
 800f710:	e00a      	b.n	800f728 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f712:	2210      	movs	r2, #16
 800f714:	6879      	ldr	r1, [r7, #4]
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f008 f942 	bl	80179a0 <memcpy>
  pbuf_ref(cseg->p);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4618      	mov	r0, r3
 800f722:	f7fe fbe9 	bl	800def8 <pbuf_ref>
  return cseg;
 800f726:	68fb      	ldr	r3, [r7, #12]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	0801a3b8 	.word	0x0801a3b8
 800f734:	0801a90c 	.word	0x0801a90c
 800f738:	0801a3fc 	.word	0x0801a3fc

0800f73c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d109      	bne.n	800f764 <tcp_recv_null+0x28>
 800f750:	4b12      	ldr	r3, [pc, #72]	; (800f79c <tcp_recv_null+0x60>)
 800f752:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f756:	4912      	ldr	r1, [pc, #72]	; (800f7a0 <tcp_recv_null+0x64>)
 800f758:	4812      	ldr	r0, [pc, #72]	; (800f7a4 <tcp_recv_null+0x68>)
 800f75a:	f008 f937 	bl	80179cc <iprintf>
 800f75e:	f06f 030f 	mvn.w	r3, #15
 800f762:	e016      	b.n	800f792 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d009      	beq.n	800f77e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	891b      	ldrh	r3, [r3, #8]
 800f76e:	4619      	mov	r1, r3
 800f770:	68b8      	ldr	r0, [r7, #8]
 800f772:	f7ff fad3 	bl	800ed1c <tcp_recved>
    pbuf_free(p);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7fe fb18 	bl	800ddac <pbuf_free>
 800f77c:	e008      	b.n	800f790 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f77e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d104      	bne.n	800f790 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f786:	68b8      	ldr	r0, [r7, #8]
 800f788:	f7fe ffba 	bl	800e700 <tcp_close>
 800f78c:	4603      	mov	r3, r0
 800f78e:	e000      	b.n	800f792 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	0801a3b8 	.word	0x0801a3b8
 800f7a0:	0801a928 	.word	0x0801a928
 800f7a4:	0801a3fc 	.word	0x0801a3fc

0800f7a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	db01      	blt.n	800f7be <tcp_kill_prio+0x16>
 800f7ba:	79fb      	ldrb	r3, [r7, #7]
 800f7bc:	e000      	b.n	800f7c0 <tcp_kill_prio+0x18>
 800f7be:	237f      	movs	r3, #127	; 0x7f
 800f7c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d034      	beq.n	800f832 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d6:	4b19      	ldr	r3, [pc, #100]	; (800f83c <tcp_kill_prio+0x94>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	617b      	str	r3, [r7, #20]
 800f7dc:	e01f      	b.n	800f81e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	7d5b      	ldrb	r3, [r3, #21]
 800f7e2:	7afa      	ldrb	r2, [r7, #11]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d80c      	bhi.n	800f802 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f7ec:	7afa      	ldrb	r2, [r7, #11]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d112      	bne.n	800f818 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7f2:	4b13      	ldr	r3, [pc, #76]	; (800f840 <tcp_kill_prio+0x98>)
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	6a1b      	ldr	r3, [r3, #32]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d80a      	bhi.n	800f818 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f802:	4b0f      	ldr	r3, [pc, #60]	; (800f840 <tcp_kill_prio+0x98>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	6a1b      	ldr	r3, [r3, #32]
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	7d5b      	ldrb	r3, [r3, #21]
 800f816:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1dc      	bne.n	800f7de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f82a:	6938      	ldr	r0, [r7, #16]
 800f82c:	f7ff f8ae 	bl	800e98c <tcp_abort>
 800f830:	e000      	b.n	800f834 <tcp_kill_prio+0x8c>
    return;
 800f832:	bf00      	nop
  }
}
 800f834:	3718      	adds	r7, #24
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	2000b8f8 	.word	0x2000b8f8
 800f840:	2000b8fc 	.word	0x2000b8fc

0800f844 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f84e:	79fb      	ldrb	r3, [r7, #7]
 800f850:	2b08      	cmp	r3, #8
 800f852:	d009      	beq.n	800f868 <tcp_kill_state+0x24>
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	2b09      	cmp	r3, #9
 800f858:	d006      	beq.n	800f868 <tcp_kill_state+0x24>
 800f85a:	4b1a      	ldr	r3, [pc, #104]	; (800f8c4 <tcp_kill_state+0x80>)
 800f85c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f860:	4919      	ldr	r1, [pc, #100]	; (800f8c8 <tcp_kill_state+0x84>)
 800f862:	481a      	ldr	r0, [pc, #104]	; (800f8cc <tcp_kill_state+0x88>)
 800f864:	f008 f8b2 	bl	80179cc <iprintf>

  inactivity = 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f86c:	2300      	movs	r3, #0
 800f86e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f870:	4b17      	ldr	r3, [pc, #92]	; (800f8d0 <tcp_kill_state+0x8c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	617b      	str	r3, [r7, #20]
 800f876:	e017      	b.n	800f8a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	7d1b      	ldrb	r3, [r3, #20]
 800f87c:	79fa      	ldrb	r2, [r7, #7]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d10f      	bne.n	800f8a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f882:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <tcp_kill_state+0x90>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d807      	bhi.n	800f8a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f892:	4b10      	ldr	r3, [pc, #64]	; (800f8d4 <tcp_kill_state+0x90>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	617b      	str	r3, [r7, #20]
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1e4      	bne.n	800f878 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	6938      	ldr	r0, [r7, #16]
 800f8b8:	f7fe ffaa 	bl	800e810 <tcp_abandon>
  }
}
 800f8bc:	bf00      	nop
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	0801a3b8 	.word	0x0801a3b8
 800f8c8:	0801a944 	.word	0x0801a944
 800f8cc:	0801a3fc 	.word	0x0801a3fc
 800f8d0:	2000b8f8 	.word	0x2000b8f8
 800f8d4:	2000b8fc 	.word	0x2000b8fc

0800f8d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8e6:	4b12      	ldr	r3, [pc, #72]	; (800f930 <tcp_kill_timewait+0x58>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	e012      	b.n	800f914 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8ee:	4b11      	ldr	r3, [pc, #68]	; (800f934 <tcp_kill_timewait+0x5c>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d807      	bhi.n	800f90e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <tcp_kill_timewait+0x5c>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1e9      	bne.n	800f8ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f920:	68b8      	ldr	r0, [r7, #8]
 800f922:	f7ff f833 	bl	800e98c <tcp_abort>
  }
}
 800f926:	bf00      	nop
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	2000b908 	.word	0x2000b908
 800f934:	2000b8fc 	.word	0x2000b8fc

0800f938 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f93e:	4b10      	ldr	r3, [pc, #64]	; (800f980 <tcp_handle_closepend+0x48>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f944:	e014      	b.n	800f970 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8b5b      	ldrh	r3, [r3, #26]
 800f950:	f003 0308 	and.w	r3, r3, #8
 800f954:	2b00      	cmp	r3, #0
 800f956:	d009      	beq.n	800f96c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8b5b      	ldrh	r3, [r3, #26]
 800f95c:	f023 0308 	bic.w	r3, r3, #8
 800f960:	b29a      	uxth	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7fe fe60 	bl	800e62c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e7      	bne.n	800f946 <tcp_handle_closepend+0xe>
  }
}
 800f976:	bf00      	nop
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}
 800f980:	2000b8f8 	.word	0x2000b8f8

0800f984 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	4603      	mov	r3, r0
 800f98c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f98e:	2001      	movs	r0, #1
 800f990:	f7fd fb16 	bl	800cfc0 <memp_malloc>
 800f994:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d126      	bne.n	800f9ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f99c:	f7ff ffcc 	bl	800f938 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9a0:	f7ff ff9a 	bl	800f8d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	f7fd fb0b 	bl	800cfc0 <memp_malloc>
 800f9aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d11b      	bne.n	800f9ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9b2:	2009      	movs	r0, #9
 800f9b4:	f7ff ff46 	bl	800f844 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9b8:	2001      	movs	r0, #1
 800f9ba:	f7fd fb01 	bl	800cfc0 <memp_malloc>
 800f9be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d111      	bne.n	800f9ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f9c6:	2008      	movs	r0, #8
 800f9c8:	f7ff ff3c 	bl	800f844 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f7fd faf7 	bl	800cfc0 <memp_malloc>
 800f9d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d107      	bne.n	800f9ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff fee3 	bl	800f7a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	f7fd faec 	bl	800cfc0 <memp_malloc>
 800f9e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d03f      	beq.n	800fa70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f9f0:	229c      	movs	r2, #156	; 0x9c
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f007 ffe1 	bl	80179bc <memset>
    pcb->prio = prio;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	79fa      	ldrb	r2, [r7, #7]
 800f9fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa10:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	22ff      	movs	r2, #255	; 0xff
 800fa1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa26:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2206      	movs	r2, #6
 800fa2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2206      	movs	r2, #6
 800fa34:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa3c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa46:	4b0d      	ldr	r3, [pc, #52]	; (800fa7c <tcp_alloc+0xf8>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa4e:	4b0c      	ldr	r3, [pc, #48]	; (800fa80 <tcp_alloc+0xfc>)
 800fa50:	781a      	ldrb	r2, [r3, #0]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	4a08      	ldr	r2, [pc, #32]	; (800fa84 <tcp_alloc+0x100>)
 800fa64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4a07      	ldr	r2, [pc, #28]	; (800fa88 <tcp_alloc+0x104>)
 800fa6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fa70:	68fb      	ldr	r3, [r7, #12]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	2000b8fc 	.word	0x2000b8fc
 800fa80:	20004a02 	.word	0x20004a02
 800fa84:	0800f73d 	.word	0x0800f73d
 800fa88:	006ddd00 	.word	0x006ddd00

0800fa8c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b084      	sub	sp, #16
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	4603      	mov	r3, r0
 800fa94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800fa96:	2040      	movs	r0, #64	; 0x40
 800fa98:	f7ff ff74 	bl	800f984 <tcp_alloc>
 800fa9c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b083      	sub	sp, #12
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
 800fab0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	611a      	str	r2, [r3, #16]
  }
}
 800fabe:	bf00      	nop
 800fac0:	370c      	adds	r7, #12
 800fac2:	46bd      	mov	sp, r7
 800fac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac8:	4770      	bx	lr
	...

0800facc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00e      	beq.n	800fafa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	7d1b      	ldrb	r3, [r3, #20]
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d106      	bne.n	800faf2 <tcp_recv+0x26>
 800fae4:	4b07      	ldr	r3, [pc, #28]	; (800fb04 <tcp_recv+0x38>)
 800fae6:	f240 72df 	movw	r2, #2015	; 0x7df
 800faea:	4907      	ldr	r1, [pc, #28]	; (800fb08 <tcp_recv+0x3c>)
 800faec:	4807      	ldr	r0, [pc, #28]	; (800fb0c <tcp_recv+0x40>)
 800faee:	f007 ff6d 	bl	80179cc <iprintf>
    pcb->recv = recv;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	683a      	ldr	r2, [r7, #0]
 800faf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800fafa:	bf00      	nop
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	0801a3b8 	.word	0x0801a3b8
 800fb08:	0801a954 	.word	0x0801a954
 800fb0c:	0801a3fc 	.word	0x0801a3fc

0800fb10 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00e      	beq.n	800fb3e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d106      	bne.n	800fb36 <tcp_sent+0x26>
 800fb28:	4b07      	ldr	r3, [pc, #28]	; (800fb48 <tcp_sent+0x38>)
 800fb2a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800fb2e:	4907      	ldr	r1, [pc, #28]	; (800fb4c <tcp_sent+0x3c>)
 800fb30:	4807      	ldr	r0, [pc, #28]	; (800fb50 <tcp_sent+0x40>)
 800fb32:	f007 ff4b 	bl	80179cc <iprintf>
    pcb->sent = sent;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	0801a3b8 	.word	0x0801a3b8
 800fb4c:	0801a97c 	.word	0x0801a97c
 800fb50:	0801a3fc 	.word	0x0801a3fc

0800fb54 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
 800fb5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d106      	bne.n	800fb7a <tcp_err+0x26>
 800fb6c:	4b07      	ldr	r3, [pc, #28]	; (800fb8c <tcp_err+0x38>)
 800fb6e:	f640 020d 	movw	r2, #2061	; 0x80d
 800fb72:	4907      	ldr	r1, [pc, #28]	; (800fb90 <tcp_err+0x3c>)
 800fb74:	4807      	ldr	r0, [pc, #28]	; (800fb94 <tcp_err+0x40>)
 800fb76:	f007 ff29 	bl	80179cc <iprintf>
    pcb->errf = err;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	683a      	ldr	r2, [r7, #0]
 800fb7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800fb82:	bf00      	nop
 800fb84:	3708      	adds	r7, #8
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	0801a3b8 	.word	0x0801a3b8
 800fb90:	0801a9a4 	.word	0x0801a9a4
 800fb94:	0801a3fc 	.word	0x0801a3fc

0800fb98 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d008      	beq.n	800fbba <tcp_accept+0x22>
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d104      	bne.n	800fbba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	619a      	str	r2, [r3, #24]
  }
}
 800fbba:	bf00      	nop
 800fbbc:	3714      	adds	r7, #20
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
	...

0800fbc8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d107      	bne.n	800fbec <tcp_poll+0x24>
 800fbdc:	4b0e      	ldr	r3, [pc, #56]	; (800fc18 <tcp_poll+0x50>)
 800fbde:	f640 023d 	movw	r2, #2109	; 0x83d
 800fbe2:	490e      	ldr	r1, [pc, #56]	; (800fc1c <tcp_poll+0x54>)
 800fbe4:	480e      	ldr	r0, [pc, #56]	; (800fc20 <tcp_poll+0x58>)
 800fbe6:	f007 fef1 	bl	80179cc <iprintf>
 800fbea:	e011      	b.n	800fc10 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	7d1b      	ldrb	r3, [r3, #20]
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d106      	bne.n	800fc02 <tcp_poll+0x3a>
 800fbf4:	4b08      	ldr	r3, [pc, #32]	; (800fc18 <tcp_poll+0x50>)
 800fbf6:	f640 023e 	movw	r2, #2110	; 0x83e
 800fbfa:	490a      	ldr	r1, [pc, #40]	; (800fc24 <tcp_poll+0x5c>)
 800fbfc:	4808      	ldr	r0, [pc, #32]	; (800fc20 <tcp_poll+0x58>)
 800fbfe:	f007 fee5 	bl	80179cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	79fa      	ldrb	r2, [r7, #7]
 800fc0e:	775a      	strb	r2, [r3, #29]
}
 800fc10:	3710      	adds	r7, #16
 800fc12:	46bd      	mov	sp, r7
 800fc14:	bd80      	pop	{r7, pc}
 800fc16:	bf00      	nop
 800fc18:	0801a3b8 	.word	0x0801a3b8
 800fc1c:	0801a9cc 	.word	0x0801a9cc
 800fc20:	0801a3fc 	.word	0x0801a3fc
 800fc24:	0801a9e4 	.word	0x0801a9e4

0800fc28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d107      	bne.n	800fc46 <tcp_pcb_purge+0x1e>
 800fc36:	4b21      	ldr	r3, [pc, #132]	; (800fcbc <tcp_pcb_purge+0x94>)
 800fc38:	f640 0251 	movw	r2, #2129	; 0x851
 800fc3c:	4920      	ldr	r1, [pc, #128]	; (800fcc0 <tcp_pcb_purge+0x98>)
 800fc3e:	4821      	ldr	r0, [pc, #132]	; (800fcc4 <tcp_pcb_purge+0x9c>)
 800fc40:	f007 fec4 	bl	80179cc <iprintf>
 800fc44:	e037      	b.n	800fcb6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	7d1b      	ldrb	r3, [r3, #20]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d033      	beq.n	800fcb6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fc52:	2b0a      	cmp	r3, #10
 800fc54:	d02f      	beq.n	800fcb6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d02b      	beq.n	800fcb6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d007      	beq.n	800fc76 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fe f89e 	bl	800ddac <pbuf_free>
      pcb->refused_data = NULL;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f000 f986 	bl	800ff90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc8a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc90:	4618      	mov	r0, r3
 800fc92:	f7ff fcf9 	bl	800f688 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff fcf4 	bl	800f688 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	66da      	str	r2, [r3, #108]	; 0x6c
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fcb6:	3708      	adds	r7, #8
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	0801a3b8 	.word	0x0801a3b8
 800fcc0:	0801aa04 	.word	0x0801aa04
 800fcc4:	0801a3fc 	.word	0x0801a3fc

0800fcc8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
 800fcd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <tcp_pcb_remove+0x1e>
 800fcd8:	4b3e      	ldr	r3, [pc, #248]	; (800fdd4 <tcp_pcb_remove+0x10c>)
 800fcda:	f640 0283 	movw	r2, #2179	; 0x883
 800fcde:	493e      	ldr	r1, [pc, #248]	; (800fdd8 <tcp_pcb_remove+0x110>)
 800fce0:	483e      	ldr	r0, [pc, #248]	; (800fddc <tcp_pcb_remove+0x114>)
 800fce2:	f007 fe73 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d106      	bne.n	800fcfa <tcp_pcb_remove+0x32>
 800fcec:	4b39      	ldr	r3, [pc, #228]	; (800fdd4 <tcp_pcb_remove+0x10c>)
 800fcee:	f640 0284 	movw	r2, #2180	; 0x884
 800fcf2:	493b      	ldr	r1, [pc, #236]	; (800fde0 <tcp_pcb_remove+0x118>)
 800fcf4:	4839      	ldr	r0, [pc, #228]	; (800fddc <tcp_pcb_remove+0x114>)
 800fcf6:	f007 fe69 	bl	80179cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	429a      	cmp	r2, r3
 800fd02:	d105      	bne.n	800fd10 <tcp_pcb_remove+0x48>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68da      	ldr	r2, [r3, #12]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	601a      	str	r2, [r3, #0]
 800fd0e:	e013      	b.n	800fd38 <tcp_pcb_remove+0x70>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	60fb      	str	r3, [r7, #12]
 800fd16:	e00c      	b.n	800fd32 <tcp_pcb_remove+0x6a>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d104      	bne.n	800fd2c <tcp_pcb_remove+0x64>
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	68da      	ldr	r2, [r3, #12]
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	60da      	str	r2, [r3, #12]
 800fd2a:	e005      	b.n	800fd38 <tcp_pcb_remove+0x70>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d1ef      	bne.n	800fd18 <tcp_pcb_remove+0x50>
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fd3e:	6838      	ldr	r0, [r7, #0]
 800fd40:	f7ff ff72 	bl	800fc28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	7d1b      	ldrb	r3, [r3, #20]
 800fd48:	2b0a      	cmp	r3, #10
 800fd4a:	d013      	beq.n	800fd74 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d00f      	beq.n	800fd74 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	8b5b      	ldrh	r3, [r3, #26]
 800fd58:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d009      	beq.n	800fd74 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	8b5b      	ldrh	r3, [r3, #26]
 800fd64:	f043 0302 	orr.w	r3, r3, #2
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd6e:	6838      	ldr	r0, [r7, #0]
 800fd70:	f003 fbc2 	bl	80134f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	7d1b      	ldrb	r3, [r3, #20]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d020      	beq.n	800fdbe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <tcp_pcb_remove+0xca>
 800fd84:	4b13      	ldr	r3, [pc, #76]	; (800fdd4 <tcp_pcb_remove+0x10c>)
 800fd86:	f640 0293 	movw	r2, #2195	; 0x893
 800fd8a:	4916      	ldr	r1, [pc, #88]	; (800fde4 <tcp_pcb_remove+0x11c>)
 800fd8c:	4813      	ldr	r0, [pc, #76]	; (800fddc <tcp_pcb_remove+0x114>)
 800fd8e:	f007 fe1d 	bl	80179cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d006      	beq.n	800fda8 <tcp_pcb_remove+0xe0>
 800fd9a:	4b0e      	ldr	r3, [pc, #56]	; (800fdd4 <tcp_pcb_remove+0x10c>)
 800fd9c:	f640 0294 	movw	r2, #2196	; 0x894
 800fda0:	4911      	ldr	r1, [pc, #68]	; (800fde8 <tcp_pcb_remove+0x120>)
 800fda2:	480e      	ldr	r0, [pc, #56]	; (800fddc <tcp_pcb_remove+0x114>)
 800fda4:	f007 fe12 	bl	80179cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d006      	beq.n	800fdbe <tcp_pcb_remove+0xf6>
 800fdb0:	4b08      	ldr	r3, [pc, #32]	; (800fdd4 <tcp_pcb_remove+0x10c>)
 800fdb2:	f640 0296 	movw	r2, #2198	; 0x896
 800fdb6:	490d      	ldr	r1, [pc, #52]	; (800fdec <tcp_pcb_remove+0x124>)
 800fdb8:	4808      	ldr	r0, [pc, #32]	; (800fddc <tcp_pcb_remove+0x114>)
 800fdba:	f007 fe07 	bl	80179cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fdca:	bf00      	nop
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop
 800fdd4:	0801a3b8 	.word	0x0801a3b8
 800fdd8:	0801aa20 	.word	0x0801aa20
 800fddc:	0801a3fc 	.word	0x0801a3fc
 800fde0:	0801aa3c 	.word	0x0801aa3c
 800fde4:	0801aa5c 	.word	0x0801aa5c
 800fde8:	0801aa74 	.word	0x0801aa74
 800fdec:	0801aa90 	.word	0x0801aa90

0800fdf0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b082      	sub	sp, #8
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <tcp_next_iss+0x1c>
 800fdfe:	4b0a      	ldr	r3, [pc, #40]	; (800fe28 <tcp_next_iss+0x38>)
 800fe00:	f640 02af 	movw	r2, #2223	; 0x8af
 800fe04:	4909      	ldr	r1, [pc, #36]	; (800fe2c <tcp_next_iss+0x3c>)
 800fe06:	480a      	ldr	r0, [pc, #40]	; (800fe30 <tcp_next_iss+0x40>)
 800fe08:	f007 fde0 	bl	80179cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fe0c:	4b09      	ldr	r3, [pc, #36]	; (800fe34 <tcp_next_iss+0x44>)
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	4b09      	ldr	r3, [pc, #36]	; (800fe38 <tcp_next_iss+0x48>)
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4413      	add	r3, r2
 800fe16:	4a07      	ldr	r2, [pc, #28]	; (800fe34 <tcp_next_iss+0x44>)
 800fe18:	6013      	str	r3, [r2, #0]
  return iss;
 800fe1a:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <tcp_next_iss+0x44>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	0801a3b8 	.word	0x0801a3b8
 800fe2c:	0801aaa8 	.word	0x0801aaa8
 800fe30:	0801a3fc 	.word	0x0801a3fc
 800fe34:	20000014 	.word	0x20000014
 800fe38:	2000b8fc 	.word	0x2000b8fc

0800fe3c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	4603      	mov	r3, r0
 800fe44:	60b9      	str	r1, [r7, #8]
 800fe46:	607a      	str	r2, [r7, #4]
 800fe48:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d106      	bne.n	800fe5e <tcp_eff_send_mss_netif+0x22>
 800fe50:	4b14      	ldr	r3, [pc, #80]	; (800fea4 <tcp_eff_send_mss_netif+0x68>)
 800fe52:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fe56:	4914      	ldr	r1, [pc, #80]	; (800fea8 <tcp_eff_send_mss_netif+0x6c>)
 800fe58:	4814      	ldr	r0, [pc, #80]	; (800feac <tcp_eff_send_mss_netif+0x70>)
 800fe5a:	f007 fdb7 	bl	80179cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d101      	bne.n	800fe68 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fe64:	89fb      	ldrh	r3, [r7, #14]
 800fe66:	e019      	b.n	800fe9c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fe6c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fe6e:	8afb      	ldrh	r3, [r7, #22]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d012      	beq.n	800fe9a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fe74:	2328      	movs	r3, #40	; 0x28
 800fe76:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fe78:	8afa      	ldrh	r2, [r7, #22]
 800fe7a:	8abb      	ldrh	r3, [r7, #20]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d904      	bls.n	800fe8a <tcp_eff_send_mss_netif+0x4e>
 800fe80:	8afa      	ldrh	r2, [r7, #22]
 800fe82:	8abb      	ldrh	r3, [r7, #20]
 800fe84:	1ad3      	subs	r3, r2, r3
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	e000      	b.n	800fe8c <tcp_eff_send_mss_netif+0x50>
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fe8e:	8a7a      	ldrh	r2, [r7, #18]
 800fe90:	89fb      	ldrh	r3, [r7, #14]
 800fe92:	4293      	cmp	r3, r2
 800fe94:	bf28      	it	cs
 800fe96:	4613      	movcs	r3, r2
 800fe98:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fe9a:	89fb      	ldrh	r3, [r7, #14]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3718      	adds	r7, #24
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	0801a3b8 	.word	0x0801a3b8
 800fea8:	0801aac4 	.word	0x0801aac4
 800feac:	0801a3fc 	.word	0x0801a3fc

0800feb0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d119      	bne.n	800fef8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fec4:	4b10      	ldr	r3, [pc, #64]	; (800ff08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fec6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800feca:	4910      	ldr	r1, [pc, #64]	; (800ff0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fecc:	4810      	ldr	r0, [pc, #64]	; (800ff10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fece:	f007 fd7d 	bl	80179cc <iprintf>

  while (pcb != NULL) {
 800fed2:	e011      	b.n	800fef8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d108      	bne.n	800fef2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fee6:	68f8      	ldr	r0, [r7, #12]
 800fee8:	f7fe fd50 	bl	800e98c <tcp_abort>
      pcb = next;
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	60fb      	str	r3, [r7, #12]
 800fef0:	e002      	b.n	800fef8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1ea      	bne.n	800fed4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fefe:	bf00      	nop
 800ff00:	bf00      	nop
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	0801a3b8 	.word	0x0801a3b8
 800ff0c:	0801aaec 	.word	0x0801aaec
 800ff10:	0801a3fc 	.word	0x0801a3fc

0800ff14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d02a      	beq.n	800ff7a <tcp_netif_ip_addr_changed+0x66>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d026      	beq.n	800ff7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ff2c:	4b15      	ldr	r3, [pc, #84]	; (800ff84 <tcp_netif_ip_addr_changed+0x70>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4619      	mov	r1, r3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f7ff ffbc 	bl	800feb0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ff38:	4b13      	ldr	r3, [pc, #76]	; (800ff88 <tcp_netif_ip_addr_changed+0x74>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	f7ff ffb6 	bl	800feb0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d017      	beq.n	800ff7a <tcp_netif_ip_addr_changed+0x66>
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d013      	beq.n	800ff7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff52:	4b0e      	ldr	r3, [pc, #56]	; (800ff8c <tcp_netif_ip_addr_changed+0x78>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	e00c      	b.n	800ff74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d103      	bne.n	800ff6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	60fb      	str	r3, [r7, #12]
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1ef      	bne.n	800ff5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ff7a:	bf00      	nop
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}
 800ff82:	bf00      	nop
 800ff84:	2000b8f8 	.word	0x2000b8f8
 800ff88:	2000b904 	.word	0x2000b904
 800ff8c:	2000b900 	.word	0x2000b900

0800ff90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b082      	sub	sp, #8
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d007      	beq.n	800ffb0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff fb6f 	bl	800f688 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ffb0:	bf00      	nop
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ffb8:	b590      	push	{r4, r7, lr}
 800ffba:	b08d      	sub	sp, #52	; 0x34
 800ffbc:	af04      	add	r7, sp, #16
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d105      	bne.n	800ffd4 <tcp_input+0x1c>
 800ffc8:	4b9b      	ldr	r3, [pc, #620]	; (8010238 <tcp_input+0x280>)
 800ffca:	2283      	movs	r2, #131	; 0x83
 800ffcc:	499b      	ldr	r1, [pc, #620]	; (801023c <tcp_input+0x284>)
 800ffce:	489c      	ldr	r0, [pc, #624]	; (8010240 <tcp_input+0x288>)
 800ffd0:	f007 fcfc 	bl	80179cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	4a9a      	ldr	r2, [pc, #616]	; (8010244 <tcp_input+0x28c>)
 800ffda:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	895b      	ldrh	r3, [r3, #10]
 800ffe0:	2b13      	cmp	r3, #19
 800ffe2:	f240 83c4 	bls.w	801076e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ffe6:	4b98      	ldr	r3, [pc, #608]	; (8010248 <tcp_input+0x290>)
 800ffe8:	695b      	ldr	r3, [r3, #20]
 800ffea:	4a97      	ldr	r2, [pc, #604]	; (8010248 <tcp_input+0x290>)
 800ffec:	6812      	ldr	r2, [r2, #0]
 800ffee:	4611      	mov	r1, r2
 800fff0:	4618      	mov	r0, r3
 800fff2:	f006 f9e1 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 800fff6:	4603      	mov	r3, r0
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	f040 83ba 	bne.w	8010772 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fffe:	4b92      	ldr	r3, [pc, #584]	; (8010248 <tcp_input+0x290>)
 8010000:	695b      	ldr	r3, [r3, #20]
 8010002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010006:	2be0      	cmp	r3, #224	; 0xe0
 8010008:	f000 83b3 	beq.w	8010772 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801000c:	4b8d      	ldr	r3, [pc, #564]	; (8010244 <tcp_input+0x28c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	899b      	ldrh	r3, [r3, #12]
 8010012:	b29b      	uxth	r3, r3
 8010014:	4618      	mov	r0, r3
 8010016:	f7fc fb1d 	bl	800c654 <lwip_htons>
 801001a:	4603      	mov	r3, r0
 801001c:	0b1b      	lsrs	r3, r3, #12
 801001e:	b29b      	uxth	r3, r3
 8010020:	b2db      	uxtb	r3, r3
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010026:	7cbb      	ldrb	r3, [r7, #18]
 8010028:	2b13      	cmp	r3, #19
 801002a:	f240 83a4 	bls.w	8010776 <tcp_input+0x7be>
 801002e:	7cbb      	ldrb	r3, [r7, #18]
 8010030:	b29a      	uxth	r2, r3
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	891b      	ldrh	r3, [r3, #8]
 8010036:	429a      	cmp	r2, r3
 8010038:	f200 839d 	bhi.w	8010776 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801003c:	7cbb      	ldrb	r3, [r7, #18]
 801003e:	b29b      	uxth	r3, r3
 8010040:	3b14      	subs	r3, #20
 8010042:	b29a      	uxth	r2, r3
 8010044:	4b81      	ldr	r3, [pc, #516]	; (801024c <tcp_input+0x294>)
 8010046:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010048:	4b81      	ldr	r3, [pc, #516]	; (8010250 <tcp_input+0x298>)
 801004a:	2200      	movs	r2, #0
 801004c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	895a      	ldrh	r2, [r3, #10]
 8010052:	7cbb      	ldrb	r3, [r7, #18]
 8010054:	b29b      	uxth	r3, r3
 8010056:	429a      	cmp	r2, r3
 8010058:	d309      	bcc.n	801006e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801005a:	4b7c      	ldr	r3, [pc, #496]	; (801024c <tcp_input+0x294>)
 801005c:	881a      	ldrh	r2, [r3, #0]
 801005e:	4b7d      	ldr	r3, [pc, #500]	; (8010254 <tcp_input+0x29c>)
 8010060:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010062:	7cbb      	ldrb	r3, [r7, #18]
 8010064:	4619      	mov	r1, r3
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7fd fe1a 	bl	800dca0 <pbuf_remove_header>
 801006c:	e04e      	b.n	801010c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d105      	bne.n	8010082 <tcp_input+0xca>
 8010076:	4b70      	ldr	r3, [pc, #448]	; (8010238 <tcp_input+0x280>)
 8010078:	22c2      	movs	r2, #194	; 0xc2
 801007a:	4977      	ldr	r1, [pc, #476]	; (8010258 <tcp_input+0x2a0>)
 801007c:	4870      	ldr	r0, [pc, #448]	; (8010240 <tcp_input+0x288>)
 801007e:	f007 fca5 	bl	80179cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010082:	2114      	movs	r1, #20
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7fd fe0b 	bl	800dca0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	895a      	ldrh	r2, [r3, #10]
 801008e:	4b71      	ldr	r3, [pc, #452]	; (8010254 <tcp_input+0x29c>)
 8010090:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010092:	4b6e      	ldr	r3, [pc, #440]	; (801024c <tcp_input+0x294>)
 8010094:	881a      	ldrh	r2, [r3, #0]
 8010096:	4b6f      	ldr	r3, [pc, #444]	; (8010254 <tcp_input+0x29c>)
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801009e:	4b6d      	ldr	r3, [pc, #436]	; (8010254 <tcp_input+0x29c>)
 80100a0:	881b      	ldrh	r3, [r3, #0]
 80100a2:	4619      	mov	r1, r3
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f7fd fdfb 	bl	800dca0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	895b      	ldrh	r3, [r3, #10]
 80100b0:	8a3a      	ldrh	r2, [r7, #16]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	f200 8361 	bhi.w	801077a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	4a64      	ldr	r2, [pc, #400]	; (8010250 <tcp_input+0x298>)
 80100c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	8a3a      	ldrh	r2, [r7, #16]
 80100c8:	4611      	mov	r1, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fd fde8 	bl	800dca0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	891a      	ldrh	r2, [r3, #8]
 80100d4:	8a3b      	ldrh	r3, [r7, #16]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	b29a      	uxth	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	895b      	ldrh	r3, [r3, #10]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d005      	beq.n	80100f2 <tcp_input+0x13a>
 80100e6:	4b54      	ldr	r3, [pc, #336]	; (8010238 <tcp_input+0x280>)
 80100e8:	22df      	movs	r2, #223	; 0xdf
 80100ea:	495c      	ldr	r1, [pc, #368]	; (801025c <tcp_input+0x2a4>)
 80100ec:	4854      	ldr	r0, [pc, #336]	; (8010240 <tcp_input+0x288>)
 80100ee:	f007 fc6d 	bl	80179cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	891a      	ldrh	r2, [r3, #8]
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	891b      	ldrh	r3, [r3, #8]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d005      	beq.n	801010c <tcp_input+0x154>
 8010100:	4b4d      	ldr	r3, [pc, #308]	; (8010238 <tcp_input+0x280>)
 8010102:	22e0      	movs	r2, #224	; 0xe0
 8010104:	4956      	ldr	r1, [pc, #344]	; (8010260 <tcp_input+0x2a8>)
 8010106:	484e      	ldr	r0, [pc, #312]	; (8010240 <tcp_input+0x288>)
 8010108:	f007 fc60 	bl	80179cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801010c:	4b4d      	ldr	r3, [pc, #308]	; (8010244 <tcp_input+0x28c>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	881b      	ldrh	r3, [r3, #0]
 8010112:	b29b      	uxth	r3, r3
 8010114:	4a4b      	ldr	r2, [pc, #300]	; (8010244 <tcp_input+0x28c>)
 8010116:	6814      	ldr	r4, [r2, #0]
 8010118:	4618      	mov	r0, r3
 801011a:	f7fc fa9b 	bl	800c654 <lwip_htons>
 801011e:	4603      	mov	r3, r0
 8010120:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010122:	4b48      	ldr	r3, [pc, #288]	; (8010244 <tcp_input+0x28c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	885b      	ldrh	r3, [r3, #2]
 8010128:	b29b      	uxth	r3, r3
 801012a:	4a46      	ldr	r2, [pc, #280]	; (8010244 <tcp_input+0x28c>)
 801012c:	6814      	ldr	r4, [r2, #0]
 801012e:	4618      	mov	r0, r3
 8010130:	f7fc fa90 	bl	800c654 <lwip_htons>
 8010134:	4603      	mov	r3, r0
 8010136:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010138:	4b42      	ldr	r3, [pc, #264]	; (8010244 <tcp_input+0x28c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	4a41      	ldr	r2, [pc, #260]	; (8010244 <tcp_input+0x28c>)
 8010140:	6814      	ldr	r4, [r2, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fc fa9b 	bl	800c67e <lwip_htonl>
 8010148:	4603      	mov	r3, r0
 801014a:	6063      	str	r3, [r4, #4]
 801014c:	6863      	ldr	r3, [r4, #4]
 801014e:	4a45      	ldr	r2, [pc, #276]	; (8010264 <tcp_input+0x2ac>)
 8010150:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010152:	4b3c      	ldr	r3, [pc, #240]	; (8010244 <tcp_input+0x28c>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	689b      	ldr	r3, [r3, #8]
 8010158:	4a3a      	ldr	r2, [pc, #232]	; (8010244 <tcp_input+0x28c>)
 801015a:	6814      	ldr	r4, [r2, #0]
 801015c:	4618      	mov	r0, r3
 801015e:	f7fc fa8e 	bl	800c67e <lwip_htonl>
 8010162:	4603      	mov	r3, r0
 8010164:	60a3      	str	r3, [r4, #8]
 8010166:	68a3      	ldr	r3, [r4, #8]
 8010168:	4a3f      	ldr	r2, [pc, #252]	; (8010268 <tcp_input+0x2b0>)
 801016a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801016c:	4b35      	ldr	r3, [pc, #212]	; (8010244 <tcp_input+0x28c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	89db      	ldrh	r3, [r3, #14]
 8010172:	b29b      	uxth	r3, r3
 8010174:	4a33      	ldr	r2, [pc, #204]	; (8010244 <tcp_input+0x28c>)
 8010176:	6814      	ldr	r4, [r2, #0]
 8010178:	4618      	mov	r0, r3
 801017a:	f7fc fa6b 	bl	800c654 <lwip_htons>
 801017e:	4603      	mov	r3, r0
 8010180:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010182:	4b30      	ldr	r3, [pc, #192]	; (8010244 <tcp_input+0x28c>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	899b      	ldrh	r3, [r3, #12]
 8010188:	b29b      	uxth	r3, r3
 801018a:	4618      	mov	r0, r3
 801018c:	f7fc fa62 	bl	800c654 <lwip_htons>
 8010190:	4603      	mov	r3, r0
 8010192:	b2db      	uxtb	r3, r3
 8010194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010198:	b2da      	uxtb	r2, r3
 801019a:	4b34      	ldr	r3, [pc, #208]	; (801026c <tcp_input+0x2b4>)
 801019c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	891a      	ldrh	r2, [r3, #8]
 80101a2:	4b33      	ldr	r3, [pc, #204]	; (8010270 <tcp_input+0x2b8>)
 80101a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80101a6:	4b31      	ldr	r3, [pc, #196]	; (801026c <tcp_input+0x2b4>)
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	f003 0303 	and.w	r3, r3, #3
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00c      	beq.n	80101cc <tcp_input+0x214>
    tcplen++;
 80101b2:	4b2f      	ldr	r3, [pc, #188]	; (8010270 <tcp_input+0x2b8>)
 80101b4:	881b      	ldrh	r3, [r3, #0]
 80101b6:	3301      	adds	r3, #1
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	4b2d      	ldr	r3, [pc, #180]	; (8010270 <tcp_input+0x2b8>)
 80101bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	891a      	ldrh	r2, [r3, #8]
 80101c2:	4b2b      	ldr	r3, [pc, #172]	; (8010270 <tcp_input+0x2b8>)
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	f200 82d9 	bhi.w	801077e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80101cc:	2300      	movs	r3, #0
 80101ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101d0:	4b28      	ldr	r3, [pc, #160]	; (8010274 <tcp_input+0x2bc>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	61fb      	str	r3, [r7, #28]
 80101d6:	e09d      	b.n	8010314 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	7d1b      	ldrb	r3, [r3, #20]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d105      	bne.n	80101ec <tcp_input+0x234>
 80101e0:	4b15      	ldr	r3, [pc, #84]	; (8010238 <tcp_input+0x280>)
 80101e2:	22fb      	movs	r2, #251	; 0xfb
 80101e4:	4924      	ldr	r1, [pc, #144]	; (8010278 <tcp_input+0x2c0>)
 80101e6:	4816      	ldr	r0, [pc, #88]	; (8010240 <tcp_input+0x288>)
 80101e8:	f007 fbf0 	bl	80179cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	2b0a      	cmp	r3, #10
 80101f2:	d105      	bne.n	8010200 <tcp_input+0x248>
 80101f4:	4b10      	ldr	r3, [pc, #64]	; (8010238 <tcp_input+0x280>)
 80101f6:	22fc      	movs	r2, #252	; 0xfc
 80101f8:	4920      	ldr	r1, [pc, #128]	; (801027c <tcp_input+0x2c4>)
 80101fa:	4811      	ldr	r0, [pc, #68]	; (8010240 <tcp_input+0x288>)
 80101fc:	f007 fbe6 	bl	80179cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	7d1b      	ldrb	r3, [r3, #20]
 8010204:	2b01      	cmp	r3, #1
 8010206:	d105      	bne.n	8010214 <tcp_input+0x25c>
 8010208:	4b0b      	ldr	r3, [pc, #44]	; (8010238 <tcp_input+0x280>)
 801020a:	22fd      	movs	r2, #253	; 0xfd
 801020c:	491c      	ldr	r1, [pc, #112]	; (8010280 <tcp_input+0x2c8>)
 801020e:	480c      	ldr	r0, [pc, #48]	; (8010240 <tcp_input+0x288>)
 8010210:	f007 fbdc 	bl	80179cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	7a1b      	ldrb	r3, [r3, #8]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d033      	beq.n	8010284 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	7a1a      	ldrb	r2, [r3, #8]
 8010220:	4b09      	ldr	r3, [pc, #36]	; (8010248 <tcp_input+0x290>)
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010228:	3301      	adds	r3, #1
 801022a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801022c:	429a      	cmp	r2, r3
 801022e:	d029      	beq.n	8010284 <tcp_input+0x2cc>
      prev = pcb;
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	61bb      	str	r3, [r7, #24]
      continue;
 8010234:	e06b      	b.n	801030e <tcp_input+0x356>
 8010236:	bf00      	nop
 8010238:	0801ab20 	.word	0x0801ab20
 801023c:	0801ab54 	.word	0x0801ab54
 8010240:	0801ab6c 	.word	0x0801ab6c
 8010244:	20004a14 	.word	0x20004a14
 8010248:	200081e4 	.word	0x200081e4
 801024c:	20004a18 	.word	0x20004a18
 8010250:	20004a1c 	.word	0x20004a1c
 8010254:	20004a1a 	.word	0x20004a1a
 8010258:	0801ab94 	.word	0x0801ab94
 801025c:	0801aba4 	.word	0x0801aba4
 8010260:	0801abb0 	.word	0x0801abb0
 8010264:	20004a24 	.word	0x20004a24
 8010268:	20004a28 	.word	0x20004a28
 801026c:	20004a30 	.word	0x20004a30
 8010270:	20004a2e 	.word	0x20004a2e
 8010274:	2000b8f8 	.word	0x2000b8f8
 8010278:	0801abd0 	.word	0x0801abd0
 801027c:	0801abf8 	.word	0x0801abf8
 8010280:	0801ac24 	.word	0x0801ac24
    }

    if (pcb->remote_port == tcphdr->src &&
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	8b1a      	ldrh	r2, [r3, #24]
 8010288:	4b94      	ldr	r3, [pc, #592]	; (80104dc <tcp_input+0x524>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	b29b      	uxth	r3, r3
 8010290:	429a      	cmp	r2, r3
 8010292:	d13a      	bne.n	801030a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	8ada      	ldrh	r2, [r3, #22]
 8010298:	4b90      	ldr	r3, [pc, #576]	; (80104dc <tcp_input+0x524>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	885b      	ldrh	r3, [r3, #2]
 801029e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d132      	bne.n	801030a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	685a      	ldr	r2, [r3, #4]
 80102a8:	4b8d      	ldr	r3, [pc, #564]	; (80104e0 <tcp_input+0x528>)
 80102aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d12c      	bne.n	801030a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	4b8a      	ldr	r3, [pc, #552]	; (80104e0 <tcp_input+0x528>)
 80102b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d126      	bne.n	801030a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	68db      	ldr	r3, [r3, #12]
 80102c0:	69fa      	ldr	r2, [r7, #28]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d106      	bne.n	80102d4 <tcp_input+0x31c>
 80102c6:	4b87      	ldr	r3, [pc, #540]	; (80104e4 <tcp_input+0x52c>)
 80102c8:	f240 120d 	movw	r2, #269	; 0x10d
 80102cc:	4986      	ldr	r1, [pc, #536]	; (80104e8 <tcp_input+0x530>)
 80102ce:	4887      	ldr	r0, [pc, #540]	; (80104ec <tcp_input+0x534>)
 80102d0:	f007 fb7c 	bl	80179cc <iprintf>
      if (prev != NULL) {
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00a      	beq.n	80102f0 <tcp_input+0x338>
        prev->next = pcb->next;
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	68da      	ldr	r2, [r3, #12]
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80102e2:	4b83      	ldr	r3, [pc, #524]	; (80104f0 <tcp_input+0x538>)
 80102e4:	681a      	ldr	r2, [r3, #0]
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80102ea:	4a81      	ldr	r2, [pc, #516]	; (80104f0 <tcp_input+0x538>)
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	69fa      	ldr	r2, [r7, #28]
 80102f6:	429a      	cmp	r2, r3
 80102f8:	d111      	bne.n	801031e <tcp_input+0x366>
 80102fa:	4b7a      	ldr	r3, [pc, #488]	; (80104e4 <tcp_input+0x52c>)
 80102fc:	f240 1215 	movw	r2, #277	; 0x115
 8010300:	497c      	ldr	r1, [pc, #496]	; (80104f4 <tcp_input+0x53c>)
 8010302:	487a      	ldr	r0, [pc, #488]	; (80104ec <tcp_input+0x534>)
 8010304:	f007 fb62 	bl	80179cc <iprintf>
      break;
 8010308:	e009      	b.n	801031e <tcp_input+0x366>
    }
    prev = pcb;
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	61fb      	str	r3, [r7, #28]
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	2b00      	cmp	r3, #0
 8010318:	f47f af5e 	bne.w	80101d8 <tcp_input+0x220>
 801031c:	e000      	b.n	8010320 <tcp_input+0x368>
      break;
 801031e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	2b00      	cmp	r3, #0
 8010324:	f040 8095 	bne.w	8010452 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010328:	4b73      	ldr	r3, [pc, #460]	; (80104f8 <tcp_input+0x540>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	61fb      	str	r3, [r7, #28]
 801032e:	e03f      	b.n	80103b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	7d1b      	ldrb	r3, [r3, #20]
 8010334:	2b0a      	cmp	r3, #10
 8010336:	d006      	beq.n	8010346 <tcp_input+0x38e>
 8010338:	4b6a      	ldr	r3, [pc, #424]	; (80104e4 <tcp_input+0x52c>)
 801033a:	f240 121f 	movw	r2, #287	; 0x11f
 801033e:	496f      	ldr	r1, [pc, #444]	; (80104fc <tcp_input+0x544>)
 8010340:	486a      	ldr	r0, [pc, #424]	; (80104ec <tcp_input+0x534>)
 8010342:	f007 fb43 	bl	80179cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	7a1b      	ldrb	r3, [r3, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d009      	beq.n	8010362 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	7a1a      	ldrb	r2, [r3, #8]
 8010352:	4b63      	ldr	r3, [pc, #396]	; (80104e0 <tcp_input+0x528>)
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801035a:	3301      	adds	r3, #1
 801035c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801035e:	429a      	cmp	r2, r3
 8010360:	d122      	bne.n	80103a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010362:	69fb      	ldr	r3, [r7, #28]
 8010364:	8b1a      	ldrh	r2, [r3, #24]
 8010366:	4b5d      	ldr	r3, [pc, #372]	; (80104dc <tcp_input+0x524>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	881b      	ldrh	r3, [r3, #0]
 801036c:	b29b      	uxth	r3, r3
 801036e:	429a      	cmp	r2, r3
 8010370:	d11b      	bne.n	80103aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010372:	69fb      	ldr	r3, [r7, #28]
 8010374:	8ada      	ldrh	r2, [r3, #22]
 8010376:	4b59      	ldr	r3, [pc, #356]	; (80104dc <tcp_input+0x524>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	885b      	ldrh	r3, [r3, #2]
 801037c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801037e:	429a      	cmp	r2, r3
 8010380:	d113      	bne.n	80103aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	685a      	ldr	r2, [r3, #4]
 8010386:	4b56      	ldr	r3, [pc, #344]	; (80104e0 <tcp_input+0x528>)
 8010388:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801038a:	429a      	cmp	r2, r3
 801038c:	d10d      	bne.n	80103aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	4b53      	ldr	r3, [pc, #332]	; (80104e0 <tcp_input+0x528>)
 8010394:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010396:	429a      	cmp	r2, r3
 8010398:	d107      	bne.n	80103aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801039a:	69f8      	ldr	r0, [r7, #28]
 801039c:	f000 fb54 	bl	8010a48 <tcp_timewait_input>
        }
        pbuf_free(p);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f7fd fd03 	bl	800ddac <pbuf_free>
        return;
 80103a6:	e1f0      	b.n	801078a <tcp_input+0x7d2>
        continue;
 80103a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	68db      	ldr	r3, [r3, #12]
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	69fb      	ldr	r3, [r7, #28]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d1bc      	bne.n	8010330 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80103b6:	2300      	movs	r3, #0
 80103b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80103ba:	4b51      	ldr	r3, [pc, #324]	; (8010500 <tcp_input+0x548>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	617b      	str	r3, [r7, #20]
 80103c0:	e02a      	b.n	8010418 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	7a1b      	ldrb	r3, [r3, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d00c      	beq.n	80103e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	7a1a      	ldrb	r2, [r3, #8]
 80103ce:	4b44      	ldr	r3, [pc, #272]	; (80104e0 <tcp_input+0x528>)
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103d6:	3301      	adds	r3, #1
 80103d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80103da:	429a      	cmp	r2, r3
 80103dc:	d002      	beq.n	80103e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	61bb      	str	r3, [r7, #24]
        continue;
 80103e2:	e016      	b.n	8010412 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	8ada      	ldrh	r2, [r3, #22]
 80103e8:	4b3c      	ldr	r3, [pc, #240]	; (80104dc <tcp_input+0x524>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	885b      	ldrh	r3, [r3, #2]
 80103ee:	b29b      	uxth	r3, r3
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d10c      	bne.n	801040e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	4b39      	ldr	r3, [pc, #228]	; (80104e0 <tcp_input+0x528>)
 80103fa:	695b      	ldr	r3, [r3, #20]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d00f      	beq.n	8010420 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00d      	beq.n	8010422 <tcp_input+0x46a>
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d009      	beq.n	8010422 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	617b      	str	r3, [r7, #20]
 8010418:	697b      	ldr	r3, [r7, #20]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d1d1      	bne.n	80103c2 <tcp_input+0x40a>
 801041e:	e000      	b.n	8010422 <tcp_input+0x46a>
            break;
 8010420:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d014      	beq.n	8010452 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d00a      	beq.n	8010444 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	68da      	ldr	r2, [r3, #12]
 8010432:	69bb      	ldr	r3, [r7, #24]
 8010434:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010436:	4b32      	ldr	r3, [pc, #200]	; (8010500 <tcp_input+0x548>)
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801043e:	4a30      	ldr	r2, [pc, #192]	; (8010500 <tcp_input+0x548>)
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010444:	6978      	ldr	r0, [r7, #20]
 8010446:	f000 fa01 	bl	801084c <tcp_listen_input>
      }
      pbuf_free(p);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f7fd fcae 	bl	800ddac <pbuf_free>
      return;
 8010450:	e19b      	b.n	801078a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	2b00      	cmp	r3, #0
 8010456:	f000 8160 	beq.w	801071a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801045a:	4b2a      	ldr	r3, [pc, #168]	; (8010504 <tcp_input+0x54c>)
 801045c:	2200      	movs	r2, #0
 801045e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	891a      	ldrh	r2, [r3, #8]
 8010464:	4b27      	ldr	r3, [pc, #156]	; (8010504 <tcp_input+0x54c>)
 8010466:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010468:	4a26      	ldr	r2, [pc, #152]	; (8010504 <tcp_input+0x54c>)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801046e:	4b1b      	ldr	r3, [pc, #108]	; (80104dc <tcp_input+0x524>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	4a24      	ldr	r2, [pc, #144]	; (8010504 <tcp_input+0x54c>)
 8010474:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010476:	4b24      	ldr	r3, [pc, #144]	; (8010508 <tcp_input+0x550>)
 8010478:	2200      	movs	r2, #0
 801047a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801047c:	4b23      	ldr	r3, [pc, #140]	; (801050c <tcp_input+0x554>)
 801047e:	2200      	movs	r2, #0
 8010480:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010482:	4b23      	ldr	r3, [pc, #140]	; (8010510 <tcp_input+0x558>)
 8010484:	2200      	movs	r2, #0
 8010486:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010488:	4b22      	ldr	r3, [pc, #136]	; (8010514 <tcp_input+0x55c>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 0308 	and.w	r3, r3, #8
 8010490:	2b00      	cmp	r3, #0
 8010492:	d006      	beq.n	80104a2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	7b5b      	ldrb	r3, [r3, #13]
 8010498:	f043 0301 	orr.w	r3, r3, #1
 801049c:	b2da      	uxtb	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d038      	beq.n	801051c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104aa:	69f8      	ldr	r0, [r7, #28]
 80104ac:	f7ff f870 	bl	800f590 <tcp_process_refused_data>
 80104b0:	4603      	mov	r3, r0
 80104b2:	f113 0f0d 	cmn.w	r3, #13
 80104b6:	d007      	beq.n	80104c8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104b8:	69fb      	ldr	r3, [r7, #28]
 80104ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d02d      	beq.n	801051c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80104c0:	4b15      	ldr	r3, [pc, #84]	; (8010518 <tcp_input+0x560>)
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d029      	beq.n	801051c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80104c8:	69fb      	ldr	r3, [r7, #28]
 80104ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	f040 8104 	bne.w	80106da <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80104d2:	69f8      	ldr	r0, [r7, #28]
 80104d4:	f003 fe16 	bl	8014104 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80104d8:	e0ff      	b.n	80106da <tcp_input+0x722>
 80104da:	bf00      	nop
 80104dc:	20004a14 	.word	0x20004a14
 80104e0:	200081e4 	.word	0x200081e4
 80104e4:	0801ab20 	.word	0x0801ab20
 80104e8:	0801ac4c 	.word	0x0801ac4c
 80104ec:	0801ab6c 	.word	0x0801ab6c
 80104f0:	2000b8f8 	.word	0x2000b8f8
 80104f4:	0801ac78 	.word	0x0801ac78
 80104f8:	2000b908 	.word	0x2000b908
 80104fc:	0801aca4 	.word	0x0801aca4
 8010500:	2000b900 	.word	0x2000b900
 8010504:	20004a04 	.word	0x20004a04
 8010508:	20004a34 	.word	0x20004a34
 801050c:	20004a31 	.word	0x20004a31
 8010510:	20004a2c 	.word	0x20004a2c
 8010514:	20004a30 	.word	0x20004a30
 8010518:	20004a2e 	.word	0x20004a2e
      }
    }
    tcp_input_pcb = pcb;
 801051c:	4a9c      	ldr	r2, [pc, #624]	; (8010790 <tcp_input+0x7d8>)
 801051e:	69fb      	ldr	r3, [r7, #28]
 8010520:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010522:	69f8      	ldr	r0, [r7, #28]
 8010524:	f000 fb0a 	bl	8010b3c <tcp_process>
 8010528:	4603      	mov	r3, r0
 801052a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801052c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010530:	f113 0f0d 	cmn.w	r3, #13
 8010534:	f000 80d3 	beq.w	80106de <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010538:	4b96      	ldr	r3, [pc, #600]	; (8010794 <tcp_input+0x7dc>)
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	f003 0308 	and.w	r3, r3, #8
 8010540:	2b00      	cmp	r3, #0
 8010542:	d015      	beq.n	8010570 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801054a:	2b00      	cmp	r3, #0
 801054c:	d008      	beq.n	8010560 <tcp_input+0x5a8>
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010554:	69fa      	ldr	r2, [r7, #28]
 8010556:	6912      	ldr	r2, [r2, #16]
 8010558:	f06f 010d 	mvn.w	r1, #13
 801055c:	4610      	mov	r0, r2
 801055e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010560:	69f9      	ldr	r1, [r7, #28]
 8010562:	488d      	ldr	r0, [pc, #564]	; (8010798 <tcp_input+0x7e0>)
 8010564:	f7ff fbb0 	bl	800fcc8 <tcp_pcb_remove>
        tcp_free(pcb);
 8010568:	69f8      	ldr	r0, [r7, #28]
 801056a:	f7fd fecb 	bl	800e304 <tcp_free>
 801056e:	e0c1      	b.n	80106f4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010574:	4b89      	ldr	r3, [pc, #548]	; (801079c <tcp_input+0x7e4>)
 8010576:	881b      	ldrh	r3, [r3, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d01d      	beq.n	80105b8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801057c:	4b87      	ldr	r3, [pc, #540]	; (801079c <tcp_input+0x7e4>)
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010582:	69fb      	ldr	r3, [r7, #28]
 8010584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010588:	2b00      	cmp	r3, #0
 801058a:	d00a      	beq.n	80105a2 <tcp_input+0x5ea>
 801058c:	69fb      	ldr	r3, [r7, #28]
 801058e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010592:	69fa      	ldr	r2, [r7, #28]
 8010594:	6910      	ldr	r0, [r2, #16]
 8010596:	89fa      	ldrh	r2, [r7, #14]
 8010598:	69f9      	ldr	r1, [r7, #28]
 801059a:	4798      	blx	r3
 801059c:	4603      	mov	r3, r0
 801059e:	74fb      	strb	r3, [r7, #19]
 80105a0:	e001      	b.n	80105a6 <tcp_input+0x5ee>
 80105a2:	2300      	movs	r3, #0
 80105a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80105a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80105aa:	f113 0f0d 	cmn.w	r3, #13
 80105ae:	f000 8098 	beq.w	80106e2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80105b2:	4b7a      	ldr	r3, [pc, #488]	; (801079c <tcp_input+0x7e4>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80105b8:	69f8      	ldr	r0, [r7, #28]
 80105ba:	f000 f907 	bl	80107cc <tcp_input_delayed_close>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	f040 8090 	bne.w	80106e6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80105c6:	4b76      	ldr	r3, [pc, #472]	; (80107a0 <tcp_input+0x7e8>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d041      	beq.n	8010652 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <tcp_input+0x62c>
 80105d6:	4b73      	ldr	r3, [pc, #460]	; (80107a4 <tcp_input+0x7ec>)
 80105d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80105dc:	4972      	ldr	r1, [pc, #456]	; (80107a8 <tcp_input+0x7f0>)
 80105de:	4873      	ldr	r0, [pc, #460]	; (80107ac <tcp_input+0x7f4>)
 80105e0:	f007 f9f4 	bl	80179cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	8b5b      	ldrh	r3, [r3, #26]
 80105e8:	f003 0310 	and.w	r3, r3, #16
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d008      	beq.n	8010602 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80105f0:	4b6b      	ldr	r3, [pc, #428]	; (80107a0 <tcp_input+0x7e8>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fd fbd9 	bl	800ddac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80105fa:	69f8      	ldr	r0, [r7, #28]
 80105fc:	f7fe f9c6 	bl	800e98c <tcp_abort>
            goto aborted;
 8010600:	e078      	b.n	80106f4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010608:	2b00      	cmp	r3, #0
 801060a:	d00c      	beq.n	8010626 <tcp_input+0x66e>
 801060c:	69fb      	ldr	r3, [r7, #28]
 801060e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	6918      	ldr	r0, [r3, #16]
 8010616:	4b62      	ldr	r3, [pc, #392]	; (80107a0 <tcp_input+0x7e8>)
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	2300      	movs	r3, #0
 801061c:	69f9      	ldr	r1, [r7, #28]
 801061e:	47a0      	blx	r4
 8010620:	4603      	mov	r3, r0
 8010622:	74fb      	strb	r3, [r7, #19]
 8010624:	e008      	b.n	8010638 <tcp_input+0x680>
 8010626:	4b5e      	ldr	r3, [pc, #376]	; (80107a0 <tcp_input+0x7e8>)
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	2300      	movs	r3, #0
 801062c:	69f9      	ldr	r1, [r7, #28]
 801062e:	2000      	movs	r0, #0
 8010630:	f7ff f884 	bl	800f73c <tcp_recv_null>
 8010634:	4603      	mov	r3, r0
 8010636:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801063c:	f113 0f0d 	cmn.w	r3, #13
 8010640:	d053      	beq.n	80106ea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d003      	beq.n	8010652 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801064a:	4b55      	ldr	r3, [pc, #340]	; (80107a0 <tcp_input+0x7e8>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010652:	4b50      	ldr	r3, [pc, #320]	; (8010794 <tcp_input+0x7dc>)
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	f003 0320 	and.w	r3, r3, #32
 801065a:	2b00      	cmp	r3, #0
 801065c:	d030      	beq.n	80106c0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801065e:	69fb      	ldr	r3, [r7, #28]
 8010660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010662:	2b00      	cmp	r3, #0
 8010664:	d009      	beq.n	801067a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801066a:	7b5a      	ldrb	r2, [r3, #13]
 801066c:	69fb      	ldr	r3, [r7, #28]
 801066e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010670:	f042 0220 	orr.w	r2, r2, #32
 8010674:	b2d2      	uxtb	r2, r2
 8010676:	735a      	strb	r2, [r3, #13]
 8010678:	e022      	b.n	80106c0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801067a:	69fb      	ldr	r3, [r7, #28]
 801067c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801067e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010682:	d005      	beq.n	8010690 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010688:	3301      	adds	r3, #1
 801068a:	b29a      	uxth	r2, r3
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00b      	beq.n	80106b2 <tcp_input+0x6fa>
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	6918      	ldr	r0, [r3, #16]
 80106a4:	2300      	movs	r3, #0
 80106a6:	2200      	movs	r2, #0
 80106a8:	69f9      	ldr	r1, [r7, #28]
 80106aa:	47a0      	blx	r4
 80106ac:	4603      	mov	r3, r0
 80106ae:	74fb      	strb	r3, [r7, #19]
 80106b0:	e001      	b.n	80106b6 <tcp_input+0x6fe>
 80106b2:	2300      	movs	r3, #0
 80106b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80106b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106ba:	f113 0f0d 	cmn.w	r3, #13
 80106be:	d016      	beq.n	80106ee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80106c0:	4b33      	ldr	r3, [pc, #204]	; (8010790 <tcp_input+0x7d8>)
 80106c2:	2200      	movs	r2, #0
 80106c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80106c6:	69f8      	ldr	r0, [r7, #28]
 80106c8:	f000 f880 	bl	80107cc <tcp_input_delayed_close>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10f      	bne.n	80106f2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80106d2:	69f8      	ldr	r0, [r7, #28]
 80106d4:	f002 ff10 	bl	80134f8 <tcp_output>
 80106d8:	e00c      	b.n	80106f4 <tcp_input+0x73c>
        goto aborted;
 80106da:	bf00      	nop
 80106dc:	e00a      	b.n	80106f4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80106de:	bf00      	nop
 80106e0:	e008      	b.n	80106f4 <tcp_input+0x73c>
              goto aborted;
 80106e2:	bf00      	nop
 80106e4:	e006      	b.n	80106f4 <tcp_input+0x73c>
          goto aborted;
 80106e6:	bf00      	nop
 80106e8:	e004      	b.n	80106f4 <tcp_input+0x73c>
            goto aborted;
 80106ea:	bf00      	nop
 80106ec:	e002      	b.n	80106f4 <tcp_input+0x73c>
              goto aborted;
 80106ee:	bf00      	nop
 80106f0:	e000      	b.n	80106f4 <tcp_input+0x73c>
          goto aborted;
 80106f2:	bf00      	nop
    tcp_input_pcb = NULL;
 80106f4:	4b26      	ldr	r3, [pc, #152]	; (8010790 <tcp_input+0x7d8>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80106fa:	4b29      	ldr	r3, [pc, #164]	; (80107a0 <tcp_input+0x7e8>)
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010700:	4b2b      	ldr	r3, [pc, #172]	; (80107b0 <tcp_input+0x7f8>)
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d03f      	beq.n	8010788 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010708:	4b29      	ldr	r3, [pc, #164]	; (80107b0 <tcp_input+0x7f8>)
 801070a:	685b      	ldr	r3, [r3, #4]
 801070c:	4618      	mov	r0, r3
 801070e:	f7fd fb4d 	bl	800ddac <pbuf_free>
      inseg.p = NULL;
 8010712:	4b27      	ldr	r3, [pc, #156]	; (80107b0 <tcp_input+0x7f8>)
 8010714:	2200      	movs	r2, #0
 8010716:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010718:	e036      	b.n	8010788 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801071a:	4b26      	ldr	r3, [pc, #152]	; (80107b4 <tcp_input+0x7fc>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	899b      	ldrh	r3, [r3, #12]
 8010720:	b29b      	uxth	r3, r3
 8010722:	4618      	mov	r0, r3
 8010724:	f7fb ff96 	bl	800c654 <lwip_htons>
 8010728:	4603      	mov	r3, r0
 801072a:	b2db      	uxtb	r3, r3
 801072c:	f003 0304 	and.w	r3, r3, #4
 8010730:	2b00      	cmp	r3, #0
 8010732:	d118      	bne.n	8010766 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010734:	4b20      	ldr	r3, [pc, #128]	; (80107b8 <tcp_input+0x800>)
 8010736:	6819      	ldr	r1, [r3, #0]
 8010738:	4b20      	ldr	r3, [pc, #128]	; (80107bc <tcp_input+0x804>)
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	4b20      	ldr	r3, [pc, #128]	; (80107c0 <tcp_input+0x808>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010744:	4b1b      	ldr	r3, [pc, #108]	; (80107b4 <tcp_input+0x7fc>)
 8010746:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010748:	885b      	ldrh	r3, [r3, #2]
 801074a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801074c:	4a19      	ldr	r2, [pc, #100]	; (80107b4 <tcp_input+0x7fc>)
 801074e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010750:	8812      	ldrh	r2, [r2, #0]
 8010752:	b292      	uxth	r2, r2
 8010754:	9202      	str	r2, [sp, #8]
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	4b1a      	ldr	r3, [pc, #104]	; (80107c4 <tcp_input+0x80c>)
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4b1a      	ldr	r3, [pc, #104]	; (80107c8 <tcp_input+0x810>)
 801075e:	4602      	mov	r2, r0
 8010760:	2000      	movs	r0, #0
 8010762:	f003 fc7d 	bl	8014060 <tcp_rst>
    pbuf_free(p);
 8010766:	6878      	ldr	r0, [r7, #4]
 8010768:	f7fd fb20 	bl	800ddac <pbuf_free>
  return;
 801076c:	e00c      	b.n	8010788 <tcp_input+0x7d0>
    goto dropped;
 801076e:	bf00      	nop
 8010770:	e006      	b.n	8010780 <tcp_input+0x7c8>
    goto dropped;
 8010772:	bf00      	nop
 8010774:	e004      	b.n	8010780 <tcp_input+0x7c8>
    goto dropped;
 8010776:	bf00      	nop
 8010778:	e002      	b.n	8010780 <tcp_input+0x7c8>
      goto dropped;
 801077a:	bf00      	nop
 801077c:	e000      	b.n	8010780 <tcp_input+0x7c8>
      goto dropped;
 801077e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010780:	6878      	ldr	r0, [r7, #4]
 8010782:	f7fd fb13 	bl	800ddac <pbuf_free>
 8010786:	e000      	b.n	801078a <tcp_input+0x7d2>
  return;
 8010788:	bf00      	nop
}
 801078a:	3724      	adds	r7, #36	; 0x24
 801078c:	46bd      	mov	sp, r7
 801078e:	bd90      	pop	{r4, r7, pc}
 8010790:	2000b90c 	.word	0x2000b90c
 8010794:	20004a31 	.word	0x20004a31
 8010798:	2000b8f8 	.word	0x2000b8f8
 801079c:	20004a2c 	.word	0x20004a2c
 80107a0:	20004a34 	.word	0x20004a34
 80107a4:	0801ab20 	.word	0x0801ab20
 80107a8:	0801acd4 	.word	0x0801acd4
 80107ac:	0801ab6c 	.word	0x0801ab6c
 80107b0:	20004a04 	.word	0x20004a04
 80107b4:	20004a14 	.word	0x20004a14
 80107b8:	20004a28 	.word	0x20004a28
 80107bc:	20004a2e 	.word	0x20004a2e
 80107c0:	20004a24 	.word	0x20004a24
 80107c4:	200081f4 	.word	0x200081f4
 80107c8:	200081f8 	.word	0x200081f8

080107cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <tcp_input_delayed_close+0x1c>
 80107da:	4b17      	ldr	r3, [pc, #92]	; (8010838 <tcp_input_delayed_close+0x6c>)
 80107dc:	f240 225a 	movw	r2, #602	; 0x25a
 80107e0:	4916      	ldr	r1, [pc, #88]	; (801083c <tcp_input_delayed_close+0x70>)
 80107e2:	4817      	ldr	r0, [pc, #92]	; (8010840 <tcp_input_delayed_close+0x74>)
 80107e4:	f007 f8f2 	bl	80179cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80107e8:	4b16      	ldr	r3, [pc, #88]	; (8010844 <tcp_input_delayed_close+0x78>)
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	f003 0310 	and.w	r3, r3, #16
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d01c      	beq.n	801082e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	8b5b      	ldrh	r3, [r3, #26]
 80107f8:	f003 0310 	and.w	r3, r3, #16
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10d      	bne.n	801081c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010806:	2b00      	cmp	r3, #0
 8010808:	d008      	beq.n	801081c <tcp_input_delayed_close+0x50>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	6912      	ldr	r2, [r2, #16]
 8010814:	f06f 010e 	mvn.w	r1, #14
 8010818:	4610      	mov	r0, r2
 801081a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	480a      	ldr	r0, [pc, #40]	; (8010848 <tcp_input_delayed_close+0x7c>)
 8010820:	f7ff fa52 	bl	800fcc8 <tcp_pcb_remove>
    tcp_free(pcb);
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	f7fd fd6d 	bl	800e304 <tcp_free>
    return 1;
 801082a:	2301      	movs	r3, #1
 801082c:	e000      	b.n	8010830 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3708      	adds	r7, #8
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}
 8010838:	0801ab20 	.word	0x0801ab20
 801083c:	0801acf0 	.word	0x0801acf0
 8010840:	0801ab6c 	.word	0x0801ab6c
 8010844:	20004a31 	.word	0x20004a31
 8010848:	2000b8f8 	.word	0x2000b8f8

0801084c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08b      	sub	sp, #44	; 0x2c
 8010850:	af04      	add	r7, sp, #16
 8010852:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010854:	4b6f      	ldr	r3, [pc, #444]	; (8010a14 <tcp_listen_input+0x1c8>)
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	f003 0304 	and.w	r3, r3, #4
 801085c:	2b00      	cmp	r3, #0
 801085e:	f040 80d2 	bne.w	8010a06 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d106      	bne.n	8010876 <tcp_listen_input+0x2a>
 8010868:	4b6b      	ldr	r3, [pc, #428]	; (8010a18 <tcp_listen_input+0x1cc>)
 801086a:	f240 2281 	movw	r2, #641	; 0x281
 801086e:	496b      	ldr	r1, [pc, #428]	; (8010a1c <tcp_listen_input+0x1d0>)
 8010870:	486b      	ldr	r0, [pc, #428]	; (8010a20 <tcp_listen_input+0x1d4>)
 8010872:	f007 f8ab 	bl	80179cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010876:	4b67      	ldr	r3, [pc, #412]	; (8010a14 <tcp_listen_input+0x1c8>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 0310 	and.w	r3, r3, #16
 801087e:	2b00      	cmp	r3, #0
 8010880:	d019      	beq.n	80108b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010882:	4b68      	ldr	r3, [pc, #416]	; (8010a24 <tcp_listen_input+0x1d8>)
 8010884:	6819      	ldr	r1, [r3, #0]
 8010886:	4b68      	ldr	r3, [pc, #416]	; (8010a28 <tcp_listen_input+0x1dc>)
 8010888:	881b      	ldrh	r3, [r3, #0]
 801088a:	461a      	mov	r2, r3
 801088c:	4b67      	ldr	r3, [pc, #412]	; (8010a2c <tcp_listen_input+0x1e0>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010892:	4b67      	ldr	r3, [pc, #412]	; (8010a30 <tcp_listen_input+0x1e4>)
 8010894:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010896:	885b      	ldrh	r3, [r3, #2]
 8010898:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801089a:	4a65      	ldr	r2, [pc, #404]	; (8010a30 <tcp_listen_input+0x1e4>)
 801089c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801089e:	8812      	ldrh	r2, [r2, #0]
 80108a0:	b292      	uxth	r2, r2
 80108a2:	9202      	str	r2, [sp, #8]
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	4b63      	ldr	r3, [pc, #396]	; (8010a34 <tcp_listen_input+0x1e8>)
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	4b63      	ldr	r3, [pc, #396]	; (8010a38 <tcp_listen_input+0x1ec>)
 80108ac:	4602      	mov	r2, r0
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f003 fbd6 	bl	8014060 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80108b4:	e0a9      	b.n	8010a0a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80108b6:	4b57      	ldr	r3, [pc, #348]	; (8010a14 <tcp_listen_input+0x1c8>)
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	f003 0302 	and.w	r3, r3, #2
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f000 80a3 	beq.w	8010a0a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	7d5b      	ldrb	r3, [r3, #21]
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7ff f85b 	bl	800f984 <tcp_alloc>
 80108ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d111      	bne.n	80108fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	699b      	ldr	r3, [r3, #24]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00a      	beq.n	80108f4 <tcp_listen_input+0xa8>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	6910      	ldr	r0, [r2, #16]
 80108e6:	f04f 32ff 	mov.w	r2, #4294967295
 80108ea:	2100      	movs	r1, #0
 80108ec:	4798      	blx	r3
 80108ee:	4603      	mov	r3, r0
 80108f0:	73bb      	strb	r3, [r7, #14]
      return;
 80108f2:	e08b      	b.n	8010a0c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80108f4:	23f0      	movs	r3, #240	; 0xf0
 80108f6:	73bb      	strb	r3, [r7, #14]
      return;
 80108f8:	e088      	b.n	8010a0c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80108fa:	4b50      	ldr	r3, [pc, #320]	; (8010a3c <tcp_listen_input+0x1f0>)
 80108fc:	695a      	ldr	r2, [r3, #20]
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010902:	4b4e      	ldr	r3, [pc, #312]	; (8010a3c <tcp_listen_input+0x1f0>)
 8010904:	691a      	ldr	r2, [r3, #16]
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	8ada      	ldrh	r2, [r3, #22]
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010912:	4b47      	ldr	r3, [pc, #284]	; (8010a30 <tcp_listen_input+0x1e4>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	b29a      	uxth	r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2203      	movs	r2, #3
 8010922:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010924:	4b41      	ldr	r3, [pc, #260]	; (8010a2c <tcp_listen_input+0x1e0>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	1c5a      	adds	r2, r3, #1
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010932:	697b      	ldr	r3, [r7, #20]
 8010934:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010936:	6978      	ldr	r0, [r7, #20]
 8010938:	f7ff fa5a 	bl	800fdf0 <tcp_next_iss>
 801093c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801093e:	697b      	ldr	r3, [r7, #20]
 8010940:	693a      	ldr	r2, [r7, #16]
 8010942:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801094a:	697b      	ldr	r3, [r7, #20]
 801094c:	693a      	ldr	r2, [r7, #16]
 801094e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	693a      	ldr	r2, [r7, #16]
 8010954:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010956:	4b35      	ldr	r3, [pc, #212]	; (8010a2c <tcp_listen_input+0x1e0>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	1e5a      	subs	r2, r3, #1
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	691a      	ldr	r2, [r3, #16]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	7a5b      	ldrb	r3, [r3, #9]
 8010972:	f003 030c 	and.w	r3, r3, #12
 8010976:	b2da      	uxtb	r2, r3
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	7a1a      	ldrb	r2, [r3, #8]
 8010980:	697b      	ldr	r3, [r7, #20]
 8010982:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010984:	4b2e      	ldr	r3, [pc, #184]	; (8010a40 <tcp_listen_input+0x1f4>)
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	60da      	str	r2, [r3, #12]
 801098c:	4a2c      	ldr	r2, [pc, #176]	; (8010a40 <tcp_listen_input+0x1f4>)
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	6013      	str	r3, [r2, #0]
 8010992:	f003 fd27 	bl	80143e4 <tcp_timer_needed>
 8010996:	4b2b      	ldr	r3, [pc, #172]	; (8010a44 <tcp_listen_input+0x1f8>)
 8010998:	2201      	movs	r2, #1
 801099a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801099c:	6978      	ldr	r0, [r7, #20]
 801099e:	f001 fd8d 	bl	80124bc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80109a2:	4b23      	ldr	r3, [pc, #140]	; (8010a30 <tcp_listen_input+0x1e4>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	89db      	ldrh	r3, [r3, #14]
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	3304      	adds	r3, #4
 80109c4:	4618      	mov	r0, r3
 80109c6:	f005 fa61 	bl	8015e8c <ip4_route>
 80109ca:	4601      	mov	r1, r0
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	3304      	adds	r3, #4
 80109d0:	461a      	mov	r2, r3
 80109d2:	4620      	mov	r0, r4
 80109d4:	f7ff fa32 	bl	800fe3c <tcp_eff_send_mss_netif>
 80109d8:	4603      	mov	r3, r0
 80109da:	461a      	mov	r2, r3
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80109e0:	2112      	movs	r1, #18
 80109e2:	6978      	ldr	r0, [r7, #20]
 80109e4:	f002 fc9a 	bl	801331c <tcp_enqueue_flags>
 80109e8:	4603      	mov	r3, r0
 80109ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80109ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d004      	beq.n	80109fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80109f4:	2100      	movs	r1, #0
 80109f6:	6978      	ldr	r0, [r7, #20]
 80109f8:	f7fd ff0a 	bl	800e810 <tcp_abandon>
      return;
 80109fc:	e006      	b.n	8010a0c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80109fe:	6978      	ldr	r0, [r7, #20]
 8010a00:	f002 fd7a 	bl	80134f8 <tcp_output>
  return;
 8010a04:	e001      	b.n	8010a0a <tcp_listen_input+0x1be>
    return;
 8010a06:	bf00      	nop
 8010a08:	e000      	b.n	8010a0c <tcp_listen_input+0x1c0>
  return;
 8010a0a:	bf00      	nop
}
 8010a0c:	371c      	adds	r7, #28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd90      	pop	{r4, r7, pc}
 8010a12:	bf00      	nop
 8010a14:	20004a30 	.word	0x20004a30
 8010a18:	0801ab20 	.word	0x0801ab20
 8010a1c:	0801ad18 	.word	0x0801ad18
 8010a20:	0801ab6c 	.word	0x0801ab6c
 8010a24:	20004a28 	.word	0x20004a28
 8010a28:	20004a2e 	.word	0x20004a2e
 8010a2c:	20004a24 	.word	0x20004a24
 8010a30:	20004a14 	.word	0x20004a14
 8010a34:	200081f4 	.word	0x200081f4
 8010a38:	200081f8 	.word	0x200081f8
 8010a3c:	200081e4 	.word	0x200081e4
 8010a40:	2000b8f8 	.word	0x2000b8f8
 8010a44:	2000b8f4 	.word	0x2000b8f4

08010a48 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b086      	sub	sp, #24
 8010a4c:	af04      	add	r7, sp, #16
 8010a4e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010a50:	4b2f      	ldr	r3, [pc, #188]	; (8010b10 <tcp_timewait_input+0xc8>)
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d153      	bne.n	8010b04 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d106      	bne.n	8010a70 <tcp_timewait_input+0x28>
 8010a62:	4b2c      	ldr	r3, [pc, #176]	; (8010b14 <tcp_timewait_input+0xcc>)
 8010a64:	f240 22ee 	movw	r2, #750	; 0x2ee
 8010a68:	492b      	ldr	r1, [pc, #172]	; (8010b18 <tcp_timewait_input+0xd0>)
 8010a6a:	482c      	ldr	r0, [pc, #176]	; (8010b1c <tcp_timewait_input+0xd4>)
 8010a6c:	f006 ffae 	bl	80179cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010a70:	4b27      	ldr	r3, [pc, #156]	; (8010b10 <tcp_timewait_input+0xc8>)
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	f003 0302 	and.w	r3, r3, #2
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d02a      	beq.n	8010ad2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010a7c:	4b28      	ldr	r3, [pc, #160]	; (8010b20 <tcp_timewait_input+0xd8>)
 8010a7e:	681a      	ldr	r2, [r3, #0]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a84:	1ad3      	subs	r3, r2, r3
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	db2d      	blt.n	8010ae6 <tcp_timewait_input+0x9e>
 8010a8a:	4b25      	ldr	r3, [pc, #148]	; (8010b20 <tcp_timewait_input+0xd8>)
 8010a8c:	681a      	ldr	r2, [r3, #0]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a96:	440b      	add	r3, r1
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	dc23      	bgt.n	8010ae6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a9e:	4b21      	ldr	r3, [pc, #132]	; (8010b24 <tcp_timewait_input+0xdc>)
 8010aa0:	6819      	ldr	r1, [r3, #0]
 8010aa2:	4b21      	ldr	r3, [pc, #132]	; (8010b28 <tcp_timewait_input+0xe0>)
 8010aa4:	881b      	ldrh	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	4b1d      	ldr	r3, [pc, #116]	; (8010b20 <tcp_timewait_input+0xd8>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010aae:	4b1f      	ldr	r3, [pc, #124]	; (8010b2c <tcp_timewait_input+0xe4>)
 8010ab0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ab2:	885b      	ldrh	r3, [r3, #2]
 8010ab4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ab6:	4a1d      	ldr	r2, [pc, #116]	; (8010b2c <tcp_timewait_input+0xe4>)
 8010ab8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010aba:	8812      	ldrh	r2, [r2, #0]
 8010abc:	b292      	uxth	r2, r2
 8010abe:	9202      	str	r2, [sp, #8]
 8010ac0:	9301      	str	r3, [sp, #4]
 8010ac2:	4b1b      	ldr	r3, [pc, #108]	; (8010b30 <tcp_timewait_input+0xe8>)
 8010ac4:	9300      	str	r3, [sp, #0]
 8010ac6:	4b1b      	ldr	r3, [pc, #108]	; (8010b34 <tcp_timewait_input+0xec>)
 8010ac8:	4602      	mov	r2, r0
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f003 fac8 	bl	8014060 <tcp_rst>
      return;
 8010ad0:	e01b      	b.n	8010b0a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010ad2:	4b0f      	ldr	r3, [pc, #60]	; (8010b10 <tcp_timewait_input+0xc8>)
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	f003 0301 	and.w	r3, r3, #1
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d003      	beq.n	8010ae6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010ade:	4b16      	ldr	r3, [pc, #88]	; (8010b38 <tcp_timewait_input+0xf0>)
 8010ae0:	681a      	ldr	r2, [r3, #0]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010ae6:	4b10      	ldr	r3, [pc, #64]	; (8010b28 <tcp_timewait_input+0xe0>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00c      	beq.n	8010b08 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	8b5b      	ldrh	r3, [r3, #26]
 8010af2:	f043 0302 	orr.w	r3, r3, #2
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f002 fcfb 	bl	80134f8 <tcp_output>
  }
  return;
 8010b02:	e001      	b.n	8010b08 <tcp_timewait_input+0xc0>
    return;
 8010b04:	bf00      	nop
 8010b06:	e000      	b.n	8010b0a <tcp_timewait_input+0xc2>
  return;
 8010b08:	bf00      	nop
}
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	20004a30 	.word	0x20004a30
 8010b14:	0801ab20 	.word	0x0801ab20
 8010b18:	0801ad38 	.word	0x0801ad38
 8010b1c:	0801ab6c 	.word	0x0801ab6c
 8010b20:	20004a24 	.word	0x20004a24
 8010b24:	20004a28 	.word	0x20004a28
 8010b28:	20004a2e 	.word	0x20004a2e
 8010b2c:	20004a14 	.word	0x20004a14
 8010b30:	200081f4 	.word	0x200081f4
 8010b34:	200081f8 	.word	0x200081f8
 8010b38:	2000b8fc 	.word	0x2000b8fc

08010b3c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010b3c:	b590      	push	{r4, r7, lr}
 8010b3e:	b08d      	sub	sp, #52	; 0x34
 8010b40:	af04      	add	r7, sp, #16
 8010b42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010b44:	2300      	movs	r3, #0
 8010b46:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010b48:	2300      	movs	r3, #0
 8010b4a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d106      	bne.n	8010b60 <tcp_process+0x24>
 8010b52:	4ba5      	ldr	r3, [pc, #660]	; (8010de8 <tcp_process+0x2ac>)
 8010b54:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010b58:	49a4      	ldr	r1, [pc, #656]	; (8010dec <tcp_process+0x2b0>)
 8010b5a:	48a5      	ldr	r0, [pc, #660]	; (8010df0 <tcp_process+0x2b4>)
 8010b5c:	f006 ff36 	bl	80179cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010b60:	4ba4      	ldr	r3, [pc, #656]	; (8010df4 <tcp_process+0x2b8>)
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	f003 0304 	and.w	r3, r3, #4
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d04e      	beq.n	8010c0a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	7d1b      	ldrb	r3, [r3, #20]
 8010b70:	2b02      	cmp	r3, #2
 8010b72:	d108      	bne.n	8010b86 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010b78:	4b9f      	ldr	r3, [pc, #636]	; (8010df8 <tcp_process+0x2bc>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d123      	bne.n	8010bc8 <tcp_process+0x8c>
        acceptable = 1;
 8010b80:	2301      	movs	r3, #1
 8010b82:	76fb      	strb	r3, [r7, #27]
 8010b84:	e020      	b.n	8010bc8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b8a:	4b9c      	ldr	r3, [pc, #624]	; (8010dfc <tcp_process+0x2c0>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d102      	bne.n	8010b98 <tcp_process+0x5c>
        acceptable = 1;
 8010b92:	2301      	movs	r3, #1
 8010b94:	76fb      	strb	r3, [r7, #27]
 8010b96:	e017      	b.n	8010bc8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b98:	4b98      	ldr	r3, [pc, #608]	; (8010dfc <tcp_process+0x2c0>)
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	db10      	blt.n	8010bc8 <tcp_process+0x8c>
 8010ba6:	4b95      	ldr	r3, [pc, #596]	; (8010dfc <tcp_process+0x2c0>)
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bae:	6879      	ldr	r1, [r7, #4]
 8010bb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010bb2:	440b      	add	r3, r1
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	dc06      	bgt.n	8010bc8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	8b5b      	ldrh	r3, [r3, #26]
 8010bbe:	f043 0302 	orr.w	r3, r3, #2
 8010bc2:	b29a      	uxth	r2, r3
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010bc8:	7efb      	ldrb	r3, [r7, #27]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d01b      	beq.n	8010c06 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	7d1b      	ldrb	r3, [r3, #20]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d106      	bne.n	8010be4 <tcp_process+0xa8>
 8010bd6:	4b84      	ldr	r3, [pc, #528]	; (8010de8 <tcp_process+0x2ac>)
 8010bd8:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010bdc:	4988      	ldr	r1, [pc, #544]	; (8010e00 <tcp_process+0x2c4>)
 8010bde:	4884      	ldr	r0, [pc, #528]	; (8010df0 <tcp_process+0x2b4>)
 8010be0:	f006 fef4 	bl	80179cc <iprintf>
      recv_flags |= TF_RESET;
 8010be4:	4b87      	ldr	r3, [pc, #540]	; (8010e04 <tcp_process+0x2c8>)
 8010be6:	781b      	ldrb	r3, [r3, #0]
 8010be8:	f043 0308 	orr.w	r3, r3, #8
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	4b85      	ldr	r3, [pc, #532]	; (8010e04 <tcp_process+0x2c8>)
 8010bf0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	8b5b      	ldrh	r3, [r3, #26]
 8010bf6:	f023 0301 	bic.w	r3, r3, #1
 8010bfa:	b29a      	uxth	r2, r3
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010c00:	f06f 030d 	mvn.w	r3, #13
 8010c04:	e37a      	b.n	80112fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010c06:	2300      	movs	r3, #0
 8010c08:	e378      	b.n	80112fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010c0a:	4b7a      	ldr	r3, [pc, #488]	; (8010df4 <tcp_process+0x2b8>)
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	f003 0302 	and.w	r3, r3, #2
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d010      	beq.n	8010c38 <tcp_process+0xfc>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	7d1b      	ldrb	r3, [r3, #20]
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d00c      	beq.n	8010c38 <tcp_process+0xfc>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	7d1b      	ldrb	r3, [r3, #20]
 8010c22:	2b03      	cmp	r3, #3
 8010c24:	d008      	beq.n	8010c38 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	8b5b      	ldrh	r3, [r3, #26]
 8010c2a:	f043 0302 	orr.w	r3, r3, #2
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010c34:	2300      	movs	r3, #0
 8010c36:	e361      	b.n	80112fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f003 0310 	and.w	r3, r3, #16
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d103      	bne.n	8010c4c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010c44:	4b70      	ldr	r3, [pc, #448]	; (8010e08 <tcp_process+0x2cc>)
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f001 fc2d 	bl	80124bc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	7d1b      	ldrb	r3, [r3, #20]
 8010c66:	3b02      	subs	r3, #2
 8010c68:	2b07      	cmp	r3, #7
 8010c6a:	f200 8337 	bhi.w	80112dc <tcp_process+0x7a0>
 8010c6e:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <tcp_process+0x138>)
 8010c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c74:	08010c95 	.word	0x08010c95
 8010c78:	08010ec5 	.word	0x08010ec5
 8010c7c:	0801103d 	.word	0x0801103d
 8010c80:	08011067 	.word	0x08011067
 8010c84:	0801118b 	.word	0x0801118b
 8010c88:	0801103d 	.word	0x0801103d
 8010c8c:	08011217 	.word	0x08011217
 8010c90:	080112a7 	.word	0x080112a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010c94:	4b57      	ldr	r3, [pc, #348]	; (8010df4 <tcp_process+0x2b8>)
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	f003 0310 	and.w	r3, r3, #16
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	f000 80e4 	beq.w	8010e6a <tcp_process+0x32e>
 8010ca2:	4b54      	ldr	r3, [pc, #336]	; (8010df4 <tcp_process+0x2b8>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	f003 0302 	and.w	r3, r3, #2
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f000 80dd 	beq.w	8010e6a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb4:	1c5a      	adds	r2, r3, #1
 8010cb6:	4b50      	ldr	r3, [pc, #320]	; (8010df8 <tcp_process+0x2bc>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	f040 80d5 	bne.w	8010e6a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010cc0:	4b4e      	ldr	r3, [pc, #312]	; (8010dfc <tcp_process+0x2c0>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	1c5a      	adds	r2, r3, #1
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010cd2:	4b49      	ldr	r3, [pc, #292]	; (8010df8 <tcp_process+0x2bc>)
 8010cd4:	681a      	ldr	r2, [r3, #0]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010cda:	4b4c      	ldr	r3, [pc, #304]	; (8010e0c <tcp_process+0x2d0>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	89db      	ldrh	r3, [r3, #14]
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010cf4:	4b41      	ldr	r3, [pc, #260]	; (8010dfc <tcp_process+0x2c0>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	1e5a      	subs	r2, r3, #1
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	2204      	movs	r2, #4
 8010d02:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	3304      	adds	r3, #4
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f005 f8bd 	bl	8015e8c <ip4_route>
 8010d12:	4601      	mov	r1, r0
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	3304      	adds	r3, #4
 8010d18:	461a      	mov	r2, r3
 8010d1a:	4620      	mov	r0, r4
 8010d1c:	f7ff f88e 	bl	800fe3c <tcp_eff_send_mss_netif>
 8010d20:	4603      	mov	r3, r0
 8010d22:	461a      	mov	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d2c:	009a      	lsls	r2, r3, #2
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d32:	005b      	lsls	r3, r3, #1
 8010d34:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d38:	428b      	cmp	r3, r1
 8010d3a:	bf38      	it	cc
 8010d3c:	460b      	movcc	r3, r1
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d204      	bcs.n	8010d4c <tcp_process+0x210>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	e00d      	b.n	8010d68 <tcp_process+0x22c>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d56:	4293      	cmp	r3, r2
 8010d58:	d904      	bls.n	8010d64 <tcp_process+0x228>
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d5e:	005b      	lsls	r3, r3, #1
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	e001      	b.n	8010d68 <tcp_process+0x22c>
 8010d64:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d106      	bne.n	8010d86 <tcp_process+0x24a>
 8010d78:	4b1b      	ldr	r3, [pc, #108]	; (8010de8 <tcp_process+0x2ac>)
 8010d7a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010d7e:	4924      	ldr	r1, [pc, #144]	; (8010e10 <tcp_process+0x2d4>)
 8010d80:	481b      	ldr	r0, [pc, #108]	; (8010df0 <tcp_process+0x2b4>)
 8010d82:	f006 fe23 	bl	80179cc <iprintf>
        --pcb->snd_queuelen;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d9a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d111      	bne.n	8010dc6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010da6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010da8:	69fb      	ldr	r3, [r7, #28]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d106      	bne.n	8010dbc <tcp_process+0x280>
 8010dae:	4b0e      	ldr	r3, [pc, #56]	; (8010de8 <tcp_process+0x2ac>)
 8010db0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010db4:	4917      	ldr	r1, [pc, #92]	; (8010e14 <tcp_process+0x2d8>)
 8010db6:	480e      	ldr	r0, [pc, #56]	; (8010df0 <tcp_process+0x2b4>)
 8010db8:	f006 fe08 	bl	80179cc <iprintf>
          pcb->unsent = rseg->next;
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8010dc4:	e003      	b.n	8010dce <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010dce:	69f8      	ldr	r0, [r7, #28]
 8010dd0:	f7fe fc6f 	bl	800f6b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d11d      	bne.n	8010e18 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010de2:	861a      	strh	r2, [r3, #48]	; 0x30
 8010de4:	e01f      	b.n	8010e26 <tcp_process+0x2ea>
 8010de6:	bf00      	nop
 8010de8:	0801ab20 	.word	0x0801ab20
 8010dec:	0801ad58 	.word	0x0801ad58
 8010df0:	0801ab6c 	.word	0x0801ab6c
 8010df4:	20004a30 	.word	0x20004a30
 8010df8:	20004a28 	.word	0x20004a28
 8010dfc:	20004a24 	.word	0x20004a24
 8010e00:	0801ad74 	.word	0x0801ad74
 8010e04:	20004a31 	.word	0x20004a31
 8010e08:	2000b8fc 	.word	0x2000b8fc
 8010e0c:	20004a14 	.word	0x20004a14
 8010e10:	0801ad94 	.word	0x0801ad94
 8010e14:	0801adac 	.word	0x0801adac
        } else {
          pcb->rtime = 0;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	2200      	movs	r2, #0
 8010e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00a      	beq.n	8010e46 <tcp_process+0x30a>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e36:	687a      	ldr	r2, [r7, #4]
 8010e38:	6910      	ldr	r0, [r2, #16]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	6879      	ldr	r1, [r7, #4]
 8010e3e:	4798      	blx	r3
 8010e40:	4603      	mov	r3, r0
 8010e42:	76bb      	strb	r3, [r7, #26]
 8010e44:	e001      	b.n	8010e4a <tcp_process+0x30e>
 8010e46:	2300      	movs	r3, #0
 8010e48:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010e4a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010e4e:	f113 0f0d 	cmn.w	r3, #13
 8010e52:	d102      	bne.n	8010e5a <tcp_process+0x31e>
          return ERR_ABRT;
 8010e54:	f06f 030c 	mvn.w	r3, #12
 8010e58:	e250      	b.n	80112fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8b5b      	ldrh	r3, [r3, #26]
 8010e5e:	f043 0302 	orr.w	r3, r3, #2
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010e68:	e23a      	b.n	80112e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010e6a:	4b9d      	ldr	r3, [pc, #628]	; (80110e0 <tcp_process+0x5a4>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	f003 0310 	and.w	r3, r3, #16
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	f000 8234 	beq.w	80112e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e78:	4b9a      	ldr	r3, [pc, #616]	; (80110e4 <tcp_process+0x5a8>)
 8010e7a:	6819      	ldr	r1, [r3, #0]
 8010e7c:	4b9a      	ldr	r3, [pc, #616]	; (80110e8 <tcp_process+0x5ac>)
 8010e7e:	881b      	ldrh	r3, [r3, #0]
 8010e80:	461a      	mov	r2, r3
 8010e82:	4b9a      	ldr	r3, [pc, #616]	; (80110ec <tcp_process+0x5b0>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e88:	4b99      	ldr	r3, [pc, #612]	; (80110f0 <tcp_process+0x5b4>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e8c:	885b      	ldrh	r3, [r3, #2]
 8010e8e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e90:	4a97      	ldr	r2, [pc, #604]	; (80110f0 <tcp_process+0x5b4>)
 8010e92:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e94:	8812      	ldrh	r2, [r2, #0]
 8010e96:	b292      	uxth	r2, r2
 8010e98:	9202      	str	r2, [sp, #8]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	4b95      	ldr	r3, [pc, #596]	; (80110f4 <tcp_process+0x5b8>)
 8010e9e:	9300      	str	r3, [sp, #0]
 8010ea0:	4b95      	ldr	r3, [pc, #596]	; (80110f8 <tcp_process+0x5bc>)
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f003 f8db 	bl	8014060 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eb0:	2b05      	cmp	r3, #5
 8010eb2:	f200 8215 	bhi.w	80112e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f002 fea5 	bl	8013c0c <tcp_rexmit_rto>
      break;
 8010ec2:	e20d      	b.n	80112e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010ec4:	4b86      	ldr	r3, [pc, #536]	; (80110e0 <tcp_process+0x5a4>)
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	f003 0310 	and.w	r3, r3, #16
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 80a1 	beq.w	8011014 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed2:	4b84      	ldr	r3, [pc, #528]	; (80110e4 <tcp_process+0x5a8>)
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010eda:	1ad3      	subs	r3, r2, r3
 8010edc:	3b01      	subs	r3, #1
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	db7e      	blt.n	8010fe0 <tcp_process+0x4a4>
 8010ee2:	4b80      	ldr	r3, [pc, #512]	; (80110e4 <tcp_process+0x5a8>)
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	dc77      	bgt.n	8010fe0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2204      	movs	r2, #4
 8010ef4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d102      	bne.n	8010f04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010efe:	23fa      	movs	r3, #250	; 0xfa
 8010f00:	76bb      	strb	r3, [r7, #26]
 8010f02:	e01d      	b.n	8010f40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f08:	699b      	ldr	r3, [r3, #24]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d106      	bne.n	8010f1c <tcp_process+0x3e0>
 8010f0e:	4b7b      	ldr	r3, [pc, #492]	; (80110fc <tcp_process+0x5c0>)
 8010f10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010f14:	497a      	ldr	r1, [pc, #488]	; (8011100 <tcp_process+0x5c4>)
 8010f16:	487b      	ldr	r0, [pc, #492]	; (8011104 <tcp_process+0x5c8>)
 8010f18:	f006 fd58 	bl	80179cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00a      	beq.n	8010f3c <tcp_process+0x400>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010f2a:	699b      	ldr	r3, [r3, #24]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	6910      	ldr	r0, [r2, #16]
 8010f30:	2200      	movs	r2, #0
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	4798      	blx	r3
 8010f36:	4603      	mov	r3, r0
 8010f38:	76bb      	strb	r3, [r7, #26]
 8010f3a:	e001      	b.n	8010f40 <tcp_process+0x404>
 8010f3c:	23f0      	movs	r3, #240	; 0xf0
 8010f3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010f40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00a      	beq.n	8010f5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010f48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010f4c:	f113 0f0d 	cmn.w	r3, #13
 8010f50:	d002      	beq.n	8010f58 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7fd fd1a 	bl	800e98c <tcp_abort>
            }
            return ERR_ABRT;
 8010f58:	f06f 030c 	mvn.w	r3, #12
 8010f5c:	e1ce      	b.n	80112fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fae0 	bl	8011524 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010f64:	4b68      	ldr	r3, [pc, #416]	; (8011108 <tcp_process+0x5cc>)
 8010f66:	881b      	ldrh	r3, [r3, #0]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d005      	beq.n	8010f78 <tcp_process+0x43c>
            recv_acked--;
 8010f6c:	4b66      	ldr	r3, [pc, #408]	; (8011108 <tcp_process+0x5cc>)
 8010f6e:	881b      	ldrh	r3, [r3, #0]
 8010f70:	3b01      	subs	r3, #1
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	4b64      	ldr	r3, [pc, #400]	; (8011108 <tcp_process+0x5cc>)
 8010f76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f7c:	009a      	lsls	r2, r3, #2
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f82:	005b      	lsls	r3, r3, #1
 8010f84:	f241 111c 	movw	r1, #4380	; 0x111c
 8010f88:	428b      	cmp	r3, r1
 8010f8a:	bf38      	it	cc
 8010f8c:	460b      	movcc	r3, r1
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d204      	bcs.n	8010f9c <tcp_process+0x460>
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f96:	009b      	lsls	r3, r3, #2
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	e00d      	b.n	8010fb8 <tcp_process+0x47c>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa0:	005b      	lsls	r3, r3, #1
 8010fa2:	f241 121c 	movw	r2, #4380	; 0x111c
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d904      	bls.n	8010fb4 <tcp_process+0x478>
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fae:	005b      	lsls	r3, r3, #1
 8010fb0:	b29b      	uxth	r3, r3
 8010fb2:	e001      	b.n	8010fb8 <tcp_process+0x47c>
 8010fb4:	f241 131c 	movw	r3, #4380	; 0x111c
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010fbe:	4b53      	ldr	r3, [pc, #332]	; (801110c <tcp_process+0x5d0>)
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	f003 0320 	and.w	r3, r3, #32
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d037      	beq.n	801103a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	8b5b      	ldrh	r3, [r3, #26]
 8010fce:	f043 0302 	orr.w	r3, r3, #2
 8010fd2:	b29a      	uxth	r2, r3
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2207      	movs	r2, #7
 8010fdc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010fde:	e02c      	b.n	801103a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010fe0:	4b40      	ldr	r3, [pc, #256]	; (80110e4 <tcp_process+0x5a8>)
 8010fe2:	6819      	ldr	r1, [r3, #0]
 8010fe4:	4b40      	ldr	r3, [pc, #256]	; (80110e8 <tcp_process+0x5ac>)
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	4b40      	ldr	r3, [pc, #256]	; (80110ec <tcp_process+0x5b0>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ff0:	4b3f      	ldr	r3, [pc, #252]	; (80110f0 <tcp_process+0x5b4>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff4:	885b      	ldrh	r3, [r3, #2]
 8010ff6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ff8:	4a3d      	ldr	r2, [pc, #244]	; (80110f0 <tcp_process+0x5b4>)
 8010ffa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ffc:	8812      	ldrh	r2, [r2, #0]
 8010ffe:	b292      	uxth	r2, r2
 8011000:	9202      	str	r2, [sp, #8]
 8011002:	9301      	str	r3, [sp, #4]
 8011004:	4b3b      	ldr	r3, [pc, #236]	; (80110f4 <tcp_process+0x5b8>)
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	4b3b      	ldr	r3, [pc, #236]	; (80110f8 <tcp_process+0x5bc>)
 801100a:	4602      	mov	r2, r0
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f003 f827 	bl	8014060 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011012:	e167      	b.n	80112e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011014:	4b32      	ldr	r3, [pc, #200]	; (80110e0 <tcp_process+0x5a4>)
 8011016:	781b      	ldrb	r3, [r3, #0]
 8011018:	f003 0302 	and.w	r3, r3, #2
 801101c:	2b00      	cmp	r3, #0
 801101e:	f000 8161 	beq.w	80112e4 <tcp_process+0x7a8>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011026:	1e5a      	subs	r2, r3, #1
 8011028:	4b30      	ldr	r3, [pc, #192]	; (80110ec <tcp_process+0x5b0>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	429a      	cmp	r2, r3
 801102e:	f040 8159 	bne.w	80112e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f002 fe0c 	bl	8013c50 <tcp_rexmit>
      break;
 8011038:	e154      	b.n	80112e4 <tcp_process+0x7a8>
 801103a:	e153      	b.n	80112e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f000 fa71 	bl	8011524 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011042:	4b32      	ldr	r3, [pc, #200]	; (801110c <tcp_process+0x5d0>)
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	f003 0320 	and.w	r3, r3, #32
 801104a:	2b00      	cmp	r3, #0
 801104c:	f000 814c 	beq.w	80112e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8b5b      	ldrh	r3, [r3, #26]
 8011054:	f043 0302 	orr.w	r3, r3, #2
 8011058:	b29a      	uxth	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2207      	movs	r2, #7
 8011062:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011064:	e140      	b.n	80112e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 fa5c 	bl	8011524 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801106c:	4b27      	ldr	r3, [pc, #156]	; (801110c <tcp_process+0x5d0>)
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	f003 0320 	and.w	r3, r3, #32
 8011074:	2b00      	cmp	r3, #0
 8011076:	d071      	beq.n	801115c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011078:	4b19      	ldr	r3, [pc, #100]	; (80110e0 <tcp_process+0x5a4>)
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	f003 0310 	and.w	r3, r3, #16
 8011080:	2b00      	cmp	r3, #0
 8011082:	d060      	beq.n	8011146 <tcp_process+0x60a>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011088:	4b16      	ldr	r3, [pc, #88]	; (80110e4 <tcp_process+0x5a8>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	429a      	cmp	r2, r3
 801108e:	d15a      	bne.n	8011146 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011094:	2b00      	cmp	r3, #0
 8011096:	d156      	bne.n	8011146 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	8b5b      	ldrh	r3, [r3, #26]
 801109c:	f043 0302 	orr.w	r3, r3, #2
 80110a0:	b29a      	uxth	r2, r3
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7fe fdbe 	bl	800fc28 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80110ac:	4b18      	ldr	r3, [pc, #96]	; (8011110 <tcp_process+0x5d4>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d105      	bne.n	80110c2 <tcp_process+0x586>
 80110b6:	4b16      	ldr	r3, [pc, #88]	; (8011110 <tcp_process+0x5d4>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	4a14      	ldr	r2, [pc, #80]	; (8011110 <tcp_process+0x5d4>)
 80110be:	6013      	str	r3, [r2, #0]
 80110c0:	e02e      	b.n	8011120 <tcp_process+0x5e4>
 80110c2:	4b13      	ldr	r3, [pc, #76]	; (8011110 <tcp_process+0x5d4>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	617b      	str	r3, [r7, #20]
 80110c8:	e027      	b.n	801111a <tcp_process+0x5de>
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	687a      	ldr	r2, [r7, #4]
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d11f      	bne.n	8011114 <tcp_process+0x5d8>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68da      	ldr	r2, [r3, #12]
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	60da      	str	r2, [r3, #12]
 80110dc:	e020      	b.n	8011120 <tcp_process+0x5e4>
 80110de:	bf00      	nop
 80110e0:	20004a30 	.word	0x20004a30
 80110e4:	20004a28 	.word	0x20004a28
 80110e8:	20004a2e 	.word	0x20004a2e
 80110ec:	20004a24 	.word	0x20004a24
 80110f0:	20004a14 	.word	0x20004a14
 80110f4:	200081f4 	.word	0x200081f4
 80110f8:	200081f8 	.word	0x200081f8
 80110fc:	0801ab20 	.word	0x0801ab20
 8011100:	0801adc0 	.word	0x0801adc0
 8011104:	0801ab6c 	.word	0x0801ab6c
 8011108:	20004a2c 	.word	0x20004a2c
 801110c:	20004a31 	.word	0x20004a31
 8011110:	2000b8f8 	.word	0x2000b8f8
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	68db      	ldr	r3, [r3, #12]
 8011118:	617b      	str	r3, [r7, #20]
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1d4      	bne.n	80110ca <tcp_process+0x58e>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2200      	movs	r2, #0
 8011124:	60da      	str	r2, [r3, #12]
 8011126:	4b77      	ldr	r3, [pc, #476]	; (8011304 <tcp_process+0x7c8>)
 8011128:	2201      	movs	r2, #1
 801112a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	220a      	movs	r2, #10
 8011130:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011132:	4b75      	ldr	r3, [pc, #468]	; (8011308 <tcp_process+0x7cc>)
 8011134:	681a      	ldr	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	60da      	str	r2, [r3, #12]
 801113a:	4a73      	ldr	r2, [pc, #460]	; (8011308 <tcp_process+0x7cc>)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6013      	str	r3, [r2, #0]
 8011140:	f003 f950 	bl	80143e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011144:	e0d2      	b.n	80112ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	8b5b      	ldrh	r3, [r3, #26]
 801114a:	f043 0302 	orr.w	r3, r3, #2
 801114e:	b29a      	uxth	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2208      	movs	r2, #8
 8011158:	751a      	strb	r2, [r3, #20]
      break;
 801115a:	e0c7      	b.n	80112ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801115c:	4b6b      	ldr	r3, [pc, #428]	; (801130c <tcp_process+0x7d0>)
 801115e:	781b      	ldrb	r3, [r3, #0]
 8011160:	f003 0310 	and.w	r3, r3, #16
 8011164:	2b00      	cmp	r3, #0
 8011166:	f000 80c1 	beq.w	80112ec <tcp_process+0x7b0>
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801116e:	4b68      	ldr	r3, [pc, #416]	; (8011310 <tcp_process+0x7d4>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	429a      	cmp	r2, r3
 8011174:	f040 80ba 	bne.w	80112ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801117c:	2b00      	cmp	r3, #0
 801117e:	f040 80b5 	bne.w	80112ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2206      	movs	r2, #6
 8011186:	751a      	strb	r2, [r3, #20]
      break;
 8011188:	e0b0      	b.n	80112ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f000 f9ca 	bl	8011524 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011190:	4b60      	ldr	r3, [pc, #384]	; (8011314 <tcp_process+0x7d8>)
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	f003 0320 	and.w	r3, r3, #32
 8011198:	2b00      	cmp	r3, #0
 801119a:	f000 80a9 	beq.w	80112f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	8b5b      	ldrh	r3, [r3, #26]
 80111a2:	f043 0302 	orr.w	r3, r3, #2
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f7fe fd3b 	bl	800fc28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80111b2:	4b59      	ldr	r3, [pc, #356]	; (8011318 <tcp_process+0x7dc>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d105      	bne.n	80111c8 <tcp_process+0x68c>
 80111bc:	4b56      	ldr	r3, [pc, #344]	; (8011318 <tcp_process+0x7dc>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	4a55      	ldr	r2, [pc, #340]	; (8011318 <tcp_process+0x7dc>)
 80111c4:	6013      	str	r3, [r2, #0]
 80111c6:	e013      	b.n	80111f0 <tcp_process+0x6b4>
 80111c8:	4b53      	ldr	r3, [pc, #332]	; (8011318 <tcp_process+0x7dc>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	613b      	str	r3, [r7, #16]
 80111ce:	e00c      	b.n	80111ea <tcp_process+0x6ae>
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d104      	bne.n	80111e4 <tcp_process+0x6a8>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	68da      	ldr	r2, [r3, #12]
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	60da      	str	r2, [r3, #12]
 80111e2:	e005      	b.n	80111f0 <tcp_process+0x6b4>
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	613b      	str	r3, [r7, #16]
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1ef      	bne.n	80111d0 <tcp_process+0x694>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	60da      	str	r2, [r3, #12]
 80111f6:	4b43      	ldr	r3, [pc, #268]	; (8011304 <tcp_process+0x7c8>)
 80111f8:	2201      	movs	r2, #1
 80111fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	220a      	movs	r2, #10
 8011200:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011202:	4b41      	ldr	r3, [pc, #260]	; (8011308 <tcp_process+0x7cc>)
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	60da      	str	r2, [r3, #12]
 801120a:	4a3f      	ldr	r2, [pc, #252]	; (8011308 <tcp_process+0x7cc>)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	f003 f8e8 	bl	80143e4 <tcp_timer_needed>
      }
      break;
 8011214:	e06c      	b.n	80112f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f000 f984 	bl	8011524 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801121c:	4b3b      	ldr	r3, [pc, #236]	; (801130c <tcp_process+0x7d0>)
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	f003 0310 	and.w	r3, r3, #16
 8011224:	2b00      	cmp	r3, #0
 8011226:	d065      	beq.n	80112f4 <tcp_process+0x7b8>
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801122c:	4b38      	ldr	r3, [pc, #224]	; (8011310 <tcp_process+0x7d4>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	429a      	cmp	r2, r3
 8011232:	d15f      	bne.n	80112f4 <tcp_process+0x7b8>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011238:	2b00      	cmp	r3, #0
 801123a:	d15b      	bne.n	80112f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801123c:	6878      	ldr	r0, [r7, #4]
 801123e:	f7fe fcf3 	bl	800fc28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011242:	4b35      	ldr	r3, [pc, #212]	; (8011318 <tcp_process+0x7dc>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	429a      	cmp	r2, r3
 801124a:	d105      	bne.n	8011258 <tcp_process+0x71c>
 801124c:	4b32      	ldr	r3, [pc, #200]	; (8011318 <tcp_process+0x7dc>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	4a31      	ldr	r2, [pc, #196]	; (8011318 <tcp_process+0x7dc>)
 8011254:	6013      	str	r3, [r2, #0]
 8011256:	e013      	b.n	8011280 <tcp_process+0x744>
 8011258:	4b2f      	ldr	r3, [pc, #188]	; (8011318 <tcp_process+0x7dc>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	e00c      	b.n	801127a <tcp_process+0x73e>
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	687a      	ldr	r2, [r7, #4]
 8011266:	429a      	cmp	r2, r3
 8011268:	d104      	bne.n	8011274 <tcp_process+0x738>
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	68da      	ldr	r2, [r3, #12]
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	60da      	str	r2, [r3, #12]
 8011272:	e005      	b.n	8011280 <tcp_process+0x744>
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	68db      	ldr	r3, [r3, #12]
 8011278:	60fb      	str	r3, [r7, #12]
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d1ef      	bne.n	8011260 <tcp_process+0x724>
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	60da      	str	r2, [r3, #12]
 8011286:	4b1f      	ldr	r3, [pc, #124]	; (8011304 <tcp_process+0x7c8>)
 8011288:	2201      	movs	r2, #1
 801128a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	220a      	movs	r2, #10
 8011290:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011292:	4b1d      	ldr	r3, [pc, #116]	; (8011308 <tcp_process+0x7cc>)
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	60da      	str	r2, [r3, #12]
 801129a:	4a1b      	ldr	r2, [pc, #108]	; (8011308 <tcp_process+0x7cc>)
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6013      	str	r3, [r2, #0]
 80112a0:	f003 f8a0 	bl	80143e4 <tcp_timer_needed>
      }
      break;
 80112a4:	e026      	b.n	80112f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 f93c 	bl	8011524 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80112ac:	4b17      	ldr	r3, [pc, #92]	; (801130c <tcp_process+0x7d0>)
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	f003 0310 	and.w	r3, r3, #16
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d01f      	beq.n	80112f8 <tcp_process+0x7bc>
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112bc:	4b14      	ldr	r3, [pc, #80]	; (8011310 <tcp_process+0x7d4>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d119      	bne.n	80112f8 <tcp_process+0x7bc>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d115      	bne.n	80112f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80112cc:	4b11      	ldr	r3, [pc, #68]	; (8011314 <tcp_process+0x7d8>)
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	f043 0310 	orr.w	r3, r3, #16
 80112d4:	b2da      	uxtb	r2, r3
 80112d6:	4b0f      	ldr	r3, [pc, #60]	; (8011314 <tcp_process+0x7d8>)
 80112d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80112da:	e00d      	b.n	80112f8 <tcp_process+0x7bc>
    default:
      break;
 80112dc:	bf00      	nop
 80112de:	e00c      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112e0:	bf00      	nop
 80112e2:	e00a      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112e4:	bf00      	nop
 80112e6:	e008      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112e8:	bf00      	nop
 80112ea:	e006      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112ec:	bf00      	nop
 80112ee:	e004      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112f0:	bf00      	nop
 80112f2:	e002      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112f4:	bf00      	nop
 80112f6:	e000      	b.n	80112fa <tcp_process+0x7be>
      break;
 80112f8:	bf00      	nop
  }
  return ERR_OK;
 80112fa:	2300      	movs	r3, #0
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3724      	adds	r7, #36	; 0x24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd90      	pop	{r4, r7, pc}
 8011304:	2000b8f4 	.word	0x2000b8f4
 8011308:	2000b908 	.word	0x2000b908
 801130c:	20004a30 	.word	0x20004a30
 8011310:	20004a28 	.word	0x20004a28
 8011314:	20004a31 	.word	0x20004a31
 8011318:	2000b8f8 	.word	0x2000b8f8

0801131c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801131c:	b590      	push	{r4, r7, lr}
 801131e:	b085      	sub	sp, #20
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d106      	bne.n	801133a <tcp_oos_insert_segment+0x1e>
 801132c:	4b3b      	ldr	r3, [pc, #236]	; (801141c <tcp_oos_insert_segment+0x100>)
 801132e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011332:	493b      	ldr	r1, [pc, #236]	; (8011420 <tcp_oos_insert_segment+0x104>)
 8011334:	483b      	ldr	r0, [pc, #236]	; (8011424 <tcp_oos_insert_segment+0x108>)
 8011336:	f006 fb49 	bl	80179cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	899b      	ldrh	r3, [r3, #12]
 8011340:	b29b      	uxth	r3, r3
 8011342:	4618      	mov	r0, r3
 8011344:	f7fb f986 	bl	800c654 <lwip_htons>
 8011348:	4603      	mov	r3, r0
 801134a:	b2db      	uxtb	r3, r3
 801134c:	f003 0301 	and.w	r3, r3, #1
 8011350:	2b00      	cmp	r3, #0
 8011352:	d028      	beq.n	80113a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011354:	6838      	ldr	r0, [r7, #0]
 8011356:	f7fe f997 	bl	800f688 <tcp_segs_free>
    next = NULL;
 801135a:	2300      	movs	r3, #0
 801135c:	603b      	str	r3, [r7, #0]
 801135e:	e056      	b.n	801140e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	899b      	ldrh	r3, [r3, #12]
 8011366:	b29b      	uxth	r3, r3
 8011368:	4618      	mov	r0, r3
 801136a:	f7fb f973 	bl	800c654 <lwip_htons>
 801136e:	4603      	mov	r3, r0
 8011370:	b2db      	uxtb	r3, r3
 8011372:	f003 0301 	and.w	r3, r3, #1
 8011376:	2b00      	cmp	r3, #0
 8011378:	d00d      	beq.n	8011396 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	899b      	ldrh	r3, [r3, #12]
 8011380:	b29c      	uxth	r4, r3
 8011382:	2001      	movs	r0, #1
 8011384:	f7fb f966 	bl	800c654 <lwip_htons>
 8011388:	4603      	mov	r3, r0
 801138a:	461a      	mov	r2, r3
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	68db      	ldr	r3, [r3, #12]
 8011390:	4322      	orrs	r2, r4
 8011392:	b292      	uxth	r2, r2
 8011394:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f7fe f986 	bl	800f6b2 <tcp_seg_free>
    while (next &&
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00e      	beq.n	80113ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	891b      	ldrh	r3, [r3, #8]
 80113b0:	461a      	mov	r2, r3
 80113b2:	4b1d      	ldr	r3, [pc, #116]	; (8011428 <tcp_oos_insert_segment+0x10c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	441a      	add	r2, r3
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	6839      	ldr	r1, [r7, #0]
 80113c0:	8909      	ldrh	r1, [r1, #8]
 80113c2:	440b      	add	r3, r1
 80113c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	daca      	bge.n	8011360 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01e      	beq.n	801140e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	891b      	ldrh	r3, [r3, #8]
 80113d4:	461a      	mov	r2, r3
 80113d6:	4b14      	ldr	r3, [pc, #80]	; (8011428 <tcp_oos_insert_segment+0x10c>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	441a      	add	r2, r3
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	685b      	ldr	r3, [r3, #4]
 80113e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	dd12      	ble.n	801140e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	68db      	ldr	r3, [r3, #12]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	4b0d      	ldr	r3, [pc, #52]	; (8011428 <tcp_oos_insert_segment+0x10c>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	b29b      	uxth	r3, r3
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	891b      	ldrh	r3, [r3, #8]
 8011406:	4619      	mov	r1, r3
 8011408:	4610      	mov	r0, r2
 801140a:	f7fc fb49 	bl	800daa0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	601a      	str	r2, [r3, #0]
}
 8011414:	bf00      	nop
 8011416:	3714      	adds	r7, #20
 8011418:	46bd      	mov	sp, r7
 801141a:	bd90      	pop	{r4, r7, pc}
 801141c:	0801ab20 	.word	0x0801ab20
 8011420:	0801ade0 	.word	0x0801ade0
 8011424:	0801ab6c 	.word	0x0801ab6c
 8011428:	20004a24 	.word	0x20004a24

0801142c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801142c:	b5b0      	push	{r4, r5, r7, lr}
 801142e:	b086      	sub	sp, #24
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	607a      	str	r2, [r7, #4]
 8011438:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801143a:	e03e      	b.n	80114ba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011440:	68bb      	ldr	r3, [r7, #8]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	4618      	mov	r0, r3
 801144c:	f7fc fd3c 	bl	800dec8 <pbuf_clen>
 8011450:	4603      	mov	r3, r0
 8011452:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801145a:	8a7a      	ldrh	r2, [r7, #18]
 801145c:	429a      	cmp	r2, r3
 801145e:	d906      	bls.n	801146e <tcp_free_acked_segments+0x42>
 8011460:	4b2a      	ldr	r3, [pc, #168]	; (801150c <tcp_free_acked_segments+0xe0>)
 8011462:	f240 4257 	movw	r2, #1111	; 0x457
 8011466:	492a      	ldr	r1, [pc, #168]	; (8011510 <tcp_free_acked_segments+0xe4>)
 8011468:	482a      	ldr	r0, [pc, #168]	; (8011514 <tcp_free_acked_segments+0xe8>)
 801146a:	f006 faaf 	bl	80179cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011474:	8a7b      	ldrh	r3, [r7, #18]
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	b29a      	uxth	r2, r3
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	891a      	ldrh	r2, [r3, #8]
 8011484:	4b24      	ldr	r3, [pc, #144]	; (8011518 <tcp_free_acked_segments+0xec>)
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	4413      	add	r3, r2
 801148a:	b29a      	uxth	r2, r3
 801148c:	4b22      	ldr	r3, [pc, #136]	; (8011518 <tcp_free_acked_segments+0xec>)
 801148e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011490:	6978      	ldr	r0, [r7, #20]
 8011492:	f7fe f90e 	bl	800f6b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801149c:	2b00      	cmp	r3, #0
 801149e:	d00c      	beq.n	80114ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d109      	bne.n	80114ba <tcp_free_acked_segments+0x8e>
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d106      	bne.n	80114ba <tcp_free_acked_segments+0x8e>
 80114ac:	4b17      	ldr	r3, [pc, #92]	; (801150c <tcp_free_acked_segments+0xe0>)
 80114ae:	f240 4261 	movw	r2, #1121	; 0x461
 80114b2:	491a      	ldr	r1, [pc, #104]	; (801151c <tcp_free_acked_segments+0xf0>)
 80114b4:	4817      	ldr	r0, [pc, #92]	; (8011514 <tcp_free_acked_segments+0xe8>)
 80114b6:	f006 fa89 	bl	80179cc <iprintf>
  while (seg_list != NULL &&
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d020      	beq.n	8011502 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fb f8d9 	bl	800c67e <lwip_htonl>
 80114cc:	4604      	mov	r4, r0
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	891b      	ldrh	r3, [r3, #8]
 80114d2:	461d      	mov	r5, r3
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	899b      	ldrh	r3, [r3, #12]
 80114da:	b29b      	uxth	r3, r3
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fb f8b9 	bl	800c654 <lwip_htons>
 80114e2:	4603      	mov	r3, r0
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	f003 0303 	and.w	r3, r3, #3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d001      	beq.n	80114f2 <tcp_free_acked_segments+0xc6>
 80114ee:	2301      	movs	r3, #1
 80114f0:	e000      	b.n	80114f4 <tcp_free_acked_segments+0xc8>
 80114f2:	2300      	movs	r3, #0
 80114f4:	442b      	add	r3, r5
 80114f6:	18e2      	adds	r2, r4, r3
 80114f8:	4b09      	ldr	r3, [pc, #36]	; (8011520 <tcp_free_acked_segments+0xf4>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80114fe:	2b00      	cmp	r3, #0
 8011500:	dd9c      	ble.n	801143c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011502:	68bb      	ldr	r3, [r7, #8]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3718      	adds	r7, #24
 8011508:	46bd      	mov	sp, r7
 801150a:	bdb0      	pop	{r4, r5, r7, pc}
 801150c:	0801ab20 	.word	0x0801ab20
 8011510:	0801ae08 	.word	0x0801ae08
 8011514:	0801ab6c 	.word	0x0801ab6c
 8011518:	20004a2c 	.word	0x20004a2c
 801151c:	0801ae30 	.word	0x0801ae30
 8011520:	20004a28 	.word	0x20004a28

08011524 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011524:	b5b0      	push	{r4, r5, r7, lr}
 8011526:	b094      	sub	sp, #80	; 0x50
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801152c:	2300      	movs	r3, #0
 801152e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d106      	bne.n	8011544 <tcp_receive+0x20>
 8011536:	4ba6      	ldr	r3, [pc, #664]	; (80117d0 <tcp_receive+0x2ac>)
 8011538:	f240 427b 	movw	r2, #1147	; 0x47b
 801153c:	49a5      	ldr	r1, [pc, #660]	; (80117d4 <tcp_receive+0x2b0>)
 801153e:	48a6      	ldr	r0, [pc, #664]	; (80117d8 <tcp_receive+0x2b4>)
 8011540:	f006 fa44 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	7d1b      	ldrb	r3, [r3, #20]
 8011548:	2b03      	cmp	r3, #3
 801154a:	d806      	bhi.n	801155a <tcp_receive+0x36>
 801154c:	4ba0      	ldr	r3, [pc, #640]	; (80117d0 <tcp_receive+0x2ac>)
 801154e:	f240 427c 	movw	r2, #1148	; 0x47c
 8011552:	49a2      	ldr	r1, [pc, #648]	; (80117dc <tcp_receive+0x2b8>)
 8011554:	48a0      	ldr	r0, [pc, #640]	; (80117d8 <tcp_receive+0x2b4>)
 8011556:	f006 fa39 	bl	80179cc <iprintf>

  if (flags & TCP_ACK) {
 801155a:	4ba1      	ldr	r3, [pc, #644]	; (80117e0 <tcp_receive+0x2bc>)
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	f003 0310 	and.w	r3, r3, #16
 8011562:	2b00      	cmp	r3, #0
 8011564:	f000 8263 	beq.w	8011a2e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801156e:	461a      	mov	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011574:	4413      	add	r3, r2
 8011576:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801157c:	4b99      	ldr	r3, [pc, #612]	; (80117e4 <tcp_receive+0x2c0>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	2b00      	cmp	r3, #0
 8011584:	db1b      	blt.n	80115be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801158a:	4b96      	ldr	r3, [pc, #600]	; (80117e4 <tcp_receive+0x2c0>)
 801158c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801158e:	429a      	cmp	r2, r3
 8011590:	d106      	bne.n	80115a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011596:	4b94      	ldr	r3, [pc, #592]	; (80117e8 <tcp_receive+0x2c4>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	1ad3      	subs	r3, r2, r3
 801159c:	2b00      	cmp	r3, #0
 801159e:	db0e      	blt.n	80115be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80115a4:	4b90      	ldr	r3, [pc, #576]	; (80117e8 <tcp_receive+0x2c4>)
 80115a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d125      	bne.n	80115f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80115ac:	4b8f      	ldr	r3, [pc, #572]	; (80117ec <tcp_receive+0x2c8>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	89db      	ldrh	r3, [r3, #14]
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115ba:	429a      	cmp	r2, r3
 80115bc:	d91c      	bls.n	80115f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80115be:	4b8b      	ldr	r3, [pc, #556]	; (80117ec <tcp_receive+0x2c8>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	89db      	ldrh	r3, [r3, #14]
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80115d8:	429a      	cmp	r2, r3
 80115da:	d205      	bcs.n	80115e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80115e8:	4b7e      	ldr	r3, [pc, #504]	; (80117e4 <tcp_receive+0x2c0>)
 80115ea:	681a      	ldr	r2, [r3, #0]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80115f0:	4b7d      	ldr	r3, [pc, #500]	; (80117e8 <tcp_receive+0x2c4>)
 80115f2:	681a      	ldr	r2, [r3, #0]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80115f8:	4b7b      	ldr	r3, [pc, #492]	; (80117e8 <tcp_receive+0x2c4>)
 80115fa:	681a      	ldr	r2, [r3, #0]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	dc58      	bgt.n	80116b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011606:	4b7a      	ldr	r3, [pc, #488]	; (80117f0 <tcp_receive+0x2cc>)
 8011608:	881b      	ldrh	r3, [r3, #0]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d14b      	bne.n	80116a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011618:	4413      	add	r3, r2
 801161a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801161c:	429a      	cmp	r2, r3
 801161e:	d142      	bne.n	80116a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011626:	2b00      	cmp	r3, #0
 8011628:	db3d      	blt.n	80116a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801162e:	4b6e      	ldr	r3, [pc, #440]	; (80117e8 <tcp_receive+0x2c4>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	429a      	cmp	r2, r3
 8011634:	d137      	bne.n	80116a6 <tcp_receive+0x182>
              found_dupack = 1;
 8011636:	2301      	movs	r3, #1
 8011638:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011640:	2bff      	cmp	r3, #255	; 0xff
 8011642:	d007      	beq.n	8011654 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801164a:	3301      	adds	r3, #1
 801164c:	b2da      	uxtb	r2, r3
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801165a:	2b03      	cmp	r3, #3
 801165c:	d91b      	bls.n	8011696 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011668:	4413      	add	r3, r2
 801166a:	b29a      	uxth	r2, r3
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011672:	429a      	cmp	r2, r3
 8011674:	d30a      	bcc.n	801168c <tcp_receive+0x168>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011680:	4413      	add	r3, r2
 8011682:	b29a      	uxth	r2, r3
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801168a:	e004      	b.n	8011696 <tcp_receive+0x172>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011692:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801169c:	2b02      	cmp	r3, #2
 801169e:	d902      	bls.n	80116a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80116a0:	6878      	ldr	r0, [r7, #4]
 80116a2:	f002 fb41 	bl	8013d28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80116a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f040 8160 	bne.w	801196e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80116b6:	e15a      	b.n	801196e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116b8:	4b4b      	ldr	r3, [pc, #300]	; (80117e8 <tcp_receive+0x2c4>)
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116c0:	1ad3      	subs	r3, r2, r3
 80116c2:	3b01      	subs	r3, #1
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f2c0 814d 	blt.w	8011964 <tcp_receive+0x440>
 80116ca:	4b47      	ldr	r3, [pc, #284]	; (80117e8 <tcp_receive+0x2c4>)
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116d2:	1ad3      	subs	r3, r2, r3
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f300 8145 	bgt.w	8011964 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	8b5b      	ldrh	r3, [r3, #26]
 80116de:	f003 0304 	and.w	r3, r3, #4
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d010      	beq.n	8011708 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	8b5b      	ldrh	r3, [r3, #26]
 80116ea:	f023 0304 	bic.w	r3, r3, #4
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2200      	movs	r2, #0
 8011704:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011716:	10db      	asrs	r3, r3, #3
 8011718:	b21b      	sxth	r3, r3
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011722:	b29b      	uxth	r3, r3
 8011724:	4413      	add	r3, r2
 8011726:	b29b      	uxth	r3, r3
 8011728:	b21a      	sxth	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011730:	4b2d      	ldr	r3, [pc, #180]	; (80117e8 <tcp_receive+0x2c4>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	b29a      	uxth	r2, r3
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801173a:	b29b      	uxth	r3, r3
 801173c:	1ad3      	subs	r3, r2, r3
 801173e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011748:	4b27      	ldr	r3, [pc, #156]	; (80117e8 <tcp_receive+0x2c4>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	7d1b      	ldrb	r3, [r3, #20]
 8011754:	2b03      	cmp	r3, #3
 8011756:	f240 8096 	bls.w	8011886 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011766:	429a      	cmp	r2, r3
 8011768:	d244      	bcs.n	80117f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	8b5b      	ldrh	r3, [r3, #26]
 801176e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011772:	2b00      	cmp	r3, #0
 8011774:	d001      	beq.n	801177a <tcp_receive+0x256>
 8011776:	2301      	movs	r3, #1
 8011778:	e000      	b.n	801177c <tcp_receive+0x258>
 801177a:	2302      	movs	r3, #2
 801177c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011780:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011784:	b29a      	uxth	r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801178a:	fb12 f303 	smulbb	r3, r2, r3
 801178e:	b29b      	uxth	r3, r3
 8011790:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011792:	4293      	cmp	r3, r2
 8011794:	bf28      	it	cs
 8011796:	4613      	movcs	r3, r2
 8011798:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117a2:	4413      	add	r3, r2
 80117a4:	b29a      	uxth	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d309      	bcc.n	80117c4 <tcp_receive+0x2a0>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80117b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80117b8:	4413      	add	r3, r2
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117c2:	e060      	b.n	8011886 <tcp_receive+0x362>
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80117ce:	e05a      	b.n	8011886 <tcp_receive+0x362>
 80117d0:	0801ab20 	.word	0x0801ab20
 80117d4:	0801ae50 	.word	0x0801ae50
 80117d8:	0801ab6c 	.word	0x0801ab6c
 80117dc:	0801ae6c 	.word	0x0801ae6c
 80117e0:	20004a30 	.word	0x20004a30
 80117e4:	20004a24 	.word	0x20004a24
 80117e8:	20004a28 	.word	0x20004a28
 80117ec:	20004a14 	.word	0x20004a14
 80117f0:	20004a2e 	.word	0x20004a2e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80117fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80117fc:	4413      	add	r3, r2
 80117fe:	b29a      	uxth	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011806:	429a      	cmp	r2, r3
 8011808:	d309      	bcc.n	801181e <tcp_receive+0x2fa>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011810:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011812:	4413      	add	r3, r2
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801181c:	e004      	b.n	8011828 <tcp_receive+0x304>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011824:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011834:	429a      	cmp	r2, r3
 8011836:	d326      	bcc.n	8011886 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011858:	4413      	add	r3, r2
 801185a:	b29a      	uxth	r2, r3
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011862:	429a      	cmp	r2, r3
 8011864:	d30a      	bcc.n	801187c <tcp_receive+0x358>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011870:	4413      	add	r3, r2
 8011872:	b29a      	uxth	r2, r3
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801187a:	e004      	b.n	8011886 <tcp_receive+0x362>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011882:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801188e:	4a98      	ldr	r2, [pc, #608]	; (8011af0 <tcp_receive+0x5cc>)
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f7ff fdcb 	bl	801142c <tcp_free_acked_segments>
 8011896:	4602      	mov	r2, r0
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118a4:	4a93      	ldr	r2, [pc, #588]	; (8011af4 <tcp_receive+0x5d0>)
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f7ff fdc0 	bl	801142c <tcp_free_acked_segments>
 80118ac:	4602      	mov	r2, r0
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d104      	bne.n	80118c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80118c2:	e002      	b.n	80118ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2200      	movs	r2, #0
 80118ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d103      	bne.n	80118e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80118e6:	4b84      	ldr	r3, [pc, #528]	; (8011af8 <tcp_receive+0x5d4>)
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	4413      	add	r3, r2
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	8b5b      	ldrh	r3, [r3, #26]
 80118f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d035      	beq.n	801196c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011904:	2b00      	cmp	r3, #0
 8011906:	d118      	bne.n	801193a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801190c:	2b00      	cmp	r3, #0
 801190e:	d00c      	beq.n	801192a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	4618      	mov	r0, r3
 801191e:	f7fa feae 	bl	800c67e <lwip_htonl>
 8011922:	4603      	mov	r3, r0
 8011924:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011926:	2b00      	cmp	r3, #0
 8011928:	dc20      	bgt.n	801196c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	8b5b      	ldrh	r3, [r3, #26]
 801192e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011932:	b29a      	uxth	r2, r3
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011938:	e018      	b.n	801196c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	4618      	mov	r0, r3
 8011948:	f7fa fe99 	bl	800c67e <lwip_htonl>
 801194c:	4603      	mov	r3, r0
 801194e:	1ae3      	subs	r3, r4, r3
 8011950:	2b00      	cmp	r3, #0
 8011952:	dc0b      	bgt.n	801196c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	8b5b      	ldrh	r3, [r3, #26]
 8011958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801195c:	b29a      	uxth	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011962:	e003      	b.n	801196c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011964:	6878      	ldr	r0, [r7, #4]
 8011966:	f002 fbcd 	bl	8014104 <tcp_send_empty_ack>
 801196a:	e000      	b.n	801196e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801196c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011972:	2b00      	cmp	r3, #0
 8011974:	d05b      	beq.n	8011a2e <tcp_receive+0x50a>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801197a:	4b60      	ldr	r3, [pc, #384]	; (8011afc <tcp_receive+0x5d8>)
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	da54      	bge.n	8011a2e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011984:	4b5e      	ldr	r3, [pc, #376]	; (8011b00 <tcp_receive+0x5dc>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	b29a      	uxth	r2, r3
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801198e:	b29b      	uxth	r3, r3
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	b29b      	uxth	r3, r3
 8011994:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011998:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119a2:	10db      	asrs	r3, r3, #3
 80119a4:	b21b      	sxth	r3, r3
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119bc:	4413      	add	r3, r2
 80119be:	b29b      	uxth	r3, r3
 80119c0:	b21a      	sxth	r2, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80119c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	da05      	bge.n	80119da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80119ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119d2:	425b      	negs	r3, r3
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80119da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119e4:	109b      	asrs	r3, r3, #2
 80119e6:	b21b      	sxth	r3, r3
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80119f8:	b29a      	uxth	r2, r3
 80119fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119fe:	4413      	add	r3, r2
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	b21a      	sxth	r2, r3
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011a0e:	10db      	asrs	r3, r3, #3
 8011a10:	b21b      	sxth	r3, r3
 8011a12:	b29a      	uxth	r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4413      	add	r3, r2
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	b21a      	sxth	r2, r3
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011a2e:	4b35      	ldr	r3, [pc, #212]	; (8011b04 <tcp_receive+0x5e0>)
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	f000 84e1 	beq.w	80123fa <tcp_receive+0xed6>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7d1b      	ldrb	r3, [r3, #20]
 8011a3c:	2b06      	cmp	r3, #6
 8011a3e:	f200 84dc 	bhi.w	80123fa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a46:	4b30      	ldr	r3, [pc, #192]	; (8011b08 <tcp_receive+0x5e4>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	3b01      	subs	r3, #1
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	f2c0 808e 	blt.w	8011b70 <tcp_receive+0x64c>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a58:	4b2a      	ldr	r3, [pc, #168]	; (8011b04 <tcp_receive+0x5e0>)
 8011a5a:	881b      	ldrh	r3, [r3, #0]
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4b2a      	ldr	r3, [pc, #168]	; (8011b08 <tcp_receive+0x5e4>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	440b      	add	r3, r1
 8011a64:	1ad3      	subs	r3, r2, r3
 8011a66:	3301      	adds	r3, #1
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	f300 8081 	bgt.w	8011b70 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011a6e:	4b27      	ldr	r3, [pc, #156]	; (8011b0c <tcp_receive+0x5e8>)
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a78:	4b23      	ldr	r3, [pc, #140]	; (8011b08 <tcp_receive+0x5e4>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	1ad3      	subs	r3, r2, r3
 8011a7e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011a80:	4b22      	ldr	r3, [pc, #136]	; (8011b0c <tcp_receive+0x5e8>)
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d106      	bne.n	8011a96 <tcp_receive+0x572>
 8011a88:	4b21      	ldr	r3, [pc, #132]	; (8011b10 <tcp_receive+0x5ec>)
 8011a8a:	f240 5294 	movw	r2, #1428	; 0x594
 8011a8e:	4921      	ldr	r1, [pc, #132]	; (8011b14 <tcp_receive+0x5f0>)
 8011a90:	4821      	ldr	r0, [pc, #132]	; (8011b18 <tcp_receive+0x5f4>)
 8011a92:	f005 ff9b 	bl	80179cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d906      	bls.n	8011aae <tcp_receive+0x58a>
 8011aa0:	4b1b      	ldr	r3, [pc, #108]	; (8011b10 <tcp_receive+0x5ec>)
 8011aa2:	f240 5295 	movw	r2, #1429	; 0x595
 8011aa6:	491d      	ldr	r1, [pc, #116]	; (8011b1c <tcp_receive+0x5f8>)
 8011aa8:	481b      	ldr	r0, [pc, #108]	; (8011b18 <tcp_receive+0x5f4>)
 8011aaa:	f005 ff8f 	bl	80179cc <iprintf>
      off = (u16_t)off32;
 8011aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011ab4:	4b15      	ldr	r3, [pc, #84]	; (8011b0c <tcp_receive+0x5e8>)
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	891b      	ldrh	r3, [r3, #8]
 8011aba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d906      	bls.n	8011ad0 <tcp_receive+0x5ac>
 8011ac2:	4b13      	ldr	r3, [pc, #76]	; (8011b10 <tcp_receive+0x5ec>)
 8011ac4:	f240 5297 	movw	r2, #1431	; 0x597
 8011ac8:	4915      	ldr	r1, [pc, #84]	; (8011b20 <tcp_receive+0x5fc>)
 8011aca:	4813      	ldr	r0, [pc, #76]	; (8011b18 <tcp_receive+0x5f4>)
 8011acc:	f005 ff7e 	bl	80179cc <iprintf>
      inseg.len -= off;
 8011ad0:	4b0e      	ldr	r3, [pc, #56]	; (8011b0c <tcp_receive+0x5e8>)
 8011ad2:	891a      	ldrh	r2, [r3, #8]
 8011ad4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011ad8:	1ad3      	subs	r3, r2, r3
 8011ada:	b29a      	uxth	r2, r3
 8011adc:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <tcp_receive+0x5e8>)
 8011ade:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011ae0:	4b0a      	ldr	r3, [pc, #40]	; (8011b0c <tcp_receive+0x5e8>)
 8011ae2:	685b      	ldr	r3, [r3, #4]
 8011ae4:	891a      	ldrh	r2, [r3, #8]
 8011ae6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011aee:	e029      	b.n	8011b44 <tcp_receive+0x620>
 8011af0:	0801ae88 	.word	0x0801ae88
 8011af4:	0801ae90 	.word	0x0801ae90
 8011af8:	20004a2c 	.word	0x20004a2c
 8011afc:	20004a28 	.word	0x20004a28
 8011b00:	2000b8fc 	.word	0x2000b8fc
 8011b04:	20004a2e 	.word	0x20004a2e
 8011b08:	20004a24 	.word	0x20004a24
 8011b0c:	20004a04 	.word	0x20004a04
 8011b10:	0801ab20 	.word	0x0801ab20
 8011b14:	0801ae98 	.word	0x0801ae98
 8011b18:	0801ab6c 	.word	0x0801ab6c
 8011b1c:	0801aea8 	.word	0x0801aea8
 8011b20:	0801aeb8 	.word	0x0801aeb8
        off -= p->len;
 8011b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b26:	895b      	ldrh	r3, [r3, #10]
 8011b28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b2c:	1ad3      	subs	r3, r2, r3
 8011b2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011b36:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b46:	895b      	ldrh	r3, [r3, #10]
 8011b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011b4c:	429a      	cmp	r2, r3
 8011b4e:	d8e9      	bhi.n	8011b24 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011b50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b54:	4619      	mov	r1, r3
 8011b56:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011b58:	f7fc f8a2 	bl	800dca0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b60:	4a91      	ldr	r2, [pc, #580]	; (8011da8 <tcp_receive+0x884>)
 8011b62:	6013      	str	r3, [r2, #0]
 8011b64:	4b91      	ldr	r3, [pc, #580]	; (8011dac <tcp_receive+0x888>)
 8011b66:	68db      	ldr	r3, [r3, #12]
 8011b68:	4a8f      	ldr	r2, [pc, #572]	; (8011da8 <tcp_receive+0x884>)
 8011b6a:	6812      	ldr	r2, [r2, #0]
 8011b6c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011b6e:	e00d      	b.n	8011b8c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011b70:	4b8d      	ldr	r3, [pc, #564]	; (8011da8 <tcp_receive+0x884>)
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b78:	1ad3      	subs	r3, r2, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	da06      	bge.n	8011b8c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	8b5b      	ldrh	r3, [r3, #26]
 8011b82:	f043 0302 	orr.w	r3, r3, #2
 8011b86:	b29a      	uxth	r2, r3
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b8c:	4b86      	ldr	r3, [pc, #536]	; (8011da8 <tcp_receive+0x884>)
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	f2c0 842a 	blt.w	80123f0 <tcp_receive+0xecc>
 8011b9c:	4b82      	ldr	r3, [pc, #520]	; (8011da8 <tcp_receive+0x884>)
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba4:	6879      	ldr	r1, [r7, #4]
 8011ba6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ba8:	440b      	add	r3, r1
 8011baa:	1ad3      	subs	r3, r2, r3
 8011bac:	3301      	adds	r3, #1
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	f300 841e 	bgt.w	80123f0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb8:	4b7b      	ldr	r3, [pc, #492]	; (8011da8 <tcp_receive+0x884>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	f040 829a 	bne.w	80120f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011bc2:	4b7a      	ldr	r3, [pc, #488]	; (8011dac <tcp_receive+0x888>)
 8011bc4:	891c      	ldrh	r4, [r3, #8]
 8011bc6:	4b79      	ldr	r3, [pc, #484]	; (8011dac <tcp_receive+0x888>)
 8011bc8:	68db      	ldr	r3, [r3, #12]
 8011bca:	899b      	ldrh	r3, [r3, #12]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7fa fd40 	bl	800c654 <lwip_htons>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	b2db      	uxtb	r3, r3
 8011bd8:	f003 0303 	and.w	r3, r3, #3
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d001      	beq.n	8011be4 <tcp_receive+0x6c0>
 8011be0:	2301      	movs	r3, #1
 8011be2:	e000      	b.n	8011be6 <tcp_receive+0x6c2>
 8011be4:	2300      	movs	r3, #0
 8011be6:	4423      	add	r3, r4
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	4b71      	ldr	r3, [pc, #452]	; (8011db0 <tcp_receive+0x88c>)
 8011bec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011bf2:	4b6f      	ldr	r3, [pc, #444]	; (8011db0 <tcp_receive+0x88c>)
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d275      	bcs.n	8011ce6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011bfa:	4b6c      	ldr	r3, [pc, #432]	; (8011dac <tcp_receive+0x888>)
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	899b      	ldrh	r3, [r3, #12]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fa fd26 	bl	800c654 <lwip_htons>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	f003 0301 	and.w	r3, r3, #1
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d01f      	beq.n	8011c54 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011c14:	4b65      	ldr	r3, [pc, #404]	; (8011dac <tcp_receive+0x888>)
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	b21b      	sxth	r3, r3
 8011c1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c22:	b21c      	sxth	r4, r3
 8011c24:	4b61      	ldr	r3, [pc, #388]	; (8011dac <tcp_receive+0x888>)
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	899b      	ldrh	r3, [r3, #12]
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fa fd11 	bl	800c654 <lwip_htons>
 8011c32:	4603      	mov	r3, r0
 8011c34:	b2db      	uxtb	r3, r3
 8011c36:	b29b      	uxth	r3, r3
 8011c38:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fa fd08 	bl	800c654 <lwip_htons>
 8011c44:	4603      	mov	r3, r0
 8011c46:	b21b      	sxth	r3, r3
 8011c48:	4323      	orrs	r3, r4
 8011c4a:	b21a      	sxth	r2, r3
 8011c4c:	4b57      	ldr	r3, [pc, #348]	; (8011dac <tcp_receive+0x888>)
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	b292      	uxth	r2, r2
 8011c52:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c58:	4b54      	ldr	r3, [pc, #336]	; (8011dac <tcp_receive+0x888>)
 8011c5a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c5c:	4b53      	ldr	r3, [pc, #332]	; (8011dac <tcp_receive+0x888>)
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	899b      	ldrh	r3, [r3, #12]
 8011c62:	b29b      	uxth	r3, r3
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fa fcf5 	bl	800c654 <lwip_htons>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	b2db      	uxtb	r3, r3
 8011c6e:	f003 0302 	and.w	r3, r3, #2
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d005      	beq.n	8011c82 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011c76:	4b4d      	ldr	r3, [pc, #308]	; (8011dac <tcp_receive+0x888>)
 8011c78:	891b      	ldrh	r3, [r3, #8]
 8011c7a:	3b01      	subs	r3, #1
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	4b4b      	ldr	r3, [pc, #300]	; (8011dac <tcp_receive+0x888>)
 8011c80:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011c82:	4b4a      	ldr	r3, [pc, #296]	; (8011dac <tcp_receive+0x888>)
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	4a49      	ldr	r2, [pc, #292]	; (8011dac <tcp_receive+0x888>)
 8011c88:	8912      	ldrh	r2, [r2, #8]
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fb ff07 	bl	800daa0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011c92:	4b46      	ldr	r3, [pc, #280]	; (8011dac <tcp_receive+0x888>)
 8011c94:	891c      	ldrh	r4, [r3, #8]
 8011c96:	4b45      	ldr	r3, [pc, #276]	; (8011dac <tcp_receive+0x888>)
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	899b      	ldrh	r3, [r3, #12]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fa fcd8 	bl	800c654 <lwip_htons>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	f003 0303 	and.w	r3, r3, #3
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d001      	beq.n	8011cb4 <tcp_receive+0x790>
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	e000      	b.n	8011cb6 <tcp_receive+0x792>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4423      	add	r3, r4
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	4b3d      	ldr	r3, [pc, #244]	; (8011db0 <tcp_receive+0x88c>)
 8011cbc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011cbe:	4b3c      	ldr	r3, [pc, #240]	; (8011db0 <tcp_receive+0x88c>)
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	4b38      	ldr	r3, [pc, #224]	; (8011da8 <tcp_receive+0x884>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	441a      	add	r2, r3
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cce:	6879      	ldr	r1, [r7, #4]
 8011cd0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cd2:	440b      	add	r3, r1
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d006      	beq.n	8011ce6 <tcp_receive+0x7c2>
 8011cd8:	4b36      	ldr	r3, [pc, #216]	; (8011db4 <tcp_receive+0x890>)
 8011cda:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011cde:	4936      	ldr	r1, [pc, #216]	; (8011db8 <tcp_receive+0x894>)
 8011ce0:	4836      	ldr	r0, [pc, #216]	; (8011dbc <tcp_receive+0x898>)
 8011ce2:	f005 fe73 	bl	80179cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f000 80e7 	beq.w	8011ebe <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cf0:	4b2e      	ldr	r3, [pc, #184]	; (8011dac <tcp_receive+0x888>)
 8011cf2:	68db      	ldr	r3, [r3, #12]
 8011cf4:	899b      	ldrh	r3, [r3, #12]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fa fcab 	bl	800c654 <lwip_htons>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	f003 0301 	and.w	r3, r3, #1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d010      	beq.n	8011d2c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011d0a:	e00a      	b.n	8011d22 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d10:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d16:	681a      	ldr	r2, [r3, #0]
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f7fd fcc8 	bl	800f6b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d1f0      	bne.n	8011d0c <tcp_receive+0x7e8>
 8011d2a:	e0c8      	b.n	8011ebe <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d30:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011d32:	e052      	b.n	8011dda <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	899b      	ldrh	r3, [r3, #12]
 8011d3a:	b29b      	uxth	r3, r3
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7fa fc89 	bl	800c654 <lwip_htons>
 8011d42:	4603      	mov	r3, r0
 8011d44:	b2db      	uxtb	r3, r3
 8011d46:	f003 0301 	and.w	r3, r3, #1
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d03d      	beq.n	8011dca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011d4e:	4b17      	ldr	r3, [pc, #92]	; (8011dac <tcp_receive+0x888>)
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	899b      	ldrh	r3, [r3, #12]
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fa fc7c 	bl	800c654 <lwip_htons>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d130      	bne.n	8011dca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011d68:	4b10      	ldr	r3, [pc, #64]	; (8011dac <tcp_receive+0x888>)
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	899b      	ldrh	r3, [r3, #12]
 8011d6e:	b29c      	uxth	r4, r3
 8011d70:	2001      	movs	r0, #1
 8011d72:	f7fa fc6f 	bl	800c654 <lwip_htons>
 8011d76:	4603      	mov	r3, r0
 8011d78:	461a      	mov	r2, r3
 8011d7a:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <tcp_receive+0x888>)
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	4322      	orrs	r2, r4
 8011d80:	b292      	uxth	r2, r2
 8011d82:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011d84:	4b09      	ldr	r3, [pc, #36]	; (8011dac <tcp_receive+0x888>)
 8011d86:	891c      	ldrh	r4, [r3, #8]
 8011d88:	4b08      	ldr	r3, [pc, #32]	; (8011dac <tcp_receive+0x888>)
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	b29b      	uxth	r3, r3
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fa fc5f 	bl	800c654 <lwip_htons>
 8011d96:	4603      	mov	r3, r0
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f003 0303 	and.w	r3, r3, #3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d00e      	beq.n	8011dc0 <tcp_receive+0x89c>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e00d      	b.n	8011dc2 <tcp_receive+0x89e>
 8011da6:	bf00      	nop
 8011da8:	20004a24 	.word	0x20004a24
 8011dac:	20004a04 	.word	0x20004a04
 8011db0:	20004a2e 	.word	0x20004a2e
 8011db4:	0801ab20 	.word	0x0801ab20
 8011db8:	0801aec8 	.word	0x0801aec8
 8011dbc:	0801ab6c 	.word	0x0801ab6c
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	4423      	add	r3, r4
 8011dc4:	b29a      	uxth	r2, r3
 8011dc6:	4b98      	ldr	r3, [pc, #608]	; (8012028 <tcp_receive+0xb04>)
 8011dc8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dcc:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011dd4:	6938      	ldr	r0, [r7, #16]
 8011dd6:	f7fd fc6c 	bl	800f6b2 <tcp_seg_free>
            while (next &&
 8011dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d00e      	beq.n	8011dfe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011de0:	4b91      	ldr	r3, [pc, #580]	; (8012028 <tcp_receive+0xb04>)
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	461a      	mov	r2, r3
 8011de6:	4b91      	ldr	r3, [pc, #580]	; (801202c <tcp_receive+0xb08>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	441a      	add	r2, r3
 8011dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011df4:	8909      	ldrh	r1, [r1, #8]
 8011df6:	440b      	add	r3, r1
 8011df8:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	da9a      	bge.n	8011d34 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d059      	beq.n	8011eb8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011e04:	4b88      	ldr	r3, [pc, #544]	; (8012028 <tcp_receive+0xb04>)
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	461a      	mov	r2, r3
 8011e0a:	4b88      	ldr	r3, [pc, #544]	; (801202c <tcp_receive+0xb08>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	441a      	add	r2, r3
 8011e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	685b      	ldr	r3, [r3, #4]
 8011e16:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	dd4d      	ble.n	8011eb8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	b29a      	uxth	r2, r3
 8011e24:	4b81      	ldr	r3, [pc, #516]	; (801202c <tcp_receive+0xb08>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	b29b      	uxth	r3, r3
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	4b80      	ldr	r3, [pc, #512]	; (8012030 <tcp_receive+0xb0c>)
 8011e30:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011e32:	4b7f      	ldr	r3, [pc, #508]	; (8012030 <tcp_receive+0xb0c>)
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	899b      	ldrh	r3, [r3, #12]
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fa fc0a 	bl	800c654 <lwip_htons>
 8011e40:	4603      	mov	r3, r0
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	f003 0302 	and.w	r3, r3, #2
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d005      	beq.n	8011e58 <tcp_receive+0x934>
                inseg.len -= 1;
 8011e4c:	4b78      	ldr	r3, [pc, #480]	; (8012030 <tcp_receive+0xb0c>)
 8011e4e:	891b      	ldrh	r3, [r3, #8]
 8011e50:	3b01      	subs	r3, #1
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	4b76      	ldr	r3, [pc, #472]	; (8012030 <tcp_receive+0xb0c>)
 8011e56:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011e58:	4b75      	ldr	r3, [pc, #468]	; (8012030 <tcp_receive+0xb0c>)
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	4a74      	ldr	r2, [pc, #464]	; (8012030 <tcp_receive+0xb0c>)
 8011e5e:	8912      	ldrh	r2, [r2, #8]
 8011e60:	4611      	mov	r1, r2
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fb fe1c 	bl	800daa0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011e68:	4b71      	ldr	r3, [pc, #452]	; (8012030 <tcp_receive+0xb0c>)
 8011e6a:	891c      	ldrh	r4, [r3, #8]
 8011e6c:	4b70      	ldr	r3, [pc, #448]	; (8012030 <tcp_receive+0xb0c>)
 8011e6e:	68db      	ldr	r3, [r3, #12]
 8011e70:	899b      	ldrh	r3, [r3, #12]
 8011e72:	b29b      	uxth	r3, r3
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fa fbed 	bl	800c654 <lwip_htons>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0303 	and.w	r3, r3, #3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d001      	beq.n	8011e8a <tcp_receive+0x966>
 8011e86:	2301      	movs	r3, #1
 8011e88:	e000      	b.n	8011e8c <tcp_receive+0x968>
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	4423      	add	r3, r4
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	4b65      	ldr	r3, [pc, #404]	; (8012028 <tcp_receive+0xb04>)
 8011e92:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011e94:	4b64      	ldr	r3, [pc, #400]	; (8012028 <tcp_receive+0xb04>)
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	461a      	mov	r2, r3
 8011e9a:	4b64      	ldr	r3, [pc, #400]	; (801202c <tcp_receive+0xb08>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	441a      	add	r2, r3
 8011ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d006      	beq.n	8011eb8 <tcp_receive+0x994>
 8011eaa:	4b62      	ldr	r3, [pc, #392]	; (8012034 <tcp_receive+0xb10>)
 8011eac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011eb0:	4961      	ldr	r1, [pc, #388]	; (8012038 <tcp_receive+0xb14>)
 8011eb2:	4862      	ldr	r0, [pc, #392]	; (801203c <tcp_receive+0xb18>)
 8011eb4:	f005 fd8a 	bl	80179cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011ebc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011ebe:	4b5a      	ldr	r3, [pc, #360]	; (8012028 <tcp_receive+0xb04>)
 8011ec0:	881b      	ldrh	r3, [r3, #0]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	4b59      	ldr	r3, [pc, #356]	; (801202c <tcp_receive+0xb08>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	441a      	add	r2, r3
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ed2:	4b55      	ldr	r3, [pc, #340]	; (8012028 <tcp_receive+0xb04>)
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d206      	bcs.n	8011ee8 <tcp_receive+0x9c4>
 8011eda:	4b56      	ldr	r3, [pc, #344]	; (8012034 <tcp_receive+0xb10>)
 8011edc:	f240 6207 	movw	r2, #1543	; 0x607
 8011ee0:	4957      	ldr	r1, [pc, #348]	; (8012040 <tcp_receive+0xb1c>)
 8011ee2:	4856      	ldr	r0, [pc, #344]	; (801203c <tcp_receive+0xb18>)
 8011ee4:	f005 fd72 	bl	80179cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011eec:	4b4e      	ldr	r3, [pc, #312]	; (8012028 <tcp_receive+0xb04>)
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	1ad3      	subs	r3, r2, r3
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7fc feb5 	bl	800ec68 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011efe:	4b4c      	ldr	r3, [pc, #304]	; (8012030 <tcp_receive+0xb0c>)
 8011f00:	685b      	ldr	r3, [r3, #4]
 8011f02:	891b      	ldrh	r3, [r3, #8]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d006      	beq.n	8011f16 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011f08:	4b49      	ldr	r3, [pc, #292]	; (8012030 <tcp_receive+0xb0c>)
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	4a4d      	ldr	r2, [pc, #308]	; (8012044 <tcp_receive+0xb20>)
 8011f0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011f10:	4b47      	ldr	r3, [pc, #284]	; (8012030 <tcp_receive+0xb0c>)
 8011f12:	2200      	movs	r2, #0
 8011f14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011f16:	4b46      	ldr	r3, [pc, #280]	; (8012030 <tcp_receive+0xb0c>)
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	899b      	ldrh	r3, [r3, #12]
 8011f1c:	b29b      	uxth	r3, r3
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fa fb98 	bl	800c654 <lwip_htons>
 8011f24:	4603      	mov	r3, r0
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	f003 0301 	and.w	r3, r3, #1
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	f000 80b8 	beq.w	80120a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011f32:	4b45      	ldr	r3, [pc, #276]	; (8012048 <tcp_receive+0xb24>)
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	f043 0320 	orr.w	r3, r3, #32
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	4b42      	ldr	r3, [pc, #264]	; (8012048 <tcp_receive+0xb24>)
 8011f3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011f40:	e0af      	b.n	80120a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f4c:	68db      	ldr	r3, [r3, #12]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	4a36      	ldr	r2, [pc, #216]	; (801202c <tcp_receive+0xb08>)
 8011f52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	891b      	ldrh	r3, [r3, #8]
 8011f58:	461c      	mov	r4, r3
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	68db      	ldr	r3, [r3, #12]
 8011f5e:	899b      	ldrh	r3, [r3, #12]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fa fb76 	bl	800c654 <lwip_htons>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	f003 0303 	and.w	r3, r3, #3
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <tcp_receive+0xa54>
 8011f74:	2301      	movs	r3, #1
 8011f76:	e000      	b.n	8011f7a <tcp_receive+0xa56>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	191a      	adds	r2, r3, r4
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f80:	441a      	add	r2, r3
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f8a:	461c      	mov	r4, r3
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	891b      	ldrh	r3, [r3, #8]
 8011f90:	461d      	mov	r5, r3
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	899b      	ldrh	r3, [r3, #12]
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fa fb5a 	bl	800c654 <lwip_htons>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	f003 0303 	and.w	r3, r3, #3
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d001      	beq.n	8011fb0 <tcp_receive+0xa8c>
 8011fac:	2301      	movs	r3, #1
 8011fae:	e000      	b.n	8011fb2 <tcp_receive+0xa8e>
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	442b      	add	r3, r5
 8011fb4:	429c      	cmp	r4, r3
 8011fb6:	d206      	bcs.n	8011fc6 <tcp_receive+0xaa2>
 8011fb8:	4b1e      	ldr	r3, [pc, #120]	; (8012034 <tcp_receive+0xb10>)
 8011fba:	f240 622b 	movw	r2, #1579	; 0x62b
 8011fbe:	4923      	ldr	r1, [pc, #140]	; (801204c <tcp_receive+0xb28>)
 8011fc0:	481e      	ldr	r0, [pc, #120]	; (801203c <tcp_receive+0xb18>)
 8011fc2:	f005 fd03 	bl	80179cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011fc6:	68bb      	ldr	r3, [r7, #8]
 8011fc8:	891b      	ldrh	r3, [r3, #8]
 8011fca:	461c      	mov	r4, r3
 8011fcc:	68bb      	ldr	r3, [r7, #8]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	f7fa fb3d 	bl	800c654 <lwip_htons>
 8011fda:	4603      	mov	r3, r0
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	f003 0303 	and.w	r3, r3, #3
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d001      	beq.n	8011fea <tcp_receive+0xac6>
 8011fe6:	2301      	movs	r3, #1
 8011fe8:	e000      	b.n	8011fec <tcp_receive+0xac8>
 8011fea:	2300      	movs	r3, #0
 8011fec:	1919      	adds	r1, r3, r4
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011ff2:	b28b      	uxth	r3, r1
 8011ff4:	1ad3      	subs	r3, r2, r3
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ffc:	6878      	ldr	r0, [r7, #4]
 8011ffe:	f7fc fe33 	bl	800ec68 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	891b      	ldrh	r3, [r3, #8]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d028      	beq.n	801205e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801200c:	4b0d      	ldr	r3, [pc, #52]	; (8012044 <tcp_receive+0xb20>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d01d      	beq.n	8012050 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012014:	4b0b      	ldr	r3, [pc, #44]	; (8012044 <tcp_receive+0xb20>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	4619      	mov	r1, r3
 801201e:	4610      	mov	r0, r2
 8012020:	f7fb ff92 	bl	800df48 <pbuf_cat>
 8012024:	e018      	b.n	8012058 <tcp_receive+0xb34>
 8012026:	bf00      	nop
 8012028:	20004a2e 	.word	0x20004a2e
 801202c:	20004a24 	.word	0x20004a24
 8012030:	20004a04 	.word	0x20004a04
 8012034:	0801ab20 	.word	0x0801ab20
 8012038:	0801af00 	.word	0x0801af00
 801203c:	0801ab6c 	.word	0x0801ab6c
 8012040:	0801af3c 	.word	0x0801af3c
 8012044:	20004a34 	.word	0x20004a34
 8012048:	20004a31 	.word	0x20004a31
 801204c:	0801af5c 	.word	0x0801af5c
            } else {
              recv_data = cseg->p;
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	685b      	ldr	r3, [r3, #4]
 8012054:	4a70      	ldr	r2, [pc, #448]	; (8012218 <tcp_receive+0xcf4>)
 8012056:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	2200      	movs	r2, #0
 801205c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	899b      	ldrh	r3, [r3, #12]
 8012064:	b29b      	uxth	r3, r3
 8012066:	4618      	mov	r0, r3
 8012068:	f7fa faf4 	bl	800c654 <lwip_htons>
 801206c:	4603      	mov	r3, r0
 801206e:	b2db      	uxtb	r3, r3
 8012070:	f003 0301 	and.w	r3, r3, #1
 8012074:	2b00      	cmp	r3, #0
 8012076:	d00d      	beq.n	8012094 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012078:	4b68      	ldr	r3, [pc, #416]	; (801221c <tcp_receive+0xcf8>)
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	f043 0320 	orr.w	r3, r3, #32
 8012080:	b2da      	uxtb	r2, r3
 8012082:	4b66      	ldr	r3, [pc, #408]	; (801221c <tcp_receive+0xcf8>)
 8012084:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	7d1b      	ldrb	r3, [r3, #20]
 801208a:	2b04      	cmp	r3, #4
 801208c:	d102      	bne.n	8012094 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2207      	movs	r2, #7
 8012092:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801209c:	68b8      	ldr	r0, [r7, #8]
 801209e:	f7fd fb08 	bl	800f6b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d008      	beq.n	80120bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	685a      	ldr	r2, [r3, #4]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80120b6:	429a      	cmp	r2, r3
 80120b8:	f43f af43 	beq.w	8011f42 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8b5b      	ldrh	r3, [r3, #26]
 80120c0:	f003 0301 	and.w	r3, r3, #1
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d00e      	beq.n	80120e6 <tcp_receive+0xbc2>
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	8b5b      	ldrh	r3, [r3, #26]
 80120cc:	f023 0301 	bic.w	r3, r3, #1
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	835a      	strh	r2, [r3, #26]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	8b5b      	ldrh	r3, [r3, #26]
 80120da:	f043 0302 	orr.w	r3, r3, #2
 80120de:	b29a      	uxth	r2, r3
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120e4:	e188      	b.n	80123f8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	8b5b      	ldrh	r3, [r3, #26]
 80120ea:	f043 0301 	orr.w	r3, r3, #1
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80120f4:	e180      	b.n	80123f8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80120fe:	4848      	ldr	r0, [pc, #288]	; (8012220 <tcp_receive+0xcfc>)
 8012100:	f7fd faf0 	bl	800f6e4 <tcp_seg_copy>
 8012104:	4602      	mov	r2, r0
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	675a      	str	r2, [r3, #116]	; 0x74
 801210a:	e16d      	b.n	80123e8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801210c:	2300      	movs	r3, #0
 801210e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012114:	63bb      	str	r3, [r7, #56]	; 0x38
 8012116:	e157      	b.n	80123c8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	685a      	ldr	r2, [r3, #4]
 801211e:	4b41      	ldr	r3, [pc, #260]	; (8012224 <tcp_receive+0xd00>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	429a      	cmp	r2, r3
 8012124:	d11d      	bne.n	8012162 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012126:	4b3e      	ldr	r3, [pc, #248]	; (8012220 <tcp_receive+0xcfc>)
 8012128:	891a      	ldrh	r2, [r3, #8]
 801212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801212c:	891b      	ldrh	r3, [r3, #8]
 801212e:	429a      	cmp	r2, r3
 8012130:	f240 814f 	bls.w	80123d2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012134:	483a      	ldr	r0, [pc, #232]	; (8012220 <tcp_receive+0xcfc>)
 8012136:	f7fd fad5 	bl	800f6e4 <tcp_seg_copy>
 801213a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 8149 	beq.w	80123d6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012146:	2b00      	cmp	r3, #0
 8012148:	d003      	beq.n	8012152 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801214a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801214c:	697a      	ldr	r2, [r7, #20]
 801214e:	601a      	str	r2, [r3, #0]
 8012150:	e002      	b.n	8012158 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	697a      	ldr	r2, [r7, #20]
 8012156:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801215a:	6978      	ldr	r0, [r7, #20]
 801215c:	f7ff f8de 	bl	801131c <tcp_oos_insert_segment>
                }
                break;
 8012160:	e139      	b.n	80123d6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012164:	2b00      	cmp	r3, #0
 8012166:	d117      	bne.n	8012198 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012168:	4b2e      	ldr	r3, [pc, #184]	; (8012224 <tcp_receive+0xd00>)
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	2b00      	cmp	r3, #0
 8012176:	da57      	bge.n	8012228 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012178:	4829      	ldr	r0, [pc, #164]	; (8012220 <tcp_receive+0xcfc>)
 801217a:	f7fd fab3 	bl	800f6e4 <tcp_seg_copy>
 801217e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012180:	69bb      	ldr	r3, [r7, #24]
 8012182:	2b00      	cmp	r3, #0
 8012184:	f000 8129 	beq.w	80123da <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	69ba      	ldr	r2, [r7, #24]
 801218c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801218e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012190:	69b8      	ldr	r0, [r7, #24]
 8012192:	f7ff f8c3 	bl	801131c <tcp_oos_insert_segment>
                  }
                  break;
 8012196:	e120      	b.n	80123da <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012198:	4b22      	ldr	r3, [pc, #136]	; (8012224 <tcp_receive+0xd00>)
 801219a:	681a      	ldr	r2, [r3, #0]
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	3b01      	subs	r3, #1
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	db3e      	blt.n	8012228 <tcp_receive+0xd04>
 80121aa:	4b1e      	ldr	r3, [pc, #120]	; (8012224 <tcp_receive+0xd00>)
 80121ac:	681a      	ldr	r2, [r3, #0]
 80121ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	685b      	ldr	r3, [r3, #4]
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	3301      	adds	r3, #1
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dc35      	bgt.n	8012228 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80121bc:	4818      	ldr	r0, [pc, #96]	; (8012220 <tcp_receive+0xcfc>)
 80121be:	f7fd fa91 	bl	800f6e4 <tcp_seg_copy>
 80121c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f000 8109 	beq.w	80123de <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80121cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ce:	68db      	ldr	r3, [r3, #12]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121d4:	8912      	ldrh	r2, [r2, #8]
 80121d6:	441a      	add	r2, r3
 80121d8:	4b12      	ldr	r3, [pc, #72]	; (8012224 <tcp_receive+0xd00>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	1ad3      	subs	r3, r2, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	dd12      	ble.n	8012208 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80121e2:	4b10      	ldr	r3, [pc, #64]	; (8012224 <tcp_receive+0xd00>)
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ea:	68db      	ldr	r3, [r3, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	1ad3      	subs	r3, r2, r3
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80121f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121fe:	891b      	ldrh	r3, [r3, #8]
 8012200:	4619      	mov	r1, r3
 8012202:	4610      	mov	r0, r2
 8012204:	f7fb fc4c 	bl	800daa0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801220a:	69fa      	ldr	r2, [r7, #28]
 801220c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801220e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012210:	69f8      	ldr	r0, [r7, #28]
 8012212:	f7ff f883 	bl	801131c <tcp_oos_insert_segment>
                  }
                  break;
 8012216:	e0e2      	b.n	80123de <tcp_receive+0xeba>
 8012218:	20004a34 	.word	0x20004a34
 801221c:	20004a31 	.word	0x20004a31
 8012220:	20004a04 	.word	0x20004a04
 8012224:	20004a24 	.word	0x20004a24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	f040 80c6 	bne.w	80123c2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012236:	4b80      	ldr	r3, [pc, #512]	; (8012438 <tcp_receive+0xf14>)
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223c:	68db      	ldr	r3, [r3, #12]
 801223e:	685b      	ldr	r3, [r3, #4]
 8012240:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012242:	2b00      	cmp	r3, #0
 8012244:	f340 80bd 	ble.w	80123c2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224a:	68db      	ldr	r3, [r3, #12]
 801224c:	899b      	ldrh	r3, [r3, #12]
 801224e:	b29b      	uxth	r3, r3
 8012250:	4618      	mov	r0, r3
 8012252:	f7fa f9ff 	bl	800c654 <lwip_htons>
 8012256:	4603      	mov	r3, r0
 8012258:	b2db      	uxtb	r3, r3
 801225a:	f003 0301 	and.w	r3, r3, #1
 801225e:	2b00      	cmp	r3, #0
 8012260:	f040 80bf 	bne.w	80123e2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012264:	4875      	ldr	r0, [pc, #468]	; (801243c <tcp_receive+0xf18>)
 8012266:	f7fd fa3d 	bl	800f6e4 <tcp_seg_copy>
 801226a:	4602      	mov	r2, r0
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	2b00      	cmp	r3, #0
 8012276:	f000 80b6 	beq.w	80123e6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801227a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227c:	68db      	ldr	r3, [r3, #12]
 801227e:	685b      	ldr	r3, [r3, #4]
 8012280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012282:	8912      	ldrh	r2, [r2, #8]
 8012284:	441a      	add	r2, r3
 8012286:	4b6c      	ldr	r3, [pc, #432]	; (8012438 <tcp_receive+0xf14>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	dd12      	ble.n	80122b6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012290:	4b69      	ldr	r3, [pc, #420]	; (8012438 <tcp_receive+0xf14>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	b29a      	uxth	r2, r3
 8012296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012298:	68db      	ldr	r3, [r3, #12]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	b29b      	uxth	r3, r3
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80122a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a8:	685a      	ldr	r2, [r3, #4]
 80122aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ac:	891b      	ldrh	r3, [r3, #8]
 80122ae:	4619      	mov	r1, r3
 80122b0:	4610      	mov	r0, r2
 80122b2:	f7fb fbf5 	bl	800daa0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80122b6:	4b62      	ldr	r3, [pc, #392]	; (8012440 <tcp_receive+0xf1c>)
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	461a      	mov	r2, r3
 80122bc:	4b5e      	ldr	r3, [pc, #376]	; (8012438 <tcp_receive+0xf14>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	441a      	add	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80122ca:	440b      	add	r3, r1
 80122cc:	1ad3      	subs	r3, r2, r3
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f340 8089 	ble.w	80123e6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80122d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	68db      	ldr	r3, [r3, #12]
 80122da:	899b      	ldrh	r3, [r3, #12]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	4618      	mov	r0, r3
 80122e0:	f7fa f9b8 	bl	800c654 <lwip_htons>
 80122e4:	4603      	mov	r3, r0
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	f003 0301 	and.w	r3, r3, #1
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d022      	beq.n	8012336 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80122f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	68db      	ldr	r3, [r3, #12]
 80122f6:	899b      	ldrh	r3, [r3, #12]
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	b21b      	sxth	r3, r3
 80122fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012300:	b21c      	sxth	r4, r3
 8012302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	68db      	ldr	r3, [r3, #12]
 8012308:	899b      	ldrh	r3, [r3, #12]
 801230a:	b29b      	uxth	r3, r3
 801230c:	4618      	mov	r0, r3
 801230e:	f7fa f9a1 	bl	800c654 <lwip_htons>
 8012312:	4603      	mov	r3, r0
 8012314:	b2db      	uxtb	r3, r3
 8012316:	b29b      	uxth	r3, r3
 8012318:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801231c:	b29b      	uxth	r3, r3
 801231e:	4618      	mov	r0, r3
 8012320:	f7fa f998 	bl	800c654 <lwip_htons>
 8012324:	4603      	mov	r3, r0
 8012326:	b21b      	sxth	r3, r3
 8012328:	4323      	orrs	r3, r4
 801232a:	b21a      	sxth	r2, r3
 801232c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	b292      	uxth	r2, r2
 8012334:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801233a:	b29a      	uxth	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012340:	4413      	add	r3, r2
 8012342:	b299      	uxth	r1, r3
 8012344:	4b3c      	ldr	r3, [pc, #240]	; (8012438 <tcp_receive+0xf14>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	b29a      	uxth	r2, r3
 801234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	1a8a      	subs	r2, r1, r2
 8012350:	b292      	uxth	r2, r2
 8012352:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	685a      	ldr	r2, [r3, #4]
 801235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	891b      	ldrh	r3, [r3, #8]
 8012360:	4619      	mov	r1, r3
 8012362:	4610      	mov	r0, r2
 8012364:	f7fb fb9c 	bl	800daa0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	891c      	ldrh	r4, [r3, #8]
 801236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	899b      	ldrh	r3, [r3, #12]
 8012376:	b29b      	uxth	r3, r3
 8012378:	4618      	mov	r0, r3
 801237a:	f7fa f96b 	bl	800c654 <lwip_htons>
 801237e:	4603      	mov	r3, r0
 8012380:	b2db      	uxtb	r3, r3
 8012382:	f003 0303 	and.w	r3, r3, #3
 8012386:	2b00      	cmp	r3, #0
 8012388:	d001      	beq.n	801238e <tcp_receive+0xe6a>
 801238a:	2301      	movs	r3, #1
 801238c:	e000      	b.n	8012390 <tcp_receive+0xe6c>
 801238e:	2300      	movs	r3, #0
 8012390:	4423      	add	r3, r4
 8012392:	b29a      	uxth	r2, r3
 8012394:	4b2a      	ldr	r3, [pc, #168]	; (8012440 <tcp_receive+0xf1c>)
 8012396:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012398:	4b29      	ldr	r3, [pc, #164]	; (8012440 <tcp_receive+0xf1c>)
 801239a:	881b      	ldrh	r3, [r3, #0]
 801239c:	461a      	mov	r2, r3
 801239e:	4b26      	ldr	r3, [pc, #152]	; (8012438 <tcp_receive+0xf14>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	441a      	add	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a8:	6879      	ldr	r1, [r7, #4]
 80123aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123ac:	440b      	add	r3, r1
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d019      	beq.n	80123e6 <tcp_receive+0xec2>
 80123b2:	4b24      	ldr	r3, [pc, #144]	; (8012444 <tcp_receive+0xf20>)
 80123b4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80123b8:	4923      	ldr	r1, [pc, #140]	; (8012448 <tcp_receive+0xf24>)
 80123ba:	4824      	ldr	r0, [pc, #144]	; (801244c <tcp_receive+0xf28>)
 80123bc:	f005 fb06 	bl	80179cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80123c0:	e011      	b.n	80123e6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80123c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	f47f aea4 	bne.w	8012118 <tcp_receive+0xbf4>
 80123d0:	e00a      	b.n	80123e8 <tcp_receive+0xec4>
                break;
 80123d2:	bf00      	nop
 80123d4:	e008      	b.n	80123e8 <tcp_receive+0xec4>
                break;
 80123d6:	bf00      	nop
 80123d8:	e006      	b.n	80123e8 <tcp_receive+0xec4>
                  break;
 80123da:	bf00      	nop
 80123dc:	e004      	b.n	80123e8 <tcp_receive+0xec4>
                  break;
 80123de:	bf00      	nop
 80123e0:	e002      	b.n	80123e8 <tcp_receive+0xec4>
                  break;
 80123e2:	bf00      	nop
 80123e4:	e000      	b.n	80123e8 <tcp_receive+0xec4>
                break;
 80123e6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f001 fe8b 	bl	8014104 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80123ee:	e003      	b.n	80123f8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f001 fe87 	bl	8014104 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123f6:	e01a      	b.n	801242e <tcp_receive+0xf0a>
 80123f8:	e019      	b.n	801242e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80123fa:	4b0f      	ldr	r3, [pc, #60]	; (8012438 <tcp_receive+0xf14>)
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012402:	1ad3      	subs	r3, r2, r3
 8012404:	2b00      	cmp	r3, #0
 8012406:	db0a      	blt.n	801241e <tcp_receive+0xefa>
 8012408:	4b0b      	ldr	r3, [pc, #44]	; (8012438 <tcp_receive+0xf14>)
 801240a:	681a      	ldr	r2, [r3, #0]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012410:	6879      	ldr	r1, [r7, #4]
 8012412:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012414:	440b      	add	r3, r1
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	3301      	adds	r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	dd07      	ble.n	801242e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f043 0302 	orr.w	r3, r3, #2
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801242c:	e7ff      	b.n	801242e <tcp_receive+0xf0a>
 801242e:	bf00      	nop
 8012430:	3750      	adds	r7, #80	; 0x50
 8012432:	46bd      	mov	sp, r7
 8012434:	bdb0      	pop	{r4, r5, r7, pc}
 8012436:	bf00      	nop
 8012438:	20004a24 	.word	0x20004a24
 801243c:	20004a04 	.word	0x20004a04
 8012440:	20004a2e 	.word	0x20004a2e
 8012444:	0801ab20 	.word	0x0801ab20
 8012448:	0801aec8 	.word	0x0801aec8
 801244c:	0801ab6c 	.word	0x0801ab6c

08012450 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012450:	b480      	push	{r7}
 8012452:	b083      	sub	sp, #12
 8012454:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012456:	4b15      	ldr	r3, [pc, #84]	; (80124ac <tcp_get_next_optbyte+0x5c>)
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	b291      	uxth	r1, r2
 801245e:	4a13      	ldr	r2, [pc, #76]	; (80124ac <tcp_get_next_optbyte+0x5c>)
 8012460:	8011      	strh	r1, [r2, #0]
 8012462:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012464:	4b12      	ldr	r3, [pc, #72]	; (80124b0 <tcp_get_next_optbyte+0x60>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d004      	beq.n	8012476 <tcp_get_next_optbyte+0x26>
 801246c:	4b11      	ldr	r3, [pc, #68]	; (80124b4 <tcp_get_next_optbyte+0x64>)
 801246e:	881b      	ldrh	r3, [r3, #0]
 8012470:	88fa      	ldrh	r2, [r7, #6]
 8012472:	429a      	cmp	r2, r3
 8012474:	d208      	bcs.n	8012488 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012476:	4b10      	ldr	r3, [pc, #64]	; (80124b8 <tcp_get_next_optbyte+0x68>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	3314      	adds	r3, #20
 801247c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801247e:	88fb      	ldrh	r3, [r7, #6]
 8012480:	683a      	ldr	r2, [r7, #0]
 8012482:	4413      	add	r3, r2
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	e00b      	b.n	80124a0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012488:	88fb      	ldrh	r3, [r7, #6]
 801248a:	b2da      	uxtb	r2, r3
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <tcp_get_next_optbyte+0x64>)
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	b2db      	uxtb	r3, r3
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012496:	4b06      	ldr	r3, [pc, #24]	; (80124b0 <tcp_get_next_optbyte+0x60>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	797b      	ldrb	r3, [r7, #5]
 801249c:	4413      	add	r3, r2
 801249e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	370c      	adds	r7, #12
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr
 80124ac:	20004a20 	.word	0x20004a20
 80124b0:	20004a1c 	.word	0x20004a1c
 80124b4:	20004a1a 	.word	0x20004a1a
 80124b8:	20004a14 	.word	0x20004a14

080124bc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <tcp_parseopt+0x1c>
 80124ca:	4b32      	ldr	r3, [pc, #200]	; (8012594 <tcp_parseopt+0xd8>)
 80124cc:	f240 727d 	movw	r2, #1917	; 0x77d
 80124d0:	4931      	ldr	r1, [pc, #196]	; (8012598 <tcp_parseopt+0xdc>)
 80124d2:	4832      	ldr	r0, [pc, #200]	; (801259c <tcp_parseopt+0xe0>)
 80124d4:	f005 fa7a 	bl	80179cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80124d8:	4b31      	ldr	r3, [pc, #196]	; (80125a0 <tcp_parseopt+0xe4>)
 80124da:	881b      	ldrh	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d055      	beq.n	801258c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80124e0:	4b30      	ldr	r3, [pc, #192]	; (80125a4 <tcp_parseopt+0xe8>)
 80124e2:	2200      	movs	r2, #0
 80124e4:	801a      	strh	r2, [r3, #0]
 80124e6:	e045      	b.n	8012574 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80124e8:	f7ff ffb2 	bl	8012450 <tcp_get_next_optbyte>
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80124f0:	7bfb      	ldrb	r3, [r7, #15]
 80124f2:	2b02      	cmp	r3, #2
 80124f4:	d006      	beq.n	8012504 <tcp_parseopt+0x48>
 80124f6:	2b02      	cmp	r3, #2
 80124f8:	dc2b      	bgt.n	8012552 <tcp_parseopt+0x96>
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d041      	beq.n	8012582 <tcp_parseopt+0xc6>
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d127      	bne.n	8012552 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012502:	e037      	b.n	8012574 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012504:	f7ff ffa4 	bl	8012450 <tcp_get_next_optbyte>
 8012508:	4603      	mov	r3, r0
 801250a:	2b04      	cmp	r3, #4
 801250c:	d13b      	bne.n	8012586 <tcp_parseopt+0xca>
 801250e:	4b25      	ldr	r3, [pc, #148]	; (80125a4 <tcp_parseopt+0xe8>)
 8012510:	881b      	ldrh	r3, [r3, #0]
 8012512:	3301      	adds	r3, #1
 8012514:	4a22      	ldr	r2, [pc, #136]	; (80125a0 <tcp_parseopt+0xe4>)
 8012516:	8812      	ldrh	r2, [r2, #0]
 8012518:	4293      	cmp	r3, r2
 801251a:	da34      	bge.n	8012586 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801251c:	f7ff ff98 	bl	8012450 <tcp_get_next_optbyte>
 8012520:	4603      	mov	r3, r0
 8012522:	b29b      	uxth	r3, r3
 8012524:	021b      	lsls	r3, r3, #8
 8012526:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012528:	f7ff ff92 	bl	8012450 <tcp_get_next_optbyte>
 801252c:	4603      	mov	r3, r0
 801252e:	b29a      	uxth	r2, r3
 8012530:	89bb      	ldrh	r3, [r7, #12]
 8012532:	4313      	orrs	r3, r2
 8012534:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012536:	89bb      	ldrh	r3, [r7, #12]
 8012538:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801253c:	d804      	bhi.n	8012548 <tcp_parseopt+0x8c>
 801253e:	89bb      	ldrh	r3, [r7, #12]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <tcp_parseopt+0x8c>
 8012544:	89ba      	ldrh	r2, [r7, #12]
 8012546:	e001      	b.n	801254c <tcp_parseopt+0x90>
 8012548:	f44f 7206 	mov.w	r2, #536	; 0x218
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012550:	e010      	b.n	8012574 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012552:	f7ff ff7d 	bl	8012450 <tcp_get_next_optbyte>
 8012556:	4603      	mov	r3, r0
 8012558:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801255a:	7afb      	ldrb	r3, [r7, #11]
 801255c:	2b01      	cmp	r3, #1
 801255e:	d914      	bls.n	801258a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	b29a      	uxth	r2, r3
 8012564:	4b0f      	ldr	r3, [pc, #60]	; (80125a4 <tcp_parseopt+0xe8>)
 8012566:	881b      	ldrh	r3, [r3, #0]
 8012568:	4413      	add	r3, r2
 801256a:	b29b      	uxth	r3, r3
 801256c:	3b02      	subs	r3, #2
 801256e:	b29a      	uxth	r2, r3
 8012570:	4b0c      	ldr	r3, [pc, #48]	; (80125a4 <tcp_parseopt+0xe8>)
 8012572:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012574:	4b0b      	ldr	r3, [pc, #44]	; (80125a4 <tcp_parseopt+0xe8>)
 8012576:	881a      	ldrh	r2, [r3, #0]
 8012578:	4b09      	ldr	r3, [pc, #36]	; (80125a0 <tcp_parseopt+0xe4>)
 801257a:	881b      	ldrh	r3, [r3, #0]
 801257c:	429a      	cmp	r2, r3
 801257e:	d3b3      	bcc.n	80124e8 <tcp_parseopt+0x2c>
 8012580:	e004      	b.n	801258c <tcp_parseopt+0xd0>
          return;
 8012582:	bf00      	nop
 8012584:	e002      	b.n	801258c <tcp_parseopt+0xd0>
            return;
 8012586:	bf00      	nop
 8012588:	e000      	b.n	801258c <tcp_parseopt+0xd0>
            return;
 801258a:	bf00      	nop
      }
    }
  }
}
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	0801ab20 	.word	0x0801ab20
 8012598:	0801af84 	.word	0x0801af84
 801259c:	0801ab6c 	.word	0x0801ab6c
 80125a0:	20004a18 	.word	0x20004a18
 80125a4:	20004a20 	.word	0x20004a20

080125a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80125a8:	b480      	push	{r7}
 80125aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80125ac:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <tcp_trigger_input_pcb_close+0x1c>)
 80125ae:	781b      	ldrb	r3, [r3, #0]
 80125b0:	f043 0310 	orr.w	r3, r3, #16
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	4b03      	ldr	r3, [pc, #12]	; (80125c4 <tcp_trigger_input_pcb_close+0x1c>)
 80125b8:	701a      	strb	r2, [r3, #0]
}
 80125ba:	bf00      	nop
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	20004a31 	.word	0x20004a31

080125c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00a      	beq.n	80125f0 <tcp_route+0x28>
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	7a1b      	ldrb	r3, [r3, #8]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d006      	beq.n	80125f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	7a1b      	ldrb	r3, [r3, #8]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7fb f852 	bl	800d690 <netif_get_by_index>
 80125ec:	4603      	mov	r3, r0
 80125ee:	e003      	b.n	80125f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f003 fc4b 	bl	8015e8c <ip4_route>
 80125f6:	4603      	mov	r3, r0
  }
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012600:	b590      	push	{r4, r7, lr}
 8012602:	b087      	sub	sp, #28
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	603b      	str	r3, [r7, #0]
 801260c:	4613      	mov	r3, r2
 801260e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d105      	bne.n	8012622 <tcp_create_segment+0x22>
 8012616:	4b44      	ldr	r3, [pc, #272]	; (8012728 <tcp_create_segment+0x128>)
 8012618:	22a3      	movs	r2, #163	; 0xa3
 801261a:	4944      	ldr	r1, [pc, #272]	; (801272c <tcp_create_segment+0x12c>)
 801261c:	4844      	ldr	r0, [pc, #272]	; (8012730 <tcp_create_segment+0x130>)
 801261e:	f005 f9d5 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d105      	bne.n	8012634 <tcp_create_segment+0x34>
 8012628:	4b3f      	ldr	r3, [pc, #252]	; (8012728 <tcp_create_segment+0x128>)
 801262a:	22a4      	movs	r2, #164	; 0xa4
 801262c:	4941      	ldr	r1, [pc, #260]	; (8012734 <tcp_create_segment+0x134>)
 801262e:	4840      	ldr	r0, [pc, #256]	; (8012730 <tcp_create_segment+0x130>)
 8012630:	f005 f9cc 	bl	80179cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012634:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	b2db      	uxtb	r3, r3
 801263c:	f003 0304 	and.w	r3, r3, #4
 8012640:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012642:	2003      	movs	r0, #3
 8012644:	f7fa fcbc 	bl	800cfc0 <memp_malloc>
 8012648:	6138      	str	r0, [r7, #16]
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d104      	bne.n	801265a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012650:	68b8      	ldr	r0, [r7, #8]
 8012652:	f7fb fbab 	bl	800ddac <pbuf_free>
    return NULL;
 8012656:	2300      	movs	r3, #0
 8012658:	e061      	b.n	801271e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012660:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	68ba      	ldr	r2, [r7, #8]
 801266c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	891a      	ldrh	r2, [r3, #8]
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	b29b      	uxth	r3, r3
 8012676:	429a      	cmp	r2, r3
 8012678:	d205      	bcs.n	8012686 <tcp_create_segment+0x86>
 801267a:	4b2b      	ldr	r3, [pc, #172]	; (8012728 <tcp_create_segment+0x128>)
 801267c:	22b0      	movs	r2, #176	; 0xb0
 801267e:	492e      	ldr	r1, [pc, #184]	; (8012738 <tcp_create_segment+0x138>)
 8012680:	482b      	ldr	r0, [pc, #172]	; (8012730 <tcp_create_segment+0x130>)
 8012682:	f005 f9a3 	bl	80179cc <iprintf>
  seg->len = p->tot_len - optlen;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	891a      	ldrh	r2, [r3, #8]
 801268a:	7dfb      	ldrb	r3, [r7, #23]
 801268c:	b29b      	uxth	r3, r3
 801268e:	1ad3      	subs	r3, r2, r3
 8012690:	b29a      	uxth	r2, r3
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012696:	2114      	movs	r1, #20
 8012698:	68b8      	ldr	r0, [r7, #8]
 801269a:	f7fb faf1 	bl	800dc80 <pbuf_add_header>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d004      	beq.n	80126ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80126a4:	6938      	ldr	r0, [r7, #16]
 80126a6:	f7fd f804 	bl	800f6b2 <tcp_seg_free>
    return NULL;
 80126aa:	2300      	movs	r3, #0
 80126ac:	e037      	b.n	801271e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	8ada      	ldrh	r2, [r3, #22]
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	68dc      	ldr	r4, [r3, #12]
 80126c0:	4610      	mov	r0, r2
 80126c2:	f7f9 ffc7 	bl	800c654 <lwip_htons>
 80126c6:	4603      	mov	r3, r0
 80126c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	8b1a      	ldrh	r2, [r3, #24]
 80126ce:	693b      	ldr	r3, [r7, #16]
 80126d0:	68dc      	ldr	r4, [r3, #12]
 80126d2:	4610      	mov	r0, r2
 80126d4:	f7f9 ffbe 	bl	800c654 <lwip_htons>
 80126d8:	4603      	mov	r3, r0
 80126da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	68dc      	ldr	r4, [r3, #12]
 80126e0:	6838      	ldr	r0, [r7, #0]
 80126e2:	f7f9 ffcc 	bl	800c67e <lwip_htonl>
 80126e6:	4603      	mov	r3, r0
 80126e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	089b      	lsrs	r3, r3, #2
 80126ee:	b2db      	uxtb	r3, r3
 80126f0:	b29b      	uxth	r3, r3
 80126f2:	3305      	adds	r3, #5
 80126f4:	b29b      	uxth	r3, r3
 80126f6:	031b      	lsls	r3, r3, #12
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	79fb      	ldrb	r3, [r7, #7]
 80126fc:	b29b      	uxth	r3, r3
 80126fe:	4313      	orrs	r3, r2
 8012700:	b29a      	uxth	r2, r3
 8012702:	693b      	ldr	r3, [r7, #16]
 8012704:	68dc      	ldr	r4, [r3, #12]
 8012706:	4610      	mov	r0, r2
 8012708:	f7f9 ffa4 	bl	800c654 <lwip_htons>
 801270c:	4603      	mov	r3, r0
 801270e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	68db      	ldr	r3, [r3, #12]
 8012714:	2200      	movs	r2, #0
 8012716:	749a      	strb	r2, [r3, #18]
 8012718:	2200      	movs	r2, #0
 801271a:	74da      	strb	r2, [r3, #19]
  return seg;
 801271c:	693b      	ldr	r3, [r7, #16]
}
 801271e:	4618      	mov	r0, r3
 8012720:	371c      	adds	r7, #28
 8012722:	46bd      	mov	sp, r7
 8012724:	bd90      	pop	{r4, r7, pc}
 8012726:	bf00      	nop
 8012728:	0801afa0 	.word	0x0801afa0
 801272c:	0801afd4 	.word	0x0801afd4
 8012730:	0801aff4 	.word	0x0801aff4
 8012734:	0801b01c 	.word	0x0801b01c
 8012738:	0801b040 	.word	0x0801b040

0801273c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b086      	sub	sp, #24
 8012740:	af00      	add	r7, sp, #0
 8012742:	607b      	str	r3, [r7, #4]
 8012744:	4603      	mov	r3, r0
 8012746:	73fb      	strb	r3, [r7, #15]
 8012748:	460b      	mov	r3, r1
 801274a:	81bb      	strh	r3, [r7, #12]
 801274c:	4613      	mov	r3, r2
 801274e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012750:	89bb      	ldrh	r3, [r7, #12]
 8012752:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d105      	bne.n	8012766 <tcp_pbuf_prealloc+0x2a>
 801275a:	4b30      	ldr	r3, [pc, #192]	; (801281c <tcp_pbuf_prealloc+0xe0>)
 801275c:	22e8      	movs	r2, #232	; 0xe8
 801275e:	4930      	ldr	r1, [pc, #192]	; (8012820 <tcp_pbuf_prealloc+0xe4>)
 8012760:	4830      	ldr	r0, [pc, #192]	; (8012824 <tcp_pbuf_prealloc+0xe8>)
 8012762:	f005 f933 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012766:	6a3b      	ldr	r3, [r7, #32]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d105      	bne.n	8012778 <tcp_pbuf_prealloc+0x3c>
 801276c:	4b2b      	ldr	r3, [pc, #172]	; (801281c <tcp_pbuf_prealloc+0xe0>)
 801276e:	22e9      	movs	r2, #233	; 0xe9
 8012770:	492d      	ldr	r1, [pc, #180]	; (8012828 <tcp_pbuf_prealloc+0xec>)
 8012772:	482c      	ldr	r0, [pc, #176]	; (8012824 <tcp_pbuf_prealloc+0xe8>)
 8012774:	f005 f92a 	bl	80179cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012778:	89ba      	ldrh	r2, [r7, #12]
 801277a:	897b      	ldrh	r3, [r7, #10]
 801277c:	429a      	cmp	r2, r3
 801277e:	d221      	bcs.n	80127c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012784:	f003 0302 	and.w	r3, r3, #2
 8012788:	2b00      	cmp	r3, #0
 801278a:	d111      	bne.n	80127b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	8b5b      	ldrh	r3, [r3, #26]
 8012790:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012794:	2b00      	cmp	r3, #0
 8012796:	d115      	bne.n	80127c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012798:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801279c:	2b00      	cmp	r3, #0
 801279e:	d007      	beq.n	80127b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80127a0:	6a3b      	ldr	r3, [r7, #32]
 80127a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d103      	bne.n	80127b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80127a8:	6a3b      	ldr	r3, [r7, #32]
 80127aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d009      	beq.n	80127c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80127b0:	89bb      	ldrh	r3, [r7, #12]
 80127b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80127b6:	f023 0203 	bic.w	r2, r3, #3
 80127ba:	897b      	ldrh	r3, [r7, #10]
 80127bc:	4293      	cmp	r3, r2
 80127be:	bf28      	it	cs
 80127c0:	4613      	movcs	r3, r2
 80127c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80127c4:	8af9      	ldrh	r1, [r7, #22]
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7fb f809 	bl	800d7e4 <pbuf_alloc>
 80127d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d101      	bne.n	80127de <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80127da:	2300      	movs	r3, #0
 80127dc:	e019      	b.n	8012812 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d006      	beq.n	80127f4 <tcp_pbuf_prealloc+0xb8>
 80127e6:	4b0d      	ldr	r3, [pc, #52]	; (801281c <tcp_pbuf_prealloc+0xe0>)
 80127e8:	f240 120b 	movw	r2, #267	; 0x10b
 80127ec:	490f      	ldr	r1, [pc, #60]	; (801282c <tcp_pbuf_prealloc+0xf0>)
 80127ee:	480d      	ldr	r0, [pc, #52]	; (8012824 <tcp_pbuf_prealloc+0xe8>)
 80127f0:	f005 f8ec 	bl	80179cc <iprintf>
  *oversize = p->len - length;
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	895a      	ldrh	r2, [r3, #10]
 80127f8:	89bb      	ldrh	r3, [r7, #12]
 80127fa:	1ad3      	subs	r3, r2, r3
 80127fc:	b29a      	uxth	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	89ba      	ldrh	r2, [r7, #12]
 8012806:	811a      	strh	r2, [r3, #8]
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	891a      	ldrh	r2, [r3, #8]
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	815a      	strh	r2, [r3, #10]
  return p;
 8012810:	693b      	ldr	r3, [r7, #16]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3718      	adds	r7, #24
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	0801afa0 	.word	0x0801afa0
 8012820:	0801b058 	.word	0x0801b058
 8012824:	0801aff4 	.word	0x0801aff4
 8012828:	0801b07c 	.word	0x0801b07c
 801282c:	0801b09c 	.word	0x0801b09c

08012830 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b082      	sub	sp, #8
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	460b      	mov	r3, r1
 801283a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d106      	bne.n	8012850 <tcp_write_checks+0x20>
 8012842:	4b33      	ldr	r3, [pc, #204]	; (8012910 <tcp_write_checks+0xe0>)
 8012844:	f240 1233 	movw	r2, #307	; 0x133
 8012848:	4932      	ldr	r1, [pc, #200]	; (8012914 <tcp_write_checks+0xe4>)
 801284a:	4833      	ldr	r0, [pc, #204]	; (8012918 <tcp_write_checks+0xe8>)
 801284c:	f005 f8be 	bl	80179cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	7d1b      	ldrb	r3, [r3, #20]
 8012854:	2b04      	cmp	r3, #4
 8012856:	d00e      	beq.n	8012876 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801285c:	2b07      	cmp	r3, #7
 801285e:	d00a      	beq.n	8012876 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012864:	2b02      	cmp	r3, #2
 8012866:	d006      	beq.n	8012876 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801286c:	2b03      	cmp	r3, #3
 801286e:	d002      	beq.n	8012876 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012870:	f06f 030a 	mvn.w	r3, #10
 8012874:	e048      	b.n	8012908 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012876:	887b      	ldrh	r3, [r7, #2]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d101      	bne.n	8012880 <tcp_write_checks+0x50>
    return ERR_OK;
 801287c:	2300      	movs	r3, #0
 801287e:	e043      	b.n	8012908 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012886:	887a      	ldrh	r2, [r7, #2]
 8012888:	429a      	cmp	r2, r3
 801288a:	d909      	bls.n	80128a0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	8b5b      	ldrh	r3, [r3, #26]
 8012890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012894:	b29a      	uxth	r2, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801289a:	f04f 33ff 	mov.w	r3, #4294967295
 801289e:	e033      	b.n	8012908 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128a6:	2b08      	cmp	r3, #8
 80128a8:	d909      	bls.n	80128be <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	8b5b      	ldrh	r3, [r3, #26]
 80128ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80128b8:	f04f 33ff 	mov.w	r3, #4294967295
 80128bc:	e024      	b.n	8012908 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d00f      	beq.n	80128e8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d11a      	bne.n	8012906 <tcp_write_checks+0xd6>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d116      	bne.n	8012906 <tcp_write_checks+0xd6>
 80128d8:	4b0d      	ldr	r3, [pc, #52]	; (8012910 <tcp_write_checks+0xe0>)
 80128da:	f240 1255 	movw	r2, #341	; 0x155
 80128de:	490f      	ldr	r1, [pc, #60]	; (801291c <tcp_write_checks+0xec>)
 80128e0:	480d      	ldr	r0, [pc, #52]	; (8012918 <tcp_write_checks+0xe8>)
 80128e2:	f005 f873 	bl	80179cc <iprintf>
 80128e6:	e00e      	b.n	8012906 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d103      	bne.n	80128f8 <tcp_write_checks+0xc8>
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d006      	beq.n	8012906 <tcp_write_checks+0xd6>
 80128f8:	4b05      	ldr	r3, [pc, #20]	; (8012910 <tcp_write_checks+0xe0>)
 80128fa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80128fe:	4908      	ldr	r1, [pc, #32]	; (8012920 <tcp_write_checks+0xf0>)
 8012900:	4805      	ldr	r0, [pc, #20]	; (8012918 <tcp_write_checks+0xe8>)
 8012902:	f005 f863 	bl	80179cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012906:	2300      	movs	r3, #0
}
 8012908:	4618      	mov	r0, r3
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	0801afa0 	.word	0x0801afa0
 8012914:	0801b0b0 	.word	0x0801b0b0
 8012918:	0801aff4 	.word	0x0801aff4
 801291c:	0801b0d0 	.word	0x0801b0d0
 8012920:	0801b10c 	.word	0x0801b10c

08012924 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012924:	b590      	push	{r4, r7, lr}
 8012926:	b09b      	sub	sp, #108	; 0x6c
 8012928:	af04      	add	r7, sp, #16
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	4611      	mov	r1, r2
 8012930:	461a      	mov	r2, r3
 8012932:	460b      	mov	r3, r1
 8012934:	80fb      	strh	r3, [r7, #6]
 8012936:	4613      	mov	r3, r2
 8012938:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801293a:	2300      	movs	r3, #0
 801293c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801293e:	2300      	movs	r3, #0
 8012940:	653b      	str	r3, [r7, #80]	; 0x50
 8012942:	2300      	movs	r3, #0
 8012944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012946:	2300      	movs	r3, #0
 8012948:	64bb      	str	r3, [r7, #72]	; 0x48
 801294a:	2300      	movs	r3, #0
 801294c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801294e:	2300      	movs	r3, #0
 8012950:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8012954:	2300      	movs	r3, #0
 8012956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801295e:	2300      	movs	r3, #0
 8012960:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012962:	2300      	movs	r3, #0
 8012964:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d109      	bne.n	8012980 <tcp_write+0x5c>
 801296c:	4ba4      	ldr	r3, [pc, #656]	; (8012c00 <tcp_write+0x2dc>)
 801296e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012972:	49a4      	ldr	r1, [pc, #656]	; (8012c04 <tcp_write+0x2e0>)
 8012974:	48a4      	ldr	r0, [pc, #656]	; (8012c08 <tcp_write+0x2e4>)
 8012976:	f005 f829 	bl	80179cc <iprintf>
 801297a:	f06f 030f 	mvn.w	r3, #15
 801297e:	e32a      	b.n	8012fd6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012986:	085b      	lsrs	r3, r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801298e:	4293      	cmp	r3, r2
 8012990:	bf28      	it	cs
 8012992:	4613      	movcs	r3, r2
 8012994:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012998:	2b00      	cmp	r3, #0
 801299a:	d102      	bne.n	80129a2 <tcp_write+0x7e>
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129a0:	e000      	b.n	80129a4 <tcp_write+0x80>
 80129a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d109      	bne.n	80129c0 <tcp_write+0x9c>
 80129ac:	4b94      	ldr	r3, [pc, #592]	; (8012c00 <tcp_write+0x2dc>)
 80129ae:	f240 12ad 	movw	r2, #429	; 0x1ad
 80129b2:	4996      	ldr	r1, [pc, #600]	; (8012c0c <tcp_write+0x2e8>)
 80129b4:	4894      	ldr	r0, [pc, #592]	; (8012c08 <tcp_write+0x2e4>)
 80129b6:	f005 f809 	bl	80179cc <iprintf>
 80129ba:	f06f 030f 	mvn.w	r3, #15
 80129be:	e30a      	b.n	8012fd6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80129c0:	88fb      	ldrh	r3, [r7, #6]
 80129c2:	4619      	mov	r1, r3
 80129c4:	68f8      	ldr	r0, [r7, #12]
 80129c6:	f7ff ff33 	bl	8012830 <tcp_write_checks>
 80129ca:	4603      	mov	r3, r0
 80129cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80129d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <tcp_write+0xba>
    return err;
 80129d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80129dc:	e2fb      	b.n	8012fd6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129e8:	2300      	movs	r3, #0
 80129ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	f000 80f6 	beq.w	8012be4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129fc:	653b      	str	r3, [r7, #80]	; 0x50
 80129fe:	e002      	b.n	8012a06 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d1f8      	bne.n	8012a00 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8012a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a10:	7a9b      	ldrb	r3, [r3, #10]
 8012a12:	009b      	lsls	r3, r3, #2
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	f003 0304 	and.w	r3, r3, #4
 8012a1a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012a1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a20:	891b      	ldrh	r3, [r3, #8]
 8012a22:	4619      	mov	r1, r3
 8012a24:	8c3b      	ldrh	r3, [r7, #32]
 8012a26:	440b      	add	r3, r1
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	da06      	bge.n	8012a3a <tcp_write+0x116>
 8012a2c:	4b74      	ldr	r3, [pc, #464]	; (8012c00 <tcp_write+0x2dc>)
 8012a2e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012a32:	4977      	ldr	r1, [pc, #476]	; (8012c10 <tcp_write+0x2ec>)
 8012a34:	4874      	ldr	r0, [pc, #464]	; (8012c08 <tcp_write+0x2e4>)
 8012a36:	f004 ffc9 	bl	80179cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a3c:	891a      	ldrh	r2, [r3, #8]
 8012a3e:	8c3b      	ldrh	r3, [r7, #32]
 8012a40:	4413      	add	r3, r2
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a46:	1ad3      	subs	r3, r2, r3
 8012a48:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012a50:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012a52:	8a7b      	ldrh	r3, [r7, #18]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d026      	beq.n	8012aa6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8012a58:	8a7b      	ldrh	r3, [r7, #18]
 8012a5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d206      	bcs.n	8012a6e <tcp_write+0x14a>
 8012a60:	4b67      	ldr	r3, [pc, #412]	; (8012c00 <tcp_write+0x2dc>)
 8012a62:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8012a66:	496b      	ldr	r1, [pc, #428]	; (8012c14 <tcp_write+0x2f0>)
 8012a68:	4867      	ldr	r0, [pc, #412]	; (8012c08 <tcp_write+0x2e4>)
 8012a6a:	f004 ffaf 	bl	80179cc <iprintf>
      seg = last_unsent;
 8012a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a70:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012a72:	8a7b      	ldrh	r3, [r7, #18]
 8012a74:	88fa      	ldrh	r2, [r7, #6]
 8012a76:	4293      	cmp	r3, r2
 8012a78:	bf28      	it	cs
 8012a7a:	4613      	movcs	r3, r2
 8012a7c:	b29b      	uxth	r3, r3
 8012a7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012a80:	4293      	cmp	r3, r2
 8012a82:	bf28      	it	cs
 8012a84:	4613      	movcs	r3, r2
 8012a86:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012a88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a8e:	4413      	add	r3, r2
 8012a90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012a94:	8a7a      	ldrh	r2, [r7, #18]
 8012a96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012a9e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012aa2:	1ad3      	subs	r3, r2, r3
 8012aa4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012aa6:	8a7b      	ldrh	r3, [r7, #18]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d00b      	beq.n	8012ac4 <tcp_write+0x1a0>
 8012aac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ab0:	88fb      	ldrh	r3, [r7, #6]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d006      	beq.n	8012ac4 <tcp_write+0x1a0>
 8012ab6:	4b52      	ldr	r3, [pc, #328]	; (8012c00 <tcp_write+0x2dc>)
 8012ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012abc:	4956      	ldr	r1, [pc, #344]	; (8012c18 <tcp_write+0x2f4>)
 8012abe:	4852      	ldr	r0, [pc, #328]	; (8012c08 <tcp_write+0x2e4>)
 8012ac0:	f004 ff84 	bl	80179cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012ac4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012ac8:	88fb      	ldrh	r3, [r7, #6]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	f080 8167 	bcs.w	8012d9e <tcp_write+0x47a>
 8012ad0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	f000 8163 	beq.w	8012d9e <tcp_write+0x47a>
 8012ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ada:	891b      	ldrh	r3, [r3, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f000 815e 	beq.w	8012d9e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012ae2:	88fa      	ldrh	r2, [r7, #6]
 8012ae4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ae8:	1ad2      	subs	r2, r2, r3
 8012aea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012aec:	4293      	cmp	r3, r2
 8012aee:	bfa8      	it	ge
 8012af0:	4613      	movge	r3, r2
 8012af2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012af8:	797b      	ldrb	r3, [r7, #5]
 8012afa:	f003 0301 	and.w	r3, r3, #1
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d027      	beq.n	8012b52 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012b02:	f107 0012 	add.w	r0, r7, #18
 8012b06:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b08:	8bf9      	ldrh	r1, [r7, #30]
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	797b      	ldrb	r3, [r7, #5]
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	4603      	mov	r3, r0
 8012b18:	2000      	movs	r0, #0
 8012b1a:	f7ff fe0f 	bl	801273c <tcp_pbuf_prealloc>
 8012b1e:	6578      	str	r0, [r7, #84]	; 0x54
 8012b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f000 8225 	beq.w	8012f72 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b2a:	6858      	ldr	r0, [r3, #4]
 8012b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b30:	68ba      	ldr	r2, [r7, #8]
 8012b32:	4413      	add	r3, r2
 8012b34:	8bfa      	ldrh	r2, [r7, #30]
 8012b36:	4619      	mov	r1, r3
 8012b38:	f004 ff32 	bl	80179a0 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012b3c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012b3e:	f7fb f9c3 	bl	800dec8 <pbuf_clen>
 8012b42:	4603      	mov	r3, r0
 8012b44:	461a      	mov	r2, r3
 8012b46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012b50:	e041      	b.n	8012bd6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b54:	685b      	ldr	r3, [r3, #4]
 8012b56:	637b      	str	r3, [r7, #52]	; 0x34
 8012b58:	e002      	b.n	8012b60 <tcp_write+0x23c>
 8012b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8012b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d1f8      	bne.n	8012b5a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b6a:	7b1b      	ldrb	r3, [r3, #12]
 8012b6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d115      	bne.n	8012ba0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b7a:	8952      	ldrh	r2, [r2, #10]
 8012b7c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d10d      	bne.n	8012ba0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012b84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d006      	beq.n	8012b9a <tcp_write+0x276>
 8012b8c:	4b1c      	ldr	r3, [pc, #112]	; (8012c00 <tcp_write+0x2dc>)
 8012b8e:	f240 2231 	movw	r2, #561	; 0x231
 8012b92:	4922      	ldr	r1, [pc, #136]	; (8012c1c <tcp_write+0x2f8>)
 8012b94:	481c      	ldr	r0, [pc, #112]	; (8012c08 <tcp_write+0x2e4>)
 8012b96:	f004 ff19 	bl	80179cc <iprintf>
          extendlen = seglen;
 8012b9a:	8bfb      	ldrh	r3, [r7, #30]
 8012b9c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012b9e:	e01a      	b.n	8012bd6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012ba0:	8bfb      	ldrh	r3, [r7, #30]
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	f7fa fe1c 	bl	800d7e4 <pbuf_alloc>
 8012bac:	6578      	str	r0, [r7, #84]	; 0x54
 8012bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f000 81e0 	beq.w	8012f76 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012bba:	68ba      	ldr	r2, [r7, #8]
 8012bbc:	441a      	add	r2, r3
 8012bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bc0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012bc2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012bc4:	f7fb f980 	bl	800dec8 <pbuf_clen>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	461a      	mov	r2, r3
 8012bcc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012bd0:	4413      	add	r3, r2
 8012bd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012bd6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012bda:	8bfb      	ldrh	r3, [r7, #30]
 8012bdc:	4413      	add	r3, r2
 8012bde:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012be2:	e0dc      	b.n	8012d9e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	f000 80d7 	beq.w	8012d9e <tcp_write+0x47a>
 8012bf0:	4b03      	ldr	r3, [pc, #12]	; (8012c00 <tcp_write+0x2dc>)
 8012bf2:	f240 224a 	movw	r2, #586	; 0x24a
 8012bf6:	490a      	ldr	r1, [pc, #40]	; (8012c20 <tcp_write+0x2fc>)
 8012bf8:	4803      	ldr	r0, [pc, #12]	; (8012c08 <tcp_write+0x2e4>)
 8012bfa:	f004 fee7 	bl	80179cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012bfe:	e0ce      	b.n	8012d9e <tcp_write+0x47a>
 8012c00:	0801afa0 	.word	0x0801afa0
 8012c04:	0801b140 	.word	0x0801b140
 8012c08:	0801aff4 	.word	0x0801aff4
 8012c0c:	0801b158 	.word	0x0801b158
 8012c10:	0801b18c 	.word	0x0801b18c
 8012c14:	0801b1a4 	.word	0x0801b1a4
 8012c18:	0801b1c4 	.word	0x0801b1c4
 8012c1c:	0801b1e4 	.word	0x0801b1e4
 8012c20:	0801b210 	.word	0x0801b210
    struct pbuf *p;
    u16_t left = len - pos;
 8012c24:	88fa      	ldrh	r2, [r7, #6]
 8012c26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012c2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c36:	1ad3      	subs	r3, r2, r3
 8012c38:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012c3a:	8b7a      	ldrh	r2, [r7, #26]
 8012c3c:	8bbb      	ldrh	r3, [r7, #28]
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	bf28      	it	cs
 8012c42:	4613      	movcs	r3, r2
 8012c44:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012c46:	797b      	ldrb	r3, [r7, #5]
 8012c48:	f003 0301 	and.w	r3, r3, #1
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d036      	beq.n	8012cbe <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	8b3b      	ldrh	r3, [r7, #24]
 8012c58:	4413      	add	r3, r2
 8012c5a:	b299      	uxth	r1, r3
 8012c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	bf0c      	ite	eq
 8012c62:	2301      	moveq	r3, #1
 8012c64:	2300      	movne	r3, #0
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	f107 0012 	add.w	r0, r7, #18
 8012c6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012c6e:	9302      	str	r3, [sp, #8]
 8012c70:	797b      	ldrb	r3, [r7, #5]
 8012c72:	9301      	str	r3, [sp, #4]
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2036      	movs	r0, #54	; 0x36
 8012c7c:	f7ff fd5e 	bl	801273c <tcp_pbuf_prealloc>
 8012c80:	6338      	str	r0, [r7, #48]	; 0x30
 8012c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 8178 	beq.w	8012f7a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c8c:	895b      	ldrh	r3, [r3, #10]
 8012c8e:	8b3a      	ldrh	r2, [r7, #24]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d906      	bls.n	8012ca2 <tcp_write+0x37e>
 8012c94:	4b8c      	ldr	r3, [pc, #560]	; (8012ec8 <tcp_write+0x5a4>)
 8012c96:	f240 2266 	movw	r2, #614	; 0x266
 8012c9a:	498c      	ldr	r1, [pc, #560]	; (8012ecc <tcp_write+0x5a8>)
 8012c9c:	488c      	ldr	r0, [pc, #560]	; (8012ed0 <tcp_write+0x5ac>)
 8012c9e:	f004 fe95 	bl	80179cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca4:	685a      	ldr	r2, [r3, #4]
 8012ca6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012caa:	18d0      	adds	r0, r2, r3
 8012cac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cb0:	68ba      	ldr	r2, [r7, #8]
 8012cb2:	4413      	add	r3, r2
 8012cb4:	8b3a      	ldrh	r2, [r7, #24]
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	f004 fe72 	bl	80179a0 <memcpy>
 8012cbc:	e02f      	b.n	8012d1e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012cbe:	8a7b      	ldrh	r3, [r7, #18]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d006      	beq.n	8012cd2 <tcp_write+0x3ae>
 8012cc4:	4b80      	ldr	r3, [pc, #512]	; (8012ec8 <tcp_write+0x5a4>)
 8012cc6:	f240 2271 	movw	r2, #625	; 0x271
 8012cca:	4982      	ldr	r1, [pc, #520]	; (8012ed4 <tcp_write+0x5b0>)
 8012ccc:	4880      	ldr	r0, [pc, #512]	; (8012ed0 <tcp_write+0x5ac>)
 8012cce:	f004 fe7d 	bl	80179cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012cd2:	8b3b      	ldrh	r3, [r7, #24]
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	2036      	movs	r0, #54	; 0x36
 8012cda:	f7fa fd83 	bl	800d7e4 <pbuf_alloc>
 8012cde:	6178      	str	r0, [r7, #20]
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f000 814b 	beq.w	8012f7e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	441a      	add	r2, r3
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012cf4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012cfe:	4619      	mov	r1, r3
 8012d00:	2036      	movs	r0, #54	; 0x36
 8012d02:	f7fa fd6f 	bl	800d7e4 <pbuf_alloc>
 8012d06:	6338      	str	r0, [r7, #48]	; 0x30
 8012d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d103      	bne.n	8012d16 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012d0e:	6978      	ldr	r0, [r7, #20]
 8012d10:	f7fb f84c 	bl	800ddac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012d14:	e136      	b.n	8012f84 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012d16:	6979      	ldr	r1, [r7, #20]
 8012d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d1a:	f7fb f915 	bl	800df48 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d20:	f7fb f8d2 	bl	800dec8 <pbuf_clen>
 8012d24:	4603      	mov	r3, r0
 8012d26:	461a      	mov	r2, r3
 8012d28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d2c:	4413      	add	r3, r2
 8012d2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012d32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012d36:	2b09      	cmp	r3, #9
 8012d38:	d903      	bls.n	8012d42 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d3c:	f7fb f836 	bl	800ddac <pbuf_free>
      goto memerr;
 8012d40:	e120      	b.n	8012f84 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012d46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d4a:	441a      	add	r2, r3
 8012d4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d50:	9300      	str	r3, [sp, #0]
 8012d52:	4613      	mov	r3, r2
 8012d54:	2200      	movs	r2, #0
 8012d56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f7ff fc51 	bl	8012600 <tcp_create_segment>
 8012d5e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 810d 	beq.w	8012f82 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <tcp_write+0x450>
      queue = seg;
 8012d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d70:	647b      	str	r3, [r7, #68]	; 0x44
 8012d72:	e00c      	b.n	8012d8e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d106      	bne.n	8012d88 <tcp_write+0x464>
 8012d7a:	4b53      	ldr	r3, [pc, #332]	; (8012ec8 <tcp_write+0x5a4>)
 8012d7c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012d80:	4955      	ldr	r1, [pc, #340]	; (8012ed8 <tcp_write+0x5b4>)
 8012d82:	4853      	ldr	r0, [pc, #332]	; (8012ed0 <tcp_write+0x5ac>)
 8012d84:	f004 fe22 	bl	80179cc <iprintf>
      prev_seg->next = seg;
 8012d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d8c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d90:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012d92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d96:	8b3b      	ldrh	r3, [r7, #24]
 8012d98:	4413      	add	r3, r2
 8012d9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012d9e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012da2:	88fb      	ldrh	r3, [r7, #6]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	f4ff af3d 	bcc.w	8012c24 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012daa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d02c      	beq.n	8012e0a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012db6:	e01e      	b.n	8012df6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	891a      	ldrh	r2, [r3, #8]
 8012dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012dbe:	4413      	add	r3, r2
 8012dc0:	b29a      	uxth	r2, r3
 8012dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d110      	bne.n	8012df0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd0:	685b      	ldr	r3, [r3, #4]
 8012dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dd4:	8952      	ldrh	r2, [r2, #10]
 8012dd6:	4413      	add	r3, r2
 8012dd8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012dda:	68b9      	ldr	r1, [r7, #8]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f004 fddf 	bl	80179a0 <memcpy>
        p->len += oversize_used;
 8012de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de4:	895a      	ldrh	r2, [r3, #10]
 8012de6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012de8:	4413      	add	r3, r2
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d1dd      	bne.n	8012db8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012dfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dfe:	891a      	ldrh	r2, [r3, #8]
 8012e00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012e02:	4413      	add	r3, r2
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e08:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012e0a:	8a7a      	ldrh	r2, [r7, #18]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d018      	beq.n	8012e4a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d106      	bne.n	8012e2c <tcp_write+0x508>
 8012e1e:	4b2a      	ldr	r3, [pc, #168]	; (8012ec8 <tcp_write+0x5a4>)
 8012e20:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012e24:	492d      	ldr	r1, [pc, #180]	; (8012edc <tcp_write+0x5b8>)
 8012e26:	482a      	ldr	r0, [pc, #168]	; (8012ed0 <tcp_write+0x5ac>)
 8012e28:	f004 fdd0 	bl	80179cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e32:	4618      	mov	r0, r3
 8012e34:	f7fb f888 	bl	800df48 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e3a:	891a      	ldrh	r2, [r3, #8]
 8012e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e3e:	891b      	ldrh	r3, [r3, #8]
 8012e40:	4413      	add	r3, r2
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e46:	811a      	strh	r2, [r3, #8]
 8012e48:	e037      	b.n	8012eba <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012e4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d034      	beq.n	8012eba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d003      	beq.n	8012e5e <tcp_write+0x53a>
 8012e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <tcp_write+0x548>
 8012e5e:	4b1a      	ldr	r3, [pc, #104]	; (8012ec8 <tcp_write+0x5a4>)
 8012e60:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012e64:	491e      	ldr	r1, [pc, #120]	; (8012ee0 <tcp_write+0x5bc>)
 8012e66:	481a      	ldr	r0, [pc, #104]	; (8012ed0 <tcp_write+0x5ac>)
 8012e68:	f004 fdb0 	bl	80179cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e72:	e009      	b.n	8012e88 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e76:	891a      	ldrh	r2, [r3, #8]
 8012e78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e7a:	4413      	add	r3, r2
 8012e7c:	b29a      	uxth	r2, r3
 8012e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e80:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8012e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1f1      	bne.n	8012e74 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e92:	891a      	ldrh	r2, [r3, #8]
 8012e94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012e96:	4413      	add	r3, r2
 8012e98:	b29a      	uxth	r2, r3
 8012e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea0:	895a      	ldrh	r2, [r3, #10]
 8012ea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ea4:	4413      	add	r3, r2
 8012ea6:	b29a      	uxth	r2, r3
 8012ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eaa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eae:	891a      	ldrh	r2, [r3, #8]
 8012eb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012eb2:	4413      	add	r3, r2
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012eb8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d111      	bne.n	8012ee4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ec4:	66da      	str	r2, [r3, #108]	; 0x6c
 8012ec6:	e010      	b.n	8012eea <tcp_write+0x5c6>
 8012ec8:	0801afa0 	.word	0x0801afa0
 8012ecc:	0801b240 	.word	0x0801b240
 8012ed0:	0801aff4 	.word	0x0801aff4
 8012ed4:	0801b280 	.word	0x0801b280
 8012ed8:	0801b290 	.word	0x0801b290
 8012edc:	0801b2a4 	.word	0x0801b2a4
 8012ee0:	0801b2dc 	.word	0x0801b2dc
  } else {
    last_unsent->next = queue;
 8012ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ee6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ee8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012eee:	88fb      	ldrh	r3, [r7, #6]
 8012ef0:	441a      	add	r2, r3
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012efc:	88fb      	ldrh	r3, [r7, #6]
 8012efe:	1ad3      	subs	r3, r2, r3
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d00e      	beq.n	8012f3a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <tcp_write+0x616>
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d106      	bne.n	8012f3a <tcp_write+0x616>
 8012f2c:	4b2c      	ldr	r3, [pc, #176]	; (8012fe0 <tcp_write+0x6bc>)
 8012f2e:	f240 3212 	movw	r2, #786	; 0x312
 8012f32:	492c      	ldr	r1, [pc, #176]	; (8012fe4 <tcp_write+0x6c0>)
 8012f34:	482c      	ldr	r0, [pc, #176]	; (8012fe8 <tcp_write+0x6c4>)
 8012f36:	f004 fd49 	bl	80179cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d016      	beq.n	8012f6e <tcp_write+0x64a>
 8012f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f42:	68db      	ldr	r3, [r3, #12]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d012      	beq.n	8012f6e <tcp_write+0x64a>
 8012f48:	797b      	ldrb	r3, [r7, #5]
 8012f4a:	f003 0302 	and.w	r3, r3, #2
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d10d      	bne.n	8012f6e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	899b      	ldrh	r3, [r3, #12]
 8012f58:	b29c      	uxth	r4, r3
 8012f5a:	2008      	movs	r0, #8
 8012f5c:	f7f9 fb7a 	bl	800c654 <lwip_htons>
 8012f60:	4603      	mov	r3, r0
 8012f62:	461a      	mov	r2, r3
 8012f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	4322      	orrs	r2, r4
 8012f6a:	b292      	uxth	r2, r2
 8012f6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	e031      	b.n	8012fd6 <tcp_write+0x6b2>
          goto memerr;
 8012f72:	bf00      	nop
 8012f74:	e006      	b.n	8012f84 <tcp_write+0x660>
            goto memerr;
 8012f76:	bf00      	nop
 8012f78:	e004      	b.n	8012f84 <tcp_write+0x660>
        goto memerr;
 8012f7a:	bf00      	nop
 8012f7c:	e002      	b.n	8012f84 <tcp_write+0x660>
        goto memerr;
 8012f7e:	bf00      	nop
 8012f80:	e000      	b.n	8012f84 <tcp_write+0x660>
      goto memerr;
 8012f82:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	8b5b      	ldrh	r3, [r3, #26]
 8012f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d002      	beq.n	8012f9e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012f98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012f9a:	f7fa ff07 	bl	800ddac <pbuf_free>
  }
  if (queue != NULL) {
 8012f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d002      	beq.n	8012faa <tcp_write+0x686>
    tcp_segs_free(queue);
 8012fa4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012fa6:	f7fc fb6f 	bl	800f688 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d00e      	beq.n	8012fd2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d10a      	bne.n	8012fd2 <tcp_write+0x6ae>
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d106      	bne.n	8012fd2 <tcp_write+0x6ae>
 8012fc4:	4b06      	ldr	r3, [pc, #24]	; (8012fe0 <tcp_write+0x6bc>)
 8012fc6:	f240 3227 	movw	r2, #807	; 0x327
 8012fca:	4906      	ldr	r1, [pc, #24]	; (8012fe4 <tcp_write+0x6c0>)
 8012fcc:	4806      	ldr	r0, [pc, #24]	; (8012fe8 <tcp_write+0x6c4>)
 8012fce:	f004 fcfd 	bl	80179cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	375c      	adds	r7, #92	; 0x5c
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd90      	pop	{r4, r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	0801afa0 	.word	0x0801afa0
 8012fe4:	0801b314 	.word	0x0801b314
 8012fe8:	0801aff4 	.word	0x0801aff4

08012fec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012fec:	b590      	push	{r4, r7, lr}
 8012fee:	b08b      	sub	sp, #44	; 0x2c
 8012ff0:	af02      	add	r7, sp, #8
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	61fb      	str	r3, [r7, #28]
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013000:	2300      	movs	r3, #0
 8013002:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d106      	bne.n	8013018 <tcp_split_unsent_seg+0x2c>
 801300a:	4b95      	ldr	r3, [pc, #596]	; (8013260 <tcp_split_unsent_seg+0x274>)
 801300c:	f240 324b 	movw	r2, #843	; 0x34b
 8013010:	4994      	ldr	r1, [pc, #592]	; (8013264 <tcp_split_unsent_seg+0x278>)
 8013012:	4895      	ldr	r0, [pc, #596]	; (8013268 <tcp_split_unsent_seg+0x27c>)
 8013014:	f004 fcda 	bl	80179cc <iprintf>

  useg = pcb->unsent;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801301c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d102      	bne.n	801302a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013024:	f04f 33ff 	mov.w	r3, #4294967295
 8013028:	e116      	b.n	8013258 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801302a:	887b      	ldrh	r3, [r7, #2]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d109      	bne.n	8013044 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013030:	4b8b      	ldr	r3, [pc, #556]	; (8013260 <tcp_split_unsent_seg+0x274>)
 8013032:	f240 3253 	movw	r2, #851	; 0x353
 8013036:	498d      	ldr	r1, [pc, #564]	; (801326c <tcp_split_unsent_seg+0x280>)
 8013038:	488b      	ldr	r0, [pc, #556]	; (8013268 <tcp_split_unsent_seg+0x27c>)
 801303a:	f004 fcc7 	bl	80179cc <iprintf>
    return ERR_VAL;
 801303e:	f06f 0305 	mvn.w	r3, #5
 8013042:	e109      	b.n	8013258 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	891b      	ldrh	r3, [r3, #8]
 8013048:	887a      	ldrh	r2, [r7, #2]
 801304a:	429a      	cmp	r2, r3
 801304c:	d301      	bcc.n	8013052 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801304e:	2300      	movs	r3, #0
 8013050:	e102      	b.n	8013258 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013056:	887a      	ldrh	r2, [r7, #2]
 8013058:	429a      	cmp	r2, r3
 801305a:	d906      	bls.n	801306a <tcp_split_unsent_seg+0x7e>
 801305c:	4b80      	ldr	r3, [pc, #512]	; (8013260 <tcp_split_unsent_seg+0x274>)
 801305e:	f240 325b 	movw	r2, #859	; 0x35b
 8013062:	4983      	ldr	r1, [pc, #524]	; (8013270 <tcp_split_unsent_seg+0x284>)
 8013064:	4880      	ldr	r0, [pc, #512]	; (8013268 <tcp_split_unsent_seg+0x27c>)
 8013066:	f004 fcb1 	bl	80179cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	891b      	ldrh	r3, [r3, #8]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d106      	bne.n	8013080 <tcp_split_unsent_seg+0x94>
 8013072:	4b7b      	ldr	r3, [pc, #492]	; (8013260 <tcp_split_unsent_seg+0x274>)
 8013074:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013078:	497e      	ldr	r1, [pc, #504]	; (8013274 <tcp_split_unsent_seg+0x288>)
 801307a:	487b      	ldr	r0, [pc, #492]	; (8013268 <tcp_split_unsent_seg+0x27c>)
 801307c:	f004 fca6 	bl	80179cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	7a9b      	ldrb	r3, [r3, #10]
 8013084:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013086:	7bfb      	ldrb	r3, [r7, #15]
 8013088:	009b      	lsls	r3, r3, #2
 801308a:	b2db      	uxtb	r3, r3
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	891a      	ldrh	r2, [r3, #8]
 8013096:	887b      	ldrh	r3, [r7, #2]
 8013098:	1ad3      	subs	r3, r2, r3
 801309a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801309c:	7bbb      	ldrb	r3, [r7, #14]
 801309e:	b29a      	uxth	r2, r3
 80130a0:	89bb      	ldrh	r3, [r7, #12]
 80130a2:	4413      	add	r3, r2
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130aa:	4619      	mov	r1, r3
 80130ac:	2036      	movs	r0, #54	; 0x36
 80130ae:	f7fa fb99 	bl	800d7e4 <pbuf_alloc>
 80130b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	f000 80b7 	beq.w	801322a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	891a      	ldrh	r2, [r3, #8]
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	891b      	ldrh	r3, [r3, #8]
 80130c6:	1ad3      	subs	r3, r2, r3
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	887b      	ldrh	r3, [r7, #2]
 80130cc:	4413      	add	r3, r2
 80130ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	6858      	ldr	r0, [r3, #4]
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	685a      	ldr	r2, [r3, #4]
 80130d8:	7bbb      	ldrb	r3, [r7, #14]
 80130da:	18d1      	adds	r1, r2, r3
 80130dc:	897b      	ldrh	r3, [r7, #10]
 80130de:	89ba      	ldrh	r2, [r7, #12]
 80130e0:	f7fb f85a 	bl	800e198 <pbuf_copy_partial>
 80130e4:	4603      	mov	r3, r0
 80130e6:	461a      	mov	r2, r3
 80130e8:	89bb      	ldrh	r3, [r7, #12]
 80130ea:	4293      	cmp	r3, r2
 80130ec:	f040 809f 	bne.w	801322e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	899b      	ldrh	r3, [r3, #12]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f9 faab 	bl	800c654 <lwip_htons>
 80130fe:	4603      	mov	r3, r0
 8013100:	b2db      	uxtb	r3, r3
 8013102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013106:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013108:	2300      	movs	r3, #0
 801310a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801310c:	7efb      	ldrb	r3, [r7, #27]
 801310e:	f003 0308 	and.w	r3, r3, #8
 8013112:	2b00      	cmp	r3, #0
 8013114:	d007      	beq.n	8013126 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013116:	7efb      	ldrb	r3, [r7, #27]
 8013118:	f023 0308 	bic.w	r3, r3, #8
 801311c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801311e:	7ebb      	ldrb	r3, [r7, #26]
 8013120:	f043 0308 	orr.w	r3, r3, #8
 8013124:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013126:	7efb      	ldrb	r3, [r7, #27]
 8013128:	f003 0301 	and.w	r3, r3, #1
 801312c:	2b00      	cmp	r3, #0
 801312e:	d007      	beq.n	8013140 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013130:	7efb      	ldrb	r3, [r7, #27]
 8013132:	f023 0301 	bic.w	r3, r3, #1
 8013136:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013138:	7ebb      	ldrb	r3, [r7, #26]
 801313a:	f043 0301 	orr.w	r3, r3, #1
 801313e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	4618      	mov	r0, r3
 8013148:	f7f9 fa99 	bl	800c67e <lwip_htonl>
 801314c:	4602      	mov	r2, r0
 801314e:	887b      	ldrh	r3, [r7, #2]
 8013150:	18d1      	adds	r1, r2, r3
 8013152:	7eba      	ldrb	r2, [r7, #26]
 8013154:	7bfb      	ldrb	r3, [r7, #15]
 8013156:	9300      	str	r3, [sp, #0]
 8013158:	460b      	mov	r3, r1
 801315a:	6939      	ldr	r1, [r7, #16]
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	f7ff fa4f 	bl	8012600 <tcp_create_segment>
 8013162:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013164:	69fb      	ldr	r3, [r7, #28]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d063      	beq.n	8013232 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801316a:	697b      	ldr	r3, [r7, #20]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	4618      	mov	r0, r3
 8013170:	f7fa feaa 	bl	800dec8 <pbuf_clen>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801317e:	1a9b      	subs	r3, r3, r2
 8013180:	b29a      	uxth	r2, r3
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	6858      	ldr	r0, [r3, #4]
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	891a      	ldrh	r2, [r3, #8]
 8013192:	89bb      	ldrh	r3, [r7, #12]
 8013194:	1ad3      	subs	r3, r2, r3
 8013196:	b29b      	uxth	r3, r3
 8013198:	4619      	mov	r1, r3
 801319a:	f7fa fc81 	bl	800daa0 <pbuf_realloc>
  useg->len -= remainder;
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	891a      	ldrh	r2, [r3, #8]
 80131a2:	89bb      	ldrh	r3, [r7, #12]
 80131a4:	1ad3      	subs	r3, r2, r3
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	68db      	ldr	r3, [r3, #12]
 80131b0:	899b      	ldrh	r3, [r3, #12]
 80131b2:	b29c      	uxth	r4, r3
 80131b4:	7efb      	ldrb	r3, [r7, #27]
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f9 fa4b 	bl	800c654 <lwip_htons>
 80131be:	4603      	mov	r3, r0
 80131c0:	461a      	mov	r2, r3
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	4322      	orrs	r2, r4
 80131c8:	b292      	uxth	r2, r2
 80131ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fa fe79 	bl	800dec8 <pbuf_clen>
 80131d6:	4603      	mov	r3, r0
 80131d8:	461a      	mov	r2, r3
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131e0:	4413      	add	r3, r2
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fa fe6a 	bl	800dec8 <pbuf_clen>
 80131f4:	4603      	mov	r3, r0
 80131f6:	461a      	mov	r2, r3
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131fe:	4413      	add	r3, r2
 8013200:	b29a      	uxth	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	681a      	ldr	r2, [r3, #0]
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	69fa      	ldr	r2, [r7, #28]
 8013214:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013216:	69fb      	ldr	r3, [r7, #28]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d103      	bne.n	8013226 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2200      	movs	r2, #0
 8013222:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013226:	2300      	movs	r3, #0
 8013228:	e016      	b.n	8013258 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801322a:	bf00      	nop
 801322c:	e002      	b.n	8013234 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801322e:	bf00      	nop
 8013230:	e000      	b.n	8013234 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013232:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d006      	beq.n	8013248 <tcp_split_unsent_seg+0x25c>
 801323a:	4b09      	ldr	r3, [pc, #36]	; (8013260 <tcp_split_unsent_seg+0x274>)
 801323c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013240:	490d      	ldr	r1, [pc, #52]	; (8013278 <tcp_split_unsent_seg+0x28c>)
 8013242:	4809      	ldr	r0, [pc, #36]	; (8013268 <tcp_split_unsent_seg+0x27c>)
 8013244:	f004 fbc2 	bl	80179cc <iprintf>
  if (p != NULL) {
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801324e:	6938      	ldr	r0, [r7, #16]
 8013250:	f7fa fdac 	bl	800ddac <pbuf_free>
  }

  return ERR_MEM;
 8013254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013258:	4618      	mov	r0, r3
 801325a:	3724      	adds	r7, #36	; 0x24
 801325c:	46bd      	mov	sp, r7
 801325e:	bd90      	pop	{r4, r7, pc}
 8013260:	0801afa0 	.word	0x0801afa0
 8013264:	0801b334 	.word	0x0801b334
 8013268:	0801aff4 	.word	0x0801aff4
 801326c:	0801b358 	.word	0x0801b358
 8013270:	0801b37c 	.word	0x0801b37c
 8013274:	0801b38c 	.word	0x0801b38c
 8013278:	0801b39c 	.word	0x0801b39c

0801327c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801327c:	b590      	push	{r4, r7, lr}
 801327e:	b085      	sub	sp, #20
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d106      	bne.n	8013298 <tcp_send_fin+0x1c>
 801328a:	4b21      	ldr	r3, [pc, #132]	; (8013310 <tcp_send_fin+0x94>)
 801328c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013290:	4920      	ldr	r1, [pc, #128]	; (8013314 <tcp_send_fin+0x98>)
 8013292:	4821      	ldr	r0, [pc, #132]	; (8013318 <tcp_send_fin+0x9c>)
 8013294:	f004 fb9a 	bl	80179cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801329c:	2b00      	cmp	r3, #0
 801329e:	d02e      	beq.n	80132fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a4:	60fb      	str	r3, [r7, #12]
 80132a6:	e002      	b.n	80132ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d1f8      	bne.n	80132a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	68db      	ldr	r3, [r3, #12]
 80132ba:	899b      	ldrh	r3, [r3, #12]
 80132bc:	b29b      	uxth	r3, r3
 80132be:	4618      	mov	r0, r3
 80132c0:	f7f9 f9c8 	bl	800c654 <lwip_htons>
 80132c4:	4603      	mov	r3, r0
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	f003 0307 	and.w	r3, r3, #7
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d116      	bne.n	80132fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	899b      	ldrh	r3, [r3, #12]
 80132d6:	b29c      	uxth	r4, r3
 80132d8:	2001      	movs	r0, #1
 80132da:	f7f9 f9bb 	bl	800c654 <lwip_htons>
 80132de:	4603      	mov	r3, r0
 80132e0:	461a      	mov	r2, r3
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	68db      	ldr	r3, [r3, #12]
 80132e6:	4322      	orrs	r2, r4
 80132e8:	b292      	uxth	r2, r2
 80132ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8b5b      	ldrh	r3, [r3, #26]
 80132f0:	f043 0320 	orr.w	r3, r3, #32
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80132fa:	2300      	movs	r3, #0
 80132fc:	e004      	b.n	8013308 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80132fe:	2101      	movs	r1, #1
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f000 f80b 	bl	801331c <tcp_enqueue_flags>
 8013306:	4603      	mov	r3, r0
}
 8013308:	4618      	mov	r0, r3
 801330a:	3714      	adds	r7, #20
 801330c:	46bd      	mov	sp, r7
 801330e:	bd90      	pop	{r4, r7, pc}
 8013310:	0801afa0 	.word	0x0801afa0
 8013314:	0801b3a8 	.word	0x0801b3a8
 8013318:	0801aff4 	.word	0x0801aff4

0801331c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b08a      	sub	sp, #40	; 0x28
 8013320:	af02      	add	r7, sp, #8
 8013322:	6078      	str	r0, [r7, #4]
 8013324:	460b      	mov	r3, r1
 8013326:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013328:	2300      	movs	r3, #0
 801332a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801332c:	2300      	movs	r3, #0
 801332e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013330:	78fb      	ldrb	r3, [r7, #3]
 8013332:	f003 0303 	and.w	r3, r3, #3
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <tcp_enqueue_flags+0x2c>
 801333a:	4b67      	ldr	r3, [pc, #412]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 801333c:	f240 4211 	movw	r2, #1041	; 0x411
 8013340:	4966      	ldr	r1, [pc, #408]	; (80134dc <tcp_enqueue_flags+0x1c0>)
 8013342:	4867      	ldr	r0, [pc, #412]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 8013344:	f004 fb42 	bl	80179cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d106      	bne.n	801335c <tcp_enqueue_flags+0x40>
 801334e:	4b62      	ldr	r3, [pc, #392]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 8013350:	f240 4213 	movw	r2, #1043	; 0x413
 8013354:	4963      	ldr	r1, [pc, #396]	; (80134e4 <tcp_enqueue_flags+0x1c8>)
 8013356:	4862      	ldr	r0, [pc, #392]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 8013358:	f004 fb38 	bl	80179cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801335c:	78fb      	ldrb	r3, [r7, #3]
 801335e:	f003 0302 	and.w	r3, r3, #2
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013366:	2301      	movs	r3, #1
 8013368:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801336a:	7ffb      	ldrb	r3, [r7, #31]
 801336c:	009b      	lsls	r3, r3, #2
 801336e:	b2db      	uxtb	r3, r3
 8013370:	f003 0304 	and.w	r3, r3, #4
 8013374:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013376:	7dfb      	ldrb	r3, [r7, #23]
 8013378:	b29b      	uxth	r3, r3
 801337a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801337e:	4619      	mov	r1, r3
 8013380:	2036      	movs	r0, #54	; 0x36
 8013382:	f7fa fa2f 	bl	800d7e4 <pbuf_alloc>
 8013386:	6138      	str	r0, [r7, #16]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d109      	bne.n	80133a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	8b5b      	ldrh	r3, [r3, #26]
 8013392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013396:	b29a      	uxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801339c:	f04f 33ff 	mov.w	r3, #4294967295
 80133a0:	e095      	b.n	80134ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	895a      	ldrh	r2, [r3, #10]
 80133a6:	7dfb      	ldrb	r3, [r7, #23]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d206      	bcs.n	80133bc <tcp_enqueue_flags+0xa0>
 80133ae:	4b4a      	ldr	r3, [pc, #296]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 80133b0:	f240 4239 	movw	r2, #1081	; 0x439
 80133b4:	494c      	ldr	r1, [pc, #304]	; (80134e8 <tcp_enqueue_flags+0x1cc>)
 80133b6:	484a      	ldr	r0, [pc, #296]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 80133b8:	f004 fb08 	bl	80179cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80133c0:	78fa      	ldrb	r2, [r7, #3]
 80133c2:	7ffb      	ldrb	r3, [r7, #31]
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	460b      	mov	r3, r1
 80133c8:	6939      	ldr	r1, [r7, #16]
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f7ff f918 	bl	8012600 <tcp_create_segment>
 80133d0:	60f8      	str	r0, [r7, #12]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d109      	bne.n	80133ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	8b5b      	ldrh	r3, [r3, #26]
 80133dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133e0:	b29a      	uxth	r2, r3
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80133e6:	f04f 33ff 	mov.w	r3, #4294967295
 80133ea:	e070      	b.n	80134ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	f003 0303 	and.w	r3, r3, #3
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d006      	beq.n	8013406 <tcp_enqueue_flags+0xea>
 80133f8:	4b37      	ldr	r3, [pc, #220]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 80133fa:	f240 4242 	movw	r2, #1090	; 0x442
 80133fe:	493b      	ldr	r1, [pc, #236]	; (80134ec <tcp_enqueue_flags+0x1d0>)
 8013400:	4837      	ldr	r0, [pc, #220]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 8013402:	f004 fae3 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	891b      	ldrh	r3, [r3, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d006      	beq.n	801341c <tcp_enqueue_flags+0x100>
 801340e:	4b32      	ldr	r3, [pc, #200]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 8013410:	f240 4243 	movw	r2, #1091	; 0x443
 8013414:	4936      	ldr	r1, [pc, #216]	; (80134f0 <tcp_enqueue_flags+0x1d4>)
 8013416:	4832      	ldr	r0, [pc, #200]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 8013418:	f004 fad8 	bl	80179cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013420:	2b00      	cmp	r3, #0
 8013422:	d103      	bne.n	801342c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	68fa      	ldr	r2, [r7, #12]
 8013428:	66da      	str	r2, [r3, #108]	; 0x6c
 801342a:	e00d      	b.n	8013448 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013430:	61bb      	str	r3, [r7, #24]
 8013432:	e002      	b.n	801343a <tcp_enqueue_flags+0x11e>
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	61bb      	str	r3, [r7, #24]
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d1f8      	bne.n	8013434 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013442:	69bb      	ldr	r3, [r7, #24]
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2200      	movs	r2, #0
 801344c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013450:	78fb      	ldrb	r3, [r7, #3]
 8013452:	f003 0302 	and.w	r3, r3, #2
 8013456:	2b00      	cmp	r3, #0
 8013458:	d104      	bne.n	8013464 <tcp_enqueue_flags+0x148>
 801345a:	78fb      	ldrb	r3, [r7, #3]
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	2b00      	cmp	r3, #0
 8013462:	d004      	beq.n	801346e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013468:	1c5a      	adds	r2, r3, #1
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801346e:	78fb      	ldrb	r3, [r7, #3]
 8013470:	f003 0301 	and.w	r3, r3, #1
 8013474:	2b00      	cmp	r3, #0
 8013476:	d006      	beq.n	8013486 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	8b5b      	ldrh	r3, [r3, #26]
 801347c:	f043 0320 	orr.w	r3, r3, #32
 8013480:	b29a      	uxth	r2, r3
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	4618      	mov	r0, r3
 801348c:	f7fa fd1c 	bl	800dec8 <pbuf_clen>
 8013490:	4603      	mov	r3, r0
 8013492:	461a      	mov	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801349a:	4413      	add	r3, r2
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d00e      	beq.n	80134cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d10a      	bne.n	80134cc <tcp_enqueue_flags+0x1b0>
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d106      	bne.n	80134cc <tcp_enqueue_flags+0x1b0>
 80134be:	4b06      	ldr	r3, [pc, #24]	; (80134d8 <tcp_enqueue_flags+0x1bc>)
 80134c0:	f240 4265 	movw	r2, #1125	; 0x465
 80134c4:	490b      	ldr	r1, [pc, #44]	; (80134f4 <tcp_enqueue_flags+0x1d8>)
 80134c6:	4806      	ldr	r0, [pc, #24]	; (80134e0 <tcp_enqueue_flags+0x1c4>)
 80134c8:	f004 fa80 	bl	80179cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80134cc:	2300      	movs	r3, #0
}
 80134ce:	4618      	mov	r0, r3
 80134d0:	3720      	adds	r7, #32
 80134d2:	46bd      	mov	sp, r7
 80134d4:	bd80      	pop	{r7, pc}
 80134d6:	bf00      	nop
 80134d8:	0801afa0 	.word	0x0801afa0
 80134dc:	0801b3c4 	.word	0x0801b3c4
 80134e0:	0801aff4 	.word	0x0801aff4
 80134e4:	0801b41c 	.word	0x0801b41c
 80134e8:	0801b43c 	.word	0x0801b43c
 80134ec:	0801b478 	.word	0x0801b478
 80134f0:	0801b490 	.word	0x0801b490
 80134f4:	0801b4bc 	.word	0x0801b4bc

080134f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80134f8:	b5b0      	push	{r4, r5, r7, lr}
 80134fa:	b08a      	sub	sp, #40	; 0x28
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <tcp_output+0x1c>
 8013506:	4b9e      	ldr	r3, [pc, #632]	; (8013780 <tcp_output+0x288>)
 8013508:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801350c:	499d      	ldr	r1, [pc, #628]	; (8013784 <tcp_output+0x28c>)
 801350e:	489e      	ldr	r0, [pc, #632]	; (8013788 <tcp_output+0x290>)
 8013510:	f004 fa5c 	bl	80179cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	7d1b      	ldrb	r3, [r3, #20]
 8013518:	2b01      	cmp	r3, #1
 801351a:	d106      	bne.n	801352a <tcp_output+0x32>
 801351c:	4b98      	ldr	r3, [pc, #608]	; (8013780 <tcp_output+0x288>)
 801351e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013522:	499a      	ldr	r1, [pc, #616]	; (801378c <tcp_output+0x294>)
 8013524:	4898      	ldr	r0, [pc, #608]	; (8013788 <tcp_output+0x290>)
 8013526:	f004 fa51 	bl	80179cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801352a:	4b99      	ldr	r3, [pc, #612]	; (8013790 <tcp_output+0x298>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	429a      	cmp	r2, r3
 8013532:	d101      	bne.n	8013538 <tcp_output+0x40>
    return ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	e1ce      	b.n	80138d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013544:	4293      	cmp	r3, r2
 8013546:	bf28      	it	cs
 8013548:	4613      	movcs	r3, r2
 801354a:	b29b      	uxth	r3, r3
 801354c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013552:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10b      	bne.n	8013572 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	8b5b      	ldrh	r3, [r3, #26]
 801355e:	f003 0302 	and.w	r3, r3, #2
 8013562:	2b00      	cmp	r3, #0
 8013564:	f000 81aa 	beq.w	80138bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f000 fdcb 	bl	8014104 <tcp_send_empty_ack>
 801356e:	4603      	mov	r3, r0
 8013570:	e1b1      	b.n	80138d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	3304      	adds	r3, #4
 8013578:	461a      	mov	r2, r3
 801357a:	6878      	ldr	r0, [r7, #4]
 801357c:	f7ff f824 	bl	80125c8 <tcp_route>
 8013580:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <tcp_output+0x96>
    return ERR_RTE;
 8013588:	f06f 0303 	mvn.w	r3, #3
 801358c:	e1a3      	b.n	80138d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d003      	beq.n	801359c <tcp_output+0xa4>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d111      	bne.n	80135c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <tcp_output+0xb0>
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	3304      	adds	r3, #4
 80135a6:	e000      	b.n	80135aa <tcp_output+0xb2>
 80135a8:	2300      	movs	r3, #0
 80135aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80135ac:	693b      	ldr	r3, [r7, #16]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d102      	bne.n	80135b8 <tcp_output+0xc0>
      return ERR_RTE;
 80135b2:	f06f 0303 	mvn.w	r3, #3
 80135b6:	e18e      	b.n	80138d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	681a      	ldr	r2, [r3, #0]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	685b      	ldr	r3, [r3, #4]
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7f9 f859 	bl	800c67e <lwip_htonl>
 80135cc:	4602      	mov	r2, r0
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135d6:	8912      	ldrh	r2, [r2, #8]
 80135d8:	4413      	add	r3, r2
 80135da:	69ba      	ldr	r2, [r7, #24]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d227      	bcs.n	8013630 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80135e6:	461a      	mov	r2, r3
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	4293      	cmp	r3, r2
 80135ec:	d114      	bne.n	8013618 <tcp_output+0x120>
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d110      	bne.n	8013618 <tcp_output+0x120>
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d10b      	bne.n	8013618 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2201      	movs	r2, #1
 801360c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2200      	movs	r2, #0
 8013614:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	8b5b      	ldrh	r3, [r3, #26]
 801361c:	f003 0302 	and.w	r3, r3, #2
 8013620:	2b00      	cmp	r3, #0
 8013622:	f000 814d 	beq.w	80138c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 fd6c 	bl	8014104 <tcp_send_empty_ack>
 801362c:	4603      	mov	r3, r0
 801362e:	e152      	b.n	80138d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2200      	movs	r2, #0
 8013634:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801363c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801363e:	6a3b      	ldr	r3, [r7, #32]
 8013640:	2b00      	cmp	r3, #0
 8013642:	f000 811c 	beq.w	801387e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013646:	e002      	b.n	801364e <tcp_output+0x156>
 8013648:	6a3b      	ldr	r3, [r7, #32]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	623b      	str	r3, [r7, #32]
 801364e:	6a3b      	ldr	r3, [r7, #32]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d1f8      	bne.n	8013648 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013656:	e112      	b.n	801387e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	899b      	ldrh	r3, [r3, #12]
 801365e:	b29b      	uxth	r3, r3
 8013660:	4618      	mov	r0, r3
 8013662:	f7f8 fff7 	bl	800c654 <lwip_htons>
 8013666:	4603      	mov	r3, r0
 8013668:	b2db      	uxtb	r3, r3
 801366a:	f003 0304 	and.w	r3, r3, #4
 801366e:	2b00      	cmp	r3, #0
 8013670:	d006      	beq.n	8013680 <tcp_output+0x188>
 8013672:	4b43      	ldr	r3, [pc, #268]	; (8013780 <tcp_output+0x288>)
 8013674:	f240 5236 	movw	r2, #1334	; 0x536
 8013678:	4946      	ldr	r1, [pc, #280]	; (8013794 <tcp_output+0x29c>)
 801367a:	4843      	ldr	r0, [pc, #268]	; (8013788 <tcp_output+0x290>)
 801367c:	f004 f9a6 	bl	80179cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013684:	2b00      	cmp	r3, #0
 8013686:	d01f      	beq.n	80136c8 <tcp_output+0x1d0>
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	8b5b      	ldrh	r3, [r3, #26]
 801368c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013690:	2b00      	cmp	r3, #0
 8013692:	d119      	bne.n	80136c8 <tcp_output+0x1d0>
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00b      	beq.n	80136b4 <tcp_output+0x1bc>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d110      	bne.n	80136c8 <tcp_output+0x1d0>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136aa:	891a      	ldrh	r2, [r3, #8]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d209      	bcs.n	80136c8 <tcp_output+0x1d0>
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d004      	beq.n	80136c8 <tcp_output+0x1d0>
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136c4:	2b08      	cmp	r3, #8
 80136c6:	d901      	bls.n	80136cc <tcp_output+0x1d4>
 80136c8:	2301      	movs	r3, #1
 80136ca:	e000      	b.n	80136ce <tcp_output+0x1d6>
 80136cc:	2300      	movs	r3, #0
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d106      	bne.n	80136e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	8b5b      	ldrh	r3, [r3, #26]
 80136d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f000 80e4 	beq.w	80138a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7d1b      	ldrb	r3, [r3, #20]
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	d00d      	beq.n	8013704 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	68db      	ldr	r3, [r3, #12]
 80136ec:	899b      	ldrh	r3, [r3, #12]
 80136ee:	b29c      	uxth	r4, r3
 80136f0:	2010      	movs	r0, #16
 80136f2:	f7f8 ffaf 	bl	800c654 <lwip_htons>
 80136f6:	4603      	mov	r3, r0
 80136f8:	461a      	mov	r2, r3
 80136fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	4322      	orrs	r2, r4
 8013700:	b292      	uxth	r2, r2
 8013702:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013704:	697a      	ldr	r2, [r7, #20]
 8013706:	6879      	ldr	r1, [r7, #4]
 8013708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801370a:	f000 f909 	bl	8013920 <tcp_output_segment>
 801370e:	4603      	mov	r3, r0
 8013710:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d009      	beq.n	801372e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	8b5b      	ldrh	r3, [r3, #26]
 801371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013722:	b29a      	uxth	r2, r3
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	835a      	strh	r2, [r3, #26]
      return err;
 8013728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801372c:	e0d3      	b.n	80138d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013730:	681a      	ldr	r2, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	7d1b      	ldrb	r3, [r3, #20]
 801373a:	2b02      	cmp	r3, #2
 801373c:	d006      	beq.n	801374c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f023 0303 	bic.w	r3, r3, #3
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	4618      	mov	r0, r3
 8013754:	f7f8 ff93 	bl	800c67e <lwip_htonl>
 8013758:	4604      	mov	r4, r0
 801375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375c:	891b      	ldrh	r3, [r3, #8]
 801375e:	461d      	mov	r5, r3
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	899b      	ldrh	r3, [r3, #12]
 8013766:	b29b      	uxth	r3, r3
 8013768:	4618      	mov	r0, r3
 801376a:	f7f8 ff73 	bl	800c654 <lwip_htons>
 801376e:	4603      	mov	r3, r0
 8013770:	b2db      	uxtb	r3, r3
 8013772:	f003 0303 	and.w	r3, r3, #3
 8013776:	2b00      	cmp	r3, #0
 8013778:	d00e      	beq.n	8013798 <tcp_output+0x2a0>
 801377a:	2301      	movs	r3, #1
 801377c:	e00d      	b.n	801379a <tcp_output+0x2a2>
 801377e:	bf00      	nop
 8013780:	0801afa0 	.word	0x0801afa0
 8013784:	0801b4e4 	.word	0x0801b4e4
 8013788:	0801aff4 	.word	0x0801aff4
 801378c:	0801b4fc 	.word	0x0801b4fc
 8013790:	2000b90c 	.word	0x2000b90c
 8013794:	0801b524 	.word	0x0801b524
 8013798:	2300      	movs	r3, #0
 801379a:	442b      	add	r3, r5
 801379c:	4423      	add	r3, r4
 801379e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	da02      	bge.n	80137b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	68ba      	ldr	r2, [r7, #8]
 80137b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80137b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b4:	891b      	ldrh	r3, [r3, #8]
 80137b6:	461c      	mov	r4, r3
 80137b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	899b      	ldrh	r3, [r3, #12]
 80137be:	b29b      	uxth	r3, r3
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f8 ff47 	bl	800c654 <lwip_htons>
 80137c6:	4603      	mov	r3, r0
 80137c8:	b2db      	uxtb	r3, r3
 80137ca:	f003 0303 	and.w	r3, r3, #3
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d001      	beq.n	80137d6 <tcp_output+0x2de>
 80137d2:	2301      	movs	r3, #1
 80137d4:	e000      	b.n	80137d8 <tcp_output+0x2e0>
 80137d6:	2300      	movs	r3, #0
 80137d8:	4423      	add	r3, r4
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d049      	beq.n	8013872 <tcp_output+0x37a>
      seg->next = NULL;
 80137de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e0:	2200      	movs	r2, #0
 80137e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d105      	bne.n	80137f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	623b      	str	r3, [r7, #32]
 80137f6:	e03f      	b.n	8013878 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80137f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	685b      	ldr	r3, [r3, #4]
 80137fe:	4618      	mov	r0, r3
 8013800:	f7f8 ff3d 	bl	800c67e <lwip_htonl>
 8013804:	4604      	mov	r4, r0
 8013806:	6a3b      	ldr	r3, [r7, #32]
 8013808:	68db      	ldr	r3, [r3, #12]
 801380a:	685b      	ldr	r3, [r3, #4]
 801380c:	4618      	mov	r0, r3
 801380e:	f7f8 ff36 	bl	800c67e <lwip_htonl>
 8013812:	4603      	mov	r3, r0
 8013814:	1ae3      	subs	r3, r4, r3
 8013816:	2b00      	cmp	r3, #0
 8013818:	da24      	bge.n	8013864 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	3370      	adds	r3, #112	; 0x70
 801381e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013820:	e002      	b.n	8013828 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d011      	beq.n	8013854 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	68db      	ldr	r3, [r3, #12]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	4618      	mov	r0, r3
 801383a:	f7f8 ff20 	bl	800c67e <lwip_htonl>
 801383e:	4604      	mov	r4, r0
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	4618      	mov	r0, r3
 8013848:	f7f8 ff19 	bl	800c67e <lwip_htonl>
 801384c:	4603      	mov	r3, r0
 801384e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013850:	2b00      	cmp	r3, #0
 8013852:	dbe6      	blt.n	8013822 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8013854:	69fb      	ldr	r3, [r7, #28]
 8013856:	681a      	ldr	r2, [r3, #0]
 8013858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013860:	601a      	str	r2, [r3, #0]
 8013862:	e009      	b.n	8013878 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013868:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801386a:	6a3b      	ldr	r3, [r7, #32]
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	623b      	str	r3, [r7, #32]
 8013870:	e002      	b.n	8013878 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013874:	f7fb ff1d 	bl	800f6b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801387c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013880:	2b00      	cmp	r3, #0
 8013882:	d012      	beq.n	80138aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013886:	68db      	ldr	r3, [r3, #12]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	4618      	mov	r0, r3
 801388c:	f7f8 fef7 	bl	800c67e <lwip_htonl>
 8013890:	4602      	mov	r2, r0
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801389a:	8912      	ldrh	r2, [r2, #8]
 801389c:	4413      	add	r3, r2
  while (seg != NULL &&
 801389e:	69ba      	ldr	r2, [r7, #24]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	f4bf aed9 	bcs.w	8013658 <tcp_output+0x160>
 80138a6:	e000      	b.n	80138aa <tcp_output+0x3b2>
      break;
 80138a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d108      	bne.n	80138c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80138ba:	e004      	b.n	80138c6 <tcp_output+0x3ce>
    goto output_done;
 80138bc:	bf00      	nop
 80138be:	e002      	b.n	80138c6 <tcp_output+0x3ce>
    goto output_done;
 80138c0:	bf00      	nop
 80138c2:	e000      	b.n	80138c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80138c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	8b5b      	ldrh	r3, [r3, #26]
 80138ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80138d4:	2300      	movs	r3, #0
}
 80138d6:	4618      	mov	r0, r3
 80138d8:	3728      	adds	r7, #40	; 0x28
 80138da:	46bd      	mov	sp, r7
 80138dc:	bdb0      	pop	{r4, r5, r7, pc}
 80138de:	bf00      	nop

080138e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d106      	bne.n	80138fc <tcp_output_segment_busy+0x1c>
 80138ee:	4b09      	ldr	r3, [pc, #36]	; (8013914 <tcp_output_segment_busy+0x34>)
 80138f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80138f4:	4908      	ldr	r1, [pc, #32]	; (8013918 <tcp_output_segment_busy+0x38>)
 80138f6:	4809      	ldr	r0, [pc, #36]	; (801391c <tcp_output_segment_busy+0x3c>)
 80138f8:	f004 f868 	bl	80179cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	7b9b      	ldrb	r3, [r3, #14]
 8013902:	2b01      	cmp	r3, #1
 8013904:	d001      	beq.n	801390a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013906:	2301      	movs	r3, #1
 8013908:	e000      	b.n	801390c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3708      	adds	r7, #8
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	0801afa0 	.word	0x0801afa0
 8013918:	0801b53c 	.word	0x0801b53c
 801391c:	0801aff4 	.word	0x0801aff4

08013920 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8013920:	b5b0      	push	{r4, r5, r7, lr}
 8013922:	b08c      	sub	sp, #48	; 0x30
 8013924:	af04      	add	r7, sp, #16
 8013926:	60f8      	str	r0, [r7, #12]
 8013928:	60b9      	str	r1, [r7, #8]
 801392a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <tcp_output_segment+0x20>
 8013932:	4b63      	ldr	r3, [pc, #396]	; (8013ac0 <tcp_output_segment+0x1a0>)
 8013934:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013938:	4962      	ldr	r1, [pc, #392]	; (8013ac4 <tcp_output_segment+0x1a4>)
 801393a:	4863      	ldr	r0, [pc, #396]	; (8013ac8 <tcp_output_segment+0x1a8>)
 801393c:	f004 f846 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	2b00      	cmp	r3, #0
 8013944:	d106      	bne.n	8013954 <tcp_output_segment+0x34>
 8013946:	4b5e      	ldr	r3, [pc, #376]	; (8013ac0 <tcp_output_segment+0x1a0>)
 8013948:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801394c:	495f      	ldr	r1, [pc, #380]	; (8013acc <tcp_output_segment+0x1ac>)
 801394e:	485e      	ldr	r0, [pc, #376]	; (8013ac8 <tcp_output_segment+0x1a8>)
 8013950:	f004 f83c 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d106      	bne.n	8013968 <tcp_output_segment+0x48>
 801395a:	4b59      	ldr	r3, [pc, #356]	; (8013ac0 <tcp_output_segment+0x1a0>)
 801395c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013960:	495b      	ldr	r1, [pc, #364]	; (8013ad0 <tcp_output_segment+0x1b0>)
 8013962:	4859      	ldr	r0, [pc, #356]	; (8013ac8 <tcp_output_segment+0x1a8>)
 8013964:	f004 f832 	bl	80179cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013968:	68f8      	ldr	r0, [r7, #12]
 801396a:	f7ff ffb9 	bl	80138e0 <tcp_output_segment_busy>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d001      	beq.n	8013978 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013974:	2300      	movs	r3, #0
 8013976:	e09f      	b.n	8013ab8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	68dc      	ldr	r4, [r3, #12]
 8013980:	4610      	mov	r0, r2
 8013982:	f7f8 fe7c 	bl	800c67e <lwip_htonl>
 8013986:	4603      	mov	r3, r0
 8013988:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	68dc      	ldr	r4, [r3, #12]
 8013992:	4610      	mov	r0, r2
 8013994:	f7f8 fe5e 	bl	800c654 <lwip_htons>
 8013998:	4603      	mov	r3, r0
 801399a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a0:	68ba      	ldr	r2, [r7, #8]
 80139a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80139a4:	441a      	add	r2, r3
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	68db      	ldr	r3, [r3, #12]
 80139ae:	3314      	adds	r3, #20
 80139b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	7a9b      	ldrb	r3, [r3, #10]
 80139b6:	f003 0301 	and.w	r3, r3, #1
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d015      	beq.n	80139ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	3304      	adds	r3, #4
 80139c2:	461a      	mov	r2, r3
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80139ca:	f7fc fa37 	bl	800fe3c <tcp_eff_send_mss_netif>
 80139ce:	4603      	mov	r3, r0
 80139d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80139d2:	8b7b      	ldrh	r3, [r7, #26]
 80139d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80139d8:	4618      	mov	r0, r3
 80139da:	f7f8 fe50 	bl	800c67e <lwip_htonl>
 80139de:	4602      	mov	r2, r0
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80139e4:	69fb      	ldr	r3, [r7, #28]
 80139e6:	3304      	adds	r3, #4
 80139e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	da02      	bge.n	80139fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	2200      	movs	r2, #0
 80139f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d10c      	bne.n	8013a1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013a02:	4b34      	ldr	r3, [pc, #208]	; (8013ad4 <tcp_output_segment+0x1b4>)
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f8 fe34 	bl	800c67e <lwip_htonl>
 8013a16:	4602      	mov	r2, r0
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	68da      	ldr	r2, [r3, #12]
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	8959      	ldrh	r1, [r3, #10]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	8b3a      	ldrh	r2, [r7, #24]
 8013a36:	1a8a      	subs	r2, r1, r2
 8013a38:	b292      	uxth	r2, r2
 8013a3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	8919      	ldrh	r1, [r3, #8]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	8b3a      	ldrh	r2, [r7, #24]
 8013a48:	1a8a      	subs	r2, r1, r2
 8013a4a:	b292      	uxth	r2, r2
 8013a4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	685b      	ldr	r3, [r3, #4]
 8013a52:	68fa      	ldr	r2, [r7, #12]
 8013a54:	68d2      	ldr	r2, [r2, #12]
 8013a56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	2200      	movs	r2, #0
 8013a5e:	741a      	strb	r2, [r3, #16]
 8013a60:	2200      	movs	r2, #0
 8013a62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	f103 0214 	add.w	r2, r3, #20
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	7a9b      	ldrb	r3, [r3, #10]
 8013a70:	009b      	lsls	r3, r3, #2
 8013a72:	f003 0304 	and.w	r3, r3, #4
 8013a76:	4413      	add	r3, r2
 8013a78:	69fa      	ldr	r2, [r7, #28]
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d006      	beq.n	8013a8c <tcp_output_segment+0x16c>
 8013a7e:	4b10      	ldr	r3, [pc, #64]	; (8013ac0 <tcp_output_segment+0x1a0>)
 8013a80:	f240 621c 	movw	r2, #1564	; 0x61c
 8013a84:	4914      	ldr	r1, [pc, #80]	; (8013ad8 <tcp_output_segment+0x1b8>)
 8013a86:	4810      	ldr	r0, [pc, #64]	; (8013ac8 <tcp_output_segment+0x1a8>)
 8013a88:	f003 ffa0 	bl	80179cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	6858      	ldr	r0, [r3, #4]
 8013a90:	68b9      	ldr	r1, [r7, #8]
 8013a92:	68bb      	ldr	r3, [r7, #8]
 8013a94:	1d1c      	adds	r4, r3, #4
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	7add      	ldrb	r5, [r3, #11]
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	7a9b      	ldrb	r3, [r3, #10]
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	9202      	str	r2, [sp, #8]
 8013aa2:	2206      	movs	r2, #6
 8013aa4:	9201      	str	r2, [sp, #4]
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	462b      	mov	r3, r5
 8013aaa:	4622      	mov	r2, r4
 8013aac:	f002 fbac 	bl	8016208 <ip4_output_if>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3720      	adds	r7, #32
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bdb0      	pop	{r4, r5, r7, pc}
 8013ac0:	0801afa0 	.word	0x0801afa0
 8013ac4:	0801b564 	.word	0x0801b564
 8013ac8:	0801aff4 	.word	0x0801aff4
 8013acc:	0801b584 	.word	0x0801b584
 8013ad0:	0801b5a4 	.word	0x0801b5a4
 8013ad4:	2000b8fc 	.word	0x2000b8fc
 8013ad8:	0801b5c8 	.word	0x0801b5c8

08013adc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013adc:	b5b0      	push	{r4, r5, r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <tcp_rexmit_rto_prepare+0x1c>
 8013aea:	4b31      	ldr	r3, [pc, #196]	; (8013bb0 <tcp_rexmit_rto_prepare+0xd4>)
 8013aec:	f240 6263 	movw	r2, #1635	; 0x663
 8013af0:	4930      	ldr	r1, [pc, #192]	; (8013bb4 <tcp_rexmit_rto_prepare+0xd8>)
 8013af2:	4831      	ldr	r0, [pc, #196]	; (8013bb8 <tcp_rexmit_rto_prepare+0xdc>)
 8013af4:	f003 ff6a 	bl	80179cc <iprintf>

  if (pcb->unacked == NULL) {
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d102      	bne.n	8013b06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013b00:	f06f 0305 	mvn.w	r3, #5
 8013b04:	e050      	b.n	8013ba8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b0a:	60fb      	str	r3, [r7, #12]
 8013b0c:	e00b      	b.n	8013b26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f7ff fee6 	bl	80138e0 <tcp_output_segment_busy>
 8013b14:	4603      	mov	r3, r0
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d002      	beq.n	8013b20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013b1a:	f06f 0305 	mvn.w	r3, #5
 8013b1e:	e043      	b.n	8013ba8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	60fb      	str	r3, [r7, #12]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d1ef      	bne.n	8013b0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013b2e:	68f8      	ldr	r0, [r7, #12]
 8013b30:	f7ff fed6 	bl	80138e0 <tcp_output_segment_busy>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d002      	beq.n	8013b40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013b3a:	f06f 0305 	mvn.w	r3, #5
 8013b3e:	e033      	b.n	8013ba8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2200      	movs	r2, #0
 8013b54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	8b5b      	ldrh	r3, [r3, #26]
 8013b5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7f8 fd87 	bl	800c67e <lwip_htonl>
 8013b70:	4604      	mov	r4, r0
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	891b      	ldrh	r3, [r3, #8]
 8013b76:	461d      	mov	r5, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	68db      	ldr	r3, [r3, #12]
 8013b7c:	899b      	ldrh	r3, [r3, #12]
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7f8 fd67 	bl	800c654 <lwip_htons>
 8013b86:	4603      	mov	r3, r0
 8013b88:	b2db      	uxtb	r3, r3
 8013b8a:	f003 0303 	and.w	r3, r3, #3
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d001      	beq.n	8013b96 <tcp_rexmit_rto_prepare+0xba>
 8013b92:	2301      	movs	r3, #1
 8013b94:	e000      	b.n	8013b98 <tcp_rexmit_rto_prepare+0xbc>
 8013b96:	2300      	movs	r3, #0
 8013b98:	442b      	add	r3, r5
 8013b9a:	18e2      	adds	r2, r4, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013ba6:	2300      	movs	r3, #0
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bdb0      	pop	{r4, r5, r7, pc}
 8013bb0:	0801afa0 	.word	0x0801afa0
 8013bb4:	0801b5dc 	.word	0x0801b5dc
 8013bb8:	0801aff4 	.word	0x0801aff4

08013bbc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b082      	sub	sp, #8
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d106      	bne.n	8013bd8 <tcp_rexmit_rto_commit+0x1c>
 8013bca:	4b0d      	ldr	r3, [pc, #52]	; (8013c00 <tcp_rexmit_rto_commit+0x44>)
 8013bcc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013bd0:	490c      	ldr	r1, [pc, #48]	; (8013c04 <tcp_rexmit_rto_commit+0x48>)
 8013bd2:	480d      	ldr	r0, [pc, #52]	; (8013c08 <tcp_rexmit_rto_commit+0x4c>)
 8013bd4:	f003 fefa 	bl	80179cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013bde:	2bff      	cmp	r3, #255	; 0xff
 8013be0:	d007      	beq.n	8013bf2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013be8:	3301      	adds	r3, #1
 8013bea:	b2da      	uxtb	r2, r3
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff fc80 	bl	80134f8 <tcp_output>
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	0801afa0 	.word	0x0801afa0
 8013c04:	0801b600 	.word	0x0801b600
 8013c08:	0801aff4 	.word	0x0801aff4

08013c0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <tcp_rexmit_rto+0x1c>
 8013c1a:	4b0a      	ldr	r3, [pc, #40]	; (8013c44 <tcp_rexmit_rto+0x38>)
 8013c1c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013c20:	4909      	ldr	r1, [pc, #36]	; (8013c48 <tcp_rexmit_rto+0x3c>)
 8013c22:	480a      	ldr	r0, [pc, #40]	; (8013c4c <tcp_rexmit_rto+0x40>)
 8013c24:	f003 fed2 	bl	80179cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f7ff ff57 	bl	8013adc <tcp_rexmit_rto_prepare>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d102      	bne.n	8013c3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7ff ffc1 	bl	8013bbc <tcp_rexmit_rto_commit>
  }
}
 8013c3a:	bf00      	nop
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	0801afa0 	.word	0x0801afa0
 8013c48:	0801b624 	.word	0x0801b624
 8013c4c:	0801aff4 	.word	0x0801aff4

08013c50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013c50:	b590      	push	{r4, r7, lr}
 8013c52:	b085      	sub	sp, #20
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d106      	bne.n	8013c6c <tcp_rexmit+0x1c>
 8013c5e:	4b2f      	ldr	r3, [pc, #188]	; (8013d1c <tcp_rexmit+0xcc>)
 8013c60:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013c64:	492e      	ldr	r1, [pc, #184]	; (8013d20 <tcp_rexmit+0xd0>)
 8013c66:	482f      	ldr	r0, [pc, #188]	; (8013d24 <tcp_rexmit+0xd4>)
 8013c68:	f003 feb0 	bl	80179cc <iprintf>

  if (pcb->unacked == NULL) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d102      	bne.n	8013c7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013c74:	f06f 0305 	mvn.w	r3, #5
 8013c78:	e04c      	b.n	8013d14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013c80:	68b8      	ldr	r0, [r7, #8]
 8013c82:	f7ff fe2d 	bl	80138e0 <tcp_output_segment_busy>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d002      	beq.n	8013c92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013c8c:	f06f 0305 	mvn.w	r3, #5
 8013c90:	e040      	b.n	8013d14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	681a      	ldr	r2, [r3, #0]
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	336c      	adds	r3, #108	; 0x6c
 8013c9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ca0:	e002      	b.n	8013ca8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d011      	beq.n	8013cd4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f8 fce0 	bl	800c67e <lwip_htonl>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	68db      	ldr	r3, [r3, #12]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7f8 fcd9 	bl	800c67e <lwip_htonl>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	dbe6      	blt.n	8013ca2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	68ba      	ldr	r2, [r7, #8]
 8013ce0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d103      	bne.n	8013cf2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013cf8:	2bff      	cmp	r3, #255	; 0xff
 8013cfa:	d007      	beq.n	8013d0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013d02:	3301      	adds	r3, #1
 8013d04:	b2da      	uxtb	r2, r3
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	3714      	adds	r7, #20
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd90      	pop	{r4, r7, pc}
 8013d1c:	0801afa0 	.word	0x0801afa0
 8013d20:	0801b640 	.word	0x0801b640
 8013d24:	0801aff4 	.word	0x0801aff4

08013d28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b082      	sub	sp, #8
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d106      	bne.n	8013d44 <tcp_rexmit_fast+0x1c>
 8013d36:	4b2a      	ldr	r3, [pc, #168]	; (8013de0 <tcp_rexmit_fast+0xb8>)
 8013d38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013d3c:	4929      	ldr	r1, [pc, #164]	; (8013de4 <tcp_rexmit_fast+0xbc>)
 8013d3e:	482a      	ldr	r0, [pc, #168]	; (8013de8 <tcp_rexmit_fast+0xc0>)
 8013d40:	f003 fe44 	bl	80179cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d045      	beq.n	8013dd8 <tcp_rexmit_fast+0xb0>
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	8b5b      	ldrh	r3, [r3, #26]
 8013d50:	f003 0304 	and.w	r3, r3, #4
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d13f      	bne.n	8013dd8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff ff79 	bl	8013c50 <tcp_rexmit>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d139      	bne.n	8013dd8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d70:	4293      	cmp	r3, r2
 8013d72:	bf28      	it	cs
 8013d74:	4613      	movcs	r3, r2
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	da00      	bge.n	8013d7e <tcp_rexmit_fast+0x56>
 8013d7c:	3301      	adds	r3, #1
 8013d7e:	105b      	asrs	r3, r3, #1
 8013d80:	b29a      	uxth	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013d8e:	461a      	mov	r2, r3
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d94:	005b      	lsls	r3, r3, #1
 8013d96:	429a      	cmp	r2, r3
 8013d98:	d206      	bcs.n	8013da8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d9e:	005b      	lsls	r3, r3, #1
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013db2:	4619      	mov	r1, r3
 8013db4:	0049      	lsls	r1, r1, #1
 8013db6:	440b      	add	r3, r1
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	4413      	add	r3, r2
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	8b5b      	ldrh	r3, [r3, #26]
 8013dc8:	f043 0304 	orr.w	r3, r3, #4
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013dd8:	bf00      	nop
 8013dda:	3708      	adds	r7, #8
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	0801afa0 	.word	0x0801afa0
 8013de4:	0801b658 	.word	0x0801b658
 8013de8:	0801aff4 	.word	0x0801aff4

08013dec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	60f8      	str	r0, [r7, #12]
 8013df4:	607b      	str	r3, [r7, #4]
 8013df6:	460b      	mov	r3, r1
 8013df8:	817b      	strh	r3, [r7, #10]
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013dfe:	897a      	ldrh	r2, [r7, #10]
 8013e00:	893b      	ldrh	r3, [r7, #8]
 8013e02:	4413      	add	r3, r2
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	3314      	adds	r3, #20
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e0e:	4619      	mov	r1, r3
 8013e10:	2022      	movs	r0, #34	; 0x22
 8013e12:	f7f9 fce7 	bl	800d7e4 <pbuf_alloc>
 8013e16:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d04d      	beq.n	8013eba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013e1e:	897b      	ldrh	r3, [r7, #10]
 8013e20:	3313      	adds	r3, #19
 8013e22:	697a      	ldr	r2, [r7, #20]
 8013e24:	8952      	ldrh	r2, [r2, #10]
 8013e26:	4293      	cmp	r3, r2
 8013e28:	db06      	blt.n	8013e38 <tcp_output_alloc_header_common+0x4c>
 8013e2a:	4b26      	ldr	r3, [pc, #152]	; (8013ec4 <tcp_output_alloc_header_common+0xd8>)
 8013e2c:	f240 7223 	movw	r2, #1827	; 0x723
 8013e30:	4925      	ldr	r1, [pc, #148]	; (8013ec8 <tcp_output_alloc_header_common+0xdc>)
 8013e32:	4826      	ldr	r0, [pc, #152]	; (8013ecc <tcp_output_alloc_header_common+0xe0>)
 8013e34:	f003 fdca 	bl	80179cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	685b      	ldr	r3, [r3, #4]
 8013e3c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013e3e:	8c3b      	ldrh	r3, [r7, #32]
 8013e40:	4618      	mov	r0, r3
 8013e42:	f7f8 fc07 	bl	800c654 <lwip_htons>
 8013e46:	4603      	mov	r3, r0
 8013e48:	461a      	mov	r2, r3
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7f8 fbff 	bl	800c654 <lwip_htons>
 8013e56:	4603      	mov	r3, r0
 8013e58:	461a      	mov	r2, r3
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	687a      	ldr	r2, [r7, #4]
 8013e62:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013e64:	68f8      	ldr	r0, [r7, #12]
 8013e66:	f7f8 fc0a 	bl	800c67e <lwip_htonl>
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013e70:	897b      	ldrh	r3, [r7, #10]
 8013e72:	089b      	lsrs	r3, r3, #2
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	3305      	adds	r3, #5
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	031b      	lsls	r3, r3, #12
 8013e7c:	b29a      	uxth	r2, r3
 8013e7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	4313      	orrs	r3, r2
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	4618      	mov	r0, r3
 8013e8a:	f7f8 fbe3 	bl	800c654 <lwip_htons>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	461a      	mov	r2, r3
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013e96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f8 fbdb 	bl	800c654 <lwip_htons>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	461a      	mov	r2, r3
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	741a      	strb	r2, [r3, #16]
 8013eac:	2200      	movs	r2, #0
 8013eae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	749a      	strb	r2, [r3, #18]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013eba:	697b      	ldr	r3, [r7, #20]
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3718      	adds	r7, #24
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	0801afa0 	.word	0x0801afa0
 8013ec8:	0801b678 	.word	0x0801b678
 8013ecc:	0801aff4 	.word	0x0801aff4

08013ed0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013ed0:	b5b0      	push	{r4, r5, r7, lr}
 8013ed2:	b08a      	sub	sp, #40	; 0x28
 8013ed4:	af04      	add	r7, sp, #16
 8013ed6:	60f8      	str	r0, [r7, #12]
 8013ed8:	607b      	str	r3, [r7, #4]
 8013eda:	460b      	mov	r3, r1
 8013edc:	817b      	strh	r3, [r7, #10]
 8013ede:	4613      	mov	r3, r2
 8013ee0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d106      	bne.n	8013ef6 <tcp_output_alloc_header+0x26>
 8013ee8:	4b15      	ldr	r3, [pc, #84]	; (8013f40 <tcp_output_alloc_header+0x70>)
 8013eea:	f240 7242 	movw	r2, #1858	; 0x742
 8013eee:	4915      	ldr	r1, [pc, #84]	; (8013f44 <tcp_output_alloc_header+0x74>)
 8013ef0:	4815      	ldr	r0, [pc, #84]	; (8013f48 <tcp_output_alloc_header+0x78>)
 8013ef2:	f003 fd6b 	bl	80179cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	8adb      	ldrh	r3, [r3, #22]
 8013efe:	68fa      	ldr	r2, [r7, #12]
 8013f00:	8b12      	ldrh	r2, [r2, #24]
 8013f02:	68f9      	ldr	r1, [r7, #12]
 8013f04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013f06:	893d      	ldrh	r5, [r7, #8]
 8013f08:	897c      	ldrh	r4, [r7, #10]
 8013f0a:	9103      	str	r1, [sp, #12]
 8013f0c:	2110      	movs	r1, #16
 8013f0e:	9102      	str	r1, [sp, #8]
 8013f10:	9201      	str	r2, [sp, #4]
 8013f12:	9300      	str	r3, [sp, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	462a      	mov	r2, r5
 8013f18:	4621      	mov	r1, r4
 8013f1a:	f7ff ff67 	bl	8013dec <tcp_output_alloc_header_common>
 8013f1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d006      	beq.n	8013f34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f2a:	68fa      	ldr	r2, [r7, #12]
 8013f2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013f2e:	441a      	add	r2, r3
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013f34:	697b      	ldr	r3, [r7, #20]
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f3e:	bf00      	nop
 8013f40:	0801afa0 	.word	0x0801afa0
 8013f44:	0801b6a8 	.word	0x0801b6a8
 8013f48:	0801aff4 	.word	0x0801aff4

08013f4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b088      	sub	sp, #32
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	60f8      	str	r0, [r7, #12]
 8013f54:	60b9      	str	r1, [r7, #8]
 8013f56:	4611      	mov	r1, r2
 8013f58:	461a      	mov	r2, r3
 8013f5a:	460b      	mov	r3, r1
 8013f5c:	71fb      	strb	r3, [r7, #7]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d106      	bne.n	8013f7a <tcp_output_fill_options+0x2e>
 8013f6c:	4b13      	ldr	r3, [pc, #76]	; (8013fbc <tcp_output_fill_options+0x70>)
 8013f6e:	f240 7256 	movw	r2, #1878	; 0x756
 8013f72:	4913      	ldr	r1, [pc, #76]	; (8013fc0 <tcp_output_fill_options+0x74>)
 8013f74:	4813      	ldr	r0, [pc, #76]	; (8013fc4 <tcp_output_fill_options+0x78>)
 8013f76:	f003 fd29 	bl	80179cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013f7a:	68bb      	ldr	r3, [r7, #8]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013f80:	69bb      	ldr	r3, [r7, #24]
 8013f82:	3314      	adds	r3, #20
 8013f84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	f103 0214 	add.w	r2, r3, #20
 8013f8c:	8bfb      	ldrh	r3, [r7, #30]
 8013f8e:	009b      	lsls	r3, r3, #2
 8013f90:	4619      	mov	r1, r3
 8013f92:	79fb      	ldrb	r3, [r7, #7]
 8013f94:	009b      	lsls	r3, r3, #2
 8013f96:	f003 0304 	and.w	r3, r3, #4
 8013f9a:	440b      	add	r3, r1
 8013f9c:	4413      	add	r3, r2
 8013f9e:	697a      	ldr	r2, [r7, #20]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d006      	beq.n	8013fb2 <tcp_output_fill_options+0x66>
 8013fa4:	4b05      	ldr	r3, [pc, #20]	; (8013fbc <tcp_output_fill_options+0x70>)
 8013fa6:	f240 7275 	movw	r2, #1909	; 0x775
 8013faa:	4907      	ldr	r1, [pc, #28]	; (8013fc8 <tcp_output_fill_options+0x7c>)
 8013fac:	4805      	ldr	r0, [pc, #20]	; (8013fc4 <tcp_output_fill_options+0x78>)
 8013fae:	f003 fd0d 	bl	80179cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013fb2:	bf00      	nop
 8013fb4:	3720      	adds	r7, #32
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	0801afa0 	.word	0x0801afa0
 8013fc0:	0801b6d0 	.word	0x0801b6d0
 8013fc4:	0801aff4 	.word	0x0801aff4
 8013fc8:	0801b5c8 	.word	0x0801b5c8

08013fcc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08a      	sub	sp, #40	; 0x28
 8013fd0:	af04      	add	r7, sp, #16
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	60b9      	str	r1, [r7, #8]
 8013fd6:	607a      	str	r2, [r7, #4]
 8013fd8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d106      	bne.n	8013fee <tcp_output_control_segment+0x22>
 8013fe0:	4b1c      	ldr	r3, [pc, #112]	; (8014054 <tcp_output_control_segment+0x88>)
 8013fe2:	f240 7287 	movw	r2, #1927	; 0x787
 8013fe6:	491c      	ldr	r1, [pc, #112]	; (8014058 <tcp_output_control_segment+0x8c>)
 8013fe8:	481c      	ldr	r0, [pc, #112]	; (801405c <tcp_output_control_segment+0x90>)
 8013fea:	f003 fcef 	bl	80179cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013fee:	683a      	ldr	r2, [r7, #0]
 8013ff0:	6879      	ldr	r1, [r7, #4]
 8013ff2:	68f8      	ldr	r0, [r7, #12]
 8013ff4:	f7fe fae8 	bl	80125c8 <tcp_route>
 8013ff8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d102      	bne.n	8014006 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014000:	23fc      	movs	r3, #252	; 0xfc
 8014002:	75fb      	strb	r3, [r7, #23]
 8014004:	e01c      	b.n	8014040 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d006      	beq.n	801401a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	7adb      	ldrb	r3, [r3, #11]
 8014010:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	7a9b      	ldrb	r3, [r3, #10]
 8014016:	757b      	strb	r3, [r7, #21]
 8014018:	e003      	b.n	8014022 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801401a:	23ff      	movs	r3, #255	; 0xff
 801401c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801401e:	2300      	movs	r3, #0
 8014020:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014022:	7dba      	ldrb	r2, [r7, #22]
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	9302      	str	r3, [sp, #8]
 8014028:	2306      	movs	r3, #6
 801402a:	9301      	str	r3, [sp, #4]
 801402c:	7d7b      	ldrb	r3, [r7, #21]
 801402e:	9300      	str	r3, [sp, #0]
 8014030:	4613      	mov	r3, r2
 8014032:	683a      	ldr	r2, [r7, #0]
 8014034:	6879      	ldr	r1, [r7, #4]
 8014036:	68b8      	ldr	r0, [r7, #8]
 8014038:	f002 f8e6 	bl	8016208 <ip4_output_if>
 801403c:	4603      	mov	r3, r0
 801403e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014040:	68b8      	ldr	r0, [r7, #8]
 8014042:	f7f9 feb3 	bl	800ddac <pbuf_free>
  return err;
 8014046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801404a:	4618      	mov	r0, r3
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	0801afa0 	.word	0x0801afa0
 8014058:	0801b6f8 	.word	0x0801b6f8
 801405c:	0801aff4 	.word	0x0801aff4

08014060 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014060:	b590      	push	{r4, r7, lr}
 8014062:	b08b      	sub	sp, #44	; 0x2c
 8014064:	af04      	add	r7, sp, #16
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
 801406c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d106      	bne.n	8014082 <tcp_rst+0x22>
 8014074:	4b1f      	ldr	r3, [pc, #124]	; (80140f4 <tcp_rst+0x94>)
 8014076:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801407a:	491f      	ldr	r1, [pc, #124]	; (80140f8 <tcp_rst+0x98>)
 801407c:	481f      	ldr	r0, [pc, #124]	; (80140fc <tcp_rst+0x9c>)
 801407e:	f003 fca5 	bl	80179cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014084:	2b00      	cmp	r3, #0
 8014086:	d106      	bne.n	8014096 <tcp_rst+0x36>
 8014088:	4b1a      	ldr	r3, [pc, #104]	; (80140f4 <tcp_rst+0x94>)
 801408a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801408e:	491c      	ldr	r1, [pc, #112]	; (8014100 <tcp_rst+0xa0>)
 8014090:	481a      	ldr	r0, [pc, #104]	; (80140fc <tcp_rst+0x9c>)
 8014092:	f003 fc9b 	bl	80179cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014096:	2300      	movs	r3, #0
 8014098:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801409a:	f246 0308 	movw	r3, #24584	; 0x6008
 801409e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80140a0:	7dfb      	ldrb	r3, [r7, #23]
 80140a2:	b29c      	uxth	r4, r3
 80140a4:	68b8      	ldr	r0, [r7, #8]
 80140a6:	f7f8 faea 	bl	800c67e <lwip_htonl>
 80140aa:	4602      	mov	r2, r0
 80140ac:	8abb      	ldrh	r3, [r7, #20]
 80140ae:	9303      	str	r3, [sp, #12]
 80140b0:	2314      	movs	r3, #20
 80140b2:	9302      	str	r3, [sp, #8]
 80140b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80140ba:	9300      	str	r3, [sp, #0]
 80140bc:	4613      	mov	r3, r2
 80140be:	2200      	movs	r2, #0
 80140c0:	4621      	mov	r1, r4
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f7ff fe92 	bl	8013dec <tcp_output_alloc_header_common>
 80140c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d00c      	beq.n	80140ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
 80140d2:	2200      	movs	r2, #0
 80140d4:	6939      	ldr	r1, [r7, #16]
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	f7ff ff38 	bl	8013f4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80140dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	6939      	ldr	r1, [r7, #16]
 80140e2:	68f8      	ldr	r0, [r7, #12]
 80140e4:	f7ff ff72 	bl	8013fcc <tcp_output_control_segment>
 80140e8:	e000      	b.n	80140ec <tcp_rst+0x8c>
    return;
 80140ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80140ec:	371c      	adds	r7, #28
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd90      	pop	{r4, r7, pc}
 80140f2:	bf00      	nop
 80140f4:	0801afa0 	.word	0x0801afa0
 80140f8:	0801b724 	.word	0x0801b724
 80140fc:	0801aff4 	.word	0x0801aff4
 8014100:	0801b740 	.word	0x0801b740

08014104 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014104:	b590      	push	{r4, r7, lr}
 8014106:	b087      	sub	sp, #28
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801410c:	2300      	movs	r3, #0
 801410e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014110:	2300      	movs	r3, #0
 8014112:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d106      	bne.n	8014128 <tcp_send_empty_ack+0x24>
 801411a:	4b28      	ldr	r3, [pc, #160]	; (80141bc <tcp_send_empty_ack+0xb8>)
 801411c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014120:	4927      	ldr	r1, [pc, #156]	; (80141c0 <tcp_send_empty_ack+0xbc>)
 8014122:	4828      	ldr	r0, [pc, #160]	; (80141c4 <tcp_send_empty_ack+0xc0>)
 8014124:	f003 fc52 	bl	80179cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014128:	7dfb      	ldrb	r3, [r7, #23]
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	b2db      	uxtb	r3, r3
 801412e:	f003 0304 	and.w	r3, r3, #4
 8014132:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014134:	7d7b      	ldrb	r3, [r7, #21]
 8014136:	b29c      	uxth	r4, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801413c:	4618      	mov	r0, r3
 801413e:	f7f8 fa9e 	bl	800c67e <lwip_htonl>
 8014142:	4603      	mov	r3, r0
 8014144:	2200      	movs	r2, #0
 8014146:	4621      	mov	r1, r4
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f7ff fec1 	bl	8013ed0 <tcp_output_alloc_header>
 801414e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d109      	bne.n	801416a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	8b5b      	ldrh	r3, [r3, #26]
 801415a:	f043 0303 	orr.w	r3, r3, #3
 801415e:	b29a      	uxth	r2, r3
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014164:	f06f 0301 	mvn.w	r3, #1
 8014168:	e023      	b.n	80141b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801416a:	7dbb      	ldrb	r3, [r7, #22]
 801416c:	7dfa      	ldrb	r2, [r7, #23]
 801416e:	6939      	ldr	r1, [r7, #16]
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7ff feeb 	bl	8013f4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014176:	687a      	ldr	r2, [r7, #4]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	3304      	adds	r3, #4
 801417c:	6939      	ldr	r1, [r7, #16]
 801417e:	6878      	ldr	r0, [r7, #4]
 8014180:	f7ff ff24 	bl	8013fcc <tcp_output_control_segment>
 8014184:	4603      	mov	r3, r0
 8014186:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d007      	beq.n	80141a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	8b5b      	ldrh	r3, [r3, #26]
 8014194:	f043 0303 	orr.w	r3, r3, #3
 8014198:	b29a      	uxth	r2, r3
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	835a      	strh	r2, [r3, #26]
 801419e:	e006      	b.n	80141ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	8b5b      	ldrh	r3, [r3, #26]
 80141a4:	f023 0303 	bic.w	r3, r3, #3
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80141ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	371c      	adds	r7, #28
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd90      	pop	{r4, r7, pc}
 80141ba:	bf00      	nop
 80141bc:	0801afa0 	.word	0x0801afa0
 80141c0:	0801b75c 	.word	0x0801b75c
 80141c4:	0801aff4 	.word	0x0801aff4

080141c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80141c8:	b590      	push	{r4, r7, lr}
 80141ca:	b087      	sub	sp, #28
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80141d0:	2300      	movs	r3, #0
 80141d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d106      	bne.n	80141e8 <tcp_keepalive+0x20>
 80141da:	4b18      	ldr	r3, [pc, #96]	; (801423c <tcp_keepalive+0x74>)
 80141dc:	f640 0224 	movw	r2, #2084	; 0x824
 80141e0:	4917      	ldr	r1, [pc, #92]	; (8014240 <tcp_keepalive+0x78>)
 80141e2:	4818      	ldr	r0, [pc, #96]	; (8014244 <tcp_keepalive+0x7c>)
 80141e4:	f003 fbf2 	bl	80179cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80141e8:	7dfb      	ldrb	r3, [r7, #23]
 80141ea:	b29c      	uxth	r4, r3
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80141f0:	3b01      	subs	r3, #1
 80141f2:	4618      	mov	r0, r3
 80141f4:	f7f8 fa43 	bl	800c67e <lwip_htonl>
 80141f8:	4603      	mov	r3, r0
 80141fa:	2200      	movs	r2, #0
 80141fc:	4621      	mov	r1, r4
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7ff fe66 	bl	8013ed0 <tcp_output_alloc_header>
 8014204:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d102      	bne.n	8014212 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801420c:	f04f 33ff 	mov.w	r3, #4294967295
 8014210:	e010      	b.n	8014234 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014212:	7dfb      	ldrb	r3, [r7, #23]
 8014214:	2200      	movs	r2, #0
 8014216:	6939      	ldr	r1, [r7, #16]
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f7ff fe97 	bl	8013f4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	3304      	adds	r3, #4
 8014224:	6939      	ldr	r1, [r7, #16]
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	f7ff fed0 	bl	8013fcc <tcp_output_control_segment>
 801422c:	4603      	mov	r3, r0
 801422e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014230:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014234:	4618      	mov	r0, r3
 8014236:	371c      	adds	r7, #28
 8014238:	46bd      	mov	sp, r7
 801423a:	bd90      	pop	{r4, r7, pc}
 801423c:	0801afa0 	.word	0x0801afa0
 8014240:	0801b77c 	.word	0x0801b77c
 8014244:	0801aff4 	.word	0x0801aff4

08014248 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014248:	b590      	push	{r4, r7, lr}
 801424a:	b08b      	sub	sp, #44	; 0x2c
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014250:	2300      	movs	r3, #0
 8014252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d106      	bne.n	801426a <tcp_zero_window_probe+0x22>
 801425c:	4b4c      	ldr	r3, [pc, #304]	; (8014390 <tcp_zero_window_probe+0x148>)
 801425e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014262:	494c      	ldr	r1, [pc, #304]	; (8014394 <tcp_zero_window_probe+0x14c>)
 8014264:	484c      	ldr	r0, [pc, #304]	; (8014398 <tcp_zero_window_probe+0x150>)
 8014266:	f003 fbb1 	bl	80179cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801426e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014270:	6a3b      	ldr	r3, [r7, #32]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d101      	bne.n	801427a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014276:	2300      	movs	r3, #0
 8014278:	e086      	b.n	8014388 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014280:	2bff      	cmp	r3, #255	; 0xff
 8014282:	d007      	beq.n	8014294 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801428a:	3301      	adds	r3, #1
 801428c:	b2da      	uxtb	r2, r3
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014294:	6a3b      	ldr	r3, [r7, #32]
 8014296:	68db      	ldr	r3, [r3, #12]
 8014298:	899b      	ldrh	r3, [r3, #12]
 801429a:	b29b      	uxth	r3, r3
 801429c:	4618      	mov	r0, r3
 801429e:	f7f8 f9d9 	bl	800c654 <lwip_htons>
 80142a2:	4603      	mov	r3, r0
 80142a4:	b2db      	uxtb	r3, r3
 80142a6:	f003 0301 	and.w	r3, r3, #1
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d005      	beq.n	80142ba <tcp_zero_window_probe+0x72>
 80142ae:	6a3b      	ldr	r3, [r7, #32]
 80142b0:	891b      	ldrh	r3, [r3, #8]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <tcp_zero_window_probe+0x72>
 80142b6:	2301      	movs	r3, #1
 80142b8:	e000      	b.n	80142bc <tcp_zero_window_probe+0x74>
 80142ba:	2300      	movs	r3, #0
 80142bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80142be:	7ffb      	ldrb	r3, [r7, #31]
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	bf0c      	ite	eq
 80142c4:	2301      	moveq	r3, #1
 80142c6:	2300      	movne	r3, #0
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80142cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142d0:	b299      	uxth	r1, r3
 80142d2:	6a3b      	ldr	r3, [r7, #32]
 80142d4:	68db      	ldr	r3, [r3, #12]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	8bba      	ldrh	r2, [r7, #28]
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f7ff fdf8 	bl	8013ed0 <tcp_output_alloc_header>
 80142e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80142e2:	69bb      	ldr	r3, [r7, #24]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d102      	bne.n	80142ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80142e8:	f04f 33ff 	mov.w	r3, #4294967295
 80142ec:	e04c      	b.n	8014388 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80142f4:	7ffb      	ldrb	r3, [r7, #31]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d011      	beq.n	801431e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	899b      	ldrh	r3, [r3, #12]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	b21b      	sxth	r3, r3
 8014302:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014306:	b21c      	sxth	r4, r3
 8014308:	2011      	movs	r0, #17
 801430a:	f7f8 f9a3 	bl	800c654 <lwip_htons>
 801430e:	4603      	mov	r3, r0
 8014310:	b21b      	sxth	r3, r3
 8014312:	4323      	orrs	r3, r4
 8014314:	b21b      	sxth	r3, r3
 8014316:	b29a      	uxth	r2, r3
 8014318:	697b      	ldr	r3, [r7, #20]
 801431a:	819a      	strh	r2, [r3, #12]
 801431c:	e010      	b.n	8014340 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	685b      	ldr	r3, [r3, #4]
 8014322:	3314      	adds	r3, #20
 8014324:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014326:	6a3b      	ldr	r3, [r7, #32]
 8014328:	6858      	ldr	r0, [r3, #4]
 801432a:	6a3b      	ldr	r3, [r7, #32]
 801432c:	685b      	ldr	r3, [r3, #4]
 801432e:	891a      	ldrh	r2, [r3, #8]
 8014330:	6a3b      	ldr	r3, [r7, #32]
 8014332:	891b      	ldrh	r3, [r3, #8]
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	b29b      	uxth	r3, r3
 8014338:	2201      	movs	r2, #1
 801433a:	6939      	ldr	r1, [r7, #16]
 801433c:	f7f9 ff2c 	bl	800e198 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014340:	6a3b      	ldr	r3, [r7, #32]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f7f8 f999 	bl	800c67e <lwip_htonl>
 801434c:	4603      	mov	r3, r0
 801434e:	3301      	adds	r3, #1
 8014350:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	1ad3      	subs	r3, r2, r3
 801435a:	2b00      	cmp	r3, #0
 801435c:	da02      	bge.n	8014364 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68fa      	ldr	r2, [r7, #12]
 8014362:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014368:	2200      	movs	r2, #0
 801436a:	69b9      	ldr	r1, [r7, #24]
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f7ff fded 	bl	8013f4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	3304      	adds	r3, #4
 8014378:	69b9      	ldr	r1, [r7, #24]
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f7ff fe26 	bl	8013fcc <tcp_output_control_segment>
 8014380:	4603      	mov	r3, r0
 8014382:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014384:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014388:	4618      	mov	r0, r3
 801438a:	372c      	adds	r7, #44	; 0x2c
 801438c:	46bd      	mov	sp, r7
 801438e:	bd90      	pop	{r4, r7, pc}
 8014390:	0801afa0 	.word	0x0801afa0
 8014394:	0801b798 	.word	0x0801b798
 8014398:	0801aff4 	.word	0x0801aff4

0801439c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b082      	sub	sp, #8
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80143a4:	f7f9 ffe6 	bl	800e374 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80143a8:	4b0a      	ldr	r3, [pc, #40]	; (80143d4 <tcpip_tcp_timer+0x38>)
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d103      	bne.n	80143b8 <tcpip_tcp_timer+0x1c>
 80143b0:	4b09      	ldr	r3, [pc, #36]	; (80143d8 <tcpip_tcp_timer+0x3c>)
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d005      	beq.n	80143c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80143b8:	2200      	movs	r2, #0
 80143ba:	4908      	ldr	r1, [pc, #32]	; (80143dc <tcpip_tcp_timer+0x40>)
 80143bc:	20fa      	movs	r0, #250	; 0xfa
 80143be:	f000 f8f3 	bl	80145a8 <sys_timeout>
 80143c2:	e003      	b.n	80143cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80143c4:	4b06      	ldr	r3, [pc, #24]	; (80143e0 <tcpip_tcp_timer+0x44>)
 80143c6:	2200      	movs	r2, #0
 80143c8:	601a      	str	r2, [r3, #0]
  }
}
 80143ca:	bf00      	nop
 80143cc:	bf00      	nop
 80143ce:	3708      	adds	r7, #8
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	2000b8f8 	.word	0x2000b8f8
 80143d8:	2000b908 	.word	0x2000b908
 80143dc:	0801439d 	.word	0x0801439d
 80143e0:	20004a40 	.word	0x20004a40

080143e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80143e8:	4b0a      	ldr	r3, [pc, #40]	; (8014414 <tcp_timer_needed+0x30>)
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d10f      	bne.n	8014410 <tcp_timer_needed+0x2c>
 80143f0:	4b09      	ldr	r3, [pc, #36]	; (8014418 <tcp_timer_needed+0x34>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d103      	bne.n	8014400 <tcp_timer_needed+0x1c>
 80143f8:	4b08      	ldr	r3, [pc, #32]	; (801441c <tcp_timer_needed+0x38>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d007      	beq.n	8014410 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014400:	4b04      	ldr	r3, [pc, #16]	; (8014414 <tcp_timer_needed+0x30>)
 8014402:	2201      	movs	r2, #1
 8014404:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014406:	2200      	movs	r2, #0
 8014408:	4905      	ldr	r1, [pc, #20]	; (8014420 <tcp_timer_needed+0x3c>)
 801440a:	20fa      	movs	r0, #250	; 0xfa
 801440c:	f000 f8cc 	bl	80145a8 <sys_timeout>
  }
}
 8014410:	bf00      	nop
 8014412:	bd80      	pop	{r7, pc}
 8014414:	20004a40 	.word	0x20004a40
 8014418:	2000b8f8 	.word	0x2000b8f8
 801441c:	2000b908 	.word	0x2000b908
 8014420:	0801439d 	.word	0x0801439d

08014424 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b086      	sub	sp, #24
 8014428:	af00      	add	r7, sp, #0
 801442a:	60f8      	str	r0, [r7, #12]
 801442c:	60b9      	str	r1, [r7, #8]
 801442e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014430:	200a      	movs	r0, #10
 8014432:	f7f8 fdc5 	bl	800cfc0 <memp_malloc>
 8014436:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d109      	bne.n	8014452 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d151      	bne.n	80144e8 <sys_timeout_abs+0xc4>
 8014444:	4b2a      	ldr	r3, [pc, #168]	; (80144f0 <sys_timeout_abs+0xcc>)
 8014446:	22be      	movs	r2, #190	; 0xbe
 8014448:	492a      	ldr	r1, [pc, #168]	; (80144f4 <sys_timeout_abs+0xd0>)
 801444a:	482b      	ldr	r0, [pc, #172]	; (80144f8 <sys_timeout_abs+0xd4>)
 801444c:	f003 fabe 	bl	80179cc <iprintf>
    return;
 8014450:	e04a      	b.n	80144e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	2200      	movs	r2, #0
 8014456:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	68ba      	ldr	r2, [r7, #8]
 801445c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801446a:	4b24      	ldr	r3, [pc, #144]	; (80144fc <sys_timeout_abs+0xd8>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d103      	bne.n	801447a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014472:	4a22      	ldr	r2, [pc, #136]	; (80144fc <sys_timeout_abs+0xd8>)
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	6013      	str	r3, [r2, #0]
    return;
 8014478:	e037      	b.n	80144ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	685a      	ldr	r2, [r3, #4]
 801447e:	4b1f      	ldr	r3, [pc, #124]	; (80144fc <sys_timeout_abs+0xd8>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	0fdb      	lsrs	r3, r3, #31
 8014488:	f003 0301 	and.w	r3, r3, #1
 801448c:	b2db      	uxtb	r3, r3
 801448e:	2b00      	cmp	r3, #0
 8014490:	d007      	beq.n	80144a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014492:	4b1a      	ldr	r3, [pc, #104]	; (80144fc <sys_timeout_abs+0xd8>)
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801449a:	4a18      	ldr	r2, [pc, #96]	; (80144fc <sys_timeout_abs+0xd8>)
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	6013      	str	r3, [r2, #0]
 80144a0:	e023      	b.n	80144ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80144a2:	4b16      	ldr	r3, [pc, #88]	; (80144fc <sys_timeout_abs+0xd8>)
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	617b      	str	r3, [r7, #20]
 80144a8:	e01a      	b.n	80144e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00b      	beq.n	80144ca <sys_timeout_abs+0xa6>
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	685a      	ldr	r2, [r3, #4]
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	1ad3      	subs	r3, r2, r3
 80144be:	0fdb      	lsrs	r3, r3, #31
 80144c0:	f003 0301 	and.w	r3, r3, #1
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d007      	beq.n	80144da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	681a      	ldr	r2, [r3, #0]
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	693a      	ldr	r2, [r7, #16]
 80144d6:	601a      	str	r2, [r3, #0]
        break;
 80144d8:	e007      	b.n	80144ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	617b      	str	r3, [r7, #20]
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d1e1      	bne.n	80144aa <sys_timeout_abs+0x86>
 80144e6:	e000      	b.n	80144ea <sys_timeout_abs+0xc6>
    return;
 80144e8:	bf00      	nop
      }
    }
  }
}
 80144ea:	3718      	adds	r7, #24
 80144ec:	46bd      	mov	sp, r7
 80144ee:	bd80      	pop	{r7, pc}
 80144f0:	0801b7bc 	.word	0x0801b7bc
 80144f4:	0801b7f0 	.word	0x0801b7f0
 80144f8:	0801b830 	.word	0x0801b830
 80144fc:	20004a38 	.word	0x20004a38

08014500 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	4798      	blx	r3

  now = sys_now();
 8014512:	f7f1 fcbb 	bl	8005e8c <sys_now>
 8014516:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	681a      	ldr	r2, [r3, #0]
 801451c:	4b0f      	ldr	r3, [pc, #60]	; (801455c <lwip_cyclic_timer+0x5c>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4413      	add	r3, r2
 8014522:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014524:	68fa      	ldr	r2, [r7, #12]
 8014526:	693b      	ldr	r3, [r7, #16]
 8014528:	1ad3      	subs	r3, r2, r3
 801452a:	0fdb      	lsrs	r3, r3, #31
 801452c:	f003 0301 	and.w	r3, r3, #1
 8014530:	b2db      	uxtb	r3, r3
 8014532:	2b00      	cmp	r3, #0
 8014534:	d009      	beq.n	801454a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014536:	697b      	ldr	r3, [r7, #20]
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	4413      	add	r3, r2
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	4907      	ldr	r1, [pc, #28]	; (8014560 <lwip_cyclic_timer+0x60>)
 8014542:	4618      	mov	r0, r3
 8014544:	f7ff ff6e 	bl	8014424 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014548:	e004      	b.n	8014554 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	4904      	ldr	r1, [pc, #16]	; (8014560 <lwip_cyclic_timer+0x60>)
 801454e:	68f8      	ldr	r0, [r7, #12]
 8014550:	f7ff ff68 	bl	8014424 <sys_timeout_abs>
}
 8014554:	bf00      	nop
 8014556:	3718      	adds	r7, #24
 8014558:	46bd      	mov	sp, r7
 801455a:	bd80      	pop	{r7, pc}
 801455c:	20004a3c 	.word	0x20004a3c
 8014560:	08014501 	.word	0x08014501

08014564 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b082      	sub	sp, #8
 8014568:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801456a:	2301      	movs	r3, #1
 801456c:	607b      	str	r3, [r7, #4]
 801456e:	e00e      	b.n	801458e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014570:	4a0b      	ldr	r2, [pc, #44]	; (80145a0 <sys_timeouts_init+0x3c>)
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	00db      	lsls	r3, r3, #3
 801457c:	4a08      	ldr	r2, [pc, #32]	; (80145a0 <sys_timeouts_init+0x3c>)
 801457e:	4413      	add	r3, r2
 8014580:	461a      	mov	r2, r3
 8014582:	4908      	ldr	r1, [pc, #32]	; (80145a4 <sys_timeouts_init+0x40>)
 8014584:	f000 f810 	bl	80145a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	3301      	adds	r3, #1
 801458c:	607b      	str	r3, [r7, #4]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	2b02      	cmp	r3, #2
 8014592:	d9ed      	bls.n	8014570 <sys_timeouts_init+0xc>
  }
}
 8014594:	bf00      	nop
 8014596:	bf00      	nop
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	0801c474 	.word	0x0801c474
 80145a4:	08014501 	.word	0x08014501

080145a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145ba:	d306      	bcc.n	80145ca <sys_timeout+0x22>
 80145bc:	4b0a      	ldr	r3, [pc, #40]	; (80145e8 <sys_timeout+0x40>)
 80145be:	f240 1229 	movw	r2, #297	; 0x129
 80145c2:	490a      	ldr	r1, [pc, #40]	; (80145ec <sys_timeout+0x44>)
 80145c4:	480a      	ldr	r0, [pc, #40]	; (80145f0 <sys_timeout+0x48>)
 80145c6:	f003 fa01 	bl	80179cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80145ca:	f7f1 fc5f 	bl	8005e8c <sys_now>
 80145ce:	4602      	mov	r2, r0
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	4413      	add	r3, r2
 80145d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80145d6:	687a      	ldr	r2, [r7, #4]
 80145d8:	68b9      	ldr	r1, [r7, #8]
 80145da:	6978      	ldr	r0, [r7, #20]
 80145dc:	f7ff ff22 	bl	8014424 <sys_timeout_abs>
#endif
}
 80145e0:	bf00      	nop
 80145e2:	3718      	adds	r7, #24
 80145e4:	46bd      	mov	sp, r7
 80145e6:	bd80      	pop	{r7, pc}
 80145e8:	0801b7bc 	.word	0x0801b7bc
 80145ec:	0801b858 	.word	0x0801b858
 80145f0:	0801b830 	.word	0x0801b830

080145f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b084      	sub	sp, #16
 80145f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80145fa:	f7f1 fc47 	bl	8005e8c <sys_now>
 80145fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014600:	4b17      	ldr	r3, [pc, #92]	; (8014660 <sys_check_timeouts+0x6c>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014606:	68bb      	ldr	r3, [r7, #8]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d022      	beq.n	8014652 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801460c:	68bb      	ldr	r3, [r7, #8]
 801460e:	685b      	ldr	r3, [r3, #4]
 8014610:	68fa      	ldr	r2, [r7, #12]
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	0fdb      	lsrs	r3, r3, #31
 8014616:	f003 0301 	and.w	r3, r3, #1
 801461a:	b2db      	uxtb	r3, r3
 801461c:	2b00      	cmp	r3, #0
 801461e:	d11a      	bne.n	8014656 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014620:	68bb      	ldr	r3, [r7, #8]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a0e      	ldr	r2, [pc, #56]	; (8014660 <sys_check_timeouts+0x6c>)
 8014626:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	689b      	ldr	r3, [r3, #8]
 801462c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014634:	68bb      	ldr	r3, [r7, #8]
 8014636:	685b      	ldr	r3, [r3, #4]
 8014638:	4a0a      	ldr	r2, [pc, #40]	; (8014664 <sys_check_timeouts+0x70>)
 801463a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801463c:	68b9      	ldr	r1, [r7, #8]
 801463e:	200a      	movs	r0, #10
 8014640:	f7f8 fd10 	bl	800d064 <memp_free>
    if (handler != NULL) {
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d0da      	beq.n	8014600 <sys_check_timeouts+0xc>
      handler(arg);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6838      	ldr	r0, [r7, #0]
 801464e:	4798      	blx	r3
  do {
 8014650:	e7d6      	b.n	8014600 <sys_check_timeouts+0xc>
      return;
 8014652:	bf00      	nop
 8014654:	e000      	b.n	8014658 <sys_check_timeouts+0x64>
      return;
 8014656:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}
 801465e:	bf00      	nop
 8014660:	20004a38 	.word	0x20004a38
 8014664:	20004a3c 	.word	0x20004a3c

08014668 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b082      	sub	sp, #8
 801466c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801466e:	4b16      	ldr	r3, [pc, #88]	; (80146c8 <sys_timeouts_sleeptime+0x60>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d102      	bne.n	801467c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014676:	f04f 33ff 	mov.w	r3, #4294967295
 801467a:	e020      	b.n	80146be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801467c:	f7f1 fc06 	bl	8005e8c <sys_now>
 8014680:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014682:	4b11      	ldr	r3, [pc, #68]	; (80146c8 <sys_timeouts_sleeptime+0x60>)
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	685a      	ldr	r2, [r3, #4]
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	1ad3      	subs	r3, r2, r3
 801468c:	0fdb      	lsrs	r3, r3, #31
 801468e:	f003 0301 	and.w	r3, r3, #1
 8014692:	b2db      	uxtb	r3, r3
 8014694:	2b00      	cmp	r3, #0
 8014696:	d001      	beq.n	801469c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014698:	2300      	movs	r3, #0
 801469a:	e010      	b.n	80146be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801469c:	4b0a      	ldr	r3, [pc, #40]	; (80146c8 <sys_timeouts_sleeptime+0x60>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	685a      	ldr	r2, [r3, #4]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	da06      	bge.n	80146bc <sys_timeouts_sleeptime+0x54>
 80146ae:	4b07      	ldr	r3, [pc, #28]	; (80146cc <sys_timeouts_sleeptime+0x64>)
 80146b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80146b4:	4906      	ldr	r1, [pc, #24]	; (80146d0 <sys_timeouts_sleeptime+0x68>)
 80146b6:	4807      	ldr	r0, [pc, #28]	; (80146d4 <sys_timeouts_sleeptime+0x6c>)
 80146b8:	f003 f988 	bl	80179cc <iprintf>
    return ret;
 80146bc:	683b      	ldr	r3, [r7, #0]
  }
}
 80146be:	4618      	mov	r0, r3
 80146c0:	3708      	adds	r7, #8
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	20004a38 	.word	0x20004a38
 80146cc:	0801b7bc 	.word	0x0801b7bc
 80146d0:	0801b890 	.word	0x0801b890
 80146d4:	0801b830 	.word	0x0801b830

080146d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80146dc:	f003 fa04 	bl	8017ae8 <rand>
 80146e0:	4603      	mov	r3, r0
 80146e2:	b29b      	uxth	r3, r3
 80146e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	4b01      	ldr	r3, [pc, #4]	; (80146f8 <udp_init+0x20>)
 80146f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146f4:	bf00      	nop
 80146f6:	bd80      	pop	{r7, pc}
 80146f8:	20000018 	.word	0x20000018

080146fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014702:	2300      	movs	r3, #0
 8014704:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014706:	4b17      	ldr	r3, [pc, #92]	; (8014764 <udp_new_port+0x68>)
 8014708:	881b      	ldrh	r3, [r3, #0]
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	b291      	uxth	r1, r2
 801470e:	4a15      	ldr	r2, [pc, #84]	; (8014764 <udp_new_port+0x68>)
 8014710:	8011      	strh	r1, [r2, #0]
 8014712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014716:	4293      	cmp	r3, r2
 8014718:	d103      	bne.n	8014722 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801471a:	4b12      	ldr	r3, [pc, #72]	; (8014764 <udp_new_port+0x68>)
 801471c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014720:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014722:	4b11      	ldr	r3, [pc, #68]	; (8014768 <udp_new_port+0x6c>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	603b      	str	r3, [r7, #0]
 8014728:	e011      	b.n	801474e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801472a:	683b      	ldr	r3, [r7, #0]
 801472c:	8a5a      	ldrh	r2, [r3, #18]
 801472e:	4b0d      	ldr	r3, [pc, #52]	; (8014764 <udp_new_port+0x68>)
 8014730:	881b      	ldrh	r3, [r3, #0]
 8014732:	429a      	cmp	r2, r3
 8014734:	d108      	bne.n	8014748 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014736:	88fb      	ldrh	r3, [r7, #6]
 8014738:	3301      	adds	r3, #1
 801473a:	80fb      	strh	r3, [r7, #6]
 801473c:	88fb      	ldrh	r3, [r7, #6]
 801473e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014742:	d3e0      	bcc.n	8014706 <udp_new_port+0xa>
        return 0;
 8014744:	2300      	movs	r3, #0
 8014746:	e007      	b.n	8014758 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014748:	683b      	ldr	r3, [r7, #0]
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	603b      	str	r3, [r7, #0]
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d1ea      	bne.n	801472a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014754:	4b03      	ldr	r3, [pc, #12]	; (8014764 <udp_new_port+0x68>)
 8014756:	881b      	ldrh	r3, [r3, #0]
}
 8014758:	4618      	mov	r0, r3
 801475a:	370c      	adds	r7, #12
 801475c:	46bd      	mov	sp, r7
 801475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014762:	4770      	bx	lr
 8014764:	20000018 	.word	0x20000018
 8014768:	2000b910 	.word	0x2000b910

0801476c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	60f8      	str	r0, [r7, #12]
 8014774:	60b9      	str	r1, [r7, #8]
 8014776:	4613      	mov	r3, r2
 8014778:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d105      	bne.n	801478c <udp_input_local_match+0x20>
 8014780:	4b27      	ldr	r3, [pc, #156]	; (8014820 <udp_input_local_match+0xb4>)
 8014782:	2287      	movs	r2, #135	; 0x87
 8014784:	4927      	ldr	r1, [pc, #156]	; (8014824 <udp_input_local_match+0xb8>)
 8014786:	4828      	ldr	r0, [pc, #160]	; (8014828 <udp_input_local_match+0xbc>)
 8014788:	f003 f920 	bl	80179cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d105      	bne.n	801479e <udp_input_local_match+0x32>
 8014792:	4b23      	ldr	r3, [pc, #140]	; (8014820 <udp_input_local_match+0xb4>)
 8014794:	2288      	movs	r2, #136	; 0x88
 8014796:	4925      	ldr	r1, [pc, #148]	; (801482c <udp_input_local_match+0xc0>)
 8014798:	4823      	ldr	r0, [pc, #140]	; (8014828 <udp_input_local_match+0xbc>)
 801479a:	f003 f917 	bl	80179cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	7a1b      	ldrb	r3, [r3, #8]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00b      	beq.n	80147be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	7a1a      	ldrb	r2, [r3, #8]
 80147aa:	4b21      	ldr	r3, [pc, #132]	; (8014830 <udp_input_local_match+0xc4>)
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80147b2:	3301      	adds	r3, #1
 80147b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80147b6:	429a      	cmp	r2, r3
 80147b8:	d001      	beq.n	80147be <udp_input_local_match+0x52>
    return 0;
 80147ba:	2300      	movs	r3, #0
 80147bc:	e02b      	b.n	8014816 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80147be:	79fb      	ldrb	r3, [r7, #7]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d018      	beq.n	80147f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d013      	beq.n	80147f2 <udp_input_local_match+0x86>
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d00f      	beq.n	80147f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147d2:	4b17      	ldr	r3, [pc, #92]	; (8014830 <udp_input_local_match+0xc4>)
 80147d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80147d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147da:	d00a      	beq.n	80147f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	4b13      	ldr	r3, [pc, #76]	; (8014830 <udp_input_local_match+0xc4>)
 80147e2:	695b      	ldr	r3, [r3, #20]
 80147e4:	405a      	eors	r2, r3
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	3308      	adds	r3, #8
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d110      	bne.n	8014814 <udp_input_local_match+0xa8>
          return 1;
 80147f2:	2301      	movs	r3, #1
 80147f4:	e00f      	b.n	8014816 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d009      	beq.n	8014810 <udp_input_local_match+0xa4>
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d005      	beq.n	8014810 <udp_input_local_match+0xa4>
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681a      	ldr	r2, [r3, #0]
 8014808:	4b09      	ldr	r3, [pc, #36]	; (8014830 <udp_input_local_match+0xc4>)
 801480a:	695b      	ldr	r3, [r3, #20]
 801480c:	429a      	cmp	r2, r3
 801480e:	d101      	bne.n	8014814 <udp_input_local_match+0xa8>
        return 1;
 8014810:	2301      	movs	r3, #1
 8014812:	e000      	b.n	8014816 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014814:	2300      	movs	r3, #0
}
 8014816:	4618      	mov	r0, r3
 8014818:	3710      	adds	r7, #16
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}
 801481e:	bf00      	nop
 8014820:	0801b8a4 	.word	0x0801b8a4
 8014824:	0801b8d4 	.word	0x0801b8d4
 8014828:	0801b8f8 	.word	0x0801b8f8
 801482c:	0801b920 	.word	0x0801b920
 8014830:	200081e4 	.word	0x200081e4

08014834 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014834:	b590      	push	{r4, r7, lr}
 8014836:	b08d      	sub	sp, #52	; 0x34
 8014838:	af02      	add	r7, sp, #8
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801483e:	2300      	movs	r3, #0
 8014840:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d105      	bne.n	8014854 <udp_input+0x20>
 8014848:	4b7c      	ldr	r3, [pc, #496]	; (8014a3c <udp_input+0x208>)
 801484a:	22cf      	movs	r2, #207	; 0xcf
 801484c:	497c      	ldr	r1, [pc, #496]	; (8014a40 <udp_input+0x20c>)
 801484e:	487d      	ldr	r0, [pc, #500]	; (8014a44 <udp_input+0x210>)
 8014850:	f003 f8bc 	bl	80179cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d105      	bne.n	8014866 <udp_input+0x32>
 801485a:	4b78      	ldr	r3, [pc, #480]	; (8014a3c <udp_input+0x208>)
 801485c:	22d0      	movs	r2, #208	; 0xd0
 801485e:	497a      	ldr	r1, [pc, #488]	; (8014a48 <udp_input+0x214>)
 8014860:	4878      	ldr	r0, [pc, #480]	; (8014a44 <udp_input+0x210>)
 8014862:	f003 f8b3 	bl	80179cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	895b      	ldrh	r3, [r3, #10]
 801486a:	2b07      	cmp	r3, #7
 801486c:	d803      	bhi.n	8014876 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801486e:	6878      	ldr	r0, [r7, #4]
 8014870:	f7f9 fa9c 	bl	800ddac <pbuf_free>
    goto end;
 8014874:	e0de      	b.n	8014a34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801487c:	4b73      	ldr	r3, [pc, #460]	; (8014a4c <udp_input+0x218>)
 801487e:	695b      	ldr	r3, [r3, #20]
 8014880:	4a72      	ldr	r2, [pc, #456]	; (8014a4c <udp_input+0x218>)
 8014882:	6812      	ldr	r2, [r2, #0]
 8014884:	4611      	mov	r1, r2
 8014886:	4618      	mov	r0, r3
 8014888:	f001 fd96 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 801488c:	4603      	mov	r3, r0
 801488e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	881b      	ldrh	r3, [r3, #0]
 8014894:	b29b      	uxth	r3, r3
 8014896:	4618      	mov	r0, r3
 8014898:	f7f7 fedc 	bl	800c654 <lwip_htons>
 801489c:	4603      	mov	r3, r0
 801489e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	885b      	ldrh	r3, [r3, #2]
 80148a4:	b29b      	uxth	r3, r3
 80148a6:	4618      	mov	r0, r3
 80148a8:	f7f7 fed4 	bl	800c654 <lwip_htons>
 80148ac:	4603      	mov	r3, r0
 80148ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80148b0:	2300      	movs	r3, #0
 80148b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80148b4:	2300      	movs	r3, #0
 80148b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80148b8:	2300      	movs	r3, #0
 80148ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80148bc:	4b64      	ldr	r3, [pc, #400]	; (8014a50 <udp_input+0x21c>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	627b      	str	r3, [r7, #36]	; 0x24
 80148c2:	e054      	b.n	801496e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80148c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148c6:	8a5b      	ldrh	r3, [r3, #18]
 80148c8:	89fa      	ldrh	r2, [r7, #14]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d14a      	bne.n	8014964 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80148ce:	7cfb      	ldrb	r3, [r7, #19]
 80148d0:	461a      	mov	r2, r3
 80148d2:	6839      	ldr	r1, [r7, #0]
 80148d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148d6:	f7ff ff49 	bl	801476c <udp_input_local_match>
 80148da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d041      	beq.n	8014964 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80148e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148e2:	7c1b      	ldrb	r3, [r3, #16]
 80148e4:	f003 0304 	and.w	r3, r3, #4
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d11d      	bne.n	8014928 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d102      	bne.n	80148f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80148f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148f4:	61fb      	str	r3, [r7, #28]
 80148f6:	e017      	b.n	8014928 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80148f8:	7cfb      	ldrb	r3, [r7, #19]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d014      	beq.n	8014928 <udp_input+0xf4>
 80148fe:	4b53      	ldr	r3, [pc, #332]	; (8014a4c <udp_input+0x218>)
 8014900:	695b      	ldr	r3, [r3, #20]
 8014902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014906:	d10f      	bne.n	8014928 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	681a      	ldr	r2, [r3, #0]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	3304      	adds	r3, #4
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	429a      	cmp	r2, r3
 8014914:	d008      	beq.n	8014928 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	3304      	adds	r3, #4
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	429a      	cmp	r2, r3
 8014922:	d101      	bne.n	8014928 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014926:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492a:	8a9b      	ldrh	r3, [r3, #20]
 801492c:	8a3a      	ldrh	r2, [r7, #16]
 801492e:	429a      	cmp	r2, r3
 8014930:	d118      	bne.n	8014964 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014934:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014936:	2b00      	cmp	r3, #0
 8014938:	d005      	beq.n	8014946 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493c:	685a      	ldr	r2, [r3, #4]
 801493e:	4b43      	ldr	r3, [pc, #268]	; (8014a4c <udp_input+0x218>)
 8014940:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014942:	429a      	cmp	r2, r3
 8014944:	d10e      	bne.n	8014964 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014946:	6a3b      	ldr	r3, [r7, #32]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d014      	beq.n	8014976 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801494e:	68da      	ldr	r2, [r3, #12]
 8014950:	6a3b      	ldr	r3, [r7, #32]
 8014952:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014954:	4b3e      	ldr	r3, [pc, #248]	; (8014a50 <udp_input+0x21c>)
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801495a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801495c:	4a3c      	ldr	r2, [pc, #240]	; (8014a50 <udp_input+0x21c>)
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014962:	e008      	b.n	8014976 <udp_input+0x142>
      }
    }

    prev = pcb;
 8014964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014966:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	627b      	str	r3, [r7, #36]	; 0x24
 801496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1a7      	bne.n	80148c4 <udp_input+0x90>
 8014974:	e000      	b.n	8014978 <udp_input+0x144>
        break;
 8014976:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497a:	2b00      	cmp	r3, #0
 801497c:	d101      	bne.n	8014982 <udp_input+0x14e>
    pcb = uncon_pcb;
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014984:	2b00      	cmp	r3, #0
 8014986:	d002      	beq.n	801498e <udp_input+0x15a>
    for_us = 1;
 8014988:	2301      	movs	r3, #1
 801498a:	76fb      	strb	r3, [r7, #27]
 801498c:	e00a      	b.n	80149a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801498e:	683b      	ldr	r3, [r7, #0]
 8014990:	3304      	adds	r3, #4
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	4b2d      	ldr	r3, [pc, #180]	; (8014a4c <udp_input+0x218>)
 8014996:	695b      	ldr	r3, [r3, #20]
 8014998:	429a      	cmp	r2, r3
 801499a:	bf0c      	ite	eq
 801499c:	2301      	moveq	r3, #1
 801499e:	2300      	movne	r3, #0
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80149a4:	7efb      	ldrb	r3, [r7, #27]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d041      	beq.n	8014a2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80149aa:	2108      	movs	r1, #8
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7f9 f977 	bl	800dca0 <pbuf_remove_header>
 80149b2:	4603      	mov	r3, r0
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d00a      	beq.n	80149ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80149b8:	4b20      	ldr	r3, [pc, #128]	; (8014a3c <udp_input+0x208>)
 80149ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80149be:	4925      	ldr	r1, [pc, #148]	; (8014a54 <udp_input+0x220>)
 80149c0:	4820      	ldr	r0, [pc, #128]	; (8014a44 <udp_input+0x210>)
 80149c2:	f003 f803 	bl	80179cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f7f9 f9f0 	bl	800ddac <pbuf_free>
      goto end;
 80149cc:	e032      	b.n	8014a34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80149ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d012      	beq.n	80149fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80149d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d6:	699b      	ldr	r3, [r3, #24]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00a      	beq.n	80149f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149de:	699c      	ldr	r4, [r3, #24]
 80149e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e2:	69d8      	ldr	r0, [r3, #28]
 80149e4:	8a3b      	ldrh	r3, [r7, #16]
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	4b1b      	ldr	r3, [pc, #108]	; (8014a58 <udp_input+0x224>)
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80149ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80149f0:	e021      	b.n	8014a36 <udp_input+0x202>
        pbuf_free(p);
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f7f9 f9da 	bl	800ddac <pbuf_free>
        goto end;
 80149f8:	e01c      	b.n	8014a34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80149fa:	7cfb      	ldrb	r3, [r7, #19]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d112      	bne.n	8014a26 <udp_input+0x1f2>
 8014a00:	4b12      	ldr	r3, [pc, #72]	; (8014a4c <udp_input+0x218>)
 8014a02:	695b      	ldr	r3, [r3, #20]
 8014a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014a08:	2be0      	cmp	r3, #224	; 0xe0
 8014a0a:	d00c      	beq.n	8014a26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014a0c:	4b0f      	ldr	r3, [pc, #60]	; (8014a4c <udp_input+0x218>)
 8014a0e:	899b      	ldrh	r3, [r3, #12]
 8014a10:	3308      	adds	r3, #8
 8014a12:	b29b      	uxth	r3, r3
 8014a14:	b21b      	sxth	r3, r3
 8014a16:	4619      	mov	r1, r3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7f9 f9b4 	bl	800dd86 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014a1e:	2103      	movs	r1, #3
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f001 f9a9 	bl	8015d78 <icmp_dest_unreach>
      pbuf_free(p);
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7f9 f9c0 	bl	800ddac <pbuf_free>
  return;
 8014a2c:	e003      	b.n	8014a36 <udp_input+0x202>
    pbuf_free(p);
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7f9 f9bc 	bl	800ddac <pbuf_free>
  return;
 8014a34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014a36:	372c      	adds	r7, #44	; 0x2c
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	bd90      	pop	{r4, r7, pc}
 8014a3c:	0801b8a4 	.word	0x0801b8a4
 8014a40:	0801b948 	.word	0x0801b948
 8014a44:	0801b8f8 	.word	0x0801b8f8
 8014a48:	0801b960 	.word	0x0801b960
 8014a4c:	200081e4 	.word	0x200081e4
 8014a50:	2000b910 	.word	0x2000b910
 8014a54:	0801b97c 	.word	0x0801b97c
 8014a58:	200081f4 	.word	0x200081f4

08014a5c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	4613      	mov	r3, r2
 8014a68:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d101      	bne.n	8014a74 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014a70:	4b39      	ldr	r3, [pc, #228]	; (8014b58 <udp_bind+0xfc>)
 8014a72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d109      	bne.n	8014a8e <udp_bind+0x32>
 8014a7a:	4b38      	ldr	r3, [pc, #224]	; (8014b5c <udp_bind+0x100>)
 8014a7c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014a80:	4937      	ldr	r1, [pc, #220]	; (8014b60 <udp_bind+0x104>)
 8014a82:	4838      	ldr	r0, [pc, #224]	; (8014b64 <udp_bind+0x108>)
 8014a84:	f002 ffa2 	bl	80179cc <iprintf>
 8014a88:	f06f 030f 	mvn.w	r3, #15
 8014a8c:	e060      	b.n	8014b50 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014a92:	4b35      	ldr	r3, [pc, #212]	; (8014b68 <udp_bind+0x10c>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	617b      	str	r3, [r7, #20]
 8014a98:	e009      	b.n	8014aae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d102      	bne.n	8014aa8 <udp_bind+0x4c>
      rebind = 1;
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	74fb      	strb	r3, [r7, #19]
      break;
 8014aa6:	e005      	b.n	8014ab4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014aa8:	697b      	ldr	r3, [r7, #20]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	617b      	str	r3, [r7, #20]
 8014aae:	697b      	ldr	r3, [r7, #20]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d1f2      	bne.n	8014a9a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014ab4:	88fb      	ldrh	r3, [r7, #6]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d109      	bne.n	8014ace <udp_bind+0x72>
    port = udp_new_port();
 8014aba:	f7ff fe1f 	bl	80146fc <udp_new_port>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014ac2:	88fb      	ldrh	r3, [r7, #6]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d12c      	bne.n	8014b22 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014ac8:	f06f 0307 	mvn.w	r3, #7
 8014acc:	e040      	b.n	8014b50 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ace:	4b26      	ldr	r3, [pc, #152]	; (8014b68 <udp_bind+0x10c>)
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	617b      	str	r3, [r7, #20]
 8014ad4:	e022      	b.n	8014b1c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014ad6:	68fa      	ldr	r2, [r7, #12]
 8014ad8:	697b      	ldr	r3, [r7, #20]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d01b      	beq.n	8014b16 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	8a5b      	ldrh	r3, [r3, #18]
 8014ae2:	88fa      	ldrh	r2, [r7, #6]
 8014ae4:	429a      	cmp	r2, r3
 8014ae6:	d116      	bne.n	8014b16 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014af0:	429a      	cmp	r2, r3
 8014af2:	d00d      	beq.n	8014b10 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d00a      	beq.n	8014b10 <udp_bind+0xb4>
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d006      	beq.n	8014b10 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b02:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d003      	beq.n	8014b10 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d102      	bne.n	8014b16 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014b10:	f06f 0307 	mvn.w	r3, #7
 8014b14:	e01c      	b.n	8014b50 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	68db      	ldr	r3, [r3, #12]
 8014b1a:	617b      	str	r3, [r7, #20]
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d1d9      	bne.n	8014ad6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d002      	beq.n	8014b2e <udp_bind+0xd2>
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	e000      	b.n	8014b30 <udp_bind+0xd4>
 8014b2e:	2300      	movs	r3, #0
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	88fa      	ldrh	r2, [r7, #6]
 8014b38:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014b3a:	7cfb      	ldrb	r3, [r7, #19]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d106      	bne.n	8014b4e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014b40:	4b09      	ldr	r3, [pc, #36]	; (8014b68 <udp_bind+0x10c>)
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014b48:	4a07      	ldr	r2, [pc, #28]	; (8014b68 <udp_bind+0x10c>)
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014b4e:	2300      	movs	r3, #0
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3718      	adds	r7, #24
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	0801c48c 	.word	0x0801c48c
 8014b5c:	0801b8a4 	.word	0x0801b8a4
 8014b60:	0801bb6c 	.word	0x0801bb6c
 8014b64:	0801b8f8 	.word	0x0801b8f8
 8014b68:	2000b910 	.word	0x2000b910

08014b6c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b084      	sub	sp, #16
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d107      	bne.n	8014b8e <udp_recv+0x22>
 8014b7e:	4b08      	ldr	r3, [pc, #32]	; (8014ba0 <udp_recv+0x34>)
 8014b80:	f240 428a 	movw	r2, #1162	; 0x48a
 8014b84:	4907      	ldr	r1, [pc, #28]	; (8014ba4 <udp_recv+0x38>)
 8014b86:	4808      	ldr	r0, [pc, #32]	; (8014ba8 <udp_recv+0x3c>)
 8014b88:	f002 ff20 	bl	80179cc <iprintf>
 8014b8c:	e005      	b.n	8014b9a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	68ba      	ldr	r2, [r7, #8]
 8014b92:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	61da      	str	r2, [r3, #28]
}
 8014b9a:	3710      	adds	r7, #16
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}
 8014ba0:	0801b8a4 	.word	0x0801b8a4
 8014ba4:	0801bbd8 	.word	0x0801bbd8
 8014ba8:	0801b8f8 	.word	0x0801b8f8

08014bac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d107      	bne.n	8014bca <udp_remove+0x1e>
 8014bba:	4b19      	ldr	r3, [pc, #100]	; (8014c20 <udp_remove+0x74>)
 8014bbc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014bc0:	4918      	ldr	r1, [pc, #96]	; (8014c24 <udp_remove+0x78>)
 8014bc2:	4819      	ldr	r0, [pc, #100]	; (8014c28 <udp_remove+0x7c>)
 8014bc4:	f002 ff02 	bl	80179cc <iprintf>
 8014bc8:	e026      	b.n	8014c18 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014bca:	4b18      	ldr	r3, [pc, #96]	; (8014c2c <udp_remove+0x80>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	687a      	ldr	r2, [r7, #4]
 8014bd0:	429a      	cmp	r2, r3
 8014bd2:	d105      	bne.n	8014be0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014bd4:	4b15      	ldr	r3, [pc, #84]	; (8014c2c <udp_remove+0x80>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	4a14      	ldr	r2, [pc, #80]	; (8014c2c <udp_remove+0x80>)
 8014bdc:	6013      	str	r3, [r2, #0]
 8014bde:	e017      	b.n	8014c10 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014be0:	4b12      	ldr	r3, [pc, #72]	; (8014c2c <udp_remove+0x80>)
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	60fb      	str	r3, [r7, #12]
 8014be6:	e010      	b.n	8014c0a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d009      	beq.n	8014c04 <udp_remove+0x58>
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	68db      	ldr	r3, [r3, #12]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	429a      	cmp	r2, r3
 8014bf8:	d104      	bne.n	8014c04 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	68da      	ldr	r2, [r3, #12]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	60da      	str	r2, [r3, #12]
        break;
 8014c02:	e005      	b.n	8014c10 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	60fb      	str	r3, [r7, #12]
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d1eb      	bne.n	8014be8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014c10:	6879      	ldr	r1, [r7, #4]
 8014c12:	2000      	movs	r0, #0
 8014c14:	f7f8 fa26 	bl	800d064 <memp_free>
}
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	0801b8a4 	.word	0x0801b8a4
 8014c24:	0801bbf0 	.word	0x0801bbf0
 8014c28:	0801b8f8 	.word	0x0801b8f8
 8014c2c:	2000b910 	.word	0x2000b910

08014c30 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014c36:	2000      	movs	r0, #0
 8014c38:	f7f8 f9c2 	bl	800cfc0 <memp_malloc>
 8014c3c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d007      	beq.n	8014c54 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014c44:	2220      	movs	r2, #32
 8014c46:	2100      	movs	r1, #0
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f002 feb7 	bl	80179bc <memset>
    pcb->ttl = UDP_TTL;
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	22ff      	movs	r2, #255	; 0xff
 8014c52:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014c54:	687b      	ldr	r3, [r7, #4]
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b084      	sub	sp, #16
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	4603      	mov	r3, r0
 8014c66:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014c68:	f7ff ffe2 	bl	8014c30 <udp_new>
 8014c6c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014c78:	b480      	push	{r7}
 8014c7a:	b085      	sub	sp, #20
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d01e      	beq.n	8014cc6 <udp_netif_ip_addr_changed+0x4e>
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01a      	beq.n	8014cc6 <udp_netif_ip_addr_changed+0x4e>
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d017      	beq.n	8014cc6 <udp_netif_ip_addr_changed+0x4e>
 8014c96:	683b      	ldr	r3, [r7, #0]
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d013      	beq.n	8014cc6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014c9e:	4b0d      	ldr	r3, [pc, #52]	; (8014cd4 <udp_netif_ip_addr_changed+0x5c>)
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	60fb      	str	r3, [r7, #12]
 8014ca4:	e00c      	b.n	8014cc0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d103      	bne.n	8014cba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	681a      	ldr	r2, [r3, #0]
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	60fb      	str	r3, [r7, #12]
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d1ef      	bne.n	8014ca6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop
 8014cd4:	2000b910 	.word	0x2000b910

08014cd8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014ce0:	4915      	ldr	r1, [pc, #84]	; (8014d38 <etharp_free_entry+0x60>)
 8014ce2:	687a      	ldr	r2, [r7, #4]
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	005b      	lsls	r3, r3, #1
 8014ce8:	4413      	add	r3, r2
 8014cea:	00db      	lsls	r3, r3, #3
 8014cec:	440b      	add	r3, r1
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d013      	beq.n	8014d1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014cf4:	4910      	ldr	r1, [pc, #64]	; (8014d38 <etharp_free_entry+0x60>)
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	4613      	mov	r3, r2
 8014cfa:	005b      	lsls	r3, r3, #1
 8014cfc:	4413      	add	r3, r2
 8014cfe:	00db      	lsls	r3, r3, #3
 8014d00:	440b      	add	r3, r1
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7f9 f851 	bl	800ddac <pbuf_free>
    arp_table[i].q = NULL;
 8014d0a:	490b      	ldr	r1, [pc, #44]	; (8014d38 <etharp_free_entry+0x60>)
 8014d0c:	687a      	ldr	r2, [r7, #4]
 8014d0e:	4613      	mov	r3, r2
 8014d10:	005b      	lsls	r3, r3, #1
 8014d12:	4413      	add	r3, r2
 8014d14:	00db      	lsls	r3, r3, #3
 8014d16:	440b      	add	r3, r1
 8014d18:	2200      	movs	r2, #0
 8014d1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014d1c:	4906      	ldr	r1, [pc, #24]	; (8014d38 <etharp_free_entry+0x60>)
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	4613      	mov	r3, r2
 8014d22:	005b      	lsls	r3, r3, #1
 8014d24:	4413      	add	r3, r2
 8014d26:	00db      	lsls	r3, r3, #3
 8014d28:	440b      	add	r3, r1
 8014d2a:	3314      	adds	r3, #20
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014d30:	bf00      	nop
 8014d32:	3708      	adds	r7, #8
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}
 8014d38:	20004a44 	.word	0x20004a44

08014d3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d42:	2300      	movs	r3, #0
 8014d44:	607b      	str	r3, [r7, #4]
 8014d46:	e096      	b.n	8014e76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014d48:	494f      	ldr	r1, [pc, #316]	; (8014e88 <etharp_tmr+0x14c>)
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	005b      	lsls	r3, r3, #1
 8014d50:	4413      	add	r3, r2
 8014d52:	00db      	lsls	r3, r3, #3
 8014d54:	440b      	add	r3, r1
 8014d56:	3314      	adds	r3, #20
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014d5c:	78fb      	ldrb	r3, [r7, #3]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f000 8086 	beq.w	8014e70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014d64:	4948      	ldr	r1, [pc, #288]	; (8014e88 <etharp_tmr+0x14c>)
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	4613      	mov	r3, r2
 8014d6a:	005b      	lsls	r3, r3, #1
 8014d6c:	4413      	add	r3, r2
 8014d6e:	00db      	lsls	r3, r3, #3
 8014d70:	440b      	add	r3, r1
 8014d72:	3312      	adds	r3, #18
 8014d74:	881b      	ldrh	r3, [r3, #0]
 8014d76:	3301      	adds	r3, #1
 8014d78:	b298      	uxth	r0, r3
 8014d7a:	4943      	ldr	r1, [pc, #268]	; (8014e88 <etharp_tmr+0x14c>)
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	005b      	lsls	r3, r3, #1
 8014d82:	4413      	add	r3, r2
 8014d84:	00db      	lsls	r3, r3, #3
 8014d86:	440b      	add	r3, r1
 8014d88:	3312      	adds	r3, #18
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014d8e:	493e      	ldr	r1, [pc, #248]	; (8014e88 <etharp_tmr+0x14c>)
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	4613      	mov	r3, r2
 8014d94:	005b      	lsls	r3, r3, #1
 8014d96:	4413      	add	r3, r2
 8014d98:	00db      	lsls	r3, r3, #3
 8014d9a:	440b      	add	r3, r1
 8014d9c:	3312      	adds	r3, #18
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014da4:	d215      	bcs.n	8014dd2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014da6:	4938      	ldr	r1, [pc, #224]	; (8014e88 <etharp_tmr+0x14c>)
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	4613      	mov	r3, r2
 8014dac:	005b      	lsls	r3, r3, #1
 8014dae:	4413      	add	r3, r2
 8014db0:	00db      	lsls	r3, r3, #3
 8014db2:	440b      	add	r3, r1
 8014db4:	3314      	adds	r3, #20
 8014db6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014db8:	2b01      	cmp	r3, #1
 8014dba:	d10e      	bne.n	8014dda <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014dbc:	4932      	ldr	r1, [pc, #200]	; (8014e88 <etharp_tmr+0x14c>)
 8014dbe:	687a      	ldr	r2, [r7, #4]
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	4413      	add	r3, r2
 8014dc6:	00db      	lsls	r3, r3, #3
 8014dc8:	440b      	add	r3, r1
 8014dca:	3312      	adds	r3, #18
 8014dcc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	d903      	bls.n	8014dda <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ff ff80 	bl	8014cd8 <etharp_free_entry>
 8014dd8:	e04a      	b.n	8014e70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014dda:	492b      	ldr	r1, [pc, #172]	; (8014e88 <etharp_tmr+0x14c>)
 8014ddc:	687a      	ldr	r2, [r7, #4]
 8014dde:	4613      	mov	r3, r2
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	4413      	add	r3, r2
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	440b      	add	r3, r1
 8014de8:	3314      	adds	r3, #20
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	2b03      	cmp	r3, #3
 8014dee:	d10a      	bne.n	8014e06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014df0:	4925      	ldr	r1, [pc, #148]	; (8014e88 <etharp_tmr+0x14c>)
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	4613      	mov	r3, r2
 8014df6:	005b      	lsls	r3, r3, #1
 8014df8:	4413      	add	r3, r2
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	440b      	add	r3, r1
 8014dfe:	3314      	adds	r3, #20
 8014e00:	2204      	movs	r2, #4
 8014e02:	701a      	strb	r2, [r3, #0]
 8014e04:	e034      	b.n	8014e70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e06:	4920      	ldr	r1, [pc, #128]	; (8014e88 <etharp_tmr+0x14c>)
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	4613      	mov	r3, r2
 8014e0c:	005b      	lsls	r3, r3, #1
 8014e0e:	4413      	add	r3, r2
 8014e10:	00db      	lsls	r3, r3, #3
 8014e12:	440b      	add	r3, r1
 8014e14:	3314      	adds	r3, #20
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	2b04      	cmp	r3, #4
 8014e1a:	d10a      	bne.n	8014e32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014e1c:	491a      	ldr	r1, [pc, #104]	; (8014e88 <etharp_tmr+0x14c>)
 8014e1e:	687a      	ldr	r2, [r7, #4]
 8014e20:	4613      	mov	r3, r2
 8014e22:	005b      	lsls	r3, r3, #1
 8014e24:	4413      	add	r3, r2
 8014e26:	00db      	lsls	r3, r3, #3
 8014e28:	440b      	add	r3, r1
 8014e2a:	3314      	adds	r3, #20
 8014e2c:	2202      	movs	r2, #2
 8014e2e:	701a      	strb	r2, [r3, #0]
 8014e30:	e01e      	b.n	8014e70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e32:	4915      	ldr	r1, [pc, #84]	; (8014e88 <etharp_tmr+0x14c>)
 8014e34:	687a      	ldr	r2, [r7, #4]
 8014e36:	4613      	mov	r3, r2
 8014e38:	005b      	lsls	r3, r3, #1
 8014e3a:	4413      	add	r3, r2
 8014e3c:	00db      	lsls	r3, r3, #3
 8014e3e:	440b      	add	r3, r1
 8014e40:	3314      	adds	r3, #20
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d113      	bne.n	8014e70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014e48:	490f      	ldr	r1, [pc, #60]	; (8014e88 <etharp_tmr+0x14c>)
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	4413      	add	r3, r2
 8014e52:	00db      	lsls	r3, r3, #3
 8014e54:	440b      	add	r3, r1
 8014e56:	3308      	adds	r3, #8
 8014e58:	6818      	ldr	r0, [r3, #0]
 8014e5a:	687a      	ldr	r2, [r7, #4]
 8014e5c:	4613      	mov	r3, r2
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	4413      	add	r3, r2
 8014e62:	00db      	lsls	r3, r3, #3
 8014e64:	4a08      	ldr	r2, [pc, #32]	; (8014e88 <etharp_tmr+0x14c>)
 8014e66:	4413      	add	r3, r2
 8014e68:	3304      	adds	r3, #4
 8014e6a:	4619      	mov	r1, r3
 8014e6c:	f000 fe6e 	bl	8015b4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	3301      	adds	r3, #1
 8014e74:	607b      	str	r3, [r7, #4]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b09      	cmp	r3, #9
 8014e7a:	f77f af65 	ble.w	8014d48 <etharp_tmr+0xc>
      }
    }
  }
}
 8014e7e:	bf00      	nop
 8014e80:	bf00      	nop
 8014e82:	3708      	adds	r7, #8
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	20004a44 	.word	0x20004a44

08014e8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b08a      	sub	sp, #40	; 0x28
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	460b      	mov	r3, r1
 8014e96:	607a      	str	r2, [r7, #4]
 8014e98:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014e9a:	230a      	movs	r3, #10
 8014e9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014e9e:	230a      	movs	r3, #10
 8014ea0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014ea2:	230a      	movs	r3, #10
 8014ea4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014eaa:	230a      	movs	r3, #10
 8014eac:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	83bb      	strh	r3, [r7, #28]
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	837b      	strh	r3, [r7, #26]
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014eba:	2300      	movs	r3, #0
 8014ebc:	843b      	strh	r3, [r7, #32]
 8014ebe:	e0ae      	b.n	801501e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014ec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ec4:	49a6      	ldr	r1, [pc, #664]	; (8015160 <etharp_find_entry+0x2d4>)
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4413      	add	r3, r2
 8014ecc:	00db      	lsls	r3, r3, #3
 8014ece:	440b      	add	r3, r1
 8014ed0:	3314      	adds	r3, #20
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014ed6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014eda:	2b0a      	cmp	r3, #10
 8014edc:	d105      	bne.n	8014eea <etharp_find_entry+0x5e>
 8014ede:	7dfb      	ldrb	r3, [r7, #23]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d102      	bne.n	8014eea <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014ee4:	8c3b      	ldrh	r3, [r7, #32]
 8014ee6:	847b      	strh	r3, [r7, #34]	; 0x22
 8014ee8:	e095      	b.n	8015016 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014eea:	7dfb      	ldrb	r3, [r7, #23]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f000 8092 	beq.w	8015016 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014ef2:	7dfb      	ldrb	r3, [r7, #23]
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d009      	beq.n	8014f0c <etharp_find_entry+0x80>
 8014ef8:	7dfb      	ldrb	r3, [r7, #23]
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d806      	bhi.n	8014f0c <etharp_find_entry+0x80>
 8014efe:	4b99      	ldr	r3, [pc, #612]	; (8015164 <etharp_find_entry+0x2d8>)
 8014f00:	f240 1223 	movw	r2, #291	; 0x123
 8014f04:	4998      	ldr	r1, [pc, #608]	; (8015168 <etharp_find_entry+0x2dc>)
 8014f06:	4899      	ldr	r0, [pc, #612]	; (801516c <etharp_find_entry+0x2e0>)
 8014f08:	f002 fd60 	bl	80179cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d020      	beq.n	8014f54 <etharp_find_entry+0xc8>
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	6819      	ldr	r1, [r3, #0]
 8014f16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f1a:	4891      	ldr	r0, [pc, #580]	; (8015160 <etharp_find_entry+0x2d4>)
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	4413      	add	r3, r2
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	4403      	add	r3, r0
 8014f26:	3304      	adds	r3, #4
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	4299      	cmp	r1, r3
 8014f2c:	d112      	bne.n	8014f54 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d00c      	beq.n	8014f4e <etharp_find_entry+0xc2>
 8014f34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f38:	4989      	ldr	r1, [pc, #548]	; (8015160 <etharp_find_entry+0x2d4>)
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	005b      	lsls	r3, r3, #1
 8014f3e:	4413      	add	r3, r2
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	440b      	add	r3, r1
 8014f44:	3308      	adds	r3, #8
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	687a      	ldr	r2, [r7, #4]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d102      	bne.n	8014f54 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014f4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014f52:	e100      	b.n	8015156 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014f54:	7dfb      	ldrb	r3, [r7, #23]
 8014f56:	2b01      	cmp	r3, #1
 8014f58:	d140      	bne.n	8014fdc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014f5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f5e:	4980      	ldr	r1, [pc, #512]	; (8015160 <etharp_find_entry+0x2d4>)
 8014f60:	4613      	mov	r3, r2
 8014f62:	005b      	lsls	r3, r3, #1
 8014f64:	4413      	add	r3, r2
 8014f66:	00db      	lsls	r3, r3, #3
 8014f68:	440b      	add	r3, r1
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d01a      	beq.n	8014fa6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014f70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f74:	497a      	ldr	r1, [pc, #488]	; (8015160 <etharp_find_entry+0x2d4>)
 8014f76:	4613      	mov	r3, r2
 8014f78:	005b      	lsls	r3, r3, #1
 8014f7a:	4413      	add	r3, r2
 8014f7c:	00db      	lsls	r3, r3, #3
 8014f7e:	440b      	add	r3, r1
 8014f80:	3312      	adds	r3, #18
 8014f82:	881b      	ldrh	r3, [r3, #0]
 8014f84:	8bba      	ldrh	r2, [r7, #28]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d845      	bhi.n	8015016 <etharp_find_entry+0x18a>
            old_queue = i;
 8014f8a:	8c3b      	ldrh	r3, [r7, #32]
 8014f8c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014f8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014f92:	4973      	ldr	r1, [pc, #460]	; (8015160 <etharp_find_entry+0x2d4>)
 8014f94:	4613      	mov	r3, r2
 8014f96:	005b      	lsls	r3, r3, #1
 8014f98:	4413      	add	r3, r2
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	440b      	add	r3, r1
 8014f9e:	3312      	adds	r3, #18
 8014fa0:	881b      	ldrh	r3, [r3, #0]
 8014fa2:	83bb      	strh	r3, [r7, #28]
 8014fa4:	e037      	b.n	8015016 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014faa:	496d      	ldr	r1, [pc, #436]	; (8015160 <etharp_find_entry+0x2d4>)
 8014fac:	4613      	mov	r3, r2
 8014fae:	005b      	lsls	r3, r3, #1
 8014fb0:	4413      	add	r3, r2
 8014fb2:	00db      	lsls	r3, r3, #3
 8014fb4:	440b      	add	r3, r1
 8014fb6:	3312      	adds	r3, #18
 8014fb8:	881b      	ldrh	r3, [r3, #0]
 8014fba:	8b7a      	ldrh	r2, [r7, #26]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d82a      	bhi.n	8015016 <etharp_find_entry+0x18a>
            old_pending = i;
 8014fc0:	8c3b      	ldrh	r3, [r7, #32]
 8014fc2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014fc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fc8:	4965      	ldr	r1, [pc, #404]	; (8015160 <etharp_find_entry+0x2d4>)
 8014fca:	4613      	mov	r3, r2
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	4413      	add	r3, r2
 8014fd0:	00db      	lsls	r3, r3, #3
 8014fd2:	440b      	add	r3, r1
 8014fd4:	3312      	adds	r3, #18
 8014fd6:	881b      	ldrh	r3, [r3, #0]
 8014fd8:	837b      	strh	r3, [r7, #26]
 8014fda:	e01c      	b.n	8015016 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014fdc:	7dfb      	ldrb	r3, [r7, #23]
 8014fde:	2b01      	cmp	r3, #1
 8014fe0:	d919      	bls.n	8015016 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014fe6:	495e      	ldr	r1, [pc, #376]	; (8015160 <etharp_find_entry+0x2d4>)
 8014fe8:	4613      	mov	r3, r2
 8014fea:	005b      	lsls	r3, r3, #1
 8014fec:	4413      	add	r3, r2
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	440b      	add	r3, r1
 8014ff2:	3312      	adds	r3, #18
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	8b3a      	ldrh	r2, [r7, #24]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d80c      	bhi.n	8015016 <etharp_find_entry+0x18a>
            old_stable = i;
 8014ffc:	8c3b      	ldrh	r3, [r7, #32]
 8014ffe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015004:	4956      	ldr	r1, [pc, #344]	; (8015160 <etharp_find_entry+0x2d4>)
 8015006:	4613      	mov	r3, r2
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	4413      	add	r3, r2
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	440b      	add	r3, r1
 8015010:	3312      	adds	r3, #18
 8015012:	881b      	ldrh	r3, [r3, #0]
 8015014:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015016:	8c3b      	ldrh	r3, [r7, #32]
 8015018:	3301      	adds	r3, #1
 801501a:	b29b      	uxth	r3, r3
 801501c:	843b      	strh	r3, [r7, #32]
 801501e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015022:	2b09      	cmp	r3, #9
 8015024:	f77f af4c 	ble.w	8014ec0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015028:	7afb      	ldrb	r3, [r7, #11]
 801502a:	f003 0302 	and.w	r3, r3, #2
 801502e:	2b00      	cmp	r3, #0
 8015030:	d108      	bne.n	8015044 <etharp_find_entry+0x1b8>
 8015032:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015036:	2b0a      	cmp	r3, #10
 8015038:	d107      	bne.n	801504a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801503a:	7afb      	ldrb	r3, [r7, #11]
 801503c:	f003 0301 	and.w	r3, r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	d102      	bne.n	801504a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015044:	f04f 33ff 	mov.w	r3, #4294967295
 8015048:	e085      	b.n	8015156 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801504a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801504e:	2b09      	cmp	r3, #9
 8015050:	dc02      	bgt.n	8015058 <etharp_find_entry+0x1cc>
    i = empty;
 8015052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015054:	843b      	strh	r3, [r7, #32]
 8015056:	e039      	b.n	80150cc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015058:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801505c:	2b09      	cmp	r3, #9
 801505e:	dc14      	bgt.n	801508a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015060:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015062:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015064:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015068:	493d      	ldr	r1, [pc, #244]	; (8015160 <etharp_find_entry+0x2d4>)
 801506a:	4613      	mov	r3, r2
 801506c:	005b      	lsls	r3, r3, #1
 801506e:	4413      	add	r3, r2
 8015070:	00db      	lsls	r3, r3, #3
 8015072:	440b      	add	r3, r1
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d018      	beq.n	80150ac <etharp_find_entry+0x220>
 801507a:	4b3a      	ldr	r3, [pc, #232]	; (8015164 <etharp_find_entry+0x2d8>)
 801507c:	f240 126d 	movw	r2, #365	; 0x16d
 8015080:	493b      	ldr	r1, [pc, #236]	; (8015170 <etharp_find_entry+0x2e4>)
 8015082:	483a      	ldr	r0, [pc, #232]	; (801516c <etharp_find_entry+0x2e0>)
 8015084:	f002 fca2 	bl	80179cc <iprintf>
 8015088:	e010      	b.n	80150ac <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801508a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801508e:	2b09      	cmp	r3, #9
 8015090:	dc02      	bgt.n	8015098 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015092:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015094:	843b      	strh	r3, [r7, #32]
 8015096:	e009      	b.n	80150ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015098:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801509c:	2b09      	cmp	r3, #9
 801509e:	dc02      	bgt.n	80150a6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80150a0:	8bfb      	ldrh	r3, [r7, #30]
 80150a2:	843b      	strh	r3, [r7, #32]
 80150a4:	e002      	b.n	80150ac <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80150a6:	f04f 33ff 	mov.w	r3, #4294967295
 80150aa:	e054      	b.n	8015156 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80150ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150b0:	2b09      	cmp	r3, #9
 80150b2:	dd06      	ble.n	80150c2 <etharp_find_entry+0x236>
 80150b4:	4b2b      	ldr	r3, [pc, #172]	; (8015164 <etharp_find_entry+0x2d8>)
 80150b6:	f240 127f 	movw	r2, #383	; 0x17f
 80150ba:	492e      	ldr	r1, [pc, #184]	; (8015174 <etharp_find_entry+0x2e8>)
 80150bc:	482b      	ldr	r0, [pc, #172]	; (801516c <etharp_find_entry+0x2e0>)
 80150be:	f002 fc85 	bl	80179cc <iprintf>
    etharp_free_entry(i);
 80150c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150c6:	4618      	mov	r0, r3
 80150c8:	f7ff fe06 	bl	8014cd8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80150cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80150d0:	2b09      	cmp	r3, #9
 80150d2:	dd06      	ble.n	80150e2 <etharp_find_entry+0x256>
 80150d4:	4b23      	ldr	r3, [pc, #140]	; (8015164 <etharp_find_entry+0x2d8>)
 80150d6:	f240 1283 	movw	r2, #387	; 0x183
 80150da:	4926      	ldr	r1, [pc, #152]	; (8015174 <etharp_find_entry+0x2e8>)
 80150dc:	4823      	ldr	r0, [pc, #140]	; (801516c <etharp_find_entry+0x2e0>)
 80150de:	f002 fc75 	bl	80179cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80150e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80150e6:	491e      	ldr	r1, [pc, #120]	; (8015160 <etharp_find_entry+0x2d4>)
 80150e8:	4613      	mov	r3, r2
 80150ea:	005b      	lsls	r3, r3, #1
 80150ec:	4413      	add	r3, r2
 80150ee:	00db      	lsls	r3, r3, #3
 80150f0:	440b      	add	r3, r1
 80150f2:	3314      	adds	r3, #20
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d006      	beq.n	8015108 <etharp_find_entry+0x27c>
 80150fa:	4b1a      	ldr	r3, [pc, #104]	; (8015164 <etharp_find_entry+0x2d8>)
 80150fc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015100:	491d      	ldr	r1, [pc, #116]	; (8015178 <etharp_find_entry+0x2ec>)
 8015102:	481a      	ldr	r0, [pc, #104]	; (801516c <etharp_find_entry+0x2e0>)
 8015104:	f002 fc62 	bl	80179cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d00b      	beq.n	8015126 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801510e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	6819      	ldr	r1, [r3, #0]
 8015116:	4812      	ldr	r0, [pc, #72]	; (8015160 <etharp_find_entry+0x2d4>)
 8015118:	4613      	mov	r3, r2
 801511a:	005b      	lsls	r3, r3, #1
 801511c:	4413      	add	r3, r2
 801511e:	00db      	lsls	r3, r3, #3
 8015120:	4403      	add	r3, r0
 8015122:	3304      	adds	r3, #4
 8015124:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801512a:	490d      	ldr	r1, [pc, #52]	; (8015160 <etharp_find_entry+0x2d4>)
 801512c:	4613      	mov	r3, r2
 801512e:	005b      	lsls	r3, r3, #1
 8015130:	4413      	add	r3, r2
 8015132:	00db      	lsls	r3, r3, #3
 8015134:	440b      	add	r3, r1
 8015136:	3312      	adds	r3, #18
 8015138:	2200      	movs	r2, #0
 801513a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801513c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015140:	4907      	ldr	r1, [pc, #28]	; (8015160 <etharp_find_entry+0x2d4>)
 8015142:	4613      	mov	r3, r2
 8015144:	005b      	lsls	r3, r3, #1
 8015146:	4413      	add	r3, r2
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	440b      	add	r3, r1
 801514c:	3308      	adds	r3, #8
 801514e:	687a      	ldr	r2, [r7, #4]
 8015150:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015152:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015156:	4618      	mov	r0, r3
 8015158:	3728      	adds	r7, #40	; 0x28
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	20004a44 	.word	0x20004a44
 8015164:	0801bc08 	.word	0x0801bc08
 8015168:	0801bc40 	.word	0x0801bc40
 801516c:	0801bc80 	.word	0x0801bc80
 8015170:	0801bca8 	.word	0x0801bca8
 8015174:	0801bcc0 	.word	0x0801bcc0
 8015178:	0801bcd4 	.word	0x0801bcd4

0801517c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b088      	sub	sp, #32
 8015180:	af02      	add	r7, sp, #8
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
 8015188:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015190:	2b06      	cmp	r3, #6
 8015192:	d006      	beq.n	80151a2 <etharp_update_arp_entry+0x26>
 8015194:	4b48      	ldr	r3, [pc, #288]	; (80152b8 <etharp_update_arp_entry+0x13c>)
 8015196:	f240 12a9 	movw	r2, #425	; 0x1a9
 801519a:	4948      	ldr	r1, [pc, #288]	; (80152bc <etharp_update_arp_entry+0x140>)
 801519c:	4848      	ldr	r0, [pc, #288]	; (80152c0 <etharp_update_arp_entry+0x144>)
 801519e:	f002 fc15 	bl	80179cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d012      	beq.n	80151ce <etharp_update_arp_entry+0x52>
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00e      	beq.n	80151ce <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80151b0:	68bb      	ldr	r3, [r7, #8]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	68f9      	ldr	r1, [r7, #12]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f001 f8fe 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 80151bc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d105      	bne.n	80151ce <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80151ca:	2be0      	cmp	r3, #224	; 0xe0
 80151cc:	d102      	bne.n	80151d4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80151ce:	f06f 030f 	mvn.w	r3, #15
 80151d2:	e06c      	b.n	80152ae <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80151d4:	78fb      	ldrb	r3, [r7, #3]
 80151d6:	68fa      	ldr	r2, [r7, #12]
 80151d8:	4619      	mov	r1, r3
 80151da:	68b8      	ldr	r0, [r7, #8]
 80151dc:	f7ff fe56 	bl	8014e8c <etharp_find_entry>
 80151e0:	4603      	mov	r3, r0
 80151e2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80151e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	da02      	bge.n	80151f2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80151ec:	8afb      	ldrh	r3, [r7, #22]
 80151ee:	b25b      	sxtb	r3, r3
 80151f0:	e05d      	b.n	80152ae <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80151f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80151f6:	4933      	ldr	r1, [pc, #204]	; (80152c4 <etharp_update_arp_entry+0x148>)
 80151f8:	4613      	mov	r3, r2
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	4413      	add	r3, r2
 80151fe:	00db      	lsls	r3, r3, #3
 8015200:	440b      	add	r3, r1
 8015202:	3314      	adds	r3, #20
 8015204:	2202      	movs	r2, #2
 8015206:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801520c:	492d      	ldr	r1, [pc, #180]	; (80152c4 <etharp_update_arp_entry+0x148>)
 801520e:	4613      	mov	r3, r2
 8015210:	005b      	lsls	r3, r3, #1
 8015212:	4413      	add	r3, r2
 8015214:	00db      	lsls	r3, r3, #3
 8015216:	440b      	add	r3, r1
 8015218:	3308      	adds	r3, #8
 801521a:	68fa      	ldr	r2, [r7, #12]
 801521c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801521e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015222:	4613      	mov	r3, r2
 8015224:	005b      	lsls	r3, r3, #1
 8015226:	4413      	add	r3, r2
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	3308      	adds	r3, #8
 801522c:	4a25      	ldr	r2, [pc, #148]	; (80152c4 <etharp_update_arp_entry+0x148>)
 801522e:	4413      	add	r3, r2
 8015230:	3304      	adds	r3, #4
 8015232:	2206      	movs	r2, #6
 8015234:	6879      	ldr	r1, [r7, #4]
 8015236:	4618      	mov	r0, r3
 8015238:	f002 fbb2 	bl	80179a0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801523c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015240:	4920      	ldr	r1, [pc, #128]	; (80152c4 <etharp_update_arp_entry+0x148>)
 8015242:	4613      	mov	r3, r2
 8015244:	005b      	lsls	r3, r3, #1
 8015246:	4413      	add	r3, r2
 8015248:	00db      	lsls	r3, r3, #3
 801524a:	440b      	add	r3, r1
 801524c:	3312      	adds	r3, #18
 801524e:	2200      	movs	r2, #0
 8015250:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015252:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015256:	491b      	ldr	r1, [pc, #108]	; (80152c4 <etharp_update_arp_entry+0x148>)
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	440b      	add	r3, r1
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d021      	beq.n	80152ac <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015268:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801526c:	4915      	ldr	r1, [pc, #84]	; (80152c4 <etharp_update_arp_entry+0x148>)
 801526e:	4613      	mov	r3, r2
 8015270:	005b      	lsls	r3, r3, #1
 8015272:	4413      	add	r3, r2
 8015274:	00db      	lsls	r3, r3, #3
 8015276:	440b      	add	r3, r1
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801527c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015280:	4910      	ldr	r1, [pc, #64]	; (80152c4 <etharp_update_arp_entry+0x148>)
 8015282:	4613      	mov	r3, r2
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	4413      	add	r3, r2
 8015288:	00db      	lsls	r3, r3, #3
 801528a:	440b      	add	r3, r1
 801528c:	2200      	movs	r2, #0
 801528e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801529a:	9300      	str	r3, [sp, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6939      	ldr	r1, [r7, #16]
 80152a0:	68f8      	ldr	r0, [r7, #12]
 80152a2:	f002 f94d 	bl	8017540 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80152a6:	6938      	ldr	r0, [r7, #16]
 80152a8:	f7f8 fd80 	bl	800ddac <pbuf_free>
  }
  return ERR_OK;
 80152ac:	2300      	movs	r3, #0
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	0801bc08 	.word	0x0801bc08
 80152bc:	0801bd00 	.word	0x0801bd00
 80152c0:	0801bc80 	.word	0x0801bc80
 80152c4:	20004a44 	.word	0x20004a44

080152c8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b084      	sub	sp, #16
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152d0:	2300      	movs	r3, #0
 80152d2:	60fb      	str	r3, [r7, #12]
 80152d4:	e01e      	b.n	8015314 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80152d6:	4913      	ldr	r1, [pc, #76]	; (8015324 <etharp_cleanup_netif+0x5c>)
 80152d8:	68fa      	ldr	r2, [r7, #12]
 80152da:	4613      	mov	r3, r2
 80152dc:	005b      	lsls	r3, r3, #1
 80152de:	4413      	add	r3, r2
 80152e0:	00db      	lsls	r3, r3, #3
 80152e2:	440b      	add	r3, r1
 80152e4:	3314      	adds	r3, #20
 80152e6:	781b      	ldrb	r3, [r3, #0]
 80152e8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80152ea:	7afb      	ldrb	r3, [r7, #11]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d00e      	beq.n	801530e <etharp_cleanup_netif+0x46>
 80152f0:	490c      	ldr	r1, [pc, #48]	; (8015324 <etharp_cleanup_netif+0x5c>)
 80152f2:	68fa      	ldr	r2, [r7, #12]
 80152f4:	4613      	mov	r3, r2
 80152f6:	005b      	lsls	r3, r3, #1
 80152f8:	4413      	add	r3, r2
 80152fa:	00db      	lsls	r3, r3, #3
 80152fc:	440b      	add	r3, r1
 80152fe:	3308      	adds	r3, #8
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	429a      	cmp	r2, r3
 8015306:	d102      	bne.n	801530e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015308:	68f8      	ldr	r0, [r7, #12]
 801530a:	f7ff fce5 	bl	8014cd8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	3301      	adds	r3, #1
 8015312:	60fb      	str	r3, [r7, #12]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b09      	cmp	r3, #9
 8015318:	dddd      	ble.n	80152d6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801531a:	bf00      	nop
 801531c:	bf00      	nop
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	20004a44 	.word	0x20004a44

08015328 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015328:	b5b0      	push	{r4, r5, r7, lr}
 801532a:	b08a      	sub	sp, #40	; 0x28
 801532c:	af04      	add	r7, sp, #16
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d107      	bne.n	8015348 <etharp_input+0x20>
 8015338:	4b3d      	ldr	r3, [pc, #244]	; (8015430 <etharp_input+0x108>)
 801533a:	f240 228a 	movw	r2, #650	; 0x28a
 801533e:	493d      	ldr	r1, [pc, #244]	; (8015434 <etharp_input+0x10c>)
 8015340:	483d      	ldr	r0, [pc, #244]	; (8015438 <etharp_input+0x110>)
 8015342:	f002 fb43 	bl	80179cc <iprintf>
 8015346:	e06f      	b.n	8015428 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801534e:	693b      	ldr	r3, [r7, #16]
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	b29b      	uxth	r3, r3
 8015354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015358:	d10c      	bne.n	8015374 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801535e:	2b06      	cmp	r3, #6
 8015360:	d108      	bne.n	8015374 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015366:	2b04      	cmp	r3, #4
 8015368:	d104      	bne.n	8015374 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	885b      	ldrh	r3, [r3, #2]
 801536e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015370:	2b08      	cmp	r3, #8
 8015372:	d003      	beq.n	801537c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7f8 fd19 	bl	800ddac <pbuf_free>
    return;
 801537a:	e055      	b.n	8015428 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	330e      	adds	r3, #14
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	3318      	adds	r3, #24
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	3304      	adds	r3, #4
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d102      	bne.n	801539c <etharp_input+0x74>
    for_us = 0;
 8015396:	2300      	movs	r3, #0
 8015398:	75fb      	strb	r3, [r7, #23]
 801539a:	e009      	b.n	80153b0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	683b      	ldr	r3, [r7, #0]
 80153a0:	3304      	adds	r3, #4
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	bf0c      	ite	eq
 80153a8:	2301      	moveq	r3, #1
 80153aa:	2300      	movne	r3, #0
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	f103 0208 	add.w	r2, r3, #8
 80153b6:	7dfb      	ldrb	r3, [r7, #23]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d001      	beq.n	80153c0 <etharp_input+0x98>
 80153bc:	2301      	movs	r3, #1
 80153be:	e000      	b.n	80153c2 <etharp_input+0x9a>
 80153c0:	2302      	movs	r3, #2
 80153c2:	f107 010c 	add.w	r1, r7, #12
 80153c6:	6838      	ldr	r0, [r7, #0]
 80153c8:	f7ff fed8 	bl	801517c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	88db      	ldrh	r3, [r3, #6]
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80153d6:	d003      	beq.n	80153e0 <etharp_input+0xb8>
 80153d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80153dc:	d01e      	beq.n	801541c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80153de:	e020      	b.n	8015422 <etharp_input+0xfa>
      if (for_us) {
 80153e0:	7dfb      	ldrb	r3, [r7, #23]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d01c      	beq.n	8015420 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80153f2:	683b      	ldr	r3, [r7, #0]
 80153f4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80153fc:	693a      	ldr	r2, [r7, #16]
 80153fe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015400:	2102      	movs	r1, #2
 8015402:	9103      	str	r1, [sp, #12]
 8015404:	f107 010c 	add.w	r1, r7, #12
 8015408:	9102      	str	r1, [sp, #8]
 801540a:	9201      	str	r2, [sp, #4]
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	462b      	mov	r3, r5
 8015410:	4622      	mov	r2, r4
 8015412:	4601      	mov	r1, r0
 8015414:	6838      	ldr	r0, [r7, #0]
 8015416:	f000 faeb 	bl	80159f0 <etharp_raw>
      break;
 801541a:	e001      	b.n	8015420 <etharp_input+0xf8>
      break;
 801541c:	bf00      	nop
 801541e:	e000      	b.n	8015422 <etharp_input+0xfa>
      break;
 8015420:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015422:	6878      	ldr	r0, [r7, #4]
 8015424:	f7f8 fcc2 	bl	800ddac <pbuf_free>
}
 8015428:	3718      	adds	r7, #24
 801542a:	46bd      	mov	sp, r7
 801542c:	bdb0      	pop	{r4, r5, r7, pc}
 801542e:	bf00      	nop
 8015430:	0801bc08 	.word	0x0801bc08
 8015434:	0801bd58 	.word	0x0801bd58
 8015438:	0801bc80 	.word	0x0801bc80

0801543c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b086      	sub	sp, #24
 8015440:	af02      	add	r7, sp, #8
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	4613      	mov	r3, r2
 8015448:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801544a:	79fa      	ldrb	r2, [r7, #7]
 801544c:	4944      	ldr	r1, [pc, #272]	; (8015560 <etharp_output_to_arp_index+0x124>)
 801544e:	4613      	mov	r3, r2
 8015450:	005b      	lsls	r3, r3, #1
 8015452:	4413      	add	r3, r2
 8015454:	00db      	lsls	r3, r3, #3
 8015456:	440b      	add	r3, r1
 8015458:	3314      	adds	r3, #20
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	2b01      	cmp	r3, #1
 801545e:	d806      	bhi.n	801546e <etharp_output_to_arp_index+0x32>
 8015460:	4b40      	ldr	r3, [pc, #256]	; (8015564 <etharp_output_to_arp_index+0x128>)
 8015462:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015466:	4940      	ldr	r1, [pc, #256]	; (8015568 <etharp_output_to_arp_index+0x12c>)
 8015468:	4840      	ldr	r0, [pc, #256]	; (801556c <etharp_output_to_arp_index+0x130>)
 801546a:	f002 faaf 	bl	80179cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801546e:	79fa      	ldrb	r2, [r7, #7]
 8015470:	493b      	ldr	r1, [pc, #236]	; (8015560 <etharp_output_to_arp_index+0x124>)
 8015472:	4613      	mov	r3, r2
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	4413      	add	r3, r2
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	440b      	add	r3, r1
 801547c:	3314      	adds	r3, #20
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b02      	cmp	r3, #2
 8015482:	d153      	bne.n	801552c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015484:	79fa      	ldrb	r2, [r7, #7]
 8015486:	4936      	ldr	r1, [pc, #216]	; (8015560 <etharp_output_to_arp_index+0x124>)
 8015488:	4613      	mov	r3, r2
 801548a:	005b      	lsls	r3, r3, #1
 801548c:	4413      	add	r3, r2
 801548e:	00db      	lsls	r3, r3, #3
 8015490:	440b      	add	r3, r1
 8015492:	3312      	adds	r3, #18
 8015494:	881b      	ldrh	r3, [r3, #0]
 8015496:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801549a:	d919      	bls.n	80154d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801549c:	79fa      	ldrb	r2, [r7, #7]
 801549e:	4613      	mov	r3, r2
 80154a0:	005b      	lsls	r3, r3, #1
 80154a2:	4413      	add	r3, r2
 80154a4:	00db      	lsls	r3, r3, #3
 80154a6:	4a2e      	ldr	r2, [pc, #184]	; (8015560 <etharp_output_to_arp_index+0x124>)
 80154a8:	4413      	add	r3, r2
 80154aa:	3304      	adds	r3, #4
 80154ac:	4619      	mov	r1, r3
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f000 fb4c 	bl	8015b4c <etharp_request>
 80154b4:	4603      	mov	r3, r0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d138      	bne.n	801552c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80154ba:	79fa      	ldrb	r2, [r7, #7]
 80154bc:	4928      	ldr	r1, [pc, #160]	; (8015560 <etharp_output_to_arp_index+0x124>)
 80154be:	4613      	mov	r3, r2
 80154c0:	005b      	lsls	r3, r3, #1
 80154c2:	4413      	add	r3, r2
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	440b      	add	r3, r1
 80154c8:	3314      	adds	r3, #20
 80154ca:	2203      	movs	r2, #3
 80154cc:	701a      	strb	r2, [r3, #0]
 80154ce:	e02d      	b.n	801552c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80154d0:	79fa      	ldrb	r2, [r7, #7]
 80154d2:	4923      	ldr	r1, [pc, #140]	; (8015560 <etharp_output_to_arp_index+0x124>)
 80154d4:	4613      	mov	r3, r2
 80154d6:	005b      	lsls	r3, r3, #1
 80154d8:	4413      	add	r3, r2
 80154da:	00db      	lsls	r3, r3, #3
 80154dc:	440b      	add	r3, r1
 80154de:	3312      	adds	r3, #18
 80154e0:	881b      	ldrh	r3, [r3, #0]
 80154e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80154e6:	d321      	bcc.n	801552c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80154e8:	79fa      	ldrb	r2, [r7, #7]
 80154ea:	4613      	mov	r3, r2
 80154ec:	005b      	lsls	r3, r3, #1
 80154ee:	4413      	add	r3, r2
 80154f0:	00db      	lsls	r3, r3, #3
 80154f2:	4a1b      	ldr	r2, [pc, #108]	; (8015560 <etharp_output_to_arp_index+0x124>)
 80154f4:	4413      	add	r3, r2
 80154f6:	1d19      	adds	r1, r3, #4
 80154f8:	79fa      	ldrb	r2, [r7, #7]
 80154fa:	4613      	mov	r3, r2
 80154fc:	005b      	lsls	r3, r3, #1
 80154fe:	4413      	add	r3, r2
 8015500:	00db      	lsls	r3, r3, #3
 8015502:	3308      	adds	r3, #8
 8015504:	4a16      	ldr	r2, [pc, #88]	; (8015560 <etharp_output_to_arp_index+0x124>)
 8015506:	4413      	add	r3, r2
 8015508:	3304      	adds	r3, #4
 801550a:	461a      	mov	r2, r3
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f000 fafb 	bl	8015b08 <etharp_request_dst>
 8015512:	4603      	mov	r3, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d109      	bne.n	801552c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015518:	79fa      	ldrb	r2, [r7, #7]
 801551a:	4911      	ldr	r1, [pc, #68]	; (8015560 <etharp_output_to_arp_index+0x124>)
 801551c:	4613      	mov	r3, r2
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	4413      	add	r3, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	440b      	add	r3, r1
 8015526:	3314      	adds	r3, #20
 8015528:	2203      	movs	r2, #3
 801552a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015532:	79fa      	ldrb	r2, [r7, #7]
 8015534:	4613      	mov	r3, r2
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	4413      	add	r3, r2
 801553a:	00db      	lsls	r3, r3, #3
 801553c:	3308      	adds	r3, #8
 801553e:	4a08      	ldr	r2, [pc, #32]	; (8015560 <etharp_output_to_arp_index+0x124>)
 8015540:	4413      	add	r3, r2
 8015542:	3304      	adds	r3, #4
 8015544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015548:	9200      	str	r2, [sp, #0]
 801554a:	460a      	mov	r2, r1
 801554c:	68b9      	ldr	r1, [r7, #8]
 801554e:	68f8      	ldr	r0, [r7, #12]
 8015550:	f001 fff6 	bl	8017540 <ethernet_output>
 8015554:	4603      	mov	r3, r0
}
 8015556:	4618      	mov	r0, r3
 8015558:	3710      	adds	r7, #16
 801555a:	46bd      	mov	sp, r7
 801555c:	bd80      	pop	{r7, pc}
 801555e:	bf00      	nop
 8015560:	20004a44 	.word	0x20004a44
 8015564:	0801bc08 	.word	0x0801bc08
 8015568:	0801bd78 	.word	0x0801bd78
 801556c:	0801bc80 	.word	0x0801bc80

08015570 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b08a      	sub	sp, #40	; 0x28
 8015574:	af02      	add	r7, sp, #8
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d106      	bne.n	8015594 <etharp_output+0x24>
 8015586:	4b73      	ldr	r3, [pc, #460]	; (8015754 <etharp_output+0x1e4>)
 8015588:	f240 321e 	movw	r2, #798	; 0x31e
 801558c:	4972      	ldr	r1, [pc, #456]	; (8015758 <etharp_output+0x1e8>)
 801558e:	4873      	ldr	r0, [pc, #460]	; (801575c <etharp_output+0x1ec>)
 8015590:	f002 fa1c 	bl	80179cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d106      	bne.n	80155a8 <etharp_output+0x38>
 801559a:	4b6e      	ldr	r3, [pc, #440]	; (8015754 <etharp_output+0x1e4>)
 801559c:	f240 321f 	movw	r2, #799	; 0x31f
 80155a0:	496f      	ldr	r1, [pc, #444]	; (8015760 <etharp_output+0x1f0>)
 80155a2:	486e      	ldr	r0, [pc, #440]	; (801575c <etharp_output+0x1ec>)
 80155a4:	f002 fa12 	bl	80179cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d106      	bne.n	80155bc <etharp_output+0x4c>
 80155ae:	4b69      	ldr	r3, [pc, #420]	; (8015754 <etharp_output+0x1e4>)
 80155b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80155b4:	496b      	ldr	r1, [pc, #428]	; (8015764 <etharp_output+0x1f4>)
 80155b6:	4869      	ldr	r0, [pc, #420]	; (801575c <etharp_output+0x1ec>)
 80155b8:	f002 fa08 	bl	80179cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	68f9      	ldr	r1, [r7, #12]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f000 fef8 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 80155c8:	4603      	mov	r3, r0
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d002      	beq.n	80155d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80155ce:	4b66      	ldr	r3, [pc, #408]	; (8015768 <etharp_output+0x1f8>)
 80155d0:	61fb      	str	r3, [r7, #28]
 80155d2:	e0af      	b.n	8015734 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155dc:	2be0      	cmp	r3, #224	; 0xe0
 80155de:	d118      	bne.n	8015612 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80155e0:	2301      	movs	r3, #1
 80155e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80155e4:	2300      	movs	r3, #0
 80155e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80155e8:	235e      	movs	r3, #94	; 0x5e
 80155ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	3301      	adds	r3, #1
 80155f0:	781b      	ldrb	r3, [r3, #0]
 80155f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	3302      	adds	r3, #2
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	3303      	adds	r3, #3
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801560a:	f107 0310 	add.w	r3, r7, #16
 801560e:	61fb      	str	r3, [r7, #28]
 8015610:	e090      	b.n	8015734 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681a      	ldr	r2, [r3, #0]
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	3304      	adds	r3, #4
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	405a      	eors	r2, r3
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	3308      	adds	r3, #8
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	4013      	ands	r3, r2
 8015626:	2b00      	cmp	r3, #0
 8015628:	d012      	beq.n	8015650 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015630:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015634:	4293      	cmp	r3, r2
 8015636:	d00b      	beq.n	8015650 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	330c      	adds	r3, #12
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d003      	beq.n	801564a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	330c      	adds	r3, #12
 8015646:	61bb      	str	r3, [r7, #24]
 8015648:	e002      	b.n	8015650 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801564a:	f06f 0303 	mvn.w	r3, #3
 801564e:	e07d      	b.n	801574c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015650:	4b46      	ldr	r3, [pc, #280]	; (801576c <etharp_output+0x1fc>)
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	4619      	mov	r1, r3
 8015656:	4a46      	ldr	r2, [pc, #280]	; (8015770 <etharp_output+0x200>)
 8015658:	460b      	mov	r3, r1
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	440b      	add	r3, r1
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	4413      	add	r3, r2
 8015662:	3314      	adds	r3, #20
 8015664:	781b      	ldrb	r3, [r3, #0]
 8015666:	2b01      	cmp	r3, #1
 8015668:	d925      	bls.n	80156b6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801566a:	4b40      	ldr	r3, [pc, #256]	; (801576c <etharp_output+0x1fc>)
 801566c:	781b      	ldrb	r3, [r3, #0]
 801566e:	4619      	mov	r1, r3
 8015670:	4a3f      	ldr	r2, [pc, #252]	; (8015770 <etharp_output+0x200>)
 8015672:	460b      	mov	r3, r1
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	440b      	add	r3, r1
 8015678:	00db      	lsls	r3, r3, #3
 801567a:	4413      	add	r3, r2
 801567c:	3308      	adds	r3, #8
 801567e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015680:	68fa      	ldr	r2, [r7, #12]
 8015682:	429a      	cmp	r2, r3
 8015684:	d117      	bne.n	80156b6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	4b38      	ldr	r3, [pc, #224]	; (801576c <etharp_output+0x1fc>)
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	4618      	mov	r0, r3
 8015690:	4937      	ldr	r1, [pc, #220]	; (8015770 <etharp_output+0x200>)
 8015692:	4603      	mov	r3, r0
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4403      	add	r3, r0
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	3304      	adds	r3, #4
 801569e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d108      	bne.n	80156b6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80156a4:	4b31      	ldr	r3, [pc, #196]	; (801576c <etharp_output+0x1fc>)
 80156a6:	781b      	ldrb	r3, [r3, #0]
 80156a8:	461a      	mov	r2, r3
 80156aa:	68b9      	ldr	r1, [r7, #8]
 80156ac:	68f8      	ldr	r0, [r7, #12]
 80156ae:	f7ff fec5 	bl	801543c <etharp_output_to_arp_index>
 80156b2:	4603      	mov	r3, r0
 80156b4:	e04a      	b.n	801574c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80156b6:	2300      	movs	r3, #0
 80156b8:	75fb      	strb	r3, [r7, #23]
 80156ba:	e031      	b.n	8015720 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80156bc:	7dfa      	ldrb	r2, [r7, #23]
 80156be:	492c      	ldr	r1, [pc, #176]	; (8015770 <etharp_output+0x200>)
 80156c0:	4613      	mov	r3, r2
 80156c2:	005b      	lsls	r3, r3, #1
 80156c4:	4413      	add	r3, r2
 80156c6:	00db      	lsls	r3, r3, #3
 80156c8:	440b      	add	r3, r1
 80156ca:	3314      	adds	r3, #20
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	2b01      	cmp	r3, #1
 80156d0:	d923      	bls.n	801571a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80156d2:	7dfa      	ldrb	r2, [r7, #23]
 80156d4:	4926      	ldr	r1, [pc, #152]	; (8015770 <etharp_output+0x200>)
 80156d6:	4613      	mov	r3, r2
 80156d8:	005b      	lsls	r3, r3, #1
 80156da:	4413      	add	r3, r2
 80156dc:	00db      	lsls	r3, r3, #3
 80156de:	440b      	add	r3, r1
 80156e0:	3308      	adds	r3, #8
 80156e2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80156e4:	68fa      	ldr	r2, [r7, #12]
 80156e6:	429a      	cmp	r2, r3
 80156e8:	d117      	bne.n	801571a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	6819      	ldr	r1, [r3, #0]
 80156ee:	7dfa      	ldrb	r2, [r7, #23]
 80156f0:	481f      	ldr	r0, [pc, #124]	; (8015770 <etharp_output+0x200>)
 80156f2:	4613      	mov	r3, r2
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	4413      	add	r3, r2
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	4403      	add	r3, r0
 80156fc:	3304      	adds	r3, #4
 80156fe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015700:	4299      	cmp	r1, r3
 8015702:	d10a      	bne.n	801571a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015704:	4a19      	ldr	r2, [pc, #100]	; (801576c <etharp_output+0x1fc>)
 8015706:	7dfb      	ldrb	r3, [r7, #23]
 8015708:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801570a:	7dfb      	ldrb	r3, [r7, #23]
 801570c:	461a      	mov	r2, r3
 801570e:	68b9      	ldr	r1, [r7, #8]
 8015710:	68f8      	ldr	r0, [r7, #12]
 8015712:	f7ff fe93 	bl	801543c <etharp_output_to_arp_index>
 8015716:	4603      	mov	r3, r0
 8015718:	e018      	b.n	801574c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801571a:	7dfb      	ldrb	r3, [r7, #23]
 801571c:	3301      	adds	r3, #1
 801571e:	75fb      	strb	r3, [r7, #23]
 8015720:	7dfb      	ldrb	r3, [r7, #23]
 8015722:	2b09      	cmp	r3, #9
 8015724:	d9ca      	bls.n	80156bc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	69b9      	ldr	r1, [r7, #24]
 801572a:	68f8      	ldr	r0, [r7, #12]
 801572c:	f000 f822 	bl	8015774 <etharp_query>
 8015730:	4603      	mov	r3, r0
 8015732:	e00b      	b.n	801574c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801573a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	69fb      	ldr	r3, [r7, #28]
 8015742:	68b9      	ldr	r1, [r7, #8]
 8015744:	68f8      	ldr	r0, [r7, #12]
 8015746:	f001 fefb 	bl	8017540 <ethernet_output>
 801574a:	4603      	mov	r3, r0
}
 801574c:	4618      	mov	r0, r3
 801574e:	3720      	adds	r7, #32
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	0801bc08 	.word	0x0801bc08
 8015758:	0801bd58 	.word	0x0801bd58
 801575c:	0801bc80 	.word	0x0801bc80
 8015760:	0801bda8 	.word	0x0801bda8
 8015764:	0801bd48 	.word	0x0801bd48
 8015768:	0801c490 	.word	0x0801c490
 801576c:	20004b34 	.word	0x20004b34
 8015770:	20004a44 	.word	0x20004a44

08015774 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b08c      	sub	sp, #48	; 0x30
 8015778:	af02      	add	r7, sp, #8
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	3326      	adds	r3, #38	; 0x26
 8015784:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015786:	23ff      	movs	r3, #255	; 0xff
 8015788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801578c:	2300      	movs	r3, #0
 801578e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	68f9      	ldr	r1, [r7, #12]
 8015796:	4618      	mov	r0, r3
 8015798:	f000 fe0e 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 801579c:	4603      	mov	r3, r0
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10c      	bne.n	80157bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80157a2:	68bb      	ldr	r3, [r7, #8]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80157aa:	2be0      	cmp	r3, #224	; 0xe0
 80157ac:	d006      	beq.n	80157bc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80157ae:	68bb      	ldr	r3, [r7, #8]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d003      	beq.n	80157bc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d102      	bne.n	80157c2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80157bc:	f06f 030f 	mvn.w	r3, #15
 80157c0:	e101      	b.n	80159c6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	2101      	movs	r1, #1
 80157c6:	68b8      	ldr	r0, [r7, #8]
 80157c8:	f7ff fb60 	bl	8014e8c <etharp_find_entry>
 80157cc:	4603      	mov	r3, r0
 80157ce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80157d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	da02      	bge.n	80157de <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80157d8:	8a7b      	ldrh	r3, [r7, #18]
 80157da:	b25b      	sxtb	r3, r3
 80157dc:	e0f3      	b.n	80159c6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80157de:	8a7b      	ldrh	r3, [r7, #18]
 80157e0:	2b7e      	cmp	r3, #126	; 0x7e
 80157e2:	d906      	bls.n	80157f2 <etharp_query+0x7e>
 80157e4:	4b7a      	ldr	r3, [pc, #488]	; (80159d0 <etharp_query+0x25c>)
 80157e6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80157ea:	497a      	ldr	r1, [pc, #488]	; (80159d4 <etharp_query+0x260>)
 80157ec:	487a      	ldr	r0, [pc, #488]	; (80159d8 <etharp_query+0x264>)
 80157ee:	f002 f8ed 	bl	80179cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80157f2:	8a7b      	ldrh	r3, [r7, #18]
 80157f4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80157f6:	7c7a      	ldrb	r2, [r7, #17]
 80157f8:	4978      	ldr	r1, [pc, #480]	; (80159dc <etharp_query+0x268>)
 80157fa:	4613      	mov	r3, r2
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	4413      	add	r3, r2
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	440b      	add	r3, r1
 8015804:	3314      	adds	r3, #20
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d115      	bne.n	8015838 <etharp_query+0xc4>
    is_new_entry = 1;
 801580c:	2301      	movs	r3, #1
 801580e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015810:	7c7a      	ldrb	r2, [r7, #17]
 8015812:	4972      	ldr	r1, [pc, #456]	; (80159dc <etharp_query+0x268>)
 8015814:	4613      	mov	r3, r2
 8015816:	005b      	lsls	r3, r3, #1
 8015818:	4413      	add	r3, r2
 801581a:	00db      	lsls	r3, r3, #3
 801581c:	440b      	add	r3, r1
 801581e:	3314      	adds	r3, #20
 8015820:	2201      	movs	r2, #1
 8015822:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015824:	7c7a      	ldrb	r2, [r7, #17]
 8015826:	496d      	ldr	r1, [pc, #436]	; (80159dc <etharp_query+0x268>)
 8015828:	4613      	mov	r3, r2
 801582a:	005b      	lsls	r3, r3, #1
 801582c:	4413      	add	r3, r2
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	440b      	add	r3, r1
 8015832:	3308      	adds	r3, #8
 8015834:	68fa      	ldr	r2, [r7, #12]
 8015836:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015838:	7c7a      	ldrb	r2, [r7, #17]
 801583a:	4968      	ldr	r1, [pc, #416]	; (80159dc <etharp_query+0x268>)
 801583c:	4613      	mov	r3, r2
 801583e:	005b      	lsls	r3, r3, #1
 8015840:	4413      	add	r3, r2
 8015842:	00db      	lsls	r3, r3, #3
 8015844:	440b      	add	r3, r1
 8015846:	3314      	adds	r3, #20
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	2b01      	cmp	r3, #1
 801584c:	d011      	beq.n	8015872 <etharp_query+0xfe>
 801584e:	7c7a      	ldrb	r2, [r7, #17]
 8015850:	4962      	ldr	r1, [pc, #392]	; (80159dc <etharp_query+0x268>)
 8015852:	4613      	mov	r3, r2
 8015854:	005b      	lsls	r3, r3, #1
 8015856:	4413      	add	r3, r2
 8015858:	00db      	lsls	r3, r3, #3
 801585a:	440b      	add	r3, r1
 801585c:	3314      	adds	r3, #20
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	2b01      	cmp	r3, #1
 8015862:	d806      	bhi.n	8015872 <etharp_query+0xfe>
 8015864:	4b5a      	ldr	r3, [pc, #360]	; (80159d0 <etharp_query+0x25c>)
 8015866:	f240 32cd 	movw	r2, #973	; 0x3cd
 801586a:	495d      	ldr	r1, [pc, #372]	; (80159e0 <etharp_query+0x26c>)
 801586c:	485a      	ldr	r0, [pc, #360]	; (80159d8 <etharp_query+0x264>)
 801586e:	f002 f8ad 	bl	80179cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015872:	6a3b      	ldr	r3, [r7, #32]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d102      	bne.n	801587e <etharp_query+0x10a>
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d10c      	bne.n	8015898 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801587e:	68b9      	ldr	r1, [r7, #8]
 8015880:	68f8      	ldr	r0, [r7, #12]
 8015882:	f000 f963 	bl	8015b4c <etharp_request>
 8015886:	4603      	mov	r3, r0
 8015888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d102      	bne.n	8015898 <etharp_query+0x124>
      return result;
 8015892:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015896:	e096      	b.n	80159c6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d106      	bne.n	80158ac <etharp_query+0x138>
 801589e:	4b4c      	ldr	r3, [pc, #304]	; (80159d0 <etharp_query+0x25c>)
 80158a0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80158a4:	494f      	ldr	r1, [pc, #316]	; (80159e4 <etharp_query+0x270>)
 80158a6:	484c      	ldr	r0, [pc, #304]	; (80159d8 <etharp_query+0x264>)
 80158a8:	f002 f890 	bl	80179cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80158ac:	7c7a      	ldrb	r2, [r7, #17]
 80158ae:	494b      	ldr	r1, [pc, #300]	; (80159dc <etharp_query+0x268>)
 80158b0:	4613      	mov	r3, r2
 80158b2:	005b      	lsls	r3, r3, #1
 80158b4:	4413      	add	r3, r2
 80158b6:	00db      	lsls	r3, r3, #3
 80158b8:	440b      	add	r3, r1
 80158ba:	3314      	adds	r3, #20
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	2b01      	cmp	r3, #1
 80158c0:	d917      	bls.n	80158f2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80158c2:	4a49      	ldr	r2, [pc, #292]	; (80159e8 <etharp_query+0x274>)
 80158c4:	7c7b      	ldrb	r3, [r7, #17]
 80158c6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80158c8:	7c7a      	ldrb	r2, [r7, #17]
 80158ca:	4613      	mov	r3, r2
 80158cc:	005b      	lsls	r3, r3, #1
 80158ce:	4413      	add	r3, r2
 80158d0:	00db      	lsls	r3, r3, #3
 80158d2:	3308      	adds	r3, #8
 80158d4:	4a41      	ldr	r2, [pc, #260]	; (80159dc <etharp_query+0x268>)
 80158d6:	4413      	add	r3, r2
 80158d8:	3304      	adds	r3, #4
 80158da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80158de:	9200      	str	r2, [sp, #0]
 80158e0:	697a      	ldr	r2, [r7, #20]
 80158e2:	6879      	ldr	r1, [r7, #4]
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f001 fe2b 	bl	8017540 <ethernet_output>
 80158ea:	4603      	mov	r3, r0
 80158ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80158f0:	e067      	b.n	80159c2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80158f2:	7c7a      	ldrb	r2, [r7, #17]
 80158f4:	4939      	ldr	r1, [pc, #228]	; (80159dc <etharp_query+0x268>)
 80158f6:	4613      	mov	r3, r2
 80158f8:	005b      	lsls	r3, r3, #1
 80158fa:	4413      	add	r3, r2
 80158fc:	00db      	lsls	r3, r3, #3
 80158fe:	440b      	add	r3, r1
 8015900:	3314      	adds	r3, #20
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	2b01      	cmp	r3, #1
 8015906:	d15c      	bne.n	80159c2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015908:	2300      	movs	r3, #0
 801590a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015910:	e01c      	b.n	801594c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	895a      	ldrh	r2, [r3, #10]
 8015916:	69fb      	ldr	r3, [r7, #28]
 8015918:	891b      	ldrh	r3, [r3, #8]
 801591a:	429a      	cmp	r2, r3
 801591c:	d10a      	bne.n	8015934 <etharp_query+0x1c0>
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d006      	beq.n	8015934 <etharp_query+0x1c0>
 8015926:	4b2a      	ldr	r3, [pc, #168]	; (80159d0 <etharp_query+0x25c>)
 8015928:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801592c:	492f      	ldr	r1, [pc, #188]	; (80159ec <etharp_query+0x278>)
 801592e:	482a      	ldr	r0, [pc, #168]	; (80159d8 <etharp_query+0x264>)
 8015930:	f002 f84c 	bl	80179cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015934:	69fb      	ldr	r3, [r7, #28]
 8015936:	7b1b      	ldrb	r3, [r3, #12]
 8015938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801593c:	2b00      	cmp	r3, #0
 801593e:	d002      	beq.n	8015946 <etharp_query+0x1d2>
        copy_needed = 1;
 8015940:	2301      	movs	r3, #1
 8015942:	61bb      	str	r3, [r7, #24]
        break;
 8015944:	e005      	b.n	8015952 <etharp_query+0x1de>
      }
      p = p->next;
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1df      	bne.n	8015912 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d007      	beq.n	8015968 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801595e:	200e      	movs	r0, #14
 8015960:	f7f8 fc8c 	bl	800e27c <pbuf_clone>
 8015964:	61f8      	str	r0, [r7, #28]
 8015966:	e004      	b.n	8015972 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801596c:	69f8      	ldr	r0, [r7, #28]
 801596e:	f7f8 fac3 	bl	800def8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d021      	beq.n	80159bc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015978:	7c7a      	ldrb	r2, [r7, #17]
 801597a:	4918      	ldr	r1, [pc, #96]	; (80159dc <etharp_query+0x268>)
 801597c:	4613      	mov	r3, r2
 801597e:	005b      	lsls	r3, r3, #1
 8015980:	4413      	add	r3, r2
 8015982:	00db      	lsls	r3, r3, #3
 8015984:	440b      	add	r3, r1
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d00a      	beq.n	80159a2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801598c:	7c7a      	ldrb	r2, [r7, #17]
 801598e:	4913      	ldr	r1, [pc, #76]	; (80159dc <etharp_query+0x268>)
 8015990:	4613      	mov	r3, r2
 8015992:	005b      	lsls	r3, r3, #1
 8015994:	4413      	add	r3, r2
 8015996:	00db      	lsls	r3, r3, #3
 8015998:	440b      	add	r3, r1
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	4618      	mov	r0, r3
 801599e:	f7f8 fa05 	bl	800ddac <pbuf_free>
      }
      arp_table[i].q = p;
 80159a2:	7c7a      	ldrb	r2, [r7, #17]
 80159a4:	490d      	ldr	r1, [pc, #52]	; (80159dc <etharp_query+0x268>)
 80159a6:	4613      	mov	r3, r2
 80159a8:	005b      	lsls	r3, r3, #1
 80159aa:	4413      	add	r3, r2
 80159ac:	00db      	lsls	r3, r3, #3
 80159ae:	440b      	add	r3, r1
 80159b0:	69fa      	ldr	r2, [r7, #28]
 80159b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80159ba:	e002      	b.n	80159c2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80159bc:	23ff      	movs	r3, #255	; 0xff
 80159be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80159c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80159c6:	4618      	mov	r0, r3
 80159c8:	3728      	adds	r7, #40	; 0x28
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}
 80159ce:	bf00      	nop
 80159d0:	0801bc08 	.word	0x0801bc08
 80159d4:	0801bdb4 	.word	0x0801bdb4
 80159d8:	0801bc80 	.word	0x0801bc80
 80159dc:	20004a44 	.word	0x20004a44
 80159e0:	0801bdc4 	.word	0x0801bdc4
 80159e4:	0801bda8 	.word	0x0801bda8
 80159e8:	20004b34 	.word	0x20004b34
 80159ec:	0801bdec 	.word	0x0801bdec

080159f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b08a      	sub	sp, #40	; 0x28
 80159f4:	af02      	add	r7, sp, #8
 80159f6:	60f8      	str	r0, [r7, #12]
 80159f8:	60b9      	str	r1, [r7, #8]
 80159fa:	607a      	str	r2, [r7, #4]
 80159fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80159fe:	2300      	movs	r3, #0
 8015a00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d106      	bne.n	8015a16 <etharp_raw+0x26>
 8015a08:	4b3a      	ldr	r3, [pc, #232]	; (8015af4 <etharp_raw+0x104>)
 8015a0a:	f240 4257 	movw	r2, #1111	; 0x457
 8015a0e:	493a      	ldr	r1, [pc, #232]	; (8015af8 <etharp_raw+0x108>)
 8015a10:	483a      	ldr	r0, [pc, #232]	; (8015afc <etharp_raw+0x10c>)
 8015a12:	f001 ffdb 	bl	80179cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015a16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a1a:	211c      	movs	r1, #28
 8015a1c:	200e      	movs	r0, #14
 8015a1e:	f7f7 fee1 	bl	800d7e4 <pbuf_alloc>
 8015a22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015a24:	69bb      	ldr	r3, [r7, #24]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d102      	bne.n	8015a30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8015a2e:	e05d      	b.n	8015aec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015a30:	69bb      	ldr	r3, [r7, #24]
 8015a32:	895b      	ldrh	r3, [r3, #10]
 8015a34:	2b1b      	cmp	r3, #27
 8015a36:	d806      	bhi.n	8015a46 <etharp_raw+0x56>
 8015a38:	4b2e      	ldr	r3, [pc, #184]	; (8015af4 <etharp_raw+0x104>)
 8015a3a:	f240 4262 	movw	r2, #1122	; 0x462
 8015a3e:	4930      	ldr	r1, [pc, #192]	; (8015b00 <etharp_raw+0x110>)
 8015a40:	482e      	ldr	r0, [pc, #184]	; (8015afc <etharp_raw+0x10c>)
 8015a42:	f001 ffc3 	bl	80179cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015a4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7f6 fe00 	bl	800c654 <lwip_htons>
 8015a54:	4603      	mov	r3, r0
 8015a56:	461a      	mov	r2, r3
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a62:	2b06      	cmp	r3, #6
 8015a64:	d006      	beq.n	8015a74 <etharp_raw+0x84>
 8015a66:	4b23      	ldr	r3, [pc, #140]	; (8015af4 <etharp_raw+0x104>)
 8015a68:	f240 4269 	movw	r2, #1129	; 0x469
 8015a6c:	4925      	ldr	r1, [pc, #148]	; (8015b04 <etharp_raw+0x114>)
 8015a6e:	4823      	ldr	r0, [pc, #140]	; (8015afc <etharp_raw+0x10c>)
 8015a70:	f001 ffac 	bl	80179cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	3308      	adds	r3, #8
 8015a78:	2206      	movs	r2, #6
 8015a7a:	6839      	ldr	r1, [r7, #0]
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f001 ff8f 	bl	80179a0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015a82:	697b      	ldr	r3, [r7, #20]
 8015a84:	3312      	adds	r3, #18
 8015a86:	2206      	movs	r2, #6
 8015a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f001 ff88 	bl	80179a0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	330e      	adds	r3, #14
 8015a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a96:	6812      	ldr	r2, [r2, #0]
 8015a98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	3318      	adds	r3, #24
 8015a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015aa0:	6812      	ldr	r2, [r2, #0]
 8015aa2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	701a      	strb	r2, [r3, #0]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	f042 0201 	orr.w	r2, r2, #1
 8015ab0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	f042 0208 	orr.w	r2, r2, #8
 8015aba:	709a      	strb	r2, [r3, #2]
 8015abc:	2200      	movs	r2, #0
 8015abe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	2206      	movs	r2, #6
 8015ac4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	2204      	movs	r2, #4
 8015aca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015acc:	f640 0306 	movw	r3, #2054	; 0x806
 8015ad0:	9300      	str	r3, [sp, #0]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	68ba      	ldr	r2, [r7, #8]
 8015ad6:	69b9      	ldr	r1, [r7, #24]
 8015ad8:	68f8      	ldr	r0, [r7, #12]
 8015ada:	f001 fd31 	bl	8017540 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015ade:	69b8      	ldr	r0, [r7, #24]
 8015ae0:	f7f8 f964 	bl	800ddac <pbuf_free>
  p = NULL;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015ae8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3720      	adds	r7, #32
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bd80      	pop	{r7, pc}
 8015af4:	0801bc08 	.word	0x0801bc08
 8015af8:	0801bd58 	.word	0x0801bd58
 8015afc:	0801bc80 	.word	0x0801bc80
 8015b00:	0801be08 	.word	0x0801be08
 8015b04:	0801be3c 	.word	0x0801be3c

08015b08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b088      	sub	sp, #32
 8015b0c:	af04      	add	r7, sp, #16
 8015b0e:	60f8      	str	r0, [r7, #12]
 8015b10:	60b9      	str	r1, [r7, #8]
 8015b12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015b24:	2201      	movs	r2, #1
 8015b26:	9203      	str	r2, [sp, #12]
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	9202      	str	r2, [sp, #8]
 8015b2c:	4a06      	ldr	r2, [pc, #24]	; (8015b48 <etharp_request_dst+0x40>)
 8015b2e:	9201      	str	r2, [sp, #4]
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	4603      	mov	r3, r0
 8015b34:	687a      	ldr	r2, [r7, #4]
 8015b36:	68f8      	ldr	r0, [r7, #12]
 8015b38:	f7ff ff5a 	bl	80159f0 <etharp_raw>
 8015b3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3710      	adds	r7, #16
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
 8015b46:	bf00      	nop
 8015b48:	0801c498 	.word	0x0801c498

08015b4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b082      	sub	sp, #8
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015b56:	4a05      	ldr	r2, [pc, #20]	; (8015b6c <etharp_request+0x20>)
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f7ff ffd4 	bl	8015b08 <etharp_request_dst>
 8015b60:	4603      	mov	r3, r0
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3708      	adds	r7, #8
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	0801c490 	.word	0x0801c490

08015b70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b08e      	sub	sp, #56	; 0x38
 8015b74:	af04      	add	r7, sp, #16
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015b7a:	4b79      	ldr	r3, [pc, #484]	; (8015d60 <icmp_input+0x1f0>)
 8015b7c:	689b      	ldr	r3, [r3, #8]
 8015b7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	f003 030f 	and.w	r3, r3, #15
 8015b88:	b2db      	uxtb	r3, r3
 8015b8a:	009b      	lsls	r3, r3, #2
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b92:	2b13      	cmp	r3, #19
 8015b94:	f240 80cd 	bls.w	8015d32 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	895b      	ldrh	r3, [r3, #10]
 8015b9c:	2b03      	cmp	r3, #3
 8015b9e:	f240 80ca 	bls.w	8015d36 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	685b      	ldr	r3, [r3, #4]
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015bac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	f000 80b7 	beq.w	8015d24 <icmp_input+0x1b4>
 8015bb6:	2b08      	cmp	r3, #8
 8015bb8:	f040 80b7 	bne.w	8015d2a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015bbc:	4b69      	ldr	r3, [pc, #420]	; (8015d64 <icmp_input+0x1f4>)
 8015bbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bc0:	4b67      	ldr	r3, [pc, #412]	; (8015d60 <icmp_input+0x1f0>)
 8015bc2:	695b      	ldr	r3, [r3, #20]
 8015bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015bc8:	2be0      	cmp	r3, #224	; 0xe0
 8015bca:	f000 80bb 	beq.w	8015d44 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015bce:	4b64      	ldr	r3, [pc, #400]	; (8015d60 <icmp_input+0x1f0>)
 8015bd0:	695b      	ldr	r3, [r3, #20]
 8015bd2:	4a63      	ldr	r2, [pc, #396]	; (8015d60 <icmp_input+0x1f0>)
 8015bd4:	6812      	ldr	r2, [r2, #0]
 8015bd6:	4611      	mov	r1, r2
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f000 fbed 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 8015bde:	4603      	mov	r3, r0
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f040 80b1 	bne.w	8015d48 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	891b      	ldrh	r3, [r3, #8]
 8015bea:	2b07      	cmp	r3, #7
 8015bec:	f240 80a5 	bls.w	8015d3a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bf2:	330e      	adds	r3, #14
 8015bf4:	4619      	mov	r1, r3
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7f8 f842 	bl	800dc80 <pbuf_add_header>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d04b      	beq.n	8015c9a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	891a      	ldrh	r2, [r3, #8]
 8015c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c08:	4413      	add	r3, r2
 8015c0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	891b      	ldrh	r3, [r3, #8]
 8015c10:	8b7a      	ldrh	r2, [r7, #26]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	f0c0 809a 	bcc.w	8015d4c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015c18:	8b7b      	ldrh	r3, [r7, #26]
 8015c1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c1e:	4619      	mov	r1, r3
 8015c20:	200e      	movs	r0, #14
 8015c22:	f7f7 fddf 	bl	800d7e4 <pbuf_alloc>
 8015c26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	f000 8090 	beq.w	8015d50 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	895b      	ldrh	r3, [r3, #10]
 8015c34:	461a      	mov	r2, r3
 8015c36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c38:	3308      	adds	r3, #8
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d203      	bcs.n	8015c46 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015c3e:	6978      	ldr	r0, [r7, #20]
 8015c40:	f7f8 f8b4 	bl	800ddac <pbuf_free>
          goto icmperr;
 8015c44:	e085      	b.n	8015d52 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	685b      	ldr	r3, [r3, #4]
 8015c4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f001 fea6 	bl	80179a0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c56:	4619      	mov	r1, r3
 8015c58:	6978      	ldr	r0, [r7, #20]
 8015c5a:	f7f8 f821 	bl	800dca0 <pbuf_remove_header>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d009      	beq.n	8015c78 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015c64:	4b40      	ldr	r3, [pc, #256]	; (8015d68 <icmp_input+0x1f8>)
 8015c66:	22b6      	movs	r2, #182	; 0xb6
 8015c68:	4940      	ldr	r1, [pc, #256]	; (8015d6c <icmp_input+0x1fc>)
 8015c6a:	4841      	ldr	r0, [pc, #260]	; (8015d70 <icmp_input+0x200>)
 8015c6c:	f001 feae 	bl	80179cc <iprintf>
          pbuf_free(r);
 8015c70:	6978      	ldr	r0, [r7, #20]
 8015c72:	f7f8 f89b 	bl	800ddac <pbuf_free>
          goto icmperr;
 8015c76:	e06c      	b.n	8015d52 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015c78:	6879      	ldr	r1, [r7, #4]
 8015c7a:	6978      	ldr	r0, [r7, #20]
 8015c7c:	f7f8 f9ba 	bl	800dff4 <pbuf_copy>
 8015c80:	4603      	mov	r3, r0
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d003      	beq.n	8015c8e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015c86:	6978      	ldr	r0, [r7, #20]
 8015c88:	f7f8 f890 	bl	800ddac <pbuf_free>
          goto icmperr;
 8015c8c:	e061      	b.n	8015d52 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7f8 f88c 	bl	800ddac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	607b      	str	r3, [r7, #4]
 8015c98:	e00f      	b.n	8015cba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015c9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c9c:	330e      	adds	r3, #14
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f7f7 fffd 	bl	800dca0 <pbuf_remove_header>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d006      	beq.n	8015cba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015cac:	4b2e      	ldr	r3, [pc, #184]	; (8015d68 <icmp_input+0x1f8>)
 8015cae:	22c7      	movs	r2, #199	; 0xc7
 8015cb0:	4930      	ldr	r1, [pc, #192]	; (8015d74 <icmp_input+0x204>)
 8015cb2:	482f      	ldr	r0, [pc, #188]	; (8015d70 <icmp_input+0x200>)
 8015cb4:	f001 fe8a 	bl	80179cc <iprintf>
          goto icmperr;
 8015cb8:	e04b      	b.n	8015d52 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015cc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f7f7 ffdb 	bl	800dc80 <pbuf_add_header>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d12b      	bne.n	8015d28 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	685b      	ldr	r3, [r3, #4]
 8015cd4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015cd6:	69fb      	ldr	r3, [r7, #28]
 8015cd8:	681a      	ldr	r2, [r3, #0]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015cde:	4b20      	ldr	r3, [pc, #128]	; (8015d60 <icmp_input+0x1f0>)
 8015ce0:	691a      	ldr	r2, [r3, #16]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	709a      	strb	r2, [r3, #2]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	22ff      	movs	r2, #255	; 0xff
 8015cfa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	729a      	strb	r2, [r3, #10]
 8015d02:	2200      	movs	r2, #0
 8015d04:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	9302      	str	r3, [sp, #8]
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	9301      	str	r3, [sp, #4]
 8015d0e:	2300      	movs	r3, #0
 8015d10:	9300      	str	r3, [sp, #0]
 8015d12:	23ff      	movs	r3, #255	; 0xff
 8015d14:	2200      	movs	r2, #0
 8015d16:	69f9      	ldr	r1, [r7, #28]
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f000 fa75 	bl	8016208 <ip4_output_if>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015d22:	e001      	b.n	8015d28 <icmp_input+0x1b8>
      break;
 8015d24:	bf00      	nop
 8015d26:	e000      	b.n	8015d2a <icmp_input+0x1ba>
      break;
 8015d28:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015d2a:	6878      	ldr	r0, [r7, #4]
 8015d2c:	f7f8 f83e 	bl	800ddac <pbuf_free>
  return;
 8015d30:	e013      	b.n	8015d5a <icmp_input+0x1ea>
    goto lenerr;
 8015d32:	bf00      	nop
 8015d34:	e002      	b.n	8015d3c <icmp_input+0x1cc>
    goto lenerr;
 8015d36:	bf00      	nop
 8015d38:	e000      	b.n	8015d3c <icmp_input+0x1cc>
        goto lenerr;
 8015d3a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7f8 f835 	bl	800ddac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015d42:	e00a      	b.n	8015d5a <icmp_input+0x1ea>
        goto icmperr;
 8015d44:	bf00      	nop
 8015d46:	e004      	b.n	8015d52 <icmp_input+0x1e2>
        goto icmperr;
 8015d48:	bf00      	nop
 8015d4a:	e002      	b.n	8015d52 <icmp_input+0x1e2>
          goto icmperr;
 8015d4c:	bf00      	nop
 8015d4e:	e000      	b.n	8015d52 <icmp_input+0x1e2>
          goto icmperr;
 8015d50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f7f8 f82a 	bl	800ddac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015d58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015d5a:	3728      	adds	r7, #40	; 0x28
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	bd80      	pop	{r7, pc}
 8015d60:	200081e4 	.word	0x200081e4
 8015d64:	200081f8 	.word	0x200081f8
 8015d68:	0801be80 	.word	0x0801be80
 8015d6c:	0801beb8 	.word	0x0801beb8
 8015d70:	0801bef0 	.word	0x0801bef0
 8015d74:	0801bf18 	.word	0x0801bf18

08015d78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	460b      	mov	r3, r1
 8015d82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015d84:	78fb      	ldrb	r3, [r7, #3]
 8015d86:	461a      	mov	r2, r3
 8015d88:	2103      	movs	r1, #3
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 f814 	bl	8015db8 <icmp_send_response>
}
 8015d90:	bf00      	nop
 8015d92:	3708      	adds	r7, #8
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	460b      	mov	r3, r1
 8015da2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015da4:	78fb      	ldrb	r3, [r7, #3]
 8015da6:	461a      	mov	r2, r3
 8015da8:	210b      	movs	r1, #11
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f000 f804 	bl	8015db8 <icmp_send_response>
}
 8015db0:	bf00      	nop
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b08c      	sub	sp, #48	; 0x30
 8015dbc:	af04      	add	r7, sp, #16
 8015dbe:	6078      	str	r0, [r7, #4]
 8015dc0:	460b      	mov	r3, r1
 8015dc2:	70fb      	strb	r3, [r7, #3]
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015dc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015dcc:	2124      	movs	r1, #36	; 0x24
 8015dce:	2022      	movs	r0, #34	; 0x22
 8015dd0:	f7f7 fd08 	bl	800d7e4 <pbuf_alloc>
 8015dd4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015dd6:	69fb      	ldr	r3, [r7, #28]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d04c      	beq.n	8015e76 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	895b      	ldrh	r3, [r3, #10]
 8015de0:	2b23      	cmp	r3, #35	; 0x23
 8015de2:	d806      	bhi.n	8015df2 <icmp_send_response+0x3a>
 8015de4:	4b26      	ldr	r3, [pc, #152]	; (8015e80 <icmp_send_response+0xc8>)
 8015de6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015dea:	4926      	ldr	r1, [pc, #152]	; (8015e84 <icmp_send_response+0xcc>)
 8015dec:	4826      	ldr	r0, [pc, #152]	; (8015e88 <icmp_send_response+0xd0>)
 8015dee:	f001 fded 	bl	80179cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	685b      	ldr	r3, [r3, #4]
 8015df6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	685b      	ldr	r3, [r3, #4]
 8015dfc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	78fa      	ldrb	r2, [r7, #3]
 8015e02:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	78ba      	ldrb	r2, [r7, #2]
 8015e08:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	711a      	strb	r2, [r3, #4]
 8015e10:	2200      	movs	r2, #0
 8015e12:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015e14:	697b      	ldr	r3, [r7, #20]
 8015e16:	2200      	movs	r2, #0
 8015e18:	719a      	strb	r2, [r3, #6]
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015e1e:	69fb      	ldr	r3, [r7, #28]
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	f103 0008 	add.w	r0, r3, #8
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	685b      	ldr	r3, [r3, #4]
 8015e2a:	221c      	movs	r2, #28
 8015e2c:	4619      	mov	r1, r3
 8015e2e:	f001 fdb7 	bl	80179a0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015e32:	69bb      	ldr	r3, [r7, #24]
 8015e34:	68db      	ldr	r3, [r3, #12]
 8015e36:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015e38:	f107 030c 	add.w	r3, r7, #12
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f000 f825 	bl	8015e8c <ip4_route>
 8015e42:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d011      	beq.n	8015e6e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	709a      	strb	r2, [r3, #2]
 8015e50:	2200      	movs	r2, #0
 8015e52:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015e54:	f107 020c 	add.w	r2, r7, #12
 8015e58:	693b      	ldr	r3, [r7, #16]
 8015e5a:	9302      	str	r3, [sp, #8]
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	9301      	str	r3, [sp, #4]
 8015e60:	2300      	movs	r3, #0
 8015e62:	9300      	str	r3, [sp, #0]
 8015e64:	23ff      	movs	r3, #255	; 0xff
 8015e66:	2100      	movs	r1, #0
 8015e68:	69f8      	ldr	r0, [r7, #28]
 8015e6a:	f000 f9cd 	bl	8016208 <ip4_output_if>
  }
  pbuf_free(q);
 8015e6e:	69f8      	ldr	r0, [r7, #28]
 8015e70:	f7f7 ff9c 	bl	800ddac <pbuf_free>
 8015e74:	e000      	b.n	8015e78 <icmp_send_response+0xc0>
    return;
 8015e76:	bf00      	nop
}
 8015e78:	3720      	adds	r7, #32
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}
 8015e7e:	bf00      	nop
 8015e80:	0801be80 	.word	0x0801be80
 8015e84:	0801bf4c 	.word	0x0801bf4c
 8015e88:	0801bef0 	.word	0x0801bef0

08015e8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b085      	sub	sp, #20
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015e94:	4b33      	ldr	r3, [pc, #204]	; (8015f64 <ip4_route+0xd8>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	60fb      	str	r3, [r7, #12]
 8015e9a:	e036      	b.n	8015f0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ea2:	f003 0301 	and.w	r3, r3, #1
 8015ea6:	b2db      	uxtb	r3, r3
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d02b      	beq.n	8015f04 <ip4_route+0x78>
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015eb2:	089b      	lsrs	r3, r3, #2
 8015eb4:	f003 0301 	and.w	r3, r3, #1
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d022      	beq.n	8015f04 <ip4_route+0x78>
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d01d      	beq.n	8015f04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	3304      	adds	r3, #4
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	405a      	eors	r2, r3
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	3308      	adds	r3, #8
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4013      	ands	r3, r2
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d101      	bne.n	8015ee4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	e038      	b.n	8015f56 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015eea:	f003 0302 	and.w	r3, r3, #2
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d108      	bne.n	8015f04 <ip4_route+0x78>
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681a      	ldr	r2, [r3, #0]
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	330c      	adds	r3, #12
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d101      	bne.n	8015f04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	e028      	b.n	8015f56 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	60fb      	str	r3, [r7, #12]
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d1c5      	bne.n	8015e9c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f10:	4b15      	ldr	r3, [pc, #84]	; (8015f68 <ip4_route+0xdc>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d01a      	beq.n	8015f4e <ip4_route+0xc2>
 8015f18:	4b13      	ldr	r3, [pc, #76]	; (8015f68 <ip4_route+0xdc>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f20:	f003 0301 	and.w	r3, r3, #1
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d012      	beq.n	8015f4e <ip4_route+0xc2>
 8015f28:	4b0f      	ldr	r3, [pc, #60]	; (8015f68 <ip4_route+0xdc>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f30:	f003 0304 	and.w	r3, r3, #4
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d00a      	beq.n	8015f4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015f38:	4b0b      	ldr	r3, [pc, #44]	; (8015f68 <ip4_route+0xdc>)
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	3304      	adds	r3, #4
 8015f3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d004      	beq.n	8015f4e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	b2db      	uxtb	r3, r3
 8015f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8015f4c:	d101      	bne.n	8015f52 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	e001      	b.n	8015f56 <ip4_route+0xca>
  }

  return netif_default;
 8015f52:	4b05      	ldr	r3, [pc, #20]	; (8015f68 <ip4_route+0xdc>)
 8015f54:	681b      	ldr	r3, [r3, #0]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3714      	adds	r7, #20
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f60:	4770      	bx	lr
 8015f62:	bf00      	nop
 8015f64:	2000b8e8 	.word	0x2000b8e8
 8015f68:	2000b8ec 	.word	0x2000b8ec

08015f6c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f7a:	f003 0301 	and.w	r3, r3, #1
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d016      	beq.n	8015fb2 <ip4_input_accept+0x46>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	3304      	adds	r3, #4
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d011      	beq.n	8015fb2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015f8e:	4b0b      	ldr	r3, [pc, #44]	; (8015fbc <ip4_input_accept+0x50>)
 8015f90:	695a      	ldr	r2, [r3, #20]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	3304      	adds	r3, #4
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d008      	beq.n	8015fae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015f9c:	4b07      	ldr	r3, [pc, #28]	; (8015fbc <ip4_input_accept+0x50>)
 8015f9e:	695b      	ldr	r3, [r3, #20]
 8015fa0:	6879      	ldr	r1, [r7, #4]
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f000 fa08 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 8015fa8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d001      	beq.n	8015fb2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015fae:	2301      	movs	r3, #1
 8015fb0:	e000      	b.n	8015fb4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015fb2:	2300      	movs	r3, #0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3708      	adds	r7, #8
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	200081e4 	.word	0x200081e4

08015fc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b086      	sub	sp, #24
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
 8015fc8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	781b      	ldrb	r3, [r3, #0]
 8015fd4:	091b      	lsrs	r3, r3, #4
 8015fd6:	b2db      	uxtb	r3, r3
 8015fd8:	2b04      	cmp	r3, #4
 8015fda:	d004      	beq.n	8015fe6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015fdc:	6878      	ldr	r0, [r7, #4]
 8015fde:	f7f7 fee5 	bl	800ddac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	e107      	b.n	80161f6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	781b      	ldrb	r3, [r3, #0]
 8015fea:	f003 030f 	and.w	r3, r3, #15
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	885b      	ldrh	r3, [r3, #2]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	f7f6 fb29 	bl	800c654 <lwip_htons>
 8016002:	4603      	mov	r3, r0
 8016004:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	891b      	ldrh	r3, [r3, #8]
 801600a:	89ba      	ldrh	r2, [r7, #12]
 801600c:	429a      	cmp	r2, r3
 801600e:	d204      	bcs.n	801601a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016010:	89bb      	ldrh	r3, [r7, #12]
 8016012:	4619      	mov	r1, r3
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f7f7 fd43 	bl	800daa0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	895b      	ldrh	r3, [r3, #10]
 801601e:	89fa      	ldrh	r2, [r7, #14]
 8016020:	429a      	cmp	r2, r3
 8016022:	d807      	bhi.n	8016034 <ip4_input+0x74>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	891b      	ldrh	r3, [r3, #8]
 8016028:	89ba      	ldrh	r2, [r7, #12]
 801602a:	429a      	cmp	r2, r3
 801602c:	d802      	bhi.n	8016034 <ip4_input+0x74>
 801602e:	89fb      	ldrh	r3, [r7, #14]
 8016030:	2b13      	cmp	r3, #19
 8016032:	d804      	bhi.n	801603e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7f7 feb9 	bl	800ddac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801603a:	2300      	movs	r3, #0
 801603c:	e0db      	b.n	80161f6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	691b      	ldr	r3, [r3, #16]
 8016042:	4a6f      	ldr	r2, [pc, #444]	; (8016200 <ip4_input+0x240>)
 8016044:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016046:	697b      	ldr	r3, [r7, #20]
 8016048:	68db      	ldr	r3, [r3, #12]
 801604a:	4a6d      	ldr	r2, [pc, #436]	; (8016200 <ip4_input+0x240>)
 801604c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801604e:	4b6c      	ldr	r3, [pc, #432]	; (8016200 <ip4_input+0x240>)
 8016050:	695b      	ldr	r3, [r3, #20]
 8016052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016056:	2be0      	cmp	r3, #224	; 0xe0
 8016058:	d112      	bne.n	8016080 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801605a:	683b      	ldr	r3, [r7, #0]
 801605c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016060:	f003 0301 	and.w	r3, r3, #1
 8016064:	b2db      	uxtb	r3, r3
 8016066:	2b00      	cmp	r3, #0
 8016068:	d007      	beq.n	801607a <ip4_input+0xba>
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	3304      	adds	r3, #4
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d002      	beq.n	801607a <ip4_input+0xba>
      netif = inp;
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	613b      	str	r3, [r7, #16]
 8016078:	e02a      	b.n	80160d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801607a:	2300      	movs	r3, #0
 801607c:	613b      	str	r3, [r7, #16]
 801607e:	e027      	b.n	80160d0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016080:	6838      	ldr	r0, [r7, #0]
 8016082:	f7ff ff73 	bl	8015f6c <ip4_input_accept>
 8016086:	4603      	mov	r3, r0
 8016088:	2b00      	cmp	r3, #0
 801608a:	d002      	beq.n	8016092 <ip4_input+0xd2>
      netif = inp;
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	613b      	str	r3, [r7, #16]
 8016090:	e01e      	b.n	80160d0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016092:	2300      	movs	r3, #0
 8016094:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016096:	4b5a      	ldr	r3, [pc, #360]	; (8016200 <ip4_input+0x240>)
 8016098:	695b      	ldr	r3, [r3, #20]
 801609a:	b2db      	uxtb	r3, r3
 801609c:	2b7f      	cmp	r3, #127	; 0x7f
 801609e:	d017      	beq.n	80160d0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80160a0:	4b58      	ldr	r3, [pc, #352]	; (8016204 <ip4_input+0x244>)
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	613b      	str	r3, [r7, #16]
 80160a6:	e00e      	b.n	80160c6 <ip4_input+0x106>
          if (netif == inp) {
 80160a8:	693a      	ldr	r2, [r7, #16]
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d006      	beq.n	80160be <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80160b0:	6938      	ldr	r0, [r7, #16]
 80160b2:	f7ff ff5b 	bl	8015f6c <ip4_input_accept>
 80160b6:	4603      	mov	r3, r0
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d108      	bne.n	80160ce <ip4_input+0x10e>
 80160bc:	e000      	b.n	80160c0 <ip4_input+0x100>
            continue;
 80160be:	bf00      	nop
        NETIF_FOREACH(netif) {
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	613b      	str	r3, [r7, #16]
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d1ed      	bne.n	80160a8 <ip4_input+0xe8>
 80160cc:	e000      	b.n	80160d0 <ip4_input+0x110>
            break;
 80160ce:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80160d0:	4b4b      	ldr	r3, [pc, #300]	; (8016200 <ip4_input+0x240>)
 80160d2:	691b      	ldr	r3, [r3, #16]
 80160d4:	6839      	ldr	r1, [r7, #0]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f000 f96e 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 80160dc:	4603      	mov	r3, r0
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d105      	bne.n	80160ee <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80160e2:	4b47      	ldr	r3, [pc, #284]	; (8016200 <ip4_input+0x240>)
 80160e4:	691b      	ldr	r3, [r3, #16]
 80160e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80160ea:	2be0      	cmp	r3, #224	; 0xe0
 80160ec:	d104      	bne.n	80160f8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7f7 fe5c 	bl	800ddac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80160f4:	2300      	movs	r3, #0
 80160f6:	e07e      	b.n	80161f6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d104      	bne.n	8016108 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f7f7 fe54 	bl	800ddac <pbuf_free>
    return ERR_OK;
 8016104:	2300      	movs	r3, #0
 8016106:	e076      	b.n	80161f6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	88db      	ldrh	r3, [r3, #6]
 801610c:	b29b      	uxth	r3, r3
 801610e:	461a      	mov	r2, r3
 8016110:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016114:	4013      	ands	r3, r2
 8016116:	2b00      	cmp	r3, #0
 8016118:	d00b      	beq.n	8016132 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f000 fe4e 	bl	8016dbc <ip4_reass>
 8016120:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d101      	bne.n	801612c <ip4_input+0x16c>
      return ERR_OK;
 8016128:	2300      	movs	r3, #0
 801612a:	e064      	b.n	80161f6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016132:	4a33      	ldr	r2, [pc, #204]	; (8016200 <ip4_input+0x240>)
 8016134:	693b      	ldr	r3, [r7, #16]
 8016136:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016138:	4a31      	ldr	r2, [pc, #196]	; (8016200 <ip4_input+0x240>)
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801613e:	4a30      	ldr	r2, [pc, #192]	; (8016200 <ip4_input+0x240>)
 8016140:	697b      	ldr	r3, [r7, #20]
 8016142:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	f003 030f 	and.w	r3, r3, #15
 801614c:	b2db      	uxtb	r3, r3
 801614e:	009b      	lsls	r3, r3, #2
 8016150:	b2db      	uxtb	r3, r3
 8016152:	b29a      	uxth	r2, r3
 8016154:	4b2a      	ldr	r3, [pc, #168]	; (8016200 <ip4_input+0x240>)
 8016156:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016158:	89fb      	ldrh	r3, [r7, #14]
 801615a:	4619      	mov	r1, r3
 801615c:	6878      	ldr	r0, [r7, #4]
 801615e:	f7f7 fd9f 	bl	800dca0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016162:	697b      	ldr	r3, [r7, #20]
 8016164:	7a5b      	ldrb	r3, [r3, #9]
 8016166:	2b11      	cmp	r3, #17
 8016168:	d006      	beq.n	8016178 <ip4_input+0x1b8>
 801616a:	2b11      	cmp	r3, #17
 801616c:	dc13      	bgt.n	8016196 <ip4_input+0x1d6>
 801616e:	2b01      	cmp	r3, #1
 8016170:	d00c      	beq.n	801618c <ip4_input+0x1cc>
 8016172:	2b06      	cmp	r3, #6
 8016174:	d005      	beq.n	8016182 <ip4_input+0x1c2>
 8016176:	e00e      	b.n	8016196 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016178:	6839      	ldr	r1, [r7, #0]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f7fe fb5a 	bl	8014834 <udp_input>
        break;
 8016180:	e026      	b.n	80161d0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016182:	6839      	ldr	r1, [r7, #0]
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f7f9 ff17 	bl	800ffb8 <tcp_input>
        break;
 801618a:	e021      	b.n	80161d0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff fcee 	bl	8015b70 <icmp_input>
        break;
 8016194:	e01c      	b.n	80161d0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016196:	4b1a      	ldr	r3, [pc, #104]	; (8016200 <ip4_input+0x240>)
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	6939      	ldr	r1, [r7, #16]
 801619c:	4618      	mov	r0, r3
 801619e:	f000 f90b 	bl	80163b8 <ip4_addr_isbroadcast_u32>
 80161a2:	4603      	mov	r3, r0
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d10f      	bne.n	80161c8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80161a8:	4b15      	ldr	r3, [pc, #84]	; (8016200 <ip4_input+0x240>)
 80161aa:	695b      	ldr	r3, [r3, #20]
 80161ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80161b0:	2be0      	cmp	r3, #224	; 0xe0
 80161b2:	d009      	beq.n	80161c8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80161b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80161b8:	4619      	mov	r1, r3
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7f7 fde3 	bl	800dd86 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80161c0:	2102      	movs	r1, #2
 80161c2:	6878      	ldr	r0, [r7, #4]
 80161c4:	f7ff fdd8 	bl	8015d78 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f7f7 fdef 	bl	800ddac <pbuf_free>
        break;
 80161ce:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80161d0:	4b0b      	ldr	r3, [pc, #44]	; (8016200 <ip4_input+0x240>)
 80161d2:	2200      	movs	r2, #0
 80161d4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80161d6:	4b0a      	ldr	r3, [pc, #40]	; (8016200 <ip4_input+0x240>)
 80161d8:	2200      	movs	r2, #0
 80161da:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80161dc:	4b08      	ldr	r3, [pc, #32]	; (8016200 <ip4_input+0x240>)
 80161de:	2200      	movs	r2, #0
 80161e0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80161e2:	4b07      	ldr	r3, [pc, #28]	; (8016200 <ip4_input+0x240>)
 80161e4:	2200      	movs	r2, #0
 80161e6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80161e8:	4b05      	ldr	r3, [pc, #20]	; (8016200 <ip4_input+0x240>)
 80161ea:	2200      	movs	r2, #0
 80161ec:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80161ee:	4b04      	ldr	r3, [pc, #16]	; (8016200 <ip4_input+0x240>)
 80161f0:	2200      	movs	r2, #0
 80161f2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80161f4:	2300      	movs	r3, #0
}
 80161f6:	4618      	mov	r0, r3
 80161f8:	3718      	adds	r7, #24
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	200081e4 	.word	0x200081e4
 8016204:	2000b8e8 	.word	0x2000b8e8

08016208 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b08a      	sub	sp, #40	; 0x28
 801620c:	af04      	add	r7, sp, #16
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	60b9      	str	r1, [r7, #8]
 8016212:	607a      	str	r2, [r7, #4]
 8016214:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d009      	beq.n	8016234 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d003      	beq.n	801622e <ip4_output_if+0x26>
 8016226:	68bb      	ldr	r3, [r7, #8]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d102      	bne.n	8016234 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801622e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016230:	3304      	adds	r3, #4
 8016232:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016234:	78fa      	ldrb	r2, [r7, #3]
 8016236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016238:	9302      	str	r3, [sp, #8]
 801623a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801623e:	9301      	str	r3, [sp, #4]
 8016240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016244:	9300      	str	r3, [sp, #0]
 8016246:	4613      	mov	r3, r2
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	6979      	ldr	r1, [r7, #20]
 801624c:	68f8      	ldr	r0, [r7, #12]
 801624e:	f000 f805 	bl	801625c <ip4_output_if_src>
 8016252:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016254:	4618      	mov	r0, r3
 8016256:	3718      	adds	r7, #24
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}

0801625c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b088      	sub	sp, #32
 8016260:	af00      	add	r7, sp, #0
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	60b9      	str	r1, [r7, #8]
 8016266:	607a      	str	r2, [r7, #4]
 8016268:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	7b9b      	ldrb	r3, [r3, #14]
 801626e:	2b01      	cmp	r3, #1
 8016270:	d006      	beq.n	8016280 <ip4_output_if_src+0x24>
 8016272:	4b4b      	ldr	r3, [pc, #300]	; (80163a0 <ip4_output_if_src+0x144>)
 8016274:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016278:	494a      	ldr	r1, [pc, #296]	; (80163a4 <ip4_output_if_src+0x148>)
 801627a:	484b      	ldr	r0, [pc, #300]	; (80163a8 <ip4_output_if_src+0x14c>)
 801627c:	f001 fba6 	bl	80179cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d060      	beq.n	8016348 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016286:	2314      	movs	r3, #20
 8016288:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801628a:	2114      	movs	r1, #20
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f7f7 fcf7 	bl	800dc80 <pbuf_add_header>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d002      	beq.n	801629e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016298:	f06f 0301 	mvn.w	r3, #1
 801629c:	e07c      	b.n	8016398 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	895b      	ldrh	r3, [r3, #10]
 80162a8:	2b13      	cmp	r3, #19
 80162aa:	d806      	bhi.n	80162ba <ip4_output_if_src+0x5e>
 80162ac:	4b3c      	ldr	r3, [pc, #240]	; (80163a0 <ip4_output_if_src+0x144>)
 80162ae:	f44f 7262 	mov.w	r2, #904	; 0x388
 80162b2:	493e      	ldr	r1, [pc, #248]	; (80163ac <ip4_output_if_src+0x150>)
 80162b4:	483c      	ldr	r0, [pc, #240]	; (80163a8 <ip4_output_if_src+0x14c>)
 80162b6:	f001 fb89 	bl	80179cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	78fa      	ldrb	r2, [r7, #3]
 80162be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80162c0:	69fb      	ldr	r3, [r7, #28]
 80162c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80162c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681a      	ldr	r2, [r3, #0]
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80162d0:	8b7b      	ldrh	r3, [r7, #26]
 80162d2:	089b      	lsrs	r3, r3, #2
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	b2db      	uxtb	r3, r3
 80162d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162dc:	b2da      	uxtb	r2, r3
 80162de:	69fb      	ldr	r3, [r7, #28]
 80162e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80162e2:	69fb      	ldr	r3, [r7, #28]
 80162e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80162e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80162ea:	68fb      	ldr	r3, [r7, #12]
 80162ec:	891b      	ldrh	r3, [r3, #8]
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f6 f9b0 	bl	800c654 <lwip_htons>
 80162f4:	4603      	mov	r3, r0
 80162f6:	461a      	mov	r2, r3
 80162f8:	69fb      	ldr	r3, [r7, #28]
 80162fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	2200      	movs	r2, #0
 8016300:	719a      	strb	r2, [r3, #6]
 8016302:	2200      	movs	r2, #0
 8016304:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016306:	4b2a      	ldr	r3, [pc, #168]	; (80163b0 <ip4_output_if_src+0x154>)
 8016308:	881b      	ldrh	r3, [r3, #0]
 801630a:	4618      	mov	r0, r3
 801630c:	f7f6 f9a2 	bl	800c654 <lwip_htons>
 8016310:	4603      	mov	r3, r0
 8016312:	461a      	mov	r2, r3
 8016314:	69fb      	ldr	r3, [r7, #28]
 8016316:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016318:	4b25      	ldr	r3, [pc, #148]	; (80163b0 <ip4_output_if_src+0x154>)
 801631a:	881b      	ldrh	r3, [r3, #0]
 801631c:	3301      	adds	r3, #1
 801631e:	b29a      	uxth	r2, r3
 8016320:	4b23      	ldr	r3, [pc, #140]	; (80163b0 <ip4_output_if_src+0x154>)
 8016322:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016324:	68bb      	ldr	r3, [r7, #8]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d104      	bne.n	8016334 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801632a:	4b22      	ldr	r3, [pc, #136]	; (80163b4 <ip4_output_if_src+0x158>)
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	69fb      	ldr	r3, [r7, #28]
 8016330:	60da      	str	r2, [r3, #12]
 8016332:	e003      	b.n	801633c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	681a      	ldr	r2, [r3, #0]
 8016338:	69fb      	ldr	r3, [r7, #28]
 801633a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801633c:	69fb      	ldr	r3, [r7, #28]
 801633e:	2200      	movs	r2, #0
 8016340:	729a      	strb	r2, [r3, #10]
 8016342:	2200      	movs	r2, #0
 8016344:	72da      	strb	r2, [r3, #11]
 8016346:	e00f      	b.n	8016368 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	895b      	ldrh	r3, [r3, #10]
 801634c:	2b13      	cmp	r3, #19
 801634e:	d802      	bhi.n	8016356 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016350:	f06f 0301 	mvn.w	r3, #1
 8016354:	e020      	b.n	8016398 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	691b      	ldr	r3, [r3, #16]
 8016360:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016362:	f107 0314 	add.w	r3, r7, #20
 8016366:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801636a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00c      	beq.n	801638a <ip4_output_if_src+0x12e>
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	891a      	ldrh	r2, [r3, #8]
 8016374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016378:	429a      	cmp	r2, r3
 801637a:	d906      	bls.n	801638a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016380:	68f8      	ldr	r0, [r7, #12]
 8016382:	f000 ff09 	bl	8017198 <ip4_frag>
 8016386:	4603      	mov	r3, r0
 8016388:	e006      	b.n	8016398 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638c:	695b      	ldr	r3, [r3, #20]
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	68f9      	ldr	r1, [r7, #12]
 8016392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016394:	4798      	blx	r3
 8016396:	4603      	mov	r3, r0
}
 8016398:	4618      	mov	r0, r3
 801639a:	3720      	adds	r7, #32
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}
 80163a0:	0801bf78 	.word	0x0801bf78
 80163a4:	0801bfac 	.word	0x0801bfac
 80163a8:	0801bfb8 	.word	0x0801bfb8
 80163ac:	0801bfe0 	.word	0x0801bfe0
 80163b0:	20004b36 	.word	0x20004b36
 80163b4:	0801c48c 	.word	0x0801c48c

080163b8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80163b8:	b480      	push	{r7}
 80163ba:	b085      	sub	sp, #20
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163cc:	d002      	beq.n	80163d4 <ip4_addr_isbroadcast_u32+0x1c>
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d101      	bne.n	80163d8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80163d4:	2301      	movs	r3, #1
 80163d6:	e02a      	b.n	801642e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80163de:	f003 0302 	and.w	r3, r3, #2
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80163e6:	2300      	movs	r3, #0
 80163e8:	e021      	b.n	801642e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	3304      	adds	r3, #4
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d101      	bne.n	80163fa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80163f6:	2300      	movs	r3, #0
 80163f8:	e019      	b.n	801642e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80163fa:	68fa      	ldr	r2, [r7, #12]
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	3304      	adds	r3, #4
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	405a      	eors	r2, r3
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	3308      	adds	r3, #8
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	4013      	ands	r3, r2
 801640c:	2b00      	cmp	r3, #0
 801640e:	d10d      	bne.n	801642c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	3308      	adds	r3, #8
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	43da      	mvns	r2, r3
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801641c:	683b      	ldr	r3, [r7, #0]
 801641e:	3308      	adds	r3, #8
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016424:	429a      	cmp	r2, r3
 8016426:	d101      	bne.n	801642c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016428:	2301      	movs	r3, #1
 801642a:	e000      	b.n	801642e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801642c:	2300      	movs	r3, #0
  }
}
 801642e:	4618      	mov	r0, r3
 8016430:	3714      	adds	r7, #20
 8016432:	46bd      	mov	sp, r7
 8016434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016438:	4770      	bx	lr
	...

0801643c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b08a      	sub	sp, #40	; 0x28
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8016446:	f107 030c 	add.w	r3, r7, #12
 801644a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8016454:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016458:	3301      	adds	r3, #1
 801645a:	4a89      	ldr	r2, [pc, #548]	; (8016680 <ip4addr_aton+0x244>)
 801645c:	4413      	add	r3, r2
 801645e:	781b      	ldrb	r3, [r3, #0]
 8016460:	f003 0304 	and.w	r3, r3, #4
 8016464:	2b00      	cmp	r3, #0
 8016466:	d101      	bne.n	801646c <ip4addr_aton+0x30>
      return 0;
 8016468:	2300      	movs	r3, #0
 801646a:	e105      	b.n	8016678 <ip4addr_aton+0x23c>
    }
    val = 0;
 801646c:	2300      	movs	r3, #0
 801646e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8016470:	230a      	movs	r3, #10
 8016472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8016476:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801647a:	2b30      	cmp	r3, #48	; 0x30
 801647c:	d11c      	bne.n	80164b8 <ip4addr_aton+0x7c>
      c = *++cp;
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	3301      	adds	r3, #1
 8016482:	607b      	str	r3, [r7, #4]
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801648c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016490:	2b78      	cmp	r3, #120	; 0x78
 8016492:	d003      	beq.n	801649c <ip4addr_aton+0x60>
 8016494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016498:	2b58      	cmp	r3, #88	; 0x58
 801649a:	d10a      	bne.n	80164b2 <ip4addr_aton+0x76>
        base = 16;
 801649c:	2310      	movs	r3, #16
 801649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	3301      	adds	r3, #1
 80164a6:	607b      	str	r3, [r7, #4]
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	781b      	ldrb	r3, [r3, #0]
 80164ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80164b0:	e002      	b.n	80164b8 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 80164b2:	2308      	movs	r3, #8
 80164b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 80164b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164bc:	3301      	adds	r3, #1
 80164be:	4a70      	ldr	r2, [pc, #448]	; (8016680 <ip4addr_aton+0x244>)
 80164c0:	4413      	add	r3, r2
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	f003 0304 	and.w	r3, r3, #4
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d011      	beq.n	80164f0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80164cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164d2:	fb02 f203 	mul.w	r2, r2, r3
 80164d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164da:	4413      	add	r3, r2
 80164dc:	3b30      	subs	r3, #48	; 0x30
 80164de:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	3301      	adds	r3, #1
 80164e4:	607b      	str	r3, [r7, #4]
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80164ee:	e7e3      	b.n	80164b8 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80164f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80164f4:	2b10      	cmp	r3, #16
 80164f6:	d127      	bne.n	8016548 <ip4addr_aton+0x10c>
 80164f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80164fc:	3301      	adds	r3, #1
 80164fe:	4a60      	ldr	r2, [pc, #384]	; (8016680 <ip4addr_aton+0x244>)
 8016500:	4413      	add	r3, r2
 8016502:	781b      	ldrb	r3, [r3, #0]
 8016504:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016508:	2b00      	cmp	r3, #0
 801650a:	d01d      	beq.n	8016548 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650e:	011b      	lsls	r3, r3, #4
 8016510:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016514:	f102 010a 	add.w	r1, r2, #10
 8016518:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801651c:	3201      	adds	r2, #1
 801651e:	4858      	ldr	r0, [pc, #352]	; (8016680 <ip4addr_aton+0x244>)
 8016520:	4402      	add	r2, r0
 8016522:	7812      	ldrb	r2, [r2, #0]
 8016524:	f002 0203 	and.w	r2, r2, #3
 8016528:	2a02      	cmp	r2, #2
 801652a:	d101      	bne.n	8016530 <ip4addr_aton+0xf4>
 801652c:	2261      	movs	r2, #97	; 0x61
 801652e:	e000      	b.n	8016532 <ip4addr_aton+0xf6>
 8016530:	2241      	movs	r2, #65	; 0x41
 8016532:	1a8a      	subs	r2, r1, r2
 8016534:	4313      	orrs	r3, r2
 8016536:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	3301      	adds	r3, #1
 801653c:	607b      	str	r3, [r7, #4]
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8016546:	e7b7      	b.n	80164b8 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8016548:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801654c:	2b2e      	cmp	r3, #46	; 0x2e
 801654e:	d114      	bne.n	801657a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8016550:	f107 030c 	add.w	r3, r7, #12
 8016554:	330c      	adds	r3, #12
 8016556:	69fa      	ldr	r2, [r7, #28]
 8016558:	429a      	cmp	r2, r3
 801655a:	d301      	bcc.n	8016560 <ip4addr_aton+0x124>
        return 0;
 801655c:	2300      	movs	r3, #0
 801655e:	e08b      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	1d1a      	adds	r2, r3, #4
 8016564:	61fa      	str	r2, [r7, #28]
 8016566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016568:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	3301      	adds	r3, #1
 801656e:	607b      	str	r3, [r7, #4]
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8016578:	e76c      	b.n	8016454 <ip4addr_aton+0x18>
    } else {
      break;
 801657a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801657c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016580:	2b00      	cmp	r3, #0
 8016582:	d00b      	beq.n	801659c <ip4addr_aton+0x160>
 8016584:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016588:	3301      	adds	r3, #1
 801658a:	4a3d      	ldr	r2, [pc, #244]	; (8016680 <ip4addr_aton+0x244>)
 801658c:	4413      	add	r3, r2
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	f003 0308 	and.w	r3, r3, #8
 8016594:	2b00      	cmp	r3, #0
 8016596:	d101      	bne.n	801659c <ip4addr_aton+0x160>
    return 0;
 8016598:	2300      	movs	r3, #0
 801659a:	e06d      	b.n	8016678 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801659c:	f107 030c 	add.w	r3, r7, #12
 80165a0:	69fa      	ldr	r2, [r7, #28]
 80165a2:	1ad3      	subs	r3, r2, r3
 80165a4:	109b      	asrs	r3, r3, #2
 80165a6:	3301      	adds	r3, #1
 80165a8:	2b04      	cmp	r3, #4
 80165aa:	d853      	bhi.n	8016654 <ip4addr_aton+0x218>
 80165ac:	a201      	add	r2, pc, #4	; (adr r2, 80165b4 <ip4addr_aton+0x178>)
 80165ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b2:	bf00      	nop
 80165b4:	080165c9 	.word	0x080165c9
 80165b8:	08016663 	.word	0x08016663
 80165bc:	080165cd 	.word	0x080165cd
 80165c0:	080165ef 	.word	0x080165ef
 80165c4:	0801661d 	.word	0x0801661d

    case 0:
      return 0;       /* initial nondigit */
 80165c8:	2300      	movs	r3, #0
 80165ca:	e055      	b.n	8016678 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80165cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80165d2:	d301      	bcc.n	80165d8 <ip4addr_aton+0x19c>
        return 0;
 80165d4:	2300      	movs	r3, #0
 80165d6:	e04f      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2bff      	cmp	r3, #255	; 0xff
 80165dc:	d901      	bls.n	80165e2 <ip4addr_aton+0x1a6>
        return 0;
 80165de:	2300      	movs	r3, #0
 80165e0:	e04a      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	061b      	lsls	r3, r3, #24
 80165e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165e8:	4313      	orrs	r3, r2
 80165ea:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80165ec:	e03a      	b.n	8016664 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80165ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165f4:	d301      	bcc.n	80165fa <ip4addr_aton+0x1be>
        return 0;
 80165f6:	2300      	movs	r3, #0
 80165f8:	e03e      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	2bff      	cmp	r3, #255	; 0xff
 80165fe:	d802      	bhi.n	8016606 <ip4addr_aton+0x1ca>
 8016600:	693b      	ldr	r3, [r7, #16]
 8016602:	2bff      	cmp	r3, #255	; 0xff
 8016604:	d901      	bls.n	801660a <ip4addr_aton+0x1ce>
        return 0;
 8016606:	2300      	movs	r3, #0
 8016608:	e036      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	061a      	lsls	r2, r3, #24
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	041b      	lsls	r3, r3, #16
 8016612:	4313      	orrs	r3, r2
 8016614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016616:	4313      	orrs	r3, r2
 8016618:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801661a:	e023      	b.n	8016664 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661e:	2bff      	cmp	r3, #255	; 0xff
 8016620:	d901      	bls.n	8016626 <ip4addr_aton+0x1ea>
        return 0;
 8016622:	2300      	movs	r3, #0
 8016624:	e028      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	2bff      	cmp	r3, #255	; 0xff
 801662a:	d805      	bhi.n	8016638 <ip4addr_aton+0x1fc>
 801662c:	693b      	ldr	r3, [r7, #16]
 801662e:	2bff      	cmp	r3, #255	; 0xff
 8016630:	d802      	bhi.n	8016638 <ip4addr_aton+0x1fc>
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	2bff      	cmp	r3, #255	; 0xff
 8016636:	d901      	bls.n	801663c <ip4addr_aton+0x200>
        return 0;
 8016638:	2300      	movs	r3, #0
 801663a:	e01d      	b.n	8016678 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	061a      	lsls	r2, r3, #24
 8016640:	693b      	ldr	r3, [r7, #16]
 8016642:	041b      	lsls	r3, r3, #16
 8016644:	431a      	orrs	r2, r3
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	021b      	lsls	r3, r3, #8
 801664a:	4313      	orrs	r3, r2
 801664c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801664e:	4313      	orrs	r3, r2
 8016650:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8016652:	e007      	b.n	8016664 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8016654:	4b0b      	ldr	r3, [pc, #44]	; (8016684 <ip4addr_aton+0x248>)
 8016656:	22f9      	movs	r2, #249	; 0xf9
 8016658:	490b      	ldr	r1, [pc, #44]	; (8016688 <ip4addr_aton+0x24c>)
 801665a:	480c      	ldr	r0, [pc, #48]	; (801668c <ip4addr_aton+0x250>)
 801665c:	f001 f9b6 	bl	80179cc <iprintf>
      break;
 8016660:	e000      	b.n	8016664 <ip4addr_aton+0x228>
      break;
 8016662:	bf00      	nop
  }
  if (addr) {
 8016664:	683b      	ldr	r3, [r7, #0]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d005      	beq.n	8016676 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801666a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801666c:	f7f6 f807 	bl	800c67e <lwip_htonl>
 8016670:	4602      	mov	r2, r0
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8016676:	2301      	movs	r3, #1
}
 8016678:	4618      	mov	r0, r3
 801667a:	3728      	adds	r7, #40	; 0x28
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	0801c49e 	.word	0x0801c49e
 8016684:	0801c010 	.word	0x0801c010
 8016688:	0801c04c 	.word	0x0801c04c
 801668c:	0801c058 	.word	0x0801c058

08016690 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b082      	sub	sp, #8
 8016694:	af00      	add	r7, sp, #0
 8016696:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8016698:	2210      	movs	r2, #16
 801669a:	4904      	ldr	r1, [pc, #16]	; (80166ac <ip4addr_ntoa+0x1c>)
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 f807 	bl	80166b0 <ip4addr_ntoa_r>
 80166a2:	4603      	mov	r3, r0
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3708      	adds	r7, #8
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20004b38 	.word	0x20004b38

080166b0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80166b0:	b480      	push	{r7}
 80166b2:	b08d      	sub	sp, #52	; 0x34
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	60f8      	str	r0, [r7, #12]
 80166b8:	60b9      	str	r1, [r7, #8]
 80166ba:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80166bc:	2300      	movs	r3, #0
 80166be:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80166c6:	68bb      	ldr	r3, [r7, #8]
 80166c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80166ca:	f107 0318 	add.w	r3, r7, #24
 80166ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80166d0:	2300      	movs	r3, #0
 80166d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166d6:	e059      	b.n	801678c <ip4addr_ntoa_r+0xdc>
    i = 0;
 80166d8:	2300      	movs	r3, #0
 80166da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80166de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166e0:	781a      	ldrb	r2, [r3, #0]
 80166e2:	4b33      	ldr	r3, [pc, #204]	; (80167b0 <ip4addr_ntoa_r+0x100>)
 80166e4:	fba3 1302 	umull	r1, r3, r3, r2
 80166e8:	08d9      	lsrs	r1, r3, #3
 80166ea:	460b      	mov	r3, r1
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	440b      	add	r3, r1
 80166f0:	005b      	lsls	r3, r3, #1
 80166f2:	1ad3      	subs	r3, r2, r3
 80166f4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80166f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	4a2d      	ldr	r2, [pc, #180]	; (80167b0 <ip4addr_ntoa_r+0x100>)
 80166fc:	fba2 2303 	umull	r2, r3, r2, r3
 8016700:	08db      	lsrs	r3, r3, #3
 8016702:	b2da      	uxtb	r2, r3
 8016704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016706:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8016708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801670c:	1c5a      	adds	r2, r3, #1
 801670e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8016712:	4619      	mov	r1, r3
 8016714:	7ffb      	ldrb	r3, [r7, #31]
 8016716:	3330      	adds	r3, #48	; 0x30
 8016718:	b2da      	uxtb	r2, r3
 801671a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801671e:	440b      	add	r3, r1
 8016720:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8016724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d1d8      	bne.n	80166de <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801672c:	e012      	b.n	8016754 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801672e:	6a3b      	ldr	r3, [r7, #32]
 8016730:	1c5a      	adds	r2, r3, #1
 8016732:	623a      	str	r2, [r7, #32]
 8016734:	687a      	ldr	r2, [r7, #4]
 8016736:	429a      	cmp	r2, r3
 8016738:	dc01      	bgt.n	801673e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801673a:	2300      	movs	r3, #0
 801673c:	e031      	b.n	80167a2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801673e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8016742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016744:	1c59      	adds	r1, r3, #1
 8016746:	62f9      	str	r1, [r7, #44]	; 0x2c
 8016748:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801674c:	440a      	add	r2, r1
 801674e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8016752:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8016754:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016758:	1e5a      	subs	r2, r3, #1
 801675a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801675e:	2b00      	cmp	r3, #0
 8016760:	d1e5      	bne.n	801672e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8016762:	6a3b      	ldr	r3, [r7, #32]
 8016764:	1c5a      	adds	r2, r3, #1
 8016766:	623a      	str	r2, [r7, #32]
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	429a      	cmp	r2, r3
 801676c:	dc01      	bgt.n	8016772 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801676e:	2300      	movs	r3, #0
 8016770:	e017      	b.n	80167a2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8016772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016774:	1c5a      	adds	r2, r3, #1
 8016776:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016778:	222e      	movs	r2, #46	; 0x2e
 801677a:	701a      	strb	r2, [r3, #0]
    ap++;
 801677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801677e:	3301      	adds	r3, #1
 8016780:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8016782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016786:	3301      	adds	r3, #1
 8016788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801678c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016790:	2b03      	cmp	r3, #3
 8016792:	d9a1      	bls.n	80166d8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8016794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016796:	3b01      	subs	r3, #1
 8016798:	62fb      	str	r3, [r7, #44]	; 0x2c
 801679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801679c:	2200      	movs	r2, #0
 801679e:	701a      	strb	r2, [r3, #0]
  return buf;
 80167a0:	68bb      	ldr	r3, [r7, #8]
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	3734      	adds	r7, #52	; 0x34
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr
 80167ae:	bf00      	nop
 80167b0:	cccccccd 	.word	0xcccccccd

080167b4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80167ba:	2300      	movs	r3, #0
 80167bc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80167be:	4b12      	ldr	r3, [pc, #72]	; (8016808 <ip_reass_tmr+0x54>)
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80167c4:	e018      	b.n	80167f8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	7fdb      	ldrb	r3, [r3, #31]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d00b      	beq.n	80167e6 <ip_reass_tmr+0x32>
      r->timer--;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	7fdb      	ldrb	r3, [r3, #31]
 80167d2:	3b01      	subs	r3, #1
 80167d4:	b2da      	uxtb	r2, r3
 80167d6:	68fb      	ldr	r3, [r7, #12]
 80167d8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	60fb      	str	r3, [r7, #12]
 80167e4:	e008      	b.n	80167f8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80167f0:	68b9      	ldr	r1, [r7, #8]
 80167f2:	6878      	ldr	r0, [r7, #4]
 80167f4:	f000 f80a 	bl	801680c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d1e3      	bne.n	80167c6 <ip_reass_tmr+0x12>
    }
  }
}
 80167fe:	bf00      	nop
 8016800:	bf00      	nop
 8016802:	3710      	adds	r7, #16
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	20004b48 	.word	0x20004b48

0801680c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b088      	sub	sp, #32
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016816:	2300      	movs	r3, #0
 8016818:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801681a:	683a      	ldr	r2, [r7, #0]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	429a      	cmp	r2, r3
 8016820:	d105      	bne.n	801682e <ip_reass_free_complete_datagram+0x22>
 8016822:	4b45      	ldr	r3, [pc, #276]	; (8016938 <ip_reass_free_complete_datagram+0x12c>)
 8016824:	22ab      	movs	r2, #171	; 0xab
 8016826:	4945      	ldr	r1, [pc, #276]	; (801693c <ip_reass_free_complete_datagram+0x130>)
 8016828:	4845      	ldr	r0, [pc, #276]	; (8016940 <ip_reass_free_complete_datagram+0x134>)
 801682a:	f001 f8cf 	bl	80179cc <iprintf>
  if (prev != NULL) {
 801682e:	683b      	ldr	r3, [r7, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d00a      	beq.n	801684a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	681b      	ldr	r3, [r3, #0]
 8016838:	687a      	ldr	r2, [r7, #4]
 801683a:	429a      	cmp	r2, r3
 801683c:	d005      	beq.n	801684a <ip_reass_free_complete_datagram+0x3e>
 801683e:	4b3e      	ldr	r3, [pc, #248]	; (8016938 <ip_reass_free_complete_datagram+0x12c>)
 8016840:	22ad      	movs	r2, #173	; 0xad
 8016842:	4940      	ldr	r1, [pc, #256]	; (8016944 <ip_reass_free_complete_datagram+0x138>)
 8016844:	483e      	ldr	r0, [pc, #248]	; (8016940 <ip_reass_free_complete_datagram+0x134>)
 8016846:	f001 f8c1 	bl	80179cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	889b      	ldrh	r3, [r3, #4]
 8016856:	b29b      	uxth	r3, r3
 8016858:	2b00      	cmp	r3, #0
 801685a:	d12a      	bne.n	80168b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	681a      	ldr	r2, [r3, #0]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801686a:	69bb      	ldr	r3, [r7, #24]
 801686c:	6858      	ldr	r0, [r3, #4]
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	3308      	adds	r3, #8
 8016872:	2214      	movs	r2, #20
 8016874:	4619      	mov	r1, r3
 8016876:	f001 f893 	bl	80179a0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801687a:	2101      	movs	r1, #1
 801687c:	69b8      	ldr	r0, [r7, #24]
 801687e:	f7ff fa8b 	bl	8015d98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016882:	69b8      	ldr	r0, [r7, #24]
 8016884:	f7f7 fb20 	bl	800dec8 <pbuf_clen>
 8016888:	4603      	mov	r3, r0
 801688a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801688c:	8bfa      	ldrh	r2, [r7, #30]
 801688e:	8a7b      	ldrh	r3, [r7, #18]
 8016890:	4413      	add	r3, r2
 8016892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016896:	db05      	blt.n	80168a4 <ip_reass_free_complete_datagram+0x98>
 8016898:	4b27      	ldr	r3, [pc, #156]	; (8016938 <ip_reass_free_complete_datagram+0x12c>)
 801689a:	22bc      	movs	r2, #188	; 0xbc
 801689c:	492a      	ldr	r1, [pc, #168]	; (8016948 <ip_reass_free_complete_datagram+0x13c>)
 801689e:	4828      	ldr	r0, [pc, #160]	; (8016940 <ip_reass_free_complete_datagram+0x134>)
 80168a0:	f001 f894 	bl	80179cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80168a4:	8bfa      	ldrh	r2, [r7, #30]
 80168a6:	8a7b      	ldrh	r3, [r7, #18]
 80168a8:	4413      	add	r3, r2
 80168aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80168ac:	69b8      	ldr	r0, [r7, #24]
 80168ae:	f7f7 fa7d 	bl	800ddac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80168b8:	e01f      	b.n	80168fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80168ba:	69bb      	ldr	r3, [r7, #24]
 80168bc:	685b      	ldr	r3, [r3, #4]
 80168be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80168c0:	69bb      	ldr	r3, [r7, #24]
 80168c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80168ca:	68f8      	ldr	r0, [r7, #12]
 80168cc:	f7f7 fafc 	bl	800dec8 <pbuf_clen>
 80168d0:	4603      	mov	r3, r0
 80168d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80168d4:	8bfa      	ldrh	r2, [r7, #30]
 80168d6:	8a7b      	ldrh	r3, [r7, #18]
 80168d8:	4413      	add	r3, r2
 80168da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168de:	db05      	blt.n	80168ec <ip_reass_free_complete_datagram+0xe0>
 80168e0:	4b15      	ldr	r3, [pc, #84]	; (8016938 <ip_reass_free_complete_datagram+0x12c>)
 80168e2:	22cc      	movs	r2, #204	; 0xcc
 80168e4:	4918      	ldr	r1, [pc, #96]	; (8016948 <ip_reass_free_complete_datagram+0x13c>)
 80168e6:	4816      	ldr	r0, [pc, #88]	; (8016940 <ip_reass_free_complete_datagram+0x134>)
 80168e8:	f001 f870 	bl	80179cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80168ec:	8bfa      	ldrh	r2, [r7, #30]
 80168ee:	8a7b      	ldrh	r3, [r7, #18]
 80168f0:	4413      	add	r3, r2
 80168f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	f7f7 fa59 	bl	800ddac <pbuf_free>
  while (p != NULL) {
 80168fa:	69bb      	ldr	r3, [r7, #24]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d1dc      	bne.n	80168ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016900:	6839      	ldr	r1, [r7, #0]
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f000 f8c2 	bl	8016a8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016908:	4b10      	ldr	r3, [pc, #64]	; (801694c <ip_reass_free_complete_datagram+0x140>)
 801690a:	881b      	ldrh	r3, [r3, #0]
 801690c:	8bfa      	ldrh	r2, [r7, #30]
 801690e:	429a      	cmp	r2, r3
 8016910:	d905      	bls.n	801691e <ip_reass_free_complete_datagram+0x112>
 8016912:	4b09      	ldr	r3, [pc, #36]	; (8016938 <ip_reass_free_complete_datagram+0x12c>)
 8016914:	22d2      	movs	r2, #210	; 0xd2
 8016916:	490e      	ldr	r1, [pc, #56]	; (8016950 <ip_reass_free_complete_datagram+0x144>)
 8016918:	4809      	ldr	r0, [pc, #36]	; (8016940 <ip_reass_free_complete_datagram+0x134>)
 801691a:	f001 f857 	bl	80179cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801691e:	4b0b      	ldr	r3, [pc, #44]	; (801694c <ip_reass_free_complete_datagram+0x140>)
 8016920:	881a      	ldrh	r2, [r3, #0]
 8016922:	8bfb      	ldrh	r3, [r7, #30]
 8016924:	1ad3      	subs	r3, r2, r3
 8016926:	b29a      	uxth	r2, r3
 8016928:	4b08      	ldr	r3, [pc, #32]	; (801694c <ip_reass_free_complete_datagram+0x140>)
 801692a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801692c:	8bfb      	ldrh	r3, [r7, #30]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3720      	adds	r7, #32
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
 8016936:	bf00      	nop
 8016938:	0801c080 	.word	0x0801c080
 801693c:	0801c0bc 	.word	0x0801c0bc
 8016940:	0801c0c8 	.word	0x0801c0c8
 8016944:	0801c0f0 	.word	0x0801c0f0
 8016948:	0801c104 	.word	0x0801c104
 801694c:	20004b4c 	.word	0x20004b4c
 8016950:	0801c124 	.word	0x0801c124

08016954 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b08a      	sub	sp, #40	; 0x28
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801695e:	2300      	movs	r3, #0
 8016960:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016962:	2300      	movs	r3, #0
 8016964:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016966:	2300      	movs	r3, #0
 8016968:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801696a:	2300      	movs	r3, #0
 801696c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801696e:	2300      	movs	r3, #0
 8016970:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016972:	4b28      	ldr	r3, [pc, #160]	; (8016a14 <ip_reass_remove_oldest_datagram+0xc0>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016978:	e030      	b.n	80169dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801697c:	695a      	ldr	r2, [r3, #20]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	429a      	cmp	r2, r3
 8016984:	d10c      	bne.n	80169a0 <ip_reass_remove_oldest_datagram+0x4c>
 8016986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016988:	699a      	ldr	r2, [r3, #24]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	691b      	ldr	r3, [r3, #16]
 801698e:	429a      	cmp	r2, r3
 8016990:	d106      	bne.n	80169a0 <ip_reass_remove_oldest_datagram+0x4c>
 8016992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016994:	899a      	ldrh	r2, [r3, #12]
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	889b      	ldrh	r3, [r3, #4]
 801699a:	b29b      	uxth	r3, r3
 801699c:	429a      	cmp	r2, r3
 801699e:	d014      	beq.n	80169ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80169a0:	693b      	ldr	r3, [r7, #16]
 80169a2:	3301      	adds	r3, #1
 80169a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80169a6:	6a3b      	ldr	r3, [r7, #32]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d104      	bne.n	80169b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80169ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	61bb      	str	r3, [r7, #24]
 80169b4:	e009      	b.n	80169ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80169b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b8:	7fda      	ldrb	r2, [r3, #31]
 80169ba:	6a3b      	ldr	r3, [r7, #32]
 80169bc:	7fdb      	ldrb	r3, [r3, #31]
 80169be:	429a      	cmp	r2, r3
 80169c0:	d803      	bhi.n	80169ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80169c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80169c6:	69fb      	ldr	r3, [r7, #28]
 80169c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80169ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d001      	beq.n	80169d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80169d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80169d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80169dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d1cb      	bne.n	801697a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80169e2:	6a3b      	ldr	r3, [r7, #32]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d008      	beq.n	80169fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80169e8:	69b9      	ldr	r1, [r7, #24]
 80169ea:	6a38      	ldr	r0, [r7, #32]
 80169ec:	f7ff ff0e 	bl	801680c <ip_reass_free_complete_datagram>
 80169f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80169f2:	697a      	ldr	r2, [r7, #20]
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	4413      	add	r3, r2
 80169f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80169fa:	697a      	ldr	r2, [r7, #20]
 80169fc:	683b      	ldr	r3, [r7, #0]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	da02      	bge.n	8016a08 <ip_reass_remove_oldest_datagram+0xb4>
 8016a02:	693b      	ldr	r3, [r7, #16]
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	dcac      	bgt.n	8016962 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016a08:	697b      	ldr	r3, [r7, #20]
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3728      	adds	r7, #40	; 0x28
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}
 8016a12:	bf00      	nop
 8016a14:	20004b48 	.word	0x20004b48

08016a18 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b084      	sub	sp, #16
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016a22:	2004      	movs	r0, #4
 8016a24:	f7f6 facc 	bl	800cfc0 <memp_malloc>
 8016a28:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d110      	bne.n	8016a52 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016a30:	6839      	ldr	r1, [r7, #0]
 8016a32:	6878      	ldr	r0, [r7, #4]
 8016a34:	f7ff ff8e 	bl	8016954 <ip_reass_remove_oldest_datagram>
 8016a38:	4602      	mov	r2, r0
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	4293      	cmp	r3, r2
 8016a3e:	dc03      	bgt.n	8016a48 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016a40:	2004      	movs	r0, #4
 8016a42:	f7f6 fabd 	bl	800cfc0 <memp_malloc>
 8016a46:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d101      	bne.n	8016a52 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	e016      	b.n	8016a80 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016a52:	2220      	movs	r2, #32
 8016a54:	2100      	movs	r1, #0
 8016a56:	68f8      	ldr	r0, [r7, #12]
 8016a58:	f000 ffb0 	bl	80179bc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	220f      	movs	r2, #15
 8016a60:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016a62:	4b09      	ldr	r3, [pc, #36]	; (8016a88 <ip_reass_enqueue_new_datagram+0x70>)
 8016a64:	681a      	ldr	r2, [r3, #0]
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016a6a:	4a07      	ldr	r2, [pc, #28]	; (8016a88 <ip_reass_enqueue_new_datagram+0x70>)
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	3308      	adds	r3, #8
 8016a74:	2214      	movs	r2, #20
 8016a76:	6879      	ldr	r1, [r7, #4]
 8016a78:	4618      	mov	r0, r3
 8016a7a:	f000 ff91 	bl	80179a0 <memcpy>
  return ipr;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
}
 8016a80:	4618      	mov	r0, r3
 8016a82:	3710      	adds	r7, #16
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}
 8016a88:	20004b48 	.word	0x20004b48

08016a8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016a96:	4b10      	ldr	r3, [pc, #64]	; (8016ad8 <ip_reass_dequeue_datagram+0x4c>)
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	687a      	ldr	r2, [r7, #4]
 8016a9c:	429a      	cmp	r2, r3
 8016a9e:	d104      	bne.n	8016aaa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	4a0c      	ldr	r2, [pc, #48]	; (8016ad8 <ip_reass_dequeue_datagram+0x4c>)
 8016aa6:	6013      	str	r3, [r2, #0]
 8016aa8:	e00d      	b.n	8016ac6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d106      	bne.n	8016abe <ip_reass_dequeue_datagram+0x32>
 8016ab0:	4b0a      	ldr	r3, [pc, #40]	; (8016adc <ip_reass_dequeue_datagram+0x50>)
 8016ab2:	f240 1245 	movw	r2, #325	; 0x145
 8016ab6:	490a      	ldr	r1, [pc, #40]	; (8016ae0 <ip_reass_dequeue_datagram+0x54>)
 8016ab8:	480a      	ldr	r0, [pc, #40]	; (8016ae4 <ip_reass_dequeue_datagram+0x58>)
 8016aba:	f000 ff87 	bl	80179cc <iprintf>
    prev->next = ipr->next;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	683b      	ldr	r3, [r7, #0]
 8016ac4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016ac6:	6879      	ldr	r1, [r7, #4]
 8016ac8:	2004      	movs	r0, #4
 8016aca:	f7f6 facb 	bl	800d064 <memp_free>
}
 8016ace:	bf00      	nop
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	20004b48 	.word	0x20004b48
 8016adc:	0801c080 	.word	0x0801c080
 8016ae0:	0801c148 	.word	0x0801c148
 8016ae4:	0801c0c8 	.word	0x0801c0c8

08016ae8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b08c      	sub	sp, #48	; 0x30
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016af4:	2300      	movs	r3, #0
 8016af6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016af8:	2301      	movs	r3, #1
 8016afa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	685b      	ldr	r3, [r3, #4]
 8016b00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	885b      	ldrh	r3, [r3, #2]
 8016b06:	b29b      	uxth	r3, r3
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7f5 fda3 	bl	800c654 <lwip_htons>
 8016b0e:	4603      	mov	r3, r0
 8016b10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	f003 030f 	and.w	r3, r3, #15
 8016b1a:	b2db      	uxtb	r3, r3
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016b20:	7e7b      	ldrb	r3, [r7, #25]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	8b7a      	ldrh	r2, [r7, #26]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d202      	bcs.n	8016b30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b2e:	e135      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016b30:	7e7b      	ldrb	r3, [r7, #25]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	8b7a      	ldrh	r2, [r7, #26]
 8016b36:	1ad3      	subs	r3, r2, r3
 8016b38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016b3a:	69fb      	ldr	r3, [r7, #28]
 8016b3c:	88db      	ldrh	r3, [r3, #6]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	4618      	mov	r0, r3
 8016b42:	f7f5 fd87 	bl	800c654 <lwip_htons>
 8016b46:	4603      	mov	r3, r0
 8016b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016b52:	68bb      	ldr	r3, [r7, #8]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	701a      	strb	r2, [r3, #0]
 8016b5e:	2200      	movs	r2, #0
 8016b60:	705a      	strb	r2, [r3, #1]
 8016b62:	2200      	movs	r2, #0
 8016b64:	709a      	strb	r2, [r3, #2]
 8016b66:	2200      	movs	r2, #0
 8016b68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b6c:	8afa      	ldrh	r2, [r7, #22]
 8016b6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016b70:	8afa      	ldrh	r2, [r7, #22]
 8016b72:	8b7b      	ldrh	r3, [r7, #26]
 8016b74:	4413      	add	r3, r2
 8016b76:	b29a      	uxth	r2, r3
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7e:	88db      	ldrh	r3, [r3, #6]
 8016b80:	b29b      	uxth	r3, r3
 8016b82:	8afa      	ldrh	r2, [r7, #22]
 8016b84:	429a      	cmp	r2, r3
 8016b86:	d902      	bls.n	8016b8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016b88:	f04f 33ff 	mov.w	r3, #4294967295
 8016b8c:	e106      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	685b      	ldr	r3, [r3, #4]
 8016b92:	627b      	str	r3, [r7, #36]	; 0x24
 8016b94:	e068      	b.n	8016c68 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b9e:	889b      	ldrh	r3, [r3, #4]
 8016ba0:	b29a      	uxth	r2, r3
 8016ba2:	693b      	ldr	r3, [r7, #16]
 8016ba4:	889b      	ldrh	r3, [r3, #4]
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d235      	bcs.n	8016c18 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d020      	beq.n	8016bfa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bba:	889b      	ldrh	r3, [r3, #4]
 8016bbc:	b29a      	uxth	r2, r3
 8016bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc0:	88db      	ldrh	r3, [r3, #6]
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	d307      	bcc.n	8016bd8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bca:	88db      	ldrh	r3, [r3, #6]
 8016bcc:	b29a      	uxth	r2, r3
 8016bce:	693b      	ldr	r3, [r7, #16]
 8016bd0:	889b      	ldrh	r3, [r3, #4]
 8016bd2:	b29b      	uxth	r3, r3
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d902      	bls.n	8016bde <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bdc:	e0de      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016be6:	88db      	ldrh	r3, [r3, #6]
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bec:	889b      	ldrh	r3, [r3, #4]
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d03d      	beq.n	8016c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016bf8:	e03a      	b.n	8016c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bfc:	88db      	ldrh	r3, [r3, #6]
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	693b      	ldr	r3, [r7, #16]
 8016c02:	889b      	ldrh	r3, [r3, #4]
 8016c04:	b29b      	uxth	r3, r3
 8016c06:	429a      	cmp	r2, r3
 8016c08:	d902      	bls.n	8016c10 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c0e:	e0c5      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	68ba      	ldr	r2, [r7, #8]
 8016c14:	605a      	str	r2, [r3, #4]
      break;
 8016c16:	e02b      	b.n	8016c70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c1a:	889b      	ldrh	r3, [r3, #4]
 8016c1c:	b29a      	uxth	r2, r3
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	889b      	ldrh	r3, [r3, #4]
 8016c22:	b29b      	uxth	r3, r3
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d102      	bne.n	8016c2e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c28:	f04f 33ff 	mov.w	r3, #4294967295
 8016c2c:	e0b6      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c30:	889b      	ldrh	r3, [r3, #4]
 8016c32:	b29a      	uxth	r2, r3
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	88db      	ldrh	r3, [r3, #6]
 8016c38:	b29b      	uxth	r3, r3
 8016c3a:	429a      	cmp	r2, r3
 8016c3c:	d202      	bcs.n	8016c44 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c42:	e0ab      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d009      	beq.n	8016c5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c4c:	88db      	ldrh	r3, [r3, #6]
 8016c4e:	b29a      	uxth	r2, r3
 8016c50:	693b      	ldr	r3, [r7, #16]
 8016c52:	889b      	ldrh	r3, [r3, #4]
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	429a      	cmp	r2, r3
 8016c58:	d001      	beq.n	8016c5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d193      	bne.n	8016b96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016c6e:	e000      	b.n	8016c72 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016c70:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d12d      	bne.n	8016cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d01c      	beq.n	8016cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c80:	88db      	ldrh	r3, [r3, #6]
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c86:	889b      	ldrh	r3, [r3, #4]
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	429a      	cmp	r2, r3
 8016c8c:	d906      	bls.n	8016c9c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016c8e:	4b45      	ldr	r3, [pc, #276]	; (8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016c90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016c94:	4944      	ldr	r1, [pc, #272]	; (8016da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016c96:	4845      	ldr	r0, [pc, #276]	; (8016dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016c98:	f000 fe98 	bl	80179cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c9e:	68ba      	ldr	r2, [r7, #8]
 8016ca0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca4:	88db      	ldrh	r3, [r3, #6]
 8016ca6:	b29a      	uxth	r2, r3
 8016ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016caa:	889b      	ldrh	r3, [r3, #4]
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	429a      	cmp	r2, r3
 8016cb0:	d010      	beq.n	8016cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	623b      	str	r3, [r7, #32]
 8016cb6:	e00d      	b.n	8016cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	685b      	ldr	r3, [r3, #4]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d006      	beq.n	8016cce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016cc0:	4b38      	ldr	r3, [pc, #224]	; (8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016cc2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016cc6:	493a      	ldr	r1, [pc, #232]	; (8016db0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016cc8:	4838      	ldr	r0, [pc, #224]	; (8016dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016cca:	f000 fe7f 	bl	80179cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	68ba      	ldr	r2, [r7, #8]
 8016cd2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d105      	bne.n	8016ce6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	7f9b      	ldrb	r3, [r3, #30]
 8016cde:	f003 0301 	and.w	r3, r3, #1
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d059      	beq.n	8016d9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016ce6:	6a3b      	ldr	r3, [r7, #32]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d04f      	beq.n	8016d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	685b      	ldr	r3, [r3, #4]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d006      	beq.n	8016d02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	685b      	ldr	r3, [r3, #4]
 8016cf8:	685b      	ldr	r3, [r3, #4]
 8016cfa:	889b      	ldrh	r3, [r3, #4]
 8016cfc:	b29b      	uxth	r3, r3
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d002      	beq.n	8016d08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	623b      	str	r3, [r7, #32]
 8016d06:	e041      	b.n	8016d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016d12:	e012      	b.n	8016d3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d1c:	88db      	ldrh	r3, [r3, #6]
 8016d1e:	b29a      	uxth	r2, r3
 8016d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d22:	889b      	ldrh	r3, [r3, #4]
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d002      	beq.n	8016d30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	623b      	str	r3, [r7, #32]
            break;
 8016d2e:	e007      	b.n	8016d40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d1e9      	bne.n	8016d14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016d40:	6a3b      	ldr	r3, [r7, #32]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d022      	beq.n	8016d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	685b      	ldr	r3, [r3, #4]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d106      	bne.n	8016d5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016d4e:	4b15      	ldr	r3, [pc, #84]	; (8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d50:	f240 12df 	movw	r2, #479	; 0x1df
 8016d54:	4917      	ldr	r1, [pc, #92]	; (8016db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016d56:	4815      	ldr	r0, [pc, #84]	; (8016dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d58:	f000 fe38 	bl	80179cc <iprintf>
          LWIP_ASSERT("sanity check",
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	685b      	ldr	r3, [r3, #4]
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d64:	429a      	cmp	r2, r3
 8016d66:	d106      	bne.n	8016d76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016d68:	4b0e      	ldr	r3, [pc, #56]	; (8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016d6e:	4911      	ldr	r1, [pc, #68]	; (8016db4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016d70:	480e      	ldr	r0, [pc, #56]	; (8016dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d72:	f000 fe2b 	bl	80179cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d006      	beq.n	8016d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016d7e:	4b09      	ldr	r3, [pc, #36]	; (8016da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016d80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016d84:	490c      	ldr	r1, [pc, #48]	; (8016db8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016d86:	4809      	ldr	r0, [pc, #36]	; (8016dac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016d88:	f000 fe20 	bl	80179cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016d8c:	6a3b      	ldr	r3, [r7, #32]
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	bf14      	ite	ne
 8016d92:	2301      	movne	r3, #1
 8016d94:	2300      	moveq	r3, #0
 8016d96:	b2db      	uxtb	r3, r3
 8016d98:	e000      	b.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3730      	adds	r7, #48	; 0x30
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}
 8016da4:	0801c080 	.word	0x0801c080
 8016da8:	0801c164 	.word	0x0801c164
 8016dac:	0801c0c8 	.word	0x0801c0c8
 8016db0:	0801c184 	.word	0x0801c184
 8016db4:	0801c1bc 	.word	0x0801c1bc
 8016db8:	0801c1cc 	.word	0x0801c1cc

08016dbc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b08e      	sub	sp, #56	; 0x38
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	685b      	ldr	r3, [r3, #4]
 8016dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	f003 030f 	and.w	r3, r3, #15
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	2b14      	cmp	r3, #20
 8016dda:	f040 8167 	bne.w	80170ac <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de0:	88db      	ldrh	r3, [r3, #6]
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	4618      	mov	r0, r3
 8016de6:	f7f5 fc35 	bl	800c654 <lwip_htons>
 8016dea:	4603      	mov	r3, r0
 8016dec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	00db      	lsls	r3, r3, #3
 8016df4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df8:	885b      	ldrh	r3, [r3, #2]
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f5 fc29 	bl	800c654 <lwip_htons>
 8016e02:	4603      	mov	r3, r0
 8016e04:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	f003 030f 	and.w	r3, r3, #15
 8016e0e:	b2db      	uxtb	r3, r3
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016e1a:	b29b      	uxth	r3, r3
 8016e1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e1e:	429a      	cmp	r2, r3
 8016e20:	f0c0 8146 	bcc.w	80170b0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016e2c:	1ad3      	subs	r3, r2, r3
 8016e2e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7f7 f849 	bl	800dec8 <pbuf_clen>
 8016e36:	4603      	mov	r3, r0
 8016e38:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016e3a:	4b9f      	ldr	r3, [pc, #636]	; (80170b8 <ip4_reass+0x2fc>)
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	461a      	mov	r2, r3
 8016e40:	8c3b      	ldrh	r3, [r7, #32]
 8016e42:	4413      	add	r3, r2
 8016e44:	2b0a      	cmp	r3, #10
 8016e46:	dd10      	ble.n	8016e6a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e48:	8c3b      	ldrh	r3, [r7, #32]
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016e4e:	f7ff fd81 	bl	8016954 <ip_reass_remove_oldest_datagram>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	f000 812d 	beq.w	80170b4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016e5a:	4b97      	ldr	r3, [pc, #604]	; (80170b8 <ip4_reass+0x2fc>)
 8016e5c:	881b      	ldrh	r3, [r3, #0]
 8016e5e:	461a      	mov	r2, r3
 8016e60:	8c3b      	ldrh	r3, [r7, #32]
 8016e62:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016e64:	2b0a      	cmp	r3, #10
 8016e66:	f300 8125 	bgt.w	80170b4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e6a:	4b94      	ldr	r3, [pc, #592]	; (80170bc <ip4_reass+0x300>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8016e70:	e015      	b.n	8016e9e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e74:	695a      	ldr	r2, [r3, #20]
 8016e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e78:	68db      	ldr	r3, [r3, #12]
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d10c      	bne.n	8016e98 <ip4_reass+0xdc>
 8016e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e80:	699a      	ldr	r2, [r3, #24]
 8016e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e84:	691b      	ldr	r3, [r3, #16]
 8016e86:	429a      	cmp	r2, r3
 8016e88:	d106      	bne.n	8016e98 <ip4_reass+0xdc>
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	899a      	ldrh	r2, [r3, #12]
 8016e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e90:	889b      	ldrh	r3, [r3, #4]
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d006      	beq.n	8016ea6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	633b      	str	r3, [r7, #48]	; 0x30
 8016e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d1e6      	bne.n	8016e72 <ip4_reass+0xb6>
 8016ea4:	e000      	b.n	8016ea8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016ea6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d109      	bne.n	8016ec2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016eae:	8c3b      	ldrh	r3, [r7, #32]
 8016eb0:	4619      	mov	r1, r3
 8016eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016eb4:	f7ff fdb0 	bl	8016a18 <ip_reass_enqueue_new_datagram>
 8016eb8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d11c      	bne.n	8016efa <ip4_reass+0x13e>
      goto nullreturn;
 8016ec0:	e109      	b.n	80170d6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec4:	88db      	ldrh	r3, [r3, #6]
 8016ec6:	b29b      	uxth	r3, r3
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f5 fbc3 	bl	800c654 <lwip_htons>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d110      	bne.n	8016efa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eda:	89db      	ldrh	r3, [r3, #14]
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7f5 fbb9 	bl	800c654 <lwip_htons>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d006      	beq.n	8016efa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eee:	3308      	adds	r3, #8
 8016ef0:	2214      	movs	r2, #20
 8016ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f000 fd53 	bl	80179a0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efc:	88db      	ldrh	r3, [r3, #6]
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	f003 0320 	and.w	r3, r3, #32
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	bf0c      	ite	eq
 8016f08:	2301      	moveq	r3, #1
 8016f0a:	2300      	movne	r3, #0
 8016f0c:	b2db      	uxtb	r3, r3
 8016f0e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00e      	beq.n	8016f34 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016f16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f1a:	4413      	add	r3, r2
 8016f1c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016f1e:	8b7a      	ldrh	r2, [r7, #26]
 8016f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f22:	429a      	cmp	r2, r3
 8016f24:	f0c0 80a0 	bcc.w	8017068 <ip4_reass+0x2ac>
 8016f28:	8b7b      	ldrh	r3, [r7, #26]
 8016f2a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016f2e:	4293      	cmp	r3, r2
 8016f30:	f200 809a 	bhi.w	8017068 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016f34:	69fa      	ldr	r2, [r7, #28]
 8016f36:	6879      	ldr	r1, [r7, #4]
 8016f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f3a:	f7ff fdd5 	bl	8016ae8 <ip_reass_chain_frag_into_datagram_and_validate>
 8016f3e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f46:	f000 8091 	beq.w	801706c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016f4a:	4b5b      	ldr	r3, [pc, #364]	; (80170b8 <ip4_reass+0x2fc>)
 8016f4c:	881a      	ldrh	r2, [r3, #0]
 8016f4e:	8c3b      	ldrh	r3, [r7, #32]
 8016f50:	4413      	add	r3, r2
 8016f52:	b29a      	uxth	r2, r3
 8016f54:	4b58      	ldr	r3, [pc, #352]	; (80170b8 <ip4_reass+0x2fc>)
 8016f56:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d00d      	beq.n	8016f7a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016f5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f62:	4413      	add	r3, r2
 8016f64:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f68:	8a7a      	ldrh	r2, [r7, #18]
 8016f6a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f6e:	7f9b      	ldrb	r3, [r3, #30]
 8016f70:	f043 0301 	orr.w	r3, r3, #1
 8016f74:	b2da      	uxtb	r2, r3
 8016f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f78:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016f7a:	697b      	ldr	r3, [r7, #20]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	d171      	bne.n	8017064 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f82:	8b9b      	ldrh	r3, [r3, #28]
 8016f84:	3314      	adds	r3, #20
 8016f86:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	685b      	ldr	r3, [r3, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9c:	3308      	adds	r3, #8
 8016f9e:	2214      	movs	r2, #20
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fa4:	f000 fcfc 	bl	80179a0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016fa8:	8a3b      	ldrh	r3, [r7, #16]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7f5 fb52 	bl	800c654 <lwip_htons>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fba:	2200      	movs	r2, #0
 8016fbc:	719a      	strb	r2, [r3, #6]
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc4:	2200      	movs	r2, #0
 8016fc6:	729a      	strb	r2, [r3, #10]
 8016fc8:	2200      	movs	r2, #0
 8016fca:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016fd2:	e00d      	b.n	8016ff0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016fda:	2114      	movs	r1, #20
 8016fdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016fde:	f7f6 fe5f 	bl	800dca0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016fe2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016fe4:	6878      	ldr	r0, [r7, #4]
 8016fe6:	f7f6 ffaf 	bl	800df48 <pbuf_cat>
      r = iprh->next_pbuf;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d1ee      	bne.n	8016fd4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016ff6:	4b31      	ldr	r3, [pc, #196]	; (80170bc <ip4_reass+0x300>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d102      	bne.n	8017006 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017000:	2300      	movs	r3, #0
 8017002:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017004:	e010      	b.n	8017028 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017006:	4b2d      	ldr	r3, [pc, #180]	; (80170bc <ip4_reass+0x300>)
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801700c:	e007      	b.n	801701e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801700e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017014:	429a      	cmp	r2, r3
 8017016:	d006      	beq.n	8017026 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017020:	2b00      	cmp	r3, #0
 8017022:	d1f4      	bne.n	801700e <ip4_reass+0x252>
 8017024:	e000      	b.n	8017028 <ip4_reass+0x26c>
          break;
 8017026:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801702a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801702c:	f7ff fd2e 	bl	8016a8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7f6 ff49 	bl	800dec8 <pbuf_clen>
 8017036:	4603      	mov	r3, r0
 8017038:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801703a:	4b1f      	ldr	r3, [pc, #124]	; (80170b8 <ip4_reass+0x2fc>)
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	8c3a      	ldrh	r2, [r7, #32]
 8017040:	429a      	cmp	r2, r3
 8017042:	d906      	bls.n	8017052 <ip4_reass+0x296>
 8017044:	4b1e      	ldr	r3, [pc, #120]	; (80170c0 <ip4_reass+0x304>)
 8017046:	f240 229b 	movw	r2, #667	; 0x29b
 801704a:	491e      	ldr	r1, [pc, #120]	; (80170c4 <ip4_reass+0x308>)
 801704c:	481e      	ldr	r0, [pc, #120]	; (80170c8 <ip4_reass+0x30c>)
 801704e:	f000 fcbd 	bl	80179cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017052:	4b19      	ldr	r3, [pc, #100]	; (80170b8 <ip4_reass+0x2fc>)
 8017054:	881a      	ldrh	r2, [r3, #0]
 8017056:	8c3b      	ldrh	r3, [r7, #32]
 8017058:	1ad3      	subs	r3, r2, r3
 801705a:	b29a      	uxth	r2, r3
 801705c:	4b16      	ldr	r3, [pc, #88]	; (80170b8 <ip4_reass+0x2fc>)
 801705e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	e03c      	b.n	80170de <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017064:	2300      	movs	r3, #0
 8017066:	e03a      	b.n	80170de <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017068:	bf00      	nop
 801706a:	e000      	b.n	801706e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801706c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017070:	2b00      	cmp	r3, #0
 8017072:	d106      	bne.n	8017082 <ip4_reass+0x2c6>
 8017074:	4b12      	ldr	r3, [pc, #72]	; (80170c0 <ip4_reass+0x304>)
 8017076:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801707a:	4914      	ldr	r1, [pc, #80]	; (80170cc <ip4_reass+0x310>)
 801707c:	4812      	ldr	r0, [pc, #72]	; (80170c8 <ip4_reass+0x30c>)
 801707e:	f000 fca5 	bl	80179cc <iprintf>
  if (ipr->p == NULL) {
 8017082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d124      	bne.n	80170d4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801708a:	4b0c      	ldr	r3, [pc, #48]	; (80170bc <ip4_reass+0x300>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017090:	429a      	cmp	r2, r3
 8017092:	d006      	beq.n	80170a2 <ip4_reass+0x2e6>
 8017094:	4b0a      	ldr	r3, [pc, #40]	; (80170c0 <ip4_reass+0x304>)
 8017096:	f240 22ab 	movw	r2, #683	; 0x2ab
 801709a:	490d      	ldr	r1, [pc, #52]	; (80170d0 <ip4_reass+0x314>)
 801709c:	480a      	ldr	r0, [pc, #40]	; (80170c8 <ip4_reass+0x30c>)
 801709e:	f000 fc95 	bl	80179cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80170a2:	2100      	movs	r1, #0
 80170a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170a6:	f7ff fcf1 	bl	8016a8c <ip_reass_dequeue_datagram>
 80170aa:	e014      	b.n	80170d6 <ip4_reass+0x31a>
    goto nullreturn;
 80170ac:	bf00      	nop
 80170ae:	e012      	b.n	80170d6 <ip4_reass+0x31a>
    goto nullreturn;
 80170b0:	bf00      	nop
 80170b2:	e010      	b.n	80170d6 <ip4_reass+0x31a>
      goto nullreturn;
 80170b4:	bf00      	nop
 80170b6:	e00e      	b.n	80170d6 <ip4_reass+0x31a>
 80170b8:	20004b4c 	.word	0x20004b4c
 80170bc:	20004b48 	.word	0x20004b48
 80170c0:	0801c080 	.word	0x0801c080
 80170c4:	0801c1f0 	.word	0x0801c1f0
 80170c8:	0801c0c8 	.word	0x0801c0c8
 80170cc:	0801c20c 	.word	0x0801c20c
 80170d0:	0801c218 	.word	0x0801c218
  }

nullreturn:
 80170d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f7f6 fe68 	bl	800ddac <pbuf_free>
  return NULL;
 80170dc:	2300      	movs	r3, #0
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3738      	adds	r7, #56	; 0x38
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop

080170e8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80170ec:	2005      	movs	r0, #5
 80170ee:	f7f5 ff67 	bl	800cfc0 <memp_malloc>
 80170f2:	4603      	mov	r3, r0
}
 80170f4:	4618      	mov	r0, r3
 80170f6:	bd80      	pop	{r7, pc}

080170f8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2b00      	cmp	r3, #0
 8017104:	d106      	bne.n	8017114 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017106:	4b07      	ldr	r3, [pc, #28]	; (8017124 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017108:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801710c:	4906      	ldr	r1, [pc, #24]	; (8017128 <ip_frag_free_pbuf_custom_ref+0x30>)
 801710e:	4807      	ldr	r0, [pc, #28]	; (801712c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017110:	f000 fc5c 	bl	80179cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017114:	6879      	ldr	r1, [r7, #4]
 8017116:	2005      	movs	r0, #5
 8017118:	f7f5 ffa4 	bl	800d064 <memp_free>
}
 801711c:	bf00      	nop
 801711e:	3708      	adds	r7, #8
 8017120:	46bd      	mov	sp, r7
 8017122:	bd80      	pop	{r7, pc}
 8017124:	0801c080 	.word	0x0801c080
 8017128:	0801c238 	.word	0x0801c238
 801712c:	0801c0c8 	.word	0x0801c0c8

08017130 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <ipfrag_free_pbuf_custom+0x20>
 8017142:	4b11      	ldr	r3, [pc, #68]	; (8017188 <ipfrag_free_pbuf_custom+0x58>)
 8017144:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017148:	4910      	ldr	r1, [pc, #64]	; (801718c <ipfrag_free_pbuf_custom+0x5c>)
 801714a:	4811      	ldr	r0, [pc, #68]	; (8017190 <ipfrag_free_pbuf_custom+0x60>)
 801714c:	f000 fc3e 	bl	80179cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017150:	68fa      	ldr	r2, [r7, #12]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	429a      	cmp	r2, r3
 8017156:	d006      	beq.n	8017166 <ipfrag_free_pbuf_custom+0x36>
 8017158:	4b0b      	ldr	r3, [pc, #44]	; (8017188 <ipfrag_free_pbuf_custom+0x58>)
 801715a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801715e:	490d      	ldr	r1, [pc, #52]	; (8017194 <ipfrag_free_pbuf_custom+0x64>)
 8017160:	480b      	ldr	r0, [pc, #44]	; (8017190 <ipfrag_free_pbuf_custom+0x60>)
 8017162:	f000 fc33 	bl	80179cc <iprintf>
  if (pcr->original != NULL) {
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	695b      	ldr	r3, [r3, #20]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d004      	beq.n	8017178 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	695b      	ldr	r3, [r3, #20]
 8017172:	4618      	mov	r0, r3
 8017174:	f7f6 fe1a 	bl	800ddac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017178:	68f8      	ldr	r0, [r7, #12]
 801717a:	f7ff ffbd 	bl	80170f8 <ip_frag_free_pbuf_custom_ref>
}
 801717e:	bf00      	nop
 8017180:	3710      	adds	r7, #16
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}
 8017186:	bf00      	nop
 8017188:	0801c080 	.word	0x0801c080
 801718c:	0801c244 	.word	0x0801c244
 8017190:	0801c0c8 	.word	0x0801c0c8
 8017194:	0801c250 	.word	0x0801c250

08017198 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b094      	sub	sp, #80	; 0x50
 801719c:	af02      	add	r7, sp, #8
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	60b9      	str	r1, [r7, #8]
 80171a2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80171ae:	3b14      	subs	r3, #20
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	da00      	bge.n	80171b6 <ip4_frag+0x1e>
 80171b4:	3307      	adds	r3, #7
 80171b6:	10db      	asrs	r3, r3, #3
 80171b8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80171ba:	2314      	movs	r3, #20
 80171bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80171c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80171c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	f003 030f 	and.w	r3, r3, #15
 80171d0:	b2db      	uxtb	r3, r3
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	2b14      	cmp	r3, #20
 80171d8:	d002      	beq.n	80171e0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80171da:	f06f 0305 	mvn.w	r3, #5
 80171de:	e110      	b.n	8017402 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	895b      	ldrh	r3, [r3, #10]
 80171e4:	2b13      	cmp	r3, #19
 80171e6:	d809      	bhi.n	80171fc <ip4_frag+0x64>
 80171e8:	4b88      	ldr	r3, [pc, #544]	; (801740c <ip4_frag+0x274>)
 80171ea:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80171ee:	4988      	ldr	r1, [pc, #544]	; (8017410 <ip4_frag+0x278>)
 80171f0:	4888      	ldr	r0, [pc, #544]	; (8017414 <ip4_frag+0x27c>)
 80171f2:	f000 fbeb 	bl	80179cc <iprintf>
 80171f6:	f06f 0305 	mvn.w	r3, #5
 80171fa:	e102      	b.n	8017402 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80171fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fe:	88db      	ldrh	r3, [r3, #6]
 8017200:	b29b      	uxth	r3, r3
 8017202:	4618      	mov	r0, r3
 8017204:	f7f5 fa26 	bl	800c654 <lwip_htons>
 8017208:	4603      	mov	r3, r0
 801720a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801720c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801720e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017212:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017216:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801721c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	891b      	ldrh	r3, [r3, #8]
 8017222:	3b14      	subs	r3, #20
 8017224:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017228:	e0e1      	b.n	80173ee <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801722a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801722c:	00db      	lsls	r3, r3, #3
 801722e:	b29b      	uxth	r3, r3
 8017230:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017234:	4293      	cmp	r3, r2
 8017236:	bf28      	it	cs
 8017238:	4613      	movcs	r3, r2
 801723a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801723c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017240:	2114      	movs	r1, #20
 8017242:	200e      	movs	r0, #14
 8017244:	f7f6 face 	bl	800d7e4 <pbuf_alloc>
 8017248:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801724c:	2b00      	cmp	r3, #0
 801724e:	f000 80d5 	beq.w	80173fc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017254:	895b      	ldrh	r3, [r3, #10]
 8017256:	2b13      	cmp	r3, #19
 8017258:	d806      	bhi.n	8017268 <ip4_frag+0xd0>
 801725a:	4b6c      	ldr	r3, [pc, #432]	; (801740c <ip4_frag+0x274>)
 801725c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017260:	496d      	ldr	r1, [pc, #436]	; (8017418 <ip4_frag+0x280>)
 8017262:	486c      	ldr	r0, [pc, #432]	; (8017414 <ip4_frag+0x27c>)
 8017264:	f000 fbb2 	bl	80179cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	2214      	movs	r2, #20
 801726e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017270:	4618      	mov	r0, r3
 8017272:	f000 fb95 	bl	80179a0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017278:	685b      	ldr	r3, [r3, #4]
 801727a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801727c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801727e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017282:	e064      	b.n	801734e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	895a      	ldrh	r2, [r3, #10]
 8017288:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801728a:	1ad3      	subs	r3, r2, r3
 801728c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	895b      	ldrh	r3, [r3, #10]
 8017292:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017294:	429a      	cmp	r2, r3
 8017296:	d906      	bls.n	80172a6 <ip4_frag+0x10e>
 8017298:	4b5c      	ldr	r3, [pc, #368]	; (801740c <ip4_frag+0x274>)
 801729a:	f240 322d 	movw	r2, #813	; 0x32d
 801729e:	495f      	ldr	r1, [pc, #380]	; (801741c <ip4_frag+0x284>)
 80172a0:	485c      	ldr	r0, [pc, #368]	; (8017414 <ip4_frag+0x27c>)
 80172a2:	f000 fb93 	bl	80179cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80172a6:	8bfa      	ldrh	r2, [r7, #30]
 80172a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80172ac:	4293      	cmp	r3, r2
 80172ae:	bf28      	it	cs
 80172b0:	4613      	movcs	r3, r2
 80172b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80172b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d105      	bne.n	80172ca <ip4_frag+0x132>
        poff = 0;
 80172be:	2300      	movs	r3, #0
 80172c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	60fb      	str	r3, [r7, #12]
        continue;
 80172c8:	e041      	b.n	801734e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80172ca:	f7ff ff0d 	bl	80170e8 <ip_frag_alloc_pbuf_custom_ref>
 80172ce:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80172d0:	69bb      	ldr	r3, [r7, #24]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d103      	bne.n	80172de <ip4_frag+0x146>
        pbuf_free(rambuf);
 80172d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172d8:	f7f6 fd68 	bl	800ddac <pbuf_free>
        goto memerr;
 80172dc:	e08f      	b.n	80173fe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80172de:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80172e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80172e6:	4413      	add	r3, r2
 80172e8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80172ec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80172f0:	9201      	str	r2, [sp, #4]
 80172f2:	9300      	str	r3, [sp, #0]
 80172f4:	4603      	mov	r3, r0
 80172f6:	2241      	movs	r2, #65	; 0x41
 80172f8:	2000      	movs	r0, #0
 80172fa:	f7f6 fb9d 	bl	800da38 <pbuf_alloced_custom>
 80172fe:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d106      	bne.n	8017314 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017306:	69b8      	ldr	r0, [r7, #24]
 8017308:	f7ff fef6 	bl	80170f8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801730c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801730e:	f7f6 fd4d 	bl	800ddac <pbuf_free>
        goto memerr;
 8017312:	e074      	b.n	80173fe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7f6 fdef 	bl	800def8 <pbuf_ref>
      pcr->original = p;
 801731a:	69bb      	ldr	r3, [r7, #24]
 801731c:	68fa      	ldr	r2, [r7, #12]
 801731e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017320:	69bb      	ldr	r3, [r7, #24]
 8017322:	4a3f      	ldr	r2, [pc, #252]	; (8017420 <ip4_frag+0x288>)
 8017324:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017326:	6979      	ldr	r1, [r7, #20]
 8017328:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801732a:	f7f6 fe0d 	bl	800df48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801732e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017332:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017336:	1ad3      	subs	r3, r2, r3
 8017338:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801733c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017340:	2b00      	cmp	r3, #0
 8017342:	d004      	beq.n	801734e <ip4_frag+0x1b6>
        poff = 0;
 8017344:	2300      	movs	r3, #0
 8017346:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801734e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017352:	2b00      	cmp	r3, #0
 8017354:	d196      	bne.n	8017284 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017356:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017358:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801735c:	4413      	add	r3, r2
 801735e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017360:	68bb      	ldr	r3, [r7, #8]
 8017362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017364:	f1a3 0213 	sub.w	r2, r3, #19
 8017368:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801736c:	429a      	cmp	r2, r3
 801736e:	bfcc      	ite	gt
 8017370:	2301      	movgt	r3, #1
 8017372:	2300      	movle	r3, #0
 8017374:	b2db      	uxtb	r3, r3
 8017376:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017378:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801737c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017380:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017382:	6a3b      	ldr	r3, [r7, #32]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d002      	beq.n	801738e <ip4_frag+0x1f6>
 8017388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738a:	2b00      	cmp	r3, #0
 801738c:	d003      	beq.n	8017396 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801738e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017394:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017396:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017398:	4618      	mov	r0, r3
 801739a:	f7f5 f95b 	bl	800c654 <lwip_htons>
 801739e:	4603      	mov	r3, r0
 80173a0:	461a      	mov	r2, r3
 80173a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80173a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80173a8:	3314      	adds	r3, #20
 80173aa:	b29b      	uxth	r3, r3
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7f5 f951 	bl	800c654 <lwip_htons>
 80173b2:	4603      	mov	r3, r0
 80173b4:	461a      	mov	r2, r3
 80173b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80173ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173bc:	2200      	movs	r2, #0
 80173be:	729a      	strb	r2, [r3, #10]
 80173c0:	2200      	movs	r2, #0
 80173c2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	695b      	ldr	r3, [r3, #20]
 80173c8:	687a      	ldr	r2, [r7, #4]
 80173ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80173cc:	68b8      	ldr	r0, [r7, #8]
 80173ce:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80173d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80173d2:	f7f6 fceb 	bl	800ddac <pbuf_free>
    left = (u16_t)(left - fragsize);
 80173d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80173e2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80173e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173e8:	4413      	add	r3, r2
 80173ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80173ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	f47f af19 	bne.w	801722a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80173f8:	2300      	movs	r3, #0
 80173fa:	e002      	b.n	8017402 <ip4_frag+0x26a>
      goto memerr;
 80173fc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80173fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017402:	4618      	mov	r0, r3
 8017404:	3748      	adds	r7, #72	; 0x48
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
 801740a:	bf00      	nop
 801740c:	0801c080 	.word	0x0801c080
 8017410:	0801c25c 	.word	0x0801c25c
 8017414:	0801c0c8 	.word	0x0801c0c8
 8017418:	0801c278 	.word	0x0801c278
 801741c:	0801c298 	.word	0x0801c298
 8017420:	08017131 	.word	0x08017131

08017424 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	b086      	sub	sp, #24
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
 801742c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801742e:	230e      	movs	r3, #14
 8017430:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	895b      	ldrh	r3, [r3, #10]
 8017436:	2b0e      	cmp	r3, #14
 8017438:	d96e      	bls.n	8017518 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	7bdb      	ldrb	r3, [r3, #15]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d106      	bne.n	8017450 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017442:	683b      	ldr	r3, [r7, #0]
 8017444:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017448:	3301      	adds	r3, #1
 801744a:	b2da      	uxtb	r2, r3
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	685b      	ldr	r3, [r3, #4]
 8017454:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	7b1a      	ldrb	r2, [r3, #12]
 801745a:	7b5b      	ldrb	r3, [r3, #13]
 801745c:	021b      	lsls	r3, r3, #8
 801745e:	4313      	orrs	r3, r2
 8017460:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017462:	693b      	ldr	r3, [r7, #16]
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	f003 0301 	and.w	r3, r3, #1
 801746a:	2b00      	cmp	r3, #0
 801746c:	d023      	beq.n	80174b6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801746e:	693b      	ldr	r3, [r7, #16]
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	2b01      	cmp	r3, #1
 8017474:	d10f      	bne.n	8017496 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017476:	693b      	ldr	r3, [r7, #16]
 8017478:	785b      	ldrb	r3, [r3, #1]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d11b      	bne.n	80174b6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801747e:	693b      	ldr	r3, [r7, #16]
 8017480:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017482:	2b5e      	cmp	r3, #94	; 0x5e
 8017484:	d117      	bne.n	80174b6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	7b5b      	ldrb	r3, [r3, #13]
 801748a:	f043 0310 	orr.w	r3, r3, #16
 801748e:	b2da      	uxtb	r2, r3
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	735a      	strb	r2, [r3, #13]
 8017494:	e00f      	b.n	80174b6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017496:	693b      	ldr	r3, [r7, #16]
 8017498:	2206      	movs	r2, #6
 801749a:	4928      	ldr	r1, [pc, #160]	; (801753c <ethernet_input+0x118>)
 801749c:	4618      	mov	r0, r3
 801749e:	f000 fa71 	bl	8017984 <memcmp>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d106      	bne.n	80174b6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	7b5b      	ldrb	r3, [r3, #13]
 80174ac:	f043 0308 	orr.w	r3, r3, #8
 80174b0:	b2da      	uxtb	r2, r3
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80174b6:	89fb      	ldrh	r3, [r7, #14]
 80174b8:	2b08      	cmp	r3, #8
 80174ba:	d003      	beq.n	80174c4 <ethernet_input+0xa0>
 80174bc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80174c0:	d014      	beq.n	80174ec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80174c2:	e032      	b.n	801752a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174ca:	f003 0308 	and.w	r3, r3, #8
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d024      	beq.n	801751c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80174d2:	8afb      	ldrh	r3, [r7, #22]
 80174d4:	4619      	mov	r1, r3
 80174d6:	6878      	ldr	r0, [r7, #4]
 80174d8:	f7f6 fbe2 	bl	800dca0 <pbuf_remove_header>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d11e      	bne.n	8017520 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80174e2:	6839      	ldr	r1, [r7, #0]
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f7fe fd6b 	bl	8015fc0 <ip4_input>
      break;
 80174ea:	e013      	b.n	8017514 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174f2:	f003 0308 	and.w	r3, r3, #8
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d014      	beq.n	8017524 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80174fa:	8afb      	ldrh	r3, [r7, #22]
 80174fc:	4619      	mov	r1, r3
 80174fe:	6878      	ldr	r0, [r7, #4]
 8017500:	f7f6 fbce 	bl	800dca0 <pbuf_remove_header>
 8017504:	4603      	mov	r3, r0
 8017506:	2b00      	cmp	r3, #0
 8017508:	d10e      	bne.n	8017528 <ethernet_input+0x104>
        etharp_input(p, netif);
 801750a:	6839      	ldr	r1, [r7, #0]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f7fd ff0b 	bl	8015328 <etharp_input>
      break;
 8017512:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017514:	2300      	movs	r3, #0
 8017516:	e00c      	b.n	8017532 <ethernet_input+0x10e>
    goto free_and_return;
 8017518:	bf00      	nop
 801751a:	e006      	b.n	801752a <ethernet_input+0x106>
        goto free_and_return;
 801751c:	bf00      	nop
 801751e:	e004      	b.n	801752a <ethernet_input+0x106>
        goto free_and_return;
 8017520:	bf00      	nop
 8017522:	e002      	b.n	801752a <ethernet_input+0x106>
        goto free_and_return;
 8017524:	bf00      	nop
 8017526:	e000      	b.n	801752a <ethernet_input+0x106>
        goto free_and_return;
 8017528:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7f6 fc3e 	bl	800ddac <pbuf_free>
  return ERR_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	3718      	adds	r7, #24
 8017536:	46bd      	mov	sp, r7
 8017538:	bd80      	pop	{r7, pc}
 801753a:	bf00      	nop
 801753c:	0801c490 	.word	0x0801c490

08017540 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017540:	b580      	push	{r7, lr}
 8017542:	b086      	sub	sp, #24
 8017544:	af00      	add	r7, sp, #0
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	60b9      	str	r1, [r7, #8]
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801754e:	8c3b      	ldrh	r3, [r7, #32]
 8017550:	4618      	mov	r0, r3
 8017552:	f7f5 f87f 	bl	800c654 <lwip_htons>
 8017556:	4603      	mov	r3, r0
 8017558:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801755a:	210e      	movs	r1, #14
 801755c:	68b8      	ldr	r0, [r7, #8]
 801755e:	f7f6 fb8f 	bl	800dc80 <pbuf_add_header>
 8017562:	4603      	mov	r3, r0
 8017564:	2b00      	cmp	r3, #0
 8017566:	d125      	bne.n	80175b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017568:	68bb      	ldr	r3, [r7, #8]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	8afa      	ldrh	r2, [r7, #22]
 8017572:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017574:	693b      	ldr	r3, [r7, #16]
 8017576:	2206      	movs	r2, #6
 8017578:	6839      	ldr	r1, [r7, #0]
 801757a:	4618      	mov	r0, r3
 801757c:	f000 fa10 	bl	80179a0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	3306      	adds	r3, #6
 8017584:	2206      	movs	r2, #6
 8017586:	6879      	ldr	r1, [r7, #4]
 8017588:	4618      	mov	r0, r3
 801758a:	f000 fa09 	bl	80179a0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017594:	2b06      	cmp	r3, #6
 8017596:	d006      	beq.n	80175a6 <ethernet_output+0x66>
 8017598:	4b0a      	ldr	r3, [pc, #40]	; (80175c4 <ethernet_output+0x84>)
 801759a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801759e:	490a      	ldr	r1, [pc, #40]	; (80175c8 <ethernet_output+0x88>)
 80175a0:	480a      	ldr	r0, [pc, #40]	; (80175cc <ethernet_output+0x8c>)
 80175a2:	f000 fa13 	bl	80179cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80175a6:	68fb      	ldr	r3, [r7, #12]
 80175a8:	699b      	ldr	r3, [r3, #24]
 80175aa:	68b9      	ldr	r1, [r7, #8]
 80175ac:	68f8      	ldr	r0, [r7, #12]
 80175ae:	4798      	blx	r3
 80175b0:	4603      	mov	r3, r0
 80175b2:	e002      	b.n	80175ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80175b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80175b6:	f06f 0301 	mvn.w	r3, #1
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3718      	adds	r7, #24
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	0801c2a8 	.word	0x0801c2a8
 80175c8:	0801c2e0 	.word	0x0801c2e0
 80175cc:	0801c314 	.word	0x0801c314

080175d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	2200      	movs	r2, #0
 80175de:	2104      	movs	r1, #4
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7ef f963 	bl	80068ac <osMessageQueueNew>
 80175e6:	4602      	mov	r2, r0
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d102      	bne.n	80175fa <sys_mbox_new+0x2a>
    return ERR_MEM;
 80175f4:	f04f 33ff 	mov.w	r3, #4294967295
 80175f8:	e000      	b.n	80175fc <sys_mbox_new+0x2c>

  return ERR_OK;
 80175fa:	2300      	movs	r3, #0
}
 80175fc:	4618      	mov	r0, r3
 80175fe:	3708      	adds	r7, #8
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}

08017604 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	4618      	mov	r0, r3
 8017612:	f7ef fab7 	bl	8006b84 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	4618      	mov	r0, r3
 801761c:	f7ef fae4 	bl	8006be8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017620:	bf00      	nop
 8017622:	3708      	adds	r7, #8
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b084      	sub	sp, #16
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6818      	ldr	r0, [r3, #0]
 8017636:	4639      	mov	r1, r7
 8017638:	2300      	movs	r3, #0
 801763a:	2200      	movs	r2, #0
 801763c:	f7ef f9bc 	bl	80069b8 <osMessageQueuePut>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d102      	bne.n	801764c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8017646:	2300      	movs	r3, #0
 8017648:	73fb      	strb	r3, [r7, #15]
 801764a:	e001      	b.n	8017650 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801764c:	23ff      	movs	r3, #255	; 0xff
 801764e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b086      	sub	sp, #24
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8017668:	f7ee fd4c 	bl	8006104 <osKernelGetTickCount>
 801766c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d013      	beq.n	801769c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	6818      	ldr	r0, [r3, #0]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	2200      	movs	r2, #0
 801767c:	68b9      	ldr	r1, [r7, #8]
 801767e:	f7ef fa0f 	bl	8006aa0 <osMessageQueueGet>
 8017682:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017684:	693b      	ldr	r3, [r7, #16]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d105      	bne.n	8017696 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801768a:	f7ee fd3b 	bl	8006104 <osKernelGetTickCount>
 801768e:	4602      	mov	r2, r0
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	1ad3      	subs	r3, r2, r3
 8017694:	e00f      	b.n	80176b6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017696:	f04f 33ff 	mov.w	r3, #4294967295
 801769a:	e00c      	b.n	80176b6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	6818      	ldr	r0, [r3, #0]
 80176a0:	f04f 33ff 	mov.w	r3, #4294967295
 80176a4:	2200      	movs	r2, #0
 80176a6:	68b9      	ldr	r1, [r7, #8]
 80176a8:	f7ef f9fa 	bl	8006aa0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80176ac:	f7ee fd2a 	bl	8006104 <osKernelGetTickCount>
 80176b0:	4602      	mov	r2, r0
 80176b2:	697b      	ldr	r3, [r7, #20]
 80176b4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3718      	adds	r7, #24
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}

080176be <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80176be:	b580      	push	{r7, lr}
 80176c0:	b082      	sub	sp, #8
 80176c2:	af00      	add	r7, sp, #0
 80176c4:	6078      	str	r0, [r7, #4]
 80176c6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	2300      	movs	r3, #0
 80176ce:	2200      	movs	r2, #0
 80176d0:	6839      	ldr	r1, [r7, #0]
 80176d2:	f7ef f9e5 	bl	8006aa0 <osMessageQueueGet>
 80176d6:	4603      	mov	r3, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d101      	bne.n	80176e0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80176dc:	2300      	movs	r3, #0
 80176de:	e001      	b.n	80176e4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80176e0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80176e4:	4618      	mov	r0, r3
 80176e6:	3708      	adds	r7, #8
 80176e8:	46bd      	mov	sp, r7
 80176ea:	bd80      	pop	{r7, pc}

080176ec <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d101      	bne.n	8017700 <sys_mbox_valid+0x14>
    return 0;
 80176fc:	2300      	movs	r3, #0
 80176fe:	e000      	b.n	8017702 <sys_mbox_valid+0x16>
  else
    return 1;
 8017700:	2301      	movs	r3, #1
}
 8017702:	4618      	mov	r0, r3
 8017704:	370c      	adds	r7, #12
 8017706:	46bd      	mov	sp, r7
 8017708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770c:	4770      	bx	lr

0801770e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801770e:	b480      	push	{r7}
 8017710:	b083      	sub	sp, #12
 8017712:	af00      	add	r7, sp, #0
 8017714:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2200      	movs	r2, #0
 801771a:	601a      	str	r2, [r3, #0]
}
 801771c:	bf00      	nop
 801771e:	370c      	adds	r7, #12
 8017720:	46bd      	mov	sp, r7
 8017722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017726:	4770      	bx	lr

08017728 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
 8017730:	460b      	mov	r3, r1
 8017732:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8017734:	78fb      	ldrb	r3, [r7, #3]
 8017736:	2200      	movs	r2, #0
 8017738:	4619      	mov	r1, r3
 801773a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801773e:	f7ee ff25 	bl	800658c <osSemaphoreNew>
 8017742:	4602      	mov	r2, r0
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d102      	bne.n	8017756 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017750:	f04f 33ff 	mov.w	r3, #4294967295
 8017754:	e009      	b.n	801776a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8017756:	78fb      	ldrb	r3, [r7, #3]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d105      	bne.n	8017768 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	2100      	movs	r1, #0
 8017762:	4618      	mov	r0, r3
 8017764:	f7ee ffae 	bl	80066c4 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017768:	2300      	movs	r3, #0
}
 801776a:	4618      	mov	r0, r3
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}

08017772 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017772:	b580      	push	{r7, lr}
 8017774:	b084      	sub	sp, #16
 8017776:	af00      	add	r7, sp, #0
 8017778:	6078      	str	r0, [r7, #4]
 801777a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801777c:	f7ee fcc2 	bl	8006104 <osKernelGetTickCount>
 8017780:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8017782:	683b      	ldr	r3, [r7, #0]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d011      	beq.n	80177ac <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	6839      	ldr	r1, [r7, #0]
 801778e:	4618      	mov	r0, r3
 8017790:	f7ee ff98 	bl	80066c4 <osSemaphoreAcquire>
 8017794:	4603      	mov	r3, r0
 8017796:	2b00      	cmp	r3, #0
 8017798:	d105      	bne.n	80177a6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801779a:	f7ee fcb3 	bl	8006104 <osKernelGetTickCount>
 801779e:	4602      	mov	r2, r0
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	1ad3      	subs	r3, r2, r3
 80177a4:	e012      	b.n	80177cc <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80177a6:	f04f 33ff 	mov.w	r3, #4294967295
 80177aa:	e00f      	b.n	80177cc <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 80177ac:	bf00      	nop
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	f04f 31ff 	mov.w	r1, #4294967295
 80177b6:	4618      	mov	r0, r3
 80177b8:	f7ee ff84 	bl	80066c4 <osSemaphoreAcquire>
 80177bc:	4603      	mov	r3, r0
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d1f5      	bne.n	80177ae <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 80177c2:	f7ee fc9f 	bl	8006104 <osKernelGetTickCount>
 80177c6:	4602      	mov	r2, r0
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80177cc:	4618      	mov	r0, r3
 80177ce:	3710      	adds	r7, #16
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	4618      	mov	r0, r3
 80177e2:	f7ee ffd5 	bl	8006790 <osSemaphoreRelease>
}
 80177e6:	bf00      	nop
 80177e8:	3708      	adds	r7, #8
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80177ee:	b580      	push	{r7, lr}
 80177f0:	b082      	sub	sp, #8
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	4618      	mov	r0, r3
 80177fc:	f7ef f820 	bl	8006840 <osSemaphoreDelete>
}
 8017800:	bf00      	nop
 8017802:	3708      	adds	r7, #8
 8017804:	46bd      	mov	sp, r7
 8017806:	bd80      	pop	{r7, pc}

08017808 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017808:	b480      	push	{r7}
 801780a:	b083      	sub	sp, #12
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	681b      	ldr	r3, [r3, #0]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d101      	bne.n	801781c <sys_sem_valid+0x14>
    return 0;
 8017818:	2300      	movs	r3, #0
 801781a:	e000      	b.n	801781e <sys_sem_valid+0x16>
  else
    return 1;
 801781c:	2301      	movs	r3, #1
}
 801781e:	4618      	mov	r0, r3
 8017820:	370c      	adds	r7, #12
 8017822:	46bd      	mov	sp, r7
 8017824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017828:	4770      	bx	lr

0801782a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801782a:	b480      	push	{r7}
 801782c:	b083      	sub	sp, #12
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	2200      	movs	r2, #0
 8017836:	601a      	str	r2, [r3, #0]
}
 8017838:	bf00      	nop
 801783a:	370c      	adds	r7, #12
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017848:	2000      	movs	r0, #0
 801784a:	f7ee fd57 	bl	80062fc <osMutexNew>
 801784e:	4603      	mov	r3, r0
 8017850:	4a01      	ldr	r2, [pc, #4]	; (8017858 <sys_init+0x14>)
 8017852:	6013      	str	r3, [r2, #0]
#endif
}
 8017854:	bf00      	nop
 8017856:	bd80      	pop	{r7, pc}
 8017858:	2000b918 	.word	0x2000b918

0801785c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017864:	2000      	movs	r0, #0
 8017866:	f7ee fd49 	bl	80062fc <osMutexNew>
 801786a:	4602      	mov	r2, r0
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d102      	bne.n	801787e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017878:	f04f 33ff 	mov.w	r3, #4294967295
 801787c:	e000      	b.n	8017880 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801787e:	2300      	movs	r3, #0
}
 8017880:	4618      	mov	r0, r3
 8017882:	3708      	adds	r7, #8
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}

08017888 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
 801788e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	f04f 31ff 	mov.w	r1, #4294967295
 8017898:	4618      	mov	r0, r3
 801789a:	f7ee fdc9 	bl	8006430 <osMutexAcquire>
#endif
}
 801789e:	bf00      	nop
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7ee fe1a 	bl	80064ec <osMutexRelease>
}
 80178b8:	bf00      	nop
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b08e      	sub	sp, #56	; 0x38
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	60b9      	str	r1, [r7, #8]
 80178ca:	607a      	str	r2, [r7, #4]
 80178cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80178ce:	f107 0314 	add.w	r3, r7, #20
 80178d2:	2224      	movs	r2, #36	; 0x24
 80178d4:	2100      	movs	r1, #0
 80178d6:	4618      	mov	r0, r3
 80178d8:	f000 f870 	bl	80179bc <memset>
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	617b      	str	r3, [r7, #20]
 80178e0:	683b      	ldr	r3, [r7, #0]
 80178e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80178e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80178e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80178e8:	f107 0314 	add.w	r3, r7, #20
 80178ec:	461a      	mov	r2, r3
 80178ee:	6879      	ldr	r1, [r7, #4]
 80178f0:	68b8      	ldr	r0, [r7, #8]
 80178f2:	f7ee fc2f 	bl	8006154 <osThreadNew>
 80178f6:	4603      	mov	r3, r0
#endif
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3738      	adds	r7, #56	; 0x38
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017904:	4b04      	ldr	r3, [pc, #16]	; (8017918 <sys_arch_protect+0x18>)
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f04f 31ff 	mov.w	r1, #4294967295
 801790c:	4618      	mov	r0, r3
 801790e:	f7ee fd8f 	bl	8006430 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017912:	2301      	movs	r3, #1
}
 8017914:	4618      	mov	r0, r3
 8017916:	bd80      	pop	{r7, pc}
 8017918:	2000b918 	.word	0x2000b918

0801791c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017924:	4b04      	ldr	r3, [pc, #16]	; (8017938 <sys_arch_unprotect+0x1c>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	4618      	mov	r0, r3
 801792a:	f7ee fddf 	bl	80064ec <osMutexRelease>
}
 801792e:	bf00      	nop
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}
 8017936:	bf00      	nop
 8017938:	2000b918 	.word	0x2000b918

0801793c <__libc_init_array>:
 801793c:	b570      	push	{r4, r5, r6, lr}
 801793e:	4d0d      	ldr	r5, [pc, #52]	; (8017974 <__libc_init_array+0x38>)
 8017940:	4c0d      	ldr	r4, [pc, #52]	; (8017978 <__libc_init_array+0x3c>)
 8017942:	1b64      	subs	r4, r4, r5
 8017944:	10a4      	asrs	r4, r4, #2
 8017946:	2600      	movs	r6, #0
 8017948:	42a6      	cmp	r6, r4
 801794a:	d109      	bne.n	8017960 <__libc_init_array+0x24>
 801794c:	4d0b      	ldr	r5, [pc, #44]	; (801797c <__libc_init_array+0x40>)
 801794e:	4c0c      	ldr	r4, [pc, #48]	; (8017980 <__libc_init_array+0x44>)
 8017950:	f001 f9a4 	bl	8018c9c <_init>
 8017954:	1b64      	subs	r4, r4, r5
 8017956:	10a4      	asrs	r4, r4, #2
 8017958:	2600      	movs	r6, #0
 801795a:	42a6      	cmp	r6, r4
 801795c:	d105      	bne.n	801796a <__libc_init_array+0x2e>
 801795e:	bd70      	pop	{r4, r5, r6, pc}
 8017960:	f855 3b04 	ldr.w	r3, [r5], #4
 8017964:	4798      	blx	r3
 8017966:	3601      	adds	r6, #1
 8017968:	e7ee      	b.n	8017948 <__libc_init_array+0xc>
 801796a:	f855 3b04 	ldr.w	r3, [r5], #4
 801796e:	4798      	blx	r3
 8017970:	3601      	adds	r6, #1
 8017972:	e7f2      	b.n	801795a <__libc_init_array+0x1e>
 8017974:	0801c6f4 	.word	0x0801c6f4
 8017978:	0801c6f4 	.word	0x0801c6f4
 801797c:	0801c6f4 	.word	0x0801c6f4
 8017980:	0801c6f8 	.word	0x0801c6f8

08017984 <memcmp>:
 8017984:	b530      	push	{r4, r5, lr}
 8017986:	3901      	subs	r1, #1
 8017988:	2400      	movs	r4, #0
 801798a:	42a2      	cmp	r2, r4
 801798c:	d101      	bne.n	8017992 <memcmp+0xe>
 801798e:	2000      	movs	r0, #0
 8017990:	e005      	b.n	801799e <memcmp+0x1a>
 8017992:	5d03      	ldrb	r3, [r0, r4]
 8017994:	3401      	adds	r4, #1
 8017996:	5d0d      	ldrb	r5, [r1, r4]
 8017998:	42ab      	cmp	r3, r5
 801799a:	d0f6      	beq.n	801798a <memcmp+0x6>
 801799c:	1b58      	subs	r0, r3, r5
 801799e:	bd30      	pop	{r4, r5, pc}

080179a0 <memcpy>:
 80179a0:	440a      	add	r2, r1
 80179a2:	4291      	cmp	r1, r2
 80179a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80179a8:	d100      	bne.n	80179ac <memcpy+0xc>
 80179aa:	4770      	bx	lr
 80179ac:	b510      	push	{r4, lr}
 80179ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80179b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80179b6:	4291      	cmp	r1, r2
 80179b8:	d1f9      	bne.n	80179ae <memcpy+0xe>
 80179ba:	bd10      	pop	{r4, pc}

080179bc <memset>:
 80179bc:	4402      	add	r2, r0
 80179be:	4603      	mov	r3, r0
 80179c0:	4293      	cmp	r3, r2
 80179c2:	d100      	bne.n	80179c6 <memset+0xa>
 80179c4:	4770      	bx	lr
 80179c6:	f803 1b01 	strb.w	r1, [r3], #1
 80179ca:	e7f9      	b.n	80179c0 <memset+0x4>

080179cc <iprintf>:
 80179cc:	b40f      	push	{r0, r1, r2, r3}
 80179ce:	4b0a      	ldr	r3, [pc, #40]	; (80179f8 <iprintf+0x2c>)
 80179d0:	b513      	push	{r0, r1, r4, lr}
 80179d2:	681c      	ldr	r4, [r3, #0]
 80179d4:	b124      	cbz	r4, 80179e0 <iprintf+0x14>
 80179d6:	69a3      	ldr	r3, [r4, #24]
 80179d8:	b913      	cbnz	r3, 80179e0 <iprintf+0x14>
 80179da:	4620      	mov	r0, r4
 80179dc:	f000 fb82 	bl	80180e4 <__sinit>
 80179e0:	ab05      	add	r3, sp, #20
 80179e2:	9a04      	ldr	r2, [sp, #16]
 80179e4:	68a1      	ldr	r1, [r4, #8]
 80179e6:	9301      	str	r3, [sp, #4]
 80179e8:	4620      	mov	r0, r4
 80179ea:	f000 fd6d 	bl	80184c8 <_vfiprintf_r>
 80179ee:	b002      	add	sp, #8
 80179f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179f4:	b004      	add	sp, #16
 80179f6:	4770      	bx	lr
 80179f8:	2000001c 	.word	0x2000001c

080179fc <_puts_r>:
 80179fc:	b570      	push	{r4, r5, r6, lr}
 80179fe:	460e      	mov	r6, r1
 8017a00:	4605      	mov	r5, r0
 8017a02:	b118      	cbz	r0, 8017a0c <_puts_r+0x10>
 8017a04:	6983      	ldr	r3, [r0, #24]
 8017a06:	b90b      	cbnz	r3, 8017a0c <_puts_r+0x10>
 8017a08:	f000 fb6c 	bl	80180e4 <__sinit>
 8017a0c:	69ab      	ldr	r3, [r5, #24]
 8017a0e:	68ac      	ldr	r4, [r5, #8]
 8017a10:	b913      	cbnz	r3, 8017a18 <_puts_r+0x1c>
 8017a12:	4628      	mov	r0, r5
 8017a14:	f000 fb66 	bl	80180e4 <__sinit>
 8017a18:	4b2c      	ldr	r3, [pc, #176]	; (8017acc <_puts_r+0xd0>)
 8017a1a:	429c      	cmp	r4, r3
 8017a1c:	d120      	bne.n	8017a60 <_puts_r+0x64>
 8017a1e:	686c      	ldr	r4, [r5, #4]
 8017a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a22:	07db      	lsls	r3, r3, #31
 8017a24:	d405      	bmi.n	8017a32 <_puts_r+0x36>
 8017a26:	89a3      	ldrh	r3, [r4, #12]
 8017a28:	0598      	lsls	r0, r3, #22
 8017a2a:	d402      	bmi.n	8017a32 <_puts_r+0x36>
 8017a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a2e:	f000 fc09 	bl	8018244 <__retarget_lock_acquire_recursive>
 8017a32:	89a3      	ldrh	r3, [r4, #12]
 8017a34:	0719      	lsls	r1, r3, #28
 8017a36:	d51d      	bpl.n	8017a74 <_puts_r+0x78>
 8017a38:	6923      	ldr	r3, [r4, #16]
 8017a3a:	b1db      	cbz	r3, 8017a74 <_puts_r+0x78>
 8017a3c:	3e01      	subs	r6, #1
 8017a3e:	68a3      	ldr	r3, [r4, #8]
 8017a40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017a44:	3b01      	subs	r3, #1
 8017a46:	60a3      	str	r3, [r4, #8]
 8017a48:	bb39      	cbnz	r1, 8017a9a <_puts_r+0x9e>
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	da38      	bge.n	8017ac0 <_puts_r+0xc4>
 8017a4e:	4622      	mov	r2, r4
 8017a50:	210a      	movs	r1, #10
 8017a52:	4628      	mov	r0, r5
 8017a54:	f000 f94e 	bl	8017cf4 <__swbuf_r>
 8017a58:	3001      	adds	r0, #1
 8017a5a:	d011      	beq.n	8017a80 <_puts_r+0x84>
 8017a5c:	250a      	movs	r5, #10
 8017a5e:	e011      	b.n	8017a84 <_puts_r+0x88>
 8017a60:	4b1b      	ldr	r3, [pc, #108]	; (8017ad0 <_puts_r+0xd4>)
 8017a62:	429c      	cmp	r4, r3
 8017a64:	d101      	bne.n	8017a6a <_puts_r+0x6e>
 8017a66:	68ac      	ldr	r4, [r5, #8]
 8017a68:	e7da      	b.n	8017a20 <_puts_r+0x24>
 8017a6a:	4b1a      	ldr	r3, [pc, #104]	; (8017ad4 <_puts_r+0xd8>)
 8017a6c:	429c      	cmp	r4, r3
 8017a6e:	bf08      	it	eq
 8017a70:	68ec      	ldreq	r4, [r5, #12]
 8017a72:	e7d5      	b.n	8017a20 <_puts_r+0x24>
 8017a74:	4621      	mov	r1, r4
 8017a76:	4628      	mov	r0, r5
 8017a78:	f000 f98e 	bl	8017d98 <__swsetup_r>
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d0dd      	beq.n	8017a3c <_puts_r+0x40>
 8017a80:	f04f 35ff 	mov.w	r5, #4294967295
 8017a84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a86:	07da      	lsls	r2, r3, #31
 8017a88:	d405      	bmi.n	8017a96 <_puts_r+0x9a>
 8017a8a:	89a3      	ldrh	r3, [r4, #12]
 8017a8c:	059b      	lsls	r3, r3, #22
 8017a8e:	d402      	bmi.n	8017a96 <_puts_r+0x9a>
 8017a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a92:	f000 fbd8 	bl	8018246 <__retarget_lock_release_recursive>
 8017a96:	4628      	mov	r0, r5
 8017a98:	bd70      	pop	{r4, r5, r6, pc}
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	da04      	bge.n	8017aa8 <_puts_r+0xac>
 8017a9e:	69a2      	ldr	r2, [r4, #24]
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	dc06      	bgt.n	8017ab2 <_puts_r+0xb6>
 8017aa4:	290a      	cmp	r1, #10
 8017aa6:	d004      	beq.n	8017ab2 <_puts_r+0xb6>
 8017aa8:	6823      	ldr	r3, [r4, #0]
 8017aaa:	1c5a      	adds	r2, r3, #1
 8017aac:	6022      	str	r2, [r4, #0]
 8017aae:	7019      	strb	r1, [r3, #0]
 8017ab0:	e7c5      	b.n	8017a3e <_puts_r+0x42>
 8017ab2:	4622      	mov	r2, r4
 8017ab4:	4628      	mov	r0, r5
 8017ab6:	f000 f91d 	bl	8017cf4 <__swbuf_r>
 8017aba:	3001      	adds	r0, #1
 8017abc:	d1bf      	bne.n	8017a3e <_puts_r+0x42>
 8017abe:	e7df      	b.n	8017a80 <_puts_r+0x84>
 8017ac0:	6823      	ldr	r3, [r4, #0]
 8017ac2:	250a      	movs	r5, #10
 8017ac4:	1c5a      	adds	r2, r3, #1
 8017ac6:	6022      	str	r2, [r4, #0]
 8017ac8:	701d      	strb	r5, [r3, #0]
 8017aca:	e7db      	b.n	8017a84 <_puts_r+0x88>
 8017acc:	0801c678 	.word	0x0801c678
 8017ad0:	0801c698 	.word	0x0801c698
 8017ad4:	0801c658 	.word	0x0801c658

08017ad8 <puts>:
 8017ad8:	4b02      	ldr	r3, [pc, #8]	; (8017ae4 <puts+0xc>)
 8017ada:	4601      	mov	r1, r0
 8017adc:	6818      	ldr	r0, [r3, #0]
 8017ade:	f7ff bf8d 	b.w	80179fc <_puts_r>
 8017ae2:	bf00      	nop
 8017ae4:	2000001c 	.word	0x2000001c

08017ae8 <rand>:
 8017ae8:	4b17      	ldr	r3, [pc, #92]	; (8017b48 <rand+0x60>)
 8017aea:	b510      	push	{r4, lr}
 8017aec:	681c      	ldr	r4, [r3, #0]
 8017aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017af0:	b9b3      	cbnz	r3, 8017b20 <rand+0x38>
 8017af2:	2018      	movs	r0, #24
 8017af4:	f000 fc0c 	bl	8018310 <malloc>
 8017af8:	63a0      	str	r0, [r4, #56]	; 0x38
 8017afa:	b928      	cbnz	r0, 8017b08 <rand+0x20>
 8017afc:	4602      	mov	r2, r0
 8017afe:	4b13      	ldr	r3, [pc, #76]	; (8017b4c <rand+0x64>)
 8017b00:	4813      	ldr	r0, [pc, #76]	; (8017b50 <rand+0x68>)
 8017b02:	214e      	movs	r1, #78	; 0x4e
 8017b04:	f000 f9b6 	bl	8017e74 <__assert_func>
 8017b08:	4a12      	ldr	r2, [pc, #72]	; (8017b54 <rand+0x6c>)
 8017b0a:	4b13      	ldr	r3, [pc, #76]	; (8017b58 <rand+0x70>)
 8017b0c:	e9c0 2300 	strd	r2, r3, [r0]
 8017b10:	4b12      	ldr	r3, [pc, #72]	; (8017b5c <rand+0x74>)
 8017b12:	6083      	str	r3, [r0, #8]
 8017b14:	230b      	movs	r3, #11
 8017b16:	8183      	strh	r3, [r0, #12]
 8017b18:	2201      	movs	r2, #1
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017b20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b22:	480f      	ldr	r0, [pc, #60]	; (8017b60 <rand+0x78>)
 8017b24:	690a      	ldr	r2, [r1, #16]
 8017b26:	694b      	ldr	r3, [r1, #20]
 8017b28:	4c0e      	ldr	r4, [pc, #56]	; (8017b64 <rand+0x7c>)
 8017b2a:	4350      	muls	r0, r2
 8017b2c:	fb04 0003 	mla	r0, r4, r3, r0
 8017b30:	fba2 3404 	umull	r3, r4, r2, r4
 8017b34:	1c5a      	adds	r2, r3, #1
 8017b36:	4404      	add	r4, r0
 8017b38:	f144 0000 	adc.w	r0, r4, #0
 8017b3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017b40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017b44:	bd10      	pop	{r4, pc}
 8017b46:	bf00      	nop
 8017b48:	2000001c 	.word	0x2000001c
 8017b4c:	0801c5a4 	.word	0x0801c5a4
 8017b50:	0801c5bb 	.word	0x0801c5bb
 8017b54:	abcd330e 	.word	0xabcd330e
 8017b58:	e66d1234 	.word	0xe66d1234
 8017b5c:	0005deec 	.word	0x0005deec
 8017b60:	5851f42d 	.word	0x5851f42d
 8017b64:	4c957f2d 	.word	0x4c957f2d

08017b68 <setvbuf>:
 8017b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017b6c:	461d      	mov	r5, r3
 8017b6e:	4b5d      	ldr	r3, [pc, #372]	; (8017ce4 <setvbuf+0x17c>)
 8017b70:	681f      	ldr	r7, [r3, #0]
 8017b72:	4604      	mov	r4, r0
 8017b74:	460e      	mov	r6, r1
 8017b76:	4690      	mov	r8, r2
 8017b78:	b127      	cbz	r7, 8017b84 <setvbuf+0x1c>
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	b913      	cbnz	r3, 8017b84 <setvbuf+0x1c>
 8017b7e:	4638      	mov	r0, r7
 8017b80:	f000 fab0 	bl	80180e4 <__sinit>
 8017b84:	4b58      	ldr	r3, [pc, #352]	; (8017ce8 <setvbuf+0x180>)
 8017b86:	429c      	cmp	r4, r3
 8017b88:	d167      	bne.n	8017c5a <setvbuf+0xf2>
 8017b8a:	687c      	ldr	r4, [r7, #4]
 8017b8c:	f1b8 0f02 	cmp.w	r8, #2
 8017b90:	d006      	beq.n	8017ba0 <setvbuf+0x38>
 8017b92:	f1b8 0f01 	cmp.w	r8, #1
 8017b96:	f200 809f 	bhi.w	8017cd8 <setvbuf+0x170>
 8017b9a:	2d00      	cmp	r5, #0
 8017b9c:	f2c0 809c 	blt.w	8017cd8 <setvbuf+0x170>
 8017ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ba2:	07db      	lsls	r3, r3, #31
 8017ba4:	d405      	bmi.n	8017bb2 <setvbuf+0x4a>
 8017ba6:	89a3      	ldrh	r3, [r4, #12]
 8017ba8:	0598      	lsls	r0, r3, #22
 8017baa:	d402      	bmi.n	8017bb2 <setvbuf+0x4a>
 8017bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017bae:	f000 fb49 	bl	8018244 <__retarget_lock_acquire_recursive>
 8017bb2:	4621      	mov	r1, r4
 8017bb4:	4638      	mov	r0, r7
 8017bb6:	f000 fa01 	bl	8017fbc <_fflush_r>
 8017bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bbc:	b141      	cbz	r1, 8017bd0 <setvbuf+0x68>
 8017bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017bc2:	4299      	cmp	r1, r3
 8017bc4:	d002      	beq.n	8017bcc <setvbuf+0x64>
 8017bc6:	4638      	mov	r0, r7
 8017bc8:	f000 fbaa 	bl	8018320 <_free_r>
 8017bcc:	2300      	movs	r3, #0
 8017bce:	6363      	str	r3, [r4, #52]	; 0x34
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	61a3      	str	r3, [r4, #24]
 8017bd4:	6063      	str	r3, [r4, #4]
 8017bd6:	89a3      	ldrh	r3, [r4, #12]
 8017bd8:	0619      	lsls	r1, r3, #24
 8017bda:	d503      	bpl.n	8017be4 <setvbuf+0x7c>
 8017bdc:	6921      	ldr	r1, [r4, #16]
 8017bde:	4638      	mov	r0, r7
 8017be0:	f000 fb9e 	bl	8018320 <_free_r>
 8017be4:	89a3      	ldrh	r3, [r4, #12]
 8017be6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8017bea:	f023 0303 	bic.w	r3, r3, #3
 8017bee:	f1b8 0f02 	cmp.w	r8, #2
 8017bf2:	81a3      	strh	r3, [r4, #12]
 8017bf4:	d06c      	beq.n	8017cd0 <setvbuf+0x168>
 8017bf6:	ab01      	add	r3, sp, #4
 8017bf8:	466a      	mov	r2, sp
 8017bfa:	4621      	mov	r1, r4
 8017bfc:	4638      	mov	r0, r7
 8017bfe:	f000 fb23 	bl	8018248 <__swhatbuf_r>
 8017c02:	89a3      	ldrh	r3, [r4, #12]
 8017c04:	4318      	orrs	r0, r3
 8017c06:	81a0      	strh	r0, [r4, #12]
 8017c08:	2d00      	cmp	r5, #0
 8017c0a:	d130      	bne.n	8017c6e <setvbuf+0x106>
 8017c0c:	9d00      	ldr	r5, [sp, #0]
 8017c0e:	4628      	mov	r0, r5
 8017c10:	f000 fb7e 	bl	8018310 <malloc>
 8017c14:	4606      	mov	r6, r0
 8017c16:	2800      	cmp	r0, #0
 8017c18:	d155      	bne.n	8017cc6 <setvbuf+0x15e>
 8017c1a:	f8dd 9000 	ldr.w	r9, [sp]
 8017c1e:	45a9      	cmp	r9, r5
 8017c20:	d14a      	bne.n	8017cb8 <setvbuf+0x150>
 8017c22:	f04f 35ff 	mov.w	r5, #4294967295
 8017c26:	2200      	movs	r2, #0
 8017c28:	60a2      	str	r2, [r4, #8]
 8017c2a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8017c2e:	6022      	str	r2, [r4, #0]
 8017c30:	6122      	str	r2, [r4, #16]
 8017c32:	2201      	movs	r2, #1
 8017c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c38:	6162      	str	r2, [r4, #20]
 8017c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c3c:	f043 0302 	orr.w	r3, r3, #2
 8017c40:	07d2      	lsls	r2, r2, #31
 8017c42:	81a3      	strh	r3, [r4, #12]
 8017c44:	d405      	bmi.n	8017c52 <setvbuf+0xea>
 8017c46:	f413 7f00 	tst.w	r3, #512	; 0x200
 8017c4a:	d102      	bne.n	8017c52 <setvbuf+0xea>
 8017c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c4e:	f000 fafa 	bl	8018246 <__retarget_lock_release_recursive>
 8017c52:	4628      	mov	r0, r5
 8017c54:	b003      	add	sp, #12
 8017c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c5a:	4b24      	ldr	r3, [pc, #144]	; (8017cec <setvbuf+0x184>)
 8017c5c:	429c      	cmp	r4, r3
 8017c5e:	d101      	bne.n	8017c64 <setvbuf+0xfc>
 8017c60:	68bc      	ldr	r4, [r7, #8]
 8017c62:	e793      	b.n	8017b8c <setvbuf+0x24>
 8017c64:	4b22      	ldr	r3, [pc, #136]	; (8017cf0 <setvbuf+0x188>)
 8017c66:	429c      	cmp	r4, r3
 8017c68:	bf08      	it	eq
 8017c6a:	68fc      	ldreq	r4, [r7, #12]
 8017c6c:	e78e      	b.n	8017b8c <setvbuf+0x24>
 8017c6e:	2e00      	cmp	r6, #0
 8017c70:	d0cd      	beq.n	8017c0e <setvbuf+0xa6>
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	b913      	cbnz	r3, 8017c7c <setvbuf+0x114>
 8017c76:	4638      	mov	r0, r7
 8017c78:	f000 fa34 	bl	80180e4 <__sinit>
 8017c7c:	f1b8 0f01 	cmp.w	r8, #1
 8017c80:	bf08      	it	eq
 8017c82:	89a3      	ldrheq	r3, [r4, #12]
 8017c84:	6026      	str	r6, [r4, #0]
 8017c86:	bf04      	itt	eq
 8017c88:	f043 0301 	orreq.w	r3, r3, #1
 8017c8c:	81a3      	strheq	r3, [r4, #12]
 8017c8e:	89a2      	ldrh	r2, [r4, #12]
 8017c90:	f012 0308 	ands.w	r3, r2, #8
 8017c94:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8017c98:	d01c      	beq.n	8017cd4 <setvbuf+0x16c>
 8017c9a:	07d3      	lsls	r3, r2, #31
 8017c9c:	bf41      	itttt	mi
 8017c9e:	2300      	movmi	r3, #0
 8017ca0:	426d      	negmi	r5, r5
 8017ca2:	60a3      	strmi	r3, [r4, #8]
 8017ca4:	61a5      	strmi	r5, [r4, #24]
 8017ca6:	bf58      	it	pl
 8017ca8:	60a5      	strpl	r5, [r4, #8]
 8017caa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8017cac:	f015 0501 	ands.w	r5, r5, #1
 8017cb0:	d115      	bne.n	8017cde <setvbuf+0x176>
 8017cb2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8017cb6:	e7c8      	b.n	8017c4a <setvbuf+0xe2>
 8017cb8:	4648      	mov	r0, r9
 8017cba:	f000 fb29 	bl	8018310 <malloc>
 8017cbe:	4606      	mov	r6, r0
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d0ae      	beq.n	8017c22 <setvbuf+0xba>
 8017cc4:	464d      	mov	r5, r9
 8017cc6:	89a3      	ldrh	r3, [r4, #12]
 8017cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ccc:	81a3      	strh	r3, [r4, #12]
 8017cce:	e7d0      	b.n	8017c72 <setvbuf+0x10a>
 8017cd0:	2500      	movs	r5, #0
 8017cd2:	e7a8      	b.n	8017c26 <setvbuf+0xbe>
 8017cd4:	60a3      	str	r3, [r4, #8]
 8017cd6:	e7e8      	b.n	8017caa <setvbuf+0x142>
 8017cd8:	f04f 35ff 	mov.w	r5, #4294967295
 8017cdc:	e7b9      	b.n	8017c52 <setvbuf+0xea>
 8017cde:	2500      	movs	r5, #0
 8017ce0:	e7b7      	b.n	8017c52 <setvbuf+0xea>
 8017ce2:	bf00      	nop
 8017ce4:	2000001c 	.word	0x2000001c
 8017ce8:	0801c678 	.word	0x0801c678
 8017cec:	0801c698 	.word	0x0801c698
 8017cf0:	0801c658 	.word	0x0801c658

08017cf4 <__swbuf_r>:
 8017cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cf6:	460e      	mov	r6, r1
 8017cf8:	4614      	mov	r4, r2
 8017cfa:	4605      	mov	r5, r0
 8017cfc:	b118      	cbz	r0, 8017d06 <__swbuf_r+0x12>
 8017cfe:	6983      	ldr	r3, [r0, #24]
 8017d00:	b90b      	cbnz	r3, 8017d06 <__swbuf_r+0x12>
 8017d02:	f000 f9ef 	bl	80180e4 <__sinit>
 8017d06:	4b21      	ldr	r3, [pc, #132]	; (8017d8c <__swbuf_r+0x98>)
 8017d08:	429c      	cmp	r4, r3
 8017d0a:	d12b      	bne.n	8017d64 <__swbuf_r+0x70>
 8017d0c:	686c      	ldr	r4, [r5, #4]
 8017d0e:	69a3      	ldr	r3, [r4, #24]
 8017d10:	60a3      	str	r3, [r4, #8]
 8017d12:	89a3      	ldrh	r3, [r4, #12]
 8017d14:	071a      	lsls	r2, r3, #28
 8017d16:	d52f      	bpl.n	8017d78 <__swbuf_r+0x84>
 8017d18:	6923      	ldr	r3, [r4, #16]
 8017d1a:	b36b      	cbz	r3, 8017d78 <__swbuf_r+0x84>
 8017d1c:	6923      	ldr	r3, [r4, #16]
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	1ac0      	subs	r0, r0, r3
 8017d22:	6963      	ldr	r3, [r4, #20]
 8017d24:	b2f6      	uxtb	r6, r6
 8017d26:	4283      	cmp	r3, r0
 8017d28:	4637      	mov	r7, r6
 8017d2a:	dc04      	bgt.n	8017d36 <__swbuf_r+0x42>
 8017d2c:	4621      	mov	r1, r4
 8017d2e:	4628      	mov	r0, r5
 8017d30:	f000 f944 	bl	8017fbc <_fflush_r>
 8017d34:	bb30      	cbnz	r0, 8017d84 <__swbuf_r+0x90>
 8017d36:	68a3      	ldr	r3, [r4, #8]
 8017d38:	3b01      	subs	r3, #1
 8017d3a:	60a3      	str	r3, [r4, #8]
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	1c5a      	adds	r2, r3, #1
 8017d40:	6022      	str	r2, [r4, #0]
 8017d42:	701e      	strb	r6, [r3, #0]
 8017d44:	6963      	ldr	r3, [r4, #20]
 8017d46:	3001      	adds	r0, #1
 8017d48:	4283      	cmp	r3, r0
 8017d4a:	d004      	beq.n	8017d56 <__swbuf_r+0x62>
 8017d4c:	89a3      	ldrh	r3, [r4, #12]
 8017d4e:	07db      	lsls	r3, r3, #31
 8017d50:	d506      	bpl.n	8017d60 <__swbuf_r+0x6c>
 8017d52:	2e0a      	cmp	r6, #10
 8017d54:	d104      	bne.n	8017d60 <__swbuf_r+0x6c>
 8017d56:	4621      	mov	r1, r4
 8017d58:	4628      	mov	r0, r5
 8017d5a:	f000 f92f 	bl	8017fbc <_fflush_r>
 8017d5e:	b988      	cbnz	r0, 8017d84 <__swbuf_r+0x90>
 8017d60:	4638      	mov	r0, r7
 8017d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d64:	4b0a      	ldr	r3, [pc, #40]	; (8017d90 <__swbuf_r+0x9c>)
 8017d66:	429c      	cmp	r4, r3
 8017d68:	d101      	bne.n	8017d6e <__swbuf_r+0x7a>
 8017d6a:	68ac      	ldr	r4, [r5, #8]
 8017d6c:	e7cf      	b.n	8017d0e <__swbuf_r+0x1a>
 8017d6e:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <__swbuf_r+0xa0>)
 8017d70:	429c      	cmp	r4, r3
 8017d72:	bf08      	it	eq
 8017d74:	68ec      	ldreq	r4, [r5, #12]
 8017d76:	e7ca      	b.n	8017d0e <__swbuf_r+0x1a>
 8017d78:	4621      	mov	r1, r4
 8017d7a:	4628      	mov	r0, r5
 8017d7c:	f000 f80c 	bl	8017d98 <__swsetup_r>
 8017d80:	2800      	cmp	r0, #0
 8017d82:	d0cb      	beq.n	8017d1c <__swbuf_r+0x28>
 8017d84:	f04f 37ff 	mov.w	r7, #4294967295
 8017d88:	e7ea      	b.n	8017d60 <__swbuf_r+0x6c>
 8017d8a:	bf00      	nop
 8017d8c:	0801c678 	.word	0x0801c678
 8017d90:	0801c698 	.word	0x0801c698
 8017d94:	0801c658 	.word	0x0801c658

08017d98 <__swsetup_r>:
 8017d98:	4b32      	ldr	r3, [pc, #200]	; (8017e64 <__swsetup_r+0xcc>)
 8017d9a:	b570      	push	{r4, r5, r6, lr}
 8017d9c:	681d      	ldr	r5, [r3, #0]
 8017d9e:	4606      	mov	r6, r0
 8017da0:	460c      	mov	r4, r1
 8017da2:	b125      	cbz	r5, 8017dae <__swsetup_r+0x16>
 8017da4:	69ab      	ldr	r3, [r5, #24]
 8017da6:	b913      	cbnz	r3, 8017dae <__swsetup_r+0x16>
 8017da8:	4628      	mov	r0, r5
 8017daa:	f000 f99b 	bl	80180e4 <__sinit>
 8017dae:	4b2e      	ldr	r3, [pc, #184]	; (8017e68 <__swsetup_r+0xd0>)
 8017db0:	429c      	cmp	r4, r3
 8017db2:	d10f      	bne.n	8017dd4 <__swsetup_r+0x3c>
 8017db4:	686c      	ldr	r4, [r5, #4]
 8017db6:	89a3      	ldrh	r3, [r4, #12]
 8017db8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017dbc:	0719      	lsls	r1, r3, #28
 8017dbe:	d42c      	bmi.n	8017e1a <__swsetup_r+0x82>
 8017dc0:	06dd      	lsls	r5, r3, #27
 8017dc2:	d411      	bmi.n	8017de8 <__swsetup_r+0x50>
 8017dc4:	2309      	movs	r3, #9
 8017dc6:	6033      	str	r3, [r6, #0]
 8017dc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017dcc:	81a3      	strh	r3, [r4, #12]
 8017dce:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd2:	e03e      	b.n	8017e52 <__swsetup_r+0xba>
 8017dd4:	4b25      	ldr	r3, [pc, #148]	; (8017e6c <__swsetup_r+0xd4>)
 8017dd6:	429c      	cmp	r4, r3
 8017dd8:	d101      	bne.n	8017dde <__swsetup_r+0x46>
 8017dda:	68ac      	ldr	r4, [r5, #8]
 8017ddc:	e7eb      	b.n	8017db6 <__swsetup_r+0x1e>
 8017dde:	4b24      	ldr	r3, [pc, #144]	; (8017e70 <__swsetup_r+0xd8>)
 8017de0:	429c      	cmp	r4, r3
 8017de2:	bf08      	it	eq
 8017de4:	68ec      	ldreq	r4, [r5, #12]
 8017de6:	e7e6      	b.n	8017db6 <__swsetup_r+0x1e>
 8017de8:	0758      	lsls	r0, r3, #29
 8017dea:	d512      	bpl.n	8017e12 <__swsetup_r+0x7a>
 8017dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dee:	b141      	cbz	r1, 8017e02 <__swsetup_r+0x6a>
 8017df0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017df4:	4299      	cmp	r1, r3
 8017df6:	d002      	beq.n	8017dfe <__swsetup_r+0x66>
 8017df8:	4630      	mov	r0, r6
 8017dfa:	f000 fa91 	bl	8018320 <_free_r>
 8017dfe:	2300      	movs	r3, #0
 8017e00:	6363      	str	r3, [r4, #52]	; 0x34
 8017e02:	89a3      	ldrh	r3, [r4, #12]
 8017e04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e08:	81a3      	strh	r3, [r4, #12]
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	6063      	str	r3, [r4, #4]
 8017e0e:	6923      	ldr	r3, [r4, #16]
 8017e10:	6023      	str	r3, [r4, #0]
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	f043 0308 	orr.w	r3, r3, #8
 8017e18:	81a3      	strh	r3, [r4, #12]
 8017e1a:	6923      	ldr	r3, [r4, #16]
 8017e1c:	b94b      	cbnz	r3, 8017e32 <__swsetup_r+0x9a>
 8017e1e:	89a3      	ldrh	r3, [r4, #12]
 8017e20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e28:	d003      	beq.n	8017e32 <__swsetup_r+0x9a>
 8017e2a:	4621      	mov	r1, r4
 8017e2c:	4630      	mov	r0, r6
 8017e2e:	f000 fa2f 	bl	8018290 <__smakebuf_r>
 8017e32:	89a0      	ldrh	r0, [r4, #12]
 8017e34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e38:	f010 0301 	ands.w	r3, r0, #1
 8017e3c:	d00a      	beq.n	8017e54 <__swsetup_r+0xbc>
 8017e3e:	2300      	movs	r3, #0
 8017e40:	60a3      	str	r3, [r4, #8]
 8017e42:	6963      	ldr	r3, [r4, #20]
 8017e44:	425b      	negs	r3, r3
 8017e46:	61a3      	str	r3, [r4, #24]
 8017e48:	6923      	ldr	r3, [r4, #16]
 8017e4a:	b943      	cbnz	r3, 8017e5e <__swsetup_r+0xc6>
 8017e4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017e50:	d1ba      	bne.n	8017dc8 <__swsetup_r+0x30>
 8017e52:	bd70      	pop	{r4, r5, r6, pc}
 8017e54:	0781      	lsls	r1, r0, #30
 8017e56:	bf58      	it	pl
 8017e58:	6963      	ldrpl	r3, [r4, #20]
 8017e5a:	60a3      	str	r3, [r4, #8]
 8017e5c:	e7f4      	b.n	8017e48 <__swsetup_r+0xb0>
 8017e5e:	2000      	movs	r0, #0
 8017e60:	e7f7      	b.n	8017e52 <__swsetup_r+0xba>
 8017e62:	bf00      	nop
 8017e64:	2000001c 	.word	0x2000001c
 8017e68:	0801c678 	.word	0x0801c678
 8017e6c:	0801c698 	.word	0x0801c698
 8017e70:	0801c658 	.word	0x0801c658

08017e74 <__assert_func>:
 8017e74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e76:	4614      	mov	r4, r2
 8017e78:	461a      	mov	r2, r3
 8017e7a:	4b09      	ldr	r3, [pc, #36]	; (8017ea0 <__assert_func+0x2c>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	4605      	mov	r5, r0
 8017e80:	68d8      	ldr	r0, [r3, #12]
 8017e82:	b14c      	cbz	r4, 8017e98 <__assert_func+0x24>
 8017e84:	4b07      	ldr	r3, [pc, #28]	; (8017ea4 <__assert_func+0x30>)
 8017e86:	9100      	str	r1, [sp, #0]
 8017e88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017e8c:	4906      	ldr	r1, [pc, #24]	; (8017ea8 <__assert_func+0x34>)
 8017e8e:	462b      	mov	r3, r5
 8017e90:	f000 f9a6 	bl	80181e0 <fiprintf>
 8017e94:	f000 fe42 	bl	8018b1c <abort>
 8017e98:	4b04      	ldr	r3, [pc, #16]	; (8017eac <__assert_func+0x38>)
 8017e9a:	461c      	mov	r4, r3
 8017e9c:	e7f3      	b.n	8017e86 <__assert_func+0x12>
 8017e9e:	bf00      	nop
 8017ea0:	2000001c 	.word	0x2000001c
 8017ea4:	0801c61a 	.word	0x0801c61a
 8017ea8:	0801c627 	.word	0x0801c627
 8017eac:	0801c655 	.word	0x0801c655

08017eb0 <__sflush_r>:
 8017eb0:	898a      	ldrh	r2, [r1, #12]
 8017eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	0710      	lsls	r0, r2, #28
 8017eba:	460c      	mov	r4, r1
 8017ebc:	d458      	bmi.n	8017f70 <__sflush_r+0xc0>
 8017ebe:	684b      	ldr	r3, [r1, #4]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	dc05      	bgt.n	8017ed0 <__sflush_r+0x20>
 8017ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	dc02      	bgt.n	8017ed0 <__sflush_r+0x20>
 8017eca:	2000      	movs	r0, #0
 8017ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ed2:	2e00      	cmp	r6, #0
 8017ed4:	d0f9      	beq.n	8017eca <__sflush_r+0x1a>
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017edc:	682f      	ldr	r7, [r5, #0]
 8017ede:	602b      	str	r3, [r5, #0]
 8017ee0:	d032      	beq.n	8017f48 <__sflush_r+0x98>
 8017ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017ee4:	89a3      	ldrh	r3, [r4, #12]
 8017ee6:	075a      	lsls	r2, r3, #29
 8017ee8:	d505      	bpl.n	8017ef6 <__sflush_r+0x46>
 8017eea:	6863      	ldr	r3, [r4, #4]
 8017eec:	1ac0      	subs	r0, r0, r3
 8017eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ef0:	b10b      	cbz	r3, 8017ef6 <__sflush_r+0x46>
 8017ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ef4:	1ac0      	subs	r0, r0, r3
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	4602      	mov	r2, r0
 8017efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017efc:	6a21      	ldr	r1, [r4, #32]
 8017efe:	4628      	mov	r0, r5
 8017f00:	47b0      	blx	r6
 8017f02:	1c43      	adds	r3, r0, #1
 8017f04:	89a3      	ldrh	r3, [r4, #12]
 8017f06:	d106      	bne.n	8017f16 <__sflush_r+0x66>
 8017f08:	6829      	ldr	r1, [r5, #0]
 8017f0a:	291d      	cmp	r1, #29
 8017f0c:	d82c      	bhi.n	8017f68 <__sflush_r+0xb8>
 8017f0e:	4a2a      	ldr	r2, [pc, #168]	; (8017fb8 <__sflush_r+0x108>)
 8017f10:	40ca      	lsrs	r2, r1
 8017f12:	07d6      	lsls	r6, r2, #31
 8017f14:	d528      	bpl.n	8017f68 <__sflush_r+0xb8>
 8017f16:	2200      	movs	r2, #0
 8017f18:	6062      	str	r2, [r4, #4]
 8017f1a:	04d9      	lsls	r1, r3, #19
 8017f1c:	6922      	ldr	r2, [r4, #16]
 8017f1e:	6022      	str	r2, [r4, #0]
 8017f20:	d504      	bpl.n	8017f2c <__sflush_r+0x7c>
 8017f22:	1c42      	adds	r2, r0, #1
 8017f24:	d101      	bne.n	8017f2a <__sflush_r+0x7a>
 8017f26:	682b      	ldr	r3, [r5, #0]
 8017f28:	b903      	cbnz	r3, 8017f2c <__sflush_r+0x7c>
 8017f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8017f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f2e:	602f      	str	r7, [r5, #0]
 8017f30:	2900      	cmp	r1, #0
 8017f32:	d0ca      	beq.n	8017eca <__sflush_r+0x1a>
 8017f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f38:	4299      	cmp	r1, r3
 8017f3a:	d002      	beq.n	8017f42 <__sflush_r+0x92>
 8017f3c:	4628      	mov	r0, r5
 8017f3e:	f000 f9ef 	bl	8018320 <_free_r>
 8017f42:	2000      	movs	r0, #0
 8017f44:	6360      	str	r0, [r4, #52]	; 0x34
 8017f46:	e7c1      	b.n	8017ecc <__sflush_r+0x1c>
 8017f48:	6a21      	ldr	r1, [r4, #32]
 8017f4a:	2301      	movs	r3, #1
 8017f4c:	4628      	mov	r0, r5
 8017f4e:	47b0      	blx	r6
 8017f50:	1c41      	adds	r1, r0, #1
 8017f52:	d1c7      	bne.n	8017ee4 <__sflush_r+0x34>
 8017f54:	682b      	ldr	r3, [r5, #0]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d0c4      	beq.n	8017ee4 <__sflush_r+0x34>
 8017f5a:	2b1d      	cmp	r3, #29
 8017f5c:	d001      	beq.n	8017f62 <__sflush_r+0xb2>
 8017f5e:	2b16      	cmp	r3, #22
 8017f60:	d101      	bne.n	8017f66 <__sflush_r+0xb6>
 8017f62:	602f      	str	r7, [r5, #0]
 8017f64:	e7b1      	b.n	8017eca <__sflush_r+0x1a>
 8017f66:	89a3      	ldrh	r3, [r4, #12]
 8017f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f6c:	81a3      	strh	r3, [r4, #12]
 8017f6e:	e7ad      	b.n	8017ecc <__sflush_r+0x1c>
 8017f70:	690f      	ldr	r7, [r1, #16]
 8017f72:	2f00      	cmp	r7, #0
 8017f74:	d0a9      	beq.n	8017eca <__sflush_r+0x1a>
 8017f76:	0793      	lsls	r3, r2, #30
 8017f78:	680e      	ldr	r6, [r1, #0]
 8017f7a:	bf08      	it	eq
 8017f7c:	694b      	ldreq	r3, [r1, #20]
 8017f7e:	600f      	str	r7, [r1, #0]
 8017f80:	bf18      	it	ne
 8017f82:	2300      	movne	r3, #0
 8017f84:	eba6 0807 	sub.w	r8, r6, r7
 8017f88:	608b      	str	r3, [r1, #8]
 8017f8a:	f1b8 0f00 	cmp.w	r8, #0
 8017f8e:	dd9c      	ble.n	8017eca <__sflush_r+0x1a>
 8017f90:	6a21      	ldr	r1, [r4, #32]
 8017f92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f94:	4643      	mov	r3, r8
 8017f96:	463a      	mov	r2, r7
 8017f98:	4628      	mov	r0, r5
 8017f9a:	47b0      	blx	r6
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	dc06      	bgt.n	8017fae <__sflush_r+0xfe>
 8017fa0:	89a3      	ldrh	r3, [r4, #12]
 8017fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fa6:	81a3      	strh	r3, [r4, #12]
 8017fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fac:	e78e      	b.n	8017ecc <__sflush_r+0x1c>
 8017fae:	4407      	add	r7, r0
 8017fb0:	eba8 0800 	sub.w	r8, r8, r0
 8017fb4:	e7e9      	b.n	8017f8a <__sflush_r+0xda>
 8017fb6:	bf00      	nop
 8017fb8:	20400001 	.word	0x20400001

08017fbc <_fflush_r>:
 8017fbc:	b538      	push	{r3, r4, r5, lr}
 8017fbe:	690b      	ldr	r3, [r1, #16]
 8017fc0:	4605      	mov	r5, r0
 8017fc2:	460c      	mov	r4, r1
 8017fc4:	b913      	cbnz	r3, 8017fcc <_fflush_r+0x10>
 8017fc6:	2500      	movs	r5, #0
 8017fc8:	4628      	mov	r0, r5
 8017fca:	bd38      	pop	{r3, r4, r5, pc}
 8017fcc:	b118      	cbz	r0, 8017fd6 <_fflush_r+0x1a>
 8017fce:	6983      	ldr	r3, [r0, #24]
 8017fd0:	b90b      	cbnz	r3, 8017fd6 <_fflush_r+0x1a>
 8017fd2:	f000 f887 	bl	80180e4 <__sinit>
 8017fd6:	4b14      	ldr	r3, [pc, #80]	; (8018028 <_fflush_r+0x6c>)
 8017fd8:	429c      	cmp	r4, r3
 8017fda:	d11b      	bne.n	8018014 <_fflush_r+0x58>
 8017fdc:	686c      	ldr	r4, [r5, #4]
 8017fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d0ef      	beq.n	8017fc6 <_fflush_r+0xa>
 8017fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fe8:	07d0      	lsls	r0, r2, #31
 8017fea:	d404      	bmi.n	8017ff6 <_fflush_r+0x3a>
 8017fec:	0599      	lsls	r1, r3, #22
 8017fee:	d402      	bmi.n	8017ff6 <_fflush_r+0x3a>
 8017ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ff2:	f000 f927 	bl	8018244 <__retarget_lock_acquire_recursive>
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	4621      	mov	r1, r4
 8017ffa:	f7ff ff59 	bl	8017eb0 <__sflush_r>
 8017ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018000:	07da      	lsls	r2, r3, #31
 8018002:	4605      	mov	r5, r0
 8018004:	d4e0      	bmi.n	8017fc8 <_fflush_r+0xc>
 8018006:	89a3      	ldrh	r3, [r4, #12]
 8018008:	059b      	lsls	r3, r3, #22
 801800a:	d4dd      	bmi.n	8017fc8 <_fflush_r+0xc>
 801800c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801800e:	f000 f91a 	bl	8018246 <__retarget_lock_release_recursive>
 8018012:	e7d9      	b.n	8017fc8 <_fflush_r+0xc>
 8018014:	4b05      	ldr	r3, [pc, #20]	; (801802c <_fflush_r+0x70>)
 8018016:	429c      	cmp	r4, r3
 8018018:	d101      	bne.n	801801e <_fflush_r+0x62>
 801801a:	68ac      	ldr	r4, [r5, #8]
 801801c:	e7df      	b.n	8017fde <_fflush_r+0x22>
 801801e:	4b04      	ldr	r3, [pc, #16]	; (8018030 <_fflush_r+0x74>)
 8018020:	429c      	cmp	r4, r3
 8018022:	bf08      	it	eq
 8018024:	68ec      	ldreq	r4, [r5, #12]
 8018026:	e7da      	b.n	8017fde <_fflush_r+0x22>
 8018028:	0801c678 	.word	0x0801c678
 801802c:	0801c698 	.word	0x0801c698
 8018030:	0801c658 	.word	0x0801c658

08018034 <std>:
 8018034:	2300      	movs	r3, #0
 8018036:	b510      	push	{r4, lr}
 8018038:	4604      	mov	r4, r0
 801803a:	e9c0 3300 	strd	r3, r3, [r0]
 801803e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018042:	6083      	str	r3, [r0, #8]
 8018044:	8181      	strh	r1, [r0, #12]
 8018046:	6643      	str	r3, [r0, #100]	; 0x64
 8018048:	81c2      	strh	r2, [r0, #14]
 801804a:	6183      	str	r3, [r0, #24]
 801804c:	4619      	mov	r1, r3
 801804e:	2208      	movs	r2, #8
 8018050:	305c      	adds	r0, #92	; 0x5c
 8018052:	f7ff fcb3 	bl	80179bc <memset>
 8018056:	4b05      	ldr	r3, [pc, #20]	; (801806c <std+0x38>)
 8018058:	6263      	str	r3, [r4, #36]	; 0x24
 801805a:	4b05      	ldr	r3, [pc, #20]	; (8018070 <std+0x3c>)
 801805c:	62a3      	str	r3, [r4, #40]	; 0x28
 801805e:	4b05      	ldr	r3, [pc, #20]	; (8018074 <std+0x40>)
 8018060:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018062:	4b05      	ldr	r3, [pc, #20]	; (8018078 <std+0x44>)
 8018064:	6224      	str	r4, [r4, #32]
 8018066:	6323      	str	r3, [r4, #48]	; 0x30
 8018068:	bd10      	pop	{r4, pc}
 801806a:	bf00      	nop
 801806c:	08018a71 	.word	0x08018a71
 8018070:	08018a93 	.word	0x08018a93
 8018074:	08018acb 	.word	0x08018acb
 8018078:	08018aef 	.word	0x08018aef

0801807c <_cleanup_r>:
 801807c:	4901      	ldr	r1, [pc, #4]	; (8018084 <_cleanup_r+0x8>)
 801807e:	f000 b8c1 	b.w	8018204 <_fwalk_reent>
 8018082:	bf00      	nop
 8018084:	08017fbd 	.word	0x08017fbd

08018088 <__sfmoreglue>:
 8018088:	b570      	push	{r4, r5, r6, lr}
 801808a:	1e4a      	subs	r2, r1, #1
 801808c:	2568      	movs	r5, #104	; 0x68
 801808e:	4355      	muls	r5, r2
 8018090:	460e      	mov	r6, r1
 8018092:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018096:	f000 f993 	bl	80183c0 <_malloc_r>
 801809a:	4604      	mov	r4, r0
 801809c:	b140      	cbz	r0, 80180b0 <__sfmoreglue+0x28>
 801809e:	2100      	movs	r1, #0
 80180a0:	e9c0 1600 	strd	r1, r6, [r0]
 80180a4:	300c      	adds	r0, #12
 80180a6:	60a0      	str	r0, [r4, #8]
 80180a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80180ac:	f7ff fc86 	bl	80179bc <memset>
 80180b0:	4620      	mov	r0, r4
 80180b2:	bd70      	pop	{r4, r5, r6, pc}

080180b4 <__sfp_lock_acquire>:
 80180b4:	4801      	ldr	r0, [pc, #4]	; (80180bc <__sfp_lock_acquire+0x8>)
 80180b6:	f000 b8c5 	b.w	8018244 <__retarget_lock_acquire_recursive>
 80180ba:	bf00      	nop
 80180bc:	2000b924 	.word	0x2000b924

080180c0 <__sfp_lock_release>:
 80180c0:	4801      	ldr	r0, [pc, #4]	; (80180c8 <__sfp_lock_release+0x8>)
 80180c2:	f000 b8c0 	b.w	8018246 <__retarget_lock_release_recursive>
 80180c6:	bf00      	nop
 80180c8:	2000b924 	.word	0x2000b924

080180cc <__sinit_lock_acquire>:
 80180cc:	4801      	ldr	r0, [pc, #4]	; (80180d4 <__sinit_lock_acquire+0x8>)
 80180ce:	f000 b8b9 	b.w	8018244 <__retarget_lock_acquire_recursive>
 80180d2:	bf00      	nop
 80180d4:	2000b91f 	.word	0x2000b91f

080180d8 <__sinit_lock_release>:
 80180d8:	4801      	ldr	r0, [pc, #4]	; (80180e0 <__sinit_lock_release+0x8>)
 80180da:	f000 b8b4 	b.w	8018246 <__retarget_lock_release_recursive>
 80180de:	bf00      	nop
 80180e0:	2000b91f 	.word	0x2000b91f

080180e4 <__sinit>:
 80180e4:	b510      	push	{r4, lr}
 80180e6:	4604      	mov	r4, r0
 80180e8:	f7ff fff0 	bl	80180cc <__sinit_lock_acquire>
 80180ec:	69a3      	ldr	r3, [r4, #24]
 80180ee:	b11b      	cbz	r3, 80180f8 <__sinit+0x14>
 80180f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180f4:	f7ff bff0 	b.w	80180d8 <__sinit_lock_release>
 80180f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80180fc:	6523      	str	r3, [r4, #80]	; 0x50
 80180fe:	4b13      	ldr	r3, [pc, #76]	; (801814c <__sinit+0x68>)
 8018100:	4a13      	ldr	r2, [pc, #76]	; (8018150 <__sinit+0x6c>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	62a2      	str	r2, [r4, #40]	; 0x28
 8018106:	42a3      	cmp	r3, r4
 8018108:	bf04      	itt	eq
 801810a:	2301      	moveq	r3, #1
 801810c:	61a3      	streq	r3, [r4, #24]
 801810e:	4620      	mov	r0, r4
 8018110:	f000 f820 	bl	8018154 <__sfp>
 8018114:	6060      	str	r0, [r4, #4]
 8018116:	4620      	mov	r0, r4
 8018118:	f000 f81c 	bl	8018154 <__sfp>
 801811c:	60a0      	str	r0, [r4, #8]
 801811e:	4620      	mov	r0, r4
 8018120:	f000 f818 	bl	8018154 <__sfp>
 8018124:	2200      	movs	r2, #0
 8018126:	60e0      	str	r0, [r4, #12]
 8018128:	2104      	movs	r1, #4
 801812a:	6860      	ldr	r0, [r4, #4]
 801812c:	f7ff ff82 	bl	8018034 <std>
 8018130:	68a0      	ldr	r0, [r4, #8]
 8018132:	2201      	movs	r2, #1
 8018134:	2109      	movs	r1, #9
 8018136:	f7ff ff7d 	bl	8018034 <std>
 801813a:	68e0      	ldr	r0, [r4, #12]
 801813c:	2202      	movs	r2, #2
 801813e:	2112      	movs	r1, #18
 8018140:	f7ff ff78 	bl	8018034 <std>
 8018144:	2301      	movs	r3, #1
 8018146:	61a3      	str	r3, [r4, #24]
 8018148:	e7d2      	b.n	80180f0 <__sinit+0xc>
 801814a:	bf00      	nop
 801814c:	0801c5a0 	.word	0x0801c5a0
 8018150:	0801807d 	.word	0x0801807d

08018154 <__sfp>:
 8018154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018156:	4607      	mov	r7, r0
 8018158:	f7ff ffac 	bl	80180b4 <__sfp_lock_acquire>
 801815c:	4b1e      	ldr	r3, [pc, #120]	; (80181d8 <__sfp+0x84>)
 801815e:	681e      	ldr	r6, [r3, #0]
 8018160:	69b3      	ldr	r3, [r6, #24]
 8018162:	b913      	cbnz	r3, 801816a <__sfp+0x16>
 8018164:	4630      	mov	r0, r6
 8018166:	f7ff ffbd 	bl	80180e4 <__sinit>
 801816a:	3648      	adds	r6, #72	; 0x48
 801816c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018170:	3b01      	subs	r3, #1
 8018172:	d503      	bpl.n	801817c <__sfp+0x28>
 8018174:	6833      	ldr	r3, [r6, #0]
 8018176:	b30b      	cbz	r3, 80181bc <__sfp+0x68>
 8018178:	6836      	ldr	r6, [r6, #0]
 801817a:	e7f7      	b.n	801816c <__sfp+0x18>
 801817c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018180:	b9d5      	cbnz	r5, 80181b8 <__sfp+0x64>
 8018182:	4b16      	ldr	r3, [pc, #88]	; (80181dc <__sfp+0x88>)
 8018184:	60e3      	str	r3, [r4, #12]
 8018186:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801818a:	6665      	str	r5, [r4, #100]	; 0x64
 801818c:	f000 f859 	bl	8018242 <__retarget_lock_init_recursive>
 8018190:	f7ff ff96 	bl	80180c0 <__sfp_lock_release>
 8018194:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018198:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801819c:	6025      	str	r5, [r4, #0]
 801819e:	61a5      	str	r5, [r4, #24]
 80181a0:	2208      	movs	r2, #8
 80181a2:	4629      	mov	r1, r5
 80181a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80181a8:	f7ff fc08 	bl	80179bc <memset>
 80181ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80181b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80181b4:	4620      	mov	r0, r4
 80181b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181b8:	3468      	adds	r4, #104	; 0x68
 80181ba:	e7d9      	b.n	8018170 <__sfp+0x1c>
 80181bc:	2104      	movs	r1, #4
 80181be:	4638      	mov	r0, r7
 80181c0:	f7ff ff62 	bl	8018088 <__sfmoreglue>
 80181c4:	4604      	mov	r4, r0
 80181c6:	6030      	str	r0, [r6, #0]
 80181c8:	2800      	cmp	r0, #0
 80181ca:	d1d5      	bne.n	8018178 <__sfp+0x24>
 80181cc:	f7ff ff78 	bl	80180c0 <__sfp_lock_release>
 80181d0:	230c      	movs	r3, #12
 80181d2:	603b      	str	r3, [r7, #0]
 80181d4:	e7ee      	b.n	80181b4 <__sfp+0x60>
 80181d6:	bf00      	nop
 80181d8:	0801c5a0 	.word	0x0801c5a0
 80181dc:	ffff0001 	.word	0xffff0001

080181e0 <fiprintf>:
 80181e0:	b40e      	push	{r1, r2, r3}
 80181e2:	b503      	push	{r0, r1, lr}
 80181e4:	4601      	mov	r1, r0
 80181e6:	ab03      	add	r3, sp, #12
 80181e8:	4805      	ldr	r0, [pc, #20]	; (8018200 <fiprintf+0x20>)
 80181ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80181ee:	6800      	ldr	r0, [r0, #0]
 80181f0:	9301      	str	r3, [sp, #4]
 80181f2:	f000 f969 	bl	80184c8 <_vfiprintf_r>
 80181f6:	b002      	add	sp, #8
 80181f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80181fc:	b003      	add	sp, #12
 80181fe:	4770      	bx	lr
 8018200:	2000001c 	.word	0x2000001c

08018204 <_fwalk_reent>:
 8018204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018208:	4606      	mov	r6, r0
 801820a:	4688      	mov	r8, r1
 801820c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018210:	2700      	movs	r7, #0
 8018212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018216:	f1b9 0901 	subs.w	r9, r9, #1
 801821a:	d505      	bpl.n	8018228 <_fwalk_reent+0x24>
 801821c:	6824      	ldr	r4, [r4, #0]
 801821e:	2c00      	cmp	r4, #0
 8018220:	d1f7      	bne.n	8018212 <_fwalk_reent+0xe>
 8018222:	4638      	mov	r0, r7
 8018224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018228:	89ab      	ldrh	r3, [r5, #12]
 801822a:	2b01      	cmp	r3, #1
 801822c:	d907      	bls.n	801823e <_fwalk_reent+0x3a>
 801822e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018232:	3301      	adds	r3, #1
 8018234:	d003      	beq.n	801823e <_fwalk_reent+0x3a>
 8018236:	4629      	mov	r1, r5
 8018238:	4630      	mov	r0, r6
 801823a:	47c0      	blx	r8
 801823c:	4307      	orrs	r7, r0
 801823e:	3568      	adds	r5, #104	; 0x68
 8018240:	e7e9      	b.n	8018216 <_fwalk_reent+0x12>

08018242 <__retarget_lock_init_recursive>:
 8018242:	4770      	bx	lr

08018244 <__retarget_lock_acquire_recursive>:
 8018244:	4770      	bx	lr

08018246 <__retarget_lock_release_recursive>:
 8018246:	4770      	bx	lr

08018248 <__swhatbuf_r>:
 8018248:	b570      	push	{r4, r5, r6, lr}
 801824a:	460e      	mov	r6, r1
 801824c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018250:	2900      	cmp	r1, #0
 8018252:	b096      	sub	sp, #88	; 0x58
 8018254:	4614      	mov	r4, r2
 8018256:	461d      	mov	r5, r3
 8018258:	da07      	bge.n	801826a <__swhatbuf_r+0x22>
 801825a:	2300      	movs	r3, #0
 801825c:	602b      	str	r3, [r5, #0]
 801825e:	89b3      	ldrh	r3, [r6, #12]
 8018260:	061a      	lsls	r2, r3, #24
 8018262:	d410      	bmi.n	8018286 <__swhatbuf_r+0x3e>
 8018264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018268:	e00e      	b.n	8018288 <__swhatbuf_r+0x40>
 801826a:	466a      	mov	r2, sp
 801826c:	f000 fc6e 	bl	8018b4c <_fstat_r>
 8018270:	2800      	cmp	r0, #0
 8018272:	dbf2      	blt.n	801825a <__swhatbuf_r+0x12>
 8018274:	9a01      	ldr	r2, [sp, #4]
 8018276:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801827a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801827e:	425a      	negs	r2, r3
 8018280:	415a      	adcs	r2, r3
 8018282:	602a      	str	r2, [r5, #0]
 8018284:	e7ee      	b.n	8018264 <__swhatbuf_r+0x1c>
 8018286:	2340      	movs	r3, #64	; 0x40
 8018288:	2000      	movs	r0, #0
 801828a:	6023      	str	r3, [r4, #0]
 801828c:	b016      	add	sp, #88	; 0x58
 801828e:	bd70      	pop	{r4, r5, r6, pc}

08018290 <__smakebuf_r>:
 8018290:	898b      	ldrh	r3, [r1, #12]
 8018292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018294:	079d      	lsls	r5, r3, #30
 8018296:	4606      	mov	r6, r0
 8018298:	460c      	mov	r4, r1
 801829a:	d507      	bpl.n	80182ac <__smakebuf_r+0x1c>
 801829c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80182a0:	6023      	str	r3, [r4, #0]
 80182a2:	6123      	str	r3, [r4, #16]
 80182a4:	2301      	movs	r3, #1
 80182a6:	6163      	str	r3, [r4, #20]
 80182a8:	b002      	add	sp, #8
 80182aa:	bd70      	pop	{r4, r5, r6, pc}
 80182ac:	ab01      	add	r3, sp, #4
 80182ae:	466a      	mov	r2, sp
 80182b0:	f7ff ffca 	bl	8018248 <__swhatbuf_r>
 80182b4:	9900      	ldr	r1, [sp, #0]
 80182b6:	4605      	mov	r5, r0
 80182b8:	4630      	mov	r0, r6
 80182ba:	f000 f881 	bl	80183c0 <_malloc_r>
 80182be:	b948      	cbnz	r0, 80182d4 <__smakebuf_r+0x44>
 80182c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182c4:	059a      	lsls	r2, r3, #22
 80182c6:	d4ef      	bmi.n	80182a8 <__smakebuf_r+0x18>
 80182c8:	f023 0303 	bic.w	r3, r3, #3
 80182cc:	f043 0302 	orr.w	r3, r3, #2
 80182d0:	81a3      	strh	r3, [r4, #12]
 80182d2:	e7e3      	b.n	801829c <__smakebuf_r+0xc>
 80182d4:	4b0d      	ldr	r3, [pc, #52]	; (801830c <__smakebuf_r+0x7c>)
 80182d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80182d8:	89a3      	ldrh	r3, [r4, #12]
 80182da:	6020      	str	r0, [r4, #0]
 80182dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80182e0:	81a3      	strh	r3, [r4, #12]
 80182e2:	9b00      	ldr	r3, [sp, #0]
 80182e4:	6163      	str	r3, [r4, #20]
 80182e6:	9b01      	ldr	r3, [sp, #4]
 80182e8:	6120      	str	r0, [r4, #16]
 80182ea:	b15b      	cbz	r3, 8018304 <__smakebuf_r+0x74>
 80182ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80182f0:	4630      	mov	r0, r6
 80182f2:	f000 fc3d 	bl	8018b70 <_isatty_r>
 80182f6:	b128      	cbz	r0, 8018304 <__smakebuf_r+0x74>
 80182f8:	89a3      	ldrh	r3, [r4, #12]
 80182fa:	f023 0303 	bic.w	r3, r3, #3
 80182fe:	f043 0301 	orr.w	r3, r3, #1
 8018302:	81a3      	strh	r3, [r4, #12]
 8018304:	89a0      	ldrh	r0, [r4, #12]
 8018306:	4305      	orrs	r5, r0
 8018308:	81a5      	strh	r5, [r4, #12]
 801830a:	e7cd      	b.n	80182a8 <__smakebuf_r+0x18>
 801830c:	0801807d 	.word	0x0801807d

08018310 <malloc>:
 8018310:	4b02      	ldr	r3, [pc, #8]	; (801831c <malloc+0xc>)
 8018312:	4601      	mov	r1, r0
 8018314:	6818      	ldr	r0, [r3, #0]
 8018316:	f000 b853 	b.w	80183c0 <_malloc_r>
 801831a:	bf00      	nop
 801831c:	2000001c 	.word	0x2000001c

08018320 <_free_r>:
 8018320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018322:	2900      	cmp	r1, #0
 8018324:	d048      	beq.n	80183b8 <_free_r+0x98>
 8018326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801832a:	9001      	str	r0, [sp, #4]
 801832c:	2b00      	cmp	r3, #0
 801832e:	f1a1 0404 	sub.w	r4, r1, #4
 8018332:	bfb8      	it	lt
 8018334:	18e4      	addlt	r4, r4, r3
 8018336:	f000 fc3d 	bl	8018bb4 <__malloc_lock>
 801833a:	4a20      	ldr	r2, [pc, #128]	; (80183bc <_free_r+0x9c>)
 801833c:	9801      	ldr	r0, [sp, #4]
 801833e:	6813      	ldr	r3, [r2, #0]
 8018340:	4615      	mov	r5, r2
 8018342:	b933      	cbnz	r3, 8018352 <_free_r+0x32>
 8018344:	6063      	str	r3, [r4, #4]
 8018346:	6014      	str	r4, [r2, #0]
 8018348:	b003      	add	sp, #12
 801834a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801834e:	f000 bc37 	b.w	8018bc0 <__malloc_unlock>
 8018352:	42a3      	cmp	r3, r4
 8018354:	d90b      	bls.n	801836e <_free_r+0x4e>
 8018356:	6821      	ldr	r1, [r4, #0]
 8018358:	1862      	adds	r2, r4, r1
 801835a:	4293      	cmp	r3, r2
 801835c:	bf04      	itt	eq
 801835e:	681a      	ldreq	r2, [r3, #0]
 8018360:	685b      	ldreq	r3, [r3, #4]
 8018362:	6063      	str	r3, [r4, #4]
 8018364:	bf04      	itt	eq
 8018366:	1852      	addeq	r2, r2, r1
 8018368:	6022      	streq	r2, [r4, #0]
 801836a:	602c      	str	r4, [r5, #0]
 801836c:	e7ec      	b.n	8018348 <_free_r+0x28>
 801836e:	461a      	mov	r2, r3
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	b10b      	cbz	r3, 8018378 <_free_r+0x58>
 8018374:	42a3      	cmp	r3, r4
 8018376:	d9fa      	bls.n	801836e <_free_r+0x4e>
 8018378:	6811      	ldr	r1, [r2, #0]
 801837a:	1855      	adds	r5, r2, r1
 801837c:	42a5      	cmp	r5, r4
 801837e:	d10b      	bne.n	8018398 <_free_r+0x78>
 8018380:	6824      	ldr	r4, [r4, #0]
 8018382:	4421      	add	r1, r4
 8018384:	1854      	adds	r4, r2, r1
 8018386:	42a3      	cmp	r3, r4
 8018388:	6011      	str	r1, [r2, #0]
 801838a:	d1dd      	bne.n	8018348 <_free_r+0x28>
 801838c:	681c      	ldr	r4, [r3, #0]
 801838e:	685b      	ldr	r3, [r3, #4]
 8018390:	6053      	str	r3, [r2, #4]
 8018392:	4421      	add	r1, r4
 8018394:	6011      	str	r1, [r2, #0]
 8018396:	e7d7      	b.n	8018348 <_free_r+0x28>
 8018398:	d902      	bls.n	80183a0 <_free_r+0x80>
 801839a:	230c      	movs	r3, #12
 801839c:	6003      	str	r3, [r0, #0]
 801839e:	e7d3      	b.n	8018348 <_free_r+0x28>
 80183a0:	6825      	ldr	r5, [r4, #0]
 80183a2:	1961      	adds	r1, r4, r5
 80183a4:	428b      	cmp	r3, r1
 80183a6:	bf04      	itt	eq
 80183a8:	6819      	ldreq	r1, [r3, #0]
 80183aa:	685b      	ldreq	r3, [r3, #4]
 80183ac:	6063      	str	r3, [r4, #4]
 80183ae:	bf04      	itt	eq
 80183b0:	1949      	addeq	r1, r1, r5
 80183b2:	6021      	streq	r1, [r4, #0]
 80183b4:	6054      	str	r4, [r2, #4]
 80183b6:	e7c7      	b.n	8018348 <_free_r+0x28>
 80183b8:	b003      	add	sp, #12
 80183ba:	bd30      	pop	{r4, r5, pc}
 80183bc:	20004b50 	.word	0x20004b50

080183c0 <_malloc_r>:
 80183c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183c2:	1ccd      	adds	r5, r1, #3
 80183c4:	f025 0503 	bic.w	r5, r5, #3
 80183c8:	3508      	adds	r5, #8
 80183ca:	2d0c      	cmp	r5, #12
 80183cc:	bf38      	it	cc
 80183ce:	250c      	movcc	r5, #12
 80183d0:	2d00      	cmp	r5, #0
 80183d2:	4606      	mov	r6, r0
 80183d4:	db01      	blt.n	80183da <_malloc_r+0x1a>
 80183d6:	42a9      	cmp	r1, r5
 80183d8:	d903      	bls.n	80183e2 <_malloc_r+0x22>
 80183da:	230c      	movs	r3, #12
 80183dc:	6033      	str	r3, [r6, #0]
 80183de:	2000      	movs	r0, #0
 80183e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183e2:	f000 fbe7 	bl	8018bb4 <__malloc_lock>
 80183e6:	4921      	ldr	r1, [pc, #132]	; (801846c <_malloc_r+0xac>)
 80183e8:	680a      	ldr	r2, [r1, #0]
 80183ea:	4614      	mov	r4, r2
 80183ec:	b99c      	cbnz	r4, 8018416 <_malloc_r+0x56>
 80183ee:	4f20      	ldr	r7, [pc, #128]	; (8018470 <_malloc_r+0xb0>)
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	b923      	cbnz	r3, 80183fe <_malloc_r+0x3e>
 80183f4:	4621      	mov	r1, r4
 80183f6:	4630      	mov	r0, r6
 80183f8:	f000 fb2a 	bl	8018a50 <_sbrk_r>
 80183fc:	6038      	str	r0, [r7, #0]
 80183fe:	4629      	mov	r1, r5
 8018400:	4630      	mov	r0, r6
 8018402:	f000 fb25 	bl	8018a50 <_sbrk_r>
 8018406:	1c43      	adds	r3, r0, #1
 8018408:	d123      	bne.n	8018452 <_malloc_r+0x92>
 801840a:	230c      	movs	r3, #12
 801840c:	6033      	str	r3, [r6, #0]
 801840e:	4630      	mov	r0, r6
 8018410:	f000 fbd6 	bl	8018bc0 <__malloc_unlock>
 8018414:	e7e3      	b.n	80183de <_malloc_r+0x1e>
 8018416:	6823      	ldr	r3, [r4, #0]
 8018418:	1b5b      	subs	r3, r3, r5
 801841a:	d417      	bmi.n	801844c <_malloc_r+0x8c>
 801841c:	2b0b      	cmp	r3, #11
 801841e:	d903      	bls.n	8018428 <_malloc_r+0x68>
 8018420:	6023      	str	r3, [r4, #0]
 8018422:	441c      	add	r4, r3
 8018424:	6025      	str	r5, [r4, #0]
 8018426:	e004      	b.n	8018432 <_malloc_r+0x72>
 8018428:	6863      	ldr	r3, [r4, #4]
 801842a:	42a2      	cmp	r2, r4
 801842c:	bf0c      	ite	eq
 801842e:	600b      	streq	r3, [r1, #0]
 8018430:	6053      	strne	r3, [r2, #4]
 8018432:	4630      	mov	r0, r6
 8018434:	f000 fbc4 	bl	8018bc0 <__malloc_unlock>
 8018438:	f104 000b 	add.w	r0, r4, #11
 801843c:	1d23      	adds	r3, r4, #4
 801843e:	f020 0007 	bic.w	r0, r0, #7
 8018442:	1ac2      	subs	r2, r0, r3
 8018444:	d0cc      	beq.n	80183e0 <_malloc_r+0x20>
 8018446:	1a1b      	subs	r3, r3, r0
 8018448:	50a3      	str	r3, [r4, r2]
 801844a:	e7c9      	b.n	80183e0 <_malloc_r+0x20>
 801844c:	4622      	mov	r2, r4
 801844e:	6864      	ldr	r4, [r4, #4]
 8018450:	e7cc      	b.n	80183ec <_malloc_r+0x2c>
 8018452:	1cc4      	adds	r4, r0, #3
 8018454:	f024 0403 	bic.w	r4, r4, #3
 8018458:	42a0      	cmp	r0, r4
 801845a:	d0e3      	beq.n	8018424 <_malloc_r+0x64>
 801845c:	1a21      	subs	r1, r4, r0
 801845e:	4630      	mov	r0, r6
 8018460:	f000 faf6 	bl	8018a50 <_sbrk_r>
 8018464:	3001      	adds	r0, #1
 8018466:	d1dd      	bne.n	8018424 <_malloc_r+0x64>
 8018468:	e7cf      	b.n	801840a <_malloc_r+0x4a>
 801846a:	bf00      	nop
 801846c:	20004b50 	.word	0x20004b50
 8018470:	20004b54 	.word	0x20004b54

08018474 <__sfputc_r>:
 8018474:	6893      	ldr	r3, [r2, #8]
 8018476:	3b01      	subs	r3, #1
 8018478:	2b00      	cmp	r3, #0
 801847a:	b410      	push	{r4}
 801847c:	6093      	str	r3, [r2, #8]
 801847e:	da08      	bge.n	8018492 <__sfputc_r+0x1e>
 8018480:	6994      	ldr	r4, [r2, #24]
 8018482:	42a3      	cmp	r3, r4
 8018484:	db01      	blt.n	801848a <__sfputc_r+0x16>
 8018486:	290a      	cmp	r1, #10
 8018488:	d103      	bne.n	8018492 <__sfputc_r+0x1e>
 801848a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801848e:	f7ff bc31 	b.w	8017cf4 <__swbuf_r>
 8018492:	6813      	ldr	r3, [r2, #0]
 8018494:	1c58      	adds	r0, r3, #1
 8018496:	6010      	str	r0, [r2, #0]
 8018498:	7019      	strb	r1, [r3, #0]
 801849a:	4608      	mov	r0, r1
 801849c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184a0:	4770      	bx	lr

080184a2 <__sfputs_r>:
 80184a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184a4:	4606      	mov	r6, r0
 80184a6:	460f      	mov	r7, r1
 80184a8:	4614      	mov	r4, r2
 80184aa:	18d5      	adds	r5, r2, r3
 80184ac:	42ac      	cmp	r4, r5
 80184ae:	d101      	bne.n	80184b4 <__sfputs_r+0x12>
 80184b0:	2000      	movs	r0, #0
 80184b2:	e007      	b.n	80184c4 <__sfputs_r+0x22>
 80184b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184b8:	463a      	mov	r2, r7
 80184ba:	4630      	mov	r0, r6
 80184bc:	f7ff ffda 	bl	8018474 <__sfputc_r>
 80184c0:	1c43      	adds	r3, r0, #1
 80184c2:	d1f3      	bne.n	80184ac <__sfputs_r+0xa>
 80184c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080184c8 <_vfiprintf_r>:
 80184c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184cc:	460d      	mov	r5, r1
 80184ce:	b09d      	sub	sp, #116	; 0x74
 80184d0:	4614      	mov	r4, r2
 80184d2:	4698      	mov	r8, r3
 80184d4:	4606      	mov	r6, r0
 80184d6:	b118      	cbz	r0, 80184e0 <_vfiprintf_r+0x18>
 80184d8:	6983      	ldr	r3, [r0, #24]
 80184da:	b90b      	cbnz	r3, 80184e0 <_vfiprintf_r+0x18>
 80184dc:	f7ff fe02 	bl	80180e4 <__sinit>
 80184e0:	4b89      	ldr	r3, [pc, #548]	; (8018708 <_vfiprintf_r+0x240>)
 80184e2:	429d      	cmp	r5, r3
 80184e4:	d11b      	bne.n	801851e <_vfiprintf_r+0x56>
 80184e6:	6875      	ldr	r5, [r6, #4]
 80184e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184ea:	07d9      	lsls	r1, r3, #31
 80184ec:	d405      	bmi.n	80184fa <_vfiprintf_r+0x32>
 80184ee:	89ab      	ldrh	r3, [r5, #12]
 80184f0:	059a      	lsls	r2, r3, #22
 80184f2:	d402      	bmi.n	80184fa <_vfiprintf_r+0x32>
 80184f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184f6:	f7ff fea5 	bl	8018244 <__retarget_lock_acquire_recursive>
 80184fa:	89ab      	ldrh	r3, [r5, #12]
 80184fc:	071b      	lsls	r3, r3, #28
 80184fe:	d501      	bpl.n	8018504 <_vfiprintf_r+0x3c>
 8018500:	692b      	ldr	r3, [r5, #16]
 8018502:	b9eb      	cbnz	r3, 8018540 <_vfiprintf_r+0x78>
 8018504:	4629      	mov	r1, r5
 8018506:	4630      	mov	r0, r6
 8018508:	f7ff fc46 	bl	8017d98 <__swsetup_r>
 801850c:	b1c0      	cbz	r0, 8018540 <_vfiprintf_r+0x78>
 801850e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018510:	07dc      	lsls	r4, r3, #31
 8018512:	d50e      	bpl.n	8018532 <_vfiprintf_r+0x6a>
 8018514:	f04f 30ff 	mov.w	r0, #4294967295
 8018518:	b01d      	add	sp, #116	; 0x74
 801851a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801851e:	4b7b      	ldr	r3, [pc, #492]	; (801870c <_vfiprintf_r+0x244>)
 8018520:	429d      	cmp	r5, r3
 8018522:	d101      	bne.n	8018528 <_vfiprintf_r+0x60>
 8018524:	68b5      	ldr	r5, [r6, #8]
 8018526:	e7df      	b.n	80184e8 <_vfiprintf_r+0x20>
 8018528:	4b79      	ldr	r3, [pc, #484]	; (8018710 <_vfiprintf_r+0x248>)
 801852a:	429d      	cmp	r5, r3
 801852c:	bf08      	it	eq
 801852e:	68f5      	ldreq	r5, [r6, #12]
 8018530:	e7da      	b.n	80184e8 <_vfiprintf_r+0x20>
 8018532:	89ab      	ldrh	r3, [r5, #12]
 8018534:	0598      	lsls	r0, r3, #22
 8018536:	d4ed      	bmi.n	8018514 <_vfiprintf_r+0x4c>
 8018538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801853a:	f7ff fe84 	bl	8018246 <__retarget_lock_release_recursive>
 801853e:	e7e9      	b.n	8018514 <_vfiprintf_r+0x4c>
 8018540:	2300      	movs	r3, #0
 8018542:	9309      	str	r3, [sp, #36]	; 0x24
 8018544:	2320      	movs	r3, #32
 8018546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801854a:	f8cd 800c 	str.w	r8, [sp, #12]
 801854e:	2330      	movs	r3, #48	; 0x30
 8018550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018714 <_vfiprintf_r+0x24c>
 8018554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018558:	f04f 0901 	mov.w	r9, #1
 801855c:	4623      	mov	r3, r4
 801855e:	469a      	mov	sl, r3
 8018560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018564:	b10a      	cbz	r2, 801856a <_vfiprintf_r+0xa2>
 8018566:	2a25      	cmp	r2, #37	; 0x25
 8018568:	d1f9      	bne.n	801855e <_vfiprintf_r+0x96>
 801856a:	ebba 0b04 	subs.w	fp, sl, r4
 801856e:	d00b      	beq.n	8018588 <_vfiprintf_r+0xc0>
 8018570:	465b      	mov	r3, fp
 8018572:	4622      	mov	r2, r4
 8018574:	4629      	mov	r1, r5
 8018576:	4630      	mov	r0, r6
 8018578:	f7ff ff93 	bl	80184a2 <__sfputs_r>
 801857c:	3001      	adds	r0, #1
 801857e:	f000 80aa 	beq.w	80186d6 <_vfiprintf_r+0x20e>
 8018582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018584:	445a      	add	r2, fp
 8018586:	9209      	str	r2, [sp, #36]	; 0x24
 8018588:	f89a 3000 	ldrb.w	r3, [sl]
 801858c:	2b00      	cmp	r3, #0
 801858e:	f000 80a2 	beq.w	80186d6 <_vfiprintf_r+0x20e>
 8018592:	2300      	movs	r3, #0
 8018594:	f04f 32ff 	mov.w	r2, #4294967295
 8018598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801859c:	f10a 0a01 	add.w	sl, sl, #1
 80185a0:	9304      	str	r3, [sp, #16]
 80185a2:	9307      	str	r3, [sp, #28]
 80185a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80185a8:	931a      	str	r3, [sp, #104]	; 0x68
 80185aa:	4654      	mov	r4, sl
 80185ac:	2205      	movs	r2, #5
 80185ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185b2:	4858      	ldr	r0, [pc, #352]	; (8018714 <_vfiprintf_r+0x24c>)
 80185b4:	f7e7 fe44 	bl	8000240 <memchr>
 80185b8:	9a04      	ldr	r2, [sp, #16]
 80185ba:	b9d8      	cbnz	r0, 80185f4 <_vfiprintf_r+0x12c>
 80185bc:	06d1      	lsls	r1, r2, #27
 80185be:	bf44      	itt	mi
 80185c0:	2320      	movmi	r3, #32
 80185c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185c6:	0713      	lsls	r3, r2, #28
 80185c8:	bf44      	itt	mi
 80185ca:	232b      	movmi	r3, #43	; 0x2b
 80185cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80185d0:	f89a 3000 	ldrb.w	r3, [sl]
 80185d4:	2b2a      	cmp	r3, #42	; 0x2a
 80185d6:	d015      	beq.n	8018604 <_vfiprintf_r+0x13c>
 80185d8:	9a07      	ldr	r2, [sp, #28]
 80185da:	4654      	mov	r4, sl
 80185dc:	2000      	movs	r0, #0
 80185de:	f04f 0c0a 	mov.w	ip, #10
 80185e2:	4621      	mov	r1, r4
 80185e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80185e8:	3b30      	subs	r3, #48	; 0x30
 80185ea:	2b09      	cmp	r3, #9
 80185ec:	d94e      	bls.n	801868c <_vfiprintf_r+0x1c4>
 80185ee:	b1b0      	cbz	r0, 801861e <_vfiprintf_r+0x156>
 80185f0:	9207      	str	r2, [sp, #28]
 80185f2:	e014      	b.n	801861e <_vfiprintf_r+0x156>
 80185f4:	eba0 0308 	sub.w	r3, r0, r8
 80185f8:	fa09 f303 	lsl.w	r3, r9, r3
 80185fc:	4313      	orrs	r3, r2
 80185fe:	9304      	str	r3, [sp, #16]
 8018600:	46a2      	mov	sl, r4
 8018602:	e7d2      	b.n	80185aa <_vfiprintf_r+0xe2>
 8018604:	9b03      	ldr	r3, [sp, #12]
 8018606:	1d19      	adds	r1, r3, #4
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	9103      	str	r1, [sp, #12]
 801860c:	2b00      	cmp	r3, #0
 801860e:	bfbb      	ittet	lt
 8018610:	425b      	neglt	r3, r3
 8018612:	f042 0202 	orrlt.w	r2, r2, #2
 8018616:	9307      	strge	r3, [sp, #28]
 8018618:	9307      	strlt	r3, [sp, #28]
 801861a:	bfb8      	it	lt
 801861c:	9204      	strlt	r2, [sp, #16]
 801861e:	7823      	ldrb	r3, [r4, #0]
 8018620:	2b2e      	cmp	r3, #46	; 0x2e
 8018622:	d10c      	bne.n	801863e <_vfiprintf_r+0x176>
 8018624:	7863      	ldrb	r3, [r4, #1]
 8018626:	2b2a      	cmp	r3, #42	; 0x2a
 8018628:	d135      	bne.n	8018696 <_vfiprintf_r+0x1ce>
 801862a:	9b03      	ldr	r3, [sp, #12]
 801862c:	1d1a      	adds	r2, r3, #4
 801862e:	681b      	ldr	r3, [r3, #0]
 8018630:	9203      	str	r2, [sp, #12]
 8018632:	2b00      	cmp	r3, #0
 8018634:	bfb8      	it	lt
 8018636:	f04f 33ff 	movlt.w	r3, #4294967295
 801863a:	3402      	adds	r4, #2
 801863c:	9305      	str	r3, [sp, #20]
 801863e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018724 <_vfiprintf_r+0x25c>
 8018642:	7821      	ldrb	r1, [r4, #0]
 8018644:	2203      	movs	r2, #3
 8018646:	4650      	mov	r0, sl
 8018648:	f7e7 fdfa 	bl	8000240 <memchr>
 801864c:	b140      	cbz	r0, 8018660 <_vfiprintf_r+0x198>
 801864e:	2340      	movs	r3, #64	; 0x40
 8018650:	eba0 000a 	sub.w	r0, r0, sl
 8018654:	fa03 f000 	lsl.w	r0, r3, r0
 8018658:	9b04      	ldr	r3, [sp, #16]
 801865a:	4303      	orrs	r3, r0
 801865c:	3401      	adds	r4, #1
 801865e:	9304      	str	r3, [sp, #16]
 8018660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018664:	482c      	ldr	r0, [pc, #176]	; (8018718 <_vfiprintf_r+0x250>)
 8018666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801866a:	2206      	movs	r2, #6
 801866c:	f7e7 fde8 	bl	8000240 <memchr>
 8018670:	2800      	cmp	r0, #0
 8018672:	d03f      	beq.n	80186f4 <_vfiprintf_r+0x22c>
 8018674:	4b29      	ldr	r3, [pc, #164]	; (801871c <_vfiprintf_r+0x254>)
 8018676:	bb1b      	cbnz	r3, 80186c0 <_vfiprintf_r+0x1f8>
 8018678:	9b03      	ldr	r3, [sp, #12]
 801867a:	3307      	adds	r3, #7
 801867c:	f023 0307 	bic.w	r3, r3, #7
 8018680:	3308      	adds	r3, #8
 8018682:	9303      	str	r3, [sp, #12]
 8018684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018686:	443b      	add	r3, r7
 8018688:	9309      	str	r3, [sp, #36]	; 0x24
 801868a:	e767      	b.n	801855c <_vfiprintf_r+0x94>
 801868c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018690:	460c      	mov	r4, r1
 8018692:	2001      	movs	r0, #1
 8018694:	e7a5      	b.n	80185e2 <_vfiprintf_r+0x11a>
 8018696:	2300      	movs	r3, #0
 8018698:	3401      	adds	r4, #1
 801869a:	9305      	str	r3, [sp, #20]
 801869c:	4619      	mov	r1, r3
 801869e:	f04f 0c0a 	mov.w	ip, #10
 80186a2:	4620      	mov	r0, r4
 80186a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80186a8:	3a30      	subs	r2, #48	; 0x30
 80186aa:	2a09      	cmp	r2, #9
 80186ac:	d903      	bls.n	80186b6 <_vfiprintf_r+0x1ee>
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d0c5      	beq.n	801863e <_vfiprintf_r+0x176>
 80186b2:	9105      	str	r1, [sp, #20]
 80186b4:	e7c3      	b.n	801863e <_vfiprintf_r+0x176>
 80186b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80186ba:	4604      	mov	r4, r0
 80186bc:	2301      	movs	r3, #1
 80186be:	e7f0      	b.n	80186a2 <_vfiprintf_r+0x1da>
 80186c0:	ab03      	add	r3, sp, #12
 80186c2:	9300      	str	r3, [sp, #0]
 80186c4:	462a      	mov	r2, r5
 80186c6:	4b16      	ldr	r3, [pc, #88]	; (8018720 <_vfiprintf_r+0x258>)
 80186c8:	a904      	add	r1, sp, #16
 80186ca:	4630      	mov	r0, r6
 80186cc:	f3af 8000 	nop.w
 80186d0:	4607      	mov	r7, r0
 80186d2:	1c78      	adds	r0, r7, #1
 80186d4:	d1d6      	bne.n	8018684 <_vfiprintf_r+0x1bc>
 80186d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80186d8:	07d9      	lsls	r1, r3, #31
 80186da:	d405      	bmi.n	80186e8 <_vfiprintf_r+0x220>
 80186dc:	89ab      	ldrh	r3, [r5, #12]
 80186de:	059a      	lsls	r2, r3, #22
 80186e0:	d402      	bmi.n	80186e8 <_vfiprintf_r+0x220>
 80186e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80186e4:	f7ff fdaf 	bl	8018246 <__retarget_lock_release_recursive>
 80186e8:	89ab      	ldrh	r3, [r5, #12]
 80186ea:	065b      	lsls	r3, r3, #25
 80186ec:	f53f af12 	bmi.w	8018514 <_vfiprintf_r+0x4c>
 80186f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186f2:	e711      	b.n	8018518 <_vfiprintf_r+0x50>
 80186f4:	ab03      	add	r3, sp, #12
 80186f6:	9300      	str	r3, [sp, #0]
 80186f8:	462a      	mov	r2, r5
 80186fa:	4b09      	ldr	r3, [pc, #36]	; (8018720 <_vfiprintf_r+0x258>)
 80186fc:	a904      	add	r1, sp, #16
 80186fe:	4630      	mov	r0, r6
 8018700:	f000 f880 	bl	8018804 <_printf_i>
 8018704:	e7e4      	b.n	80186d0 <_vfiprintf_r+0x208>
 8018706:	bf00      	nop
 8018708:	0801c678 	.word	0x0801c678
 801870c:	0801c698 	.word	0x0801c698
 8018710:	0801c658 	.word	0x0801c658
 8018714:	0801c6b8 	.word	0x0801c6b8
 8018718:	0801c6c2 	.word	0x0801c6c2
 801871c:	00000000 	.word	0x00000000
 8018720:	080184a3 	.word	0x080184a3
 8018724:	0801c6be 	.word	0x0801c6be

08018728 <_printf_common>:
 8018728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801872c:	4616      	mov	r6, r2
 801872e:	4699      	mov	r9, r3
 8018730:	688a      	ldr	r2, [r1, #8]
 8018732:	690b      	ldr	r3, [r1, #16]
 8018734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018738:	4293      	cmp	r3, r2
 801873a:	bfb8      	it	lt
 801873c:	4613      	movlt	r3, r2
 801873e:	6033      	str	r3, [r6, #0]
 8018740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018744:	4607      	mov	r7, r0
 8018746:	460c      	mov	r4, r1
 8018748:	b10a      	cbz	r2, 801874e <_printf_common+0x26>
 801874a:	3301      	adds	r3, #1
 801874c:	6033      	str	r3, [r6, #0]
 801874e:	6823      	ldr	r3, [r4, #0]
 8018750:	0699      	lsls	r1, r3, #26
 8018752:	bf42      	ittt	mi
 8018754:	6833      	ldrmi	r3, [r6, #0]
 8018756:	3302      	addmi	r3, #2
 8018758:	6033      	strmi	r3, [r6, #0]
 801875a:	6825      	ldr	r5, [r4, #0]
 801875c:	f015 0506 	ands.w	r5, r5, #6
 8018760:	d106      	bne.n	8018770 <_printf_common+0x48>
 8018762:	f104 0a19 	add.w	sl, r4, #25
 8018766:	68e3      	ldr	r3, [r4, #12]
 8018768:	6832      	ldr	r2, [r6, #0]
 801876a:	1a9b      	subs	r3, r3, r2
 801876c:	42ab      	cmp	r3, r5
 801876e:	dc26      	bgt.n	80187be <_printf_common+0x96>
 8018770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018774:	1e13      	subs	r3, r2, #0
 8018776:	6822      	ldr	r2, [r4, #0]
 8018778:	bf18      	it	ne
 801877a:	2301      	movne	r3, #1
 801877c:	0692      	lsls	r2, r2, #26
 801877e:	d42b      	bmi.n	80187d8 <_printf_common+0xb0>
 8018780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018784:	4649      	mov	r1, r9
 8018786:	4638      	mov	r0, r7
 8018788:	47c0      	blx	r8
 801878a:	3001      	adds	r0, #1
 801878c:	d01e      	beq.n	80187cc <_printf_common+0xa4>
 801878e:	6823      	ldr	r3, [r4, #0]
 8018790:	68e5      	ldr	r5, [r4, #12]
 8018792:	6832      	ldr	r2, [r6, #0]
 8018794:	f003 0306 	and.w	r3, r3, #6
 8018798:	2b04      	cmp	r3, #4
 801879a:	bf08      	it	eq
 801879c:	1aad      	subeq	r5, r5, r2
 801879e:	68a3      	ldr	r3, [r4, #8]
 80187a0:	6922      	ldr	r2, [r4, #16]
 80187a2:	bf0c      	ite	eq
 80187a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80187a8:	2500      	movne	r5, #0
 80187aa:	4293      	cmp	r3, r2
 80187ac:	bfc4      	itt	gt
 80187ae:	1a9b      	subgt	r3, r3, r2
 80187b0:	18ed      	addgt	r5, r5, r3
 80187b2:	2600      	movs	r6, #0
 80187b4:	341a      	adds	r4, #26
 80187b6:	42b5      	cmp	r5, r6
 80187b8:	d11a      	bne.n	80187f0 <_printf_common+0xc8>
 80187ba:	2000      	movs	r0, #0
 80187bc:	e008      	b.n	80187d0 <_printf_common+0xa8>
 80187be:	2301      	movs	r3, #1
 80187c0:	4652      	mov	r2, sl
 80187c2:	4649      	mov	r1, r9
 80187c4:	4638      	mov	r0, r7
 80187c6:	47c0      	blx	r8
 80187c8:	3001      	adds	r0, #1
 80187ca:	d103      	bne.n	80187d4 <_printf_common+0xac>
 80187cc:	f04f 30ff 	mov.w	r0, #4294967295
 80187d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187d4:	3501      	adds	r5, #1
 80187d6:	e7c6      	b.n	8018766 <_printf_common+0x3e>
 80187d8:	18e1      	adds	r1, r4, r3
 80187da:	1c5a      	adds	r2, r3, #1
 80187dc:	2030      	movs	r0, #48	; 0x30
 80187de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80187e2:	4422      	add	r2, r4
 80187e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80187e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80187ec:	3302      	adds	r3, #2
 80187ee:	e7c7      	b.n	8018780 <_printf_common+0x58>
 80187f0:	2301      	movs	r3, #1
 80187f2:	4622      	mov	r2, r4
 80187f4:	4649      	mov	r1, r9
 80187f6:	4638      	mov	r0, r7
 80187f8:	47c0      	blx	r8
 80187fa:	3001      	adds	r0, #1
 80187fc:	d0e6      	beq.n	80187cc <_printf_common+0xa4>
 80187fe:	3601      	adds	r6, #1
 8018800:	e7d9      	b.n	80187b6 <_printf_common+0x8e>
	...

08018804 <_printf_i>:
 8018804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018808:	460c      	mov	r4, r1
 801880a:	4691      	mov	r9, r2
 801880c:	7e27      	ldrb	r7, [r4, #24]
 801880e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018810:	2f78      	cmp	r7, #120	; 0x78
 8018812:	4680      	mov	r8, r0
 8018814:	469a      	mov	sl, r3
 8018816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801881a:	d807      	bhi.n	801882c <_printf_i+0x28>
 801881c:	2f62      	cmp	r7, #98	; 0x62
 801881e:	d80a      	bhi.n	8018836 <_printf_i+0x32>
 8018820:	2f00      	cmp	r7, #0
 8018822:	f000 80d8 	beq.w	80189d6 <_printf_i+0x1d2>
 8018826:	2f58      	cmp	r7, #88	; 0x58
 8018828:	f000 80a3 	beq.w	8018972 <_printf_i+0x16e>
 801882c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018834:	e03a      	b.n	80188ac <_printf_i+0xa8>
 8018836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801883a:	2b15      	cmp	r3, #21
 801883c:	d8f6      	bhi.n	801882c <_printf_i+0x28>
 801883e:	a001      	add	r0, pc, #4	; (adr r0, 8018844 <_printf_i+0x40>)
 8018840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018844:	0801889d 	.word	0x0801889d
 8018848:	080188b1 	.word	0x080188b1
 801884c:	0801882d 	.word	0x0801882d
 8018850:	0801882d 	.word	0x0801882d
 8018854:	0801882d 	.word	0x0801882d
 8018858:	0801882d 	.word	0x0801882d
 801885c:	080188b1 	.word	0x080188b1
 8018860:	0801882d 	.word	0x0801882d
 8018864:	0801882d 	.word	0x0801882d
 8018868:	0801882d 	.word	0x0801882d
 801886c:	0801882d 	.word	0x0801882d
 8018870:	080189bd 	.word	0x080189bd
 8018874:	080188e1 	.word	0x080188e1
 8018878:	0801899f 	.word	0x0801899f
 801887c:	0801882d 	.word	0x0801882d
 8018880:	0801882d 	.word	0x0801882d
 8018884:	080189df 	.word	0x080189df
 8018888:	0801882d 	.word	0x0801882d
 801888c:	080188e1 	.word	0x080188e1
 8018890:	0801882d 	.word	0x0801882d
 8018894:	0801882d 	.word	0x0801882d
 8018898:	080189a7 	.word	0x080189a7
 801889c:	680b      	ldr	r3, [r1, #0]
 801889e:	1d1a      	adds	r2, r3, #4
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	600a      	str	r2, [r1, #0]
 80188a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80188a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80188ac:	2301      	movs	r3, #1
 80188ae:	e0a3      	b.n	80189f8 <_printf_i+0x1f4>
 80188b0:	6825      	ldr	r5, [r4, #0]
 80188b2:	6808      	ldr	r0, [r1, #0]
 80188b4:	062e      	lsls	r6, r5, #24
 80188b6:	f100 0304 	add.w	r3, r0, #4
 80188ba:	d50a      	bpl.n	80188d2 <_printf_i+0xce>
 80188bc:	6805      	ldr	r5, [r0, #0]
 80188be:	600b      	str	r3, [r1, #0]
 80188c0:	2d00      	cmp	r5, #0
 80188c2:	da03      	bge.n	80188cc <_printf_i+0xc8>
 80188c4:	232d      	movs	r3, #45	; 0x2d
 80188c6:	426d      	negs	r5, r5
 80188c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80188cc:	485e      	ldr	r0, [pc, #376]	; (8018a48 <_printf_i+0x244>)
 80188ce:	230a      	movs	r3, #10
 80188d0:	e019      	b.n	8018906 <_printf_i+0x102>
 80188d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80188d6:	6805      	ldr	r5, [r0, #0]
 80188d8:	600b      	str	r3, [r1, #0]
 80188da:	bf18      	it	ne
 80188dc:	b22d      	sxthne	r5, r5
 80188de:	e7ef      	b.n	80188c0 <_printf_i+0xbc>
 80188e0:	680b      	ldr	r3, [r1, #0]
 80188e2:	6825      	ldr	r5, [r4, #0]
 80188e4:	1d18      	adds	r0, r3, #4
 80188e6:	6008      	str	r0, [r1, #0]
 80188e8:	0628      	lsls	r0, r5, #24
 80188ea:	d501      	bpl.n	80188f0 <_printf_i+0xec>
 80188ec:	681d      	ldr	r5, [r3, #0]
 80188ee:	e002      	b.n	80188f6 <_printf_i+0xf2>
 80188f0:	0669      	lsls	r1, r5, #25
 80188f2:	d5fb      	bpl.n	80188ec <_printf_i+0xe8>
 80188f4:	881d      	ldrh	r5, [r3, #0]
 80188f6:	4854      	ldr	r0, [pc, #336]	; (8018a48 <_printf_i+0x244>)
 80188f8:	2f6f      	cmp	r7, #111	; 0x6f
 80188fa:	bf0c      	ite	eq
 80188fc:	2308      	moveq	r3, #8
 80188fe:	230a      	movne	r3, #10
 8018900:	2100      	movs	r1, #0
 8018902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018906:	6866      	ldr	r6, [r4, #4]
 8018908:	60a6      	str	r6, [r4, #8]
 801890a:	2e00      	cmp	r6, #0
 801890c:	bfa2      	ittt	ge
 801890e:	6821      	ldrge	r1, [r4, #0]
 8018910:	f021 0104 	bicge.w	r1, r1, #4
 8018914:	6021      	strge	r1, [r4, #0]
 8018916:	b90d      	cbnz	r5, 801891c <_printf_i+0x118>
 8018918:	2e00      	cmp	r6, #0
 801891a:	d04d      	beq.n	80189b8 <_printf_i+0x1b4>
 801891c:	4616      	mov	r6, r2
 801891e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018922:	fb03 5711 	mls	r7, r3, r1, r5
 8018926:	5dc7      	ldrb	r7, [r0, r7]
 8018928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801892c:	462f      	mov	r7, r5
 801892e:	42bb      	cmp	r3, r7
 8018930:	460d      	mov	r5, r1
 8018932:	d9f4      	bls.n	801891e <_printf_i+0x11a>
 8018934:	2b08      	cmp	r3, #8
 8018936:	d10b      	bne.n	8018950 <_printf_i+0x14c>
 8018938:	6823      	ldr	r3, [r4, #0]
 801893a:	07df      	lsls	r7, r3, #31
 801893c:	d508      	bpl.n	8018950 <_printf_i+0x14c>
 801893e:	6923      	ldr	r3, [r4, #16]
 8018940:	6861      	ldr	r1, [r4, #4]
 8018942:	4299      	cmp	r1, r3
 8018944:	bfde      	ittt	le
 8018946:	2330      	movle	r3, #48	; 0x30
 8018948:	f806 3c01 	strble.w	r3, [r6, #-1]
 801894c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018950:	1b92      	subs	r2, r2, r6
 8018952:	6122      	str	r2, [r4, #16]
 8018954:	f8cd a000 	str.w	sl, [sp]
 8018958:	464b      	mov	r3, r9
 801895a:	aa03      	add	r2, sp, #12
 801895c:	4621      	mov	r1, r4
 801895e:	4640      	mov	r0, r8
 8018960:	f7ff fee2 	bl	8018728 <_printf_common>
 8018964:	3001      	adds	r0, #1
 8018966:	d14c      	bne.n	8018a02 <_printf_i+0x1fe>
 8018968:	f04f 30ff 	mov.w	r0, #4294967295
 801896c:	b004      	add	sp, #16
 801896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018972:	4835      	ldr	r0, [pc, #212]	; (8018a48 <_printf_i+0x244>)
 8018974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018978:	6823      	ldr	r3, [r4, #0]
 801897a:	680e      	ldr	r6, [r1, #0]
 801897c:	061f      	lsls	r7, r3, #24
 801897e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018982:	600e      	str	r6, [r1, #0]
 8018984:	d514      	bpl.n	80189b0 <_printf_i+0x1ac>
 8018986:	07d9      	lsls	r1, r3, #31
 8018988:	bf44      	itt	mi
 801898a:	f043 0320 	orrmi.w	r3, r3, #32
 801898e:	6023      	strmi	r3, [r4, #0]
 8018990:	b91d      	cbnz	r5, 801899a <_printf_i+0x196>
 8018992:	6823      	ldr	r3, [r4, #0]
 8018994:	f023 0320 	bic.w	r3, r3, #32
 8018998:	6023      	str	r3, [r4, #0]
 801899a:	2310      	movs	r3, #16
 801899c:	e7b0      	b.n	8018900 <_printf_i+0xfc>
 801899e:	6823      	ldr	r3, [r4, #0]
 80189a0:	f043 0320 	orr.w	r3, r3, #32
 80189a4:	6023      	str	r3, [r4, #0]
 80189a6:	2378      	movs	r3, #120	; 0x78
 80189a8:	4828      	ldr	r0, [pc, #160]	; (8018a4c <_printf_i+0x248>)
 80189aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80189ae:	e7e3      	b.n	8018978 <_printf_i+0x174>
 80189b0:	065e      	lsls	r6, r3, #25
 80189b2:	bf48      	it	mi
 80189b4:	b2ad      	uxthmi	r5, r5
 80189b6:	e7e6      	b.n	8018986 <_printf_i+0x182>
 80189b8:	4616      	mov	r6, r2
 80189ba:	e7bb      	b.n	8018934 <_printf_i+0x130>
 80189bc:	680b      	ldr	r3, [r1, #0]
 80189be:	6826      	ldr	r6, [r4, #0]
 80189c0:	6960      	ldr	r0, [r4, #20]
 80189c2:	1d1d      	adds	r5, r3, #4
 80189c4:	600d      	str	r5, [r1, #0]
 80189c6:	0635      	lsls	r5, r6, #24
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	d501      	bpl.n	80189d0 <_printf_i+0x1cc>
 80189cc:	6018      	str	r0, [r3, #0]
 80189ce:	e002      	b.n	80189d6 <_printf_i+0x1d2>
 80189d0:	0671      	lsls	r1, r6, #25
 80189d2:	d5fb      	bpl.n	80189cc <_printf_i+0x1c8>
 80189d4:	8018      	strh	r0, [r3, #0]
 80189d6:	2300      	movs	r3, #0
 80189d8:	6123      	str	r3, [r4, #16]
 80189da:	4616      	mov	r6, r2
 80189dc:	e7ba      	b.n	8018954 <_printf_i+0x150>
 80189de:	680b      	ldr	r3, [r1, #0]
 80189e0:	1d1a      	adds	r2, r3, #4
 80189e2:	600a      	str	r2, [r1, #0]
 80189e4:	681e      	ldr	r6, [r3, #0]
 80189e6:	6862      	ldr	r2, [r4, #4]
 80189e8:	2100      	movs	r1, #0
 80189ea:	4630      	mov	r0, r6
 80189ec:	f7e7 fc28 	bl	8000240 <memchr>
 80189f0:	b108      	cbz	r0, 80189f6 <_printf_i+0x1f2>
 80189f2:	1b80      	subs	r0, r0, r6
 80189f4:	6060      	str	r0, [r4, #4]
 80189f6:	6863      	ldr	r3, [r4, #4]
 80189f8:	6123      	str	r3, [r4, #16]
 80189fa:	2300      	movs	r3, #0
 80189fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018a00:	e7a8      	b.n	8018954 <_printf_i+0x150>
 8018a02:	6923      	ldr	r3, [r4, #16]
 8018a04:	4632      	mov	r2, r6
 8018a06:	4649      	mov	r1, r9
 8018a08:	4640      	mov	r0, r8
 8018a0a:	47d0      	blx	sl
 8018a0c:	3001      	adds	r0, #1
 8018a0e:	d0ab      	beq.n	8018968 <_printf_i+0x164>
 8018a10:	6823      	ldr	r3, [r4, #0]
 8018a12:	079b      	lsls	r3, r3, #30
 8018a14:	d413      	bmi.n	8018a3e <_printf_i+0x23a>
 8018a16:	68e0      	ldr	r0, [r4, #12]
 8018a18:	9b03      	ldr	r3, [sp, #12]
 8018a1a:	4298      	cmp	r0, r3
 8018a1c:	bfb8      	it	lt
 8018a1e:	4618      	movlt	r0, r3
 8018a20:	e7a4      	b.n	801896c <_printf_i+0x168>
 8018a22:	2301      	movs	r3, #1
 8018a24:	4632      	mov	r2, r6
 8018a26:	4649      	mov	r1, r9
 8018a28:	4640      	mov	r0, r8
 8018a2a:	47d0      	blx	sl
 8018a2c:	3001      	adds	r0, #1
 8018a2e:	d09b      	beq.n	8018968 <_printf_i+0x164>
 8018a30:	3501      	adds	r5, #1
 8018a32:	68e3      	ldr	r3, [r4, #12]
 8018a34:	9903      	ldr	r1, [sp, #12]
 8018a36:	1a5b      	subs	r3, r3, r1
 8018a38:	42ab      	cmp	r3, r5
 8018a3a:	dcf2      	bgt.n	8018a22 <_printf_i+0x21e>
 8018a3c:	e7eb      	b.n	8018a16 <_printf_i+0x212>
 8018a3e:	2500      	movs	r5, #0
 8018a40:	f104 0619 	add.w	r6, r4, #25
 8018a44:	e7f5      	b.n	8018a32 <_printf_i+0x22e>
 8018a46:	bf00      	nop
 8018a48:	0801c6c9 	.word	0x0801c6c9
 8018a4c:	0801c6da 	.word	0x0801c6da

08018a50 <_sbrk_r>:
 8018a50:	b538      	push	{r3, r4, r5, lr}
 8018a52:	4d06      	ldr	r5, [pc, #24]	; (8018a6c <_sbrk_r+0x1c>)
 8018a54:	2300      	movs	r3, #0
 8018a56:	4604      	mov	r4, r0
 8018a58:	4608      	mov	r0, r1
 8018a5a:	602b      	str	r3, [r5, #0]
 8018a5c:	f7e8 faba 	bl	8000fd4 <_sbrk>
 8018a60:	1c43      	adds	r3, r0, #1
 8018a62:	d102      	bne.n	8018a6a <_sbrk_r+0x1a>
 8018a64:	682b      	ldr	r3, [r5, #0]
 8018a66:	b103      	cbz	r3, 8018a6a <_sbrk_r+0x1a>
 8018a68:	6023      	str	r3, [r4, #0]
 8018a6a:	bd38      	pop	{r3, r4, r5, pc}
 8018a6c:	2000b914 	.word	0x2000b914

08018a70 <__sread>:
 8018a70:	b510      	push	{r4, lr}
 8018a72:	460c      	mov	r4, r1
 8018a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a78:	f000 f8a8 	bl	8018bcc <_read_r>
 8018a7c:	2800      	cmp	r0, #0
 8018a7e:	bfab      	itete	ge
 8018a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018a82:	89a3      	ldrhlt	r3, [r4, #12]
 8018a84:	181b      	addge	r3, r3, r0
 8018a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018a8a:	bfac      	ite	ge
 8018a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8018a8e:	81a3      	strhlt	r3, [r4, #12]
 8018a90:	bd10      	pop	{r4, pc}

08018a92 <__swrite>:
 8018a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a96:	461f      	mov	r7, r3
 8018a98:	898b      	ldrh	r3, [r1, #12]
 8018a9a:	05db      	lsls	r3, r3, #23
 8018a9c:	4605      	mov	r5, r0
 8018a9e:	460c      	mov	r4, r1
 8018aa0:	4616      	mov	r6, r2
 8018aa2:	d505      	bpl.n	8018ab0 <__swrite+0x1e>
 8018aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018aa8:	2302      	movs	r3, #2
 8018aaa:	2200      	movs	r2, #0
 8018aac:	f000 f870 	bl	8018b90 <_lseek_r>
 8018ab0:	89a3      	ldrh	r3, [r4, #12]
 8018ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018aba:	81a3      	strh	r3, [r4, #12]
 8018abc:	4632      	mov	r2, r6
 8018abe:	463b      	mov	r3, r7
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ac6:	f000 b817 	b.w	8018af8 <_write_r>

08018aca <__sseek>:
 8018aca:	b510      	push	{r4, lr}
 8018acc:	460c      	mov	r4, r1
 8018ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ad2:	f000 f85d 	bl	8018b90 <_lseek_r>
 8018ad6:	1c43      	adds	r3, r0, #1
 8018ad8:	89a3      	ldrh	r3, [r4, #12]
 8018ada:	bf15      	itete	ne
 8018adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8018ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018ae6:	81a3      	strheq	r3, [r4, #12]
 8018ae8:	bf18      	it	ne
 8018aea:	81a3      	strhne	r3, [r4, #12]
 8018aec:	bd10      	pop	{r4, pc}

08018aee <__sclose>:
 8018aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018af2:	f000 b81b 	b.w	8018b2c <_close_r>
	...

08018af8 <_write_r>:
 8018af8:	b538      	push	{r3, r4, r5, lr}
 8018afa:	4d07      	ldr	r5, [pc, #28]	; (8018b18 <_write_r+0x20>)
 8018afc:	4604      	mov	r4, r0
 8018afe:	4608      	mov	r0, r1
 8018b00:	4611      	mov	r1, r2
 8018b02:	2200      	movs	r2, #0
 8018b04:	602a      	str	r2, [r5, #0]
 8018b06:	461a      	mov	r2, r3
 8018b08:	f7e8 f87a 	bl	8000c00 <_write>
 8018b0c:	1c43      	adds	r3, r0, #1
 8018b0e:	d102      	bne.n	8018b16 <_write_r+0x1e>
 8018b10:	682b      	ldr	r3, [r5, #0]
 8018b12:	b103      	cbz	r3, 8018b16 <_write_r+0x1e>
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	bd38      	pop	{r3, r4, r5, pc}
 8018b18:	2000b914 	.word	0x2000b914

08018b1c <abort>:
 8018b1c:	b508      	push	{r3, lr}
 8018b1e:	2006      	movs	r0, #6
 8018b20:	f000 f88e 	bl	8018c40 <raise>
 8018b24:	2001      	movs	r0, #1
 8018b26:	f000 f8b7 	bl	8018c98 <_exit>
	...

08018b2c <_close_r>:
 8018b2c:	b538      	push	{r3, r4, r5, lr}
 8018b2e:	4d06      	ldr	r5, [pc, #24]	; (8018b48 <_close_r+0x1c>)
 8018b30:	2300      	movs	r3, #0
 8018b32:	4604      	mov	r4, r0
 8018b34:	4608      	mov	r0, r1
 8018b36:	602b      	str	r3, [r5, #0]
 8018b38:	f7e8 f88e 	bl	8000c58 <_close>
 8018b3c:	1c43      	adds	r3, r0, #1
 8018b3e:	d102      	bne.n	8018b46 <_close_r+0x1a>
 8018b40:	682b      	ldr	r3, [r5, #0]
 8018b42:	b103      	cbz	r3, 8018b46 <_close_r+0x1a>
 8018b44:	6023      	str	r3, [r4, #0]
 8018b46:	bd38      	pop	{r3, r4, r5, pc}
 8018b48:	2000b914 	.word	0x2000b914

08018b4c <_fstat_r>:
 8018b4c:	b538      	push	{r3, r4, r5, lr}
 8018b4e:	4d07      	ldr	r5, [pc, #28]	; (8018b6c <_fstat_r+0x20>)
 8018b50:	2300      	movs	r3, #0
 8018b52:	4604      	mov	r4, r0
 8018b54:	4608      	mov	r0, r1
 8018b56:	4611      	mov	r1, r2
 8018b58:	602b      	str	r3, [r5, #0]
 8018b5a:	f7e8 f8d3 	bl	8000d04 <_fstat>
 8018b5e:	1c43      	adds	r3, r0, #1
 8018b60:	d102      	bne.n	8018b68 <_fstat_r+0x1c>
 8018b62:	682b      	ldr	r3, [r5, #0]
 8018b64:	b103      	cbz	r3, 8018b68 <_fstat_r+0x1c>
 8018b66:	6023      	str	r3, [r4, #0]
 8018b68:	bd38      	pop	{r3, r4, r5, pc}
 8018b6a:	bf00      	nop
 8018b6c:	2000b914 	.word	0x2000b914

08018b70 <_isatty_r>:
 8018b70:	b538      	push	{r3, r4, r5, lr}
 8018b72:	4d06      	ldr	r5, [pc, #24]	; (8018b8c <_isatty_r+0x1c>)
 8018b74:	2300      	movs	r3, #0
 8018b76:	4604      	mov	r4, r0
 8018b78:	4608      	mov	r0, r1
 8018b7a:	602b      	str	r3, [r5, #0]
 8018b7c:	f7e8 f828 	bl	8000bd0 <_isatty>
 8018b80:	1c43      	adds	r3, r0, #1
 8018b82:	d102      	bne.n	8018b8a <_isatty_r+0x1a>
 8018b84:	682b      	ldr	r3, [r5, #0]
 8018b86:	b103      	cbz	r3, 8018b8a <_isatty_r+0x1a>
 8018b88:	6023      	str	r3, [r4, #0]
 8018b8a:	bd38      	pop	{r3, r4, r5, pc}
 8018b8c:	2000b914 	.word	0x2000b914

08018b90 <_lseek_r>:
 8018b90:	b538      	push	{r3, r4, r5, lr}
 8018b92:	4d07      	ldr	r5, [pc, #28]	; (8018bb0 <_lseek_r+0x20>)
 8018b94:	4604      	mov	r4, r0
 8018b96:	4608      	mov	r0, r1
 8018b98:	4611      	mov	r1, r2
 8018b9a:	2200      	movs	r2, #0
 8018b9c:	602a      	str	r2, [r5, #0]
 8018b9e:	461a      	mov	r2, r3
 8018ba0:	f7e8 f874 	bl	8000c8c <_lseek>
 8018ba4:	1c43      	adds	r3, r0, #1
 8018ba6:	d102      	bne.n	8018bae <_lseek_r+0x1e>
 8018ba8:	682b      	ldr	r3, [r5, #0]
 8018baa:	b103      	cbz	r3, 8018bae <_lseek_r+0x1e>
 8018bac:	6023      	str	r3, [r4, #0]
 8018bae:	bd38      	pop	{r3, r4, r5, pc}
 8018bb0:	2000b914 	.word	0x2000b914

08018bb4 <__malloc_lock>:
 8018bb4:	4801      	ldr	r0, [pc, #4]	; (8018bbc <__malloc_lock+0x8>)
 8018bb6:	f7ff bb45 	b.w	8018244 <__retarget_lock_acquire_recursive>
 8018bba:	bf00      	nop
 8018bbc:	2000b920 	.word	0x2000b920

08018bc0 <__malloc_unlock>:
 8018bc0:	4801      	ldr	r0, [pc, #4]	; (8018bc8 <__malloc_unlock+0x8>)
 8018bc2:	f7ff bb40 	b.w	8018246 <__retarget_lock_release_recursive>
 8018bc6:	bf00      	nop
 8018bc8:	2000b920 	.word	0x2000b920

08018bcc <_read_r>:
 8018bcc:	b538      	push	{r3, r4, r5, lr}
 8018bce:	4d07      	ldr	r5, [pc, #28]	; (8018bec <_read_r+0x20>)
 8018bd0:	4604      	mov	r4, r0
 8018bd2:	4608      	mov	r0, r1
 8018bd4:	4611      	mov	r1, r2
 8018bd6:	2200      	movs	r2, #0
 8018bd8:	602a      	str	r2, [r5, #0]
 8018bda:	461a      	mov	r2, r3
 8018bdc:	f7e8 f86a 	bl	8000cb4 <_read>
 8018be0:	1c43      	adds	r3, r0, #1
 8018be2:	d102      	bne.n	8018bea <_read_r+0x1e>
 8018be4:	682b      	ldr	r3, [r5, #0]
 8018be6:	b103      	cbz	r3, 8018bea <_read_r+0x1e>
 8018be8:	6023      	str	r3, [r4, #0]
 8018bea:	bd38      	pop	{r3, r4, r5, pc}
 8018bec:	2000b914 	.word	0x2000b914

08018bf0 <_raise_r>:
 8018bf0:	291f      	cmp	r1, #31
 8018bf2:	b538      	push	{r3, r4, r5, lr}
 8018bf4:	4604      	mov	r4, r0
 8018bf6:	460d      	mov	r5, r1
 8018bf8:	d904      	bls.n	8018c04 <_raise_r+0x14>
 8018bfa:	2316      	movs	r3, #22
 8018bfc:	6003      	str	r3, [r0, #0]
 8018bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8018c02:	bd38      	pop	{r3, r4, r5, pc}
 8018c04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018c06:	b112      	cbz	r2, 8018c0e <_raise_r+0x1e>
 8018c08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018c0c:	b94b      	cbnz	r3, 8018c22 <_raise_r+0x32>
 8018c0e:	4620      	mov	r0, r4
 8018c10:	f000 f830 	bl	8018c74 <_getpid_r>
 8018c14:	462a      	mov	r2, r5
 8018c16:	4601      	mov	r1, r0
 8018c18:	4620      	mov	r0, r4
 8018c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c1e:	f000 b817 	b.w	8018c50 <_kill_r>
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d00a      	beq.n	8018c3c <_raise_r+0x4c>
 8018c26:	1c59      	adds	r1, r3, #1
 8018c28:	d103      	bne.n	8018c32 <_raise_r+0x42>
 8018c2a:	2316      	movs	r3, #22
 8018c2c:	6003      	str	r3, [r0, #0]
 8018c2e:	2001      	movs	r0, #1
 8018c30:	e7e7      	b.n	8018c02 <_raise_r+0x12>
 8018c32:	2400      	movs	r4, #0
 8018c34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018c38:	4628      	mov	r0, r5
 8018c3a:	4798      	blx	r3
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	e7e0      	b.n	8018c02 <_raise_r+0x12>

08018c40 <raise>:
 8018c40:	4b02      	ldr	r3, [pc, #8]	; (8018c4c <raise+0xc>)
 8018c42:	4601      	mov	r1, r0
 8018c44:	6818      	ldr	r0, [r3, #0]
 8018c46:	f7ff bfd3 	b.w	8018bf0 <_raise_r>
 8018c4a:	bf00      	nop
 8018c4c:	2000001c 	.word	0x2000001c

08018c50 <_kill_r>:
 8018c50:	b538      	push	{r3, r4, r5, lr}
 8018c52:	4d07      	ldr	r5, [pc, #28]	; (8018c70 <_kill_r+0x20>)
 8018c54:	2300      	movs	r3, #0
 8018c56:	4604      	mov	r4, r0
 8018c58:	4608      	mov	r0, r1
 8018c5a:	4611      	mov	r1, r2
 8018c5c:	602b      	str	r3, [r5, #0]
 8018c5e:	f000 f813 	bl	8018c88 <_kill>
 8018c62:	1c43      	adds	r3, r0, #1
 8018c64:	d102      	bne.n	8018c6c <_kill_r+0x1c>
 8018c66:	682b      	ldr	r3, [r5, #0]
 8018c68:	b103      	cbz	r3, 8018c6c <_kill_r+0x1c>
 8018c6a:	6023      	str	r3, [r4, #0]
 8018c6c:	bd38      	pop	{r3, r4, r5, pc}
 8018c6e:	bf00      	nop
 8018c70:	2000b914 	.word	0x2000b914

08018c74 <_getpid_r>:
 8018c74:	f000 b800 	b.w	8018c78 <_getpid>

08018c78 <_getpid>:
 8018c78:	4b02      	ldr	r3, [pc, #8]	; (8018c84 <_getpid+0xc>)
 8018c7a:	2258      	movs	r2, #88	; 0x58
 8018c7c:	601a      	str	r2, [r3, #0]
 8018c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c82:	4770      	bx	lr
 8018c84:	2000b914 	.word	0x2000b914

08018c88 <_kill>:
 8018c88:	4b02      	ldr	r3, [pc, #8]	; (8018c94 <_kill+0xc>)
 8018c8a:	2258      	movs	r2, #88	; 0x58
 8018c8c:	601a      	str	r2, [r3, #0]
 8018c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c92:	4770      	bx	lr
 8018c94:	2000b914 	.word	0x2000b914

08018c98 <_exit>:
 8018c98:	e7fe      	b.n	8018c98 <_exit>
	...

08018c9c <_init>:
 8018c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9e:	bf00      	nop
 8018ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ca2:	bc08      	pop	{r3}
 8018ca4:	469e      	mov	lr, r3
 8018ca6:	4770      	bx	lr

08018ca8 <_fini>:
 8018ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018caa:	bf00      	nop
 8018cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018cae:	bc08      	pop	{r3}
 8018cb0:	469e      	mov	lr, r3
 8018cb2:	4770      	bx	lr
