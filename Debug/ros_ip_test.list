
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd4  08015168  08015168  00025168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f3c  08017f3c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08017f3c  08017f3c  00027f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017f44  08017f44  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017f44  08017f44  00027f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017f48  08017f48  00027f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017f4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b8f4  20000080  08017fcc  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b974  08017fcc  0003b974  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00047f78  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000082f7  00000000  00000000  00078026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002448  00000000  00000000  00080320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000022d8  00000000  00000000  00082768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010dff  00000000  00000000  00084a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037c4f  00000000  00000000  0009583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124298  00000000  00000000  000cd48e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f1726  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009ff0  00000000  00000000  001f177c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  001fb76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  001fb7a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08015150 	.word	0x08015150

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08015150 	.word	0x08015150

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <SCB_EnableICache+0x48>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f6:	f3bf 8f6f 	isb	sy
}
 80005fa:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <SCB_EnableICache+0x48>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <SCB_EnableICache+0x48>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000608:	f3bf 8f4f 	dsb	sy
}
 800060c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800060e:	f3bf 8f6f 	isb	sy
}
 8000612:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SCB_EnableDCache+0x84>)
 800062c:	2200      	movs	r2, #0
 800062e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000632:	f3bf 8f4f 	dsb	sy
}
 8000636:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <SCB_EnableDCache+0x84>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	0b5b      	lsrs	r3, r3, #13
 8000644:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000648:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000652:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	015a      	lsls	r2, r3, #5
 8000658:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800065c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000662:	4911      	ldr	r1, [pc, #68]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000664:	4313      	orrs	r3, r2
 8000666:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	1e5a      	subs	r2, r3, #1
 800066e:	60ba      	str	r2, [r7, #8]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1ef      	bne.n	8000654 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	60fa      	str	r2, [r7, #12]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1e5      	bne.n	800064a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800067e:	f3bf 8f4f 	dsb	sy
}
 8000682:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <SCB_EnableDCache+0x84>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <SCB_EnableDCache+0x84>)
 800068a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800068e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006b0:	f7ff ff92 	bl	80005d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006b4:	f7ff ffb6 	bl	8000624 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fc71 	bl	8000f9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f81e 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 f90e 	bl	80008e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006c4:	f000 f8ae 	bl	8000824 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c8:	f000 f8dc 	bl	8000884 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <main+0x40>)
 80006ce:	f000 f9d9 	bl	8000a84 <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006d2:	f005 fc1f 	bl	8005f14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <main+0x44>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <main+0x48>)
 80006dc:	f005 fcac 	bl	8006038 <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a05      	ldr	r2, [pc, #20]	; (80006f8 <main+0x4c>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f005 fc49 	bl	8005f7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <main+0x3e>
 80006ec:	20004b5c 	.word	0x20004b5c
 80006f0:	08017c90 	.word	0x08017c90
 80006f4:	08000a25 	.word	0x08000a25
 80006f8:	20004b58 	.word	0x20004b58

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0b8      	sub	sp, #224	; 0xe0
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f013 fc26 	bl	8013f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2290      	movs	r2, #144	; 0x90
 8000726:	2100      	movs	r1, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f013 fc17 	bl	8013f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <SystemClock_Config+0x11c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a39      	ldr	r2, [pc, #228]	; (8000818 <SystemClock_Config+0x11c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b37      	ldr	r3, [pc, #220]	; (8000818 <SystemClock_Config+0x11c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <SystemClock_Config+0x120>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074e:	4a33      	ldr	r2, [pc, #204]	; (800081c <SystemClock_Config+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <SystemClock_Config+0x120>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000762:	2301      	movs	r3, #1
 8000764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077e:	2304      	movs	r3, #4
 8000780:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fa14 	bl	8002bc8 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007a6:	f000 f967 	bl	8000a78 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007aa:	f002 f9bd 	bl	8002b28 <HAL_PWREx_EnableOverDrive>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007b4:	f000 f960 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007dc:	2103      	movs	r1, #3
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 fca0 	bl	8003124 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007ea:	f000 f945 	bl	8000a78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <SystemClock_Config+0x124>)
 80007f0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fec3 	bl	800358c <HAL_RCCEx_PeriphCLKConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800080c:	f000 f934 	bl	8000a78 <Error_Handler>
  }
}
 8000810:	bf00      	nop
 8000812:	37e0      	adds	r7, #224	; 0xe0
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000
 8000820:	00200100 	.word	0x00200100

08000824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART3_UART_Init+0x58>)
 800082a:	4a15      	ldr	r2, [pc, #84]	; (8000880 <MX_USART3_UART_Init+0x5c>)
 800082c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART3_UART_Init+0x58>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART3_UART_Init+0x58>)
 8000868:	f003 fd98 	bl	800439c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000872:	f000 f901 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004b5c 	.word	0x20004b5c
 8000880:	40004800 	.word	0x40004800

08000884 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2206      	movs	r2, #6
 8000894:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2202      	movs	r2, #2
 800089a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2201      	movs	r2, #1
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	f001 ffe5 	bl	8002896 <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8d1 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20004be4 	.word	0x20004be4

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3f      	ldr	r2, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <MX_GPIO_Init+0x130>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x130>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0x130>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x130>)
 800095c:	f043 0308 	orr.w	r3, r3, #8
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x130>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f244 0181 	movw	r1, #16513	; 0x4081
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x134>)
 800098e:	f001 ff69 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	2140      	movs	r1, #64	; 0x40
 8000996:	4820      	ldr	r0, [pc, #128]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000998:	f001 ff64 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_GPIO_Init+0x140>)
 80009b2:	f001 fdab 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4811      	ldr	r0, [pc, #68]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009d0:	f001 fd9c 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0x138>)
 80009ec:	f001 fd8e 	bl	800250c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x138>)
 8000a04:	f001 fd82 	bl	800250c <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40021800 	.word	0x40021800
 8000a1c:	10110000 	.word	0x10110000
 8000a20:	40020800 	.word	0x40020800

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f004 fcea 	bl	8005404 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <StartDefaultTask+0x28>)
 8000a32:	f012 f9c1 	bl	8012db8 <ip4addr_ntoa>
 8000a36:	4603      	mov	r3, r0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <StartDefaultTask+0x2c>)
 8000a3c:	f013 fa96 	bl	8013f6c <iprintf>
    osDelay(1000);
 8000a40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a44:	f005 fb9e 	bl	8006184 <osDelay>
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000a48:	e7f2      	b.n	8000a30 <StartDefaultTask+0xc>
 8000a4a:	bf00      	nop
 8000a4c:	200050c0 	.word	0x200050c0
 8000a50:	08015174 	.word	0x08015174

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f000 faa7 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40001000 	.word	0x40001000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000a8c:	4a07      	ldr	r2, [pc, #28]	; (8000aac <RetargetInit+0x28>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <RetargetInit+0x2c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6898      	ldr	r0, [r3, #8]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	f013 fabd 	bl	801401c <setvbuf>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20005038 	.word	0x20005038
 8000ab0:	2000001c 	.word	0x2000001c

08000ab4 <_isatty>:

int _isatty(int fd) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	db04      	blt.n	8000acc <_isatty+0x18>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	dc01      	bgt.n	8000acc <_isatty+0x18>
    return 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e003      	b.n	8000ad4 <_isatty+0x20>

  errno = EBADF;
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <_isatty+0x2c>)
 8000ace:	2209      	movs	r2, #9
 8000ad0:	601a      	str	r2, [r3, #0]
  return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	2000b960 	.word	0x2000b960

08000ae4 <_write>:

int _write(int fd, char* ptr, int len) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d002      	beq.n	8000afc <_write+0x18>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d111      	bne.n	8000b20 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <_write+0x50>)
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	f003 fc95 	bl	8004438 <HAL_UART_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000b12:	7dfb      	ldrb	r3, [r7, #23]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d101      	bne.n	8000b1c <_write+0x38>
      return len;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	e006      	b.n	8000b2a <_write+0x46>
    else
      return EIO;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	e004      	b.n	8000b2a <_write+0x46>
  }
  errno = EBADF;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <_write+0x54>)
 8000b22:	2209      	movs	r2, #9
 8000b24:	601a      	str	r2, [r3, #0]
  return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20005038 	.word	0x20005038
 8000b38:	2000b960 	.word	0x2000b960

08000b3c <_close>:

int _close(int fd) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db04      	blt.n	8000b54 <_close+0x18>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b02      	cmp	r3, #2
 8000b4e:	dc01      	bgt.n	8000b54 <_close+0x18>
    return 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e004      	b.n	8000b5e <_close+0x22>

  errno = EBADF;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_close+0x30>)
 8000b56:	2209      	movs	r2, #9
 8000b58:	601a      	str	r2, [r3, #0]
  return -1;
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	2000b960 	.word	0x2000b960

08000b70 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_lseek+0x24>)
 8000b7e:	2209      	movs	r2, #9
 8000b80:	601a      	str	r2, [r3, #0]
  return -1;
 8000b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000b960 	.word	0x2000b960

08000b98 <_read>:

int _read(int fd, char* ptr, int len) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d110      	bne.n	8000bcc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <_read+0x48>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	68b9      	ldr	r1, [r7, #8]
 8000bb6:	f003 fcd2 	bl	800455e <HAL_UART_Receive>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <_read+0x30>
      return 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e006      	b.n	8000bd6 <_read+0x3e>
    else
      return EIO;
 8000bc8:	2305      	movs	r3, #5
 8000bca:	e004      	b.n	8000bd6 <_read+0x3e>
  }
  errno = EBADF;
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_read+0x4c>)
 8000bce:	2209      	movs	r2, #9
 8000bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20005038 	.word	0x20005038
 8000be4:	2000b960 	.word	0x2000b960

08000be8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	db08      	blt.n	8000c0a <_fstat+0x22>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	dc05      	bgt.n	8000c0a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c04:	605a      	str	r2, [r3, #4]
    return 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e003      	b.n	8000c12 <_fstat+0x2a>
  }

  errno = EBADF;
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <_fstat+0x38>)
 8000c0c:	2209      	movs	r2, #9
 8000c0e:	601a      	str	r2, [r3, #0]
  return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000b960 	.word	0x2000b960

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 faa5 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0x7c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d128      	bne.n	8000ce8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000cb4:	f043 0308 	orr.w	r3, r3, #8
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_UART_MspInit+0x80>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0308 	and.w	r3, r3, #8
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd8:	2307      	movs	r3, #7
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <HAL_UART_MspInit+0x84>)
 8000ce4:	f001 fc12 	bl	800250c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40004800 	.word	0x40004800
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020c00 	.word	0x40020c00

08000cfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d1c:	d141      	bne.n	8000da2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b23      	ldr	r3, [pc, #140]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a22      	ldr	r2, [pc, #136]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d48:	230a      	movs	r3, #10
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4817      	ldr	r0, [pc, #92]	; (8000db0 <HAL_PCD_MspInit+0xb4>)
 8000d54:	f001 fbda 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4810      	ldr	r0, [pc, #64]	; (8000db0 <HAL_PCD_MspInit+0xb4>)
 8000d6e:	f001 fbcd 	bl	800250c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_PCD_MspInit+0xb0>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000

08000db4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2036      	movs	r0, #54	; 0x36
 8000dca:	f000 f9f1 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dce:	2036      	movs	r0, #54	; 0x36
 8000dd0:	f000 fa0a 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <HAL_InitTick+0xa0>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd8:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <HAL_InitTick+0xa0>)
 8000dda:	f043 0310 	orr.w	r3, r3, #16
 8000dde:	6413      	str	r3, [r2, #64]	; 0x40
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <HAL_InitTick+0xa0>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	f003 0310 	and.w	r3, r3, #16
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fb96 	bl	8003528 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dfc:	f002 fb6c 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8000e00:	4603      	mov	r3, r0
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_InitTick+0xa4>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9b      	lsrs	r3, r3, #18
 8000e10:	3b01      	subs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_InitTick+0xac>)
 8000e18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e20:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e22:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e26:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e36:	f002 ffd1 	bl	8003ddc <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d104      	bne.n	8000e4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <HAL_InitTick+0xa8>)
 8000e42:	f003 f82d 	bl	8003ea0 <HAL_TIM_Base_Start_IT>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e000      	b.n	8000e4c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3730      	adds	r7, #48	; 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800
 8000e58:	431bde83 	.word	0x431bde83
 8000e5c:	2000503c 	.word	0x2000503c
 8000e60:	40001000 	.word	0x40001000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <TIM6_DAC_IRQHandler+0x10>)
 8000e96:	f003 f87b 	bl	8003f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000503c 	.word	0x2000503c

08000ea4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <ETH_IRQHandler+0x10>)
 8000eaa:	f000 fd8d 	bl	80019c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200069d4 	.word	0x200069d4

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	; (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d205      	bcs.n	8000ef4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <_sbrk+0x6c>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20080000 	.word	0x20080000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	2000b978 	.word	0x2000b978
 8000f24:	2000b960 	.word	0x2000b960

08000f28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f012 ffaf 	bl	8013edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb95 	bl	80006ac <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f90:	08017f4c 	.word	0x08017f4c
  ldr r2, =_sbss
 8000f94:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f98:	2000b974 	.word	0x2000b974

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>

08000f9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f8f9 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ff03 	bl	8000db4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fae:	f7ff fe39 	bl	8000c24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20005088 	.word	0x20005088

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20005088 	.word	0x20005088

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff ffee 	bl	8000fe0 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffde 	bl	8000fe0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008

08001040 <__NVIC_SetPriorityGrouping>:
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	4313      	orrs	r3, r2
 800106c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <__NVIC_SetPriorityGrouping+0x40>)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	60d3      	str	r3, [r2, #12]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00
 8001084:	05fa0000 	.word	0x05fa0000

08001088 <__NVIC_GetPriorityGrouping>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff61 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb1 	bl	8001134 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff80 	bl	80010e0 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff54 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001214:	4ba9      	ldr	r3, [pc, #676]	; (80014bc <HAL_ETH_Init+0x2b8>)
 8001216:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e181      	b.n	800152e <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001230:	b2db      	uxtb	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d106      	bne.n	8001244 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f004 fa42 	bl	80056c8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001244:	4b9e      	ldr	r3, [pc, #632]	; (80014c0 <HAL_ETH_Init+0x2bc>)
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	4a9d      	ldr	r2, [pc, #628]	; (80014c0 <HAL_ETH_Init+0x2bc>)
 800124a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124e:	6453      	str	r3, [r2, #68]	; 0x44
 8001250:	4b9b      	ldr	r3, [pc, #620]	; (80014c0 <HAL_ETH_Init+0x2bc>)
 8001252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800125c:	4b99      	ldr	r3, [pc, #612]	; (80014c4 <HAL_ETH_Init+0x2c0>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a98      	ldr	r2, [pc, #608]	; (80014c4 <HAL_ETH_Init+0x2c0>)
 8001262:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001266:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001268:	4b96      	ldr	r3, [pc, #600]	; (80014c4 <HAL_ETH_Init+0x2c0>)
 800126a:	685a      	ldr	r2, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4994      	ldr	r1, [pc, #592]	; (80014c4 <HAL_ETH_Init+0x2c0>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800128e:	f7ff fea7 	bl	8000fe0 <HAL_GetTick>
 8001292:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001294:	e011      	b.n	80012ba <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001296:	f7ff fea3 	bl	8000fe0 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012a4:	d909      	bls.n	80012ba <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e139      	b.n	800152e <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e4      	bne.n	8001296 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f023 031c 	bic.w	r3, r3, #28
 80012da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80012dc:	f002 f8f0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80012e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4a78      	ldr	r2, [pc, #480]	; (80014c8 <HAL_ETH_Init+0x2c4>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d908      	bls.n	80012fc <HAL_ETH_Init+0xf8>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4a77      	ldr	r2, [pc, #476]	; (80014cc <HAL_ETH_Init+0x2c8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d804      	bhi.n	80012fc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e027      	b.n	800134c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4a73      	ldr	r2, [pc, #460]	; (80014cc <HAL_ETH_Init+0x2c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d908      	bls.n	8001316 <HAL_ETH_Init+0x112>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4a6d      	ldr	r2, [pc, #436]	; (80014bc <HAL_ETH_Init+0x2b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d204      	bcs.n	8001316 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f043 030c 	orr.w	r3, r3, #12
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e01a      	b.n	800134c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4a68      	ldr	r2, [pc, #416]	; (80014bc <HAL_ETH_Init+0x2b8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d303      	bcc.n	8001326 <HAL_ETH_Init+0x122>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4a6b      	ldr	r2, [pc, #428]	; (80014d0 <HAL_ETH_Init+0x2cc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d911      	bls.n	800134a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4a69      	ldr	r2, [pc, #420]	; (80014d0 <HAL_ETH_Init+0x2cc>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d908      	bls.n	8001340 <HAL_ETH_Init+0x13c>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4a68      	ldr	r2, [pc, #416]	; (80014d4 <HAL_ETH_Init+0x2d0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d804      	bhi.n	8001340 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e005      	b.n	800134c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e000      	b.n	800134c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800134a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001354:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001358:	2100      	movs	r1, #0
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fc17 	bl	8001b8e <HAL_ETH_WritePHYRegister>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fdcd 	bl	8001f0c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e0d7      	b.n	800152e <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800137e:	20ff      	movs	r0, #255	; 0xff
 8001380:	f7ff fe3a 	bl	8000ff8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a5 	beq.w	80014d8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800138e:	f7ff fe27 	bl	8000fe0 <HAL_GetTick>
 8001392:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	461a      	mov	r2, r3
 800139a:	2101      	movs	r1, #1
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fb8e 	bl	8001abe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013a2:	f7ff fe1d 	bl	8000fe0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d90f      	bls.n	80013d4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fda6 	bl	8001f0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e0ac      	b.n	800152e <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0da      	beq.n	8001394 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80013de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e2:	2100      	movs	r1, #0
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 fbd2 	bl	8001b8e <HAL_ETH_WritePHYRegister>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013f4:	6939      	ldr	r1, [r7, #16]
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 fd88 	bl	8001f0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001404:	2301      	movs	r3, #1
 8001406:	e092      	b.n	800152e <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001408:	f7ff fdea 	bl	8000fe0 <HAL_GetTick>
 800140c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	461a      	mov	r2, r3
 8001414:	2101      	movs	r1, #1
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 fb51 	bl	8001abe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800141c:	f7ff fde0 	bl	8000fe0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	f241 3288 	movw	r2, #5000	; 0x1388
 800142a:	4293      	cmp	r3, r2
 800142c:	d90f      	bls.n	800144e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001432:	6939      	ldr	r1, [r7, #16]
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fd69 	bl	8001f0c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e06f      	b.n	800152e <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0da      	beq.n	800140e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	461a      	mov	r2, r3
 800145e:	2110      	movs	r1, #16
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fb2c 	bl	8001abe <HAL_ETH_ReadPHYRegister>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001470:	6939      	ldr	r1, [r7, #16]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fd4a 	bl	8001f0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001480:	2301      	movs	r3, #1
 8001482:	e054      	b.n	800152e <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b00      	cmp	r3, #0
 800148c:	d004      	beq.n	8001498 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	e002      	b.n	800149e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	e035      	b.n	800151c <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e030      	b.n	800151c <HAL_ETH_Init+0x318>
 80014ba:	bf00      	nop
 80014bc:	03938700 	.word	0x03938700
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	01312cff 	.word	0x01312cff
 80014cc:	02160ebf 	.word	0x02160ebf
 80014d0:	05f5e0ff 	.word	0x05f5e0ff
 80014d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	2100      	movs	r1, #0
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fb4c 	bl	8001b8e <HAL_ETH_WritePHYRegister>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001500:	6939      	ldr	r1, [r7, #16]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fd02 	bl	8001f0c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e00c      	b.n	800152e <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001514:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001518:	f7ff fd6e 	bl	8000ff8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fcf4 	bl	8001f0c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3720      	adds	r7, #32
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop

08001538 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_ETH_DMATxDescListInit+0x20>
 8001554:	2302      	movs	r3, #2
 8001556:	e052      	b.n	80015fe <HAL_ETH_DMATxDescListInit+0xc6>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e030      	b.n	80015d6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	015b      	lsls	r3, r3, #5
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	4413      	add	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001584:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800158c:	fb02 f303 	mul.w	r3, r2, r3
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	461a      	mov	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d105      	bne.n	80015ae <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d208      	bcs.n	80015ca <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	015b      	lsls	r3, r3, #5
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	4413      	add	r3, r2
 80015c2:	461a      	mov	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	e002      	b.n	80015d0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3ca      	bcc.n	8001574 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f241 0310 	movw	r3, #4112	; 0x1010
 80015e8:	440b      	add	r3, r1
 80015ea:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800160a:	b480      	push	{r7}
 800160c:	b087      	sub	sp, #28
 800160e:	af00      	add	r7, sp, #0
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ETH_DMARxDescListInit+0x20>
 8001626:	2302      	movs	r3, #2
 8001628:	e056      	b.n	80016d8 <HAL_ETH_DMARxDescListInit+0xce>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2202      	movs	r2, #2
 8001636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e034      	b.n	80016b0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001656:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800165e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001666:	fb02 f303 	mul.w	r3, r2, r3
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	461a      	mov	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3b01      	subs	r3, #1
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	429a      	cmp	r2, r3
 8001690:	d208      	bcs.n	80016a4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	015b      	lsls	r3, r3, #5
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4413      	add	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	e002      	b.n	80016aa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	3301      	adds	r3, #1
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3c6      	bcc.n	8001646 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6819      	ldr	r1, [r3, #0]
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	f241 030c 	movw	r3, #4108	; 0x100c
 80016c2:	440b      	add	r3, r1
 80016c4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ETH_TransmitFrame+0x24>
 8001704:	2302      	movs	r3, #2
 8001706:	e0cd      	b.n	80018a4 <HAL_ETH_TransmitFrame+0x1c0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d109      	bne.n	8001732 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800172e:	2301      	movs	r3, #1
 8001730:	e0b8      	b.n	80018a4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da09      	bge.n	8001750 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2212      	movs	r2, #18
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0a9      	b.n	80018a4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001756:	4293      	cmp	r3, r2
 8001758:	d915      	bls.n	8001786 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	4a54      	ldr	r2, [pc, #336]	; (80018b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0a9b      	lsrs	r3, r3, #10
 8001764:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	4b51      	ldr	r3, [pc, #324]	; (80018b0 <HAL_ETH_TransmitFrame+0x1cc>)
 800176a:	fba3 1302 	umull	r1, r3, r3, r2
 800176e:	0a9b      	lsrs	r3, r3, #10
 8001770:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3301      	adds	r3, #1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e001      	b.n	800178a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001786:	2301      	movs	r3, #1
 8001788:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d11c      	bne.n	80017ca <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800179e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017aa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ba:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	461a      	mov	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80017c8:	e04b      	b.n	8001862 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e044      	b.n	800185a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017de:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017f4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017fe:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3b01      	subs	r3, #1
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	429a      	cmp	r2, r3
 8001808:	d116      	bne.n	8001838 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001818:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_ETH_TransmitFrame+0x1d0>)
 800181e:	fb02 f203 	mul.w	r2, r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4413      	add	r3, r2
 8001826:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800182a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001836:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001846:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	461a      	mov	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3b6      	bcc.n	80017d0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	f241 0314 	movw	r3, #4116	; 0x1014
 800186a:	4413      	add	r3, r2
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00d      	beq.n	8001892 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	f241 0314 	movw	r3, #4116	; 0x1014
 800187e:	4413      	add	r3, r2
 8001880:	2204      	movs	r2, #4
 8001882:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	f241 0304 	movw	r3, #4100	; 0x1004
 800188c:	4413      	add	r3, r2
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	371c      	adds	r7, #28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	ac02b00b 	.word	0xac02b00b
 80018b4:	fffffa0c 	.word	0xfffffa0c

080018b8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e074      	b.n	80019bc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2202      	movs	r2, #2
 80018de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018e2:	e05a      	b.n	800199a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f8:	d10d      	bne.n	8001916 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2201      	movs	r2, #1
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
 8001914:	e041      	b.n	800199a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10b      	bne.n	800193c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28
 800193a:	e02e      	b.n	800199a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	2b01      	cmp	r3, #1
 8001954:	d103      	bne.n	800195e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0c1b      	lsrs	r3, r3, #16
 8001966:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800196a:	1f1a      	subs	r2, r3, #4
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e010      	b.n	80019bc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	db02      	blt.n	80019aa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d99c      	bls.n	80018e4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	f241 0314 	movw	r3, #4116	; 0x1014
 80019d8:	4413      	add	r3, r2
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d112      	bne.n	8001a0a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f003 ff2f 	bl	8005848 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80019f2:	4413      	add	r3, r2
 80019f4:	2240      	movs	r2, #64	; 0x40
 80019f6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a08:	e01b      	b.n	8001a42 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d111      	bne.n	8001a42 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f839 	bl	8001a96 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a50:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a5a:	4413      	add	r3, r2
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a66:	d112      	bne.n	8001a8e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f81e 	bl	8001aaa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a76:	4413      	add	r3, r2
 8001a78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a7c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b82      	cmp	r3, #130	; 0x82
 8001ade:	d101      	bne.n	8001ae4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e050      	b.n	8001b86 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2282      	movs	r2, #130	; 0x82
 8001ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 031c 	and.w	r3, r3, #28
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8a1b      	ldrh	r3, [r3, #16]
 8001b00:	02db      	lsls	r3, r3, #11
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f023 0302 	bic.w	r3, r3, #2
 8001b1e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b30:	f7ff fa56 	bl	8000fe0 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b36:	e015      	b.n	8001b64 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b38:	f7ff fa52 	bl	8000fe0 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d309      	bcc.n	8001b5c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e014      	b.n	8001b86 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1e4      	bne.n	8001b38 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	460b      	mov	r3, r1
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b42      	cmp	r3, #66	; 0x42
 8001bae:	d101      	bne.n	8001bb4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e04e      	b.n	8001c52 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2242      	movs	r2, #66	; 0x42
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 031c 	and.w	r3, r3, #28
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8a1b      	ldrh	r3, [r3, #16]
 8001bd0:	02db      	lsls	r3, r3, #11
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001bda:	897b      	ldrh	r3, [r7, #10]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c0a:	f7ff f9e9 	bl	8000fe0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c10:	e015      	b.n	8001c3e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c12:	f7ff f9e5 	bl	8000fe0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d309      	bcc.n	8001c36 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e00d      	b.n	8001c52 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e4      	bne.n	8001c12 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_ETH_Start+0x16>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e01f      	b.n	8001cb0 <HAL_ETH_Start+0x56>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fb45 	bl	8002310 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fb7c 	bl	8002384 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fc13 	bl	80024b8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 fbb0 	bl	80023f8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fbdd 	bl	8002458 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_ETH_Stop+0x16>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e01f      	b.n	8001d0e <HAL_ETH_Stop+0x56>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fba2 	bl	8002428 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fbcf 	bl	8002488 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 fb67 	bl	80023be <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 fbe1 	bl	80024b8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fb27 	bl	800234a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ETH_ConfigMAC+0x1c>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0e4      	b.n	8001efe <HAL_ETH_ConfigMAC+0x1e6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80b1 	beq.w	8001eae <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d64:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d6a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d70:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d76:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d7c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d82:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d88:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d8e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d94:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d9a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001da0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001da6:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff f91a 	bl	8000ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dd4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001dda:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001de0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001de6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001dec:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001df2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001dfe:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e00:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff f8f4 	bl	8000ff8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e20:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e2a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e48:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e4e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e54:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e5a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e60:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7ff f8bd 	bl	8000ff8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f7ff f8aa 	bl	8000ff8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	61da      	str	r2, [r3, #28]
 8001eac:	e01e      	b.n	8001eec <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ebc:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff f88a 	bl	8000ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	ff20810f 	.word	0xff20810f

08001f0c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0b0      	sub	sp, #192	; 0xc0
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f28:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f30:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d103      	bne.n	8001f5a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f56:	663b      	str	r3, [r7, #96]	; 0x60
 8001f58:	e001      	b.n	8001f5e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f62:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f78:	2340      	movs	r3, #64	; 0x40
 8001f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe4:	4bab      	ldr	r3, [pc, #684]	; (8002294 <ETH_MACDMAConfig+0x388>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ff0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ff4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ff8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001ffe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002002:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002006:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800200c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800200e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002010:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002014:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002018:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800201a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800201c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800201e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002020:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002034:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002040:	2001      	movs	r0, #1
 8002042:	f7fe ffd9 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800204e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002050:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002054:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002058:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800205a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800205e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002064:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800206a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800206c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002070:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002074:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800207c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800207e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800208a:	2001      	movs	r0, #1
 800208c:	f7fe ffb4 	bl	8000ff8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002098:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020a2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020ac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80020b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020c0:	4013      	ands	r3, r2
 80020c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020ca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80020cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020d0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80020d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80020d6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80020d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80020dc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80020de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80020e2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80020e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020e8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ee:	4313      	orrs	r3, r2
 80020f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020fc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe ff75 	bl	8000ff8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002116:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002118:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800211c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe ff60 	bl	8000ff8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002140:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800214a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002154:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002166:	2304      	movs	r3, #4
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800216a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002176:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800217c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002186:	2300      	movs	r3, #0
 8002188:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800218a:	2300      	movs	r3, #0
 800218c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f241 0318 	movw	r3, #4120	; 0x1018
 8002196:	4413      	add	r3, r2
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800219e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021a2:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <ETH_MACDMAConfig+0x38c>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021aa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021ac:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021ae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021b0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021b2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021b4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021b6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021b8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021ba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021bc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021be:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021c0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021c2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021c6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80021c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80021ca:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f241 0318 	movw	r3, #4120	; 0x1018
 80021de:	4413      	add	r3, r2
 80021e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80021ee:	4413      	add	r3, r2
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f6:	2001      	movs	r0, #1
 80021f8:	f7fe fefe 	bl	8000ff8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f241 0318 	movw	r3, #4120	; 0x1018
 8002204:	4413      	add	r3, r2
 8002206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800220c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002210:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002214:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002218:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800221a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800221c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800221e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002220:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002222:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002226:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002244:	2001      	movs	r0, #1
 8002246:	f7fe fed7 	bl	8000ff8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002252:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002256:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10d      	bne.n	800227c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	f241 031c 	movw	r3, #4124	; 0x101c
 8002268:	4413      	add	r3, r2
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <ETH_MACDMAConfig+0x390>)
 8002272:	431a      	orrs	r2, r3
 8002274:	f241 031c 	movw	r3, #4124	; 0x101c
 8002278:	440b      	add	r3, r1
 800227a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695b      	ldr	r3, [r3, #20]
 8002280:	461a      	mov	r2, r3
 8002282:	2100      	movs	r1, #0
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f80b 	bl	80022a0 <ETH_MACAddressConfig>
}
 800228a:	bf00      	nop
 800228c:	37c0      	adds	r7, #192	; 0xc0
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	ff20810f 	.word	0xff20810f
 8002298:	f8de3f23 	.word	0xf8de3f23
 800229c:	00010040 	.word	0x00010040

080022a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3305      	adds	r3, #5
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	3204      	adds	r2, #4
 80022b8:	7812      	ldrb	r2, [r2, #0]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <ETH_MACAddressConfig+0x68>)
 80022c2:	4413      	add	r3, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3303      	adds	r3, #3
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	061a      	lsls	r2, r3, #24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3302      	adds	r3, #2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	021b      	lsls	r3, r3, #8
 80022e4:	4313      	orrs	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	7812      	ldrb	r2, [r2, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <ETH_MACAddressConfig+0x6c>)
 80022f2:	4413      	add	r3, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	6013      	str	r3, [r2, #0]
}
 80022fa:	bf00      	nop
 80022fc:	371c      	adds	r7, #28
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40028040 	.word	0x40028040
 800230c:	40028044 	.word	0x40028044

08002310 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002334:	2001      	movs	r0, #1
 8002336:	f7fe fe5f 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	601a      	str	r2, [r3, #0]
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0208 	bic.w	r2, r2, #8
 8002364:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe fe42 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3710      	adds	r7, #16
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0204 	orr.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fe fe25 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	601a      	str	r2, [r3, #0]
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b084      	sub	sp, #16
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0204 	bic.w	r2, r2, #4
 80023d8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e2:	2001      	movs	r0, #1
 80023e4:	f7fe fe08 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]
}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f241 0318 	movw	r3, #4120	; 0x1018
 8002408:	4413      	add	r3, r2
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6811      	ldr	r1, [r2, #0]
 8002410:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002414:	f241 0318 	movw	r3, #4120	; 0x1018
 8002418:	440b      	add	r3, r1
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f241 0318 	movw	r3, #4120	; 0x1018
 8002438:	4413      	add	r3, r2
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6811      	ldr	r1, [r2, #0]
 8002440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002444:	f241 0318 	movw	r3, #4120	; 0x1018
 8002448:	440b      	add	r3, r1
 800244a:	601a      	str	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	f241 0318 	movw	r3, #4120	; 0x1018
 8002468:	4413      	add	r3, r2
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	f043 0202 	orr.w	r2, r3, #2
 8002474:	f241 0318 	movw	r3, #4120	; 0x1018
 8002478:	440b      	add	r3, r1
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f241 0318 	movw	r3, #4120	; 0x1018
 8002498:	4413      	add	r3, r2
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6811      	ldr	r1, [r2, #0]
 80024a0:	f023 0202 	bic.w	r2, r3, #2
 80024a4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a8:	440b      	add	r3, r1
 80024aa:	601a      	str	r2, [r3, #0]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024cc:	4413      	add	r3, r2
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6811      	ldr	r1, [r2, #0]
 80024d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80024dc:	440b      	add	r3, r1
 80024de:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80024e8:	4413      	add	r3, r2
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe fd82 	bl	8000ff8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	f241 0318 	movw	r3, #4120	; 0x1018
 80024fe:	440b      	add	r3, r1
 8002500:	601a      	str	r2, [r3, #0]
}
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800250c:	b480      	push	{r7}
 800250e:	b089      	sub	sp, #36	; 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	e175      	b.n	8002818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	f040 8164 	bne.w	8002812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d00b      	beq.n	800256a <HAL_GPIO_Init+0x5e>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d007      	beq.n	800256a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b12      	cmp	r3, #18
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x100>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b12      	cmp	r3, #18
 800260a:	d123      	bne.n	8002654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	08da      	lsrs	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3208      	adds	r2, #8
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	08da      	lsrs	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3208      	adds	r2, #8
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	2203      	movs	r2, #3
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0203 	and.w	r2, r3, #3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 80be 	beq.w	8002812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002696:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_GPIO_Init+0x324>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	; 0x44
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_GPIO_Init+0x324>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026aa:	60fb      	str	r3, [r7, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ae:	4a61      	ldr	r2, [pc, #388]	; (8002834 <HAL_GPIO_Init+0x328>)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	089b      	lsrs	r3, r3, #2
 80026b4:	3302      	adds	r3, #2
 80026b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a58      	ldr	r2, [pc, #352]	; (8002838 <HAL_GPIO_Init+0x32c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d037      	beq.n	800274a <HAL_GPIO_Init+0x23e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a57      	ldr	r2, [pc, #348]	; (800283c <HAL_GPIO_Init+0x330>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d031      	beq.n	8002746 <HAL_GPIO_Init+0x23a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a56      	ldr	r2, [pc, #344]	; (8002840 <HAL_GPIO_Init+0x334>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d02b      	beq.n	8002742 <HAL_GPIO_Init+0x236>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a55      	ldr	r2, [pc, #340]	; (8002844 <HAL_GPIO_Init+0x338>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d025      	beq.n	800273e <HAL_GPIO_Init+0x232>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_GPIO_Init+0x33c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d01f      	beq.n	800273a <HAL_GPIO_Init+0x22e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_GPIO_Init+0x340>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d019      	beq.n	8002736 <HAL_GPIO_Init+0x22a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a52      	ldr	r2, [pc, #328]	; (8002850 <HAL_GPIO_Init+0x344>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_GPIO_Init+0x226>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_GPIO_Init+0x348>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00d      	beq.n	800272e <HAL_GPIO_Init+0x222>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a50      	ldr	r2, [pc, #320]	; (8002858 <HAL_GPIO_Init+0x34c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <HAL_GPIO_Init+0x21e>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4f      	ldr	r2, [pc, #316]	; (800285c <HAL_GPIO_Init+0x350>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d101      	bne.n	8002726 <HAL_GPIO_Init+0x21a>
 8002722:	2309      	movs	r3, #9
 8002724:	e012      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002726:	230a      	movs	r3, #10
 8002728:	e010      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272a:	2308      	movs	r3, #8
 800272c:	e00e      	b.n	800274c <HAL_GPIO_Init+0x240>
 800272e:	2307      	movs	r3, #7
 8002730:	e00c      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002732:	2306      	movs	r3, #6
 8002734:	e00a      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002736:	2305      	movs	r3, #5
 8002738:	e008      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273a:	2304      	movs	r3, #4
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x240>
 800273e:	2303      	movs	r3, #3
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x240>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x240>
 800274a:	2300      	movs	r3, #0
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800275c:	4935      	ldr	r1, [pc, #212]	; (8002834 <HAL_GPIO_Init+0x328>)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800276a:	4b3d      	ldr	r3, [pc, #244]	; (8002860 <HAL_GPIO_Init+0x354>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_GPIO_Init+0x354>)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_GPIO_Init+0x354>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b8:	4a29      	ldr	r2, [pc, #164]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e2:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x354>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800280c:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_GPIO_Init+0x354>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3301      	adds	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	2b0f      	cmp	r3, #15
 800281c:	f67f ae86 	bls.w	800252c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3724      	adds	r7, #36	; 0x24
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	40013800 	.word	0x40013800
 8002838:	40020000 	.word	0x40020000
 800283c:	40020400 	.word	0x40020400
 8002840:	40020800 	.word	0x40020800
 8002844:	40020c00 	.word	0x40020c00
 8002848:	40021000 	.word	0x40021000
 800284c:	40021400 	.word	0x40021400
 8002850:	40021800 	.word	0x40021800
 8002854:	40021c00 	.word	0x40021c00
 8002858:	40022000 	.word	0x40022000
 800285c:	40022400 	.word	0x40022400
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002898:	b08f      	sub	sp, #60	; 0x3c
 800289a:	af0a      	add	r7, sp, #40	; 0x28
 800289c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e116      	b.n	8002ad6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fa1a 	bl	8000cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2203      	movs	r2, #3
 80028cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fb2c 	bl	8004f44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	603b      	str	r3, [r7, #0]
 80028f2:	687e      	ldr	r6, [r7, #4]
 80028f4:	466d      	mov	r5, sp
 80028f6:	f106 0410 	add.w	r4, r6, #16
 80028fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002906:	e885 0003 	stmia.w	r5, {r0, r1}
 800290a:	1d33      	adds	r3, r6, #4
 800290c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800290e:	6838      	ldr	r0, [r7, #0]
 8002910:	f002 fac0 	bl	8004e94 <USB_CoreInit>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e0d7      	b.n	8002ad6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fb1a 	bl	8004f66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
 8002936:	e04a      	b.n	80029ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	333d      	adds	r3, #61	; 0x3d
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800294c:	7bfa      	ldrb	r2, [r7, #15]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	333c      	adds	r3, #60	; 0x3c
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002960:	7bfa      	ldrb	r2, [r7, #15]
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	b298      	uxth	r0, r3
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3342      	adds	r3, #66	; 0x42
 8002974:	4602      	mov	r2, r0
 8002976:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	333f      	adds	r3, #63	; 0x3f
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800298c:	7bfa      	ldrb	r2, [r7, #15]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	; 0x44
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3348      	adds	r3, #72	; 0x48
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	3301      	adds	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d3af      	bcc.n	8002938 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e044      	b.n	8002a68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a0a:	7bfa      	ldrb	r2, [r7, #15]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	1a9b      	subs	r3, r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	3301      	adds	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d3b5      	bcc.n	80029de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	687e      	ldr	r6, [r7, #4]
 8002a7a:	466d      	mov	r5, sp
 8002a7c:	f106 0410 	add.w	r4, r6, #16
 8002a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a90:	1d33      	adds	r3, r6, #4
 8002a92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a94:	6838      	ldr	r0, [r7, #0]
 8002a96:	f002 fa91 	bl	8004fbc <USB_DevInit>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e014      	b.n	8002ad6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d102      	bne.n	8002aca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f80b 	bl	8002ae0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fc43 	bl	800535a <USB_DevDisconnect>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ae0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b0e:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	10000003 	.word	0x10000003

08002b28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b56:	f7fe fa43 	bl	8000fe0 <HAL_GetTick>
 8002b5a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b5c:	e009      	b.n	8002b72 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b5e:	f7fe fa3f 	bl	8000fe0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b6c:	d901      	bls.n	8002b72 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e022      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b72:	4b14      	ldr	r3, [pc, #80]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0f      	ldr	r2, [pc, #60]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b8c:	f7fe fa28 	bl	8000fe0 <HAL_GetTick>
 8002b90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b92:	e009      	b.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b94:	f7fe fa24 	bl	8000fe0 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ba2:	d901      	bls.n	8002ba8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e007      	b.n	8002bb8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e29b      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8087 	beq.w	8002cfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bec:	4b96      	ldr	r3, [pc, #600]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf8:	4b93      	ldr	r3, [pc, #588]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d112      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62>
 8002c04:	4b90      	ldr	r3, [pc, #576]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b8d      	ldr	r3, [pc, #564]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d06c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x130>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d168      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e275      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x7a>
 8002c34:	4b84      	ldr	r3, [pc, #528]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a83      	ldr	r2, [pc, #524]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e02e      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd8>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x9c>
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b7c      	ldr	r3, [pc, #496]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a7b      	ldr	r2, [pc, #492]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd8>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002c6e:	4b76      	ldr	r3, [pc, #472]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a75      	ldr	r2, [pc, #468]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b73      	ldr	r3, [pc, #460]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a72      	ldr	r2, [pc, #456]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd8>
 8002c88:	4b6f      	ldr	r3, [pc, #444]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6e      	ldr	r2, [pc, #440]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6b      	ldr	r2, [pc, #428]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe f99a 	bl	8000fe0 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe f996 	bl	8000fe0 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e229      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b61      	ldr	r3, [pc, #388]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f986 	bl	8000fe0 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe f982 	bl	8000fe0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e215      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b57      	ldr	r3, [pc, #348]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x110>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d069      	beq.n	8002dda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b4d      	ldr	r3, [pc, #308]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x190>
 8002d1e:	4b4a      	ldr	r3, [pc, #296]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x17a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1e9      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	493d      	ldr	r1, [pc, #244]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e040      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a38      	ldr	r2, [pc, #224]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe f938 	bl	8000fe0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe f934 	bl	8000fe0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1c7      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4929      	ldr	r1, [pc, #164]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
 8002da6:	e018      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002dae:	f023 0301 	bic.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f914 	bl	8000fe0 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7fe f910 	bl	8000fe0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1a3      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d038      	beq.n	8002e58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d019      	beq.n	8002e22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f8f1 	bl	8000fe0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f8ed 	bl	8000fe0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e180      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e14:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x23a>
 8002e20:	e01a      	b.n	8002e58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_RCC_OscConfig+0x280>)
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe f8d7 	bl	8000fe0 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe f8d3 	bl	8000fe0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d903      	bls.n	8002e4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e166      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
 8002e48:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b92      	ldr	r3, [pc, #584]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ee      	bne.n	8002e36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a4 	beq.w	8002fae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b8c      	ldr	r3, [pc, #560]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a88      	ldr	r2, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7e:	4b86      	ldr	r3, [pc, #536]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8e:	4b83      	ldr	r3, [pc, #524]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d118      	bne.n	8002ecc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e9a:	4b80      	ldr	r3, [pc, #512]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7f      	ldr	r2, [pc, #508]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea6:	f7fe f89b 	bl	8000fe0 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eae:	f7fe f897 	bl	8000fe0 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e12a      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec0:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x4d4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x31a>
 8002ed4:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e02d      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0x33c>
 8002eea:	4b6b      	ldr	r3, [pc, #428]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	4a6a      	ldr	r2, [pc, #424]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef6:	4b68      	ldr	r3, [pc, #416]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a67      	ldr	r2, [pc, #412]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	e01c      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	2b05      	cmp	r3, #5
 8002f0a:	d10c      	bne.n	8002f26 <HAL_RCC_OscConfig+0x35e>
 8002f0c:	4b62      	ldr	r3, [pc, #392]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f12:	f043 0304 	orr.w	r3, r3, #4
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70
 8002f18:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6713      	str	r3, [r2, #112]	; 0x70
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	4a5b      	ldr	r2, [pc, #364]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6713      	str	r3, [r2, #112]	; 0x70
 8002f32:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe f84b 	bl	8000fe0 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe f847 	bl	8000fe0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0d8      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RCC_OscConfig+0x386>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe f835 	bl	8000fe0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe f831 	bl	8000fe0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e0c2      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1ee      	bne.n	8002f7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80ae 	beq.w	8003114 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb8:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 030c 	and.w	r3, r3, #12
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d06d      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d14b      	bne.n	8003064 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b32      	ldr	r3, [pc, #200]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f802 	bl	8000fe0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fd fffe 	bl	8000fe0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e091      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	071b      	lsls	r3, r3, #28
 800302a:	491b      	ldr	r1, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8003036:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fd ffd0 	bl	8000fe0 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003044:	f7fd ffcc 	bl	8000fe0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e05f      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x47c>
 8003062:	e057      	b.n	8003114 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fd ffb6 	bl	8000fe0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003078:	f7fd ffb2 	bl	8000fe0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e045      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_RCC_OscConfig+0x4d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x4b0>
 8003096:	e03d      	b.n	8003114 <HAL_RCC_OscConfig+0x54c>
 8003098:	40023800 	.word	0x40023800
 800309c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_RCC_OscConfig+0x558>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d030      	beq.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d129      	bne.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d122      	bne.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d8:	4293      	cmp	r3, r2
 80030da:	d119      	bne.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	085b      	lsrs	r3, r3, #1
 80030e8:	3b01      	subs	r3, #1
 80030ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10f      	bne.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d0      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800313c:	4b6a      	ldr	r3, [pc, #424]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d910      	bls.n	800316c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314a:	4b67      	ldr	r3, [pc, #412]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f023 020f 	bic.w	r2, r3, #15
 8003152:	4965      	ldr	r1, [pc, #404]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b8      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	494d      	ldr	r1, [pc, #308]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d040      	beq.n	8003248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d115      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d109      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e073      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06b      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4936      	ldr	r1, [pc, #216]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fd fee2 	bl	8000fe0 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	e00a      	b.n	8003236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003220:	f7fd fede 	bl	8000fe0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	f241 3288 	movw	r2, #5000	; 0x1388
 800322e:	4293      	cmp	r3, r2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e053      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 020c 	and.w	r2, r3, #12
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d1eb      	bne.n	8003220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 030f 	and.w	r3, r3, #15
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d210      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 020f 	bic.w	r2, r3, #15
 800325e:	4922      	ldr	r1, [pc, #136]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e032      	b.n	80032de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4916      	ldr	r1, [pc, #88]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	490e      	ldr	r1, [pc, #56]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f821 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490a      	ldr	r1, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1d4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fd6c 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08017cb4 	.word	0x08017cb4
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	607b      	str	r3, [r7, #4]
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	2300      	movs	r3, #0
 800330e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003310:	2300      	movs	r3, #0
 8003312:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003314:	4b67      	ldr	r3, [pc, #412]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x40>
 8003320:	2b08      	cmp	r3, #8
 8003322:	f200 80bd 	bhi.w	80034a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x3a>
 800332e:	e0b7      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003332:	60bb      	str	r3, [r7, #8]
      break;
 8003334:	e0b7      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003338:	60bb      	str	r3, [r7, #8]
      break;
 800333a:	e0b4      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003346:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d04d      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	ea02 0800 	and.w	r8, r2, r0
 800336a:	ea03 0901 	and.w	r9, r3, r1
 800336e:	4640      	mov	r0, r8
 8003370:	4649      	mov	r1, r9
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	014b      	lsls	r3, r1, #5
 800337c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003380:	0142      	lsls	r2, r0, #5
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	ebb0 0008 	subs.w	r0, r0, r8
 800338a:	eb61 0109 	sbc.w	r1, r1, r9
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	018b      	lsls	r3, r1, #6
 8003398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800339c:	0182      	lsls	r2, r0, #6
 800339e:	1a12      	subs	r2, r2, r0
 80033a0:	eb63 0301 	sbc.w	r3, r3, r1
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	00d9      	lsls	r1, r3, #3
 80033ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b2:	00d0      	lsls	r0, r2, #3
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	eb12 0208 	adds.w	r2, r2, r8
 80033bc:	eb43 0309 	adc.w	r3, r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0259      	lsls	r1, r3, #9
 80033ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033ce:	0250      	lsls	r0, r2, #9
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	461a      	mov	r2, r3
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	f7fc ff7e 	bl	80002e0 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	e04a      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	461a      	mov	r2, r3
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	ea02 0400 	and.w	r4, r2, r0
 8003406:	ea03 0501 	and.w	r5, r3, r1
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	014b      	lsls	r3, r1, #5
 8003418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800341c:	0142      	lsls	r2, r0, #5
 800341e:	4610      	mov	r0, r2
 8003420:	4619      	mov	r1, r3
 8003422:	1b00      	subs	r0, r0, r4
 8003424:	eb61 0105 	sbc.w	r1, r1, r5
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	018b      	lsls	r3, r1, #6
 8003432:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003436:	0182      	lsls	r2, r0, #6
 8003438:	1a12      	subs	r2, r2, r0
 800343a:	eb63 0301 	sbc.w	r3, r3, r1
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	00d9      	lsls	r1, r3, #3
 8003448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800344c:	00d0      	lsls	r0, r2, #3
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	1912      	adds	r2, r2, r4
 8003454:	eb45 0303 	adc.w	r3, r5, r3
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	0299      	lsls	r1, r3, #10
 8003462:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003466:	0290      	lsls	r0, r2, #10
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	461a      	mov	r2, r3
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	f7fc ff32 	bl	80002e0 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4613      	mov	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	0c1b      	lsrs	r3, r3, #16
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	3301      	adds	r3, #1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	fbb2 f3f3 	udiv	r3, r2, r3
 800349c:	60bb      	str	r3, [r7, #8]
      break;
 800349e:	e002      	b.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034a2:	60bb      	str	r3, [r7, #8]
      break;
 80034a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a6:	68bb      	ldr	r3, [r7, #8]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034b2:	bf00      	nop
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	007a1200 	.word	0x007a1200

080034c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff0 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	0a9b      	lsrs	r3, r3, #10
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08017cc4 	.word	0x08017cc4

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffdc 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	0b5b      	lsrs	r3, r3, #13
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	08017cc4 	.word	0x08017cc4

08003528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	220f      	movs	r2, #15
 8003536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003538:	4b12      	ldr	r3, [pc, #72]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 0203 	and.w	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003544:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800355c:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_GetClockConfig+0x5c>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	08db      	lsrs	r3, r3, #3
 8003562:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_RCC_GetClockConfig+0x60>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800
 8003588:	40023c00 	.word	0x40023c00

0800358c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035b4:	4b69      	ldr	r3, [pc, #420]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a68      	ldr	r2, [pc, #416]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	4964      	ldr	r1, [pc, #400]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80035d6:	2301      	movs	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d017      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e6:	4b5d      	ldr	r3, [pc, #372]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	4959      	ldr	r1, [pc, #356]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003622:	4b4e      	ldr	r3, [pc, #312]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003628:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	494a      	ldr	r1, [pc, #296]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 808b 	beq.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a39      	ldr	r2, [pc, #228]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
 800367c:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fd fca4 	bl	8000fe0 <HAL_GetTick>
 8003698:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fd fca0 	bl	8000fe0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	; 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e38f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ae:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d035      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d02e      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036d8:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036fa:	4a18      	ldr	r2, [pc, #96]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003700:	4b16      	ldr	r3, [pc, #88]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d114      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fd fc68 	bl	8000fe0 <HAL_GetTick>
 8003710:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fd fc64 	bl	8000fe0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e351      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ee      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003742:	d111      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003752:	400b      	ands	r3, r1
 8003754:	4901      	ldr	r1, [pc, #4]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
 800375a:	e00b      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800375c:	40023800 	.word	0x40023800
 8003760:	40007000 	.word	0x40007000
 8003764:	0ffffcff 	.word	0x0ffffcff
 8003768:	4bb3      	ldr	r3, [pc, #716]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4ab2      	ldr	r2, [pc, #712]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800376e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003772:	6093      	str	r3, [r2, #8]
 8003774:	4bb0      	ldr	r3, [pc, #704]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003776:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	49ad      	ldr	r1, [pc, #692]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003782:	4313      	orrs	r3, r2
 8003784:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d010      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003792:	4ba9      	ldr	r3, [pc, #676]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003798:	4aa7      	ldr	r2, [pc, #668]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800379a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800379e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037a2:	4ba5      	ldr	r3, [pc, #660]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	49a2      	ldr	r1, [pc, #648]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037c0:	4b9d      	ldr	r3, [pc, #628]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ce:	499a      	ldr	r1, [pc, #616]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037e2:	4b95      	ldr	r3, [pc, #596]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	4991      	ldr	r1, [pc, #580]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003804:	4b8c      	ldr	r3, [pc, #560]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003812:	4989      	ldr	r1, [pc, #548]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003826:	4b84      	ldr	r3, [pc, #528]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003834:	4980      	ldr	r1, [pc, #512]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003848:	4b7b      	ldr	r3, [pc, #492]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384e:	f023 0203 	bic.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4978      	ldr	r1, [pc, #480]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800386a:	4b73      	ldr	r3, [pc, #460]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003870:	f023 020c 	bic.w	r2, r3, #12
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	496f      	ldr	r1, [pc, #444]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389a:	4967      	ldr	r1, [pc, #412]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ae:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038bc:	495e      	ldr	r1, [pc, #376]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80038d0:	4b59      	ldr	r3, [pc, #356]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	4956      	ldr	r1, [pc, #344]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038f2:	4b51      	ldr	r3, [pc, #324]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003900:	494d      	ldr	r1, [pc, #308]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003914:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	4945      	ldr	r1, [pc, #276]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003944:	493c      	ldr	r1, [pc, #240]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003946:	4313      	orrs	r3, r2
 8003948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003988:	492b      	ldr	r1, [pc, #172]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003998:	d101      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ba:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	491b      	ldr	r1, [pc, #108]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00b      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ec:	4912      	ldr	r1, [pc, #72]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	4909      	ldr	r1, [pc, #36]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00f      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a24:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	e002      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	4986      	ldr	r1, [pc, #536]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00b      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a50:	4b81      	ldr	r3, [pc, #516]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a56:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a60:	497d      	ldr	r1, [pc, #500]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d006      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80d6 	beq.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a7c:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd faaa 	bl	8000fe0 <HAL_GetTick>
 8003a8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a90:	f7fd faa6 	bl	8000fe0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b64      	cmp	r3, #100	; 0x64
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e195      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d021      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11d      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ac2:	4b65      	ldr	r3, [pc, #404]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	0c1b      	lsrs	r3, r3, #16
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad0:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad6:	0e1b      	lsrs	r3, r3, #24
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	019a      	lsls	r2, r3, #6
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	041b      	lsls	r3, r3, #16
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	061b      	lsls	r3, r3, #24
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	071b      	lsls	r3, r3, #28
 8003af6:	4958      	ldr	r1, [pc, #352]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b12:	d00a      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d02e      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b28:	d129      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b2a:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b38:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	0f1b      	lsrs	r3, r3, #28
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	019a      	lsls	r2, r3, #6
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	061b      	lsls	r3, r3, #24
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	071b      	lsls	r3, r3, #28
 8003b5e:	493e      	ldr	r1, [pc, #248]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b66:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b6c:	f023 021f 	bic.w	r2, r3, #31
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	3b01      	subs	r3, #1
 8003b76:	4938      	ldr	r1, [pc, #224]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01d      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b8a:	4b33      	ldr	r3, [pc, #204]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b90:	0e1b      	lsrs	r3, r3, #24
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b98:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9e:	0f1b      	lsrs	r3, r3, #28
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	019a      	lsls	r2, r3, #6
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	061b      	lsls	r3, r3, #24
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	071b      	lsls	r3, r3, #28
 8003bbe:	4926      	ldr	r1, [pc, #152]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	431a      	orrs	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	061b      	lsls	r3, r3, #24
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	491a      	ldr	r1, [pc, #104]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c02:	f7fd f9ed 	bl	8000fe0 <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c08:	e008      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c0a:	f7fd f9e9 	bl	8000fe0 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d901      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0d8      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0f0      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f040 80ce 	bne.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c30:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c3c:	f7fd f9d0 	bl	8000fe0 <HAL_GetTick>
 8003c40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c42:	e00b      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c44:	f7fd f9cc 	bl	8000fe0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d904      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0bb      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c5c:	4b5e      	ldr	r3, [pc, #376]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c68:	d0ec      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d02e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d12a      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c92:	4b51      	ldr	r3, [pc, #324]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ca0:	4b4d      	ldr	r3, [pc, #308]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	0f1b      	lsrs	r3, r3, #28
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	019a      	lsls	r2, r3, #6
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	061b      	lsls	r3, r3, #24
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	071b      	lsls	r3, r3, #28
 8003cc6:	4944      	ldr	r1, [pc, #272]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003cce:	4b42      	ldr	r3, [pc, #264]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	493d      	ldr	r1, [pc, #244]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d022      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfc:	d11d      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cfe:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	0e1b      	lsrs	r3, r3, #24
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d0c:	4b32      	ldr	r3, [pc, #200]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	0f1b      	lsrs	r3, r3, #28
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	041b      	lsls	r3, r3, #16
 8003d26:	431a      	orrs	r2, r3
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	061b      	lsls	r3, r3, #24
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4929      	ldr	r1, [pc, #164]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d028      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4c:	0e1b      	lsrs	r3, r3, #24
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d54:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5a:	0c1b      	lsrs	r3, r3, #16
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	019a      	lsls	r2, r3, #6
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	061b      	lsls	r3, r3, #24
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	071b      	lsls	r3, r3, #28
 8003d7a:	4917      	ldr	r1, [pc, #92]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4911      	ldr	r1, [pc, #68]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da4:	f7fd f91c 	bl	8000fe0 <HAL_GetTick>
 8003da8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003dac:	f7fd f918 	bl	8000fe0 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e007      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dca:	d1ef      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e049      	b.n	8003e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f841 	bl	8003e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 fa00 	bl	8004220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d001      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e054      	b.n	8003f62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d022      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee2:	d01d      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d018      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a21      	ldr	r2, [pc, #132]	; (8003f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00e      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_TIM_Base_Start_IT+0xe0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIM_Base_Start_IT+0xe4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIM_Base_Start_IT+0xe8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d115      	bne.n	8003f4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_TIM_Base_Start_IT+0xec>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b06      	cmp	r3, #6
 8003f30:	d015      	beq.n	8003f5e <HAL_TIM_Base_Start_IT+0xbe>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f38:	d011      	beq.n	8003f5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0201 	orr.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4a:	e008      	b.n	8003f5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	e000      	b.n	8003f60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	40000400 	.word	0x40000400
 8003f78:	40000800 	.word	0x40000800
 8003f7c:	40000c00 	.word	0x40000c00
 8003f80:	40010400 	.word	0x40010400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40001800 	.word	0x40001800
 8003f8c:	00010007 	.word	0x00010007

08003f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d122      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0202 	mvn.w	r2, #2
 8003fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f905 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f8f7 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f908 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0204 	mvn.w	r2, #4
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8db 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8cd 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f8de 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b08      	cmp	r3, #8
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b08      	cmp	r3, #8
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0208 	mvn.w	r2, #8
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2204      	movs	r2, #4
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f8b1 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f8a3 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8b4 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b10      	cmp	r3, #16
 80040a0:	d122      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0210 	mvn.w	r2, #16
 80040b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2208      	movs	r2, #8
 80040be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f887 	bl	80041e2 <HAL_TIM_IC_CaptureCallback>
 80040d4:	e005      	b.n	80040e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f879 	bl	80041ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f88a 	bl	80041f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b01      	cmp	r3, #1
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0201 	mvn.w	r2, #1
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fc fca0 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b80      	cmp	r3, #128	; 0x80
 8004120:	d10e      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412c:	2b80      	cmp	r3, #128	; 0x80
 800412e:	d107      	bne.n	8004140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f91a 	bl	8004374 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d10e      	bne.n	800416e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d107      	bne.n	800416e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f90d 	bl	8004388 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b40      	cmp	r3, #64	; 0x40
 800417a:	d10e      	bne.n	800419a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b40      	cmp	r3, #64	; 0x40
 8004188:	d107      	bne.n	800419a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f838 	bl	800420a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d10e      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b20      	cmp	r3, #32
 80041b4:	d107      	bne.n	80041c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f06f 0220 	mvn.w	r2, #32
 80041be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8cd 	bl	8004360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a40      	ldr	r2, [pc, #256]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d013      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d00f      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a3d      	ldr	r2, [pc, #244]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00b      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d007      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3b      	ldr	r2, [pc, #236]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3a      	ldr	r2, [pc, #232]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d108      	bne.n	8004272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a2f      	ldr	r2, [pc, #188]	; (8004334 <TIM_Base_SetConfig+0x114>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d027      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2c      	ldr	r2, [pc, #176]	; (8004338 <TIM_Base_SetConfig+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d023      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2b      	ldr	r2, [pc, #172]	; (800433c <TIM_Base_SetConfig+0x11c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <TIM_Base_SetConfig+0x120>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <TIM_Base_SetConfig+0x124>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d017      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <TIM_Base_SetConfig+0x128>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <TIM_Base_SetConfig+0x12c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00f      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <TIM_Base_SetConfig+0x130>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00b      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <TIM_Base_SetConfig+0x134>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a24      	ldr	r2, [pc, #144]	; (8004358 <TIM_Base_SetConfig+0x138>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a23      	ldr	r2, [pc, #140]	; (800435c <TIM_Base_SetConfig+0x13c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d108      	bne.n	80042e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a0a      	ldr	r2, [pc, #40]	; (8004334 <TIM_Base_SetConfig+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0xf8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <TIM_Base_SetConfig+0x124>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d103      	bne.n	8004320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	691a      	ldr	r2, [r3, #16]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	615a      	str	r2, [r3, #20]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000
 8004338:	40000400 	.word	0x40000400
 800433c:	40000800 	.word	0x40000800
 8004340:	40000c00 	.word	0x40000c00
 8004344:	40010400 	.word	0x40010400
 8004348:	40014000 	.word	0x40014000
 800434c:	40014400 	.word	0x40014400
 8004350:	40014800 	.word	0x40014800
 8004354:	40001800 	.word	0x40001800
 8004358:	40001c00 	.word	0x40001c00
 800435c:	40002000 	.word	0x40002000

08004360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e040      	b.n	8004430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d106      	bne.n	80043c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fc fc58 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f990 	bl	8004700 <UART_SetConfig>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e022      	b.n	8004430 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fbe6 	bl	8004bc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fc6d 	bl	8004d08 <UART_CheckIdleState>
 800442e:	4603      	mov	r3, r0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	4613      	mov	r3, r2
 8004446:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800444c:	2b20      	cmp	r3, #32
 800444e:	f040 8081 	bne.w	8004554 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_UART_Transmit+0x26>
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e079      	b.n	8004556 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_UART_Transmit+0x38>
 800446c:	2302      	movs	r3, #2
 800446e:	e072      	b.n	8004556 <HAL_UART_Transmit+0x11e>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2221      	movs	r2, #33	; 0x21
 8004484:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004486:	f7fc fdab 	bl	8000fe0 <HAL_GetTick>
 800448a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	88fa      	ldrh	r2, [r7, #6]
 8004490:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	88fa      	ldrh	r2, [r7, #6]
 8004498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a4:	d108      	bne.n	80044b8 <HAL_UART_Transmit+0x80>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d104      	bne.n	80044b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e003      	b.n	80044c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044c8:	e02c      	b.n	8004524 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fc60 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e038      	b.n	8004556 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	3302      	adds	r3, #2
 80044fe:	61bb      	str	r3, [r7, #24]
 8004500:	e007      	b.n	8004512 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	3301      	adds	r3, #1
 8004510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1cc      	bne.n	80044ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	2140      	movs	r1, #64	; 0x40
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fc2d 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e005      	b.n	8004556 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b08a      	sub	sp, #40	; 0x28
 8004562:	af02      	add	r7, sp, #8
 8004564:	60f8      	str	r0, [r7, #12]
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	603b      	str	r3, [r7, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004572:	2b20      	cmp	r3, #32
 8004574:	f040 80be 	bne.w	80046f4 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_UART_Receive+0x26>
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b6      	b.n	80046f6 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_UART_Receive+0x38>
 8004592:	2302      	movs	r3, #2
 8004594:	e0af      	b.n	80046f6 <HAL_UART_Receive+0x198>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2222      	movs	r2, #34	; 0x22
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045b2:	f7fc fd15 	bl	8000fe0 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	88fa      	ldrh	r2, [r7, #6]
 80045c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d0:	d10e      	bne.n	80045f0 <HAL_UART_Receive+0x92>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_UART_Receive+0x88>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f240 12ff 	movw	r2, #511	; 0x1ff
 80045e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e4:	e02d      	b.n	8004642 <HAL_UART_Receive+0xe4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045ee:	e028      	b.n	8004642 <HAL_UART_Receive+0xe4>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10d      	bne.n	8004614 <HAL_UART_Receive+0xb6>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d104      	bne.n	800460a <HAL_UART_Receive+0xac>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	; 0xff
 8004604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004608:	e01b      	b.n	8004642 <HAL_UART_Receive+0xe4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	227f      	movs	r2, #127	; 0x7f
 800460e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004612:	e016      	b.n	8004642 <HAL_UART_Receive+0xe4>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461c:	d10d      	bne.n	800463a <HAL_UART_Receive+0xdc>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Receive+0xd2>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	227f      	movs	r2, #127	; 0x7f
 800462a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800462e:	e008      	b.n	8004642 <HAL_UART_Receive+0xe4>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	223f      	movs	r2, #63	; 0x3f
 8004634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004638:	e003      	b.n	8004642 <HAL_UART_Receive+0xe4>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004648:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004652:	d108      	bne.n	8004666 <HAL_UART_Receive+0x108>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e003      	b.n	800466e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466a:	2300      	movs	r3, #0
 800466c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004676:	e032      	b.n	80046de <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	2120      	movs	r1, #32
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fb89 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e031      	b.n	80046f6 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10c      	bne.n	80046b2 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	b29a      	uxth	r2, r3
 80046a0:	8a7b      	ldrh	r3, [r7, #18]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	3302      	adds	r3, #2
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e00c      	b.n	80046cc <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	8a7b      	ldrh	r3, [r7, #18]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	4013      	ands	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3301      	adds	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1c6      	bne.n	8004678 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	e000      	b.n	80046f6 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80046f4:	2302      	movs	r3, #2
  }
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4ba7      	ldr	r3, [pc, #668]	; (80049c8 <UART_SetConfig+0x2c8>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	430b      	orrs	r3, r1
 8004736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a95      	ldr	r2, [pc, #596]	; (80049cc <UART_SetConfig+0x2cc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d120      	bne.n	80047be <UART_SetConfig+0xbe>
 800477c:	4b94      	ldr	r3, [pc, #592]	; (80049d0 <UART_SetConfig+0x2d0>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b03      	cmp	r3, #3
 8004788:	d816      	bhi.n	80047b8 <UART_SetConfig+0xb8>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x90>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047a7 	.word	0x080047a7
 800479c:	080047b3 	.word	0x080047b3
 80047a0:	2301      	movs	r3, #1
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e14f      	b.n	8004a46 <UART_SetConfig+0x346>
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e14c      	b.n	8004a46 <UART_SetConfig+0x346>
 80047ac:	2304      	movs	r3, #4
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e149      	b.n	8004a46 <UART_SetConfig+0x346>
 80047b2:	2308      	movs	r3, #8
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e146      	b.n	8004a46 <UART_SetConfig+0x346>
 80047b8:	2310      	movs	r3, #16
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e143      	b.n	8004a46 <UART_SetConfig+0x346>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a84      	ldr	r2, [pc, #528]	; (80049d4 <UART_SetConfig+0x2d4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d132      	bne.n	800482e <UART_SetConfig+0x12e>
 80047c8:	4b81      	ldr	r3, [pc, #516]	; (80049d0 <UART_SetConfig+0x2d0>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d828      	bhi.n	8004828 <UART_SetConfig+0x128>
 80047d6:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <UART_SetConfig+0xdc>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004811 	.word	0x08004811
 80047e0:	08004829 	.word	0x08004829
 80047e4:	08004829 	.word	0x08004829
 80047e8:	08004829 	.word	0x08004829
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	08004829 	.word	0x08004829
 80047f4:	08004829 	.word	0x08004829
 80047f8:	08004829 	.word	0x08004829
 80047fc:	08004817 	.word	0x08004817
 8004800:	08004829 	.word	0x08004829
 8004804:	08004829 	.word	0x08004829
 8004808:	08004829 	.word	0x08004829
 800480c:	08004823 	.word	0x08004823
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e117      	b.n	8004a46 <UART_SetConfig+0x346>
 8004816:	2302      	movs	r3, #2
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e114      	b.n	8004a46 <UART_SetConfig+0x346>
 800481c:	2304      	movs	r3, #4
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	e111      	b.n	8004a46 <UART_SetConfig+0x346>
 8004822:	2308      	movs	r3, #8
 8004824:	77fb      	strb	r3, [r7, #31]
 8004826:	e10e      	b.n	8004a46 <UART_SetConfig+0x346>
 8004828:	2310      	movs	r3, #16
 800482a:	77fb      	strb	r3, [r7, #31]
 800482c:	e10b      	b.n	8004a46 <UART_SetConfig+0x346>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a69      	ldr	r2, [pc, #420]	; (80049d8 <UART_SetConfig+0x2d8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d120      	bne.n	800487a <UART_SetConfig+0x17a>
 8004838:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <UART_SetConfig+0x2d0>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004842:	2b30      	cmp	r3, #48	; 0x30
 8004844:	d013      	beq.n	800486e <UART_SetConfig+0x16e>
 8004846:	2b30      	cmp	r3, #48	; 0x30
 8004848:	d814      	bhi.n	8004874 <UART_SetConfig+0x174>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d009      	beq.n	8004862 <UART_SetConfig+0x162>
 800484e:	2b20      	cmp	r3, #32
 8004850:	d810      	bhi.n	8004874 <UART_SetConfig+0x174>
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x15c>
 8004856:	2b10      	cmp	r3, #16
 8004858:	d006      	beq.n	8004868 <UART_SetConfig+0x168>
 800485a:	e00b      	b.n	8004874 <UART_SetConfig+0x174>
 800485c:	2300      	movs	r3, #0
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0f1      	b.n	8004a46 <UART_SetConfig+0x346>
 8004862:	2302      	movs	r3, #2
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0ee      	b.n	8004a46 <UART_SetConfig+0x346>
 8004868:	2304      	movs	r3, #4
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	e0eb      	b.n	8004a46 <UART_SetConfig+0x346>
 800486e:	2308      	movs	r3, #8
 8004870:	77fb      	strb	r3, [r7, #31]
 8004872:	e0e8      	b.n	8004a46 <UART_SetConfig+0x346>
 8004874:	2310      	movs	r3, #16
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e0e5      	b.n	8004a46 <UART_SetConfig+0x346>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a57      	ldr	r2, [pc, #348]	; (80049dc <UART_SetConfig+0x2dc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d120      	bne.n	80048c6 <UART_SetConfig+0x1c6>
 8004884:	4b52      	ldr	r3, [pc, #328]	; (80049d0 <UART_SetConfig+0x2d0>)
 8004886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800488e:	2bc0      	cmp	r3, #192	; 0xc0
 8004890:	d013      	beq.n	80048ba <UART_SetConfig+0x1ba>
 8004892:	2bc0      	cmp	r3, #192	; 0xc0
 8004894:	d814      	bhi.n	80048c0 <UART_SetConfig+0x1c0>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d009      	beq.n	80048ae <UART_SetConfig+0x1ae>
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d810      	bhi.n	80048c0 <UART_SetConfig+0x1c0>
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <UART_SetConfig+0x1a8>
 80048a2:	2b40      	cmp	r3, #64	; 0x40
 80048a4:	d006      	beq.n	80048b4 <UART_SetConfig+0x1b4>
 80048a6:	e00b      	b.n	80048c0 <UART_SetConfig+0x1c0>
 80048a8:	2300      	movs	r3, #0
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e0cb      	b.n	8004a46 <UART_SetConfig+0x346>
 80048ae:	2302      	movs	r3, #2
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e0c8      	b.n	8004a46 <UART_SetConfig+0x346>
 80048b4:	2304      	movs	r3, #4
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e0c5      	b.n	8004a46 <UART_SetConfig+0x346>
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
 80048be:	e0c2      	b.n	8004a46 <UART_SetConfig+0x346>
 80048c0:	2310      	movs	r3, #16
 80048c2:	77fb      	strb	r3, [r7, #31]
 80048c4:	e0bf      	b.n	8004a46 <UART_SetConfig+0x346>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a45      	ldr	r2, [pc, #276]	; (80049e0 <UART_SetConfig+0x2e0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d125      	bne.n	800491c <UART_SetConfig+0x21c>
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <UART_SetConfig+0x2d0>)
 80048d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048de:	d017      	beq.n	8004910 <UART_SetConfig+0x210>
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048e4:	d817      	bhi.n	8004916 <UART_SetConfig+0x216>
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d00b      	beq.n	8004904 <UART_SetConfig+0x204>
 80048ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f0:	d811      	bhi.n	8004916 <UART_SetConfig+0x216>
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <UART_SetConfig+0x1fe>
 80048f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048fa:	d006      	beq.n	800490a <UART_SetConfig+0x20a>
 80048fc:	e00b      	b.n	8004916 <UART_SetConfig+0x216>
 80048fe:	2300      	movs	r3, #0
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e0a0      	b.n	8004a46 <UART_SetConfig+0x346>
 8004904:	2302      	movs	r3, #2
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e09d      	b.n	8004a46 <UART_SetConfig+0x346>
 800490a:	2304      	movs	r3, #4
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e09a      	b.n	8004a46 <UART_SetConfig+0x346>
 8004910:	2308      	movs	r3, #8
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e097      	b.n	8004a46 <UART_SetConfig+0x346>
 8004916:	2310      	movs	r3, #16
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e094      	b.n	8004a46 <UART_SetConfig+0x346>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a30      	ldr	r2, [pc, #192]	; (80049e4 <UART_SetConfig+0x2e4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d125      	bne.n	8004972 <UART_SetConfig+0x272>
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <UART_SetConfig+0x2d0>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004934:	d017      	beq.n	8004966 <UART_SetConfig+0x266>
 8004936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800493a:	d817      	bhi.n	800496c <UART_SetConfig+0x26c>
 800493c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004940:	d00b      	beq.n	800495a <UART_SetConfig+0x25a>
 8004942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004946:	d811      	bhi.n	800496c <UART_SetConfig+0x26c>
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <UART_SetConfig+0x254>
 800494c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004950:	d006      	beq.n	8004960 <UART_SetConfig+0x260>
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x26c>
 8004954:	2301      	movs	r3, #1
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e075      	b.n	8004a46 <UART_SetConfig+0x346>
 800495a:	2302      	movs	r3, #2
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e072      	b.n	8004a46 <UART_SetConfig+0x346>
 8004960:	2304      	movs	r3, #4
 8004962:	77fb      	strb	r3, [r7, #31]
 8004964:	e06f      	b.n	8004a46 <UART_SetConfig+0x346>
 8004966:	2308      	movs	r3, #8
 8004968:	77fb      	strb	r3, [r7, #31]
 800496a:	e06c      	b.n	8004a46 <UART_SetConfig+0x346>
 800496c:	2310      	movs	r3, #16
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e069      	b.n	8004a46 <UART_SetConfig+0x346>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <UART_SetConfig+0x2e8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d137      	bne.n	80049ec <UART_SetConfig+0x2ec>
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <UART_SetConfig+0x2d0>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800498a:	d017      	beq.n	80049bc <UART_SetConfig+0x2bc>
 800498c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004990:	d817      	bhi.n	80049c2 <UART_SetConfig+0x2c2>
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	d00b      	beq.n	80049b0 <UART_SetConfig+0x2b0>
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d811      	bhi.n	80049c2 <UART_SetConfig+0x2c2>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <UART_SetConfig+0x2aa>
 80049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a6:	d006      	beq.n	80049b6 <UART_SetConfig+0x2b6>
 80049a8:	e00b      	b.n	80049c2 <UART_SetConfig+0x2c2>
 80049aa:	2300      	movs	r3, #0
 80049ac:	77fb      	strb	r3, [r7, #31]
 80049ae:	e04a      	b.n	8004a46 <UART_SetConfig+0x346>
 80049b0:	2302      	movs	r3, #2
 80049b2:	77fb      	strb	r3, [r7, #31]
 80049b4:	e047      	b.n	8004a46 <UART_SetConfig+0x346>
 80049b6:	2304      	movs	r3, #4
 80049b8:	77fb      	strb	r3, [r7, #31]
 80049ba:	e044      	b.n	8004a46 <UART_SetConfig+0x346>
 80049bc:	2308      	movs	r3, #8
 80049be:	77fb      	strb	r3, [r7, #31]
 80049c0:	e041      	b.n	8004a46 <UART_SetConfig+0x346>
 80049c2:	2310      	movs	r3, #16
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e03e      	b.n	8004a46 <UART_SetConfig+0x346>
 80049c8:	efff69f3 	.word	0xefff69f3
 80049cc:	40011000 	.word	0x40011000
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40004400 	.word	0x40004400
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40004c00 	.word	0x40004c00
 80049e0:	40005000 	.word	0x40005000
 80049e4:	40011400 	.word	0x40011400
 80049e8:	40007800 	.word	0x40007800
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a71      	ldr	r2, [pc, #452]	; (8004bb8 <UART_SetConfig+0x4b8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d125      	bne.n	8004a42 <UART_SetConfig+0x342>
 80049f6:	4b71      	ldr	r3, [pc, #452]	; (8004bbc <UART_SetConfig+0x4bc>)
 80049f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a04:	d017      	beq.n	8004a36 <UART_SetConfig+0x336>
 8004a06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004a0a:	d817      	bhi.n	8004a3c <UART_SetConfig+0x33c>
 8004a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a10:	d00b      	beq.n	8004a2a <UART_SetConfig+0x32a>
 8004a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a16:	d811      	bhi.n	8004a3c <UART_SetConfig+0x33c>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <UART_SetConfig+0x324>
 8004a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a20:	d006      	beq.n	8004a30 <UART_SetConfig+0x330>
 8004a22:	e00b      	b.n	8004a3c <UART_SetConfig+0x33c>
 8004a24:	2300      	movs	r3, #0
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e00d      	b.n	8004a46 <UART_SetConfig+0x346>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e00a      	b.n	8004a46 <UART_SetConfig+0x346>
 8004a30:	2304      	movs	r3, #4
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e007      	b.n	8004a46 <UART_SetConfig+0x346>
 8004a36:	2308      	movs	r3, #8
 8004a38:	77fb      	strb	r3, [r7, #31]
 8004a3a:	e004      	b.n	8004a46 <UART_SetConfig+0x346>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	77fb      	strb	r3, [r7, #31]
 8004a40:	e001      	b.n	8004a46 <UART_SetConfig+0x346>
 8004a42:	2310      	movs	r3, #16
 8004a44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4e:	d15b      	bne.n	8004b08 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d827      	bhi.n	8004aa6 <UART_SetConfig+0x3a6>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x35c>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fe fd2a 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e013      	b.n	8004ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fe fd3a 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	61b8      	str	r0, [r7, #24]
        break;
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b4b      	ldr	r3, [pc, #300]	; (8004bc0 <UART_SetConfig+0x4c0>)
 8004a92:	61bb      	str	r3, [r7, #24]
        break;
 8004a94:	e00c      	b.n	8004ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe fc31 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004a9a:	61b8      	str	r0, [r7, #24]
        break;
 8004a9c:	e008      	b.n	8004ab0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	61bb      	str	r3, [r7, #24]
        break;
 8004aa4:	e004      	b.n	8004ab0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	77bb      	strb	r3, [r7, #30]
        break;
 8004aae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d074      	beq.n	8004ba0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	005a      	lsls	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	441a      	add	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	2b0f      	cmp	r3, #15
 8004ad2:	d916      	bls.n	8004b02 <UART_SetConfig+0x402>
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d212      	bcs.n	8004b02 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f023 030f 	bic.w	r3, r3, #15
 8004ae4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	085b      	lsrs	r3, r3, #1
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	89fb      	ldrh	r3, [r7, #14]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	89fa      	ldrh	r2, [r7, #14]
 8004afe:	60da      	str	r2, [r3, #12]
 8004b00:	e04e      	b.n	8004ba0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	77bb      	strb	r3, [r7, #30]
 8004b06:	e04b      	b.n	8004ba0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d827      	bhi.n	8004b5e <UART_SetConfig+0x45e>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x414>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b39 	.word	0x08004b39
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b5f 	.word	0x08004b5f
 8004b24:	08004b4f 	.word	0x08004b4f
 8004b28:	08004b5f 	.word	0x08004b5f
 8004b2c:	08004b5f 	.word	0x08004b5f
 8004b30:	08004b5f 	.word	0x08004b5f
 8004b34:	08004b57 	.word	0x08004b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b38:	f7fe fcce 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	61b8      	str	r0, [r7, #24]
        break;
 8004b3e:	e013      	b.n	8004b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7fe fcde 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 8004b44:	61b8      	str	r0, [r7, #24]
        break;
 8004b46:	e00f      	b.n	8004b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <UART_SetConfig+0x4c0>)
 8004b4a:	61bb      	str	r3, [r7, #24]
        break;
 8004b4c:	e00c      	b.n	8004b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4e:	f7fe fbd5 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 8004b52:	61b8      	str	r0, [r7, #24]
        break;
 8004b54:	e008      	b.n	8004b68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b5a:	61bb      	str	r3, [r7, #24]
        break;
 8004b5c:	e004      	b.n	8004b68 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	77bb      	strb	r3, [r7, #30]
        break;
 8004b66:	bf00      	nop
    }

    if (pclk != 0U)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d018      	beq.n	8004ba0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	085a      	lsrs	r2, r3, #1
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	441a      	add	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	d908      	bls.n	8004b9c <UART_SetConfig+0x49c>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b90:	d204      	bcs.n	8004b9c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	e001      	b.n	8004ba0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004bac:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40007c00 	.word	0x40007c00
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	00f42400 	.word	0x00f42400

08004bc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f003 0310 	and.w	r3, r3, #16
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01a      	beq.n	8004cda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc2:	d10a      	bne.n	8004cda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	605a      	str	r2, [r3, #4]
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d18:	f7fc f962 	bl	8000fe0 <HAL_GetTick>
 8004d1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d10e      	bne.n	8004d4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f82d 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e023      	b.n	8004d92 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d10e      	bne.n	8004d76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f817 	bl	8004d9a <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e00d      	b.n	8004d92 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004daa:	e05e      	b.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d05a      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db4:	f7fc f914 	bl	8000fe0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d302      	bcc.n	8004dca <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d11b      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e043      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02c      	beq.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d124      	bne.n	8004e6a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e38:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0201 	bic.w	r2, r2, #1
 8004e48:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2220      	movs	r2, #32
 8004e54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e00f      	b.n	8004e8a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d091      	beq.n	8004dac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e94:	b084      	sub	sp, #16
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	f107 001c 	add.w	r0, r7, #28
 8004ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d120      	bne.n	8004eee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <USB_CoreInit+0xac>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 fa5a 	bl	800539c <USB_CoreReset>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e010      	b.n	8004f10 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa4e 	bl	800539c <USB_CoreReset>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10b      	bne.n	8004f2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f043 0206 	orr.w	r2, r3, #6
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f043 0220 	orr.w	r2, r3, #32
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f3a:	b004      	add	sp, #16
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	ffbdffbf 	.word	0xffbdffbf

08004f44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 0201 	bic.w	r2, r3, #1
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b082      	sub	sp, #8
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
 8004f90:	e00b      	b.n	8004faa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e001      	b.n	8004faa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e003      	b.n	8004fb2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004faa:	2032      	movs	r0, #50	; 0x32
 8004fac:	f7fc f824 	bl	8000ff8 <HAL_Delay>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e009      	b.n	8004ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3340      	adds	r3, #64	; 0x40
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0e      	cmp	r3, #14
 8004ff4:	d9f2      	bls.n	8004fdc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d11c      	bne.n	8005036 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e005      	b.n	8005042 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005048:	461a      	mov	r2, r3
 800504a:	2300      	movs	r3, #0
 800504c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	4619      	mov	r1, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505c:	461a      	mov	r2, r3
 800505e:	680b      	ldr	r3, [r1, #0]
 8005060:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005064:	2b01      	cmp	r3, #1
 8005066:	d10c      	bne.n	8005082 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800506e:	2100      	movs	r1, #0
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f959 	bl	8005328 <USB_SetDevSpeed>
 8005076:	e018      	b.n	80050aa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005078:	2101      	movs	r1, #1
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f954 	bl	8005328 <USB_SetDevSpeed>
 8005080:	e013      	b.n	80050aa <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	2b03      	cmp	r3, #3
 8005086:	d10c      	bne.n	80050a2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800508e:	2100      	movs	r1, #0
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 f949 	bl	8005328 <USB_SetDevSpeed>
 8005096:	e008      	b.n	80050aa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005098:	2101      	movs	r1, #1
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f944 	bl	8005328 <USB_SetDevSpeed>
 80050a0:	e003      	b.n	80050aa <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050a2:	2103      	movs	r1, #3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f93f 	bl	8005328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050aa:	2110      	movs	r1, #16
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f8f3 	bl	8005298 <USB_FlushTxFifo>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f911 	bl	80052e4 <USB_FlushRxFifo>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d2:	461a      	mov	r2, r3
 80050d4:	2300      	movs	r3, #0
 80050d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	461a      	mov	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	461a      	mov	r2, r3
 80050ec:	2300      	movs	r3, #0
 80050ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	e043      	b.n	800517e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800510c:	d118      	bne.n	8005140 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	e013      	b.n	8005152 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	461a      	mov	r2, r3
 8005138:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e008      	b.n	8005152 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	2300      	movs	r3, #0
 8005150:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	461a      	mov	r2, r3
 8005172:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005176:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3301      	adds	r3, #1
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3b7      	bcc.n	80050f6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005186:	2300      	movs	r3, #0
 8005188:	613b      	str	r3, [r7, #16]
 800518a:	e043      	b.n	8005214 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800519e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a2:	d118      	bne.n	80051d6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e013      	b.n	80051e8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	e008      	b.n	80051e8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	461a      	mov	r2, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	461a      	mov	r2, r3
 8005208:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800520c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	3301      	adds	r3, #1
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d3b7      	bcc.n	800518c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800523c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800523e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005240:	2b00      	cmp	r3, #0
 8005242:	d105      	bne.n	8005250 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f043 0210 	orr.w	r2, r3, #16
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <USB_DevInit+0x2d4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800525c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f043 0208 	orr.w	r2, r3, #8
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800526e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d105      	bne.n	8005280 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <USB_DevInit+0x2d8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800528c:	b004      	add	sp, #16
 800528e:	4770      	bx	lr
 8005290:	803c3800 	.word	0x803c3800
 8005294:	40000004 	.word	0x40000004

08005298 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	019b      	lsls	r3, r3, #6
 80052aa:	f043 0220 	orr.w	r2, r3, #32
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <USB_FlushTxFifo+0x48>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e006      	b.n	80052d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0320 	and.w	r3, r3, #32
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d0f0      	beq.n	80052b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	00030d40 	.word	0x00030d40

080052e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2210      	movs	r2, #16
 80052f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3301      	adds	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4a09      	ldr	r2, [pc, #36]	; (8005324 <USB_FlushRxFifo+0x40>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e006      	b.n	8005316 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d0f0      	beq.n	80052f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	00030d40 	.word	0x00030d40

08005328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005374:	f023 0303 	bic.w	r3, r3, #3
 8005378:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3301      	adds	r3, #1
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4a13      	ldr	r2, [pc, #76]	; (8005400 <USB_CoreReset+0x64>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d901      	bls.n	80053ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e01b      	b.n	80053f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	daf2      	bge.n	80053a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a09      	ldr	r2, [pc, #36]	; (8005400 <USB_CoreReset+0x64>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e006      	b.n	80053f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d0f0      	beq.n	80053d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	00030d40 	.word	0x00030d40

08005404 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800540a:	4ba0      	ldr	r3, [pc, #640]	; (800568c <MX_LWIP_Init+0x288>)
 800540c:	22c0      	movs	r2, #192	; 0xc0
 800540e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005410:	4b9e      	ldr	r3, [pc, #632]	; (800568c <MX_LWIP_Init+0x288>)
 8005412:	22a8      	movs	r2, #168	; 0xa8
 8005414:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005416:	4b9d      	ldr	r3, [pc, #628]	; (800568c <MX_LWIP_Init+0x288>)
 8005418:	2201      	movs	r2, #1
 800541a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 192;
 800541c:	4b9b      	ldr	r3, [pc, #620]	; (800568c <MX_LWIP_Init+0x288>)
 800541e:	22c0      	movs	r2, #192	; 0xc0
 8005420:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 225;
 8005422:	4b9b      	ldr	r3, [pc, #620]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005424:	22e1      	movs	r2, #225	; 0xe1
 8005426:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 225;
 8005428:	4b99      	ldr	r3, [pc, #612]	; (8005690 <MX_LWIP_Init+0x28c>)
 800542a:	22e1      	movs	r2, #225	; 0xe1
 800542c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 225;
 800542e:	4b98      	ldr	r3, [pc, #608]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005430:	22e1      	movs	r2, #225	; 0xe1
 8005432:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005434:	4b96      	ldr	r3, [pc, #600]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005436:	2200      	movs	r2, #0
 8005438:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800543a:	4b96      	ldr	r3, [pc, #600]	; (8005694 <MX_LWIP_Init+0x290>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005440:	4b94      	ldr	r3, [pc, #592]	; (8005694 <MX_LWIP_Init+0x290>)
 8005442:	2200      	movs	r2, #0
 8005444:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005446:	4b93      	ldr	r3, [pc, #588]	; (8005694 <MX_LWIP_Init+0x290>)
 8005448:	2200      	movs	r2, #0
 800544a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800544c:	4b91      	ldr	r3, [pc, #580]	; (8005694 <MX_LWIP_Init+0x290>)
 800544e:	2200      	movs	r2, #0
 8005450:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005452:	2100      	movs	r1, #0
 8005454:	2000      	movs	r0, #0
 8005456:	f004 fde1 	bl	800a01c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800545a:	4b8c      	ldr	r3, [pc, #560]	; (800568c <MX_LWIP_Init+0x288>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	061a      	lsls	r2, r3, #24
 8005460:	4b8a      	ldr	r3, [pc, #552]	; (800568c <MX_LWIP_Init+0x288>)
 8005462:	785b      	ldrb	r3, [r3, #1]
 8005464:	041b      	lsls	r3, r3, #16
 8005466:	431a      	orrs	r2, r3
 8005468:	4b88      	ldr	r3, [pc, #544]	; (800568c <MX_LWIP_Init+0x288>)
 800546a:	789b      	ldrb	r3, [r3, #2]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	4313      	orrs	r3, r2
 8005470:	4a86      	ldr	r2, [pc, #536]	; (800568c <MX_LWIP_Init+0x288>)
 8005472:	78d2      	ldrb	r2, [r2, #3]
 8005474:	4313      	orrs	r3, r2
 8005476:	061a      	lsls	r2, r3, #24
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <MX_LWIP_Init+0x288>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	0619      	lsls	r1, r3, #24
 800547e:	4b83      	ldr	r3, [pc, #524]	; (800568c <MX_LWIP_Init+0x288>)
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	4319      	orrs	r1, r3
 8005486:	4b81      	ldr	r3, [pc, #516]	; (800568c <MX_LWIP_Init+0x288>)
 8005488:	789b      	ldrb	r3, [r3, #2]
 800548a:	021b      	lsls	r3, r3, #8
 800548c:	430b      	orrs	r3, r1
 800548e:	497f      	ldr	r1, [pc, #508]	; (800568c <MX_LWIP_Init+0x288>)
 8005490:	78c9      	ldrb	r1, [r1, #3]
 8005492:	430b      	orrs	r3, r1
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800549a:	431a      	orrs	r2, r3
 800549c:	4b7b      	ldr	r3, [pc, #492]	; (800568c <MX_LWIP_Init+0x288>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	0619      	lsls	r1, r3, #24
 80054a2:	4b7a      	ldr	r3, [pc, #488]	; (800568c <MX_LWIP_Init+0x288>)
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	041b      	lsls	r3, r3, #16
 80054a8:	4319      	orrs	r1, r3
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <MX_LWIP_Init+0x288>)
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	021b      	lsls	r3, r3, #8
 80054b0:	430b      	orrs	r3, r1
 80054b2:	4976      	ldr	r1, [pc, #472]	; (800568c <MX_LWIP_Init+0x288>)
 80054b4:	78c9      	ldrb	r1, [r1, #3]
 80054b6:	430b      	orrs	r3, r1
 80054b8:	0a1b      	lsrs	r3, r3, #8
 80054ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054be:	431a      	orrs	r2, r3
 80054c0:	4b72      	ldr	r3, [pc, #456]	; (800568c <MX_LWIP_Init+0x288>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	0619      	lsls	r1, r3, #24
 80054c6:	4b71      	ldr	r3, [pc, #452]	; (800568c <MX_LWIP_Init+0x288>)
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	041b      	lsls	r3, r3, #16
 80054cc:	4319      	orrs	r1, r3
 80054ce:	4b6f      	ldr	r3, [pc, #444]	; (800568c <MX_LWIP_Init+0x288>)
 80054d0:	789b      	ldrb	r3, [r3, #2]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	430b      	orrs	r3, r1
 80054d6:	496d      	ldr	r1, [pc, #436]	; (800568c <MX_LWIP_Init+0x288>)
 80054d8:	78c9      	ldrb	r1, [r1, #3]
 80054da:	430b      	orrs	r3, r1
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	4313      	orrs	r3, r2
 80054e0:	4a6d      	ldr	r2, [pc, #436]	; (8005698 <MX_LWIP_Init+0x294>)
 80054e2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80054e4:	4b6a      	ldr	r3, [pc, #424]	; (8005690 <MX_LWIP_Init+0x28c>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	061a      	lsls	r2, r3, #24
 80054ea:	4b69      	ldr	r3, [pc, #420]	; (8005690 <MX_LWIP_Init+0x28c>)
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	431a      	orrs	r2, r3
 80054f2:	4b67      	ldr	r3, [pc, #412]	; (8005690 <MX_LWIP_Init+0x28c>)
 80054f4:	789b      	ldrb	r3, [r3, #2]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	4313      	orrs	r3, r2
 80054fa:	4a65      	ldr	r2, [pc, #404]	; (8005690 <MX_LWIP_Init+0x28c>)
 80054fc:	78d2      	ldrb	r2, [r2, #3]
 80054fe:	4313      	orrs	r3, r2
 8005500:	061a      	lsls	r2, r3, #24
 8005502:	4b63      	ldr	r3, [pc, #396]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	0619      	lsls	r1, r3, #24
 8005508:	4b61      	ldr	r3, [pc, #388]	; (8005690 <MX_LWIP_Init+0x28c>)
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	041b      	lsls	r3, r3, #16
 800550e:	4319      	orrs	r1, r3
 8005510:	4b5f      	ldr	r3, [pc, #380]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005512:	789b      	ldrb	r3, [r3, #2]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	430b      	orrs	r3, r1
 8005518:	495d      	ldr	r1, [pc, #372]	; (8005690 <MX_LWIP_Init+0x28c>)
 800551a:	78c9      	ldrb	r1, [r1, #3]
 800551c:	430b      	orrs	r3, r1
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005524:	431a      	orrs	r2, r3
 8005526:	4b5a      	ldr	r3, [pc, #360]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	0619      	lsls	r1, r3, #24
 800552c:	4b58      	ldr	r3, [pc, #352]	; (8005690 <MX_LWIP_Init+0x28c>)
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	4319      	orrs	r1, r3
 8005534:	4b56      	ldr	r3, [pc, #344]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005536:	789b      	ldrb	r3, [r3, #2]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	430b      	orrs	r3, r1
 800553c:	4954      	ldr	r1, [pc, #336]	; (8005690 <MX_LWIP_Init+0x28c>)
 800553e:	78c9      	ldrb	r1, [r1, #3]
 8005540:	430b      	orrs	r3, r1
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005548:	431a      	orrs	r2, r3
 800554a:	4b51      	ldr	r3, [pc, #324]	; (8005690 <MX_LWIP_Init+0x28c>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	0619      	lsls	r1, r3, #24
 8005550:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005552:	785b      	ldrb	r3, [r3, #1]
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	4319      	orrs	r1, r3
 8005558:	4b4d      	ldr	r3, [pc, #308]	; (8005690 <MX_LWIP_Init+0x28c>)
 800555a:	789b      	ldrb	r3, [r3, #2]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	430b      	orrs	r3, r1
 8005560:	494b      	ldr	r1, [pc, #300]	; (8005690 <MX_LWIP_Init+0x28c>)
 8005562:	78c9      	ldrb	r1, [r1, #3]
 8005564:	430b      	orrs	r3, r1
 8005566:	0e1b      	lsrs	r3, r3, #24
 8005568:	4313      	orrs	r3, r2
 800556a:	4a4c      	ldr	r2, [pc, #304]	; (800569c <MX_LWIP_Init+0x298>)
 800556c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800556e:	4b49      	ldr	r3, [pc, #292]	; (8005694 <MX_LWIP_Init+0x290>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	061a      	lsls	r2, r3, #24
 8005574:	4b47      	ldr	r3, [pc, #284]	; (8005694 <MX_LWIP_Init+0x290>)
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	431a      	orrs	r2, r3
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <MX_LWIP_Init+0x290>)
 800557e:	789b      	ldrb	r3, [r3, #2]
 8005580:	021b      	lsls	r3, r3, #8
 8005582:	4313      	orrs	r3, r2
 8005584:	4a43      	ldr	r2, [pc, #268]	; (8005694 <MX_LWIP_Init+0x290>)
 8005586:	78d2      	ldrb	r2, [r2, #3]
 8005588:	4313      	orrs	r3, r2
 800558a:	061a      	lsls	r2, r3, #24
 800558c:	4b41      	ldr	r3, [pc, #260]	; (8005694 <MX_LWIP_Init+0x290>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	0619      	lsls	r1, r3, #24
 8005592:	4b40      	ldr	r3, [pc, #256]	; (8005694 <MX_LWIP_Init+0x290>)
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	4319      	orrs	r1, r3
 800559a:	4b3e      	ldr	r3, [pc, #248]	; (8005694 <MX_LWIP_Init+0x290>)
 800559c:	789b      	ldrb	r3, [r3, #2]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	430b      	orrs	r3, r1
 80055a2:	493c      	ldr	r1, [pc, #240]	; (8005694 <MX_LWIP_Init+0x290>)
 80055a4:	78c9      	ldrb	r1, [r1, #3]
 80055a6:	430b      	orrs	r3, r1
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ae:	431a      	orrs	r2, r3
 80055b0:	4b38      	ldr	r3, [pc, #224]	; (8005694 <MX_LWIP_Init+0x290>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	0619      	lsls	r1, r3, #24
 80055b6:	4b37      	ldr	r3, [pc, #220]	; (8005694 <MX_LWIP_Init+0x290>)
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	4319      	orrs	r1, r3
 80055be:	4b35      	ldr	r3, [pc, #212]	; (8005694 <MX_LWIP_Init+0x290>)
 80055c0:	789b      	ldrb	r3, [r3, #2]
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	430b      	orrs	r3, r1
 80055c6:	4933      	ldr	r1, [pc, #204]	; (8005694 <MX_LWIP_Init+0x290>)
 80055c8:	78c9      	ldrb	r1, [r1, #3]
 80055ca:	430b      	orrs	r3, r1
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055d2:	431a      	orrs	r2, r3
 80055d4:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <MX_LWIP_Init+0x290>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	0619      	lsls	r1, r3, #24
 80055da:	4b2e      	ldr	r3, [pc, #184]	; (8005694 <MX_LWIP_Init+0x290>)
 80055dc:	785b      	ldrb	r3, [r3, #1]
 80055de:	041b      	lsls	r3, r3, #16
 80055e0:	4319      	orrs	r1, r3
 80055e2:	4b2c      	ldr	r3, [pc, #176]	; (8005694 <MX_LWIP_Init+0x290>)
 80055e4:	789b      	ldrb	r3, [r3, #2]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	430b      	orrs	r3, r1
 80055ea:	492a      	ldr	r1, [pc, #168]	; (8005694 <MX_LWIP_Init+0x290>)
 80055ec:	78c9      	ldrb	r1, [r1, #3]
 80055ee:	430b      	orrs	r3, r1
 80055f0:	0e1b      	lsrs	r3, r3, #24
 80055f2:	4313      	orrs	r3, r2
 80055f4:	4a2a      	ldr	r2, [pc, #168]	; (80056a0 <MX_LWIP_Init+0x29c>)
 80055f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80055f8:	4b2a      	ldr	r3, [pc, #168]	; (80056a4 <MX_LWIP_Init+0x2a0>)
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <MX_LWIP_Init+0x2a4>)
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	4b26      	ldr	r3, [pc, #152]	; (80056a0 <MX_LWIP_Init+0x29c>)
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <MX_LWIP_Init+0x298>)
 8005608:	4923      	ldr	r1, [pc, #140]	; (8005698 <MX_LWIP_Init+0x294>)
 800560a:	4828      	ldr	r0, [pc, #160]	; (80056ac <MX_LWIP_Init+0x2a8>)
 800560c:	f005 fa8a 	bl	800ab24 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005610:	4826      	ldr	r0, [pc, #152]	; (80056ac <MX_LWIP_Init+0x2a8>)
 8005612:	f005 fc39 	bl	800ae88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005616:	4b25      	ldr	r3, [pc, #148]	; (80056ac <MX_LWIP_Init+0x2a8>)
 8005618:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800561c:	089b      	lsrs	r3, r3, #2
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005628:	4820      	ldr	r0, [pc, #128]	; (80056ac <MX_LWIP_Init+0x2a8>)
 800562a:	f005 fc3d 	bl	800aea8 <netif_set_up>
 800562e:	e002      	b.n	8005636 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005630:	481e      	ldr	r0, [pc, #120]	; (80056ac <MX_LWIP_Init+0x2a8>)
 8005632:	f005 fca5 	bl	800af80 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005636:	491e      	ldr	r1, [pc, #120]	; (80056b0 <MX_LWIP_Init+0x2ac>)
 8005638:	481c      	ldr	r0, [pc, #112]	; (80056ac <MX_LWIP_Init+0x2a8>)
 800563a:	f005 fd37 	bl	800b0ac <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800563e:	2200      	movs	r2, #0
 8005640:	2101      	movs	r1, #1
 8005642:	2001      	movs	r0, #1
 8005644:	f000 ff14 	bl	8006470 <osSemaphoreNew>
 8005648:	4603      	mov	r3, r0
 800564a:	4a1a      	ldr	r2, [pc, #104]	; (80056b4 <MX_LWIP_Init+0x2b0>)
 800564c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800564e:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <MX_LWIP_Init+0x2b4>)
 8005650:	4a16      	ldr	r2, [pc, #88]	; (80056ac <MX_LWIP_Init+0x2a8>)
 8005652:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005654:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <MX_LWIP_Init+0x2b0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <MX_LWIP_Init+0x2b4>)
 800565a:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	2100      	movs	r1, #0
 8005660:	4816      	ldr	r0, [pc, #88]	; (80056bc <MX_LWIP_Init+0x2b8>)
 8005662:	f00e fc7b 	bl	8013f5c <memset>
  attributes.name = "LinkThr";
 8005666:	4b15      	ldr	r3, [pc, #84]	; (80056bc <MX_LWIP_Init+0x2b8>)
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <MX_LWIP_Init+0x2bc>)
 800566a:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800566c:	4b13      	ldr	r3, [pc, #76]	; (80056bc <MX_LWIP_Init+0x2b8>)
 800566e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005672:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005674:	4b11      	ldr	r3, [pc, #68]	; (80056bc <MX_LWIP_Init+0x2b8>)
 8005676:	2210      	movs	r2, #16
 8005678:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800567a:	4a10      	ldr	r2, [pc, #64]	; (80056bc <MX_LWIP_Init+0x2b8>)
 800567c:	490e      	ldr	r1, [pc, #56]	; (80056b8 <MX_LWIP_Init+0x2b4>)
 800567e:	4811      	ldr	r0, [pc, #68]	; (80056c4 <MX_LWIP_Init+0x2c0>)
 8005680:	f000 fcda 	bl	8006038 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	200050f8 	.word	0x200050f8
 8005690:	200050f4 	.word	0x200050f4
 8005694:	20005094 	.word	0x20005094
 8005698:	200050f0 	.word	0x200050f0
 800569c:	200050fc 	.word	0x200050fc
 80056a0:	20005100 	.word	0x20005100
 80056a4:	08009f59 	.word	0x08009f59
 80056a8:	08005d15 	.word	0x08005d15
 80056ac:	200050bc 	.word	0x200050bc
 80056b0:	08005df9 	.word	0x08005df9
 80056b4:	200000a0 	.word	0x200000a0
 80056b8:	2000508c 	.word	0x2000508c
 80056bc:	20005098 	.word	0x20005098
 80056c0:	0801518c 	.word	0x0801518c
 80056c4:	08005d81 	.word	0x08005d81

080056c8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d4:	2200      	movs	r2, #0
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	609a      	str	r2, [r3, #8]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a52      	ldr	r2, [pc, #328]	; (8005830 <HAL_ETH_MspInit+0x168>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	f040 809e 	bne.w	8005828 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80056ec:	4b51      	ldr	r3, [pc, #324]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	4a50      	ldr	r2, [pc, #320]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 80056f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056f6:	6313      	str	r3, [r2, #48]	; 0x30
 80056f8:	4b4e      	ldr	r3, [pc, #312]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	4b4b      	ldr	r3, [pc, #300]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	4a4a      	ldr	r2, [pc, #296]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800570a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800570e:	6313      	str	r3, [r2, #48]	; 0x30
 8005710:	4b48      	ldr	r3, [pc, #288]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005718:	61fb      	str	r3, [r7, #28]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4b45      	ldr	r3, [pc, #276]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4a44      	ldr	r2, [pc, #272]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005726:	6313      	str	r3, [r2, #48]	; 0x30
 8005728:	4b42      	ldr	r3, [pc, #264]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005730:	61bb      	str	r3, [r7, #24]
 8005732:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005734:	4b3f      	ldr	r3, [pc, #252]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	4a3e      	ldr	r2, [pc, #248]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	6313      	str	r3, [r2, #48]	; 0x30
 8005740:	4b3c      	ldr	r3, [pc, #240]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800574c:	4b39      	ldr	r3, [pc, #228]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	4a38      	ldr	r2, [pc, #224]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	6313      	str	r3, [r2, #48]	; 0x30
 8005758:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	4a32      	ldr	r2, [pc, #200]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800576a:	f043 0302 	orr.w	r3, r3, #2
 800576e:	6313      	str	r3, [r2, #48]	; 0x30
 8005770:	4b30      	ldr	r3, [pc, #192]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 8005782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005786:	6313      	str	r3, [r2, #48]	; 0x30
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <HAL_ETH_MspInit+0x16c>)
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	60bb      	str	r3, [r7, #8]
 8005792:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005794:	2332      	movs	r3, #50	; 0x32
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005798:	2302      	movs	r3, #2
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579c:	2300      	movs	r3, #0
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a0:	2303      	movs	r3, #3
 80057a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057a4:	230b      	movs	r3, #11
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ac:	4619      	mov	r1, r3
 80057ae:	4822      	ldr	r0, [pc, #136]	; (8005838 <HAL_ETH_MspInit+0x170>)
 80057b0:	f7fc feac 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80057b4:	2386      	movs	r3, #134	; 0x86
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b8:	2302      	movs	r3, #2
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c0:	2303      	movs	r3, #3
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057c4:	230b      	movs	r3, #11
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057cc:	4619      	mov	r1, r3
 80057ce:	481b      	ldr	r0, [pc, #108]	; (800583c <HAL_ETH_MspInit+0x174>)
 80057d0:	f7fc fe9c 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80057d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057da:	2302      	movs	r3, #2
 80057dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e2:	2303      	movs	r3, #3
 80057e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057e6:	230b      	movs	r3, #11
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80057ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ee:	4619      	mov	r1, r3
 80057f0:	4813      	ldr	r0, [pc, #76]	; (8005840 <HAL_ETH_MspInit+0x178>)
 80057f2:	f7fc fe8b 	bl	800250c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80057f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fc:	2302      	movs	r3, #2
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005800:	2300      	movs	r3, #0
 8005802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005804:	2303      	movs	r3, #3
 8005806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005808:	230b      	movs	r3, #11
 800580a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800580c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005810:	4619      	mov	r1, r3
 8005812:	480c      	ldr	r0, [pc, #48]	; (8005844 <HAL_ETH_MspInit+0x17c>)
 8005814:	f7fc fe7a 	bl	800250c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005818:	2200      	movs	r2, #0
 800581a:	2105      	movs	r1, #5
 800581c:	203d      	movs	r0, #61	; 0x3d
 800581e:	f7fb fcc7 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005822:	203d      	movs	r0, #61	; 0x3d
 8005824:	f7fb fce0 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005828:	bf00      	nop
 800582a:	3738      	adds	r7, #56	; 0x38
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40028000 	.word	0x40028000
 8005834:	40023800 	.word	0x40023800
 8005838:	40020800 	.word	0x40020800
 800583c:	40020000 	.word	0x40020000
 8005840:	40020400 	.word	0x40020400
 8005844:	40021800 	.word	0x40021800

08005848 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005850:	4b04      	ldr	r3, [pc, #16]	; (8005864 <HAL_ETH_RxCpltCallback+0x1c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 ff0d 	bl	8006674 <osSemaphoreRelease>
}
 800585a:	bf00      	nop
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	200000a4 	.word	0x200000a4

08005868 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	; 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005874:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <low_level_init+0x184>)
 8005876:	4a5e      	ldr	r2, [pc, #376]	; (80059f0 <low_level_init+0x188>)
 8005878:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800587a:	4b5c      	ldr	r3, [pc, #368]	; (80059ec <low_level_init+0x184>)
 800587c:	2201      	movs	r2, #1
 800587e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005880:	4b5a      	ldr	r3, [pc, #360]	; (80059ec <low_level_init+0x184>)
 8005882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005886:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005888:	4b58      	ldr	r3, [pc, #352]	; (80059ec <low_level_init+0x184>)
 800588a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800588e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005890:	4b56      	ldr	r3, [pc, #344]	; (80059ec <low_level_init+0x184>)
 8005892:	2200      	movs	r2, #0
 8005894:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005896:	2300      	movs	r3, #0
 8005898:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800589e:	23e1      	movs	r3, #225	; 0xe1
 80058a0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80058a6:	2300      	movs	r3, #0
 80058a8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80058aa:	2300      	movs	r3, #0
 80058ac:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80058ae:	4a4f      	ldr	r2, [pc, #316]	; (80059ec <low_level_init+0x184>)
 80058b0:	f107 030c 	add.w	r3, r7, #12
 80058b4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80058b6:	4b4d      	ldr	r3, [pc, #308]	; (80059ec <low_level_init+0x184>)
 80058b8:	2201      	movs	r2, #1
 80058ba:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80058bc:	4b4b      	ldr	r3, [pc, #300]	; (80059ec <low_level_init+0x184>)
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80058c2:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <low_level_init+0x184>)
 80058c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058c8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80058ca:	4848      	ldr	r0, [pc, #288]	; (80059ec <low_level_init+0x184>)
 80058cc:	f7fb fc9a 	bl	8001204 <HAL_ETH_Init>
 80058d0:	4603      	mov	r3, r0
 80058d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80058d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d108      	bne.n	80058f0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80058f0:	2304      	movs	r3, #4
 80058f2:	4a40      	ldr	r2, [pc, #256]	; (80059f4 <low_level_init+0x18c>)
 80058f4:	4940      	ldr	r1, [pc, #256]	; (80059f8 <low_level_init+0x190>)
 80058f6:	483d      	ldr	r0, [pc, #244]	; (80059ec <low_level_init+0x184>)
 80058f8:	f7fb fe1e 	bl	8001538 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80058fc:	2304      	movs	r3, #4
 80058fe:	4a3f      	ldr	r2, [pc, #252]	; (80059fc <low_level_init+0x194>)
 8005900:	493f      	ldr	r1, [pc, #252]	; (8005a00 <low_level_init+0x198>)
 8005902:	483a      	ldr	r0, [pc, #232]	; (80059ec <low_level_init+0x184>)
 8005904:	f7fb fe81 	bl	800160a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2206      	movs	r2, #6
 800590c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005910:	4b36      	ldr	r3, [pc, #216]	; (80059ec <low_level_init+0x184>)
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	781a      	ldrb	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800591c:	4b33      	ldr	r3, [pc, #204]	; (80059ec <low_level_init+0x184>)
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	785a      	ldrb	r2, [r3, #1]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005928:	4b30      	ldr	r3, [pc, #192]	; (80059ec <low_level_init+0x184>)
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	789a      	ldrb	r2, [r3, #2]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005934:	4b2d      	ldr	r3, [pc, #180]	; (80059ec <low_level_init+0x184>)
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	78da      	ldrb	r2, [r3, #3]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005940:	4b2a      	ldr	r3, [pc, #168]	; (80059ec <low_level_init+0x184>)
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	791a      	ldrb	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <low_level_init+0x184>)
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	795a      	ldrb	r2, [r3, #5]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800595e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005966:	f043 030a 	orr.w	r3, r3, #10
 800596a:	b2da      	uxtb	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005972:	2200      	movs	r2, #0
 8005974:	2101      	movs	r1, #1
 8005976:	2001      	movs	r0, #1
 8005978:	f000 fd7a 	bl	8006470 <osSemaphoreNew>
 800597c:	4603      	mov	r3, r0
 800597e:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <low_level_init+0x19c>)
 8005980:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005982:	f107 0314 	add.w	r3, r7, #20
 8005986:	2224      	movs	r2, #36	; 0x24
 8005988:	2100      	movs	r1, #0
 800598a:	4618      	mov	r0, r3
 800598c:	f00e fae6 	bl	8013f5c <memset>
  attributes.name = "EthIf";
 8005990:	4b1d      	ldr	r3, [pc, #116]	; (8005a08 <low_level_init+0x1a0>)
 8005992:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005994:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800599a:	2330      	movs	r3, #48	; 0x30
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800599e:	f107 0314 	add.w	r3, r7, #20
 80059a2:	461a      	mov	r2, r3
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4819      	ldr	r0, [pc, #100]	; (8005a0c <low_level_init+0x1a4>)
 80059a8:	f000 fb46 	bl	8006038 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80059ac:	480f      	ldr	r0, [pc, #60]	; (80059ec <low_level_init+0x184>)
 80059ae:	f7fc f954 	bl	8001c5a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80059b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059b6:	461a      	mov	r2, r3
 80059b8:	211d      	movs	r1, #29
 80059ba:	480c      	ldr	r0, [pc, #48]	; (80059ec <low_level_init+0x184>)
 80059bc:	f7fc f87f 	bl	8001abe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	f043 030b 	orr.w	r3, r3, #11
 80059c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	461a      	mov	r2, r3
 80059cc:	211d      	movs	r1, #29
 80059ce:	4807      	ldr	r0, [pc, #28]	; (80059ec <low_level_init+0x184>)
 80059d0:	f7fc f8dd 	bl	8001b8e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80059d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059d8:	461a      	mov	r2, r3
 80059da:	211d      	movs	r1, #29
 80059dc:	4803      	ldr	r0, [pc, #12]	; (80059ec <low_level_init+0x184>)
 80059de:	f7fc f86e 	bl	8001abe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80059e2:	bf00      	nop
 80059e4:	3740      	adds	r7, #64	; 0x40
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200069d4 	.word	0x200069d4
 80059f0:	40028000 	.word	0x40028000
 80059f4:	20006a1c 	.word	0x20006a1c
 80059f8:	20005104 	.word	0x20005104
 80059fc:	20005184 	.word	0x20005184
 8005a00:	20006954 	.word	0x20006954
 8005a04:	200000a4 	.word	0x200000a4
 8005a08:	08015194 	.word	0x08015194
 8005a0c:	08005cb5 	.word	0x08005cb5

08005a10 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b08a      	sub	sp, #40	; 0x28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005a1a:	4b4b      	ldr	r3, [pc, #300]	; (8005b48 <low_level_output+0x138>)
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005a32:	4b45      	ldr	r3, [pc, #276]	; (8005b48 <low_level_output+0x138>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a36:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	623b      	str	r3, [r7, #32]
 8005a40:	e05a      	b.n	8005af8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	da03      	bge.n	8005a52 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005a4a:	23f8      	movs	r3, #248	; 0xf8
 8005a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005a50:	e05c      	b.n	8005b0c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	895b      	ldrh	r3, [r3, #10]
 8005a56:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a5c:	e02f      	b.n	8005abe <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	18d0      	adds	r0, r2, r3
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	18d1      	adds	r1, r2, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	f00e fa63 	bl	8013f40 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da03      	bge.n	8005a90 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005a88:	23f8      	movs	r3, #248	; 0xf8
 8005a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005a8e:	e03d      	b.n	8005b0c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005aa0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005aac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005ab8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d8c8      	bhi.n	8005a5e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	18d0      	adds	r0, r2, r3
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4619      	mov	r1, r3
 8005ade:	f00e fa2f 	bl	8013f40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	623b      	str	r3, [r7, #32]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1a1      	bne.n	8005a42 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	4811      	ldr	r0, [pc, #68]	; (8005b48 <low_level_output+0x138>)
 8005b02:	f7fb fdef 	bl	80016e4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005b0c:	4b0e      	ldr	r3, [pc, #56]	; (8005b48 <low_level_output+0x138>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b14:	4413      	add	r3, r2
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00d      	beq.n	8005b3c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005b20:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <low_level_output+0x138>)
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f241 0314 	movw	r3, #4116	; 0x1014
 8005b28:	4413      	add	r3, r2
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <low_level_output+0x138>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b36:	4413      	add	r3, r2
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005b3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	; 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	200069d4 	.word	0x200069d4

08005b4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	; 0x30
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005b70:	484f      	ldr	r0, [pc, #316]	; (8005cb0 <low_level_input+0x164>)
 8005b72:	f7fb fea1 	bl	80018b8 <HAL_ETH_GetReceivedFrame_IT>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <low_level_input+0x34>

    return NULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e092      	b.n	8005ca6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005b80:	4b4b      	ldr	r3, [pc, #300]	; (8005cb0 <low_level_input+0x164>)
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005b86:	4b4a      	ldr	r3, [pc, #296]	; (8005cb0 <low_level_input+0x164>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005b8c:	89fb      	ldrh	r3, [r7, #14]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005b92:	89fb      	ldrh	r3, [r7, #14]
 8005b94:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005b98:	4619      	mov	r1, r3
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f005 fb50 	bl	800b240 <pbuf_alloc>
 8005ba0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d04b      	beq.n	8005c40 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005ba8:	4b41      	ldr	r3, [pc, #260]	; (8005cb0 <low_level_input+0x164>)
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb6:	e040      	b.n	8005c3a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bba:	895b      	ldrh	r3, [r3, #10]
 8005bbc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005bc2:	e021      	b.n	8005c08 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	18d0      	adds	r0, r2, r3
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	18d1      	adds	r1, r2, r3
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f00e f9b0 	bl	8013f40 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005bf6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005c02:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005c04:	2300      	movs	r3, #0
 8005c06:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d8d6      	bhi.n	8005bc4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	18d0      	adds	r0, r2, r3
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4619      	mov	r1, r3
 8005c28:	f00e f98a 	bl	8013f40 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005c2c:	69fa      	ldr	r2, [r7, #28]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4413      	add	r3, r2
 8005c32:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1bb      	bne.n	8005bb8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <low_level_input+0x164>)
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	e00b      	b.n	8005c64 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3301      	adds	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <low_level_input+0x164>)
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3ee      	bcc.n	8005c4c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <low_level_input+0x164>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <low_level_input+0x164>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c7c:	4413      	add	r3, r2
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00d      	beq.n	8005ca4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <low_level_input+0x164>)
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c90:	4413      	add	r3, r2
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <low_level_input+0x164>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	f241 0308 	movw	r3, #4104	; 0x1008
 8005c9e:	4413      	add	r3, r2
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3730      	adds	r7, #48	; 0x30
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	200069d4 	.word	0x200069d4

08005cb4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <ethernetif_input+0x58>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 fc6d 	bl	80065a8 <osSemaphoreAcquire>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1f5      	bne.n	8005cc0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005cd4:	480e      	ldr	r0, [pc, #56]	; (8005d10 <ethernetif_input+0x5c>)
 8005cd6:	f00e f8a7 	bl	8013e28 <sys_mutex_lock>
        p = low_level_input( netif );
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff36 	bl	8005b4c <low_level_input>
 8005ce0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	68b8      	ldr	r0, [r7, #8]
 8005cf0:	4798      	blx	r3
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005cf8:	68b8      	ldr	r0, [r7, #8]
 8005cfa:	f005 fd85 	bl	800b808 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005cfe:	4804      	ldr	r0, [pc, #16]	; (8005d10 <ethernetif_input+0x5c>)
 8005d00:	f00e f8a1 	bl	8013e46 <sys_mutex_unlock>
      } while(p!=NULL);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e4      	bne.n	8005cd4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005d0a:	e7d9      	b.n	8005cc0 <ethernetif_input+0xc>
 8005d0c:	200000a4 	.word	0x200000a4
 8005d10:	2000822c 	.word	0x2000822c

08005d14 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <ethernetif_init+0x1c>
 8005d22:	4b0e      	ldr	r3, [pc, #56]	; (8005d5c <ethernetif_init+0x48>)
 8005d24:	f240 223a 	movw	r2, #570	; 0x23a
 8005d28:	490d      	ldr	r1, [pc, #52]	; (8005d60 <ethernetif_init+0x4c>)
 8005d2a:	480e      	ldr	r0, [pc, #56]	; (8005d64 <ethernetif_init+0x50>)
 8005d2c:	f00e f91e 	bl	8013f6c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2273      	movs	r2, #115	; 0x73
 8005d34:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2274      	movs	r2, #116	; 0x74
 8005d3c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <ethernetif_init+0x54>)
 8005d44:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a08      	ldr	r2, [pc, #32]	; (8005d6c <ethernetif_init+0x58>)
 8005d4a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff fd8b 	bl	8005868 <low_level_init>

  return ERR_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	0801519c 	.word	0x0801519c
 8005d60:	080151b8 	.word	0x080151b8
 8005d64:	080151c8 	.word	0x080151c8
 8005d68:	08011eed 	.word	0x08011eed
 8005d6c:	08005a11 	.word	0x08005a11

08005d70 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d74:	f7fb f934 	bl	8000fe0 <HAL_GetTick>
 8005d78:	4603      	mov	r3, r0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d90:	f107 0308 	add.w	r3, r7, #8
 8005d94:	461a      	mov	r2, r3
 8005d96:	2101      	movs	r1, #1
 8005d98:	4816      	ldr	r0, [pc, #88]	; (8005df4 <ethernetif_set_link+0x74>)
 8005d9a:	f7fb fe90 	bl	8001abe <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d108      	bne.n	8005dc8 <ethernetif_set_link+0x48>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f005 f90f 	bl	800afe4 <netif_set_link_up>
 8005dc6:	e011      	b.n	8005dec <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <ethernetif_set_link+0x6c>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f005 f930 	bl	800b04c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005dec:	20c8      	movs	r0, #200	; 0xc8
 8005dee:	f000 f9c9 	bl	8006184 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005df2:	e7cd      	b.n	8005d90 <ethernetif_set_link+0x10>
 8005df4:	200069d4 	.word	0x200069d4

08005df8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d05d      	beq.n	8005ed6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005e1a:	4b34      	ldr	r3, [pc, #208]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d03f      	beq.n	8005ea2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005e26:	2100      	movs	r1, #0
 8005e28:	4830      	ldr	r0, [pc, #192]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e2a:	f7fb feb0 	bl	8001b8e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005e2e:	f7fb f8d7 	bl	8000fe0 <HAL_GetTick>
 8005e32:	4603      	mov	r3, r0
 8005e34:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	482b      	ldr	r0, [pc, #172]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e40:	f7fb fe3d 	bl	8001abe <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005e44:	f7fb f8cc 	bl	8000fe0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e52:	d828      	bhi.n	8005ea6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0eb      	beq.n	8005e36 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005e5e:	f107 0308 	add.w	r3, r7, #8
 8005e62:	461a      	mov	r2, r3
 8005e64:	2110      	movs	r1, #16
 8005e66:	4821      	ldr	r0, [pc, #132]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e68:	f7fb fe29 	bl	8001abe <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e76:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	e002      	b.n	8005e86 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005e80:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e82:	2200      	movs	r2, #0
 8005e84:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005e90:	4b16      	ldr	r3, [pc, #88]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	609a      	str	r2, [r3, #8]
 8005e96:	e016      	b.n	8005ec6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <ethernetif_update_config+0xf4>)
 8005e9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e9e:	609a      	str	r2, [r3, #8]
 8005ea0:	e011      	b.n	8005ec6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005ea2:	bf00      	nop
 8005ea4:	e000      	b.n	8005ea8 <ethernetif_update_config+0xb0>
          goto error;
 8005ea6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005ea8:	4b10      	ldr	r3, [pc, #64]	; (8005eec <ethernetif_update_config+0xf4>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	08db      	lsrs	r3, r3, #3
 8005eae:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005eb0:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <ethernetif_update_config+0xf4>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	480a      	ldr	r0, [pc, #40]	; (8005eec <ethernetif_update_config+0xf4>)
 8005ec2:	f7fb fe64 	bl	8001b8e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	4808      	ldr	r0, [pc, #32]	; (8005eec <ethernetif_update_config+0xf4>)
 8005eca:	f7fb ff25 	bl	8001d18 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005ece:	4807      	ldr	r0, [pc, #28]	; (8005eec <ethernetif_update_config+0xf4>)
 8005ed0:	f7fb fec3 	bl	8001c5a <HAL_ETH_Start>
 8005ed4:	e002      	b.n	8005edc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <ethernetif_update_config+0xf4>)
 8005ed8:	f7fb feee 	bl	8001cb8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 f807 	bl	8005ef0 <ethernetif_notify_conn_changed>
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200069d4 	.word	0x200069d4

08005ef0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005f08:	bf00      	nop
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1a:	f3ef 8305 	mrs	r3, IPSR
 8005f1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10f      	bne.n	8005f46 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f26:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2a:	607b      	str	r3, [r7, #4]
  return(result);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d105      	bne.n	8005f3e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f32:	f3ef 8311 	mrs	r3, BASEPRI
 8005f36:	603b      	str	r3, [r7, #0]
  return(result);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <osKernelInitialize+0x3a>
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <osKernelInitialize+0x64>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d103      	bne.n	8005f4e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005f46:	f06f 0305 	mvn.w	r3, #5
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e00c      	b.n	8005f68 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <osKernelInitialize+0x64>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d105      	bne.n	8005f62 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <osKernelInitialize+0x64>)
 8005f58:	2201      	movs	r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	e002      	b.n	8005f68 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005f62:	f04f 33ff 	mov.w	r3, #4294967295
 8005f66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005f68:	68fb      	ldr	r3, [r7, #12]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	200000a8 	.word	0x200000a8

08005f7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f82:	f3ef 8305 	mrs	r3, IPSR
 8005f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f92:	607b      	str	r3, [r7, #4]
  return(result);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d105      	bne.n	8005fa6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <osKernelStart+0x3a>
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <osKernelStart+0x68>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d103      	bne.n	8005fb6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005fae:	f06f 0305 	mvn.w	r3, #5
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e010      	b.n	8005fd8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005fb6:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <osKernelStart+0x68>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d109      	bne.n	8005fd2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005fbe:	f7ff ffa1 	bl	8005f04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <osKernelStart+0x68>)
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005fc8:	f002 f8f0 	bl	80081ac <vTaskStartScheduler>
      stat = osOK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	200000a8 	.word	0x200000a8

08005fe8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffe:	607b      	str	r3, [r7, #4]
  return(result);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d105      	bne.n	8006012 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006006:	f3ef 8311 	mrs	r3, BASEPRI
 800600a:	603b      	str	r3, [r7, #0]
  return(result);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d007      	beq.n	8006022 <osKernelGetTickCount+0x3a>
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <osKernelGetTickCount+0x4c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d103      	bne.n	8006022 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800601a:	f002 f9ef 	bl	80083fc <xTaskGetTickCountFromISR>
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	e002      	b.n	8006028 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006022:	f002 f9db 	bl	80083dc <xTaskGetTickCount>
 8006026:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006028:	68fb      	ldr	r3, [r7, #12]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200000a8 	.word	0x200000a8

08006038 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b090      	sub	sp, #64	; 0x40
 800603c:	af04      	add	r7, sp, #16
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006044:	2300      	movs	r3, #0
 8006046:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006048:	f3ef 8305 	mrs	r3, IPSR
 800604c:	61fb      	str	r3, [r7, #28]
  return(result);
 800604e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 808f 	bne.w	8006174 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8310 	mrs	r3, PRIMASK
 800605a:	61bb      	str	r3, [r7, #24]
  return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006062:	f3ef 8311 	mrs	r3, BASEPRI
 8006066:	617b      	str	r3, [r7, #20]
  return(result);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <osThreadNew+0x3e>
 800606e:	4b44      	ldr	r3, [pc, #272]	; (8006180 <osThreadNew+0x148>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b02      	cmp	r3, #2
 8006074:	d07e      	beq.n	8006174 <osThreadNew+0x13c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d07b      	beq.n	8006174 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8006080:	2318      	movs	r3, #24
 8006082:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006084:	2300      	movs	r3, #0
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d045      	beq.n	8006120 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <osThreadNew+0x6a>
        name = attr->name;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d002      	beq.n	80060b0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <osThreadNew+0x90>
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b38      	cmp	r3, #56	; 0x38
 80060ba:	d805      	bhi.n	80060c8 <osThreadNew+0x90>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <osThreadNew+0x94>
        return (NULL);
 80060c8:	2300      	movs	r3, #0
 80060ca:	e054      	b.n	8006176 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	089b      	lsrs	r3, r3, #2
 80060da:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00e      	beq.n	8006102 <osThreadNew+0xca>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b5b      	cmp	r3, #91	; 0x5b
 80060ea:	d90a      	bls.n	8006102 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d006      	beq.n	8006102 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <osThreadNew+0xca>
        mem = 1;
 80060fc:	2301      	movs	r3, #1
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	e010      	b.n	8006124 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <osThreadNew+0xec>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <osThreadNew+0xec>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <osThreadNew+0xec>
          mem = 0;
 800611a:	2300      	movs	r3, #0
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	e001      	b.n	8006124 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006120:	2300      	movs	r3, #0
 8006122:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d110      	bne.n	800614c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006132:	9202      	str	r2, [sp, #8]
 8006134:	9301      	str	r3, [sp, #4]
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f001 fe53 	bl	8007dec <xTaskCreateStatic>
 8006146:	4603      	mov	r3, r0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	e013      	b.n	8006174 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d110      	bne.n	8006174 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006154:	b29a      	uxth	r2, r3
 8006156:	f107 0310 	add.w	r3, r7, #16
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	9300      	str	r3, [sp, #0]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f001 fea4 	bl	8007eb2 <xTaskCreate>
 800616a:	4603      	mov	r3, r0
 800616c:	2b01      	cmp	r3, #1
 800616e:	d001      	beq.n	8006174 <osThreadNew+0x13c>
          hTask = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006174:	693b      	ldr	r3, [r7, #16]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3730      	adds	r7, #48	; 0x30
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200000a8 	.word	0x200000a8

08006184 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800618c:	f3ef 8305 	mrs	r3, IPSR
 8006190:	613b      	str	r3, [r7, #16]
  return(result);
 8006192:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10f      	bne.n	80061b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006198:	f3ef 8310 	mrs	r3, PRIMASK
 800619c:	60fb      	str	r3, [r7, #12]
  return(result);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061a4:	f3ef 8311 	mrs	r3, BASEPRI
 80061a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <osDelay+0x3c>
 80061b0:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <osDelay+0x58>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d103      	bne.n	80061c0 <osDelay+0x3c>
    stat = osErrorISR;
 80061b8:	f06f 0305 	mvn.w	r3, #5
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	e007      	b.n	80061d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 ffb8 	bl	8008140 <vTaskDelay>
    }
  }

  return (stat);
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200000a8 	.word	0x200000a8

080061e0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08a      	sub	sp, #40	; 0x28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ec:	f3ef 8305 	mrs	r3, IPSR
 80061f0:	613b      	str	r3, [r7, #16]
  return(result);
 80061f2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8085 	bne.w	8006304 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fa:	f3ef 8310 	mrs	r3, PRIMASK
 80061fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d105      	bne.n	8006212 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006206:	f3ef 8311 	mrs	r3, BASEPRI
 800620a:	60bb      	str	r3, [r7, #8]
  return(result);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <osMutexNew+0x3a>
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <osMutexNew+0x130>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d074      	beq.n	8006304 <osMutexNew+0x124>
    if (attr != NULL) {
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <osMutexNew+0x48>
      type = attr->attr_bits;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	623b      	str	r3, [r7, #32]
 8006226:	e001      	b.n	800622c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <osMutexNew+0x5c>
      rmtx = 1U;
 8006236:	2301      	movs	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	e001      	b.n	8006240 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d15c      	bne.n	8006304 <osMutexNew+0x124>
      mem = -1;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295
 800624e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d015      	beq.n	8006282 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d006      	beq.n	800626c <osMutexNew+0x8c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	2b4f      	cmp	r3, #79	; 0x4f
 8006264:	d902      	bls.n	800626c <osMutexNew+0x8c>
          mem = 1;
 8006266:	2301      	movs	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e00c      	b.n	8006286 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d108      	bne.n	8006286 <osMutexNew+0xa6>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <osMutexNew+0xa6>
            mem = 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	e001      	b.n	8006286 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d112      	bne.n	80062b2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	4619      	mov	r1, r3
 8006298:	2004      	movs	r0, #4
 800629a:	f000 fe1a 	bl	8006ed2 <xQueueCreateMutexStatic>
 800629e:	6278      	str	r0, [r7, #36]	; 0x24
 80062a0:	e016      	b.n	80062d0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4619      	mov	r1, r3
 80062a8:	2001      	movs	r0, #1
 80062aa:	f000 fe12 	bl	8006ed2 <xQueueCreateMutexStatic>
 80062ae:	6278      	str	r0, [r7, #36]	; 0x24
 80062b0:	e00e      	b.n	80062d0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10b      	bne.n	80062d0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80062be:	2004      	movs	r0, #4
 80062c0:	f000 fdef 	bl	8006ea2 <xQueueCreateMutex>
 80062c4:	6278      	str	r0, [r7, #36]	; 0x24
 80062c6:	e003      	b.n	80062d0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80062c8:	2001      	movs	r0, #1
 80062ca:	f000 fdea 	bl	8006ea2 <xQueueCreateMutex>
 80062ce:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <osMutexNew+0x110>
        if (attr != NULL) {
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <osMutexNew+0x104>
          name = attr->name;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e001      	b.n	80062e8 <osMutexNew+0x108>
        } else {
          name = NULL;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80062e8:	6979      	ldr	r1, [r7, #20]
 80062ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ec:	f001 fcf6 	bl	8007cdc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d006      	beq.n	8006304 <osMutexNew+0x124>
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006306:	4618      	mov	r0, r3
 8006308:	3728      	adds	r7, #40	; 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200000a8 	.word	0x200000a8

08006314 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006332:	f3ef 8305 	mrs	r3, IPSR
 8006336:	613b      	str	r3, [r7, #16]
  return(result);
 8006338:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10f      	bne.n	800635e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800633e:	f3ef 8310 	mrs	r3, PRIMASK
 8006342:	60fb      	str	r3, [r7, #12]
  return(result);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d105      	bne.n	8006356 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800634a:	f3ef 8311 	mrs	r3, BASEPRI
 800634e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <osMutexAcquire+0x52>
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <osMutexAcquire+0xb8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d103      	bne.n	8006366 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800635e:	f06f 0305 	mvn.w	r3, #5
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	e02c      	b.n	80063c0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d103      	bne.n	8006374 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800636c:	f06f 0303 	mvn.w	r3, #3
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e025      	b.n	80063c0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d011      	beq.n	800639e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	69b8      	ldr	r0, [r7, #24]
 800637e:	f000 fdf9 	bl	8006f74 <xQueueTakeMutexRecursive>
 8006382:	4603      	mov	r3, r0
 8006384:	2b01      	cmp	r3, #1
 8006386:	d01b      	beq.n	80063c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800638e:	f06f 0301 	mvn.w	r3, #1
 8006392:	61fb      	str	r3, [r7, #28]
 8006394:	e014      	b.n	80063c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006396:	f06f 0302 	mvn.w	r3, #2
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e010      	b.n	80063c0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	69b8      	ldr	r0, [r7, #24]
 80063a2:	f001 f9b3 	bl	800770c <xQueueSemaphoreTake>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d009      	beq.n	80063c0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80063b2:	f06f 0301 	mvn.w	r3, #1
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	e002      	b.n	80063c0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80063ba:	f06f 0302 	mvn.w	r3, #2
 80063be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80063c0:	69fb      	ldr	r3, [r7, #28]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	200000a8 	.word	0x200000a8

080063d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f023 0301 	bic.w	r3, r3, #1
 80063de:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063ec:	f3ef 8305 	mrs	r3, IPSR
 80063f0:	613b      	str	r3, [r7, #16]
  return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10f      	bne.n	8006418 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f8:	f3ef 8310 	mrs	r3, PRIMASK
 80063fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006404:	f3ef 8311 	mrs	r3, BASEPRI
 8006408:	60bb      	str	r3, [r7, #8]
  return(result);
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d007      	beq.n	8006420 <osMutexRelease+0x50>
 8006410:	4b16      	ldr	r3, [pc, #88]	; (800646c <osMutexRelease+0x9c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d103      	bne.n	8006420 <osMutexRelease+0x50>
    stat = osErrorISR;
 8006418:	f06f 0305 	mvn.w	r3, #5
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e01f      	b.n	8006460 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006426:	f06f 0303 	mvn.w	r3, #3
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	e018      	b.n	8006460 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d009      	beq.n	8006448 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006434:	69b8      	ldr	r0, [r7, #24]
 8006436:	f000 fd67 	bl	8006f08 <xQueueGiveMutexRecursive>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d00f      	beq.n	8006460 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006440:	f06f 0302 	mvn.w	r3, #2
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e00b      	b.n	8006460 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006448:	2300      	movs	r3, #0
 800644a:	2200      	movs	r2, #0
 800644c:	2100      	movs	r1, #0
 800644e:	69b8      	ldr	r0, [r7, #24]
 8006450:	f000 fe3a 	bl	80070c8 <xQueueGenericSend>
 8006454:	4603      	mov	r3, r0
 8006456:	2b01      	cmp	r3, #1
 8006458:	d002      	beq.n	8006460 <osMutexRelease+0x90>
        stat = osErrorResource;
 800645a:	f06f 0302 	mvn.w	r3, #2
 800645e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006460:	69fb      	ldr	r3, [r7, #28]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200000a8 	.word	0x200000a8

08006470 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b08c      	sub	sp, #48	; 0x30
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006480:	f3ef 8305 	mrs	r3, IPSR
 8006484:	61bb      	str	r3, [r7, #24]
  return(result);
 8006486:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006488:	2b00      	cmp	r3, #0
 800648a:	f040 8086 	bne.w	800659a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648e:	f3ef 8310 	mrs	r3, PRIMASK
 8006492:	617b      	str	r3, [r7, #20]
  return(result);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800649a:	f3ef 8311 	mrs	r3, BASEPRI
 800649e:	613b      	str	r3, [r7, #16]
  return(result);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <osSemaphoreNew+0x3e>
 80064a6:	4b3f      	ldr	r3, [pc, #252]	; (80065a4 <osSemaphoreNew+0x134>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d075      	beq.n	800659a <osSemaphoreNew+0x12a>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d072      	beq.n	800659a <osSemaphoreNew+0x12a>
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d86e      	bhi.n	800659a <osSemaphoreNew+0x12a>
    mem = -1;
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
 80064c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d015      	beq.n	80064f4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <osSemaphoreNew+0x6e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b4f      	cmp	r3, #79	; 0x4f
 80064d6:	d902      	bls.n	80064de <osSemaphoreNew+0x6e>
        mem = 1;
 80064d8:	2301      	movs	r3, #1
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	e00c      	b.n	80064f8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <osSemaphoreNew+0x88>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <osSemaphoreNew+0x88>
          mem = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	e001      	b.n	80064f8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fe:	d04c      	beq.n	800659a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d128      	bne.n	8006558 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d10a      	bne.n	8006522 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2203      	movs	r2, #3
 8006512:	9200      	str	r2, [sp, #0]
 8006514:	2200      	movs	r2, #0
 8006516:	2100      	movs	r1, #0
 8006518:	2001      	movs	r0, #1
 800651a:	f000 fbc1 	bl	8006ca0 <xQueueGenericCreateStatic>
 800651e:	6278      	str	r0, [r7, #36]	; 0x24
 8006520:	e005      	b.n	800652e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006522:	2203      	movs	r2, #3
 8006524:	2100      	movs	r1, #0
 8006526:	2001      	movs	r0, #1
 8006528:	f000 fc3c 	bl	8006da4 <xQueueGenericCreate>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d022      	beq.n	800657a <osSemaphoreNew+0x10a>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01f      	beq.n	800657a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800653a:	2300      	movs	r3, #0
 800653c:	2200      	movs	r2, #0
 800653e:	2100      	movs	r1, #0
 8006540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006542:	f000 fdc1 	bl	80070c8 <xQueueGenericSend>
 8006546:	4603      	mov	r3, r0
 8006548:	2b01      	cmp	r3, #1
 800654a:	d016      	beq.n	800657a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800654c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800654e:	f001 fa77 	bl	8007a40 <vQueueDelete>
            hSemaphore = NULL;
 8006552:	2300      	movs	r3, #0
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e010      	b.n	800657a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d108      	bne.n	8006570 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	461a      	mov	r2, r3
 8006564:	68b9      	ldr	r1, [r7, #8]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 fd3c 	bl	8006fe4 <xQueueCreateCountingSemaphoreStatic>
 800656c:	6278      	str	r0, [r7, #36]	; 0x24
 800656e:	e004      	b.n	800657a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fd71 	bl	800705a <xQueueCreateCountingSemaphore>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00c      	beq.n	800659a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <osSemaphoreNew+0x11e>
          name = attr->name;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e001      	b.n	8006592 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006592:	69f9      	ldr	r1, [r7, #28]
 8006594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006596:	f001 fba1 	bl	8007cdc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800659c:	4618      	mov	r0, r3
 800659e:	3728      	adds	r7, #40	; 0x28
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	200000a8 	.word	0x200000a8

080065a8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d103      	bne.n	80065c8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80065c0:	f06f 0303 	mvn.w	r3, #3
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e04b      	b.n	8006660 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c8:	f3ef 8305 	mrs	r3, IPSR
 80065cc:	617b      	str	r3, [r7, #20]
  return(result);
 80065ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10f      	bne.n	80065f4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d4:	f3ef 8310 	mrs	r3, PRIMASK
 80065d8:	613b      	str	r3, [r7, #16]
  return(result);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065e0:	f3ef 8311 	mrs	r3, BASEPRI
 80065e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d026      	beq.n	800663a <osSemaphoreAcquire+0x92>
 80065ec:	4b1f      	ldr	r3, [pc, #124]	; (800666c <osSemaphoreAcquire+0xc4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d122      	bne.n	800663a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80065fa:	f06f 0303 	mvn.w	r3, #3
 80065fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006600:	e02d      	b.n	800665e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006602:	2300      	movs	r3, #0
 8006604:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	461a      	mov	r2, r3
 800660c:	2100      	movs	r1, #0
 800660e:	69b8      	ldr	r0, [r7, #24]
 8006610:	f001 f990 	bl	8007934 <xQueueReceiveFromISR>
 8006614:	4603      	mov	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	d003      	beq.n	8006622 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800661a:	f06f 0302 	mvn.w	r3, #2
 800661e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006620:	e01d      	b.n	800665e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d01a      	beq.n	800665e <osSemaphoreAcquire+0xb6>
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <osSemaphoreAcquire+0xc8>)
 800662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800662e:	601a      	str	r2, [r3, #0]
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006638:	e011      	b.n	800665e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	69b8      	ldr	r0, [r7, #24]
 800663e:	f001 f865 	bl	800770c <xQueueSemaphoreTake>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d00b      	beq.n	8006660 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800664e:	f06f 0301 	mvn.w	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e004      	b.n	8006660 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006656:	f06f 0302 	mvn.w	r3, #2
 800665a:	61fb      	str	r3, [r7, #28]
 800665c:	e000      	b.n	8006660 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800665e:	bf00      	nop
      }
    }
  }

  return (stat);
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	200000a8 	.word	0x200000a8
 8006670:	e000ed04 	.word	0xe000ed04

08006674 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b088      	sub	sp, #32
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800668a:	f06f 0303 	mvn.w	r3, #3
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	e03e      	b.n	8006710 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	617b      	str	r3, [r7, #20]
  return(result);
 8006698:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10f      	bne.n	80066be <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800669e:	f3ef 8310 	mrs	r3, PRIMASK
 80066a2:	613b      	str	r3, [r7, #16]
  return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066aa:	f3ef 8311 	mrs	r3, BASEPRI
 80066ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01e      	beq.n	80066f4 <osSemaphoreRelease+0x80>
 80066b6:	4b19      	ldr	r3, [pc, #100]	; (800671c <osSemaphoreRelease+0xa8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d11a      	bne.n	80066f4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066c2:	f107 0308 	add.w	r3, r7, #8
 80066c6:	4619      	mov	r1, r3
 80066c8:	69b8      	ldr	r0, [r7, #24]
 80066ca:	f000 fea3 	bl	8007414 <xQueueGiveFromISR>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d003      	beq.n	80066dc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80066d4:	f06f 0302 	mvn.w	r3, #2
 80066d8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066da:	e018      	b.n	800670e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d015      	beq.n	800670e <osSemaphoreRelease+0x9a>
 80066e2:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <osSemaphoreRelease+0xac>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80066f2:	e00c      	b.n	800670e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80066f4:	2300      	movs	r3, #0
 80066f6:	2200      	movs	r2, #0
 80066f8:	2100      	movs	r1, #0
 80066fa:	69b8      	ldr	r0, [r7, #24]
 80066fc:	f000 fce4 	bl	80070c8 <xQueueGenericSend>
 8006700:	4603      	mov	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d004      	beq.n	8006710 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006706:	f06f 0302 	mvn.w	r3, #2
 800670a:	61fb      	str	r3, [r7, #28]
 800670c:	e000      	b.n	8006710 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800670e:	bf00      	nop
    }
  }

  return (stat);
 8006710:	69fb      	ldr	r3, [r7, #28]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200000a8 	.word	0x200000a8
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	; 0x30
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006734:	f3ef 8305 	mrs	r3, IPSR
 8006738:	61bb      	str	r3, [r7, #24]
  return(result);
 800673a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800673c:	2b00      	cmp	r3, #0
 800673e:	d16f      	bne.n	8006820 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006740:	f3ef 8310 	mrs	r3, PRIMASK
 8006744:	617b      	str	r3, [r7, #20]
  return(result);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800674c:	f3ef 8311 	mrs	r3, BASEPRI
 8006750:	613b      	str	r3, [r7, #16]
  return(result);
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <osMessageQueueNew+0x3c>
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <osMessageQueueNew+0x108>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d05f      	beq.n	8006820 <osMessageQueueNew+0xfc>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d05c      	beq.n	8006820 <osMessageQueueNew+0xfc>
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d059      	beq.n	8006820 <osMessageQueueNew+0xfc>
    mem = -1;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d029      	beq.n	80067cc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d012      	beq.n	80067a6 <osMessageQueueNew+0x82>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b4f      	cmp	r3, #79	; 0x4f
 8006786:	d90e      	bls.n	80067a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68b9      	ldr	r1, [r7, #8]
 8006798:	fb01 f303 	mul.w	r3, r1, r3
 800679c:	429a      	cmp	r2, r3
 800679e:	d302      	bcc.n	80067a6 <osMessageQueueNew+0x82>
        mem = 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	e014      	b.n	80067d0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d110      	bne.n	80067d0 <osMessageQueueNew+0xac>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10c      	bne.n	80067d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d108      	bne.n	80067d0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d104      	bne.n	80067d0 <osMessageQueueNew+0xac>
          mem = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	e001      	b.n	80067d0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d10b      	bne.n	80067ee <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2100      	movs	r1, #0
 80067e0:	9100      	str	r1, [sp, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fa5b 	bl	8006ca0 <xQueueGenericCreateStatic>
 80067ea:	6278      	str	r0, [r7, #36]	; 0x24
 80067ec:	e008      	b.n	8006800 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80067f4:	2200      	movs	r2, #0
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fad3 	bl	8006da4 <xQueueGenericCreate>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <osMessageQueueNew+0xf0>
        name = attr->name;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	e001      	b.n	8006818 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800681c:	f001 fa5e 	bl	8007cdc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006822:	4618      	mov	r0, r3
 8006824:	3728      	adds	r7, #40	; 0x28
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	200000a8 	.word	0x200000a8

08006830 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006844:	2300      	movs	r3, #0
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006848:	f3ef 8305 	mrs	r3, IPSR
 800684c:	61fb      	str	r3, [r7, #28]
  return(result);
 800684e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10f      	bne.n	8006874 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006854:	f3ef 8310 	mrs	r3, PRIMASK
 8006858:	61bb      	str	r3, [r7, #24]
  return(result);
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006860:	f3ef 8311 	mrs	r3, BASEPRI
 8006864:	617b      	str	r3, [r7, #20]
  return(result);
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d02c      	beq.n	80068c6 <osMessageQueuePut+0x96>
 800686c:	4b28      	ldr	r3, [pc, #160]	; (8006910 <osMessageQueuePut+0xe0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d128      	bne.n	80068c6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <osMessageQueuePut+0x56>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <osMessageQueuePut+0x56>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006886:	f06f 0303 	mvn.w	r3, #3
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800688c:	e039      	b.n	8006902 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006892:	f107 0210 	add.w	r2, r7, #16
 8006896:	2300      	movs	r3, #0
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	6a38      	ldr	r0, [r7, #32]
 800689c:	f000 fd1a 	bl	80072d4 <xQueueGenericSendFromISR>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d003      	beq.n	80068ae <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80068a6:	f06f 0302 	mvn.w	r3, #2
 80068aa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068ac:	e029      	b.n	8006902 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d026      	beq.n	8006902 <osMessageQueuePut+0xd2>
 80068b4:	4b17      	ldr	r3, [pc, #92]	; (8006914 <osMessageQueuePut+0xe4>)
 80068b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068c4:	e01d      	b.n	8006902 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <osMessageQueuePut+0xa2>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d103      	bne.n	80068da <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80068d2:	f06f 0303 	mvn.w	r3, #3
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	e014      	b.n	8006904 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80068da:	2300      	movs	r3, #0
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	6a38      	ldr	r0, [r7, #32]
 80068e2:	f000 fbf1 	bl	80070c8 <xQueueGenericSend>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d00b      	beq.n	8006904 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80068f2:	f06f 0301 	mvn.w	r3, #1
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
 80068f8:	e004      	b.n	8006904 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80068fa:	f06f 0302 	mvn.w	r3, #2
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006900:	e000      	b.n	8006904 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006902:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006906:	4618      	mov	r0, r3
 8006908:	3728      	adds	r7, #40	; 0x28
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	200000a8 	.word	0x200000a8
 8006914:	e000ed04 	.word	0xe000ed04

08006918 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800692e:	f3ef 8305 	mrs	r3, IPSR
 8006932:	61fb      	str	r3, [r7, #28]
  return(result);
 8006934:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10f      	bne.n	800695a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800693a:	f3ef 8310 	mrs	r3, PRIMASK
 800693e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d105      	bne.n	8006952 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006946:	f3ef 8311 	mrs	r3, BASEPRI
 800694a:	617b      	str	r3, [r7, #20]
  return(result);
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d02c      	beq.n	80069ac <osMessageQueueGet+0x94>
 8006952:	4b28      	ldr	r3, [pc, #160]	; (80069f4 <osMessageQueueGet+0xdc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d128      	bne.n	80069ac <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <osMessageQueueGet+0x54>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <osMessageQueueGet+0x54>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800696c:	f06f 0303 	mvn.w	r3, #3
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006972:	e038      	b.n	80069e6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006974:	2300      	movs	r3, #0
 8006976:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006978:	f107 0310 	add.w	r3, r7, #16
 800697c:	461a      	mov	r2, r3
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	6a38      	ldr	r0, [r7, #32]
 8006982:	f000 ffd7 	bl	8007934 <xQueueReceiveFromISR>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d003      	beq.n	8006994 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800698c:	f06f 0302 	mvn.w	r3, #2
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006992:	e028      	b.n	80069e6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d025      	beq.n	80069e6 <osMessageQueueGet+0xce>
 800699a:	4b17      	ldr	r3, [pc, #92]	; (80069f8 <osMessageQueueGet+0xe0>)
 800699c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069aa:	e01c      	b.n	80069e6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <osMessageQueueGet+0xa0>
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d103      	bne.n	80069c0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80069b8:	f06f 0303 	mvn.w	r3, #3
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
 80069be:	e013      	b.n	80069e8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	6a38      	ldr	r0, [r7, #32]
 80069c6:	f000 fdbb 	bl	8007540 <xQueueReceive>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d00b      	beq.n	80069e8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80069d6:	f06f 0301 	mvn.w	r3, #1
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
 80069dc:	e004      	b.n	80069e8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80069de:	f06f 0302 	mvn.w	r3, #2
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
 80069e4:	e000      	b.n	80069e8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80069e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3728      	adds	r7, #40	; 0x28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200000a8 	.word	0x200000a8
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	4a07      	ldr	r2, [pc, #28]	; (8006a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a06      	ldr	r2, [pc, #24]	; (8006a2c <vApplicationGetIdleTaskMemory+0x30>)
 8006a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	601a      	str	r2, [r3, #0]
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	200000ac 	.word	0x200000ac
 8006a2c:	20000108 	.word	0x20000108

08006a30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a07      	ldr	r2, [pc, #28]	; (8006a5c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <vApplicationGetTimerTaskMemory+0x30>)
 8006a46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a4e:	601a      	str	r2, [r3, #0]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	20000308 	.word	0x20000308
 8006a60:	20000364 	.word	0x20000364

08006a64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f103 0208 	add.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f103 0208 	add.w	r2, r3, #8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f103 0208 	add.w	r2, r3, #8
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b1c:	d103      	bne.n	8006b26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e00c      	b.n	8006b40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e002      	b.n	8006b34 <vListInsert+0x2e>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60fb      	str	r3, [r7, #12]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d2f6      	bcs.n	8006b2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6892      	ldr	r2, [r2, #8]
 8006b8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6852      	ldr	r2, [r2, #4]
 8006b98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d103      	bne.n	8006bac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	1e5a      	subs	r2, r3, #1
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006bfa:	f002 fda7 	bl	800974c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	441a      	add	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	68f9      	ldr	r1, [r7, #12]
 8006c2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c30:	fb01 f303 	mul.w	r3, r1, r3
 8006c34:	441a      	add	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	22ff      	movs	r2, #255	; 0xff
 8006c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	22ff      	movs	r2, #255	; 0xff
 8006c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d114      	bne.n	8006c7a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01a      	beq.n	8006c8e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 fd4f 	bl	8008700 <xTaskRemoveFromEventList>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <xQueueGenericReset+0xd0>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	e009      	b.n	8006c8e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3310      	adds	r3, #16
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fef0 	bl	8006a64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3324      	adds	r3, #36	; 0x24
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff feeb 	bl	8006a64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c8e:	f002 fd91 	bl	80097b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c92:	2301      	movs	r3, #1
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08e      	sub	sp, #56	; 0x38
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10c      	bne.n	8006cce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	b672      	cpsid	i
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	b662      	cpsie	i
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10c      	bne.n	8006cee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	b672      	cpsid	i
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	b662      	cpsie	i
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <xQueueGenericCreateStatic+0x5a>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <xQueueGenericCreateStatic+0x5e>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <xQueueGenericCreateStatic+0x60>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10c      	bne.n	8006d1e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d08:	b672      	cpsid	i
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	b662      	cpsie	i
 8006d18:	623b      	str	r3, [r7, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <xQueueGenericCreateStatic+0x8a>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <xQueueGenericCreateStatic+0x8e>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <xQueueGenericCreateStatic+0x90>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10c      	bne.n	8006d4e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	b672      	cpsid	i
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	b662      	cpsie	i
 8006d48:	61fb      	str	r3, [r7, #28]
}
 8006d4a:	bf00      	nop
 8006d4c:	e7fe      	b.n	8006d4c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d4e:	2350      	movs	r3, #80	; 0x50
 8006d50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b50      	cmp	r3, #80	; 0x50
 8006d56:	d00c      	beq.n	8006d72 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	b672      	cpsid	i
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	b662      	cpsie	i
 8006d6c:	61bb      	str	r3, [r7, #24]
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00d      	beq.n	8006d9a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f847 	bl	8006e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3730      	adds	r7, #48	; 0x30
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08a      	sub	sp, #40	; 0x28
 8006da8:	af02      	add	r7, sp, #8
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	4613      	mov	r3, r2
 8006db0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10c      	bne.n	8006dd2 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	613b      	str	r3, [r7, #16]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d102      	bne.n	8006dde <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	e004      	b.n	8006de8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	3350      	adds	r3, #80	; 0x50
 8006dec:	4618      	mov	r0, r3
 8006dee:	f002 fdd9 	bl	80099a4 <pvPortMalloc>
 8006df2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d011      	beq.n	8006e1e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	3350      	adds	r3, #80	; 0x50
 8006e02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e0c:	79fa      	ldrb	r2, [r7, #7]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	4613      	mov	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f805 	bl	8006e28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3720      	adds	r7, #32
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e002      	b.n	8006e4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	68ba      	ldr	r2, [r7, #8]
 8006e54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e56:	2101      	movs	r1, #1
 8006e58:	69b8      	ldr	r0, [r7, #24]
 8006e5a:	f7ff feb7 	bl	8006bcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	78fa      	ldrb	r2, [r7, #3]
 8006e62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00e      	beq.n	8006e9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2200      	movs	r2, #0
 8006e92:	2100      	movs	r1, #0
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f917 	bl	80070c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e9a:	bf00      	nop
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006eac:	2301      	movs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6939      	ldr	r1, [r7, #16]
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	f7ff ff72 	bl	8006da4 <xQueueGenericCreate>
 8006ec0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff ffd3 	bl	8006e6e <prvInitialiseMutex>

		return xNewQueue;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af02      	add	r7, sp, #8
 8006ed8:	4603      	mov	r3, r0
 8006eda:	6039      	str	r1, [r7, #0]
 8006edc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	6939      	ldr	r1, [r7, #16]
 8006ef0:	6978      	ldr	r0, [r7, #20]
 8006ef2:	f7ff fed5 	bl	8006ca0 <xQueueGenericCreateStatic>
 8006ef6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ffb8 	bl	8006e6e <prvInitialiseMutex>

		return xNewQueue;
 8006efe:	68fb      	ldr	r3, [r7, #12]
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10c      	bne.n	8006f34 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	b672      	cpsid	i
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	b662      	cpsie	i
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	689c      	ldr	r4, [r3, #8]
 8006f38:	f001 fda8 	bl	8008a8c <xTaskGetCurrentTaskHandle>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	d111      	bne.n	8006f66 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	1e5a      	subs	r2, r3, #1
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d105      	bne.n	8006f60 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006f54:	2300      	movs	r3, #0
 8006f56:	2200      	movs	r2, #0
 8006f58:	2100      	movs	r1, #0
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 f8b4 	bl	80070c8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006f60:	2301      	movs	r3, #1
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	e001      	b.n	8006f6a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006f6a:	697b      	ldr	r3, [r7, #20]
	}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd90      	pop	{r4, r7, pc}

08006f74 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006f74:	b590      	push	{r4, r7, lr}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10c      	bne.n	8006fa2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	b672      	cpsid	i
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	b662      	cpsie	i
 8006f9c:	60fb      	str	r3, [r7, #12]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	689c      	ldr	r4, [r3, #8]
 8006fa6:	f001 fd71 	bl	8008a8c <xTaskGetCurrentTaskHandle>
 8006faa:	4603      	mov	r3, r0
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d107      	bne.n	8006fc0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
 8006fbe:	e00c      	b.n	8006fda <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6938      	ldr	r0, [r7, #16]
 8006fc4:	f000 fba2 	bl	800770c <xQueueSemaphoreTake>
 8006fc8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d004      	beq.n	8006fda <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006fda:	697b      	ldr	r3, [r7, #20]
	}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd90      	pop	{r4, r7, pc}

08006fe4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08a      	sub	sp, #40	; 0x28
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10c      	bne.n	8007010 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	61bb      	str	r3, [r7, #24]
}
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	d90c      	bls.n	8007032 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	b672      	cpsid	i
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	b662      	cpsie	i
 800702c:	617b      	str	r3, [r7, #20]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007032:	2302      	movs	r3, #2
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	2100      	movs	r1, #0
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f7ff fe2f 	bl	8006ca0 <xQueueGenericCreateStatic>
 8007042:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007050:	69fb      	ldr	r3, [r7, #28]
	}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10c      	bne.n	8007084 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	b672      	cpsid	i
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	b662      	cpsie	i
 800707e:	613b      	str	r3, [r7, #16]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d90c      	bls.n	80070a6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	b672      	cpsid	i
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	b662      	cpsie	i
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070a6:	2202      	movs	r2, #2
 80070a8:	2100      	movs	r1, #0
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7ff fe7a 	bl	8006da4 <xQueueGenericCreate>
 80070b0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d002      	beq.n	80070be <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070be:	697b      	ldr	r3, [r7, #20]
	}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	; 0x38
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10c      	bne.n	80070fe <xQueueGenericSend+0x36>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <xQueueGenericSend+0x44>
 8007104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <xQueueGenericSend+0x48>
 800710c:	2301      	movs	r3, #1
 800710e:	e000      	b.n	8007112 <xQueueGenericSend+0x4a>
 8007110:	2300      	movs	r3, #0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10c      	bne.n	8007130 <xQueueGenericSend+0x68>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d103      	bne.n	800713e <xQueueGenericSend+0x76>
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <xQueueGenericSend+0x7a>
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <xQueueGenericSend+0x7c>
 8007142:	2300      	movs	r3, #0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10c      	bne.n	8007162 <xQueueGenericSend+0x9a>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	b672      	cpsid	i
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	b662      	cpsie	i
 800715c:	623b      	str	r3, [r7, #32]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007162:	f001 fca3 	bl	8008aac <xTaskGetSchedulerState>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d102      	bne.n	8007172 <xQueueGenericSend+0xaa>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <xQueueGenericSend+0xae>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGenericSend+0xb0>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10c      	bne.n	8007196 <xQueueGenericSend+0xce>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	b672      	cpsid	i
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	b662      	cpsie	i
 8007190:	61fb      	str	r3, [r7, #28]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007196:	f002 fad9 	bl	800974c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d302      	bcc.n	80071ac <xQueueGenericSend+0xe4>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d129      	bne.n	8007200 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071b2:	f000 fc82 	bl	8007aba <prvCopyDataToQueue>
 80071b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	3324      	adds	r3, #36	; 0x24
 80071c4:	4618      	mov	r0, r3
 80071c6:	f001 fa9b 	bl	8008700 <xTaskRemoveFromEventList>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d013      	beq.n	80071f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071d0:	4b3f      	ldr	r3, [pc, #252]	; (80072d0 <xQueueGenericSend+0x208>)
 80071d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
 80071e0:	e00a      	b.n	80071f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071e8:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <xQueueGenericSend+0x208>)
 80071ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071f8:	f002 fadc 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e063      	b.n	80072c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d103      	bne.n	800720e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007206:	f002 fad5 	bl	80097b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e05c      	b.n	80072c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800720e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007210:	2b00      	cmp	r3, #0
 8007212:	d106      	bne.n	8007222 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007214:	f107 0314 	add.w	r3, r7, #20
 8007218:	4618      	mov	r0, r3
 800721a:	f001 fad7 	bl	80087cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800721e:	2301      	movs	r3, #1
 8007220:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007222:	f002 fac7 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007226:	f001 f82b 	bl	8008280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800722a:	f002 fa8f 	bl	800974c <vPortEnterCritical>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007234:	b25b      	sxtb	r3, r3
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d103      	bne.n	8007244 <xQueueGenericSend+0x17c>
 800723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007246:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800724a:	b25b      	sxtb	r3, r3
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d103      	bne.n	800725a <xQueueGenericSend+0x192>
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800725a:	f002 faab 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800725e:	1d3a      	adds	r2, r7, #4
 8007260:	f107 0314 	add.w	r3, r7, #20
 8007264:	4611      	mov	r1, r2
 8007266:	4618      	mov	r0, r3
 8007268:	f001 fac6 	bl	80087f8 <xTaskCheckForTimeOut>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d124      	bne.n	80072bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007274:	f000 fd19 	bl	8007caa <prvIsQueueFull>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d018      	beq.n	80072b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	3310      	adds	r3, #16
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4611      	mov	r1, r2
 8007286:	4618      	mov	r0, r3
 8007288:	f001 f9e6 	bl	8008658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800728c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800728e:	f000 fca4 	bl	8007bda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007292:	f001 f803 	bl	800829c <xTaskResumeAll>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f47f af7c 	bne.w	8007196 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <xQueueGenericSend+0x208>)
 80072a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	e772      	b.n	8007196 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fc92 	bl	8007bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072b6:	f000 fff1 	bl	800829c <xTaskResumeAll>
 80072ba:	e76c      	b.n	8007196 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072be:	f000 fc8c 	bl	8007bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c2:	f000 ffeb 	bl	800829c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3738      	adds	r7, #56	; 0x38
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b08e      	sub	sp, #56	; 0x38
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10c      	bne.n	8007306 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	b672      	cpsid	i
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	b662      	cpsie	i
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007302:	bf00      	nop
 8007304:	e7fe      	b.n	8007304 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <xQueueGenericSendFromISR+0x40>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <xQueueGenericSendFromISR+0x44>
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <xQueueGenericSendFromISR+0x46>
 8007318:	2300      	movs	r3, #0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10c      	bne.n	8007338 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	b672      	cpsid	i
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	b662      	cpsie	i
 8007332:	623b      	str	r3, [r7, #32]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	2b02      	cmp	r3, #2
 800733c:	d103      	bne.n	8007346 <xQueueGenericSendFromISR+0x72>
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <xQueueGenericSendFromISR+0x76>
 8007346:	2301      	movs	r3, #1
 8007348:	e000      	b.n	800734c <xQueueGenericSendFromISR+0x78>
 800734a:	2300      	movs	r3, #0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d10c      	bne.n	800736a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	b672      	cpsid	i
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	b662      	cpsie	i
 8007364:	61fb      	str	r3, [r7, #28]
}
 8007366:	bf00      	nop
 8007368:	e7fe      	b.n	8007368 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800736a:	f002 fad7 	bl	800991c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800736e:	f3ef 8211 	mrs	r2, BASEPRI
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	b672      	cpsid	i
 8007378:	f383 8811 	msr	BASEPRI, r3
 800737c:	f3bf 8f6f 	isb	sy
 8007380:	f3bf 8f4f 	dsb	sy
 8007384:	b662      	cpsie	i
 8007386:	61ba      	str	r2, [r7, #24]
 8007388:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800738a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	429a      	cmp	r2, r3
 8007398:	d302      	bcc.n	80073a0 <xQueueGenericSendFromISR+0xcc>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b02      	cmp	r3, #2
 800739e:	d12c      	bne.n	80073fa <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b0:	f000 fb83 	bl	8007aba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80073b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073bc:	d112      	bne.n	80073e4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d016      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f001 f998 	bl	8008700 <xTaskRemoveFromEventList>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00b      	beq.n	80073f4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	601a      	str	r2, [r3, #0]
 80073e2:	e007      	b.n	80073f4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073e8:	3301      	adds	r3, #1
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	b25a      	sxtb	r2, r3
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80073f4:	2301      	movs	r3, #1
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80073f8:	e001      	b.n	80073fe <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007408:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800740a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800740c:	4618      	mov	r0, r3
 800740e:	3738      	adds	r7, #56	; 0x38
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10c      	bne.n	8007442 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	b672      	cpsid	i
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	b662      	cpsie	i
 800743c:	623b      	str	r3, [r7, #32]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <xQueueGiveFromISR+0x50>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	b672      	cpsid	i
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	b662      	cpsie	i
 800745e:	61fb      	str	r3, [r7, #28]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <xQueueGiveFromISR+0x60>
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <xQueueGiveFromISR+0x64>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <xQueueGiveFromISR+0x66>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10c      	bne.n	8007498 <xQueueGiveFromISR+0x84>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	b672      	cpsid	i
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	b662      	cpsie	i
 8007492:	61bb      	str	r3, [r7, #24]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007498:	f002 fa40 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 800749c:	f3ef 8211 	mrs	r2, BASEPRI
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	b672      	cpsid	i
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	b662      	cpsie	i
 80074b4:	617a      	str	r2, [r7, #20]
 80074b6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074b8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d22b      	bcs.n	8007524 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e6:	d112      	bne.n	800750e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d016      	beq.n	800751e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	3324      	adds	r3, #36	; 0x24
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f903 	bl	8008700 <xTaskRemoveFromEventList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2201      	movs	r2, #1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e007      	b.n	800751e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800750e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007512:	3301      	adds	r3, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	b25a      	sxtb	r2, r3
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800751e:	2301      	movs	r3, #1
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	e001      	b.n	8007528 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007524:	2300      	movs	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	; 0x34
 8007528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f383 8811 	msr	BASEPRI, r3
}
 8007532:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007536:	4618      	mov	r0, r3
 8007538:	3738      	adds	r7, #56	; 0x38
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08c      	sub	sp, #48	; 0x30
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800754c:	2300      	movs	r3, #0
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10c      	bne.n	8007574 <xQueueReceive+0x34>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	b672      	cpsid	i
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	b662      	cpsie	i
 800756e:	623b      	str	r3, [r7, #32]
}
 8007570:	bf00      	nop
 8007572:	e7fe      	b.n	8007572 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <xQueueReceive+0x42>
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <xQueueReceive+0x46>
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <xQueueReceive+0x48>
 8007586:	2300      	movs	r3, #0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10c      	bne.n	80075a6 <xQueueReceive+0x66>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	b672      	cpsid	i
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	b662      	cpsie	i
 80075a0:	61fb      	str	r3, [r7, #28]
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075a6:	f001 fa81 	bl	8008aac <xTaskGetSchedulerState>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <xQueueReceive+0x76>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <xQueueReceive+0x7a>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <xQueueReceive+0x7c>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10c      	bne.n	80075da <xQueueReceive+0x9a>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	b672      	cpsid	i
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	b662      	cpsie	i
 80075d4:	61bb      	str	r3, [r7, #24]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075da:	f002 f8b7 	bl	800974c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01f      	beq.n	800762a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ee:	f000 face 	bl	8007b8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	1e5a      	subs	r2, r3, #1
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00f      	beq.n	8007622 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	3310      	adds	r3, #16
 8007606:	4618      	mov	r0, r3
 8007608:	f001 f87a 	bl	8008700 <xTaskRemoveFromEventList>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d007      	beq.n	8007622 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007612:	4b3d      	ldr	r3, [pc, #244]	; (8007708 <xQueueReceive+0x1c8>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007622:	f002 f8c7 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 8007626:	2301      	movs	r3, #1
 8007628:	e069      	b.n	80076fe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007630:	f002 f8c0 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007634:	2300      	movs	r3, #0
 8007636:	e062      	b.n	80076fe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800763e:	f107 0310 	add.w	r3, r7, #16
 8007642:	4618      	mov	r0, r3
 8007644:	f001 f8c2 	bl	80087cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007648:	2301      	movs	r3, #1
 800764a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800764c:	f002 f8b2 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007650:	f000 fe16 	bl	8008280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007654:	f002 f87a 	bl	800974c <vPortEnterCritical>
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800765e:	b25b      	sxtb	r3, r3
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d103      	bne.n	800766e <xQueueReceive+0x12e>
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007674:	b25b      	sxtb	r3, r3
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d103      	bne.n	8007684 <xQueueReceive+0x144>
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007684:	f002 f896 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007688:	1d3a      	adds	r2, r7, #4
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f8b1 	bl	80087f8 <xTaskCheckForTimeOut>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d123      	bne.n	80076e4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800769c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769e:	f000 faee 	bl	8007c7e <prvIsQueueEmpty>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d017      	beq.n	80076d8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076aa:	3324      	adds	r3, #36	; 0x24
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4611      	mov	r1, r2
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ffd1 	bl	8008658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b8:	f000 fa8f 	bl	8007bda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076bc:	f000 fdee 	bl	800829c <xTaskResumeAll>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d189      	bne.n	80075da <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80076c6:	4b10      	ldr	r3, [pc, #64]	; (8007708 <xQueueReceive+0x1c8>)
 80076c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	e780      	b.n	80075da <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076da:	f000 fa7e 	bl	8007bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076de:	f000 fddd 	bl	800829c <xTaskResumeAll>
 80076e2:	e77a      	b.n	80075da <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e6:	f000 fa78 	bl	8007bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076ea:	f000 fdd7 	bl	800829c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f0:	f000 fac5 	bl	8007c7e <prvIsQueueEmpty>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f43f af6f 	beq.w	80075da <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3730      	adds	r7, #48	; 0x30
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	e000ed04 	.word	0xe000ed04

0800770c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08e      	sub	sp, #56	; 0x38
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800771e:	2300      	movs	r3, #0
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10c      	bne.n	8007742 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772c:	b672      	cpsid	i
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	b662      	cpsie	i
 800773c:	623b      	str	r3, [r7, #32]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	b672      	cpsid	i
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	b662      	cpsie	i
 800775e:	61fb      	str	r3, [r7, #28]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007764:	f001 f9a2 	bl	8008aac <xTaskGetSchedulerState>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <xQueueSemaphoreTake+0x68>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <xQueueSemaphoreTake+0x6c>
 8007774:	2301      	movs	r3, #1
 8007776:	e000      	b.n	800777a <xQueueSemaphoreTake+0x6e>
 8007778:	2300      	movs	r3, #0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10c      	bne.n	8007798 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	61bb      	str	r3, [r7, #24]
}
 8007794:	bf00      	nop
 8007796:	e7fe      	b.n	8007796 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007798:	f001 ffd8 	bl	800974c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d024      	beq.n	80077f2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077aa:	1e5a      	subs	r2, r3, #1
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077b8:	f001 faf6 	bl	8008da8 <pvTaskIncrementMutexHeldCount>
 80077bc:	4602      	mov	r2, r0
 80077be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00f      	beq.n	80077ea <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	3310      	adds	r3, #16
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 ff96 	bl	8008700 <xTaskRemoveFromEventList>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d007      	beq.n	80077ea <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077da:	4b55      	ldr	r3, [pc, #340]	; (8007930 <xQueueSemaphoreTake+0x224>)
 80077dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077ea:	f001 ffe3 	bl	80097b4 <vPortExitCritical>
				return pdPASS;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e099      	b.n	8007926 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d113      	bne.n	8007820 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00c      	beq.n	8007818 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007802:	b672      	cpsid	i
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	b662      	cpsie	i
 8007812:	617b      	str	r3, [r7, #20]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007818:	f001 ffcc 	bl	80097b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800781c:	2300      	movs	r3, #0
 800781e:	e082      	b.n	8007926 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007826:	f107 030c 	add.w	r3, r7, #12
 800782a:	4618      	mov	r0, r3
 800782c:	f000 ffce 	bl	80087cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007830:	2301      	movs	r3, #1
 8007832:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007834:	f001 ffbe 	bl	80097b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007838:	f000 fd22 	bl	8008280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800783c:	f001 ff86 	bl	800974c <vPortEnterCritical>
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007846:	b25b      	sxtb	r3, r3
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784c:	d103      	bne.n	8007856 <xQueueSemaphoreTake+0x14a>
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785c:	b25b      	sxtb	r3, r3
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <xQueueSemaphoreTake+0x160>
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800786c:	f001 ffa2 	bl	80097b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007870:	463a      	mov	r2, r7
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f000 ffbd 	bl	80087f8 <xTaskCheckForTimeOut>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d132      	bne.n	80078ea <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007886:	f000 f9fa 	bl	8007c7e <prvIsQueueEmpty>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d026      	beq.n	80078de <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d109      	bne.n	80078ac <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007898:	f001 ff58 	bl	800974c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f001 f921 	bl	8008ae8 <xTaskPriorityInherit>
 80078a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80078a8:	f001 ff84 	bl	80097b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	3324      	adds	r3, #36	; 0x24
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	4611      	mov	r1, r2
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 fecf 	bl	8008658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078bc:	f000 f98d 	bl	8007bda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078c0:	f000 fcec 	bl	800829c <xTaskResumeAll>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f47f af66 	bne.w	8007798 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80078cc:	4b18      	ldr	r3, [pc, #96]	; (8007930 <xQueueSemaphoreTake+0x224>)
 80078ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	e75c      	b.n	8007798 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078e0:	f000 f97b 	bl	8007bda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078e4:	f000 fcda 	bl	800829c <xTaskResumeAll>
 80078e8:	e756      	b.n	8007798 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078ec:	f000 f975 	bl	8007bda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078f0:	f000 fcd4 	bl	800829c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078f6:	f000 f9c2 	bl	8007c7e <prvIsQueueEmpty>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f43f af4b 	beq.w	8007798 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00d      	beq.n	8007924 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007908:	f001 ff20 	bl	800974c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800790c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800790e:	f000 f8bc 	bl	8007a8a <prvGetDisinheritPriorityAfterTimeout>
 8007912:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f9be 	bl	8008c9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007920:	f001 ff48 	bl	80097b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007924:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007926:	4618      	mov	r0, r3
 8007928:	3738      	adds	r7, #56	; 0x38
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	e000ed04 	.word	0xe000ed04

08007934 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08e      	sub	sp, #56	; 0x38
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	b672      	cpsid	i
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	b662      	cpsie	i
 800795e:	623b      	str	r3, [r7, #32]
}
 8007960:	bf00      	nop
 8007962:	e7fe      	b.n	8007962 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <xQueueReceiveFromISR+0x3e>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <xQueueReceiveFromISR+0x42>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <xQueueReceiveFromISR+0x44>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10c      	bne.n	8007996 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007980:	b672      	cpsid	i
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	b662      	cpsie	i
 8007990:	61fb      	str	r3, [r7, #28]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007996:	f001 ffc1 	bl	800991c <vPortValidateInterruptPriority>
	__asm volatile
 800799a:	f3ef 8211 	mrs	r2, BASEPRI
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	b672      	cpsid	i
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	b662      	cpsie	i
 80079b2:	61ba      	str	r2, [r7, #24]
 80079b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d02f      	beq.n	8007a26 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d4:	f000 f8db 	bl	8007b8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	1e5a      	subs	r2, r3, #1
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d112      	bne.n	8007a10 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	3310      	adds	r3, #16
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fe82 	bl	8008700 <xTaskRemoveFromEventList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e007      	b.n	8007a20 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a14:	3301      	adds	r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	b25a      	sxtb	r2, r3
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a20:	2301      	movs	r3, #1
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
 8007a24:	e001      	b.n	8007a2a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f383 8811 	msr	BASEPRI, r3
}
 8007a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3738      	adds	r7, #56	; 0x38
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10c      	bne.n	8007a6c <vQueueDelete+0x2c>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	b672      	cpsid	i
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	b662      	cpsie	i
 8007a66:	60bb      	str	r3, [r7, #8]
}
 8007a68:	bf00      	nop
 8007a6a:	e7fe      	b.n	8007a6a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f95f 	bl	8007d30 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d102      	bne.n	8007a82 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f002 f85b 	bl	8009b38 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d006      	beq.n	8007aa8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	e001      	b.n	8007aac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007aac:	68fb      	ldr	r3, [r7, #12]
	}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b086      	sub	sp, #24
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10d      	bne.n	8007af4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d14d      	bne.n	8007b7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f867 	bl	8008bb8 <xTaskPriorityDisinherit>
 8007aea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	609a      	str	r2, [r3, #8]
 8007af2:	e043      	b.n	8007b7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d119      	bne.n	8007b2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6858      	ldr	r0, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	461a      	mov	r2, r3
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	f00c fa1b 	bl	8013f40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	441a      	add	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d32b      	bcc.n	8007b7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	e026      	b.n	8007b7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68d8      	ldr	r0, [r3, #12]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	461a      	mov	r2, r3
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	f00c fa01 	bl	8013f40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	68da      	ldr	r2, [r3, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	425b      	negs	r3, r3
 8007b48:	441a      	add	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d207      	bcs.n	8007b6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	425b      	negs	r3, r3
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d105      	bne.n	8007b7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d002      	beq.n	8007b7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b84:	697b      	ldr	r3, [r7, #20]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d018      	beq.n	8007bd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	441a      	add	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d303      	bcc.n	8007bc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68d9      	ldr	r1, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	461a      	mov	r2, r3
 8007bcc:	6838      	ldr	r0, [r7, #0]
 8007bce:	f00c f9b7 	bl	8013f40 <memcpy>
	}
}
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007be2:	f001 fdb3 	bl	800974c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bee:	e011      	b.n	8007c14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3324      	adds	r3, #36	; 0x24
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f000 fd7f 	bl	8008700 <xTaskRemoveFromEventList>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c08:	f000 fe5c 	bl	80088c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dce9      	bgt.n	8007bf0 <prvUnlockQueue+0x16>
 8007c1c:	e000      	b.n	8007c20 <prvUnlockQueue+0x46>
					break;
 8007c1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	22ff      	movs	r2, #255	; 0xff
 8007c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c28:	f001 fdc4 	bl	80097b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c2c:	f001 fd8e 	bl	800974c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c38:	e011      	b.n	8007c5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d012      	beq.n	8007c68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3310      	adds	r3, #16
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fd5a 	bl	8008700 <xTaskRemoveFromEventList>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c52:	f000 fe37 	bl	80088c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	dce9      	bgt.n	8007c3a <prvUnlockQueue+0x60>
 8007c66:	e000      	b.n	8007c6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	22ff      	movs	r2, #255	; 0xff
 8007c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c72:	f001 fd9f 	bl	80097b4 <vPortExitCritical>
}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b084      	sub	sp, #16
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c86:	f001 fd61 	bl	800974c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d102      	bne.n	8007c98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c92:	2301      	movs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e001      	b.n	8007c9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c9c:	f001 fd8a 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cb2:	f001 fd4b 	bl	800974c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d102      	bne.n	8007cc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	60fb      	str	r3, [r7, #12]
 8007cc6:	e001      	b.n	8007ccc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ccc:	f001 fd72 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e014      	b.n	8007d16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cec:	4a0f      	ldr	r2, [pc, #60]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cf8:	490c      	ldr	r1, [pc, #48]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d02:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <vQueueAddToRegistry+0x50>)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4413      	add	r3, r2
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d0e:	e006      	b.n	8007d1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	d9e7      	bls.n	8007cec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d1c:	bf00      	nop
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	200081ec 	.word	0x200081ec

08007d30 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	e016      	b.n	8007d6c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d3e:	4a10      	ldr	r2, [pc, #64]	; (8007d80 <vQueueUnregisterQueue+0x50>)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d10b      	bne.n	8007d66 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d4e:	4a0c      	ldr	r2, [pc, #48]	; (8007d80 <vQueueUnregisterQueue+0x50>)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2100      	movs	r1, #0
 8007d54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d58:	4a09      	ldr	r2, [pc, #36]	; (8007d80 <vQueueUnregisterQueue+0x50>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	4413      	add	r3, r2
 8007d60:	2200      	movs	r2, #0
 8007d62:	605a      	str	r2, [r3, #4]
				break;
 8007d64:	e006      	b.n	8007d74 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b07      	cmp	r3, #7
 8007d70:	d9e5      	bls.n	8007d3e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d72:	bf00      	nop
 8007d74:	bf00      	nop
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	200081ec 	.word	0x200081ec

08007d84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d94:	f001 fcda 	bl	800974c <vPortEnterCritical>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d9e:	b25b      	sxtb	r3, r3
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d103      	bne.n	8007dae <vQueueWaitForMessageRestricted+0x2a>
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d103      	bne.n	8007dc4 <vQueueWaitForMessageRestricted+0x40>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dc4:	f001 fcf6 	bl	80097b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	3324      	adds	r3, #36	; 0x24
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fc63 	bl	80086a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dde:	6978      	ldr	r0, [r7, #20]
 8007de0:	f7ff fefb 	bl	8007bda <prvUnlockQueue>
	}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08e      	sub	sp, #56	; 0x38
 8007df0:	af04      	add	r7, sp, #16
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
 8007df8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10c      	bne.n	8007e1a <xTaskCreateStatic+0x2e>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	b672      	cpsid	i
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	b662      	cpsie	i
 8007e14:	623b      	str	r3, [r7, #32]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10c      	bne.n	8007e3a <xTaskCreateStatic+0x4e>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	b672      	cpsid	i
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	b662      	cpsie	i
 8007e34:	61fb      	str	r3, [r7, #28]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e3a:	235c      	movs	r3, #92	; 0x5c
 8007e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	2b5c      	cmp	r3, #92	; 0x5c
 8007e42:	d00c      	beq.n	8007e5e <xTaskCreateStatic+0x72>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	b672      	cpsid	i
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	b662      	cpsie	i
 8007e58:	61bb      	str	r3, [r7, #24]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01e      	beq.n	8007ea4 <xTaskCreateStatic+0xb8>
 8007e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9303      	str	r3, [sp, #12]
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	9302      	str	r3, [sp, #8]
 8007e86:	f107 0314 	add.w	r3, r7, #20
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68b9      	ldr	r1, [r7, #8]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 f850 	bl	8007f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e9e:	f000 f8df 	bl	8008060 <prvAddNewTaskToReadyList>
 8007ea2:	e001      	b.n	8007ea8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ea8:	697b      	ldr	r3, [r7, #20]
	}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3728      	adds	r7, #40	; 0x28
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08c      	sub	sp, #48	; 0x30
 8007eb6:	af04      	add	r7, sp, #16
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f001 fd6c 	bl	80099a4 <pvPortMalloc>
 8007ecc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00e      	beq.n	8007ef2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ed4:	205c      	movs	r0, #92	; 0x5c
 8007ed6:	f001 fd65 	bl	80099a4 <pvPortMalloc>
 8007eda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8007ee8:	e005      	b.n	8007ef6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eea:	6978      	ldr	r0, [r7, #20]
 8007eec:	f001 fe24 	bl	8009b38 <vPortFree>
 8007ef0:	e001      	b.n	8007ef6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d017      	beq.n	8007f2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f04:	88fa      	ldrh	r2, [r7, #6]
 8007f06:	2300      	movs	r3, #0
 8007f08:	9303      	str	r3, [sp, #12]
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	9302      	str	r3, [sp, #8]
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68b9      	ldr	r1, [r7, #8]
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 f80e 	bl	8007f3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f20:	69f8      	ldr	r0, [r7, #28]
 8007f22:	f000 f89d 	bl	8008060 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f26:	2301      	movs	r3, #1
 8007f28:	61bb      	str	r3, [r7, #24]
 8007f2a:	e002      	b.n	8007f32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f32:	69bb      	ldr	r3, [r7, #24]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3720      	adds	r7, #32
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b088      	sub	sp, #32
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	461a      	mov	r2, r3
 8007f54:	21a5      	movs	r1, #165	; 0xa5
 8007f56:	f00c f801 	bl	8013f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f64:	440b      	add	r3, r1
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	4413      	add	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f023 0307 	bic.w	r3, r3, #7
 8007f72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f003 0307 	and.w	r3, r3, #7
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00c      	beq.n	8007f98 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f82:	b672      	cpsid	i
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	b662      	cpsie	i
 8007f92:	617b      	str	r3, [r7, #20]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01f      	beq.n	8007fde <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61fb      	str	r3, [r7, #28]
 8007fa2:	e012      	b.n	8007fca <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	4413      	add	r3, r2
 8007faa:	7819      	ldrb	r1, [r3, #0]
 8007fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	3334      	adds	r3, #52	; 0x34
 8007fb4:	460a      	mov	r2, r1
 8007fb6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d006      	beq.n	8007fd2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2b0f      	cmp	r3, #15
 8007fce:	d9e9      	bls.n	8007fa4 <prvInitialiseNewTask+0x68>
 8007fd0:	e000      	b.n	8007fd4 <prvInitialiseNewTask+0x98>
			{
				break;
 8007fd2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fdc:	e003      	b.n	8007fe6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	2b37      	cmp	r3, #55	; 0x37
 8007fea:	d901      	bls.n	8007ff0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fec:	2337      	movs	r3, #55	; 0x37
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ffa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	2200      	movs	r2, #0
 8008000:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	3304      	adds	r3, #4
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fd4c 	bl	8006aa4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	3318      	adds	r3, #24
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fd47 	bl	8006aa4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	2200      	movs	r2, #0
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	68f9      	ldr	r1, [r7, #12]
 800803e:	69b8      	ldr	r0, [r7, #24]
 8008040:	f001 fa76 	bl	8009530 <pxPortInitialiseStack>
 8008044:	4602      	mov	r2, r0
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008056:	bf00      	nop
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008068:	f001 fb70 	bl	800974c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800806c:	4b2d      	ldr	r3, [pc, #180]	; (8008124 <prvAddNewTaskToReadyList+0xc4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	4a2c      	ldr	r2, [pc, #176]	; (8008124 <prvAddNewTaskToReadyList+0xc4>)
 8008074:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008076:	4b2c      	ldr	r3, [pc, #176]	; (8008128 <prvAddNewTaskToReadyList+0xc8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800807e:	4a2a      	ldr	r2, [pc, #168]	; (8008128 <prvAddNewTaskToReadyList+0xc8>)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008084:	4b27      	ldr	r3, [pc, #156]	; (8008124 <prvAddNewTaskToReadyList+0xc4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d110      	bne.n	80080ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800808c:	f000 fc3e 	bl	800890c <prvInitialiseTaskLists>
 8008090:	e00d      	b.n	80080ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008092:	4b26      	ldr	r3, [pc, #152]	; (800812c <prvAddNewTaskToReadyList+0xcc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800809a:	4b23      	ldr	r3, [pc, #140]	; (8008128 <prvAddNewTaskToReadyList+0xc8>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d802      	bhi.n	80080ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080a8:	4a1f      	ldr	r2, [pc, #124]	; (8008128 <prvAddNewTaskToReadyList+0xc8>)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <prvAddNewTaskToReadyList+0xd0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a1e      	ldr	r2, [pc, #120]	; (8008130 <prvAddNewTaskToReadyList+0xd0>)
 80080b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080b8:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <prvAddNewTaskToReadyList+0xd0>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c4:	4b1b      	ldr	r3, [pc, #108]	; (8008134 <prvAddNewTaskToReadyList+0xd4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d903      	bls.n	80080d4 <prvAddNewTaskToReadyList+0x74>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d0:	4a18      	ldr	r2, [pc, #96]	; (8008134 <prvAddNewTaskToReadyList+0xd4>)
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4a15      	ldr	r2, [pc, #84]	; (8008138 <prvAddNewTaskToReadyList+0xd8>)
 80080e2:	441a      	add	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7fe fce7 	bl	8006abe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080f0:	f001 fb60 	bl	80097b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <prvAddNewTaskToReadyList+0xcc>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00e      	beq.n	800811a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080fc:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <prvAddNewTaskToReadyList+0xc8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	429a      	cmp	r2, r3
 8008108:	d207      	bcs.n	800811a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <prvAddNewTaskToReadyList+0xdc>)
 800810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800811a:	bf00      	nop
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000c38 	.word	0x20000c38
 8008128:	20000764 	.word	0x20000764
 800812c:	20000c44 	.word	0x20000c44
 8008130:	20000c54 	.word	0x20000c54
 8008134:	20000c40 	.word	0x20000c40
 8008138:	20000768 	.word	0x20000768
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d019      	beq.n	8008186 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008152:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <vTaskDelay+0x64>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00c      	beq.n	8008174 <vTaskDelay+0x34>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	60bb      	str	r3, [r7, #8]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008174:	f000 f884 	bl	8008280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fe28 	bl	8008dd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008180:	f000 f88c 	bl	800829c <xTaskResumeAll>
 8008184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <vTaskDelay+0x68>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000c60 	.word	0x20000c60
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ba:	463a      	mov	r2, r7
 80081bc:	1d39      	adds	r1, r7, #4
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fc1a 	bl	80069fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	9202      	str	r2, [sp, #8]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	460a      	mov	r2, r1
 80081da:	4923      	ldr	r1, [pc, #140]	; (8008268 <vTaskStartScheduler+0xbc>)
 80081dc:	4823      	ldr	r0, [pc, #140]	; (800826c <vTaskStartScheduler+0xc0>)
 80081de:	f7ff fe05 	bl	8007dec <xTaskCreateStatic>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a22      	ldr	r2, [pc, #136]	; (8008270 <vTaskStartScheduler+0xc4>)
 80081e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081e8:	4b21      	ldr	r3, [pc, #132]	; (8008270 <vTaskStartScheduler+0xc4>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d102      	bne.n	8008206 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008200:	f000 fe3a 	bl	8008e78 <xTimerCreateTimerTask>
 8008204:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d118      	bne.n	800823e <vTaskStartScheduler+0x92>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	b672      	cpsid	i
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	b662      	cpsie	i
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008224:	4b13      	ldr	r3, [pc, #76]	; (8008274 <vTaskStartScheduler+0xc8>)
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800822c:	4b12      	ldr	r3, [pc, #72]	; (8008278 <vTaskStartScheduler+0xcc>)
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <vTaskStartScheduler+0xd0>)
 8008234:	2200      	movs	r2, #0
 8008236:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008238:	f001 fa0a 	bl	8009650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800823c:	e010      	b.n	8008260 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008244:	d10c      	bne.n	8008260 <vTaskStartScheduler+0xb4>
	__asm volatile
 8008246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824a:	b672      	cpsid	i
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	b662      	cpsie	i
 800825a:	60fb      	str	r3, [r7, #12]
}
 800825c:	bf00      	nop
 800825e:	e7fe      	b.n	800825e <vTaskStartScheduler+0xb2>
}
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	080151f0 	.word	0x080151f0
 800826c:	080088dd 	.word	0x080088dd
 8008270:	20000c5c 	.word	0x20000c5c
 8008274:	20000c58 	.word	0x20000c58
 8008278:	20000c44 	.word	0x20000c44
 800827c:	20000c3c 	.word	0x20000c3c

08008280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008284:	4b04      	ldr	r3, [pc, #16]	; (8008298 <vTaskSuspendAll+0x18>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a03      	ldr	r2, [pc, #12]	; (8008298 <vTaskSuspendAll+0x18>)
 800828c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800828e:	bf00      	nop
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	20000c60 	.word	0x20000c60

0800829c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082aa:	4b43      	ldr	r3, [pc, #268]	; (80083b8 <xTaskResumeAll+0x11c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10c      	bne.n	80082cc <xTaskResumeAll+0x30>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	b672      	cpsid	i
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	b662      	cpsie	i
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082cc:	f001 fa3e 	bl	800974c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082d0:	4b39      	ldr	r3, [pc, #228]	; (80083b8 <xTaskResumeAll+0x11c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4a38      	ldr	r2, [pc, #224]	; (80083b8 <xTaskResumeAll+0x11c>)
 80082d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082da:	4b37      	ldr	r3, [pc, #220]	; (80083b8 <xTaskResumeAll+0x11c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d162      	bne.n	80083a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <xTaskResumeAll+0x120>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d05e      	beq.n	80083a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082ea:	e02f      	b.n	800834c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ec:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <xTaskResumeAll+0x124>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3318      	adds	r3, #24
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe fc3d 	bl	8006b78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3304      	adds	r3, #4
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fc38 	bl	8006b78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4b2d      	ldr	r3, [pc, #180]	; (80083c4 <xTaskResumeAll+0x128>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d903      	bls.n	800831c <xTaskResumeAll+0x80>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	4a2a      	ldr	r2, [pc, #168]	; (80083c4 <xTaskResumeAll+0x128>)
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008320:	4613      	mov	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4a27      	ldr	r2, [pc, #156]	; (80083c8 <xTaskResumeAll+0x12c>)
 800832a:	441a      	add	r2, r3
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f7fe fbc3 	bl	8006abe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833c:	4b23      	ldr	r3, [pc, #140]	; (80083cc <xTaskResumeAll+0x130>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <xTaskResumeAll+0x134>)
 8008348:	2201      	movs	r2, #1
 800834a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800834c:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <xTaskResumeAll+0x124>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1cb      	bne.n	80082ec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800835a:	f000 fb77 	bl	8008a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <xTaskResumeAll+0x138>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d010      	beq.n	800838c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800836a:	f000 f859 	bl	8008420 <xTaskIncrementTick>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <xTaskResumeAll+0x134>)
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3b01      	subs	r3, #1
 800837e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1f1      	bne.n	800836a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <xTaskResumeAll+0x138>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800838c:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <xTaskResumeAll+0x134>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d009      	beq.n	80083a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008394:	2301      	movs	r3, #1
 8008396:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <xTaskResumeAll+0x13c>)
 800839a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083a8:	f001 fa04 	bl	80097b4 <vPortExitCritical>

	return xAlreadyYielded;
 80083ac:	68bb      	ldr	r3, [r7, #8]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	20000c60 	.word	0x20000c60
 80083bc:	20000c38 	.word	0x20000c38
 80083c0:	20000bf8 	.word	0x20000bf8
 80083c4:	20000c40 	.word	0x20000c40
 80083c8:	20000768 	.word	0x20000768
 80083cc:	20000764 	.word	0x20000764
 80083d0:	20000c4c 	.word	0x20000c4c
 80083d4:	20000c48 	.word	0x20000c48
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083e2:	4b05      	ldr	r3, [pc, #20]	; (80083f8 <xTaskGetTickCount+0x1c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083e8:	687b      	ldr	r3, [r7, #4]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	20000c3c 	.word	0x20000c3c

080083fc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008402:	f001 fa8b 	bl	800991c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800840a:	4b04      	ldr	r3, [pc, #16]	; (800841c <xTaskGetTickCountFromISR+0x20>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008410:	683b      	ldr	r3, [r7, #0]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000c3c 	.word	0x20000c3c

08008420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008426:	2300      	movs	r3, #0
 8008428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800842a:	4b50      	ldr	r3, [pc, #320]	; (800856c <xTaskIncrementTick+0x14c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 808b 	bne.w	800854a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008434:	4b4e      	ldr	r3, [pc, #312]	; (8008570 <xTaskIncrementTick+0x150>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3301      	adds	r3, #1
 800843a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800843c:	4a4c      	ldr	r2, [pc, #304]	; (8008570 <xTaskIncrementTick+0x150>)
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d122      	bne.n	800848e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <xTaskIncrementTick+0x154>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00c      	beq.n	800846c <xTaskIncrementTick+0x4c>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	b672      	cpsid	i
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	b662      	cpsie	i
 8008466:	603b      	str	r3, [r7, #0]
}
 8008468:	bf00      	nop
 800846a:	e7fe      	b.n	800846a <xTaskIncrementTick+0x4a>
 800846c:	4b41      	ldr	r3, [pc, #260]	; (8008574 <xTaskIncrementTick+0x154>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60fb      	str	r3, [r7, #12]
 8008472:	4b41      	ldr	r3, [pc, #260]	; (8008578 <xTaskIncrementTick+0x158>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a3f      	ldr	r2, [pc, #252]	; (8008574 <xTaskIncrementTick+0x154>)
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4a3f      	ldr	r2, [pc, #252]	; (8008578 <xTaskIncrementTick+0x158>)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	4b3e      	ldr	r3, [pc, #248]	; (800857c <xTaskIncrementTick+0x15c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	4a3d      	ldr	r2, [pc, #244]	; (800857c <xTaskIncrementTick+0x15c>)
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	f000 fadf 	bl	8008a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800848e:	4b3c      	ldr	r3, [pc, #240]	; (8008580 <xTaskIncrementTick+0x160>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	429a      	cmp	r2, r3
 8008496:	d349      	bcc.n	800852c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <xTaskIncrementTick+0x154>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d104      	bne.n	80084ac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084a2:	4b37      	ldr	r3, [pc, #220]	; (8008580 <xTaskIncrementTick+0x160>)
 80084a4:	f04f 32ff 	mov.w	r2, #4294967295
 80084a8:	601a      	str	r2, [r3, #0]
					break;
 80084aa:	e03f      	b.n	800852c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084ac:	4b31      	ldr	r3, [pc, #196]	; (8008574 <xTaskIncrementTick+0x154>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d203      	bcs.n	80084cc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80084c4:	4a2e      	ldr	r2, [pc, #184]	; (8008580 <xTaskIncrementTick+0x160>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80084ca:	e02f      	b.n	800852c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	3304      	adds	r3, #4
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fb51 	bl	8006b78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d004      	beq.n	80084e8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	3318      	adds	r3, #24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fe fb48 	bl	8006b78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084ec:	4b25      	ldr	r3, [pc, #148]	; (8008584 <xTaskIncrementTick+0x164>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d903      	bls.n	80084fc <xTaskIncrementTick+0xdc>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	4a22      	ldr	r2, [pc, #136]	; (8008584 <xTaskIncrementTick+0x164>)
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4a1f      	ldr	r2, [pc, #124]	; (8008588 <xTaskIncrementTick+0x168>)
 800850a:	441a      	add	r2, r3
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	3304      	adds	r3, #4
 8008510:	4619      	mov	r1, r3
 8008512:	4610      	mov	r0, r2
 8008514:	f7fe fad3 	bl	8006abe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	4b1b      	ldr	r3, [pc, #108]	; (800858c <xTaskIncrementTick+0x16c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008522:	429a      	cmp	r2, r3
 8008524:	d3b8      	bcc.n	8008498 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008526:	2301      	movs	r3, #1
 8008528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800852a:	e7b5      	b.n	8008498 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800852c:	4b17      	ldr	r3, [pc, #92]	; (800858c <xTaskIncrementTick+0x16c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008532:	4915      	ldr	r1, [pc, #84]	; (8008588 <xTaskIncrementTick+0x168>)
 8008534:	4613      	mov	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d907      	bls.n	8008554 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e004      	b.n	8008554 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800854a:	4b11      	ldr	r3, [pc, #68]	; (8008590 <xTaskIncrementTick+0x170>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3301      	adds	r3, #1
 8008550:	4a0f      	ldr	r2, [pc, #60]	; (8008590 <xTaskIncrementTick+0x170>)
 8008552:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008554:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <xTaskIncrementTick+0x174>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800855c:	2301      	movs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008560:	697b      	ldr	r3, [r7, #20]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000c60 	.word	0x20000c60
 8008570:	20000c3c 	.word	0x20000c3c
 8008574:	20000bf0 	.word	0x20000bf0
 8008578:	20000bf4 	.word	0x20000bf4
 800857c:	20000c50 	.word	0x20000c50
 8008580:	20000c58 	.word	0x20000c58
 8008584:	20000c40 	.word	0x20000c40
 8008588:	20000768 	.word	0x20000768
 800858c:	20000764 	.word	0x20000764
 8008590:	20000c48 	.word	0x20000c48
 8008594:	20000c4c 	.word	0x20000c4c

08008598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800859e:	4b29      	ldr	r3, [pc, #164]	; (8008644 <vTaskSwitchContext+0xac>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80085a6:	4b28      	ldr	r3, [pc, #160]	; (8008648 <vTaskSwitchContext+0xb0>)
 80085a8:	2201      	movs	r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80085ac:	e043      	b.n	8008636 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 80085ae:	4b26      	ldr	r3, [pc, #152]	; (8008648 <vTaskSwitchContext+0xb0>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b4:	4b25      	ldr	r3, [pc, #148]	; (800864c <vTaskSwitchContext+0xb4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e012      	b.n	80085e2 <vTaskSwitchContext+0x4a>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <vTaskSwitchContext+0x44>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	607b      	str	r3, [r7, #4]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <vTaskSwitchContext+0x42>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3b01      	subs	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	491b      	ldr	r1, [pc, #108]	; (8008650 <vTaskSwitchContext+0xb8>)
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0e2      	beq.n	80085bc <vTaskSwitchContext+0x24>
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4a13      	ldr	r2, [pc, #76]	; (8008650 <vTaskSwitchContext+0xb8>)
 8008602:	4413      	add	r3, r2
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	605a      	str	r2, [r3, #4]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	3308      	adds	r3, #8
 8008618:	429a      	cmp	r2, r3
 800861a:	d104      	bne.n	8008626 <vTaskSwitchContext+0x8e>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4a09      	ldr	r2, [pc, #36]	; (8008654 <vTaskSwitchContext+0xbc>)
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	4a06      	ldr	r2, [pc, #24]	; (800864c <vTaskSwitchContext+0xb4>)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6013      	str	r3, [r2, #0]
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20000c60 	.word	0x20000c60
 8008648:	20000c4c 	.word	0x20000c4c
 800864c:	20000c40 	.word	0x20000c40
 8008650:	20000768 	.word	0x20000768
 8008654:	20000764 	.word	0x20000764

08008658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10c      	bne.n	8008682 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866c:	b672      	cpsid	i
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	b662      	cpsie	i
 800867c:	60fb      	str	r3, [r7, #12]
}
 800867e:	bf00      	nop
 8008680:	e7fe      	b.n	8008680 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <vTaskPlaceOnEventList+0x48>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	3318      	adds	r3, #24
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fe fa3b 	bl	8006b06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008690:	2101      	movs	r1, #1
 8008692:	6838      	ldr	r0, [r7, #0]
 8008694:	f000 fb9c 	bl	8008dd0 <prvAddCurrentTaskToDelayedList>
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	20000764 	.word	0x20000764

080086a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10c      	bne.n	80086d0 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	b672      	cpsid	i
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	b662      	cpsie	i
 80086ca:	617b      	str	r3, [r7, #20]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086d0:	4b0a      	ldr	r3, [pc, #40]	; (80086fc <vTaskPlaceOnEventListRestricted+0x58>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3318      	adds	r3, #24
 80086d6:	4619      	mov	r1, r3
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7fe f9f0 	bl	8006abe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80086e4:	f04f 33ff 	mov.w	r3, #4294967295
 80086e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	68b8      	ldr	r0, [r7, #8]
 80086ee:	f000 fb6f 	bl	8008dd0 <prvAddCurrentTaskToDelayedList>
	}
 80086f2:	bf00      	nop
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000764 	.word	0x20000764

08008700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10c      	bne.n	8008730 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	b672      	cpsid	i
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	b662      	cpsie	i
 800872a:	60fb      	str	r3, [r7, #12]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	3318      	adds	r3, #24
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fa1f 	bl	8006b78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873a:	4b1e      	ldr	r3, [pc, #120]	; (80087b4 <xTaskRemoveFromEventList+0xb4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d11d      	bne.n	800877e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	3304      	adds	r3, #4
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fa16 	bl	8006b78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4b19      	ldr	r3, [pc, #100]	; (80087b8 <xTaskRemoveFromEventList+0xb8>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	429a      	cmp	r2, r3
 8008756:	d903      	bls.n	8008760 <xTaskRemoveFromEventList+0x60>
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a16      	ldr	r2, [pc, #88]	; (80087b8 <xTaskRemoveFromEventList+0xb8>)
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008764:	4613      	mov	r3, r2
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <xTaskRemoveFromEventList+0xbc>)
 800876e:	441a      	add	r2, r3
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	3304      	adds	r3, #4
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fe f9a1 	bl	8006abe <vListInsertEnd>
 800877c:	e005      	b.n	800878a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	3318      	adds	r3, #24
 8008782:	4619      	mov	r1, r3
 8008784:	480e      	ldr	r0, [pc, #56]	; (80087c0 <xTaskRemoveFromEventList+0xc0>)
 8008786:	f7fe f99a 	bl	8006abe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <xTaskRemoveFromEventList+0xc4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	429a      	cmp	r2, r3
 8008796:	d905      	bls.n	80087a4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008798:	2301      	movs	r3, #1
 800879a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <xTaskRemoveFromEventList+0xc8>)
 800879e:	2201      	movs	r2, #1
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	e001      	b.n	80087a8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80087a8:	697b      	ldr	r3, [r7, #20]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000c60 	.word	0x20000c60
 80087b8:	20000c40 	.word	0x20000c40
 80087bc:	20000768 	.word	0x20000768
 80087c0:	20000bf8 	.word	0x20000bf8
 80087c4:	20000764 	.word	0x20000764
 80087c8:	20000c4c 	.word	0x20000c4c

080087cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <vTaskInternalSetTimeOutState+0x24>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <vTaskInternalSetTimeOutState+0x28>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	605a      	str	r2, [r3, #4]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000c50 	.word	0x20000c50
 80087f4:	20000c3c 	.word	0x20000c3c

080087f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b088      	sub	sp, #32
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880c:	b672      	cpsid	i
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	b662      	cpsie	i
 800881c:	613b      	str	r3, [r7, #16]
}
 800881e:	bf00      	nop
 8008820:	e7fe      	b.n	8008820 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10c      	bne.n	8008842 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	b672      	cpsid	i
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	b662      	cpsie	i
 800883c:	60fb      	str	r3, [r7, #12]
}
 800883e:	bf00      	nop
 8008840:	e7fe      	b.n	8008840 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008842:	f000 ff83 	bl	800974c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008846:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <xTaskCheckForTimeOut+0xc4>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885e:	d102      	bne.n	8008866 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008860:	2300      	movs	r3, #0
 8008862:	61fb      	str	r3, [r7, #28]
 8008864:	e023      	b.n	80088ae <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	4b15      	ldr	r3, [pc, #84]	; (80088c0 <xTaskCheckForTimeOut+0xc8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d007      	beq.n	8008882 <xTaskCheckForTimeOut+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	429a      	cmp	r2, r3
 800887a:	d302      	bcc.n	8008882 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	61fb      	str	r3, [r7, #28]
 8008880:	e015      	b.n	80088ae <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	697a      	ldr	r2, [r7, #20]
 8008888:	429a      	cmp	r2, r3
 800888a:	d20b      	bcs.n	80088a4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	1ad2      	subs	r2, r2, r3
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff ff97 	bl	80087cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
 80088a2:	e004      	b.n	80088ae <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80088aa:	2301      	movs	r3, #1
 80088ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80088ae:	f000 ff81 	bl	80097b4 <vPortExitCritical>

	return xReturn;
 80088b2:	69fb      	ldr	r3, [r7, #28]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3720      	adds	r7, #32
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000c3c 	.word	0x20000c3c
 80088c0:	20000c50 	.word	0x20000c50

080088c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80088c8:	4b03      	ldr	r3, [pc, #12]	; (80088d8 <vTaskMissedYield+0x14>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	20000c4c 	.word	0x20000c4c

080088dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088e4:	f000 f852 	bl	800898c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvIdleTask+0x28>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d9f9      	bls.n	80088e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088f0:	4b05      	ldr	r3, [pc, #20]	; (8008908 <prvIdleTask+0x2c>)
 80088f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008900:	e7f0      	b.n	80088e4 <prvIdleTask+0x8>
 8008902:	bf00      	nop
 8008904:	20000768 	.word	0x20000768
 8008908:	e000ed04 	.word	0xe000ed04

0800890c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008912:	2300      	movs	r3, #0
 8008914:	607b      	str	r3, [r7, #4]
 8008916:	e00c      	b.n	8008932 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4a12      	ldr	r2, [pc, #72]	; (800896c <prvInitialiseTaskLists+0x60>)
 8008924:	4413      	add	r3, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe f89c 	bl	8006a64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	3301      	adds	r3, #1
 8008930:	607b      	str	r3, [r7, #4]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b37      	cmp	r3, #55	; 0x37
 8008936:	d9ef      	bls.n	8008918 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008938:	480d      	ldr	r0, [pc, #52]	; (8008970 <prvInitialiseTaskLists+0x64>)
 800893a:	f7fe f893 	bl	8006a64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800893e:	480d      	ldr	r0, [pc, #52]	; (8008974 <prvInitialiseTaskLists+0x68>)
 8008940:	f7fe f890 	bl	8006a64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008944:	480c      	ldr	r0, [pc, #48]	; (8008978 <prvInitialiseTaskLists+0x6c>)
 8008946:	f7fe f88d 	bl	8006a64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800894a:	480c      	ldr	r0, [pc, #48]	; (800897c <prvInitialiseTaskLists+0x70>)
 800894c:	f7fe f88a 	bl	8006a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008950:	480b      	ldr	r0, [pc, #44]	; (8008980 <prvInitialiseTaskLists+0x74>)
 8008952:	f7fe f887 	bl	8006a64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <prvInitialiseTaskLists+0x78>)
 8008958:	4a05      	ldr	r2, [pc, #20]	; (8008970 <prvInitialiseTaskLists+0x64>)
 800895a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800895c:	4b0a      	ldr	r3, [pc, #40]	; (8008988 <prvInitialiseTaskLists+0x7c>)
 800895e:	4a05      	ldr	r2, [pc, #20]	; (8008974 <prvInitialiseTaskLists+0x68>)
 8008960:	601a      	str	r2, [r3, #0]
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	20000768 	.word	0x20000768
 8008970:	20000bc8 	.word	0x20000bc8
 8008974:	20000bdc 	.word	0x20000bdc
 8008978:	20000bf8 	.word	0x20000bf8
 800897c:	20000c0c 	.word	0x20000c0c
 8008980:	20000c24 	.word	0x20000c24
 8008984:	20000bf0 	.word	0x20000bf0
 8008988:	20000bf4 	.word	0x20000bf4

0800898c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008992:	e019      	b.n	80089c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008994:	f000 feda 	bl	800974c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	4b10      	ldr	r3, [pc, #64]	; (80089dc <prvCheckTasksWaitingTermination+0x50>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe f8e7 	bl	8006b78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80089aa:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <prvCheckTasksWaitingTermination+0x54>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	4a0b      	ldr	r2, [pc, #44]	; (80089e0 <prvCheckTasksWaitingTermination+0x54>)
 80089b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <prvCheckTasksWaitingTermination+0x58>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3b01      	subs	r3, #1
 80089ba:	4a0a      	ldr	r2, [pc, #40]	; (80089e4 <prvCheckTasksWaitingTermination+0x58>)
 80089bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80089be:	f000 fef9 	bl	80097b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f810 	bl	80089e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80089c8:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <prvCheckTasksWaitingTermination+0x58>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e1      	bne.n	8008994 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000c0c 	.word	0x20000c0c
 80089e0:	20000c38 	.word	0x20000c38
 80089e4:	20000c20 	.word	0x20000c20

080089e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d108      	bne.n	8008a0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fe:	4618      	mov	r0, r3
 8008a00:	f001 f89a 	bl	8009b38 <vPortFree>
				vPortFree( pxTCB );
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 f897 	bl	8009b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008a0a:	e01a      	b.n	8008a42 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d103      	bne.n	8008a1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 f88e 	bl	8009b38 <vPortFree>
	}
 8008a1c:	e011      	b.n	8008a42 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d00c      	beq.n	8008a42 <prvDeleteTCB+0x5a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <prvDeleteTCB+0x58>
	}
 8008a42:	bf00      	nop
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
	...

08008a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <prvResetNextTaskUnblockTime+0x38>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d104      	bne.n	8008a66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <prvResetNextTaskUnblockTime+0x3c>)
 8008a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a64:	e008      	b.n	8008a78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a66:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <prvResetNextTaskUnblockTime+0x38>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4a04      	ldr	r2, [pc, #16]	; (8008a88 <prvResetNextTaskUnblockTime+0x3c>)
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	20000bf0 	.word	0x20000bf0
 8008a88:	20000c58 	.word	0x20000c58

08008a8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008a98:	687b      	ldr	r3, [r7, #4]
	}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	370c      	adds	r7, #12
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	20000764 	.word	0x20000764

08008aac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ab2:	4b0b      	ldr	r3, [pc, #44]	; (8008ae0 <xTaskGetSchedulerState+0x34>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008aba:	2301      	movs	r3, #1
 8008abc:	607b      	str	r3, [r7, #4]
 8008abe:	e008      	b.n	8008ad2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac0:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <xTaskGetSchedulerState+0x38>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ac8:	2302      	movs	r3, #2
 8008aca:	607b      	str	r3, [r7, #4]
 8008acc:	e001      	b.n	8008ad2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ad2:	687b      	ldr	r3, [r7, #4]
	}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	20000c44 	.word	0x20000c44
 8008ae4:	20000c60 	.word	0x20000c60

08008ae8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008af4:	2300      	movs	r3, #0
 8008af6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d051      	beq.n	8008ba2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b02:	4b2a      	ldr	r3, [pc, #168]	; (8008bac <xTaskPriorityInherit+0xc4>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d241      	bcs.n	8008b90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db06      	blt.n	8008b22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <xTaskPriorityInherit+0xc4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	6959      	ldr	r1, [r3, #20]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a1f      	ldr	r2, [pc, #124]	; (8008bb0 <xTaskPriorityInherit+0xc8>)
 8008b34:	4413      	add	r3, r2
 8008b36:	4299      	cmp	r1, r3
 8008b38:	d122      	bne.n	8008b80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe f81a 	bl	8006b78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b44:	4b19      	ldr	r3, [pc, #100]	; (8008bac <xTaskPriorityInherit+0xc4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b52:	4b18      	ldr	r3, [pc, #96]	; (8008bb4 <xTaskPriorityInherit+0xcc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d903      	bls.n	8008b62 <xTaskPriorityInherit+0x7a>
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	4a15      	ldr	r2, [pc, #84]	; (8008bb4 <xTaskPriorityInherit+0xcc>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <xTaskPriorityInherit+0xc8>)
 8008b70:	441a      	add	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4619      	mov	r1, r3
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7fd ffa0 	bl	8006abe <vListInsertEnd>
 8008b7e:	e004      	b.n	8008b8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008b80:	4b0a      	ldr	r3, [pc, #40]	; (8008bac <xTaskPriorityInherit+0xc4>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e008      	b.n	8008ba2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <xTaskPriorityInherit+0xc4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d201      	bcs.n	8008ba2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000764 	.word	0x20000764
 8008bb0:	20000768 	.word	0x20000768
 8008bb4:	20000c40 	.word	0x20000c40

08008bb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d05a      	beq.n	8008c84 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bce:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <xTaskPriorityDisinherit+0xd8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d00c      	beq.n	8008bf2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	b672      	cpsid	i
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	b662      	cpsie	i
 8008bec:	60fb      	str	r3, [r7, #12]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	b672      	cpsid	i
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	b662      	cpsie	i
 8008c0e:	60bb      	str	r3, [r7, #8]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d02c      	beq.n	8008c84 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d128      	bne.n	8008c84 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	3304      	adds	r3, #4
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fd ff9e 	bl	8006b78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <xTaskPriorityDisinherit+0xdc>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d903      	bls.n	8008c64 <xTaskPriorityDisinherit+0xac>
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c60:	4a0c      	ldr	r2, [pc, #48]	; (8008c94 <xTaskPriorityDisinherit+0xdc>)
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c68:	4613      	mov	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4a09      	ldr	r2, [pc, #36]	; (8008c98 <xTaskPriorityDisinherit+0xe0>)
 8008c72:	441a      	add	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4619      	mov	r1, r3
 8008c7a:	4610      	mov	r0, r2
 8008c7c:	f7fd ff1f 	bl	8006abe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c80:	2301      	movs	r3, #1
 8008c82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c84:	697b      	ldr	r3, [r7, #20]
	}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000764 	.word	0x20000764
 8008c94:	20000c40 	.word	0x20000c40
 8008c98:	20000768 	.word	0x20000768

08008c9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b088      	sub	sp, #32
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008caa:	2301      	movs	r3, #1
 8008cac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d06e      	beq.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10c      	bne.n	8008cd6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	b672      	cpsid	i
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	b662      	cpsie	i
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cda:	683a      	ldr	r2, [r7, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d902      	bls.n	8008ce6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e002      	b.n	8008cec <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d04d      	beq.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d148      	bne.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008d00:	4b26      	ldr	r3, [pc, #152]	; (8008d9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d10c      	bne.n	8008d24 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	b672      	cpsid	i
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	b662      	cpsie	i
 8008d1e:	60bb      	str	r3, [r7, #8]
}
 8008d20:	bf00      	nop
 8008d22:	e7fe      	b.n	8008d22 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008d24:	69bb      	ldr	r3, [r7, #24]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	db04      	blt.n	8008d42 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	6959      	ldr	r1, [r3, #20]
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4613      	mov	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4413      	add	r3, r2
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d52:	4413      	add	r3, r2
 8008d54:	4299      	cmp	r1, r3
 8008d56:	d11c      	bne.n	8008d92 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd ff0b 	bl	8006b78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d903      	bls.n	8008d76 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d72:	4a0c      	ldr	r2, [pc, #48]	; (8008da4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008d74:	6013      	str	r3, [r2, #0]
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4a07      	ldr	r2, [pc, #28]	; (8008da0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008d84:	441a      	add	r2, r3
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4610      	mov	r0, r2
 8008d8e:	f7fd fe96 	bl	8006abe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d92:	bf00      	nop
 8008d94:	3720      	adds	r7, #32
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	20000764 	.word	0x20000764
 8008da0:	20000768 	.word	0x20000768
 8008da4:	20000c40 	.word	0x20000c40

08008da8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dba:	3201      	adds	r2, #1
 8008dbc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008dbe:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <pvTaskIncrementMutexHeldCount+0x24>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
	}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	20000764 	.word	0x20000764

08008dd0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dda:	4b21      	ldr	r3, [pc, #132]	; (8008e60 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de0:	4b20      	ldr	r3, [pc, #128]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fec6 	bl	8006b78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df2:	d10a      	bne.n	8008e0a <prvAddCurrentTaskToDelayedList+0x3a>
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dfa:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3304      	adds	r3, #4
 8008e00:	4619      	mov	r1, r3
 8008e02:	4819      	ldr	r0, [pc, #100]	; (8008e68 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e04:	f7fd fe5b 	bl	8006abe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e08:	e026      	b.n	8008e58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e12:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d209      	bcs.n	8008e36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e22:	4b12      	ldr	r3, [pc, #72]	; (8008e6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fd fe69 	bl	8006b06 <vListInsert>
}
 8008e34:	e010      	b.n	8008e58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e36:	4b0e      	ldr	r3, [pc, #56]	; (8008e70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	4619      	mov	r1, r3
 8008e42:	4610      	mov	r0, r2
 8008e44:	f7fd fe5f 	bl	8006b06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e48:	4b0a      	ldr	r3, [pc, #40]	; (8008e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d202      	bcs.n	8008e58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008e52:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	6013      	str	r3, [r2, #0]
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	20000c3c 	.word	0x20000c3c
 8008e64:	20000764 	.word	0x20000764
 8008e68:	20000c24 	.word	0x20000c24
 8008e6c:	20000bf4 	.word	0x20000bf4
 8008e70:	20000bf0 	.word	0x20000bf0
 8008e74:	20000c58 	.word	0x20000c58

08008e78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08a      	sub	sp, #40	; 0x28
 8008e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008e82:	f000 fb15 	bl	80094b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008e86:	4b1d      	ldr	r3, [pc, #116]	; (8008efc <xTimerCreateTimerTask+0x84>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d021      	beq.n	8008ed2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e96:	1d3a      	adds	r2, r7, #4
 8008e98:	f107 0108 	add.w	r1, r7, #8
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fdc5 	bl	8006a30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	9202      	str	r2, [sp, #8]
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	9300      	str	r3, [sp, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	460a      	mov	r2, r1
 8008eb8:	4911      	ldr	r1, [pc, #68]	; (8008f00 <xTimerCreateTimerTask+0x88>)
 8008eba:	4812      	ldr	r0, [pc, #72]	; (8008f04 <xTimerCreateTimerTask+0x8c>)
 8008ebc:	f7fe ff96 	bl	8007dec <xTaskCreateStatic>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <xTimerCreateTimerTask+0x90>)
 8008ec4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008ec6:	4b10      	ldr	r3, [pc, #64]	; (8008f08 <xTimerCreateTimerTask+0x90>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10c      	bne.n	8008ef2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	613b      	str	r3, [r7, #16]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008ef2:	697b      	ldr	r3, [r7, #20]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000c94 	.word	0x20000c94
 8008f00:	080151f8 	.word	0x080151f8
 8008f04:	08009049 	.word	0x08009049
 8008f08:	20000c98 	.word	0x20000c98

08008f0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
 8008f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10c      	bne.n	8008f3e <xTimerGenericCommand+0x32>
	__asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	b672      	cpsid	i
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	b662      	cpsie	i
 8008f38:	623b      	str	r3, [r7, #32]
}
 8008f3a:	bf00      	nop
 8008f3c:	e7fe      	b.n	8008f3c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <xTimerGenericCommand+0x9c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d02a      	beq.n	8008f9c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b05      	cmp	r3, #5
 8008f56:	dc18      	bgt.n	8008f8a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f58:	f7ff fda8 	bl	8008aac <xTaskGetSchedulerState>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d109      	bne.n	8008f76 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f62:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <xTimerGenericCommand+0x9c>)
 8008f64:	6818      	ldr	r0, [r3, #0]
 8008f66:	f107 0110 	add.w	r1, r7, #16
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f6e:	f7fe f8ab 	bl	80070c8 <xQueueGenericSend>
 8008f72:	6278      	str	r0, [r7, #36]	; 0x24
 8008f74:	e012      	b.n	8008f9c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f76:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <xTimerGenericCommand+0x9c>)
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f107 0110 	add.w	r1, r7, #16
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2200      	movs	r2, #0
 8008f82:	f7fe f8a1 	bl	80070c8 <xQueueGenericSend>
 8008f86:	6278      	str	r0, [r7, #36]	; 0x24
 8008f88:	e008      	b.n	8008f9c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f8a:	4b07      	ldr	r3, [pc, #28]	; (8008fa8 <xTimerGenericCommand+0x9c>)
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	f107 0110 	add.w	r1, r7, #16
 8008f92:	2300      	movs	r3, #0
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	f7fe f99d 	bl	80072d4 <xQueueGenericSendFromISR>
 8008f9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000c94 	.word	0x20000c94

08008fac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b088      	sub	sp, #32
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fb6:	4b23      	ldr	r3, [pc, #140]	; (8009044 <prvProcessExpiredTimer+0x98>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fd fdd7 	bl	8006b78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d024      	beq.n	8009022 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	699a      	ldr	r2, [r3, #24]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	18d1      	adds	r1, r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	6978      	ldr	r0, [r7, #20]
 8008fe6:	f000 f8d3 	bl	8009190 <prvInsertTimerInActiveList>
 8008fea:	4603      	mov	r3, r0
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d021      	beq.n	8009034 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6978      	ldr	r0, [r7, #20]
 8008ffc:	f7ff ff86 	bl	8008f0c <xTimerGenericCommand>
 8009000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d115      	bne.n	8009034 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	b672      	cpsid	i
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	b662      	cpsie	i
 800901c:	60fb      	str	r3, [r7, #12]
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	b2da      	uxtb	r2, r3
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	6978      	ldr	r0, [r7, #20]
 800903a:	4798      	blx	r3
}
 800903c:	bf00      	nop
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	20000c8c 	.word	0x20000c8c

08009048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009050:	f107 0308 	add.w	r3, r7, #8
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f857 	bl	8009108 <prvGetNextExpireTime>
 800905a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	4619      	mov	r1, r3
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f803 	bl	800906c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009066:	f000 f8d5 	bl	8009214 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800906a:	e7f1      	b.n	8009050 <prvTimerTask+0x8>

0800906c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009076:	f7ff f903 	bl	8008280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800907a:	f107 0308 	add.w	r3, r7, #8
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f866 	bl	8009150 <prvSampleTimeNow>
 8009084:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d130      	bne.n	80090ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d10a      	bne.n	80090a8 <prvProcessTimerOrBlockTask+0x3c>
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	429a      	cmp	r2, r3
 8009098:	d806      	bhi.n	80090a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800909a:	f7ff f8ff 	bl	800829c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800909e:	68f9      	ldr	r1, [r7, #12]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff ff83 	bl	8008fac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090a6:	e024      	b.n	80090f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090ae:	4b13      	ldr	r3, [pc, #76]	; (80090fc <prvProcessTimerOrBlockTask+0x90>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <prvProcessTimerOrBlockTask+0x50>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <prvProcessTimerOrBlockTask+0x52>
 80090bc:	2300      	movs	r3, #0
 80090be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090c0:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <prvProcessTimerOrBlockTask+0x94>)
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	683a      	ldr	r2, [r7, #0]
 80090cc:	4619      	mov	r1, r3
 80090ce:	f7fe fe59 	bl	8007d84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090d2:	f7ff f8e3 	bl	800829c <xTaskResumeAll>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090dc:	4b09      	ldr	r3, [pc, #36]	; (8009104 <prvProcessTimerOrBlockTask+0x98>)
 80090de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e2:	601a      	str	r2, [r3, #0]
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	f3bf 8f6f 	isb	sy
}
 80090ec:	e001      	b.n	80090f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090ee:	f7ff f8d5 	bl	800829c <xTaskResumeAll>
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	20000c90 	.word	0x20000c90
 8009100:	20000c94 	.word	0x20000c94
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009110:	4b0e      	ldr	r3, [pc, #56]	; (800914c <prvGetNextExpireTime+0x44>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <prvGetNextExpireTime+0x16>
 800911a:	2201      	movs	r2, #1
 800911c:	e000      	b.n	8009120 <prvGetNextExpireTime+0x18>
 800911e:	2200      	movs	r2, #0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d105      	bne.n	8009138 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800912c:	4b07      	ldr	r3, [pc, #28]	; (800914c <prvGetNextExpireTime+0x44>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e001      	b.n	800913c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	20000c8c 	.word	0x20000c8c

08009150 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009158:	f7ff f940 	bl	80083dc <xTaskGetTickCount>
 800915c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800915e:	4b0b      	ldr	r3, [pc, #44]	; (800918c <prvSampleTimeNow+0x3c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	429a      	cmp	r2, r3
 8009166:	d205      	bcs.n	8009174 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009168:	f000 f93c 	bl	80093e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	e002      	b.n	800917a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800917a:	4a04      	ldr	r2, [pc, #16]	; (800918c <prvSampleTimeNow+0x3c>)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009180:	68fb      	ldr	r3, [r7, #12]
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20000c9c 	.word	0x20000c9c

08009190 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d812      	bhi.n	80091dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d302      	bcc.n	80091ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	617b      	str	r3, [r7, #20]
 80091c8:	e01b      	b.n	8009202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <prvInsertTimerInActiveList+0x7c>)
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f7fd fc96 	bl	8006b06 <vListInsert>
 80091da:	e012      	b.n	8009202 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d206      	bcs.n	80091f2 <prvInsertTimerInActiveList+0x62>
 80091e4:	68ba      	ldr	r2, [r7, #8]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d302      	bcc.n	80091f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091ec:	2301      	movs	r3, #1
 80091ee:	617b      	str	r3, [r7, #20]
 80091f0:	e007      	b.n	8009202 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091f2:	4b07      	ldr	r3, [pc, #28]	; (8009210 <prvInsertTimerInActiveList+0x80>)
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fd fc82 	bl	8006b06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009202:	697b      	ldr	r3, [r7, #20]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20000c90 	.word	0x20000c90
 8009210:	20000c8c 	.word	0x20000c8c

08009214 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08e      	sub	sp, #56	; 0x38
 8009218:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800921a:	e0d0      	b.n	80093be <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	da1a      	bge.n	8009258 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009222:	1d3b      	adds	r3, r7, #4
 8009224:	3304      	adds	r3, #4
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10c      	bne.n	8009248 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	b672      	cpsid	i
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	b662      	cpsie	i
 8009242:	61fb      	str	r3, [r7, #28]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800924e:	6850      	ldr	r0, [r2, #4]
 8009250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009252:	6892      	ldr	r2, [r2, #8]
 8009254:	4611      	mov	r1, r2
 8009256:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f2c0 80ae 	blt.w	80093bc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7fd fc81 	bl	8006b78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009276:	463b      	mov	r3, r7
 8009278:	4618      	mov	r0, r3
 800927a:	f7ff ff69 	bl	8009150 <prvSampleTimeNow>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b09      	cmp	r3, #9
 8009284:	f200 809b 	bhi.w	80093be <prvProcessReceivedCommands+0x1aa>
 8009288:	a201      	add	r2, pc, #4	; (adr r2, 8009290 <prvProcessReceivedCommands+0x7c>)
 800928a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800928e:	bf00      	nop
 8009290:	080092b9 	.word	0x080092b9
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092b9 	.word	0x080092b9
 800929c:	08009331 	.word	0x08009331
 80092a0:	08009345 	.word	0x08009345
 80092a4:	08009393 	.word	0x08009393
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092b9 	.word	0x080092b9
 80092b0:	08009331 	.word	0x08009331
 80092b4:	08009345 	.word	0x08009345
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	18d1      	adds	r1, r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d8:	f7ff ff5a 	bl	8009190 <prvInsertTimerInActiveList>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d06d      	beq.n	80093be <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f0:	f003 0304 	and.w	r3, r3, #4
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d062      	beq.n	80093be <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	441a      	add	r2, r3
 8009300:	2300      	movs	r3, #0
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	2300      	movs	r3, #0
 8009306:	2100      	movs	r1, #0
 8009308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800930a:	f7ff fdff 	bl	8008f0c <xTimerGenericCommand>
 800930e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009310:	6a3b      	ldr	r3, [r7, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d153      	bne.n	80093be <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	b672      	cpsid	i
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	b662      	cpsie	i
 800932a:	61bb      	str	r3, [r7, #24]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009336:	f023 0301 	bic.w	r3, r3, #1
 800933a:	b2da      	uxtb	r2, r3
 800933c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009342:	e03c      	b.n	80093be <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	b2da      	uxtb	r2, r3
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d10c      	bne.n	800937e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009368:	b672      	cpsid	i
 800936a:	f383 8811 	msr	BASEPRI, r3
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f3bf 8f4f 	dsb	sy
 8009376:	b662      	cpsie	i
 8009378:	617b      	str	r3, [r7, #20]
}
 800937a:	bf00      	nop
 800937c:	e7fe      	b.n	800937c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	699a      	ldr	r2, [r3, #24]
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	18d1      	adds	r1, r2, r3
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800938c:	f7ff ff00 	bl	8009190 <prvInsertTimerInActiveList>
					break;
 8009390:	e015      	b.n	80093be <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d103      	bne.n	80093a8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80093a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a2:	f000 fbc9 	bl	8009b38 <vPortFree>
 80093a6:	e00a      	b.n	80093be <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093ae:	f023 0301 	bic.w	r3, r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093ba:	e000      	b.n	80093be <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80093bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093be:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <prvProcessReceivedCommands+0x1cc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	1d39      	adds	r1, r7, #4
 80093c4:	2200      	movs	r2, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f8ba 	bl	8007540 <xQueueReceive>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	f47f af24 	bne.w	800921c <prvProcessReceivedCommands+0x8>
	}
}
 80093d4:	bf00      	nop
 80093d6:	bf00      	nop
 80093d8:	3730      	adds	r7, #48	; 0x30
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	20000c94 	.word	0x20000c94

080093e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093ea:	e04a      	b.n	8009482 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093ec:	4b2e      	ldr	r3, [pc, #184]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093f6:	4b2c      	ldr	r3, [pc, #176]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3304      	adds	r3, #4
 8009404:	4618      	mov	r0, r3
 8009406:	f7fd fbb7 	bl	8006b78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009418:	f003 0304 	and.w	r3, r3, #4
 800941c:	2b00      	cmp	r3, #0
 800941e:	d030      	beq.n	8009482 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	429a      	cmp	r2, r3
 8009430:	d90e      	bls.n	8009450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800943e:	4b1a      	ldr	r3, [pc, #104]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3304      	adds	r3, #4
 8009446:	4619      	mov	r1, r3
 8009448:	4610      	mov	r0, r2
 800944a:	f7fd fb5c 	bl	8006b06 <vListInsert>
 800944e:	e018      	b.n	8009482 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009450:	2300      	movs	r3, #0
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	2300      	movs	r3, #0
 8009456:	693a      	ldr	r2, [r7, #16]
 8009458:	2100      	movs	r1, #0
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f7ff fd56 	bl	8008f0c <xTimerGenericCommand>
 8009460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10c      	bne.n	8009482 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	b672      	cpsid	i
 800946e:	f383 8811 	msr	BASEPRI, r3
 8009472:	f3bf 8f6f 	isb	sy
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	b662      	cpsie	i
 800947c:	603b      	str	r3, [r7, #0]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1af      	bne.n	80093ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009492:	4b06      	ldr	r3, [pc, #24]	; (80094ac <prvSwitchTimerLists+0xc8>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a04      	ldr	r2, [pc, #16]	; (80094a8 <prvSwitchTimerLists+0xc4>)
 8009498:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800949a:	4a04      	ldr	r2, [pc, #16]	; (80094ac <prvSwitchTimerLists+0xc8>)
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	6013      	str	r3, [r2, #0]
}
 80094a0:	bf00      	nop
 80094a2:	3718      	adds	r7, #24
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20000c8c 	.word	0x20000c8c
 80094ac:	20000c90 	.word	0x20000c90

080094b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80094b6:	f000 f949 	bl	800974c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80094ba:	4b15      	ldr	r3, [pc, #84]	; (8009510 <prvCheckForValidListAndQueue+0x60>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d120      	bne.n	8009504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80094c2:	4814      	ldr	r0, [pc, #80]	; (8009514 <prvCheckForValidListAndQueue+0x64>)
 80094c4:	f7fd face 	bl	8006a64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80094c8:	4813      	ldr	r0, [pc, #76]	; (8009518 <prvCheckForValidListAndQueue+0x68>)
 80094ca:	f7fd facb 	bl	8006a64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80094ce:	4b13      	ldr	r3, [pc, #76]	; (800951c <prvCheckForValidListAndQueue+0x6c>)
 80094d0:	4a10      	ldr	r2, [pc, #64]	; (8009514 <prvCheckForValidListAndQueue+0x64>)
 80094d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80094d4:	4b12      	ldr	r3, [pc, #72]	; (8009520 <prvCheckForValidListAndQueue+0x70>)
 80094d6:	4a10      	ldr	r2, [pc, #64]	; (8009518 <prvCheckForValidListAndQueue+0x68>)
 80094d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80094da:	2300      	movs	r3, #0
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	4b11      	ldr	r3, [pc, #68]	; (8009524 <prvCheckForValidListAndQueue+0x74>)
 80094e0:	4a11      	ldr	r2, [pc, #68]	; (8009528 <prvCheckForValidListAndQueue+0x78>)
 80094e2:	2110      	movs	r1, #16
 80094e4:	200a      	movs	r0, #10
 80094e6:	f7fd fbdb 	bl	8006ca0 <xQueueGenericCreateStatic>
 80094ea:	4603      	mov	r3, r0
 80094ec:	4a08      	ldr	r2, [pc, #32]	; (8009510 <prvCheckForValidListAndQueue+0x60>)
 80094ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <prvCheckForValidListAndQueue+0x60>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094f8:	4b05      	ldr	r3, [pc, #20]	; (8009510 <prvCheckForValidListAndQueue+0x60>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	490b      	ldr	r1, [pc, #44]	; (800952c <prvCheckForValidListAndQueue+0x7c>)
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fe fbec 	bl	8007cdc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009504:	f000 f956 	bl	80097b4 <vPortExitCritical>
}
 8009508:	bf00      	nop
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	20000c94 	.word	0x20000c94
 8009514:	20000c64 	.word	0x20000c64
 8009518:	20000c78 	.word	0x20000c78
 800951c:	20000c8c 	.word	0x20000c8c
 8009520:	20000c90 	.word	0x20000c90
 8009524:	20000d40 	.word	0x20000d40
 8009528:	20000ca0 	.word	0x20000ca0
 800952c:	08015200 	.word	0x08015200

08009530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	3b04      	subs	r3, #4
 8009540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	3b04      	subs	r3, #4
 800954e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f023 0201 	bic.w	r2, r3, #1
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b04      	subs	r3, #4
 800955e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009560:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <pxPortInitialiseStack+0x64>)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3b14      	subs	r3, #20
 800956a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3b04      	subs	r3, #4
 8009576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f06f 0202 	mvn.w	r2, #2
 800957e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3b20      	subs	r3, #32
 8009584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009586:	68fb      	ldr	r3, [r7, #12]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	08009599 	.word	0x08009599

08009598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009598:	b480      	push	{r7}
 800959a:	b085      	sub	sp, #20
 800959c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800959e:	2300      	movs	r3, #0
 80095a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095a2:	4b14      	ldr	r3, [pc, #80]	; (80095f4 <prvTaskExitError+0x5c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095aa:	d00c      	beq.n	80095c6 <prvTaskExitError+0x2e>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	b672      	cpsid	i
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	b662      	cpsie	i
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <prvTaskExitError+0x2c>
	__asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ca:	b672      	cpsid	i
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	b662      	cpsie	i
 80095da:	60bb      	str	r3, [r7, #8]
}
 80095dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80095de:	bf00      	nop
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0fc      	beq.n	80095e0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	2000000c 	.word	0x2000000c
	...

08009600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009600:	4b07      	ldr	r3, [pc, #28]	; (8009620 <pxCurrentTCBConst2>)
 8009602:	6819      	ldr	r1, [r3, #0]
 8009604:	6808      	ldr	r0, [r1, #0]
 8009606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	f380 8809 	msr	PSP, r0
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f04f 0000 	mov.w	r0, #0
 8009616:	f380 8811 	msr	BASEPRI, r0
 800961a:	4770      	bx	lr
 800961c:	f3af 8000 	nop.w

08009620 <pxCurrentTCBConst2>:
 8009620:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop

08009628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009628:	4808      	ldr	r0, [pc, #32]	; (800964c <prvPortStartFirstTask+0x24>)
 800962a:	6800      	ldr	r0, [r0, #0]
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f380 8808 	msr	MSP, r0
 8009632:	f04f 0000 	mov.w	r0, #0
 8009636:	f380 8814 	msr	CONTROL, r0
 800963a:	b662      	cpsie	i
 800963c:	b661      	cpsie	f
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	df00      	svc	0
 8009648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800964a:	bf00      	nop
 800964c:	e000ed08 	.word	0xe000ed08

08009650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009656:	4b37      	ldr	r3, [pc, #220]	; (8009734 <xPortStartScheduler+0xe4>)
 8009658:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b2db      	uxtb	r3, r3
 800966e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009670:	78fb      	ldrb	r3, [r7, #3]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009678:	b2da      	uxtb	r2, r3
 800967a:	4b2f      	ldr	r3, [pc, #188]	; (8009738 <xPortStartScheduler+0xe8>)
 800967c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800967e:	4b2f      	ldr	r3, [pc, #188]	; (800973c <xPortStartScheduler+0xec>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009684:	e009      	b.n	800969a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009686:	4b2d      	ldr	r3, [pc, #180]	; (800973c <xPortStartScheduler+0xec>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3b01      	subs	r3, #1
 800968c:	4a2b      	ldr	r2, [pc, #172]	; (800973c <xPortStartScheduler+0xec>)
 800968e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b2db      	uxtb	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	b2db      	uxtb	r3, r3
 8009698:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d0ef      	beq.n	8009686 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096a6:	4b25      	ldr	r3, [pc, #148]	; (800973c <xPortStartScheduler+0xec>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f1c3 0307 	rsb	r3, r3, #7
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d00c      	beq.n	80096cc <xPortStartScheduler+0x7c>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	60bb      	str	r3, [r7, #8]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096cc:	4b1b      	ldr	r3, [pc, #108]	; (800973c <xPortStartScheduler+0xec>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	021b      	lsls	r3, r3, #8
 80096d2:	4a1a      	ldr	r2, [pc, #104]	; (800973c <xPortStartScheduler+0xec>)
 80096d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d6:	4b19      	ldr	r3, [pc, #100]	; (800973c <xPortStartScheduler+0xec>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096de:	4a17      	ldr	r2, [pc, #92]	; (800973c <xPortStartScheduler+0xec>)
 80096e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096ea:	4b15      	ldr	r3, [pc, #84]	; (8009740 <xPortStartScheduler+0xf0>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a14      	ldr	r2, [pc, #80]	; (8009740 <xPortStartScheduler+0xf0>)
 80096f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <xPortStartScheduler+0xf0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a11      	ldr	r2, [pc, #68]	; (8009740 <xPortStartScheduler+0xf0>)
 80096fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009700:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009702:	f000 f8dd 	bl	80098c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <xPortStartScheduler+0xf4>)
 8009708:	2200      	movs	r2, #0
 800970a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800970c:	f000 f8fc 	bl	8009908 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009710:	4b0d      	ldr	r3, [pc, #52]	; (8009748 <xPortStartScheduler+0xf8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <xPortStartScheduler+0xf8>)
 8009716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800971a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800971c:	f7ff ff84 	bl	8009628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009720:	f7fe ff3a 	bl	8008598 <vTaskSwitchContext>
	prvTaskExitError();
 8009724:	f7ff ff38 	bl	8009598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	e000e400 	.word	0xe000e400
 8009738:	20000d90 	.word	0x20000d90
 800973c:	20000d94 	.word	0x20000d94
 8009740:	e000ed20 	.word	0xe000ed20
 8009744:	2000000c 	.word	0x2000000c
 8009748:	e000ef34 	.word	0xe000ef34

0800974c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	b672      	cpsid	i
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	b662      	cpsie	i
 8009766:	607b      	str	r3, [r7, #4]
}
 8009768:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800976a:	4b10      	ldr	r3, [pc, #64]	; (80097ac <vPortEnterCritical+0x60>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a0e      	ldr	r2, [pc, #56]	; (80097ac <vPortEnterCritical+0x60>)
 8009772:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009774:	4b0d      	ldr	r3, [pc, #52]	; (80097ac <vPortEnterCritical+0x60>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d111      	bne.n	80097a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800977c:	4b0c      	ldr	r3, [pc, #48]	; (80097b0 <vPortEnterCritical+0x64>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <vPortEnterCritical+0x54>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <vPortEnterCritical+0x52>
	}
}
 80097a0:	bf00      	nop
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	2000000c 	.word	0x2000000c
 80097b0:	e000ed04 	.word	0xe000ed04

080097b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097ba:	4b13      	ldr	r3, [pc, #76]	; (8009808 <vPortExitCritical+0x54>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10c      	bne.n	80097dc <vPortExitCritical+0x28>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c6:	b672      	cpsid	i
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	b662      	cpsie	i
 80097d6:	607b      	str	r3, [r7, #4]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <vPortExitCritical+0x54>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	4a09      	ldr	r2, [pc, #36]	; (8009808 <vPortExitCritical+0x54>)
 80097e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097e6:	4b08      	ldr	r3, [pc, #32]	; (8009808 <vPortExitCritical+0x54>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <vPortExitCritical+0x46>
 80097ee:	2300      	movs	r3, #0
 80097f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	f383 8811 	msr	BASEPRI, r3
}
 80097f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	2000000c 	.word	0x2000000c
 800980c:	00000000 	.word	0x00000000

08009810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009810:	f3ef 8009 	mrs	r0, PSP
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	4b15      	ldr	r3, [pc, #84]	; (8009870 <pxCurrentTCBConst>)
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	f01e 0f10 	tst.w	lr, #16
 8009820:	bf08      	it	eq
 8009822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982a:	6010      	str	r0, [r2, #0]
 800982c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009830:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009834:	b672      	cpsid	i
 8009836:	f380 8811 	msr	BASEPRI, r0
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	b662      	cpsie	i
 8009844:	f7fe fea8 	bl	8008598 <vTaskSwitchContext>
 8009848:	f04f 0000 	mov.w	r0, #0
 800984c:	f380 8811 	msr	BASEPRI, r0
 8009850:	bc09      	pop	{r0, r3}
 8009852:	6819      	ldr	r1, [r3, #0]
 8009854:	6808      	ldr	r0, [r1, #0]
 8009856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985a:	f01e 0f10 	tst.w	lr, #16
 800985e:	bf08      	it	eq
 8009860:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009864:	f380 8809 	msr	PSP, r0
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop

08009870 <pxCurrentTCBConst>:
 8009870:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009874:	bf00      	nop
 8009876:	bf00      	nop

08009878 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009882:	b672      	cpsid	i
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	b662      	cpsie	i
 8009892:	607b      	str	r3, [r7, #4]
}
 8009894:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009896:	f7fe fdc3 	bl	8008420 <xTaskIncrementTick>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d003      	beq.n	80098a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <SysTick_Handler+0x44>)
 80098a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	f383 8811 	msr	BASEPRI, r3
}
 80098b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098b4:	bf00      	nop
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098c0:	b480      	push	{r7}
 80098c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098c4:	4b0b      	ldr	r3, [pc, #44]	; (80098f4 <vPortSetupTimerInterrupt+0x34>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098ca:	4b0b      	ldr	r3, [pc, #44]	; (80098f8 <vPortSetupTimerInterrupt+0x38>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098d0:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <vPortSetupTimerInterrupt+0x3c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a0a      	ldr	r2, [pc, #40]	; (8009900 <vPortSetupTimerInterrupt+0x40>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	099b      	lsrs	r3, r3, #6
 80098dc:	4a09      	ldr	r2, [pc, #36]	; (8009904 <vPortSetupTimerInterrupt+0x44>)
 80098de:	3b01      	subs	r3, #1
 80098e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098e2:	4b04      	ldr	r3, [pc, #16]	; (80098f4 <vPortSetupTimerInterrupt+0x34>)
 80098e4:	2207      	movs	r2, #7
 80098e6:	601a      	str	r2, [r3, #0]
}
 80098e8:	bf00      	nop
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	e000e010 	.word	0xe000e010
 80098f8:	e000e018 	.word	0xe000e018
 80098fc:	20000000 	.word	0x20000000
 8009900:	10624dd3 	.word	0x10624dd3
 8009904:	e000e014 	.word	0xe000e014

08009908 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009908:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009918 <vPortEnableVFP+0x10>
 800990c:	6801      	ldr	r1, [r0, #0]
 800990e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009912:	6001      	str	r1, [r0, #0]
 8009914:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009916:	bf00      	nop
 8009918:	e000ed88 	.word	0xe000ed88

0800991c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009922:	f3ef 8305 	mrs	r3, IPSR
 8009926:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b0f      	cmp	r3, #15
 800992c:	d916      	bls.n	800995c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800992e:	4a19      	ldr	r2, [pc, #100]	; (8009994 <vPortValidateInterruptPriority+0x78>)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009938:	4b17      	ldr	r3, [pc, #92]	; (8009998 <vPortValidateInterruptPriority+0x7c>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	7afa      	ldrb	r2, [r7, #11]
 800993e:	429a      	cmp	r2, r3
 8009940:	d20c      	bcs.n	800995c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	607b      	str	r3, [r7, #4]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800995c:	4b0f      	ldr	r3, [pc, #60]	; (800999c <vPortValidateInterruptPriority+0x80>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <vPortValidateInterruptPriority+0x84>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d90c      	bls.n	8009986 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	b672      	cpsid	i
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	b662      	cpsie	i
 8009980:	603b      	str	r3, [r7, #0]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <vPortValidateInterruptPriority+0x68>
	}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	e000e3f0 	.word	0xe000e3f0
 8009998:	20000d90 	.word	0x20000d90
 800999c:	e000ed0c 	.word	0xe000ed0c
 80099a0:	20000d94 	.word	0x20000d94

080099a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08a      	sub	sp, #40	; 0x28
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80099b0:	f7fe fc66 	bl	8008280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099b4:	4b5b      	ldr	r3, [pc, #364]	; (8009b24 <pvPortMalloc+0x180>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d101      	bne.n	80099c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099bc:	f000 f91a 	bl	8009bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099c0:	4b59      	ldr	r3, [pc, #356]	; (8009b28 <pvPortMalloc+0x184>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4013      	ands	r3, r2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 8092 	bne.w	8009af2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d01f      	beq.n	8009a14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80099d4:	2208      	movs	r2, #8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4413      	add	r3, r2
 80099da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f023 0307 	bic.w	r3, r3, #7
 80099ec:	3308      	adds	r3, #8
 80099ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f003 0307 	and.w	r3, r3, #7
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <pvPortMalloc+0x70>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	b672      	cpsid	i
 8009a00:	f383 8811 	msr	BASEPRI, r3
 8009a04:	f3bf 8f6f 	isb	sy
 8009a08:	f3bf 8f4f 	dsb	sy
 8009a0c:	b662      	cpsie	i
 8009a0e:	617b      	str	r3, [r7, #20]
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d06b      	beq.n	8009af2 <pvPortMalloc+0x14e>
 8009a1a:	4b44      	ldr	r3, [pc, #272]	; (8009b2c <pvPortMalloc+0x188>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d866      	bhi.n	8009af2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a24:	4b42      	ldr	r3, [pc, #264]	; (8009b30 <pvPortMalloc+0x18c>)
 8009a26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a28:	4b41      	ldr	r3, [pc, #260]	; (8009b30 <pvPortMalloc+0x18c>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a2e:	e004      	b.n	8009a3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d903      	bls.n	8009a4c <pvPortMalloc+0xa8>
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f1      	bne.n	8009a30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a4c:	4b35      	ldr	r3, [pc, #212]	; (8009b24 <pvPortMalloc+0x180>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d04d      	beq.n	8009af2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a56:	6a3b      	ldr	r3, [r7, #32]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2208      	movs	r2, #8
 8009a5c:	4413      	add	r3, r2
 8009a5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	2308      	movs	r3, #8
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d921      	bls.n	8009abc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	f003 0307 	and.w	r3, r3, #7
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <pvPortMalloc+0x100>
	__asm volatile
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	b672      	cpsid	i
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	b662      	cpsie	i
 8009a9e:	613b      	str	r3, [r7, #16]
}
 8009aa0:	bf00      	nop
 8009aa2:	e7fe      	b.n	8009aa2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ab6:	69b8      	ldr	r0, [r7, #24]
 8009ab8:	f000 f8fe 	bl	8009cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009abc:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <pvPortMalloc+0x188>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <pvPortMalloc+0x188>)
 8009ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aca:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <pvPortMalloc+0x188>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <pvPortMalloc+0x190>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d203      	bcs.n	8009ade <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ad6:	4b15      	ldr	r3, [pc, #84]	; (8009b2c <pvPortMalloc+0x188>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a16      	ldr	r2, [pc, #88]	; (8009b34 <pvPortMalloc+0x190>)
 8009adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <pvPortMalloc+0x184>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009af2:	f7fe fbd3 	bl	800829c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00c      	beq.n	8009b1a <pvPortMalloc+0x176>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <pvPortMalloc+0x174>
	return pvReturn;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3728      	adds	r7, #40	; 0x28
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	200049a0 	.word	0x200049a0
 8009b28:	200049ac 	.word	0x200049ac
 8009b2c:	200049a4 	.word	0x200049a4
 8009b30:	20004998 	.word	0x20004998
 8009b34:	200049a8 	.word	0x200049a8

08009b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d04c      	beq.n	8009be4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4413      	add	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b23      	ldr	r3, [pc, #140]	; (8009bec <vPortFree+0xb4>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4013      	ands	r3, r2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10c      	bne.n	8009b80 <vPortFree+0x48>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6a:	b672      	cpsid	i
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	b662      	cpsie	i
 8009b7a:	60fb      	str	r3, [r7, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00c      	beq.n	8009ba2 <vPortFree+0x6a>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	60bb      	str	r3, [r7, #8]
}
 8009b9e:	bf00      	nop
 8009ba0:	e7fe      	b.n	8009ba0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <vPortFree+0xb4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d019      	beq.n	8009be4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d115      	bne.n	8009be4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <vPortFree+0xb4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	43db      	mvns	r3, r3
 8009bc2:	401a      	ands	r2, r3
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009bc8:	f7fe fb5a 	bl	8008280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <vPortFree+0xb8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	4a06      	ldr	r2, [pc, #24]	; (8009bf0 <vPortFree+0xb8>)
 8009bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bda:	6938      	ldr	r0, [r7, #16]
 8009bdc:	f000 f86c 	bl	8009cb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009be0:	f7fe fb5c 	bl	800829c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009be4:	bf00      	nop
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	200049ac 	.word	0x200049ac
 8009bf0:	200049a4 	.word	0x200049a4

08009bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <prvHeapInit+0xac>)
 8009c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f003 0307 	and.w	r3, r3, #7
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	3307      	adds	r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f023 0307 	bic.w	r3, r3, #7
 8009c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <prvHeapInit+0xac>)
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c2c:	4a1d      	ldr	r2, [pc, #116]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c32:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <prvHeapInit+0xb0>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c40:	2208      	movs	r2, #8
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0307 	bic.w	r3, r3, #7
 8009c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	1ad2      	subs	r2, r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c74:	4b0c      	ldr	r3, [pc, #48]	; (8009ca8 <prvHeapInit+0xb4>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <prvHeapInit+0xb8>)
 8009c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4a09      	ldr	r2, [pc, #36]	; (8009cb0 <prvHeapInit+0xbc>)
 8009c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <prvHeapInit+0xc0>)
 8009c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c92:	601a      	str	r2, [r3, #0]
}
 8009c94:	bf00      	nop
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	20000d98 	.word	0x20000d98
 8009ca4:	20004998 	.word	0x20004998
 8009ca8:	200049a0 	.word	0x200049a0
 8009cac:	200049a8 	.word	0x200049a8
 8009cb0:	200049a4 	.word	0x200049a4
 8009cb4:	200049ac 	.word	0x200049ac

08009cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cc0:	4b28      	ldr	r3, [pc, #160]	; (8009d64 <prvInsertBlockIntoFreeList+0xac>)
 8009cc2:	60fb      	str	r3, [r7, #12]
 8009cc4:	e002      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x14>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	60fb      	str	r3, [r7, #12]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d8f7      	bhi.n	8009cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d108      	bne.n	8009cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	441a      	add	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	441a      	add	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d118      	bne.n	8009d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b15      	ldr	r3, [pc, #84]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d00d      	beq.n	8009d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	441a      	add	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	601a      	str	r2, [r3, #0]
 8009d34:	e008      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <prvInsertBlockIntoFreeList+0xb0>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	e003      	b.n	8009d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d002      	beq.n	8009d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20004998 	.word	0x20004998
 8009d68:	200049a0 	.word	0x200049a0

08009d6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009d76:	f007 fa7b 	bl	8011270 <sys_timeouts_sleeptime>
 8009d7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d10b      	bne.n	8009d9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009d84:	4813      	ldr	r0, [pc, #76]	; (8009dd4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d86:	f00a f85e 	bl	8013e46 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f009 ffe6 	bl	8013d60 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009d94:	480f      	ldr	r0, [pc, #60]	; (8009dd4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009d96:	f00a f847 	bl	8013e28 <sys_mutex_lock>
    return;
 8009d9a:	e018      	b.n	8009dce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009da2:	f007 fa2b 	bl	80111fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009da6:	e7e6      	b.n	8009d76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009da8:	480a      	ldr	r0, [pc, #40]	; (8009dd4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009daa:	f00a f84c 	bl	8013e46 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f009 ffd4 	bl	8013d60 <sys_arch_mbox_fetch>
 8009db8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009dba:	4806      	ldr	r0, [pc, #24]	; (8009dd4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009dbc:	f00a f834 	bl	8013e28 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc6:	d102      	bne.n	8009dce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009dc8:	f007 fa18 	bl	80111fc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009dcc:	e7d3      	b.n	8009d76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	2000822c 	.word	0x2000822c

08009dd8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009de0:	4810      	ldr	r0, [pc, #64]	; (8009e24 <tcpip_thread+0x4c>)
 8009de2:	f00a f821 	bl	8013e28 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <tcpip_thread+0x50>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d005      	beq.n	8009dfa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009dee:	4b0e      	ldr	r3, [pc, #56]	; (8009e28 <tcpip_thread+0x50>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a0e      	ldr	r2, [pc, #56]	; (8009e2c <tcpip_thread+0x54>)
 8009df4:	6812      	ldr	r2, [r2, #0]
 8009df6:	4610      	mov	r0, r2
 8009df8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	4619      	mov	r1, r3
 8009e00:	480b      	ldr	r0, [pc, #44]	; (8009e30 <tcpip_thread+0x58>)
 8009e02:	f7ff ffb3 	bl	8009d6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d106      	bne.n	8009e1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <tcpip_thread+0x5c>)
 8009e0e:	2291      	movs	r2, #145	; 0x91
 8009e10:	4909      	ldr	r1, [pc, #36]	; (8009e38 <tcpip_thread+0x60>)
 8009e12:	480a      	ldr	r0, [pc, #40]	; (8009e3c <tcpip_thread+0x64>)
 8009e14:	f00a f8aa 	bl	8013f6c <iprintf>
      continue;
 8009e18:	e003      	b.n	8009e22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f80f 	bl	8009e40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009e22:	e7ea      	b.n	8009dfa <tcpip_thread+0x22>
 8009e24:	2000822c 	.word	0x2000822c
 8009e28:	200049b0 	.word	0x200049b0
 8009e2c:	200049b4 	.word	0x200049b4
 8009e30:	200049b8 	.word	0x200049b8
 8009e34:	08015208 	.word	0x08015208
 8009e38:	08015238 	.word	0x08015238
 8009e3c:	08015258 	.word	0x08015258

08009e40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d026      	beq.n	8009e9e <tcpip_thread_handle_msg+0x5e>
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	dc2b      	bgt.n	8009eac <tcpip_thread_handle_msg+0x6c>
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <tcpip_thread_handle_msg+0x1e>
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d015      	beq.n	8009e88 <tcpip_thread_handle_msg+0x48>
 8009e5c:	e026      	b.n	8009eac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6850      	ldr	r0, [r2, #4]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	6892      	ldr	r2, [r2, #8]
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4798      	blx	r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d004      	beq.n	8009e7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 fcc5 	bl	800b808 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009e7e:	6879      	ldr	r1, [r7, #4]
 8009e80:	2009      	movs	r0, #9
 8009e82:	f000 fe1d 	bl	800aac0 <memp_free>
      break;
 8009e86:	e018      	b.n	8009eba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6892      	ldr	r2, [r2, #8]
 8009e90:	4610      	mov	r0, r2
 8009e92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	2008      	movs	r0, #8
 8009e98:	f000 fe12 	bl	800aac0 <memp_free>
      break;
 8009e9c:	e00d      	b.n	8009eba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	6892      	ldr	r2, [r2, #8]
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	4798      	blx	r3
      break;
 8009eaa:	e006      	b.n	8009eba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009eac:	4b05      	ldr	r3, [pc, #20]	; (8009ec4 <tcpip_thread_handle_msg+0x84>)
 8009eae:	22cf      	movs	r2, #207	; 0xcf
 8009eb0:	4905      	ldr	r1, [pc, #20]	; (8009ec8 <tcpip_thread_handle_msg+0x88>)
 8009eb2:	4806      	ldr	r0, [pc, #24]	; (8009ecc <tcpip_thread_handle_msg+0x8c>)
 8009eb4:	f00a f85a 	bl	8013f6c <iprintf>
      break;
 8009eb8:	bf00      	nop
  }
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	bf00      	nop
 8009ec4:	08015208 	.word	0x08015208
 8009ec8:	08015238 	.word	0x08015238
 8009ecc:	08015258 	.word	0x08015258

08009ed0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009edc:	481a      	ldr	r0, [pc, #104]	; (8009f48 <tcpip_inpkt+0x78>)
 8009ede:	f009 ff70 	bl	8013dc2 <sys_mbox_valid>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d105      	bne.n	8009ef4 <tcpip_inpkt+0x24>
 8009ee8:	4b18      	ldr	r3, [pc, #96]	; (8009f4c <tcpip_inpkt+0x7c>)
 8009eea:	22fc      	movs	r2, #252	; 0xfc
 8009eec:	4918      	ldr	r1, [pc, #96]	; (8009f50 <tcpip_inpkt+0x80>)
 8009eee:	4819      	ldr	r0, [pc, #100]	; (8009f54 <tcpip_inpkt+0x84>)
 8009ef0:	f00a f83c 	bl	8013f6c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009ef4:	2009      	movs	r0, #9
 8009ef6:	f000 fd91 	bl	800aa1c <memp_malloc>
 8009efa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d102      	bne.n	8009f08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009f02:	f04f 33ff 	mov.w	r3, #4294967295
 8009f06:	e01a      	b.n	8009f3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009f20:	6979      	ldr	r1, [r7, #20]
 8009f22:	4809      	ldr	r0, [pc, #36]	; (8009f48 <tcpip_inpkt+0x78>)
 8009f24:	f009 ff02 	bl	8013d2c <sys_mbox_trypost>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d006      	beq.n	8009f3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f2e:	6979      	ldr	r1, [r7, #20]
 8009f30:	2009      	movs	r0, #9
 8009f32:	f000 fdc5 	bl	800aac0 <memp_free>
    return ERR_MEM;
 8009f36:	f04f 33ff 	mov.w	r3, #4294967295
 8009f3a:	e000      	b.n	8009f3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009f3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3718      	adds	r7, #24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	200049b8 	.word	0x200049b8
 8009f4c:	08015208 	.word	0x08015208
 8009f50:	08015280 	.word	0x08015280
 8009f54:	08015258 	.word	0x08015258

08009f58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f68:	f003 0318 	and.w	r3, r3, #24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d006      	beq.n	8009f7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009f70:	4a08      	ldr	r2, [pc, #32]	; (8009f94 <tcpip_input+0x3c>)
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffab 	bl	8009ed0 <tcpip_inpkt>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	e005      	b.n	8009f8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009f7e:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <tcpip_input+0x40>)
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7ff ffa4 	bl	8009ed0 <tcpip_inpkt>
 8009f88:	4603      	mov	r3, r0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	08013b4d 	.word	0x08013b4d
 8009f98:	0801293d 	.word	0x0801293d

08009f9c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009fa6:	4819      	ldr	r0, [pc, #100]	; (800a00c <tcpip_try_callback+0x70>)
 8009fa8:	f009 ff0b 	bl	8013dc2 <sys_mbox_valid>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d106      	bne.n	8009fc0 <tcpip_try_callback+0x24>
 8009fb2:	4b17      	ldr	r3, [pc, #92]	; (800a010 <tcpip_try_callback+0x74>)
 8009fb4:	f240 125d 	movw	r2, #349	; 0x15d
 8009fb8:	4916      	ldr	r1, [pc, #88]	; (800a014 <tcpip_try_callback+0x78>)
 8009fba:	4817      	ldr	r0, [pc, #92]	; (800a018 <tcpip_try_callback+0x7c>)
 8009fbc:	f009 ffd6 	bl	8013f6c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009fc0:	2008      	movs	r0, #8
 8009fc2:	f000 fd2b 	bl	800aa1c <memp_malloc>
 8009fc6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd2:	e017      	b.n	800a004 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009fe6:	68f9      	ldr	r1, [r7, #12]
 8009fe8:	4808      	ldr	r0, [pc, #32]	; (800a00c <tcpip_try_callback+0x70>)
 8009fea:	f009 fe9f 	bl	8013d2c <sys_mbox_trypost>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d006      	beq.n	800a002 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009ff4:	68f9      	ldr	r1, [r7, #12]
 8009ff6:	2008      	movs	r0, #8
 8009ff8:	f000 fd62 	bl	800aac0 <memp_free>
    return ERR_MEM;
 8009ffc:	f04f 33ff 	mov.w	r3, #4294967295
 800a000:	e000      	b.n	800a004 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200049b8 	.word	0x200049b8
 800a010:	08015208 	.word	0x08015208
 800a014:	08015280 	.word	0x08015280
 800a018:	08015258 	.word	0x08015258

0800a01c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af02      	add	r7, sp, #8
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a026:	f000 f871 	bl	800a10c <lwip_init>

  tcpip_init_done = initfunc;
 800a02a:	4a17      	ldr	r2, [pc, #92]	; (800a088 <tcpip_init+0x6c>)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a030:	4a16      	ldr	r2, [pc, #88]	; (800a08c <tcpip_init+0x70>)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a036:	2106      	movs	r1, #6
 800a038:	4815      	ldr	r0, [pc, #84]	; (800a090 <tcpip_init+0x74>)
 800a03a:	f009 fe5d 	bl	8013cf8 <sys_mbox_new>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d006      	beq.n	800a052 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a044:	4b13      	ldr	r3, [pc, #76]	; (800a094 <tcpip_init+0x78>)
 800a046:	f240 2261 	movw	r2, #609	; 0x261
 800a04a:	4913      	ldr	r1, [pc, #76]	; (800a098 <tcpip_init+0x7c>)
 800a04c:	4813      	ldr	r0, [pc, #76]	; (800a09c <tcpip_init+0x80>)
 800a04e:	f009 ff8d 	bl	8013f6c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a052:	4813      	ldr	r0, [pc, #76]	; (800a0a0 <tcpip_init+0x84>)
 800a054:	f009 fed2 	bl	8013dfc <sys_mutex_new>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d006      	beq.n	800a06c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a05e:	4b0d      	ldr	r3, [pc, #52]	; (800a094 <tcpip_init+0x78>)
 800a060:	f240 2265 	movw	r2, #613	; 0x265
 800a064:	490f      	ldr	r1, [pc, #60]	; (800a0a4 <tcpip_init+0x88>)
 800a066:	480d      	ldr	r0, [pc, #52]	; (800a09c <tcpip_init+0x80>)
 800a068:	f009 ff80 	bl	8013f6c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a06c:	2318      	movs	r3, #24
 800a06e:	9300      	str	r3, [sp, #0]
 800a070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a074:	2200      	movs	r2, #0
 800a076:	490c      	ldr	r1, [pc, #48]	; (800a0a8 <tcpip_init+0x8c>)
 800a078:	480c      	ldr	r0, [pc, #48]	; (800a0ac <tcpip_init+0x90>)
 800a07a:	f009 fef1 	bl	8013e60 <sys_thread_new>
}
 800a07e:	bf00      	nop
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	200049b0 	.word	0x200049b0
 800a08c:	200049b4 	.word	0x200049b4
 800a090:	200049b8 	.word	0x200049b8
 800a094:	08015208 	.word	0x08015208
 800a098:	08015290 	.word	0x08015290
 800a09c:	08015258 	.word	0x08015258
 800a0a0:	2000822c 	.word	0x2000822c
 800a0a4:	080152b4 	.word	0x080152b4
 800a0a8:	08009dd9 	.word	0x08009dd9
 800a0ac:	080152d8 	.word	0x080152d8

0800a0b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	021b      	lsls	r3, r3, #8
 800a0be:	b21a      	sxth	r2, r3
 800a0c0:	88fb      	ldrh	r3, [r7, #6]
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	b21b      	sxth	r3, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	b21b      	sxth	r3, r3
 800a0cc:	b29b      	uxth	r3, r3
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b083      	sub	sp, #12
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	061a      	lsls	r2, r3, #24
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	021b      	lsls	r3, r3, #8
 800a0ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	0a1b      	lsrs	r3, r3, #8
 800a0f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0e1b      	lsrs	r3, r3, #24
 800a0fe:	4313      	orrs	r3, r2
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a116:	f009 fe65 	bl	8013de4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a11a:	f000 f8d5 	bl	800a2c8 <mem_init>
  memp_init();
 800a11e:	f000 fc31 	bl	800a984 <memp_init>
  pbuf_init();
  netif_init();
 800a122:	f000 fcf7 	bl	800ab14 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a126:	f007 f8db 	bl	80112e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a12a:	f001 fe07 	bl	800bd3c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a12e:	f007 f81d 	bl	801116c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a132:	bf00      	nop
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <ptr_to_mem+0x20>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	88fb      	ldrh	r3, [r7, #6]
 800a14c:	4413      	add	r3, r2
}
 800a14e:	4618      	mov	r0, r3
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	200049bc 	.word	0x200049bc

0800a160 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a168:	4b05      	ldr	r3, [pc, #20]	; (800a180 <mem_to_ptr+0x20>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	b29b      	uxth	r3, r3
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	200049bc 	.word	0x200049bc

0800a184 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a184:	b590      	push	{r4, r7, lr}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a18c:	4b45      	ldr	r3, [pc, #276]	; (800a2a4 <plug_holes+0x120>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	429a      	cmp	r2, r3
 800a194:	d206      	bcs.n	800a1a4 <plug_holes+0x20>
 800a196:	4b44      	ldr	r3, [pc, #272]	; (800a2a8 <plug_holes+0x124>)
 800a198:	f240 12df 	movw	r2, #479	; 0x1df
 800a19c:	4943      	ldr	r1, [pc, #268]	; (800a2ac <plug_holes+0x128>)
 800a19e:	4844      	ldr	r0, [pc, #272]	; (800a2b0 <plug_holes+0x12c>)
 800a1a0:	f009 fee4 	bl	8013f6c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a1a4:	4b43      	ldr	r3, [pc, #268]	; (800a2b4 <plug_holes+0x130>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d306      	bcc.n	800a1bc <plug_holes+0x38>
 800a1ae:	4b3e      	ldr	r3, [pc, #248]	; (800a2a8 <plug_holes+0x124>)
 800a1b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a1b4:	4940      	ldr	r1, [pc, #256]	; (800a2b8 <plug_holes+0x134>)
 800a1b6:	483e      	ldr	r0, [pc, #248]	; (800a2b0 <plug_holes+0x12c>)
 800a1b8:	f009 fed8 	bl	8013f6c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	791b      	ldrb	r3, [r3, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <plug_holes+0x4e>
 800a1c4:	4b38      	ldr	r3, [pc, #224]	; (800a2a8 <plug_holes+0x124>)
 800a1c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a1ca:	493c      	ldr	r1, [pc, #240]	; (800a2bc <plug_holes+0x138>)
 800a1cc:	4838      	ldr	r0, [pc, #224]	; (800a2b0 <plug_holes+0x12c>)
 800a1ce:	f009 fecd 	bl	8013f6c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	881b      	ldrh	r3, [r3, #0]
 800a1d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1da:	d906      	bls.n	800a1ea <plug_holes+0x66>
 800a1dc:	4b32      	ldr	r3, [pc, #200]	; (800a2a8 <plug_holes+0x124>)
 800a1de:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a1e2:	4937      	ldr	r1, [pc, #220]	; (800a2c0 <plug_holes+0x13c>)
 800a1e4:	4832      	ldr	r0, [pc, #200]	; (800a2b0 <plug_holes+0x12c>)
 800a1e6:	f009 fec1 	bl	8013f6c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7ff ffa4 	bl	800a13c <ptr_to_mem>
 800a1f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d024      	beq.n	800a248 <plug_holes+0xc4>
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	791b      	ldrb	r3, [r3, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d120      	bne.n	800a248 <plug_holes+0xc4>
 800a206:	4b2b      	ldr	r3, [pc, #172]	; (800a2b4 <plug_holes+0x130>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d01b      	beq.n	800a248 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a210:	4b2c      	ldr	r3, [pc, #176]	; (800a2c4 <plug_holes+0x140>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	429a      	cmp	r2, r3
 800a218:	d102      	bne.n	800a220 <plug_holes+0x9c>
      lfree = mem;
 800a21a:	4a2a      	ldr	r2, [pc, #168]	; (800a2c4 <plug_holes+0x140>)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	881a      	ldrh	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a230:	d00a      	beq.n	800a248 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff ff80 	bl	800a13c <ptr_to_mem>
 800a23c:	4604      	mov	r4, r0
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f7ff ff8e 	bl	800a160 <mem_to_ptr>
 800a244:	4603      	mov	r3, r0
 800a246:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	885b      	ldrh	r3, [r3, #2]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7ff ff75 	bl	800a13c <ptr_to_mem>
 800a252:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d01f      	beq.n	800a29c <plug_holes+0x118>
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	791b      	ldrb	r3, [r3, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d11b      	bne.n	800a29c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a264:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <plug_holes+0x140>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d102      	bne.n	800a274 <plug_holes+0xf0>
      lfree = pmem;
 800a26e:	4a15      	ldr	r2, [pc, #84]	; (800a2c4 <plug_holes+0x140>)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	881a      	ldrh	r2, [r3, #0]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a284:	d00a      	beq.n	800a29c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff ff56 	bl	800a13c <ptr_to_mem>
 800a290:	4604      	mov	r4, r0
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f7ff ff64 	bl	800a160 <mem_to_ptr>
 800a298:	4603      	mov	r3, r0
 800a29a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a29c:	bf00      	nop
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd90      	pop	{r4, r7, pc}
 800a2a4:	200049bc 	.word	0x200049bc
 800a2a8:	080152e8 	.word	0x080152e8
 800a2ac:	08015318 	.word	0x08015318
 800a2b0:	08015330 	.word	0x08015330
 800a2b4:	200049c0 	.word	0x200049c0
 800a2b8:	08015358 	.word	0x08015358
 800a2bc:	08015374 	.word	0x08015374
 800a2c0:	08015390 	.word	0x08015390
 800a2c4:	200049c8 	.word	0x200049c8

0800a2c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a2ce:	4b1f      	ldr	r3, [pc, #124]	; (800a34c <mem_init+0x84>)
 800a2d0:	3303      	adds	r3, #3
 800a2d2:	f023 0303 	bic.w	r3, r3, #3
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	4b1d      	ldr	r3, [pc, #116]	; (800a350 <mem_init+0x88>)
 800a2da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a2dc:	4b1c      	ldr	r3, [pc, #112]	; (800a350 <mem_init+0x88>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a2f6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a2fa:	f7ff ff1f 	bl	800a13c <ptr_to_mem>
 800a2fe:	4603      	mov	r3, r0
 800a300:	4a14      	ldr	r2, [pc, #80]	; (800a354 <mem_init+0x8c>)
 800a302:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a304:	4b13      	ldr	r3, [pc, #76]	; (800a354 <mem_init+0x8c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2201      	movs	r2, #1
 800a30a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a30c:	4b11      	ldr	r3, [pc, #68]	; (800a354 <mem_init+0x8c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a314:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a316:	4b0f      	ldr	r3, [pc, #60]	; (800a354 <mem_init+0x8c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a31e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <mem_init+0x88>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a0c      	ldr	r2, [pc, #48]	; (800a358 <mem_init+0x90>)
 800a326:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a328:	480c      	ldr	r0, [pc, #48]	; (800a35c <mem_init+0x94>)
 800a32a:	f009 fd67 	bl	8013dfc <sys_mutex_new>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a334:	4b0a      	ldr	r3, [pc, #40]	; (800a360 <mem_init+0x98>)
 800a336:	f240 221f 	movw	r2, #543	; 0x21f
 800a33a:	490a      	ldr	r1, [pc, #40]	; (800a364 <mem_init+0x9c>)
 800a33c:	480a      	ldr	r0, [pc, #40]	; (800a368 <mem_init+0xa0>)
 800a33e:	f009 fe15 	bl	8013f6c <iprintf>
  }
}
 800a342:	bf00      	nop
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20008248 	.word	0x20008248
 800a350:	200049bc 	.word	0x200049bc
 800a354:	200049c0 	.word	0x200049c0
 800a358:	200049c8 	.word	0x200049c8
 800a35c:	200049c4 	.word	0x200049c4
 800a360:	080152e8 	.word	0x080152e8
 800a364:	080153bc 	.word	0x080153bc
 800a368:	08015330 	.word	0x08015330

0800a36c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fef3 	bl	800a160 <mem_to_ptr>
 800a37a:	4603      	mov	r3, r0
 800a37c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	881b      	ldrh	r3, [r3, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff feda 	bl	800a13c <ptr_to_mem>
 800a388:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	885b      	ldrh	r3, [r3, #2]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fed4 	bl	800a13c <ptr_to_mem>
 800a394:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	881b      	ldrh	r3, [r3, #0]
 800a39a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a39e:	d818      	bhi.n	800a3d2 <mem_link_valid+0x66>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	885b      	ldrh	r3, [r3, #2]
 800a3a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3a8:	d813      	bhi.n	800a3d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a3ae:	8afa      	ldrh	r2, [r7, #22]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d004      	beq.n	800a3be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	881b      	ldrh	r3, [r3, #0]
 800a3b8:	8afa      	ldrh	r2, [r7, #22]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d109      	bne.n	800a3d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3be:	4b08      	ldr	r3, [pc, #32]	; (800a3e0 <mem_link_valid+0x74>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d006      	beq.n	800a3d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	885b      	ldrh	r3, [r3, #2]
 800a3cc:	8afa      	ldrh	r2, [r7, #22]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d001      	beq.n	800a3d6 <mem_link_valid+0x6a>
    return 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e000      	b.n	800a3d8 <mem_link_valid+0x6c>
  }
  return 1;
 800a3d6:	2301      	movs	r3, #1
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	200049c0 	.word	0x200049c0

0800a3e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b088      	sub	sp, #32
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d070      	beq.n	800a4d4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f003 0303 	and.w	r3, r3, #3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00d      	beq.n	800a418 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a3fc:	4b37      	ldr	r3, [pc, #220]	; (800a4dc <mem_free+0xf8>)
 800a3fe:	f240 2273 	movw	r2, #627	; 0x273
 800a402:	4937      	ldr	r1, [pc, #220]	; (800a4e0 <mem_free+0xfc>)
 800a404:	4837      	ldr	r0, [pc, #220]	; (800a4e4 <mem_free+0x100>)
 800a406:	f009 fdb1 	bl	8013f6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a40a:	f009 fd49 	bl	8013ea0 <sys_arch_protect>
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f009 fd53 	bl	8013ebc <sys_arch_unprotect>
    return;
 800a416:	e05e      	b.n	800a4d6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3b08      	subs	r3, #8
 800a41c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a41e:	4b32      	ldr	r3, [pc, #200]	; (800a4e8 <mem_free+0x104>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	429a      	cmp	r2, r3
 800a426:	d306      	bcc.n	800a436 <mem_free+0x52>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f103 020c 	add.w	r2, r3, #12
 800a42e:	4b2f      	ldr	r3, [pc, #188]	; (800a4ec <mem_free+0x108>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d90d      	bls.n	800a452 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a436:	4b29      	ldr	r3, [pc, #164]	; (800a4dc <mem_free+0xf8>)
 800a438:	f240 227f 	movw	r2, #639	; 0x27f
 800a43c:	492c      	ldr	r1, [pc, #176]	; (800a4f0 <mem_free+0x10c>)
 800a43e:	4829      	ldr	r0, [pc, #164]	; (800a4e4 <mem_free+0x100>)
 800a440:	f009 fd94 	bl	8013f6c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a444:	f009 fd2c 	bl	8013ea0 <sys_arch_protect>
 800a448:	6138      	str	r0, [r7, #16]
 800a44a:	6938      	ldr	r0, [r7, #16]
 800a44c:	f009 fd36 	bl	8013ebc <sys_arch_unprotect>
    return;
 800a450:	e041      	b.n	800a4d6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a452:	4828      	ldr	r0, [pc, #160]	; (800a4f4 <mem_free+0x110>)
 800a454:	f009 fce8 	bl	8013e28 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	791b      	ldrb	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d110      	bne.n	800a482 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a460:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <mem_free+0xf8>)
 800a462:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a466:	4924      	ldr	r1, [pc, #144]	; (800a4f8 <mem_free+0x114>)
 800a468:	481e      	ldr	r0, [pc, #120]	; (800a4e4 <mem_free+0x100>)
 800a46a:	f009 fd7f 	bl	8013f6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a46e:	4821      	ldr	r0, [pc, #132]	; (800a4f4 <mem_free+0x110>)
 800a470:	f009 fce9 	bl	8013e46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a474:	f009 fd14 	bl	8013ea0 <sys_arch_protect>
 800a478:	6178      	str	r0, [r7, #20]
 800a47a:	6978      	ldr	r0, [r7, #20]
 800a47c:	f009 fd1e 	bl	8013ebc <sys_arch_unprotect>
    return;
 800a480:	e029      	b.n	800a4d6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a482:	69f8      	ldr	r0, [r7, #28]
 800a484:	f7ff ff72 	bl	800a36c <mem_link_valid>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d110      	bne.n	800a4b0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a48e:	4b13      	ldr	r3, [pc, #76]	; (800a4dc <mem_free+0xf8>)
 800a490:	f240 2295 	movw	r2, #661	; 0x295
 800a494:	4919      	ldr	r1, [pc, #100]	; (800a4fc <mem_free+0x118>)
 800a496:	4813      	ldr	r0, [pc, #76]	; (800a4e4 <mem_free+0x100>)
 800a498:	f009 fd68 	bl	8013f6c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a49c:	4815      	ldr	r0, [pc, #84]	; (800a4f4 <mem_free+0x110>)
 800a49e:	f009 fcd2 	bl	8013e46 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a4a2:	f009 fcfd 	bl	8013ea0 <sys_arch_protect>
 800a4a6:	61b8      	str	r0, [r7, #24]
 800a4a8:	69b8      	ldr	r0, [r7, #24]
 800a4aa:	f009 fd07 	bl	8013ebc <sys_arch_unprotect>
    return;
 800a4ae:	e012      	b.n	800a4d6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a4b6:	4b12      	ldr	r3, [pc, #72]	; (800a500 <mem_free+0x11c>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	69fa      	ldr	r2, [r7, #28]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d202      	bcs.n	800a4c6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a4c0:	4a0f      	ldr	r2, [pc, #60]	; (800a500 <mem_free+0x11c>)
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a4c6:	69f8      	ldr	r0, [r7, #28]
 800a4c8:	f7ff fe5c 	bl	800a184 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a4cc:	4809      	ldr	r0, [pc, #36]	; (800a4f4 <mem_free+0x110>)
 800a4ce:	f009 fcba 	bl	8013e46 <sys_mutex_unlock>
 800a4d2:	e000      	b.n	800a4d6 <mem_free+0xf2>
    return;
 800a4d4:	bf00      	nop
}
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}
 800a4dc:	080152e8 	.word	0x080152e8
 800a4e0:	080153d8 	.word	0x080153d8
 800a4e4:	08015330 	.word	0x08015330
 800a4e8:	200049bc 	.word	0x200049bc
 800a4ec:	200049c0 	.word	0x200049c0
 800a4f0:	080153fc 	.word	0x080153fc
 800a4f4:	200049c4 	.word	0x200049c4
 800a4f8:	08015418 	.word	0x08015418
 800a4fc:	08015440 	.word	0x08015440
 800a500:	200049c8 	.word	0x200049c8

0800a504 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a510:	887b      	ldrh	r3, [r7, #2]
 800a512:	3303      	adds	r3, #3
 800a514:	b29b      	uxth	r3, r3
 800a516:	f023 0303 	bic.w	r3, r3, #3
 800a51a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a51c:	8bfb      	ldrh	r3, [r7, #30]
 800a51e:	2b0b      	cmp	r3, #11
 800a520:	d801      	bhi.n	800a526 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a522:	230c      	movs	r3, #12
 800a524:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a526:	8bfb      	ldrh	r3, [r7, #30]
 800a528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a52c:	d803      	bhi.n	800a536 <mem_trim+0x32>
 800a52e:	8bfa      	ldrh	r2, [r7, #30]
 800a530:	887b      	ldrh	r3, [r7, #2]
 800a532:	429a      	cmp	r2, r3
 800a534:	d201      	bcs.n	800a53a <mem_trim+0x36>
    return NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	e0d8      	b.n	800a6ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a53a:	4b6e      	ldr	r3, [pc, #440]	; (800a6f4 <mem_trim+0x1f0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d304      	bcc.n	800a54e <mem_trim+0x4a>
 800a544:	4b6c      	ldr	r3, [pc, #432]	; (800a6f8 <mem_trim+0x1f4>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d306      	bcc.n	800a55c <mem_trim+0x58>
 800a54e:	4b6b      	ldr	r3, [pc, #428]	; (800a6fc <mem_trim+0x1f8>)
 800a550:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a554:	496a      	ldr	r1, [pc, #424]	; (800a700 <mem_trim+0x1fc>)
 800a556:	486b      	ldr	r0, [pc, #428]	; (800a704 <mem_trim+0x200>)
 800a558:	f009 fd08 	bl	8013f6c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a55c:	4b65      	ldr	r3, [pc, #404]	; (800a6f4 <mem_trim+0x1f0>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	429a      	cmp	r2, r3
 800a564:	d304      	bcc.n	800a570 <mem_trim+0x6c>
 800a566:	4b64      	ldr	r3, [pc, #400]	; (800a6f8 <mem_trim+0x1f4>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d307      	bcc.n	800a580 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a570:	f009 fc96 	bl	8013ea0 <sys_arch_protect>
 800a574:	60b8      	str	r0, [r7, #8]
 800a576:	68b8      	ldr	r0, [r7, #8]
 800a578:	f009 fca0 	bl	8013ebc <sys_arch_unprotect>
    return rmem;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	e0b5      	b.n	800a6ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3b08      	subs	r3, #8
 800a584:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7ff fdea 	bl	800a160 <mem_to_ptr>
 800a58c:	4603      	mov	r3, r0
 800a58e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	8afb      	ldrh	r3, [r7, #22]
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	b29b      	uxth	r3, r3
 800a59a:	3b08      	subs	r3, #8
 800a59c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a59e:	8bfa      	ldrh	r2, [r7, #30]
 800a5a0:	8abb      	ldrh	r3, [r7, #20]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d906      	bls.n	800a5b4 <mem_trim+0xb0>
 800a5a6:	4b55      	ldr	r3, [pc, #340]	; (800a6fc <mem_trim+0x1f8>)
 800a5a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a5ac:	4956      	ldr	r1, [pc, #344]	; (800a708 <mem_trim+0x204>)
 800a5ae:	4855      	ldr	r0, [pc, #340]	; (800a704 <mem_trim+0x200>)
 800a5b0:	f009 fcdc 	bl	8013f6c <iprintf>
  if (newsize > size) {
 800a5b4:	8bfa      	ldrh	r2, [r7, #30]
 800a5b6:	8abb      	ldrh	r3, [r7, #20]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d901      	bls.n	800a5c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e095      	b.n	800a6ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a5c0:	8bfa      	ldrh	r2, [r7, #30]
 800a5c2:	8abb      	ldrh	r3, [r7, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d101      	bne.n	800a5cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	e08f      	b.n	800a6ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a5cc:	484f      	ldr	r0, [pc, #316]	; (800a70c <mem_trim+0x208>)
 800a5ce:	f009 fc2b 	bl	8013e28 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fdb0 	bl	800a13c <ptr_to_mem>
 800a5dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	791b      	ldrb	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d13f      	bne.n	800a666 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5ee:	d106      	bne.n	800a5fe <mem_trim+0xfa>
 800a5f0:	4b42      	ldr	r3, [pc, #264]	; (800a6fc <mem_trim+0x1f8>)
 800a5f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a5f6:	4946      	ldr	r1, [pc, #280]	; (800a710 <mem_trim+0x20c>)
 800a5f8:	4842      	ldr	r0, [pc, #264]	; (800a704 <mem_trim+0x200>)
 800a5fa:	f009 fcb7 	bl	8013f6c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a604:	8afa      	ldrh	r2, [r7, #22]
 800a606:	8bfb      	ldrh	r3, [r7, #30]
 800a608:	4413      	add	r3, r2
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	3308      	adds	r3, #8
 800a60e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a610:	4b40      	ldr	r3, [pc, #256]	; (800a714 <mem_trim+0x210>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	693a      	ldr	r2, [r7, #16]
 800a616:	429a      	cmp	r2, r3
 800a618:	d106      	bne.n	800a628 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a61a:	89fb      	ldrh	r3, [r7, #14]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fd8d 	bl	800a13c <ptr_to_mem>
 800a622:	4603      	mov	r3, r0
 800a624:	4a3b      	ldr	r2, [pc, #236]	; (800a714 <mem_trim+0x210>)
 800a626:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a628:	89fb      	ldrh	r3, [r7, #14]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fd86 	bl	800a13c <ptr_to_mem>
 800a630:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2200      	movs	r2, #0
 800a636:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	89ba      	ldrh	r2, [r7, #12]
 800a63c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	8afa      	ldrh	r2, [r7, #22]
 800a642:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a644:	69bb      	ldr	r3, [r7, #24]
 800a646:	89fa      	ldrh	r2, [r7, #14]
 800a648:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a652:	d047      	beq.n	800a6e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	881b      	ldrh	r3, [r3, #0]
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fd6f 	bl	800a13c <ptr_to_mem>
 800a65e:	4602      	mov	r2, r0
 800a660:	89fb      	ldrh	r3, [r7, #14]
 800a662:	8053      	strh	r3, [r2, #2]
 800a664:	e03e      	b.n	800a6e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a666:	8bfb      	ldrh	r3, [r7, #30]
 800a668:	f103 0214 	add.w	r2, r3, #20
 800a66c:	8abb      	ldrh	r3, [r7, #20]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d838      	bhi.n	800a6e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a672:	8afa      	ldrh	r2, [r7, #22]
 800a674:	8bfb      	ldrh	r3, [r7, #30]
 800a676:	4413      	add	r3, r2
 800a678:	b29b      	uxth	r3, r3
 800a67a:	3308      	adds	r3, #8
 800a67c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	881b      	ldrh	r3, [r3, #0]
 800a682:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a686:	d106      	bne.n	800a696 <mem_trim+0x192>
 800a688:	4b1c      	ldr	r3, [pc, #112]	; (800a6fc <mem_trim+0x1f8>)
 800a68a:	f240 3216 	movw	r2, #790	; 0x316
 800a68e:	4920      	ldr	r1, [pc, #128]	; (800a710 <mem_trim+0x20c>)
 800a690:	481c      	ldr	r0, [pc, #112]	; (800a704 <mem_trim+0x200>)
 800a692:	f009 fc6b 	bl	8013f6c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a696:	89fb      	ldrh	r3, [r7, #14]
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fd4f 	bl	800a13c <ptr_to_mem>
 800a69e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a6a0:	4b1c      	ldr	r3, [pc, #112]	; (800a714 <mem_trim+0x210>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d202      	bcs.n	800a6b0 <mem_trim+0x1ac>
      lfree = mem2;
 800a6aa:	4a1a      	ldr	r2, [pc, #104]	; (800a714 <mem_trim+0x210>)
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	881a      	ldrh	r2, [r3, #0]
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	8afa      	ldrh	r2, [r7, #22]
 800a6c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	89fa      	ldrh	r2, [r7, #14]
 800a6c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6d2:	d007      	beq.n	800a6e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	881b      	ldrh	r3, [r3, #0]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fd2f 	bl	800a13c <ptr_to_mem>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	89fb      	ldrh	r3, [r7, #14]
 800a6e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a6e4:	4809      	ldr	r0, [pc, #36]	; (800a70c <mem_trim+0x208>)
 800a6e6:	f009 fbae 	bl	8013e46 <sys_mutex_unlock>
  return rmem;
 800a6ea:	687b      	ldr	r3, [r7, #4]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3720      	adds	r7, #32
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	200049bc 	.word	0x200049bc
 800a6f8:	200049c0 	.word	0x200049c0
 800a6fc:	080152e8 	.word	0x080152e8
 800a700:	08015474 	.word	0x08015474
 800a704:	08015330 	.word	0x08015330
 800a708:	0801548c 	.word	0x0801548c
 800a70c:	200049c4 	.word	0x200049c4
 800a710:	080154ac 	.word	0x080154ac
 800a714:	200049c8 	.word	0x200049c8

0800a718 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a722:	88fb      	ldrh	r3, [r7, #6]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <mem_malloc+0x14>
    return NULL;
 800a728:	2300      	movs	r3, #0
 800a72a:	e0e2      	b.n	800a8f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	3303      	adds	r3, #3
 800a730:	b29b      	uxth	r3, r3
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a738:	8bbb      	ldrh	r3, [r7, #28]
 800a73a:	2b0b      	cmp	r3, #11
 800a73c:	d801      	bhi.n	800a742 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a73e:	230c      	movs	r3, #12
 800a740:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a742:	8bbb      	ldrh	r3, [r7, #28]
 800a744:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a748:	d803      	bhi.n	800a752 <mem_malloc+0x3a>
 800a74a:	8bba      	ldrh	r2, [r7, #28]
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d201      	bcs.n	800a756 <mem_malloc+0x3e>
    return NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	e0cd      	b.n	800a8f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a756:	4869      	ldr	r0, [pc, #420]	; (800a8fc <mem_malloc+0x1e4>)
 800a758:	f009 fb66 	bl	8013e28 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a75c:	4b68      	ldr	r3, [pc, #416]	; (800a900 <mem_malloc+0x1e8>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4618      	mov	r0, r3
 800a762:	f7ff fcfd 	bl	800a160 <mem_to_ptr>
 800a766:	4603      	mov	r3, r0
 800a768:	83fb      	strh	r3, [r7, #30]
 800a76a:	e0b7      	b.n	800a8dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a76c:	8bfb      	ldrh	r3, [r7, #30]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fce4 	bl	800a13c <ptr_to_mem>
 800a774:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	791b      	ldrb	r3, [r3, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	f040 80a7 	bne.w	800a8ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	881b      	ldrh	r3, [r3, #0]
 800a784:	461a      	mov	r2, r3
 800a786:	8bfb      	ldrh	r3, [r7, #30]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	f1a3 0208 	sub.w	r2, r3, #8
 800a78e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a790:	429a      	cmp	r2, r3
 800a792:	f0c0 809c 	bcc.w	800a8ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	8bfb      	ldrh	r3, [r7, #30]
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	f1a3 0208 	sub.w	r2, r3, #8
 800a7a4:	8bbb      	ldrh	r3, [r7, #28]
 800a7a6:	3314      	adds	r3, #20
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d333      	bcc.n	800a814 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a7ac:	8bfa      	ldrh	r2, [r7, #30]
 800a7ae:	8bbb      	ldrh	r3, [r7, #28]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a7b8:	8a7b      	ldrh	r3, [r7, #18]
 800a7ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7be:	d106      	bne.n	800a7ce <mem_malloc+0xb6>
 800a7c0:	4b50      	ldr	r3, [pc, #320]	; (800a904 <mem_malloc+0x1ec>)
 800a7c2:	f240 3287 	movw	r2, #903	; 0x387
 800a7c6:	4950      	ldr	r1, [pc, #320]	; (800a908 <mem_malloc+0x1f0>)
 800a7c8:	4850      	ldr	r0, [pc, #320]	; (800a90c <mem_malloc+0x1f4>)
 800a7ca:	f009 fbcf 	bl	8013f6c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a7ce:	8a7b      	ldrh	r3, [r7, #18]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7ff fcb3 	bl	800a13c <ptr_to_mem>
 800a7d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	881a      	ldrh	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8bfa      	ldrh	r2, [r7, #30]
 800a7ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	8a7a      	ldrh	r2, [r7, #18]
 800a7f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a800:	d00b      	beq.n	800a81a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fc98 	bl	800a13c <ptr_to_mem>
 800a80c:	4602      	mov	r2, r0
 800a80e:	8a7b      	ldrh	r3, [r7, #18]
 800a810:	8053      	strh	r3, [r2, #2]
 800a812:	e002      	b.n	800a81a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	2201      	movs	r2, #1
 800a818:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a81a:	4b39      	ldr	r3, [pc, #228]	; (800a900 <mem_malloc+0x1e8>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d127      	bne.n	800a874 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a824:	4b36      	ldr	r3, [pc, #216]	; (800a900 <mem_malloc+0x1e8>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a82a:	e005      	b.n	800a838 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	4618      	mov	r0, r3
 800a832:	f7ff fc83 	bl	800a13c <ptr_to_mem>
 800a836:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	791b      	ldrb	r3, [r3, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d004      	beq.n	800a84a <mem_malloc+0x132>
 800a840:	4b33      	ldr	r3, [pc, #204]	; (800a910 <mem_malloc+0x1f8>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	429a      	cmp	r2, r3
 800a848:	d1f0      	bne.n	800a82c <mem_malloc+0x114>
          }
          lfree = cur;
 800a84a:	4a2d      	ldr	r2, [pc, #180]	; (800a900 <mem_malloc+0x1e8>)
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a850:	4b2b      	ldr	r3, [pc, #172]	; (800a900 <mem_malloc+0x1e8>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4b2e      	ldr	r3, [pc, #184]	; (800a910 <mem_malloc+0x1f8>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d00b      	beq.n	800a874 <mem_malloc+0x15c>
 800a85c:	4b28      	ldr	r3, [pc, #160]	; (800a900 <mem_malloc+0x1e8>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	791b      	ldrb	r3, [r3, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d006      	beq.n	800a874 <mem_malloc+0x15c>
 800a866:	4b27      	ldr	r3, [pc, #156]	; (800a904 <mem_malloc+0x1ec>)
 800a868:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a86c:	4929      	ldr	r1, [pc, #164]	; (800a914 <mem_malloc+0x1fc>)
 800a86e:	4827      	ldr	r0, [pc, #156]	; (800a90c <mem_malloc+0x1f4>)
 800a870:	f009 fb7c 	bl	8013f6c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a874:	4821      	ldr	r0, [pc, #132]	; (800a8fc <mem_malloc+0x1e4>)
 800a876:	f009 fae6 	bl	8013e46 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a87a:	8bba      	ldrh	r2, [r7, #28]
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	3308      	adds	r3, #8
 800a882:	4a23      	ldr	r2, [pc, #140]	; (800a910 <mem_malloc+0x1f8>)
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	4293      	cmp	r3, r2
 800a888:	d906      	bls.n	800a898 <mem_malloc+0x180>
 800a88a:	4b1e      	ldr	r3, [pc, #120]	; (800a904 <mem_malloc+0x1ec>)
 800a88c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a890:	4921      	ldr	r1, [pc, #132]	; (800a918 <mem_malloc+0x200>)
 800a892:	481e      	ldr	r0, [pc, #120]	; (800a90c <mem_malloc+0x1f4>)
 800a894:	f009 fb6a 	bl	8013f6c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f003 0303 	and.w	r3, r3, #3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d006      	beq.n	800a8b0 <mem_malloc+0x198>
 800a8a2:	4b18      	ldr	r3, [pc, #96]	; (800a904 <mem_malloc+0x1ec>)
 800a8a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a8a8:	491c      	ldr	r1, [pc, #112]	; (800a91c <mem_malloc+0x204>)
 800a8aa:	4818      	ldr	r0, [pc, #96]	; (800a90c <mem_malloc+0x1f4>)
 800a8ac:	f009 fb5e 	bl	8013f6c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d006      	beq.n	800a8c8 <mem_malloc+0x1b0>
 800a8ba:	4b12      	ldr	r3, [pc, #72]	; (800a904 <mem_malloc+0x1ec>)
 800a8bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a8c0:	4917      	ldr	r1, [pc, #92]	; (800a920 <mem_malloc+0x208>)
 800a8c2:	4812      	ldr	r0, [pc, #72]	; (800a90c <mem_malloc+0x1f4>)
 800a8c4:	f009 fb52 	bl	8013f6c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	3308      	adds	r3, #8
 800a8cc:	e011      	b.n	800a8f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a8ce:	8bfb      	ldrh	r3, [r7, #30]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7ff fc33 	bl	800a13c <ptr_to_mem>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a8dc:	8bfa      	ldrh	r2, [r7, #30]
 800a8de:	8bbb      	ldrh	r3, [r7, #28]
 800a8e0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	f4ff af41 	bcc.w	800a76c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a8ea:	4804      	ldr	r0, [pc, #16]	; (800a8fc <mem_malloc+0x1e4>)
 800a8ec:	f009 faab 	bl	8013e46 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3720      	adds	r7, #32
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200049c4 	.word	0x200049c4
 800a900:	200049c8 	.word	0x200049c8
 800a904:	080152e8 	.word	0x080152e8
 800a908:	080154ac 	.word	0x080154ac
 800a90c:	08015330 	.word	0x08015330
 800a910:	200049c0 	.word	0x200049c0
 800a914:	080154c0 	.word	0x080154c0
 800a918:	080154dc 	.word	0x080154dc
 800a91c:	0801550c 	.word	0x0801550c
 800a920:	0801553c 	.word	0x0801553c

0800a924 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	3303      	adds	r3, #3
 800a93a:	f023 0303 	bic.w	r3, r3, #3
 800a93e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e011      	b.n	800a96a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	689b      	ldr	r3, [r3, #8]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	881b      	ldrh	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	4413      	add	r3, r2
 800a962:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	3301      	adds	r3, #1
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	885b      	ldrh	r3, [r3, #2]
 800a96e:	461a      	mov	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4293      	cmp	r3, r2
 800a974:	dbe7      	blt.n	800a946 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a98a:	2300      	movs	r3, #0
 800a98c:	80fb      	strh	r3, [r7, #6]
 800a98e:	e009      	b.n	800a9a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a990:	88fb      	ldrh	r3, [r7, #6]
 800a992:	4a08      	ldr	r2, [pc, #32]	; (800a9b4 <memp_init+0x30>)
 800a994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff ffc3 	bl	800a924 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	3301      	adds	r3, #1
 800a9a2:	80fb      	strh	r3, [r7, #6]
 800a9a4:	88fb      	ldrh	r3, [r7, #6]
 800a9a6:	2b0c      	cmp	r3, #12
 800a9a8:	d9f2      	bls.n	800a990 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a9aa:	bf00      	nop
 800a9ac:	bf00      	nop
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	08017d68 	.word	0x08017d68

0800a9b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a9c0:	f009 fa6e 	bl	8013ea0 <sys_arch_protect>
 800a9c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d015      	beq.n	800aa00 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	6812      	ldr	r2, [r2, #0]
 800a9dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f003 0303 	and.w	r3, r3, #3
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d006      	beq.n	800a9f6 <do_memp_malloc_pool+0x3e>
 800a9e8:	4b09      	ldr	r3, [pc, #36]	; (800aa10 <do_memp_malloc_pool+0x58>)
 800a9ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a9ee:	4909      	ldr	r1, [pc, #36]	; (800aa14 <do_memp_malloc_pool+0x5c>)
 800a9f0:	4809      	ldr	r0, [pc, #36]	; (800aa18 <do_memp_malloc_pool+0x60>)
 800a9f2:	f009 fabb 	bl	8013f6c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f009 fa60 	bl	8013ebc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	e003      	b.n	800aa08 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f009 fa5b 	bl	8013ebc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}
 800aa10:	08015560 	.word	0x08015560
 800aa14:	08015590 	.word	0x08015590
 800aa18:	080155b4 	.word	0x080155b4

0800aa1c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	2b0c      	cmp	r3, #12
 800aa2a:	d908      	bls.n	800aa3e <memp_malloc+0x22>
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <memp_malloc+0x3c>)
 800aa2e:	f240 1257 	movw	r2, #343	; 0x157
 800aa32:	490a      	ldr	r1, [pc, #40]	; (800aa5c <memp_malloc+0x40>)
 800aa34:	480a      	ldr	r0, [pc, #40]	; (800aa60 <memp_malloc+0x44>)
 800aa36:	f009 fa99 	bl	8013f6c <iprintf>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	e008      	b.n	800aa50 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	4a08      	ldr	r2, [pc, #32]	; (800aa64 <memp_malloc+0x48>)
 800aa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff ffb6 	bl	800a9b8 <do_memp_malloc_pool>
 800aa4c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	08015560 	.word	0x08015560
 800aa5c:	080155f0 	.word	0x080155f0
 800aa60:	080155b4 	.word	0x080155b4
 800aa64:	08017d68 	.word	0x08017d68

0800aa68 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d006      	beq.n	800aa8a <do_memp_free_pool+0x22>
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <do_memp_free_pool+0x4c>)
 800aa7e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800aa82:	490d      	ldr	r1, [pc, #52]	; (800aab8 <do_memp_free_pool+0x50>)
 800aa84:	480d      	ldr	r0, [pc, #52]	; (800aabc <do_memp_free_pool+0x54>)
 800aa86:	f009 fa71 	bl	8013f6c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800aa8e:	f009 fa07 	bl	8013ea0 <sys_arch_protect>
 800aa92:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800aaa6:	68b8      	ldr	r0, [r7, #8]
 800aaa8:	f009 fa08 	bl	8013ebc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800aaac:	bf00      	nop
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	08015560 	.word	0x08015560
 800aab8:	08015610 	.word	0x08015610
 800aabc:	080155b4 	.word	0x080155b4

0800aac0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	2b0c      	cmp	r3, #12
 800aad0:	d907      	bls.n	800aae2 <memp_free+0x22>
 800aad2:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <memp_free+0x44>)
 800aad4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800aad8:	490b      	ldr	r1, [pc, #44]	; (800ab08 <memp_free+0x48>)
 800aada:	480c      	ldr	r0, [pc, #48]	; (800ab0c <memp_free+0x4c>)
 800aadc:	f009 fa46 	bl	8013f6c <iprintf>
 800aae0:	e00c      	b.n	800aafc <memp_free+0x3c>

  if (mem == NULL) {
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d008      	beq.n	800aafa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	4a09      	ldr	r2, [pc, #36]	; (800ab10 <memp_free+0x50>)
 800aaec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff ffb8 	bl	800aa68 <do_memp_free_pool>
 800aaf8:	e000      	b.n	800aafc <memp_free+0x3c>
    return;
 800aafa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08015560 	.word	0x08015560
 800ab08:	08015630 	.word	0x08015630
 800ab0c:	080155b4 	.word	0x080155b4
 800ab10:	08017d68 	.word	0x08017d68

0800ab14 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ab18:	bf00      	nop
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b086      	sub	sp, #24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
 800ab30:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d108      	bne.n	800ab4a <netif_add+0x26>
 800ab38:	4b57      	ldr	r3, [pc, #348]	; (800ac98 <netif_add+0x174>)
 800ab3a:	f240 1227 	movw	r2, #295	; 0x127
 800ab3e:	4957      	ldr	r1, [pc, #348]	; (800ac9c <netif_add+0x178>)
 800ab40:	4857      	ldr	r0, [pc, #348]	; (800aca0 <netif_add+0x17c>)
 800ab42:	f009 fa13 	bl	8013f6c <iprintf>
 800ab46:	2300      	movs	r3, #0
 800ab48:	e0a2      	b.n	800ac90 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d108      	bne.n	800ab62 <netif_add+0x3e>
 800ab50:	4b51      	ldr	r3, [pc, #324]	; (800ac98 <netif_add+0x174>)
 800ab52:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ab56:	4953      	ldr	r1, [pc, #332]	; (800aca4 <netif_add+0x180>)
 800ab58:	4851      	ldr	r0, [pc, #324]	; (800aca0 <netif_add+0x17c>)
 800ab5a:	f009 fa07 	bl	8013f6c <iprintf>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e096      	b.n	800ac90 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ab68:	4b4f      	ldr	r3, [pc, #316]	; (800aca8 <netif_add+0x184>)
 800ab6a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ab72:	4b4d      	ldr	r3, [pc, #308]	; (800aca8 <netif_add+0x184>)
 800ab74:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d101      	bne.n	800ab80 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ab7c:	4b4a      	ldr	r3, [pc, #296]	; (800aca8 <netif_add+0x184>)
 800ab7e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4a45      	ldr	r2, [pc, #276]	; (800acac <netif_add+0x188>)
 800ab96:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6a3a      	ldr	r2, [r7, #32]
 800abb0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800abb2:	4b3f      	ldr	r3, [pc, #252]	; (800acb0 <netif_add+0x18c>)
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abc0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	68b9      	ldr	r1, [r7, #8]
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 f913 	bl	800adf4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	4798      	blx	r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <netif_add+0xba>
    return NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	e058      	b.n	800ac90 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800abe4:	2bff      	cmp	r3, #255	; 0xff
 800abe6:	d103      	bne.n	800abf0 <netif_add+0xcc>
        netif->num = 0;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800abf4:	4b2f      	ldr	r3, [pc, #188]	; (800acb4 <netif_add+0x190>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	617b      	str	r3, [r7, #20]
 800abfa:	e02b      	b.n	800ac54 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800abfc:	697a      	ldr	r2, [r7, #20]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d106      	bne.n	800ac12 <netif_add+0xee>
 800ac04:	4b24      	ldr	r3, [pc, #144]	; (800ac98 <netif_add+0x174>)
 800ac06:	f240 128b 	movw	r2, #395	; 0x18b
 800ac0a:	492b      	ldr	r1, [pc, #172]	; (800acb8 <netif_add+0x194>)
 800ac0c:	4824      	ldr	r0, [pc, #144]	; (800aca0 <netif_add+0x17c>)
 800ac0e:	f009 f9ad 	bl	8013f6c <iprintf>
        num_netifs++;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	3301      	adds	r3, #1
 800ac16:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	2bff      	cmp	r3, #255	; 0xff
 800ac1c:	dd06      	ble.n	800ac2c <netif_add+0x108>
 800ac1e:	4b1e      	ldr	r3, [pc, #120]	; (800ac98 <netif_add+0x174>)
 800ac20:	f240 128d 	movw	r2, #397	; 0x18d
 800ac24:	4925      	ldr	r1, [pc, #148]	; (800acbc <netif_add+0x198>)
 800ac26:	481e      	ldr	r0, [pc, #120]	; (800aca0 <netif_add+0x17c>)
 800ac28:	f009 f9a0 	bl	8013f6c <iprintf>
        if (netif2->num == netif->num) {
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d108      	bne.n	800ac4e <netif_add+0x12a>
          netif->num++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac42:	3301      	adds	r3, #1
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ac4c:	e005      	b.n	800ac5a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1d0      	bne.n	800abfc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1be      	bne.n	800abde <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac66:	2bfe      	cmp	r3, #254	; 0xfe
 800ac68:	d103      	bne.n	800ac72 <netif_add+0x14e>
    netif_num = 0;
 800ac6a:	4b11      	ldr	r3, [pc, #68]	; (800acb0 <netif_add+0x18c>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
 800ac70:	e006      	b.n	800ac80 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac78:	3301      	adds	r3, #1
 800ac7a:	b2da      	uxtb	r2, r3
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <netif_add+0x18c>)
 800ac7e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ac80:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <netif_add+0x190>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ac88:	4a0a      	ldr	r2, [pc, #40]	; (800acb4 <netif_add+0x190>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	0801564c 	.word	0x0801564c
 800ac9c:	080156e0 	.word	0x080156e0
 800aca0:	0801569c 	.word	0x0801569c
 800aca4:	080156fc 	.word	0x080156fc
 800aca8:	08017ddc 	.word	0x08017ddc
 800acac:	0800b0cf 	.word	0x0800b0cf
 800acb0:	20004a00 	.word	0x20004a00
 800acb4:	2000b934 	.word	0x2000b934
 800acb8:	08015720 	.word	0x08015720
 800acbc:	08015734 	.word	0x08015734

0800acc0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f002 fb7d 	bl	800d3cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800acd2:	6839      	ldr	r1, [r7, #0]
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f006 fc8d 	bl	80115f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800acda:	bf00      	nop
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	60f8      	str	r0, [r7, #12]
 800acec:	60b9      	str	r1, [r7, #8]
 800acee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <netif_do_set_ipaddr+0x20>
 800acf6:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <netif_do_set_ipaddr+0x88>)
 800acf8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800acfc:	491c      	ldr	r1, [pc, #112]	; (800ad70 <netif_do_set_ipaddr+0x8c>)
 800acfe:	481d      	ldr	r0, [pc, #116]	; (800ad74 <netif_do_set_ipaddr+0x90>)
 800ad00:	f009 f934 	bl	8013f6c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d106      	bne.n	800ad18 <netif_do_set_ipaddr+0x34>
 800ad0a:	4b18      	ldr	r3, [pc, #96]	; (800ad6c <netif_do_set_ipaddr+0x88>)
 800ad0c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ad10:	4917      	ldr	r1, [pc, #92]	; (800ad70 <netif_do_set_ipaddr+0x8c>)
 800ad12:	4818      	ldr	r0, [pc, #96]	; (800ad74 <netif_do_set_ipaddr+0x90>)
 800ad14:	f009 f92a 	bl	8013f6c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d01c      	beq.n	800ad60 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ad36:	f107 0314 	add.w	r3, r7, #20
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff ffbf 	bl	800acc0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d002      	beq.n	800ad4e <netif_do_set_ipaddr+0x6a>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	e000      	b.n	800ad50 <netif_do_set_ipaddr+0x6c>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ad54:	2101      	movs	r1, #1
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 f8d2 	bl	800af00 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	e000      	b.n	800ad62 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	0801564c 	.word	0x0801564c
 800ad70:	08015764 	.word	0x08015764
 800ad74:	0801569c 	.word	0x0801569c

0800ad78 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d00a      	beq.n	800ada8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <netif_do_set_netmask+0x26>
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	e000      	b.n	800ada0 <netif_do_set_netmask+0x28>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ada4:	2301      	movs	r3, #1
 800ada6:	e000      	b.n	800adaa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800adb6:	b480      	push	{r7}
 800adb8:	b085      	sub	sp, #20
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	330c      	adds	r3, #12
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d00a      	beq.n	800ade6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d002      	beq.n	800addc <netif_do_set_gw+0x26>
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	e000      	b.n	800adde <netif_do_set_gw+0x28>
 800addc:	2300      	movs	r3, #0
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ade2:	2301      	movs	r3, #1
 800ade4:	e000      	b.n	800ade8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b088      	sub	sp, #32
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ae10:	4b1c      	ldr	r3, [pc, #112]	; (800ae84 <netif_set_addr+0x90>)
 800ae12:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ae1a:	4b1a      	ldr	r3, [pc, #104]	; (800ae84 <netif_set_addr+0x90>)
 800ae1c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ae24:	4b17      	ldr	r3, [pc, #92]	; (800ae84 <netif_set_addr+0x90>)
 800ae26:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d003      	beq.n	800ae36 <netif_set_addr+0x42>
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <netif_set_addr+0x46>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <netif_set_addr+0x48>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d006      	beq.n	800ae52 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae44:	f107 0310 	add.w	r3, r7, #16
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff ff49 	bl	800ace4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ae52:	69fa      	ldr	r2, [r7, #28]
 800ae54:	6879      	ldr	r1, [r7, #4]
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff ff8e 	bl	800ad78 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7ff ffa8 	bl	800adb6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d106      	bne.n	800ae7a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ae6c:	f107 0310 	add.w	r3, r7, #16
 800ae70:	461a      	mov	r2, r3
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f7ff ff35 	bl	800ace4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ae7a:	bf00      	nop
 800ae7c:	3720      	adds	r7, #32
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08017ddc 	.word	0x08017ddc

0800ae88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ae90:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <netif_set_default+0x1c>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ae96:	bf00      	nop
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	2000b938 	.word	0x2000b938

0800aea8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d107      	bne.n	800aec6 <netif_set_up+0x1e>
 800aeb6:	4b0f      	ldr	r3, [pc, #60]	; (800aef4 <netif_set_up+0x4c>)
 800aeb8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aebc:	490e      	ldr	r1, [pc, #56]	; (800aef8 <netif_set_up+0x50>)
 800aebe:	480f      	ldr	r0, [pc, #60]	; (800aefc <netif_set_up+0x54>)
 800aec0:	f009 f854 	bl	8013f6c <iprintf>
 800aec4:	e013      	b.n	800aeee <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aecc:	f003 0301 	and.w	r3, r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10c      	bne.n	800aeee <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aeda:	f043 0301 	orr.w	r3, r3, #1
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aee6:	2103      	movs	r1, #3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f809 	bl	800af00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0801564c 	.word	0x0801564c
 800aef8:	080157d4 	.word	0x080157d4
 800aefc:	0801569c 	.word	0x0801569c

0800af00 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d106      	bne.n	800af20 <netif_issue_reports+0x20>
 800af12:	4b18      	ldr	r3, [pc, #96]	; (800af74 <netif_issue_reports+0x74>)
 800af14:	f240 326d 	movw	r2, #877	; 0x36d
 800af18:	4917      	ldr	r1, [pc, #92]	; (800af78 <netif_issue_reports+0x78>)
 800af1a:	4818      	ldr	r0, [pc, #96]	; (800af7c <netif_issue_reports+0x7c>)
 800af1c:	f009 f826 	bl	8013f6c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af26:	f003 0304 	and.w	r3, r3, #4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01e      	beq.n	800af6c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af34:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d017      	beq.n	800af6c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af3c:	78fb      	ldrb	r3, [r7, #3]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d013      	beq.n	800af6e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	3304      	adds	r3, #4
 800af4a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00e      	beq.n	800af6e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	3304      	adds	r3, #4
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f007 faaf 	bl	80124c8 <etharp_request>
 800af6a:	e000      	b.n	800af6e <netif_issue_reports+0x6e>
    return;
 800af6c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	0801564c 	.word	0x0801564c
 800af78:	080157f0 	.word	0x080157f0
 800af7c:	0801569c 	.word	0x0801569c

0800af80 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d107      	bne.n	800af9e <netif_set_down+0x1e>
 800af8e:	4b12      	ldr	r3, [pc, #72]	; (800afd8 <netif_set_down+0x58>)
 800af90:	f240 329b 	movw	r2, #923	; 0x39b
 800af94:	4911      	ldr	r1, [pc, #68]	; (800afdc <netif_set_down+0x5c>)
 800af96:	4812      	ldr	r0, [pc, #72]	; (800afe0 <netif_set_down+0x60>)
 800af98:	f008 ffe8 	bl	8013f6c <iprintf>
 800af9c:	e019      	b.n	800afd2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d012      	beq.n	800afd2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afb2:	f023 0301 	bic.w	r3, r3, #1
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afc4:	f003 0308 	and.w	r3, r3, #8
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f006 fe39 	bl	8011c44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	0801564c 	.word	0x0801564c
 800afdc:	08015814 	.word	0x08015814
 800afe0:	0801569c 	.word	0x0801569c

0800afe4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d107      	bne.n	800b002 <netif_set_link_up+0x1e>
 800aff2:	4b13      	ldr	r3, [pc, #76]	; (800b040 <netif_set_link_up+0x5c>)
 800aff4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800aff8:	4912      	ldr	r1, [pc, #72]	; (800b044 <netif_set_link_up+0x60>)
 800affa:	4813      	ldr	r0, [pc, #76]	; (800b048 <netif_set_link_up+0x64>)
 800affc:	f008 ffb6 	bl	8013f6c <iprintf>
 800b000:	e01b      	b.n	800b03a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d114      	bne.n	800b03a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b016:	f043 0304 	orr.w	r3, r3, #4
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b022:	2103      	movs	r1, #3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff ff6b 	bl	800af00 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <netif_set_link_up+0x56>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	69db      	ldr	r3, [r3, #28]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	0801564c 	.word	0x0801564c
 800b044:	08015834 	.word	0x08015834
 800b048:	0801569c 	.word	0x0801569c

0800b04c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d107      	bne.n	800b06a <netif_set_link_down+0x1e>
 800b05a:	4b11      	ldr	r3, [pc, #68]	; (800b0a0 <netif_set_link_down+0x54>)
 800b05c:	f240 4206 	movw	r2, #1030	; 0x406
 800b060:	4910      	ldr	r1, [pc, #64]	; (800b0a4 <netif_set_link_down+0x58>)
 800b062:	4811      	ldr	r0, [pc, #68]	; (800b0a8 <netif_set_link_down+0x5c>)
 800b064:	f008 ff82 	bl	8013f6c <iprintf>
 800b068:	e017      	b.n	800b09a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b070:	f003 0304 	and.w	r3, r3, #4
 800b074:	2b00      	cmp	r3, #0
 800b076:	d010      	beq.n	800b09a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b07e:	f023 0304 	bic.w	r3, r3, #4
 800b082:	b2da      	uxtb	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <netif_set_link_down+0x4e>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	0801564c 	.word	0x0801564c
 800b0a4:	08015858 	.word	0x08015858
 800b0a8:	0801569c 	.word	0x0801569c

0800b0ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	61da      	str	r2, [r3, #28]
  }
}
 800b0c2:	bf00      	nop
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr

0800b0ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b0ce:	b480      	push	{r7}
 800b0d0:	b085      	sub	sp, #20
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	60f8      	str	r0, [r7, #12]
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b0da:	f06f 030b 	mvn.w	r3, #11
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3714      	adds	r7, #20
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr
	...

0800b0ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d013      	beq.n	800b124 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <netif_get_by_index+0x48>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e00c      	b.n	800b11e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b10a:	3301      	adds	r3, #1
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	79fa      	ldrb	r2, [r7, #7]
 800b110:	429a      	cmp	r2, r3
 800b112:	d101      	bne.n	800b118 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	e006      	b.n	800b126 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1ef      	bne.n	800b104 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3714      	adds	r7, #20
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	2000b934 	.word	0x2000b934

0800b138 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b13e:	f008 feaf 	bl	8013ea0 <sys_arch_protect>
 800b142:	6038      	str	r0, [r7, #0]
 800b144:	4b0d      	ldr	r3, [pc, #52]	; (800b17c <pbuf_free_ooseq+0x44>)
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	6838      	ldr	r0, [r7, #0]
 800b14c:	f008 feb6 	bl	8013ebc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <pbuf_free_ooseq+0x48>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	e00a      	b.n	800b16e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f002 f971 	bl	800d448 <tcp_free_ooseq>
      return;
 800b166:	e005      	b.n	800b174 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68db      	ldr	r3, [r3, #12]
 800b16c:	607b      	str	r3, [r7, #4]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1f1      	bne.n	800b158 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	2000b93c 	.word	0x2000b93c
 800b180:	2000b944 	.word	0x2000b944

0800b184 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b18c:	f7ff ffd4 	bl	800b138 <pbuf_free_ooseq>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b19e:	f008 fe7f 	bl	8013ea0 <sys_arch_protect>
 800b1a2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b1a4:	4b0f      	ldr	r3, [pc, #60]	; (800b1e4 <pbuf_pool_is_empty+0x4c>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b1aa:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <pbuf_pool_is_empty+0x4c>)
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f008 fe83 	bl	8013ebc <sys_arch_unprotect>

  if (!queued) {
 800b1b6:	78fb      	ldrb	r3, [r7, #3]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10f      	bne.n	800b1dc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b1bc:	2100      	movs	r1, #0
 800b1be:	480a      	ldr	r0, [pc, #40]	; (800b1e8 <pbuf_pool_is_empty+0x50>)
 800b1c0:	f7fe feec 	bl	8009f9c <tcpip_try_callback>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d008      	beq.n	800b1dc <pbuf_pool_is_empty+0x44>
 800b1ca:	f008 fe69 	bl	8013ea0 <sys_arch_protect>
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <pbuf_pool_is_empty+0x4c>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f008 fe70 	bl	8013ebc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	2000b93c 	.word	0x2000b93c
 800b1e8:	0800b185 	.word	0x0800b185

0800b1ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	80fb      	strh	r3, [r7, #6]
 800b1fe:	4613      	mov	r3, r2
 800b200:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	88fa      	ldrh	r2, [r7, #6]
 800b212:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	88ba      	ldrh	r2, [r7, #4]
 800b218:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b21a:	8b3b      	ldrh	r3, [r7, #24]
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	7f3a      	ldrb	r2, [r7, #28]
 800b226:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2201      	movs	r2, #1
 800b22c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	73da      	strb	r2, [r3, #15]
}
 800b234:	bf00      	nop
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08c      	sub	sp, #48	; 0x30
 800b244:	af02      	add	r7, sp, #8
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]
 800b24a:	460b      	mov	r3, r1
 800b24c:	80bb      	strh	r3, [r7, #4]
 800b24e:	4613      	mov	r3, r2
 800b250:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b256:	887b      	ldrh	r3, [r7, #2]
 800b258:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b25c:	d07f      	beq.n	800b35e <pbuf_alloc+0x11e>
 800b25e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b262:	f300 80c8 	bgt.w	800b3f6 <pbuf_alloc+0x1b6>
 800b266:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b26a:	d010      	beq.n	800b28e <pbuf_alloc+0x4e>
 800b26c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b270:	f300 80c1 	bgt.w	800b3f6 <pbuf_alloc+0x1b6>
 800b274:	2b01      	cmp	r3, #1
 800b276:	d002      	beq.n	800b27e <pbuf_alloc+0x3e>
 800b278:	2b41      	cmp	r3, #65	; 0x41
 800b27a:	f040 80bc 	bne.w	800b3f6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b27e:	887a      	ldrh	r2, [r7, #2]
 800b280:	88bb      	ldrh	r3, [r7, #4]
 800b282:	4619      	mov	r1, r3
 800b284:	2000      	movs	r0, #0
 800b286:	f000 f8d1 	bl	800b42c <pbuf_alloc_reference>
 800b28a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b28c:	e0bd      	b.n	800b40a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b296:	88bb      	ldrh	r3, [r7, #4]
 800b298:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b29a:	200c      	movs	r0, #12
 800b29c:	f7ff fbbe 	bl	800aa1c <memp_malloc>
 800b2a0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d109      	bne.n	800b2bc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b2a8:	f7ff ff76 	bl	800b198 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b2b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2b4:	f000 faa8 	bl	800b808 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e0a7      	b.n	800b40c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b2bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2be:	3303      	adds	r3, #3
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	8b7a      	ldrh	r2, [r7, #26]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	bf28      	it	cs
 800b2d4:	4613      	movcs	r3, r2
 800b2d6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b2d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2da:	3310      	adds	r3, #16
 800b2dc:	693a      	ldr	r2, [r7, #16]
 800b2de:	4413      	add	r3, r2
 800b2e0:	3303      	adds	r3, #3
 800b2e2:	f023 0303 	bic.w	r3, r3, #3
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	89f9      	ldrh	r1, [r7, #14]
 800b2ea:	8b7a      	ldrh	r2, [r7, #26]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9301      	str	r3, [sp, #4]
 800b2f0:	887b      	ldrh	r3, [r7, #2]
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6938      	ldr	r0, [r7, #16]
 800b2fa:	f7ff ff77 	bl	800b1ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	f003 0303 	and.w	r3, r3, #3
 800b306:	2b00      	cmp	r3, #0
 800b308:	d006      	beq.n	800b318 <pbuf_alloc+0xd8>
 800b30a:	4b42      	ldr	r3, [pc, #264]	; (800b414 <pbuf_alloc+0x1d4>)
 800b30c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b310:	4941      	ldr	r1, [pc, #260]	; (800b418 <pbuf_alloc+0x1d8>)
 800b312:	4842      	ldr	r0, [pc, #264]	; (800b41c <pbuf_alloc+0x1dc>)
 800b314:	f008 fe2a 	bl	8013f6c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b31a:	3303      	adds	r3, #3
 800b31c:	f023 0303 	bic.w	r3, r3, #3
 800b320:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b324:	d106      	bne.n	800b334 <pbuf_alloc+0xf4>
 800b326:	4b3b      	ldr	r3, [pc, #236]	; (800b414 <pbuf_alloc+0x1d4>)
 800b328:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b32c:	493c      	ldr	r1, [pc, #240]	; (800b420 <pbuf_alloc+0x1e0>)
 800b32e:	483b      	ldr	r0, [pc, #236]	; (800b41c <pbuf_alloc+0x1dc>)
 800b330:	f008 fe1c 	bl	8013f6c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	2b00      	cmp	r3, #0
 800b338:	d102      	bne.n	800b340 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
 800b33e:	e002      	b.n	800b346 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b34a:	8b7a      	ldrh	r2, [r7, #26]
 800b34c:	89fb      	ldrh	r3, [r7, #14]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b352:	2300      	movs	r3, #0
 800b354:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b356:	8b7b      	ldrh	r3, [r7, #26]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d19e      	bne.n	800b29a <pbuf_alloc+0x5a>
      break;
 800b35c:	e055      	b.n	800b40a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b35e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b360:	3303      	adds	r3, #3
 800b362:	b29b      	uxth	r3, r3
 800b364:	f023 0303 	bic.w	r3, r3, #3
 800b368:	b29a      	uxth	r2, r3
 800b36a:	88bb      	ldrh	r3, [r7, #4]
 800b36c:	3303      	adds	r3, #3
 800b36e:	b29b      	uxth	r3, r3
 800b370:	f023 0303 	bic.w	r3, r3, #3
 800b374:	b29b      	uxth	r3, r3
 800b376:	4413      	add	r3, r2
 800b378:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b37a:	8b3b      	ldrh	r3, [r7, #24]
 800b37c:	3310      	adds	r3, #16
 800b37e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b380:	8b3a      	ldrh	r2, [r7, #24]
 800b382:	88bb      	ldrh	r3, [r7, #4]
 800b384:	3303      	adds	r3, #3
 800b386:	f023 0303 	bic.w	r3, r3, #3
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d306      	bcc.n	800b39c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b38e:	8afa      	ldrh	r2, [r7, #22]
 800b390:	88bb      	ldrh	r3, [r7, #4]
 800b392:	3303      	adds	r3, #3
 800b394:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b398:	429a      	cmp	r2, r3
 800b39a:	d201      	bcs.n	800b3a0 <pbuf_alloc+0x160>
        return NULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	e035      	b.n	800b40c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b3a0:	8afb      	ldrh	r3, [r7, #22]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff f9b8 	bl	800a718 <mem_malloc>
 800b3a8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <pbuf_alloc+0x174>
        return NULL;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e02b      	b.n	800b40c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b3b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b3b6:	3310      	adds	r3, #16
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ba:	4413      	add	r3, r2
 800b3bc:	3303      	adds	r3, #3
 800b3be:	f023 0303 	bic.w	r3, r3, #3
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	88b9      	ldrh	r1, [r7, #4]
 800b3c6:	88ba      	ldrh	r2, [r7, #4]
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	887b      	ldrh	r3, [r7, #2]
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	4601      	mov	r1, r0
 800b3d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b3d6:	f7ff ff09 	bl	800b1ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f003 0303 	and.w	r3, r3, #3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d010      	beq.n	800b408 <pbuf_alloc+0x1c8>
 800b3e6:	4b0b      	ldr	r3, [pc, #44]	; (800b414 <pbuf_alloc+0x1d4>)
 800b3e8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b3ec:	490d      	ldr	r1, [pc, #52]	; (800b424 <pbuf_alloc+0x1e4>)
 800b3ee:	480b      	ldr	r0, [pc, #44]	; (800b41c <pbuf_alloc+0x1dc>)
 800b3f0:	f008 fdbc 	bl	8013f6c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b3f4:	e008      	b.n	800b408 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b3f6:	4b07      	ldr	r3, [pc, #28]	; (800b414 <pbuf_alloc+0x1d4>)
 800b3f8:	f240 1227 	movw	r2, #295	; 0x127
 800b3fc:	490a      	ldr	r1, [pc, #40]	; (800b428 <pbuf_alloc+0x1e8>)
 800b3fe:	4807      	ldr	r0, [pc, #28]	; (800b41c <pbuf_alloc+0x1dc>)
 800b400:	f008 fdb4 	bl	8013f6c <iprintf>
      return NULL;
 800b404:	2300      	movs	r3, #0
 800b406:	e001      	b.n	800b40c <pbuf_alloc+0x1cc>
      break;
 800b408:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3728      	adds	r7, #40	; 0x28
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0801587c 	.word	0x0801587c
 800b418:	080158ac 	.word	0x080158ac
 800b41c:	080158dc 	.word	0x080158dc
 800b420:	08015904 	.word	0x08015904
 800b424:	08015938 	.word	0x08015938
 800b428:	08015964 	.word	0x08015964

0800b42c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af02      	add	r7, sp, #8
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	807b      	strh	r3, [r7, #2]
 800b438:	4613      	mov	r3, r2
 800b43a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b43c:	883b      	ldrh	r3, [r7, #0]
 800b43e:	2b41      	cmp	r3, #65	; 0x41
 800b440:	d009      	beq.n	800b456 <pbuf_alloc_reference+0x2a>
 800b442:	883b      	ldrh	r3, [r7, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d006      	beq.n	800b456 <pbuf_alloc_reference+0x2a>
 800b448:	4b0f      	ldr	r3, [pc, #60]	; (800b488 <pbuf_alloc_reference+0x5c>)
 800b44a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b44e:	490f      	ldr	r1, [pc, #60]	; (800b48c <pbuf_alloc_reference+0x60>)
 800b450:	480f      	ldr	r0, [pc, #60]	; (800b490 <pbuf_alloc_reference+0x64>)
 800b452:	f008 fd8b 	bl	8013f6c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b456:	200b      	movs	r0, #11
 800b458:	f7ff fae0 	bl	800aa1c <memp_malloc>
 800b45c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b464:	2300      	movs	r3, #0
 800b466:	e00b      	b.n	800b480 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b468:	8879      	ldrh	r1, [r7, #2]
 800b46a:	887a      	ldrh	r2, [r7, #2]
 800b46c:	2300      	movs	r3, #0
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	883b      	ldrh	r3, [r7, #0]
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	460b      	mov	r3, r1
 800b476:	6879      	ldr	r1, [r7, #4]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f7ff feb7 	bl	800b1ec <pbuf_init_alloced_pbuf>
  return p;
 800b47e:	68fb      	ldr	r3, [r7, #12]
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0801587c 	.word	0x0801587c
 800b48c:	08015980 	.word	0x08015980
 800b490:	080158dc 	.word	0x080158dc

0800b494 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af02      	add	r7, sp, #8
 800b49a:	607b      	str	r3, [r7, #4]
 800b49c:	4603      	mov	r3, r0
 800b49e:	73fb      	strb	r3, [r7, #15]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	81bb      	strh	r3, [r7, #12]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
 800b4aa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b4ac:	8a7b      	ldrh	r3, [r7, #18]
 800b4ae:	3303      	adds	r3, #3
 800b4b0:	f023 0203 	bic.w	r2, r3, #3
 800b4b4:	89bb      	ldrh	r3, [r7, #12]
 800b4b6:	441a      	add	r2, r3
 800b4b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d901      	bls.n	800b4c2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e018      	b.n	800b4f4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d007      	beq.n	800b4d8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b4c8:	8a7b      	ldrh	r3, [r7, #18]
 800b4ca:	3303      	adds	r3, #3
 800b4cc:	f023 0303 	bic.w	r3, r3, #3
 800b4d0:	6a3a      	ldr	r2, [r7, #32]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	e001      	b.n	800b4dc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	89b9      	ldrh	r1, [r7, #12]
 800b4e0:	89ba      	ldrh	r2, [r7, #12]
 800b4e2:	2302      	movs	r3, #2
 800b4e4:	9301      	str	r3, [sp, #4]
 800b4e6:	897b      	ldrh	r3, [r7, #10]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	6979      	ldr	r1, [r7, #20]
 800b4ee:	f7ff fe7d 	bl	800b1ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b4f2:	687b      	ldr	r3, [r7, #4]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	460b      	mov	r3, r1
 800b506:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <pbuf_realloc+0x20>
 800b50e:	4b3a      	ldr	r3, [pc, #232]	; (800b5f8 <pbuf_realloc+0xfc>)
 800b510:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b514:	4939      	ldr	r1, [pc, #228]	; (800b5fc <pbuf_realloc+0x100>)
 800b516:	483a      	ldr	r0, [pc, #232]	; (800b600 <pbuf_realloc+0x104>)
 800b518:	f008 fd28 	bl	8013f6c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	891b      	ldrh	r3, [r3, #8]
 800b520:	887a      	ldrh	r2, [r7, #2]
 800b522:	429a      	cmp	r2, r3
 800b524:	d263      	bcs.n	800b5ee <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	891a      	ldrh	r2, [r3, #8]
 800b52a:	887b      	ldrh	r3, [r7, #2]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b530:	887b      	ldrh	r3, [r7, #2]
 800b532:	817b      	strh	r3, [r7, #10]
  q = p;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b538:	e018      	b.n	800b56c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	895b      	ldrh	r3, [r3, #10]
 800b53e:	897a      	ldrh	r2, [r7, #10]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	891a      	ldrh	r2, [r3, #8]
 800b548:	893b      	ldrh	r3, [r7, #8]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	b29a      	uxth	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <pbuf_realloc+0x70>
 800b55e:	4b26      	ldr	r3, [pc, #152]	; (800b5f8 <pbuf_realloc+0xfc>)
 800b560:	f240 12af 	movw	r2, #431	; 0x1af
 800b564:	4927      	ldr	r1, [pc, #156]	; (800b604 <pbuf_realloc+0x108>)
 800b566:	4826      	ldr	r0, [pc, #152]	; (800b600 <pbuf_realloc+0x104>)
 800b568:	f008 fd00 	bl	8013f6c <iprintf>
  while (rem_len > q->len) {
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	895b      	ldrh	r3, [r3, #10]
 800b570:	897a      	ldrh	r2, [r7, #10]
 800b572:	429a      	cmp	r2, r3
 800b574:	d8e1      	bhi.n	800b53a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	7b1b      	ldrb	r3, [r3, #12]
 800b57a:	f003 030f 	and.w	r3, r3, #15
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d121      	bne.n	800b5c6 <pbuf_realloc+0xca>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	895b      	ldrh	r3, [r3, #10]
 800b586:	897a      	ldrh	r2, [r7, #10]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d01c      	beq.n	800b5c6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	7b5b      	ldrb	r3, [r3, #13]
 800b590:	f003 0302 	and.w	r3, r3, #2
 800b594:	2b00      	cmp	r3, #0
 800b596:	d116      	bne.n	800b5c6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	b29a      	uxth	r2, r3
 800b5a2:	897b      	ldrh	r3, [r7, #10]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	68f8      	ldr	r0, [r7, #12]
 800b5ac:	f7fe ffaa 	bl	800a504 <mem_trim>
 800b5b0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <pbuf_realloc+0xca>
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	; (800b5f8 <pbuf_realloc+0xfc>)
 800b5ba:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b5be:	4912      	ldr	r1, [pc, #72]	; (800b608 <pbuf_realloc+0x10c>)
 800b5c0:	480f      	ldr	r0, [pc, #60]	; (800b600 <pbuf_realloc+0x104>)
 800b5c2:	f008 fcd3 	bl	8013f6c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	897a      	ldrh	r2, [r7, #10]
 800b5ca:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	895a      	ldrh	r2, [r3, #10]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d004      	beq.n	800b5e6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 f911 	bl	800b808 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	601a      	str	r2, [r3, #0]
 800b5ec:	e000      	b.n	800b5f0 <pbuf_realloc+0xf4>
    return;
 800b5ee:	bf00      	nop

}
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	0801587c 	.word	0x0801587c
 800b5fc:	08015994 	.word	0x08015994
 800b600:	080158dc 	.word	0x080158dc
 800b604:	080159ac 	.word	0x080159ac
 800b608:	080159c4 	.word	0x080159c4

0800b60c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b086      	sub	sp, #24
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	4613      	mov	r3, r2
 800b618:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d106      	bne.n	800b62e <pbuf_add_header_impl+0x22>
 800b620:	4b2b      	ldr	r3, [pc, #172]	; (800b6d0 <pbuf_add_header_impl+0xc4>)
 800b622:	f240 12df 	movw	r2, #479	; 0x1df
 800b626:	492b      	ldr	r1, [pc, #172]	; (800b6d4 <pbuf_add_header_impl+0xc8>)
 800b628:	482b      	ldr	r0, [pc, #172]	; (800b6d8 <pbuf_add_header_impl+0xcc>)
 800b62a:	f008 fc9f 	bl	8013f6c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <pbuf_add_header_impl+0x30>
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b63a:	d301      	bcc.n	800b640 <pbuf_add_header_impl+0x34>
    return 1;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e043      	b.n	800b6c8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <pbuf_add_header_impl+0x3e>
    return 0;
 800b646:	2300      	movs	r3, #0
 800b648:	e03e      	b.n	800b6c8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	891a      	ldrh	r2, [r3, #8]
 800b652:	8a7b      	ldrh	r3, [r7, #18]
 800b654:	4413      	add	r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	8a7a      	ldrh	r2, [r7, #18]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d901      	bls.n	800b662 <pbuf_add_header_impl+0x56>
    return 1;
 800b65e:	2301      	movs	r3, #1
 800b660:	e032      	b.n	800b6c8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	7b1b      	ldrb	r3, [r3, #12]
 800b666:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b668:	8a3b      	ldrh	r3, [r7, #16]
 800b66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00c      	beq.n	800b68c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	425b      	negs	r3, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	3310      	adds	r3, #16
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	429a      	cmp	r2, r3
 800b686:	d20d      	bcs.n	800b6a4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b688:	2301      	movs	r3, #1
 800b68a:	e01d      	b.n	800b6c8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b68c:	79fb      	ldrb	r3, [r7, #7]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d006      	beq.n	800b6a0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	425b      	negs	r3, r3
 800b69a:	4413      	add	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]
 800b69e:	e001      	b.n	800b6a4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e011      	b.n	800b6c8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	895a      	ldrh	r2, [r3, #10]
 800b6ae:	8a7b      	ldrh	r3, [r7, #18]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	891a      	ldrh	r2, [r3, #8]
 800b6bc:	8a7b      	ldrh	r3, [r7, #18]
 800b6be:	4413      	add	r3, r2
 800b6c0:	b29a      	uxth	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	0801587c 	.word	0x0801587c
 800b6d4:	080159e0 	.word	0x080159e0
 800b6d8:	080158dc 	.word	0x080158dc

0800b6dc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f7ff ff8e 	bl	800b60c <pbuf_add_header_impl>
 800b6f0:	4603      	mov	r3, r0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d106      	bne.n	800b71a <pbuf_remove_header+0x1e>
 800b70c:	4b20      	ldr	r3, [pc, #128]	; (800b790 <pbuf_remove_header+0x94>)
 800b70e:	f240 224b 	movw	r2, #587	; 0x24b
 800b712:	4920      	ldr	r1, [pc, #128]	; (800b794 <pbuf_remove_header+0x98>)
 800b714:	4820      	ldr	r0, [pc, #128]	; (800b798 <pbuf_remove_header+0x9c>)
 800b716:	f008 fc29 	bl	8013f6c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d003      	beq.n	800b728 <pbuf_remove_header+0x2c>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b726:	d301      	bcc.n	800b72c <pbuf_remove_header+0x30>
    return 1;
 800b728:	2301      	movs	r3, #1
 800b72a:	e02c      	b.n	800b786 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <pbuf_remove_header+0x3a>
    return 0;
 800b732:	2300      	movs	r3, #0
 800b734:	e027      	b.n	800b786 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	895b      	ldrh	r3, [r3, #10]
 800b73e:	89fa      	ldrh	r2, [r7, #14]
 800b740:	429a      	cmp	r2, r3
 800b742:	d908      	bls.n	800b756 <pbuf_remove_header+0x5a>
 800b744:	4b12      	ldr	r3, [pc, #72]	; (800b790 <pbuf_remove_header+0x94>)
 800b746:	f240 2255 	movw	r2, #597	; 0x255
 800b74a:	4914      	ldr	r1, [pc, #80]	; (800b79c <pbuf_remove_header+0xa0>)
 800b74c:	4812      	ldr	r0, [pc, #72]	; (800b798 <pbuf_remove_header+0x9c>)
 800b74e:	f008 fc0d 	bl	8013f6c <iprintf>
 800b752:	2301      	movs	r3, #1
 800b754:	e017      	b.n	800b786 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	441a      	add	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	895a      	ldrh	r2, [r3, #10]
 800b76c:	89fb      	ldrh	r3, [r7, #14]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	b29a      	uxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	891a      	ldrh	r2, [r3, #8]
 800b77a:	89fb      	ldrh	r3, [r7, #14]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	b29a      	uxth	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	0801587c 	.word	0x0801587c
 800b794:	080159e0 	.word	0x080159e0
 800b798:	080158dc 	.word	0x080158dc
 800b79c:	080159ec 	.word	0x080159ec

0800b7a0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	807b      	strh	r3, [r7, #2]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b7b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	da08      	bge.n	800b7ca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b7b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7bc:	425b      	negs	r3, r3
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f7ff ff9b 	bl	800b6fc <pbuf_remove_header>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	e007      	b.n	800b7da <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b7ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7ce:	787a      	ldrb	r2, [r7, #1]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff ff1a 	bl	800b60c <pbuf_add_header_impl>
 800b7d8:	4603      	mov	r3, r0
  }
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b7ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff ffd2 	bl	800b7a0 <pbuf_header_impl>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3708      	adds	r7, #8
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d106      	bne.n	800b82a <pbuf_free+0x22>
 800b81c:	4b3b      	ldr	r3, [pc, #236]	; (800b90c <pbuf_free+0x104>)
 800b81e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b822:	493b      	ldr	r1, [pc, #236]	; (800b910 <pbuf_free+0x108>)
 800b824:	483b      	ldr	r0, [pc, #236]	; (800b914 <pbuf_free+0x10c>)
 800b826:	f008 fba1 	bl	8013f6c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	e069      	b.n	800b902 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b832:	e062      	b.n	800b8fa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b834:	f008 fb34 	bl	8013ea0 <sys_arch_protect>
 800b838:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	7b9b      	ldrb	r3, [r3, #14]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <pbuf_free+0x48>
 800b842:	4b32      	ldr	r3, [pc, #200]	; (800b90c <pbuf_free+0x104>)
 800b844:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b848:	4933      	ldr	r1, [pc, #204]	; (800b918 <pbuf_free+0x110>)
 800b84a:	4832      	ldr	r0, [pc, #200]	; (800b914 <pbuf_free+0x10c>)
 800b84c:	f008 fb8e 	bl	8013f6c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	7b9b      	ldrb	r3, [r3, #14]
 800b854:	3b01      	subs	r3, #1
 800b856:	b2da      	uxtb	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	739a      	strb	r2, [r3, #14]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	7b9b      	ldrb	r3, [r3, #14]
 800b860:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b862:	69b8      	ldr	r0, [r7, #24]
 800b864:	f008 fb2a 	bl	8013ebc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b868:	7dfb      	ldrb	r3, [r7, #23]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d143      	bne.n	800b8f6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	7b1b      	ldrb	r3, [r3, #12]
 800b878:	f003 030f 	and.w	r3, r3, #15
 800b87c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	7b5b      	ldrb	r3, [r3, #13]
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	d011      	beq.n	800b8ae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	691b      	ldr	r3, [r3, #16]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <pbuf_free+0x9c>
 800b896:	4b1d      	ldr	r3, [pc, #116]	; (800b90c <pbuf_free+0x104>)
 800b898:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b89c:	491f      	ldr	r1, [pc, #124]	; (800b91c <pbuf_free+0x114>)
 800b89e:	481d      	ldr	r0, [pc, #116]	; (800b914 <pbuf_free+0x10c>)
 800b8a0:	f008 fb64 	bl	8013f6c <iprintf>
        pc->custom_free_function(p);
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
 800b8ac:	e01d      	b.n	800b8ea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b8ae:	7bfb      	ldrb	r3, [r7, #15]
 800b8b0:	2b02      	cmp	r3, #2
 800b8b2:	d104      	bne.n	800b8be <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b8b4:	6879      	ldr	r1, [r7, #4]
 800b8b6:	200c      	movs	r0, #12
 800b8b8:	f7ff f902 	bl	800aac0 <memp_free>
 800b8bc:	e015      	b.n	800b8ea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d104      	bne.n	800b8ce <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	200b      	movs	r0, #11
 800b8c8:	f7ff f8fa 	bl	800aac0 <memp_free>
 800b8cc:	e00d      	b.n	800b8ea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b8ce:	7bfb      	ldrb	r3, [r7, #15]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <pbuf_free+0xd4>
          mem_free(p);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7fe fd85 	bl	800a3e4 <mem_free>
 800b8da:	e006      	b.n	800b8ea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b8dc:	4b0b      	ldr	r3, [pc, #44]	; (800b90c <pbuf_free+0x104>)
 800b8de:	f240 320f 	movw	r2, #783	; 0x30f
 800b8e2:	490f      	ldr	r1, [pc, #60]	; (800b920 <pbuf_free+0x118>)
 800b8e4:	480b      	ldr	r0, [pc, #44]	; (800b914 <pbuf_free+0x10c>)
 800b8e6:	f008 fb41 	bl	8013f6c <iprintf>
        }
      }
      count++;
 800b8ea:	7ffb      	ldrb	r3, [r7, #31]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	607b      	str	r3, [r7, #4]
 800b8f4:	e001      	b.n	800b8fa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d199      	bne.n	800b834 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b900:	7ffb      	ldrb	r3, [r7, #31]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3720      	adds	r7, #32
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0801587c 	.word	0x0801587c
 800b910:	080159e0 	.word	0x080159e0
 800b914:	080158dc 	.word	0x080158dc
 800b918:	08015a0c 	.word	0x08015a0c
 800b91c:	08015a24 	.word	0x08015a24
 800b920:	08015a48 	.word	0x08015a48

0800b924 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b930:	e005      	b.n	800b93e <pbuf_clen+0x1a>
    ++len;
 800b932:	89fb      	ldrh	r3, [r7, #14]
 800b934:	3301      	adds	r3, #1
 800b936:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1f6      	bne.n	800b932 <pbuf_clen+0xe>
  }
  return len;
 800b944:	89fb      	ldrh	r3, [r7, #14]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3714      	adds	r7, #20
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
	...

0800b954 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d016      	beq.n	800b990 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b962:	f008 fa9d 	bl	8013ea0 <sys_arch_protect>
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	7b9b      	ldrb	r3, [r3, #14]
 800b96c:	3301      	adds	r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	739a      	strb	r2, [r3, #14]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f008 faa1 	bl	8013ebc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	7b9b      	ldrb	r3, [r3, #14]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d106      	bne.n	800b990 <pbuf_ref+0x3c>
 800b982:	4b05      	ldr	r3, [pc, #20]	; (800b998 <pbuf_ref+0x44>)
 800b984:	f240 3242 	movw	r2, #834	; 0x342
 800b988:	4904      	ldr	r1, [pc, #16]	; (800b99c <pbuf_ref+0x48>)
 800b98a:	4805      	ldr	r0, [pc, #20]	; (800b9a0 <pbuf_ref+0x4c>)
 800b98c:	f008 faee 	bl	8013f6c <iprintf>
  }
}
 800b990:	bf00      	nop
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	0801587c 	.word	0x0801587c
 800b99c:	08015a5c 	.word	0x08015a5c
 800b9a0:	080158dc 	.word	0x080158dc

0800b9a4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d002      	beq.n	800b9ba <pbuf_cat+0x16>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d107      	bne.n	800b9ca <pbuf_cat+0x26>
 800b9ba:	4b20      	ldr	r3, [pc, #128]	; (800ba3c <pbuf_cat+0x98>)
 800b9bc:	f240 3259 	movw	r2, #857	; 0x359
 800b9c0:	491f      	ldr	r1, [pc, #124]	; (800ba40 <pbuf_cat+0x9c>)
 800b9c2:	4820      	ldr	r0, [pc, #128]	; (800ba44 <pbuf_cat+0xa0>)
 800b9c4:	f008 fad2 	bl	8013f6c <iprintf>
 800b9c8:	e034      	b.n	800ba34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e00a      	b.n	800b9e6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	891a      	ldrh	r2, [r3, #8]
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	891b      	ldrh	r3, [r3, #8]
 800b9d8:	4413      	add	r3, r2
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60fb      	str	r3, [r7, #12]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1f0      	bne.n	800b9d0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	891a      	ldrh	r2, [r3, #8]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	895b      	ldrh	r3, [r3, #10]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d006      	beq.n	800ba08 <pbuf_cat+0x64>
 800b9fa:	4b10      	ldr	r3, [pc, #64]	; (800ba3c <pbuf_cat+0x98>)
 800b9fc:	f240 3262 	movw	r2, #866	; 0x362
 800ba00:	4911      	ldr	r1, [pc, #68]	; (800ba48 <pbuf_cat+0xa4>)
 800ba02:	4810      	ldr	r0, [pc, #64]	; (800ba44 <pbuf_cat+0xa0>)
 800ba04:	f008 fab2 	bl	8013f6c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d006      	beq.n	800ba1e <pbuf_cat+0x7a>
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <pbuf_cat+0x98>)
 800ba12:	f240 3263 	movw	r2, #867	; 0x363
 800ba16:	490d      	ldr	r1, [pc, #52]	; (800ba4c <pbuf_cat+0xa8>)
 800ba18:	480a      	ldr	r0, [pc, #40]	; (800ba44 <pbuf_cat+0xa0>)
 800ba1a:	f008 faa7 	bl	8013f6c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	891a      	ldrh	r2, [r3, #8]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	891b      	ldrh	r3, [r3, #8]
 800ba26:	4413      	add	r3, r2
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0801587c 	.word	0x0801587c
 800ba40:	08015a70 	.word	0x08015a70
 800ba44:	080158dc 	.word	0x080158dc
 800ba48:	08015aa8 	.word	0x08015aa8
 800ba4c:	08015ad8 	.word	0x08015ad8

0800ba50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d008      	beq.n	800ba7a <pbuf_copy+0x2a>
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d005      	beq.n	800ba7a <pbuf_copy+0x2a>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	891a      	ldrh	r2, [r3, #8]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	891b      	ldrh	r3, [r3, #8]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d209      	bcs.n	800ba8e <pbuf_copy+0x3e>
 800ba7a:	4b57      	ldr	r3, [pc, #348]	; (800bbd8 <pbuf_copy+0x188>)
 800ba7c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ba80:	4956      	ldr	r1, [pc, #344]	; (800bbdc <pbuf_copy+0x18c>)
 800ba82:	4857      	ldr	r0, [pc, #348]	; (800bbe0 <pbuf_copy+0x190>)
 800ba84:	f008 fa72 	bl	8013f6c <iprintf>
 800ba88:	f06f 030f 	mvn.w	r3, #15
 800ba8c:	e09f      	b.n	800bbce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	895b      	ldrh	r3, [r3, #10]
 800ba92:	461a      	mov	r2, r3
 800ba94:	697b      	ldr	r3, [r7, #20]
 800ba96:	1ad2      	subs	r2, r2, r3
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	895b      	ldrh	r3, [r3, #10]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	1acb      	subs	r3, r1, r3
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d306      	bcc.n	800bab4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	895b      	ldrh	r3, [r3, #10]
 800baaa:	461a      	mov	r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	60fb      	str	r3, [r7, #12]
 800bab2:	e005      	b.n	800bac0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	895b      	ldrh	r3, [r3, #10]
 800bab8:	461a      	mov	r2, r3
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	18d0      	adds	r0, r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685a      	ldr	r2, [r3, #4]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	4413      	add	r3, r2
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4619      	mov	r1, r3
 800bad4:	f008 fa34 	bl	8013f40 <memcpy>
    offset_to += len;
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	4413      	add	r3, r2
 800bade:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4413      	add	r3, r2
 800bae6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	895b      	ldrh	r3, [r3, #10]
 800baec:	461a      	mov	r2, r3
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d906      	bls.n	800bb02 <pbuf_copy+0xb2>
 800baf4:	4b38      	ldr	r3, [pc, #224]	; (800bbd8 <pbuf_copy+0x188>)
 800baf6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bafa:	493a      	ldr	r1, [pc, #232]	; (800bbe4 <pbuf_copy+0x194>)
 800bafc:	4838      	ldr	r0, [pc, #224]	; (800bbe0 <pbuf_copy+0x190>)
 800bafe:	f008 fa35 	bl	8013f6c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	895b      	ldrh	r3, [r3, #10]
 800bb06:	461a      	mov	r2, r3
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d906      	bls.n	800bb1c <pbuf_copy+0xcc>
 800bb0e:	4b32      	ldr	r3, [pc, #200]	; (800bbd8 <pbuf_copy+0x188>)
 800bb10:	f240 32da 	movw	r2, #986	; 0x3da
 800bb14:	4934      	ldr	r1, [pc, #208]	; (800bbe8 <pbuf_copy+0x198>)
 800bb16:	4832      	ldr	r0, [pc, #200]	; (800bbe0 <pbuf_copy+0x190>)
 800bb18:	f008 fa28 	bl	8013f6c <iprintf>
    if (offset_from >= p_from->len) {
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	895b      	ldrh	r3, [r3, #10]
 800bb20:	461a      	mov	r2, r3
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d304      	bcc.n	800bb32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	895b      	ldrh	r3, [r3, #10]
 800bb36:	461a      	mov	r2, r3
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d114      	bne.n	800bb68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10c      	bne.n	800bb68 <pbuf_copy+0x118>
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d009      	beq.n	800bb68 <pbuf_copy+0x118>
 800bb54:	4b20      	ldr	r3, [pc, #128]	; (800bbd8 <pbuf_copy+0x188>)
 800bb56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bb5a:	4924      	ldr	r1, [pc, #144]	; (800bbec <pbuf_copy+0x19c>)
 800bb5c:	4820      	ldr	r0, [pc, #128]	; (800bbe0 <pbuf_copy+0x190>)
 800bb5e:	f008 fa05 	bl	8013f6c <iprintf>
 800bb62:	f06f 030f 	mvn.w	r3, #15
 800bb66:	e032      	b.n	800bbce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d013      	beq.n	800bb96 <pbuf_copy+0x146>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	895a      	ldrh	r2, [r3, #10]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d10d      	bne.n	800bb96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d009      	beq.n	800bb96 <pbuf_copy+0x146>
 800bb82:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <pbuf_copy+0x188>)
 800bb84:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bb88:	4919      	ldr	r1, [pc, #100]	; (800bbf0 <pbuf_copy+0x1a0>)
 800bb8a:	4815      	ldr	r0, [pc, #84]	; (800bbe0 <pbuf_copy+0x190>)
 800bb8c:	f008 f9ee 	bl	8013f6c <iprintf>
 800bb90:	f06f 0305 	mvn.w	r3, #5
 800bb94:	e01b      	b.n	800bbce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d013      	beq.n	800bbc4 <pbuf_copy+0x174>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	895a      	ldrh	r2, [r3, #10]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d10d      	bne.n	800bbc4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d009      	beq.n	800bbc4 <pbuf_copy+0x174>
 800bbb0:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <pbuf_copy+0x188>)
 800bbb2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bbb6:	490e      	ldr	r1, [pc, #56]	; (800bbf0 <pbuf_copy+0x1a0>)
 800bbb8:	4809      	ldr	r0, [pc, #36]	; (800bbe0 <pbuf_copy+0x190>)
 800bbba:	f008 f9d7 	bl	8013f6c <iprintf>
 800bbbe:	f06f 0305 	mvn.w	r3, #5
 800bbc2:	e004      	b.n	800bbce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f47f af61 	bne.w	800ba8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	0801587c 	.word	0x0801587c
 800bbdc:	08015b24 	.word	0x08015b24
 800bbe0:	080158dc 	.word	0x080158dc
 800bbe4:	08015b54 	.word	0x08015b54
 800bbe8:	08015b6c 	.word	0x08015b6c
 800bbec:	08015b88 	.word	0x08015b88
 800bbf0:	08015b98 	.word	0x08015b98

0800bbf4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b088      	sub	sp, #32
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	460b      	mov	r3, r1
 800bc04:	80fb      	strh	r3, [r7, #6]
 800bc06:	4613      	mov	r3, r2
 800bc08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d108      	bne.n	800bc2a <pbuf_copy_partial+0x36>
 800bc18:	4b2b      	ldr	r3, [pc, #172]	; (800bcc8 <pbuf_copy_partial+0xd4>)
 800bc1a:	f240 420a 	movw	r2, #1034	; 0x40a
 800bc1e:	492b      	ldr	r1, [pc, #172]	; (800bccc <pbuf_copy_partial+0xd8>)
 800bc20:	482b      	ldr	r0, [pc, #172]	; (800bcd0 <pbuf_copy_partial+0xdc>)
 800bc22:	f008 f9a3 	bl	8013f6c <iprintf>
 800bc26:	2300      	movs	r3, #0
 800bc28:	e04a      	b.n	800bcc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d108      	bne.n	800bc42 <pbuf_copy_partial+0x4e>
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <pbuf_copy_partial+0xd4>)
 800bc32:	f240 420b 	movw	r2, #1035	; 0x40b
 800bc36:	4927      	ldr	r1, [pc, #156]	; (800bcd4 <pbuf_copy_partial+0xe0>)
 800bc38:	4825      	ldr	r0, [pc, #148]	; (800bcd0 <pbuf_copy_partial+0xdc>)
 800bc3a:	f008 f997 	bl	8013f6c <iprintf>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e03e      	b.n	800bcc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	61fb      	str	r3, [r7, #28]
 800bc46:	e034      	b.n	800bcb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bc48:	88bb      	ldrh	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00a      	beq.n	800bc64 <pbuf_copy_partial+0x70>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	895b      	ldrh	r3, [r3, #10]
 800bc52:	88ba      	ldrh	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d305      	bcc.n	800bc64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	895b      	ldrh	r3, [r3, #10]
 800bc5c:	88ba      	ldrh	r2, [r7, #4]
 800bc5e:	1ad3      	subs	r3, r2, r3
 800bc60:	80bb      	strh	r3, [r7, #4]
 800bc62:	e023      	b.n	800bcac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	895a      	ldrh	r2, [r3, #10]
 800bc68:	88bb      	ldrh	r3, [r7, #4]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bc6e:	8b3a      	ldrh	r2, [r7, #24]
 800bc70:	88fb      	ldrh	r3, [r7, #6]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d901      	bls.n	800bc7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bc76:	88fb      	ldrh	r3, [r7, #6]
 800bc78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bc7a:	8b7b      	ldrh	r3, [r7, #26]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	18d0      	adds	r0, r2, r3
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	685a      	ldr	r2, [r3, #4]
 800bc84:	88bb      	ldrh	r3, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	8b3a      	ldrh	r2, [r7, #24]
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	f008 f958 	bl	8013f40 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bc90:	8afa      	ldrh	r2, [r7, #22]
 800bc92:	8b3b      	ldrh	r3, [r7, #24]
 800bc94:	4413      	add	r3, r2
 800bc96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bc98:	8b7a      	ldrh	r2, [r7, #26]
 800bc9a:	8b3b      	ldrh	r3, [r7, #24]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bca0:	88fa      	ldrh	r2, [r7, #6]
 800bca2:	8b3b      	ldrh	r3, [r7, #24]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	61fb      	str	r3, [r7, #28]
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <pbuf_copy_partial+0xca>
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1c4      	bne.n	800bc48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bcbe:	8afb      	ldrh	r3, [r7, #22]
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	0801587c 	.word	0x0801587c
 800bccc:	08015bc4 	.word	0x08015bc4
 800bcd0:	080158dc 	.word	0x080158dc
 800bcd4:	08015be4 	.word	0x08015be4

0800bcd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	4603      	mov	r3, r0
 800bce0:	603a      	str	r2, [r7, #0]
 800bce2:	71fb      	strb	r3, [r7, #7]
 800bce4:	460b      	mov	r3, r1
 800bce6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	8919      	ldrh	r1, [r3, #8]
 800bcec:	88ba      	ldrh	r2, [r7, #4]
 800bcee:	79fb      	ldrb	r3, [r7, #7]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff faa5 	bl	800b240 <pbuf_alloc>
 800bcf6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d101      	bne.n	800bd02 <pbuf_clone+0x2a>
    return NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	e011      	b.n	800bd26 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f7ff fea3 	bl	800ba50 <pbuf_copy>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d006      	beq.n	800bd24 <pbuf_clone+0x4c>
 800bd16:	4b06      	ldr	r3, [pc, #24]	; (800bd30 <pbuf_clone+0x58>)
 800bd18:	f240 5224 	movw	r2, #1316	; 0x524
 800bd1c:	4905      	ldr	r1, [pc, #20]	; (800bd34 <pbuf_clone+0x5c>)
 800bd1e:	4806      	ldr	r0, [pc, #24]	; (800bd38 <pbuf_clone+0x60>)
 800bd20:	f008 f924 	bl	8013f6c <iprintf>
  return q;
 800bd24:	68fb      	ldr	r3, [r7, #12]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop
 800bd30:	0801587c 	.word	0x0801587c
 800bd34:	08015cf0 	.word	0x08015cf0
 800bd38:	080158dc 	.word	0x080158dc

0800bd3c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bd40:	f008 f92c 	bl	8013f9c <rand>
 800bd44:	4603      	mov	r3, r0
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	4b01      	ldr	r3, [pc, #4]	; (800bd5c <tcp_init+0x20>)
 800bd56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bd58:	bf00      	nop
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	20000010 	.word	0x20000010

0800bd60 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b082      	sub	sp, #8
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7d1b      	ldrb	r3, [r3, #20]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d105      	bne.n	800bd7c <tcp_free+0x1c>
 800bd70:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <tcp_free+0x2c>)
 800bd72:	22d4      	movs	r2, #212	; 0xd4
 800bd74:	4906      	ldr	r1, [pc, #24]	; (800bd90 <tcp_free+0x30>)
 800bd76:	4807      	ldr	r0, [pc, #28]	; (800bd94 <tcp_free+0x34>)
 800bd78:	f008 f8f8 	bl	8013f6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	2001      	movs	r0, #1
 800bd80:	f7fe fe9e 	bl	800aac0 <memp_free>
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	08015d7c 	.word	0x08015d7c
 800bd90:	08015dac 	.word	0x08015dac
 800bd94:	08015dc0 	.word	0x08015dc0

0800bd98 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	7d1b      	ldrb	r3, [r3, #20]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d105      	bne.n	800bdb4 <tcp_free_listen+0x1c>
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <tcp_free_listen+0x2c>)
 800bdaa:	22df      	movs	r2, #223	; 0xdf
 800bdac:	4906      	ldr	r1, [pc, #24]	; (800bdc8 <tcp_free_listen+0x30>)
 800bdae:	4807      	ldr	r0, [pc, #28]	; (800bdcc <tcp_free_listen+0x34>)
 800bdb0:	f008 f8dc 	bl	8013f6c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bdb4:	6879      	ldr	r1, [r7, #4]
 800bdb6:	2002      	movs	r0, #2
 800bdb8:	f7fe fe82 	bl	800aac0 <memp_free>
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	08015d7c 	.word	0x08015d7c
 800bdc8:	08015de8 	.word	0x08015de8
 800bdcc:	08015dc0 	.word	0x08015dc0

0800bdd0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bdd4:	f000 fea2 	bl	800cb1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bdd8:	4b07      	ldr	r3, [pc, #28]	; (800bdf8 <tcp_tmr+0x28>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	3301      	adds	r3, #1
 800bdde:	b2da      	uxtb	r2, r3
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <tcp_tmr+0x28>)
 800bde2:	701a      	strb	r2, [r3, #0]
 800bde4:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <tcp_tmr+0x28>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d001      	beq.n	800bdf4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bdf0:	f000 fb54 	bl	800c49c <tcp_slowtmr>
  }
}
 800bdf4:	bf00      	nop
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	20004a01 	.word	0x20004a01

0800bdfc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d105      	bne.n	800be18 <tcp_remove_listener+0x1c>
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <tcp_remove_listener+0x48>)
 800be0e:	22ff      	movs	r2, #255	; 0xff
 800be10:	490d      	ldr	r1, [pc, #52]	; (800be48 <tcp_remove_listener+0x4c>)
 800be12:	480e      	ldr	r0, [pc, #56]	; (800be4c <tcp_remove_listener+0x50>)
 800be14:	f008 f8aa 	bl	8013f6c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	60fb      	str	r3, [r7, #12]
 800be1c:	e00a      	b.n	800be34 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	429a      	cmp	r2, r3
 800be26:	d102      	bne.n	800be2e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1f1      	bne.n	800be1e <tcp_remove_listener+0x22>
    }
  }
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	08015d7c 	.word	0x08015d7c
 800be48:	08015e04 	.word	0x08015e04
 800be4c:	08015dc0 	.word	0x08015dc0

0800be50 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d106      	bne.n	800be6c <tcp_listen_closed+0x1c>
 800be5e:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <tcp_listen_closed+0x60>)
 800be60:	f240 1211 	movw	r2, #273	; 0x111
 800be64:	4913      	ldr	r1, [pc, #76]	; (800beb4 <tcp_listen_closed+0x64>)
 800be66:	4814      	ldr	r0, [pc, #80]	; (800beb8 <tcp_listen_closed+0x68>)
 800be68:	f008 f880 	bl	8013f6c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7d1b      	ldrb	r3, [r3, #20]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d006      	beq.n	800be82 <tcp_listen_closed+0x32>
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <tcp_listen_closed+0x60>)
 800be76:	f44f 7289 	mov.w	r2, #274	; 0x112
 800be7a:	4910      	ldr	r1, [pc, #64]	; (800bebc <tcp_listen_closed+0x6c>)
 800be7c:	480e      	ldr	r0, [pc, #56]	; (800beb8 <tcp_listen_closed+0x68>)
 800be7e:	f008 f875 	bl	8013f6c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be82:	2301      	movs	r3, #1
 800be84:	60fb      	str	r3, [r7, #12]
 800be86:	e00b      	b.n	800bea0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be88:	4a0d      	ldr	r2, [pc, #52]	; (800bec0 <tcp_listen_closed+0x70>)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff ffb1 	bl	800bdfc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	3301      	adds	r3, #1
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d9f0      	bls.n	800be88 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bea6:	bf00      	nop
 800bea8:	bf00      	nop
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	08015d7c 	.word	0x08015d7c
 800beb4:	08015e2c 	.word	0x08015e2c
 800beb8:	08015dc0 	.word	0x08015dc0
 800bebc:	08015e38 	.word	0x08015e38
 800bec0:	08017db4 	.word	0x08017db4

0800bec4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bec4:	b5b0      	push	{r4, r5, r7, lr}
 800bec6:	b088      	sub	sp, #32
 800bec8:	af04      	add	r7, sp, #16
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	460b      	mov	r3, r1
 800bece:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d106      	bne.n	800bee4 <tcp_close_shutdown+0x20>
 800bed6:	4b63      	ldr	r3, [pc, #396]	; (800c064 <tcp_close_shutdown+0x1a0>)
 800bed8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bedc:	4962      	ldr	r1, [pc, #392]	; (800c068 <tcp_close_shutdown+0x1a4>)
 800bede:	4863      	ldr	r0, [pc, #396]	; (800c06c <tcp_close_shutdown+0x1a8>)
 800bee0:	f008 f844 	bl	8013f6c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d066      	beq.n	800bfb8 <tcp_close_shutdown+0xf4>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	7d1b      	ldrb	r3, [r3, #20]
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d003      	beq.n	800befa <tcp_close_shutdown+0x36>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	7d1b      	ldrb	r3, [r3, #20]
 800bef6:	2b07      	cmp	r3, #7
 800bef8:	d15e      	bne.n	800bfb8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d104      	bne.n	800bf0c <tcp_close_shutdown+0x48>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf0a:	d055      	beq.n	800bfb8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	8b5b      	ldrh	r3, [r3, #26]
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d106      	bne.n	800bf26 <tcp_close_shutdown+0x62>
 800bf18:	4b52      	ldr	r3, [pc, #328]	; (800c064 <tcp_close_shutdown+0x1a0>)
 800bf1a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bf1e:	4954      	ldr	r1, [pc, #336]	; (800c070 <tcp_close_shutdown+0x1ac>)
 800bf20:	4852      	ldr	r0, [pc, #328]	; (800c06c <tcp_close_shutdown+0x1a8>)
 800bf22:	f008 f823 	bl	8013f6c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bf2e:	687d      	ldr	r5, [r7, #4]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3304      	adds	r3, #4
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	8ad2      	ldrh	r2, [r2, #22]
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	8b09      	ldrh	r1, [r1, #24]
 800bf3c:	9102      	str	r1, [sp, #8]
 800bf3e:	9201      	str	r2, [sp, #4]
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	462b      	mov	r3, r5
 800bf44:	4622      	mov	r2, r4
 800bf46:	4601      	mov	r1, r0
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f004 fe8d 	bl	8010c68 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f001 f8c6 	bl	800d0e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bf54:	4b47      	ldr	r3, [pc, #284]	; (800c074 <tcp_close_shutdown+0x1b0>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d105      	bne.n	800bf6a <tcp_close_shutdown+0xa6>
 800bf5e:	4b45      	ldr	r3, [pc, #276]	; (800c074 <tcp_close_shutdown+0x1b0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	4a43      	ldr	r2, [pc, #268]	; (800c074 <tcp_close_shutdown+0x1b0>)
 800bf66:	6013      	str	r3, [r2, #0]
 800bf68:	e013      	b.n	800bf92 <tcp_close_shutdown+0xce>
 800bf6a:	4b42      	ldr	r3, [pc, #264]	; (800c074 <tcp_close_shutdown+0x1b0>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	e00c      	b.n	800bf8c <tcp_close_shutdown+0xc8>
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d104      	bne.n	800bf86 <tcp_close_shutdown+0xc2>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68da      	ldr	r2, [r3, #12]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	60da      	str	r2, [r3, #12]
 800bf84:	e005      	b.n	800bf92 <tcp_close_shutdown+0xce>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1ef      	bne.n	800bf72 <tcp_close_shutdown+0xae>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2200      	movs	r2, #0
 800bf96:	60da      	str	r2, [r3, #12]
 800bf98:	4b37      	ldr	r3, [pc, #220]	; (800c078 <tcp_close_shutdown+0x1b4>)
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bf9e:	4b37      	ldr	r3, [pc, #220]	; (800c07c <tcp_close_shutdown+0x1b8>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d102      	bne.n	800bfae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bfa8:	f003 fd5a 	bl	800fa60 <tcp_trigger_input_pcb_close>
 800bfac:	e002      	b.n	800bfb4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff fed6 	bl	800bd60 <tcp_free>
      }
      return ERR_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e050      	b.n	800c05a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	7d1b      	ldrb	r3, [r3, #20]
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d03b      	beq.n	800c038 <tcp_close_shutdown+0x174>
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	dc44      	bgt.n	800c04e <tcp_close_shutdown+0x18a>
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d002      	beq.n	800bfce <tcp_close_shutdown+0x10a>
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d02a      	beq.n	800c022 <tcp_close_shutdown+0x15e>
 800bfcc:	e03f      	b.n	800c04e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8adb      	ldrh	r3, [r3, #22]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d021      	beq.n	800c01a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfd6:	4b2a      	ldr	r3, [pc, #168]	; (800c080 <tcp_close_shutdown+0x1bc>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	687a      	ldr	r2, [r7, #4]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d105      	bne.n	800bfec <tcp_close_shutdown+0x128>
 800bfe0:	4b27      	ldr	r3, [pc, #156]	; (800c080 <tcp_close_shutdown+0x1bc>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	4a26      	ldr	r2, [pc, #152]	; (800c080 <tcp_close_shutdown+0x1bc>)
 800bfe8:	6013      	str	r3, [r2, #0]
 800bfea:	e013      	b.n	800c014 <tcp_close_shutdown+0x150>
 800bfec:	4b24      	ldr	r3, [pc, #144]	; (800c080 <tcp_close_shutdown+0x1bc>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	60bb      	str	r3, [r7, #8]
 800bff2:	e00c      	b.n	800c00e <tcp_close_shutdown+0x14a>
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d104      	bne.n	800c008 <tcp_close_shutdown+0x144>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	60da      	str	r2, [r3, #12]
 800c006:	e005      	b.n	800c014 <tcp_close_shutdown+0x150>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	60bb      	str	r3, [r7, #8]
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1ef      	bne.n	800bff4 <tcp_close_shutdown+0x130>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fea0 	bl	800bd60 <tcp_free>
      break;
 800c020:	e01a      	b.n	800c058 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f7ff ff14 	bl	800be50 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c028:	6879      	ldr	r1, [r7, #4]
 800c02a:	4816      	ldr	r0, [pc, #88]	; (800c084 <tcp_close_shutdown+0x1c0>)
 800c02c:	f001 f8a8 	bl	800d180 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7ff feb1 	bl	800bd98 <tcp_free_listen>
      break;
 800c036:	e00f      	b.n	800c058 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c038:	6879      	ldr	r1, [r7, #4]
 800c03a:	480e      	ldr	r0, [pc, #56]	; (800c074 <tcp_close_shutdown+0x1b0>)
 800c03c:	f001 f8a0 	bl	800d180 <tcp_pcb_remove>
 800c040:	4b0d      	ldr	r3, [pc, #52]	; (800c078 <tcp_close_shutdown+0x1b4>)
 800c042:	2201      	movs	r2, #1
 800c044:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f7ff fe8a 	bl	800bd60 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c04c:	e004      	b.n	800c058 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f81a 	bl	800c088 <tcp_close_shutdown_fin>
 800c054:	4603      	mov	r3, r0
 800c056:	e000      	b.n	800c05a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bdb0      	pop	{r4, r5, r7, pc}
 800c062:	bf00      	nop
 800c064:	08015d7c 	.word	0x08015d7c
 800c068:	08015e50 	.word	0x08015e50
 800c06c:	08015dc0 	.word	0x08015dc0
 800c070:	08015e70 	.word	0x08015e70
 800c074:	2000b944 	.word	0x2000b944
 800c078:	2000b940 	.word	0x2000b940
 800c07c:	2000b958 	.word	0x2000b958
 800c080:	2000b950 	.word	0x2000b950
 800c084:	2000b94c 	.word	0x2000b94c

0800c088 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d106      	bne.n	800c0a4 <tcp_close_shutdown_fin+0x1c>
 800c096:	4b2e      	ldr	r3, [pc, #184]	; (800c150 <tcp_close_shutdown_fin+0xc8>)
 800c098:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c09c:	492d      	ldr	r1, [pc, #180]	; (800c154 <tcp_close_shutdown_fin+0xcc>)
 800c09e:	482e      	ldr	r0, [pc, #184]	; (800c158 <tcp_close_shutdown_fin+0xd0>)
 800c0a0:	f007 ff64 	bl	8013f6c <iprintf>

  switch (pcb->state) {
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7d1b      	ldrb	r3, [r3, #20]
 800c0a8:	2b07      	cmp	r3, #7
 800c0aa:	d020      	beq.n	800c0ee <tcp_close_shutdown_fin+0x66>
 800c0ac:	2b07      	cmp	r3, #7
 800c0ae:	dc2b      	bgt.n	800c108 <tcp_close_shutdown_fin+0x80>
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d002      	beq.n	800c0ba <tcp_close_shutdown_fin+0x32>
 800c0b4:	2b04      	cmp	r3, #4
 800c0b6:	d00d      	beq.n	800c0d4 <tcp_close_shutdown_fin+0x4c>
 800c0b8:	e026      	b.n	800c108 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f003 fee2 	bl	800fe84 <tcp_send_fin>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11f      	bne.n	800c10c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2205      	movs	r2, #5
 800c0d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0d2:	e01b      	b.n	800c10c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f003 fed5 	bl	800fe84 <tcp_send_fin>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d114      	bne.n	800c110 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0ec:	e010      	b.n	800c110 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f003 fec8 	bl	800fe84 <tcp_send_fin>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c0f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d109      	bne.n	800c114 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2209      	movs	r2, #9
 800c104:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c106:	e005      	b.n	800c114 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c108:	2300      	movs	r3, #0
 800c10a:	e01c      	b.n	800c146 <tcp_close_shutdown_fin+0xbe>
      break;
 800c10c:	bf00      	nop
 800c10e:	e002      	b.n	800c116 <tcp_close_shutdown_fin+0x8e>
      break;
 800c110:	bf00      	nop
 800c112:	e000      	b.n	800c116 <tcp_close_shutdown_fin+0x8e>
      break;
 800c114:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d103      	bne.n	800c126 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f003 ffee 	bl	8010100 <tcp_output>
 800c124:	e00d      	b.n	800c142 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12e:	d108      	bne.n	800c142 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	8b5b      	ldrh	r3, [r3, #26]
 800c134:	f043 0308 	orr.w	r3, r3, #8
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	e001      	b.n	800c146 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c142:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	08015d7c 	.word	0x08015d7c
 800c154:	08015e2c 	.word	0x08015e2c
 800c158:	08015dc0 	.word	0x08015dc0

0800c15c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d109      	bne.n	800c17e <tcp_close+0x22>
 800c16a:	4b0f      	ldr	r3, [pc, #60]	; (800c1a8 <tcp_close+0x4c>)
 800c16c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c170:	490e      	ldr	r1, [pc, #56]	; (800c1ac <tcp_close+0x50>)
 800c172:	480f      	ldr	r0, [pc, #60]	; (800c1b0 <tcp_close+0x54>)
 800c174:	f007 fefa 	bl	8013f6c <iprintf>
 800c178:	f06f 030f 	mvn.w	r3, #15
 800c17c:	e00f      	b.n	800c19e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7d1b      	ldrb	r3, [r3, #20]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d006      	beq.n	800c194 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	8b5b      	ldrh	r3, [r3, #26]
 800c18a:	f043 0310 	orr.w	r3, r3, #16
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c194:	2101      	movs	r1, #1
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fe94 	bl	800bec4 <tcp_close_shutdown>
 800c19c:	4603      	mov	r3, r0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	08015d7c 	.word	0x08015d7c
 800c1ac:	08015e8c 	.word	0x08015e8c
 800c1b0:	08015dc0 	.word	0x08015dc0

0800c1b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b08e      	sub	sp, #56	; 0x38
 800c1b8:	af04      	add	r7, sp, #16
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d107      	bne.n	800c1d4 <tcp_abandon+0x20>
 800c1c4:	4b52      	ldr	r3, [pc, #328]	; (800c310 <tcp_abandon+0x15c>)
 800c1c6:	f240 223d 	movw	r2, #573	; 0x23d
 800c1ca:	4952      	ldr	r1, [pc, #328]	; (800c314 <tcp_abandon+0x160>)
 800c1cc:	4852      	ldr	r0, [pc, #328]	; (800c318 <tcp_abandon+0x164>)
 800c1ce:	f007 fecd 	bl	8013f6c <iprintf>
 800c1d2:	e099      	b.n	800c308 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	7d1b      	ldrb	r3, [r3, #20]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d106      	bne.n	800c1ea <tcp_abandon+0x36>
 800c1dc:	4b4c      	ldr	r3, [pc, #304]	; (800c310 <tcp_abandon+0x15c>)
 800c1de:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c1e2:	494e      	ldr	r1, [pc, #312]	; (800c31c <tcp_abandon+0x168>)
 800c1e4:	484c      	ldr	r0, [pc, #304]	; (800c318 <tcp_abandon+0x164>)
 800c1e6:	f007 fec1 	bl	8013f6c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	7d1b      	ldrb	r3, [r3, #20]
 800c1ee:	2b0a      	cmp	r3, #10
 800c1f0:	d107      	bne.n	800c202 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	484a      	ldr	r0, [pc, #296]	; (800c320 <tcp_abandon+0x16c>)
 800c1f6:	f000 ffc3 	bl	800d180 <tcp_pcb_remove>
    tcp_free(pcb);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff fdb0 	bl	800bd60 <tcp_free>
 800c200:	e082      	b.n	800c308 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c214:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c21c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	7d1b      	ldrb	r3, [r3, #20]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d126      	bne.n	800c27a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	8adb      	ldrh	r3, [r3, #22]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02e      	beq.n	800c292 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c234:	4b3b      	ldr	r3, [pc, #236]	; (800c324 <tcp_abandon+0x170>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d105      	bne.n	800c24a <tcp_abandon+0x96>
 800c23e:	4b39      	ldr	r3, [pc, #228]	; (800c324 <tcp_abandon+0x170>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4a37      	ldr	r2, [pc, #220]	; (800c324 <tcp_abandon+0x170>)
 800c246:	6013      	str	r3, [r2, #0]
 800c248:	e013      	b.n	800c272 <tcp_abandon+0xbe>
 800c24a:	4b36      	ldr	r3, [pc, #216]	; (800c324 <tcp_abandon+0x170>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	61fb      	str	r3, [r7, #28]
 800c250:	e00c      	b.n	800c26c <tcp_abandon+0xb8>
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d104      	bne.n	800c266 <tcp_abandon+0xb2>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68da      	ldr	r2, [r3, #12]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	60da      	str	r2, [r3, #12]
 800c264:	e005      	b.n	800c272 <tcp_abandon+0xbe>
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	61fb      	str	r3, [r7, #28]
 800c26c:	69fb      	ldr	r3, [r7, #28]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d1ef      	bne.n	800c252 <tcp_abandon+0x9e>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	60da      	str	r2, [r3, #12]
 800c278:	e00b      	b.n	800c292 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	8adb      	ldrh	r3, [r3, #22]
 800c282:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	4828      	ldr	r0, [pc, #160]	; (800c328 <tcp_abandon+0x174>)
 800c288:	f000 ff7a 	bl	800d180 <tcp_pcb_remove>
 800c28c:	4b27      	ldr	r3, [pc, #156]	; (800c32c <tcp_abandon+0x178>)
 800c28e:	2201      	movs	r2, #1
 800c290:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c296:	2b00      	cmp	r3, #0
 800c298:	d004      	beq.n	800c2a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fd1c 	bl	800ccdc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d004      	beq.n	800c2b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fd13 	bl	800ccdc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d004      	beq.n	800c2c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f000 fd0a 	bl	800ccdc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00e      	beq.n	800c2ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	8b12      	ldrh	r2, [r2, #24]
 800c2d8:	9202      	str	r2, [sp, #8]
 800c2da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c2dc:	9201      	str	r2, [sp, #4]
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	69b9      	ldr	r1, [r7, #24]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f004 fcbe 	bl	8010c68 <tcp_rst>
    }
    last_state = pcb->state;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7d1b      	ldrb	r3, [r3, #20]
 800c2f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff fd34 	bl	800bd60 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d004      	beq.n	800c308 <tcp_abandon+0x154>
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f06f 010c 	mvn.w	r1, #12
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	4798      	blx	r3
  }
}
 800c308:	3728      	adds	r7, #40	; 0x28
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	08015d7c 	.word	0x08015d7c
 800c314:	08015ec0 	.word	0x08015ec0
 800c318:	08015dc0 	.word	0x08015dc0
 800c31c:	08015edc 	.word	0x08015edc
 800c320:	2000b954 	.word	0x2000b954
 800c324:	2000b950 	.word	0x2000b950
 800c328:	2000b944 	.word	0x2000b944
 800c32c:	2000b940 	.word	0x2000b940

0800c330 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c338:	2101      	movs	r1, #1
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff ff3a 	bl	800c1b4 <tcp_abandon>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d106      	bne.n	800c364 <tcp_update_rcv_ann_wnd+0x1c>
 800c356:	4b25      	ldr	r3, [pc, #148]	; (800c3ec <tcp_update_rcv_ann_wnd+0xa4>)
 800c358:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c35c:	4924      	ldr	r1, [pc, #144]	; (800c3f0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c35e:	4825      	ldr	r0, [pc, #148]	; (800c3f4 <tcp_update_rcv_ann_wnd+0xac>)
 800c360:	f007 fe04 	bl	8013f6c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c36c:	4413      	add	r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c378:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c37c:	bf28      	it	cs
 800c37e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c382:	b292      	uxth	r2, r2
 800c384:	4413      	add	r3, r2
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	db08      	blt.n	800c3a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	e020      	b.n	800c3e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dd03      	ble.n	800c3b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c3b4:	e014      	b.n	800c3e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c8:	d306      	bcc.n	800c3d8 <tcp_update_rcv_ann_wnd+0x90>
 800c3ca:	4b08      	ldr	r3, [pc, #32]	; (800c3ec <tcp_update_rcv_ann_wnd+0xa4>)
 800c3cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c3d0:	4909      	ldr	r1, [pc, #36]	; (800c3f8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c3d2:	4808      	ldr	r0, [pc, #32]	; (800c3f4 <tcp_update_rcv_ann_wnd+0xac>)
 800c3d4:	f007 fdca 	bl	8013f6c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	b29a      	uxth	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c3e0:	2300      	movs	r3, #0
  }
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	08015d7c 	.word	0x08015d7c
 800c3f0:	08015fd8 	.word	0x08015fd8
 800c3f4:	08015dc0 	.word	0x08015dc0
 800c3f8:	08015ffc 	.word	0x08015ffc

0800c3fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	460b      	mov	r3, r1
 800c406:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d107      	bne.n	800c41e <tcp_recved+0x22>
 800c40e:	4b1f      	ldr	r3, [pc, #124]	; (800c48c <tcp_recved+0x90>)
 800c410:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c414:	491e      	ldr	r1, [pc, #120]	; (800c490 <tcp_recved+0x94>)
 800c416:	481f      	ldr	r0, [pc, #124]	; (800c494 <tcp_recved+0x98>)
 800c418:	f007 fda8 	bl	8013f6c <iprintf>
 800c41c:	e032      	b.n	800c484 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7d1b      	ldrb	r3, [r3, #20]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d106      	bne.n	800c434 <tcp_recved+0x38>
 800c426:	4b19      	ldr	r3, [pc, #100]	; (800c48c <tcp_recved+0x90>)
 800c428:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c42c:	491a      	ldr	r1, [pc, #104]	; (800c498 <tcp_recved+0x9c>)
 800c42e:	4819      	ldr	r0, [pc, #100]	; (800c494 <tcp_recved+0x98>)
 800c430:	f007 fd9c 	bl	8013f6c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c438:	887b      	ldrh	r3, [r7, #2]
 800c43a:	4413      	add	r3, r2
 800c43c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c43e:	89fb      	ldrh	r3, [r7, #14]
 800c440:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c444:	d804      	bhi.n	800c450 <tcp_recved+0x54>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c44a:	89fa      	ldrh	r2, [r7, #14]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d204      	bcs.n	800c45a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c456:	851a      	strh	r2, [r3, #40]	; 0x28
 800c458:	e002      	b.n	800c460 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	89fa      	ldrh	r2, [r7, #14]
 800c45e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff ff71 	bl	800c348 <tcp_update_rcv_ann_wnd>
 800c466:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c46e:	d309      	bcc.n	800c484 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	8b5b      	ldrh	r3, [r3, #26]
 800c474:	f043 0302 	orr.w	r3, r3, #2
 800c478:	b29a      	uxth	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f003 fe3e 	bl	8010100 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	08015d7c 	.word	0x08015d7c
 800c490:	08016018 	.word	0x08016018
 800c494:	08015dc0 	.word	0x08015dc0
 800c498:	08016030 	.word	0x08016030

0800c49c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c49c:	b5b0      	push	{r4, r5, r7, lr}
 800c49e:	b090      	sub	sp, #64	; 0x40
 800c4a0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c4a8:	4b94      	ldr	r3, [pc, #592]	; (800c6fc <tcp_slowtmr+0x260>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	4a93      	ldr	r2, [pc, #588]	; (800c6fc <tcp_slowtmr+0x260>)
 800c4b0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c4b2:	4b93      	ldr	r3, [pc, #588]	; (800c700 <tcp_slowtmr+0x264>)
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	b2da      	uxtb	r2, r3
 800c4ba:	4b91      	ldr	r3, [pc, #580]	; (800c700 <tcp_slowtmr+0x264>)
 800c4bc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c4c2:	4b90      	ldr	r3, [pc, #576]	; (800c704 <tcp_slowtmr+0x268>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c4c8:	e29d      	b.n	800ca06 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4cc:	7d1b      	ldrb	r3, [r3, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d106      	bne.n	800c4e0 <tcp_slowtmr+0x44>
 800c4d2:	4b8d      	ldr	r3, [pc, #564]	; (800c708 <tcp_slowtmr+0x26c>)
 800c4d4:	f240 42be 	movw	r2, #1214	; 0x4be
 800c4d8:	498c      	ldr	r1, [pc, #560]	; (800c70c <tcp_slowtmr+0x270>)
 800c4da:	488d      	ldr	r0, [pc, #564]	; (800c710 <tcp_slowtmr+0x274>)
 800c4dc:	f007 fd46 	bl	8013f6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	7d1b      	ldrb	r3, [r3, #20]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d106      	bne.n	800c4f6 <tcp_slowtmr+0x5a>
 800c4e8:	4b87      	ldr	r3, [pc, #540]	; (800c708 <tcp_slowtmr+0x26c>)
 800c4ea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c4ee:	4989      	ldr	r1, [pc, #548]	; (800c714 <tcp_slowtmr+0x278>)
 800c4f0:	4887      	ldr	r0, [pc, #540]	; (800c710 <tcp_slowtmr+0x274>)
 800c4f2:	f007 fd3b 	bl	8013f6c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	7d1b      	ldrb	r3, [r3, #20]
 800c4fa:	2b0a      	cmp	r3, #10
 800c4fc:	d106      	bne.n	800c50c <tcp_slowtmr+0x70>
 800c4fe:	4b82      	ldr	r3, [pc, #520]	; (800c708 <tcp_slowtmr+0x26c>)
 800c500:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c504:	4984      	ldr	r1, [pc, #528]	; (800c718 <tcp_slowtmr+0x27c>)
 800c506:	4882      	ldr	r0, [pc, #520]	; (800c710 <tcp_slowtmr+0x274>)
 800c508:	f007 fd30 	bl	8013f6c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50e:	7f9a      	ldrb	r2, [r3, #30]
 800c510:	4b7b      	ldr	r3, [pc, #492]	; (800c700 <tcp_slowtmr+0x264>)
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	429a      	cmp	r2, r3
 800c516:	d105      	bne.n	800c524 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c522:	e270      	b.n	800ca06 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c524:	4b76      	ldr	r3, [pc, #472]	; (800c700 <tcp_slowtmr+0x264>)
 800c526:	781a      	ldrb	r2, [r3, #0]
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	7d1b      	ldrb	r3, [r3, #20]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d10a      	bne.n	800c556 <tcp_slowtmr+0xba>
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c546:	2b05      	cmp	r3, #5
 800c548:	d905      	bls.n	800c556 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c54a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54e:	3301      	adds	r3, #1
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c554:	e11e      	b.n	800c794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c558:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c55c:	2b0b      	cmp	r3, #11
 800c55e:	d905      	bls.n	800c56c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c564:	3301      	adds	r3, #1
 800c566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c56a:	e113      	b.n	800c794 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c572:	2b00      	cmp	r3, #0
 800c574:	d075      	beq.n	800c662 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d006      	beq.n	800c58c <tcp_slowtmr+0xf0>
 800c57e:	4b62      	ldr	r3, [pc, #392]	; (800c708 <tcp_slowtmr+0x26c>)
 800c580:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c584:	4965      	ldr	r1, [pc, #404]	; (800c71c <tcp_slowtmr+0x280>)
 800c586:	4862      	ldr	r0, [pc, #392]	; (800c710 <tcp_slowtmr+0x274>)
 800c588:	f007 fcf0 	bl	8013f6c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c590:	2b00      	cmp	r3, #0
 800c592:	d106      	bne.n	800c5a2 <tcp_slowtmr+0x106>
 800c594:	4b5c      	ldr	r3, [pc, #368]	; (800c708 <tcp_slowtmr+0x26c>)
 800c596:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c59a:	4961      	ldr	r1, [pc, #388]	; (800c720 <tcp_slowtmr+0x284>)
 800c59c:	485c      	ldr	r0, [pc, #368]	; (800c710 <tcp_slowtmr+0x274>)
 800c59e:	f007 fce5 	bl	8013f6c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5a8:	2b0b      	cmp	r3, #11
 800c5aa:	d905      	bls.n	800c5b8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5b6:	e0ed      	b.n	800c794 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	4a58      	ldr	r2, [pc, #352]	; (800c724 <tcp_slowtmr+0x288>)
 800c5c2:	5cd3      	ldrb	r3, [r2, r3]
 800c5c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c5cc:	7c7a      	ldrb	r2, [r7, #17]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d907      	bls.n	800c5e2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c5d8:	3301      	adds	r3, #1
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c5e8:	7c7a      	ldrb	r2, [r7, #17]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	f200 80d2 	bhi.w	800c794 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d108      	bne.n	800c610 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c5fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c600:	f004 fc26 	bl	8010e50 <tcp_zero_window_probe>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d014      	beq.n	800c634 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c60a:	2300      	movs	r3, #0
 800c60c:	623b      	str	r3, [r7, #32]
 800c60e:	e011      	b.n	800c634 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c616:	4619      	mov	r1, r3
 800c618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c61a:	f003 faeb 	bl	800fbf4 <tcp_split_unsent_seg>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d107      	bne.n	800c634 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c626:	f003 fd6b 	bl	8010100 <tcp_output>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d101      	bne.n	800c634 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c630:	2300      	movs	r3, #0
 800c632:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 80ac 	beq.w	800c794 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c64a:	2b06      	cmp	r3, #6
 800c64c:	f200 80a2 	bhi.w	800c794 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c652:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c656:	3301      	adds	r3, #1
 800c658:	b2da      	uxtb	r2, r3
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c660:	e098      	b.n	800c794 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c668:	2b00      	cmp	r3, #0
 800c66a:	db0f      	blt.n	800c68c <tcp_slowtmr+0x1f0>
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c672:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c676:	4293      	cmp	r3, r2
 800c678:	d008      	beq.n	800c68c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c680:	b29b      	uxth	r3, r3
 800c682:	3301      	adds	r3, #1
 800c684:	b29b      	uxth	r3, r3
 800c686:	b21a      	sxth	r2, r3
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c698:	429a      	cmp	r2, r3
 800c69a:	db7b      	blt.n	800c794 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c69c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c69e:	f004 f821 	bl	80106e4 <tcp_rexmit_rto_prepare>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <tcp_slowtmr+0x21c>
 800c6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d171      	bne.n	800c794 <tcp_slowtmr+0x2f8>
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d06d      	beq.n	800c794 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	7d1b      	ldrb	r3, [r3, #20]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	d03a      	beq.n	800c736 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6c6:	2b0c      	cmp	r3, #12
 800c6c8:	bf28      	it	cs
 800c6ca:	230c      	movcs	r3, #12
 800c6cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c6d4:	10db      	asrs	r3, r3, #3
 800c6d6:	b21b      	sxth	r3, r3
 800c6d8:	461a      	mov	r2, r3
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c6e0:	4413      	add	r3, r2
 800c6e2:	7efa      	ldrb	r2, [r7, #27]
 800c6e4:	4910      	ldr	r1, [pc, #64]	; (800c728 <tcp_slowtmr+0x28c>)
 800c6e6:	5c8a      	ldrb	r2, [r1, r2]
 800c6e8:	4093      	lsls	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	dc1a      	bgt.n	800c72c <tcp_slowtmr+0x290>
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	b21a      	sxth	r2, r3
 800c6fa:	e019      	b.n	800c730 <tcp_slowtmr+0x294>
 800c6fc:	2000b948 	.word	0x2000b948
 800c700:	20004a02 	.word	0x20004a02
 800c704:	2000b944 	.word	0x2000b944
 800c708:	08015d7c 	.word	0x08015d7c
 800c70c:	080160c0 	.word	0x080160c0
 800c710:	08015dc0 	.word	0x08015dc0
 800c714:	080160ec 	.word	0x080160ec
 800c718:	08016118 	.word	0x08016118
 800c71c:	08016148 	.word	0x08016148
 800c720:	0801617c 	.word	0x0801617c
 800c724:	08017dac 	.word	0x08017dac
 800c728:	08017d9c 	.word	0x08017d9c
 800c72c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c732:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c738:	2200      	movs	r2, #0
 800c73a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c748:	4293      	cmp	r3, r2
 800c74a:	bf28      	it	cs
 800c74c:	4613      	movcs	r3, r2
 800c74e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c750:	8a7b      	ldrh	r3, [r7, #18]
 800c752:	085b      	lsrs	r3, r3, #1
 800c754:	b29a      	uxth	r2, r3
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	b29b      	uxth	r3, r3
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d206      	bcs.n	800c77c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	b29a      	uxth	r2, r3
 800c776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c778:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	2200      	movs	r2, #0
 800c78a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c78e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c790:	f004 f818 	bl	80107c4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c796:	7d1b      	ldrb	r3, [r3, #20]
 800c798:	2b06      	cmp	r3, #6
 800c79a:	d111      	bne.n	800c7c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79e:	8b5b      	ldrh	r3, [r3, #26]
 800c7a0:	f003 0310 	and.w	r3, r3, #16
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7a8:	4b9c      	ldr	r3, [pc, #624]	; (800ca1c <tcp_slowtmr+0x580>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b28      	cmp	r3, #40	; 0x28
 800c7b4:	d904      	bls.n	800c7c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	7a5b      	ldrb	r3, [r3, #9]
 800c7c4:	f003 0308 	and.w	r3, r3, #8
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d04a      	beq.n	800c862 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d003      	beq.n	800c7dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c7d8:	2b07      	cmp	r3, #7
 800c7da:	d142      	bne.n	800c862 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7dc:	4b8f      	ldr	r3, [pc, #572]	; (800ca1c <tcp_slowtmr+0x580>)
 800c7de:	681a      	ldr	r2, [r3, #0]
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	6a1b      	ldr	r3, [r3, #32]
 800c7e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c7ec:	4b8c      	ldr	r3, [pc, #560]	; (800ca20 <tcp_slowtmr+0x584>)
 800c7ee:	440b      	add	r3, r1
 800c7f0:	498c      	ldr	r1, [pc, #560]	; (800ca24 <tcp_slowtmr+0x588>)
 800c7f2:	fba1 1303 	umull	r1, r3, r1, r3
 800c7f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d90a      	bls.n	800c812 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	3301      	adds	r3, #1
 800c802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c806:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c80a:	3301      	adds	r3, #1
 800c80c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c810:	e027      	b.n	800c862 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c812:	4b82      	ldr	r3, [pc, #520]	; (800ca1c <tcp_slowtmr+0x580>)
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c828:	4618      	mov	r0, r3
 800c82a:	4b7f      	ldr	r3, [pc, #508]	; (800ca28 <tcp_slowtmr+0x58c>)
 800c82c:	fb03 f300 	mul.w	r3, r3, r0
 800c830:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c832:	497c      	ldr	r1, [pc, #496]	; (800ca24 <tcp_slowtmr+0x588>)
 800c834:	fba1 1303 	umull	r1, r3, r1, r3
 800c838:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d911      	bls.n	800c862 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c83e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c840:	f004 fac6 	bl	8010dd0 <tcp_keepalive>
 800c844:	4603      	mov	r3, r0
 800c846:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c84a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d107      	bne.n	800c862 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c854:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c858:	3301      	adds	r3, #1
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c866:	2b00      	cmp	r3, #0
 800c868:	d011      	beq.n	800c88e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c86a:	4b6c      	ldr	r3, [pc, #432]	; (800ca1c <tcp_slowtmr+0x580>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	1ad2      	subs	r2, r2, r3
 800c874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c876:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c87a:	4619      	mov	r1, r3
 800c87c:	460b      	mov	r3, r1
 800c87e:	005b      	lsls	r3, r3, #1
 800c880:	440b      	add	r3, r1
 800c882:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c884:	429a      	cmp	r2, r3
 800c886:	d302      	bcc.n	800c88e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c88a:	f000 fddd 	bl	800d448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	7d1b      	ldrb	r3, [r3, #20]
 800c892:	2b03      	cmp	r3, #3
 800c894:	d10b      	bne.n	800c8ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c896:	4b61      	ldr	r3, [pc, #388]	; (800ca1c <tcp_slowtmr+0x580>)
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	6a1b      	ldr	r3, [r3, #32]
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	2b28      	cmp	r3, #40	; 0x28
 800c8a2:	d904      	bls.n	800c8ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c8a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b0:	7d1b      	ldrb	r3, [r3, #20]
 800c8b2:	2b09      	cmp	r3, #9
 800c8b4:	d10b      	bne.n	800c8ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c8b6:	4b59      	ldr	r3, [pc, #356]	; (800ca1c <tcp_slowtmr+0x580>)
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	6a1b      	ldr	r3, [r3, #32]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2bf0      	cmp	r3, #240	; 0xf0
 800c8c2:	d904      	bls.n	800c8ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c8c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c8ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d060      	beq.n	800c998 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c8de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8e0:	f000 fbfe 	bl	800d0e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d010      	beq.n	800c90c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c8ea:	4b50      	ldr	r3, [pc, #320]	; (800ca2c <tcp_slowtmr+0x590>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d106      	bne.n	800c902 <tcp_slowtmr+0x466>
 800c8f4:	4b4e      	ldr	r3, [pc, #312]	; (800ca30 <tcp_slowtmr+0x594>)
 800c8f6:	f240 526d 	movw	r2, #1389	; 0x56d
 800c8fa:	494e      	ldr	r1, [pc, #312]	; (800ca34 <tcp_slowtmr+0x598>)
 800c8fc:	484e      	ldr	r0, [pc, #312]	; (800ca38 <tcp_slowtmr+0x59c>)
 800c8fe:	f007 fb35 	bl	8013f6c <iprintf>
        prev->next = pcb->next;
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c908:	60da      	str	r2, [r3, #12]
 800c90a:	e00f      	b.n	800c92c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c90c:	4b47      	ldr	r3, [pc, #284]	; (800ca2c <tcp_slowtmr+0x590>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c912:	429a      	cmp	r2, r3
 800c914:	d006      	beq.n	800c924 <tcp_slowtmr+0x488>
 800c916:	4b46      	ldr	r3, [pc, #280]	; (800ca30 <tcp_slowtmr+0x594>)
 800c918:	f240 5271 	movw	r2, #1393	; 0x571
 800c91c:	4947      	ldr	r1, [pc, #284]	; (800ca3c <tcp_slowtmr+0x5a0>)
 800c91e:	4846      	ldr	r0, [pc, #280]	; (800ca38 <tcp_slowtmr+0x59c>)
 800c920:	f007 fb24 	bl	8013f6c <iprintf>
        tcp_active_pcbs = pcb->next;
 800c924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c926:	68db      	ldr	r3, [r3, #12]
 800c928:	4a40      	ldr	r2, [pc, #256]	; (800ca2c <tcp_slowtmr+0x590>)
 800c92a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c92c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c930:	2b00      	cmp	r3, #0
 800c932:	d013      	beq.n	800c95c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c93c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c940:	3304      	adds	r3, #4
 800c942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c944:	8ad2      	ldrh	r2, [r2, #22]
 800c946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c948:	8b09      	ldrh	r1, [r1, #24]
 800c94a:	9102      	str	r1, [sp, #8]
 800c94c:	9201      	str	r2, [sp, #4]
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	462b      	mov	r3, r5
 800c952:	4622      	mov	r2, r4
 800c954:	4601      	mov	r1, r0
 800c956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c958:	f004 f986 	bl	8010c68 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c964:	7d1b      	ldrb	r3, [r3, #20]
 800c966:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c972:	6838      	ldr	r0, [r7, #0]
 800c974:	f7ff f9f4 	bl	800bd60 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c978:	4b31      	ldr	r3, [pc, #196]	; (800ca40 <tcp_slowtmr+0x5a4>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <tcp_slowtmr+0x4f2>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f06f 010c 	mvn.w	r1, #12
 800c98a:	68b8      	ldr	r0, [r7, #8]
 800c98c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c98e:	4b2c      	ldr	r3, [pc, #176]	; (800ca40 <tcp_slowtmr+0x5a4>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d037      	beq.n	800ca06 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c996:	e592      	b.n	800c4be <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a4:	7f1b      	ldrb	r3, [r3, #28]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b0:	7f1a      	ldrb	r2, [r3, #28]
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	7f5b      	ldrb	r3, [r3, #29]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d325      	bcc.n	800ca06 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9bc:	2200      	movs	r2, #0
 800c9be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c9c0:	4b1f      	ldr	r3, [pc, #124]	; (800ca40 <tcp_slowtmr+0x5a4>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <tcp_slowtmr+0x54c>
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9d8:	6912      	ldr	r2, [r2, #16]
 800c9da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4798      	blx	r3
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c9e6:	e002      	b.n	800c9ee <tcp_slowtmr+0x552>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c9ee:	4b14      	ldr	r3, [pc, #80]	; (800ca40 <tcp_slowtmr+0x5a4>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d000      	beq.n	800c9f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c9f6:	e562      	b.n	800c4be <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c9f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d102      	bne.n	800ca06 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ca00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca02:	f003 fb7d 	bl	8010100 <tcp_output>
  while (pcb != NULL) {
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f47f ad5e 	bne.w	800c4ca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ca12:	4b0c      	ldr	r3, [pc, #48]	; (800ca44 <tcp_slowtmr+0x5a8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ca18:	e069      	b.n	800caee <tcp_slowtmr+0x652>
 800ca1a:	bf00      	nop
 800ca1c:	2000b948 	.word	0x2000b948
 800ca20:	000a4cb8 	.word	0x000a4cb8
 800ca24:	10624dd3 	.word	0x10624dd3
 800ca28:	000124f8 	.word	0x000124f8
 800ca2c:	2000b944 	.word	0x2000b944
 800ca30:	08015d7c 	.word	0x08015d7c
 800ca34:	080161b4 	.word	0x080161b4
 800ca38:	08015dc0 	.word	0x08015dc0
 800ca3c:	080161e0 	.word	0x080161e0
 800ca40:	2000b940 	.word	0x2000b940
 800ca44:	2000b954 	.word	0x2000b954
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ca48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4a:	7d1b      	ldrb	r3, [r3, #20]
 800ca4c:	2b0a      	cmp	r3, #10
 800ca4e:	d006      	beq.n	800ca5e <tcp_slowtmr+0x5c2>
 800ca50:	4b2b      	ldr	r3, [pc, #172]	; (800cb00 <tcp_slowtmr+0x664>)
 800ca52:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ca56:	492b      	ldr	r1, [pc, #172]	; (800cb04 <tcp_slowtmr+0x668>)
 800ca58:	482b      	ldr	r0, [pc, #172]	; (800cb08 <tcp_slowtmr+0x66c>)
 800ca5a:	f007 fa87 	bl	8013f6c <iprintf>
    pcb_remove = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ca64:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <tcp_slowtmr+0x670>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	6a1b      	ldr	r3, [r3, #32]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	2bf0      	cmp	r3, #240	; 0xf0
 800ca70:	d904      	bls.n	800ca7c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ca72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca76:	3301      	adds	r3, #1
 800ca78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ca7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d02f      	beq.n	800cae4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ca84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca86:	f000 fb2b 	bl	800d0e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ca8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d010      	beq.n	800cab2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ca90:	4b1f      	ldr	r3, [pc, #124]	; (800cb10 <tcp_slowtmr+0x674>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d106      	bne.n	800caa8 <tcp_slowtmr+0x60c>
 800ca9a:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <tcp_slowtmr+0x664>)
 800ca9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800caa0:	491c      	ldr	r1, [pc, #112]	; (800cb14 <tcp_slowtmr+0x678>)
 800caa2:	4819      	ldr	r0, [pc, #100]	; (800cb08 <tcp_slowtmr+0x66c>)
 800caa4:	f007 fa62 	bl	8013f6c <iprintf>
        prev->next = pcb->next;
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caae:	60da      	str	r2, [r3, #12]
 800cab0:	e00f      	b.n	800cad2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cab2:	4b17      	ldr	r3, [pc, #92]	; (800cb10 <tcp_slowtmr+0x674>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cab8:	429a      	cmp	r2, r3
 800caba:	d006      	beq.n	800caca <tcp_slowtmr+0x62e>
 800cabc:	4b10      	ldr	r3, [pc, #64]	; (800cb00 <tcp_slowtmr+0x664>)
 800cabe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cac2:	4915      	ldr	r1, [pc, #84]	; (800cb18 <tcp_slowtmr+0x67c>)
 800cac4:	4810      	ldr	r0, [pc, #64]	; (800cb08 <tcp_slowtmr+0x66c>)
 800cac6:	f007 fa51 	bl	8013f6c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	4a10      	ldr	r2, [pc, #64]	; (800cb10 <tcp_slowtmr+0x674>)
 800cad0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cadc:	69f8      	ldr	r0, [r7, #28]
 800cade:	f7ff f93f 	bl	800bd60 <tcp_free>
 800cae2:	e004      	b.n	800caee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800caee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1a9      	bne.n	800ca48 <tcp_slowtmr+0x5ac>
    }
  }
}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	3730      	adds	r7, #48	; 0x30
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bdb0      	pop	{r4, r5, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08015d7c 	.word	0x08015d7c
 800cb04:	0801620c 	.word	0x0801620c
 800cb08:	08015dc0 	.word	0x08015dc0
 800cb0c:	2000b948 	.word	0x2000b948
 800cb10:	2000b954 	.word	0x2000b954
 800cb14:	0801623c 	.word	0x0801623c
 800cb18:	08016264 	.word	0x08016264

0800cb1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cb22:	4b2d      	ldr	r3, [pc, #180]	; (800cbd8 <tcp_fasttmr+0xbc>)
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	3301      	adds	r3, #1
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	4b2b      	ldr	r3, [pc, #172]	; (800cbd8 <tcp_fasttmr+0xbc>)
 800cb2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cb2e:	4b2b      	ldr	r3, [pc, #172]	; (800cbdc <tcp_fasttmr+0xc0>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cb34:	e048      	b.n	800cbc8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	7f9a      	ldrb	r2, [r3, #30]
 800cb3a:	4b27      	ldr	r3, [pc, #156]	; (800cbd8 <tcp_fasttmr+0xbc>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d03f      	beq.n	800cbc2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cb42:	4b25      	ldr	r3, [pc, #148]	; (800cbd8 <tcp_fasttmr+0xbc>)
 800cb44:	781a      	ldrb	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	8b5b      	ldrh	r3, [r3, #26]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d010      	beq.n	800cb78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	8b5b      	ldrh	r3, [r3, #26]
 800cb5a:	f043 0302 	orr.w	r3, r3, #2
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f003 facb 	bl	8010100 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	8b5b      	ldrh	r3, [r3, #26]
 800cb6e:	f023 0303 	bic.w	r3, r3, #3
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	8b5b      	ldrh	r3, [r3, #26]
 800cb7c:	f003 0308 	and.w	r3, r3, #8
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d009      	beq.n	800cb98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	8b5b      	ldrh	r3, [r3, #26]
 800cb88:	f023 0308 	bic.w	r3, r3, #8
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff fa78 	bl	800c088 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00a      	beq.n	800cbbc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cba6:	4b0e      	ldr	r3, [pc, #56]	; (800cbe0 <tcp_fasttmr+0xc4>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f819 	bl	800cbe4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cbb2:	4b0b      	ldr	r3, [pc, #44]	; (800cbe0 <tcp_fasttmr+0xc4>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d000      	beq.n	800cbbc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cbba:	e7b8      	b.n	800cb2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	607b      	str	r3, [r7, #4]
 800cbc0:	e002      	b.n	800cbc8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1b3      	bne.n	800cb36 <tcp_fasttmr+0x1a>
    }
  }
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	3708      	adds	r7, #8
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	20004a02 	.word	0x20004a02
 800cbdc:	2000b944 	.word	0x2000b944
 800cbe0:	2000b940 	.word	0x2000b940

0800cbe4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cbe4:	b590      	push	{r4, r7, lr}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d109      	bne.n	800cc06 <tcp_process_refused_data+0x22>
 800cbf2:	4b37      	ldr	r3, [pc, #220]	; (800ccd0 <tcp_process_refused_data+0xec>)
 800cbf4:	f240 6209 	movw	r2, #1545	; 0x609
 800cbf8:	4936      	ldr	r1, [pc, #216]	; (800ccd4 <tcp_process_refused_data+0xf0>)
 800cbfa:	4837      	ldr	r0, [pc, #220]	; (800ccd8 <tcp_process_refused_data+0xf4>)
 800cbfc:	f007 f9b6 	bl	8013f6c <iprintf>
 800cc00:	f06f 030f 	mvn.w	r3, #15
 800cc04:	e060      	b.n	800ccc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc0a:	7b5b      	ldrb	r3, [r3, #13]
 800cc0c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc12:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <tcp_process_refused_data+0x58>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6918      	ldr	r0, [r3, #16]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	47a0      	blx	r4
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
 800cc3a:	e007      	b.n	800cc4c <tcp_process_refused_data+0x68>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	68ba      	ldr	r2, [r7, #8]
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	2000      	movs	r0, #0
 800cc44:	f000 f8a4 	bl	800cd90 <tcp_recv_null>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d12a      	bne.n	800ccaa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cc54:	7bbb      	ldrb	r3, [r7, #14]
 800cc56:	f003 0320 	and.w	r3, r3, #32
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d033      	beq.n	800ccc6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc62:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc66:	d005      	beq.n	800cc74 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	b29a      	uxth	r2, r3
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00b      	beq.n	800cc96 <tcp_process_refused_data+0xb2>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6918      	ldr	r0, [r3, #16]
 800cc88:	2300      	movs	r3, #0
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6879      	ldr	r1, [r7, #4]
 800cc8e:	47a0      	blx	r4
 800cc90:	4603      	mov	r3, r0
 800cc92:	73fb      	strb	r3, [r7, #15]
 800cc94:	e001      	b.n	800cc9a <tcp_process_refused_data+0xb6>
 800cc96:	2300      	movs	r3, #0
 800cc98:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cc9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc9e:	f113 0f0d 	cmn.w	r3, #13
 800cca2:	d110      	bne.n	800ccc6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cca4:	f06f 030c 	mvn.w	r3, #12
 800cca8:	e00e      	b.n	800ccc8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ccaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccae:	f113 0f0d 	cmn.w	r3, #13
 800ccb2:	d102      	bne.n	800ccba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ccb4:	f06f 030c 	mvn.w	r3, #12
 800ccb8:	e006      	b.n	800ccc8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ccc0:	f06f 0304 	mvn.w	r3, #4
 800ccc4:	e000      	b.n	800ccc8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ccc6:	2300      	movs	r3, #0
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3714      	adds	r7, #20
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd90      	pop	{r4, r7, pc}
 800ccd0:	08015d7c 	.word	0x08015d7c
 800ccd4:	0801628c 	.word	0x0801628c
 800ccd8:	08015dc0 	.word	0x08015dc0

0800ccdc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cce4:	e007      	b.n	800ccf6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 f80a 	bl	800cd06 <tcp_seg_free>
    seg = next;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1f4      	bne.n	800cce6 <tcp_segs_free+0xa>
  }
}
 800ccfc:	bf00      	nop
 800ccfe:	bf00      	nop
 800cd00:	3710      	adds	r7, #16
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00c      	beq.n	800cd2e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d004      	beq.n	800cd26 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fe fd71 	bl	800b808 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cd26:	6879      	ldr	r1, [r7, #4]
 800cd28:	2003      	movs	r0, #3
 800cd2a:	f7fd fec9 	bl	800aac0 <memp_free>
  }
}
 800cd2e:	bf00      	nop
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d106      	bne.n	800cd54 <tcp_seg_copy+0x1c>
 800cd46:	4b0f      	ldr	r3, [pc, #60]	; (800cd84 <tcp_seg_copy+0x4c>)
 800cd48:	f240 6282 	movw	r2, #1666	; 0x682
 800cd4c:	490e      	ldr	r1, [pc, #56]	; (800cd88 <tcp_seg_copy+0x50>)
 800cd4e:	480f      	ldr	r0, [pc, #60]	; (800cd8c <tcp_seg_copy+0x54>)
 800cd50:	f007 f90c 	bl	8013f6c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cd54:	2003      	movs	r0, #3
 800cd56:	f7fd fe61 	bl	800aa1c <memp_malloc>
 800cd5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <tcp_seg_copy+0x2e>
    return NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	e00a      	b.n	800cd7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cd66:	2210      	movs	r2, #16
 800cd68:	6879      	ldr	r1, [r7, #4]
 800cd6a:	68f8      	ldr	r0, [r7, #12]
 800cd6c:	f007 f8e8 	bl	8013f40 <memcpy>
  pbuf_ref(cseg->p);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fded 	bl	800b954 <pbuf_ref>
  return cseg;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	08015d7c 	.word	0x08015d7c
 800cd88:	080162d0 	.word	0x080162d0
 800cd8c:	08015dc0 	.word	0x08015dc0

0800cd90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	60f8      	str	r0, [r7, #12]
 800cd98:	60b9      	str	r1, [r7, #8]
 800cd9a:	607a      	str	r2, [r7, #4]
 800cd9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d109      	bne.n	800cdb8 <tcp_recv_null+0x28>
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <tcp_recv_null+0x60>)
 800cda6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cdaa:	4912      	ldr	r1, [pc, #72]	; (800cdf4 <tcp_recv_null+0x64>)
 800cdac:	4812      	ldr	r0, [pc, #72]	; (800cdf8 <tcp_recv_null+0x68>)
 800cdae:	f007 f8dd 	bl	8013f6c <iprintf>
 800cdb2:	f06f 030f 	mvn.w	r3, #15
 800cdb6:	e016      	b.n	800cde6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d009      	beq.n	800cdd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	891b      	ldrh	r3, [r3, #8]
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	68b8      	ldr	r0, [r7, #8]
 800cdc6:	f7ff fb19 	bl	800c3fc <tcp_recved>
    pbuf_free(p);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f7fe fd1c 	bl	800b808 <pbuf_free>
 800cdd0:	e008      	b.n	800cde4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cdd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d104      	bne.n	800cde4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cdda:	68b8      	ldr	r0, [r7, #8]
 800cddc:	f7ff f9be 	bl	800c15c <tcp_close>
 800cde0:	4603      	mov	r3, r0
 800cde2:	e000      	b.n	800cde6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	08015d7c 	.word	0x08015d7c
 800cdf4:	080162ec 	.word	0x080162ec
 800cdf8:	08015dc0 	.word	0x08015dc0

0800cdfc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ce06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	db01      	blt.n	800ce12 <tcp_kill_prio+0x16>
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	e000      	b.n	800ce14 <tcp_kill_prio+0x18>
 800ce12:	237f      	movs	r3, #127	; 0x7f
 800ce14:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ce16:	7afb      	ldrb	r3, [r7, #11]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d034      	beq.n	800ce86 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ce1c:	7afb      	ldrb	r3, [r7, #11]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce2a:	4b19      	ldr	r3, [pc, #100]	; (800ce90 <tcp_kill_prio+0x94>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	617b      	str	r3, [r7, #20]
 800ce30:	e01f      	b.n	800ce72 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	7d5b      	ldrb	r3, [r3, #21]
 800ce36:	7afa      	ldrb	r2, [r7, #11]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d80c      	bhi.n	800ce56 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ce40:	7afa      	ldrb	r2, [r7, #11]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d112      	bne.n	800ce6c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ce46:	4b13      	ldr	r3, [pc, #76]	; (800ce94 <tcp_kill_prio+0x98>)
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	6a1b      	ldr	r3, [r3, #32]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d80a      	bhi.n	800ce6c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ce56:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <tcp_kill_prio+0x98>)
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	7d5b      	ldrb	r3, [r3, #21]
 800ce6a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	617b      	str	r3, [r7, #20]
 800ce72:	697b      	ldr	r3, [r7, #20]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1dc      	bne.n	800ce32 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d004      	beq.n	800ce88 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ce7e:	6938      	ldr	r0, [r7, #16]
 800ce80:	f7ff fa56 	bl	800c330 <tcp_abort>
 800ce84:	e000      	b.n	800ce88 <tcp_kill_prio+0x8c>
    return;
 800ce86:	bf00      	nop
  }
}
 800ce88:	3718      	adds	r7, #24
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000b944 	.word	0x2000b944
 800ce94:	2000b948 	.word	0x2000b948

0800ce98 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b086      	sub	sp, #24
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	4603      	mov	r3, r0
 800cea0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	d009      	beq.n	800cebc <tcp_kill_state+0x24>
 800cea8:	79fb      	ldrb	r3, [r7, #7]
 800ceaa:	2b09      	cmp	r3, #9
 800ceac:	d006      	beq.n	800cebc <tcp_kill_state+0x24>
 800ceae:	4b1a      	ldr	r3, [pc, #104]	; (800cf18 <tcp_kill_state+0x80>)
 800ceb0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ceb4:	4919      	ldr	r1, [pc, #100]	; (800cf1c <tcp_kill_state+0x84>)
 800ceb6:	481a      	ldr	r0, [pc, #104]	; (800cf20 <tcp_kill_state+0x88>)
 800ceb8:	f007 f858 	bl	8013f6c <iprintf>

  inactivity = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cec0:	2300      	movs	r3, #0
 800cec2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cec4:	4b17      	ldr	r3, [pc, #92]	; (800cf24 <tcp_kill_state+0x8c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	617b      	str	r3, [r7, #20]
 800ceca:	e017      	b.n	800cefc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	7d1b      	ldrb	r3, [r3, #20]
 800ced0:	79fa      	ldrb	r2, [r7, #7]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d10f      	bne.n	800cef6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ced6:	4b14      	ldr	r3, [pc, #80]	; (800cf28 <tcp_kill_state+0x90>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d807      	bhi.n	800cef6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cee6:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <tcp_kill_state+0x90>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	68db      	ldr	r3, [r3, #12]
 800cefa:	617b      	str	r3, [r7, #20]
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1e4      	bne.n	800cecc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d003      	beq.n	800cf10 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cf08:	2100      	movs	r1, #0
 800cf0a:	6938      	ldr	r0, [r7, #16]
 800cf0c:	f7ff f952 	bl	800c1b4 <tcp_abandon>
  }
}
 800cf10:	bf00      	nop
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	08015d7c 	.word	0x08015d7c
 800cf1c:	08016308 	.word	0x08016308
 800cf20:	08015dc0 	.word	0x08015dc0
 800cf24:	2000b944 	.word	0x2000b944
 800cf28:	2000b948 	.word	0x2000b948

0800cf2c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf3a:	4b12      	ldr	r3, [pc, #72]	; (800cf84 <tcp_kill_timewait+0x58>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e012      	b.n	800cf68 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf42:	4b11      	ldr	r3, [pc, #68]	; (800cf88 <tcp_kill_timewait+0x5c>)
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6a1b      	ldr	r3, [r3, #32]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d807      	bhi.n	800cf62 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cf52:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <tcp_kill_timewait+0x5c>)
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a1b      	ldr	r3, [r3, #32]
 800cf5a:	1ad3      	subs	r3, r2, r3
 800cf5c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	68db      	ldr	r3, [r3, #12]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1e9      	bne.n	800cf42 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d002      	beq.n	800cf7a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cf74:	68b8      	ldr	r0, [r7, #8]
 800cf76:	f7ff f9db 	bl	800c330 <tcp_abort>
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	2000b954 	.word	0x2000b954
 800cf88:	2000b948 	.word	0x2000b948

0800cf8c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cf92:	4b10      	ldr	r3, [pc, #64]	; (800cfd4 <tcp_handle_closepend+0x48>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf98:	e014      	b.n	800cfc4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8b5b      	ldrh	r3, [r3, #26]
 800cfa4:	f003 0308 	and.w	r3, r3, #8
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d009      	beq.n	800cfc0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	8b5b      	ldrh	r3, [r3, #26]
 800cfb0:	f023 0308 	bic.w	r3, r3, #8
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7ff f864 	bl	800c088 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e7      	bne.n	800cf9a <tcp_handle_closepend+0xe>
  }
}
 800cfca:	bf00      	nop
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	2000b944 	.word	0x2000b944

0800cfd8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cfe2:	2001      	movs	r0, #1
 800cfe4:	f7fd fd1a 	bl	800aa1c <memp_malloc>
 800cfe8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d126      	bne.n	800d03e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cff0:	f7ff ffcc 	bl	800cf8c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cff4:	f7ff ff9a 	bl	800cf2c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cff8:	2001      	movs	r0, #1
 800cffa:	f7fd fd0f 	bl	800aa1c <memp_malloc>
 800cffe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d11b      	bne.n	800d03e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d006:	2009      	movs	r0, #9
 800d008:	f7ff ff46 	bl	800ce98 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d00c:	2001      	movs	r0, #1
 800d00e:	f7fd fd05 	bl	800aa1c <memp_malloc>
 800d012:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d111      	bne.n	800d03e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d01a:	2008      	movs	r0, #8
 800d01c:	f7ff ff3c 	bl	800ce98 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d020:	2001      	movs	r0, #1
 800d022:	f7fd fcfb 	bl	800aa1c <memp_malloc>
 800d026:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d107      	bne.n	800d03e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d02e:	79fb      	ldrb	r3, [r7, #7]
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff fee3 	bl	800cdfc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d036:	2001      	movs	r0, #1
 800d038:	f7fd fcf0 	bl	800aa1c <memp_malloc>
 800d03c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d03f      	beq.n	800d0c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d044:	229c      	movs	r2, #156	; 0x9c
 800d046:	2100      	movs	r1, #0
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f006 ff87 	bl	8013f5c <memset>
    pcb->prio = prio;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	79fa      	ldrb	r2, [r7, #7]
 800d052:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d05a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d064:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	22ff      	movs	r2, #255	; 0xff
 800d072:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d07a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2206      	movs	r2, #6
 800d080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2206      	movs	r2, #6
 800d088:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d090:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d09a:	4b0d      	ldr	r3, [pc, #52]	; (800d0d0 <tcp_alloc+0xf8>)
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d0a2:	4b0c      	ldr	r3, [pc, #48]	; (800d0d4 <tcp_alloc+0xfc>)
 800d0a4:	781a      	ldrb	r2, [r3, #0]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d0b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	4a08      	ldr	r2, [pc, #32]	; (800d0d8 <tcp_alloc+0x100>)
 800d0b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4a07      	ldr	r2, [pc, #28]	; (800d0dc <tcp_alloc+0x104>)
 800d0c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
 800d0ce:	bf00      	nop
 800d0d0:	2000b948 	.word	0x2000b948
 800d0d4:	20004a02 	.word	0x20004a02
 800d0d8:	0800cd91 	.word	0x0800cd91
 800d0dc:	006ddd00 	.word	0x006ddd00

0800d0e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d107      	bne.n	800d0fe <tcp_pcb_purge+0x1e>
 800d0ee:	4b21      	ldr	r3, [pc, #132]	; (800d174 <tcp_pcb_purge+0x94>)
 800d0f0:	f640 0251 	movw	r2, #2129	; 0x851
 800d0f4:	4920      	ldr	r1, [pc, #128]	; (800d178 <tcp_pcb_purge+0x98>)
 800d0f6:	4821      	ldr	r0, [pc, #132]	; (800d17c <tcp_pcb_purge+0x9c>)
 800d0f8:	f006 ff38 	bl	8013f6c <iprintf>
 800d0fc:	e037      	b.n	800d16e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	7d1b      	ldrb	r3, [r3, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d033      	beq.n	800d16e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d10a:	2b0a      	cmp	r3, #10
 800d10c:	d02f      	beq.n	800d16e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d112:	2b01      	cmp	r3, #1
 800d114:	d02b      	beq.n	800d16e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d007      	beq.n	800d12e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fb70 	bl	800b808 <pbuf_free>
      pcb->refused_data = NULL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d132:	2b00      	cmp	r3, #0
 800d134:	d002      	beq.n	800d13c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f986 	bl	800d448 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d142:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d148:	4618      	mov	r0, r3
 800d14a:	f7ff fdc7 	bl	800ccdc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d152:	4618      	mov	r0, r3
 800d154:	f7ff fdc2 	bl	800ccdc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	08015d7c 	.word	0x08015d7c
 800d178:	080163c8 	.word	0x080163c8
 800d17c:	08015dc0 	.word	0x08015dc0

0800d180 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d106      	bne.n	800d19e <tcp_pcb_remove+0x1e>
 800d190:	4b3e      	ldr	r3, [pc, #248]	; (800d28c <tcp_pcb_remove+0x10c>)
 800d192:	f640 0283 	movw	r2, #2179	; 0x883
 800d196:	493e      	ldr	r1, [pc, #248]	; (800d290 <tcp_pcb_remove+0x110>)
 800d198:	483e      	ldr	r0, [pc, #248]	; (800d294 <tcp_pcb_remove+0x114>)
 800d19a:	f006 fee7 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <tcp_pcb_remove+0x32>
 800d1a4:	4b39      	ldr	r3, [pc, #228]	; (800d28c <tcp_pcb_remove+0x10c>)
 800d1a6:	f640 0284 	movw	r2, #2180	; 0x884
 800d1aa:	493b      	ldr	r1, [pc, #236]	; (800d298 <tcp_pcb_remove+0x118>)
 800d1ac:	4839      	ldr	r0, [pc, #228]	; (800d294 <tcp_pcb_remove+0x114>)
 800d1ae:	f006 fedd 	bl	8013f6c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d105      	bne.n	800d1c8 <tcp_pcb_remove+0x48>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68da      	ldr	r2, [r3, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	601a      	str	r2, [r3, #0]
 800d1c6:	e013      	b.n	800d1f0 <tcp_pcb_remove+0x70>
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]
 800d1ce:	e00c      	b.n	800d1ea <tcp_pcb_remove+0x6a>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	683a      	ldr	r2, [r7, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d104      	bne.n	800d1e4 <tcp_pcb_remove+0x64>
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	68da      	ldr	r2, [r3, #12]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	60da      	str	r2, [r3, #12]
 800d1e2:	e005      	b.n	800d1f0 <tcp_pcb_remove+0x70>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	60fb      	str	r3, [r7, #12]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1ef      	bne.n	800d1d0 <tcp_pcb_remove+0x50>
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d1f6:	6838      	ldr	r0, [r7, #0]
 800d1f8:	f7ff ff72 	bl	800d0e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	7d1b      	ldrb	r3, [r3, #20]
 800d200:	2b0a      	cmp	r3, #10
 800d202:	d013      	beq.n	800d22c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d00f      	beq.n	800d22c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	8b5b      	ldrh	r3, [r3, #26]
 800d210:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d214:	2b00      	cmp	r3, #0
 800d216:	d009      	beq.n	800d22c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	8b5b      	ldrh	r3, [r3, #26]
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	b29a      	uxth	r2, r3
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d226:	6838      	ldr	r0, [r7, #0]
 800d228:	f002 ff6a 	bl	8010100 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	7d1b      	ldrb	r3, [r3, #20]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d020      	beq.n	800d276 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d006      	beq.n	800d24a <tcp_pcb_remove+0xca>
 800d23c:	4b13      	ldr	r3, [pc, #76]	; (800d28c <tcp_pcb_remove+0x10c>)
 800d23e:	f640 0293 	movw	r2, #2195	; 0x893
 800d242:	4916      	ldr	r1, [pc, #88]	; (800d29c <tcp_pcb_remove+0x11c>)
 800d244:	4813      	ldr	r0, [pc, #76]	; (800d294 <tcp_pcb_remove+0x114>)
 800d246:	f006 fe91 	bl	8013f6c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <tcp_pcb_remove+0xe0>
 800d252:	4b0e      	ldr	r3, [pc, #56]	; (800d28c <tcp_pcb_remove+0x10c>)
 800d254:	f640 0294 	movw	r2, #2196	; 0x894
 800d258:	4911      	ldr	r1, [pc, #68]	; (800d2a0 <tcp_pcb_remove+0x120>)
 800d25a:	480e      	ldr	r0, [pc, #56]	; (800d294 <tcp_pcb_remove+0x114>)
 800d25c:	f006 fe86 	bl	8013f6c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d264:	2b00      	cmp	r3, #0
 800d266:	d006      	beq.n	800d276 <tcp_pcb_remove+0xf6>
 800d268:	4b08      	ldr	r3, [pc, #32]	; (800d28c <tcp_pcb_remove+0x10c>)
 800d26a:	f640 0296 	movw	r2, #2198	; 0x896
 800d26e:	490d      	ldr	r1, [pc, #52]	; (800d2a4 <tcp_pcb_remove+0x124>)
 800d270:	4808      	ldr	r0, [pc, #32]	; (800d294 <tcp_pcb_remove+0x114>)
 800d272:	f006 fe7b 	bl	8013f6c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2200      	movs	r2, #0
 800d27a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2200      	movs	r2, #0
 800d280:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d282:	bf00      	nop
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	08015d7c 	.word	0x08015d7c
 800d290:	080163e4 	.word	0x080163e4
 800d294:	08015dc0 	.word	0x08015dc0
 800d298:	08016400 	.word	0x08016400
 800d29c:	08016420 	.word	0x08016420
 800d2a0:	08016438 	.word	0x08016438
 800d2a4:	08016454 	.word	0x08016454

0800d2a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d106      	bne.n	800d2c4 <tcp_next_iss+0x1c>
 800d2b6:	4b0a      	ldr	r3, [pc, #40]	; (800d2e0 <tcp_next_iss+0x38>)
 800d2b8:	f640 02af 	movw	r2, #2223	; 0x8af
 800d2bc:	4909      	ldr	r1, [pc, #36]	; (800d2e4 <tcp_next_iss+0x3c>)
 800d2be:	480a      	ldr	r0, [pc, #40]	; (800d2e8 <tcp_next_iss+0x40>)
 800d2c0:	f006 fe54 	bl	8013f6c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d2c4:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <tcp_next_iss+0x44>)
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	4b09      	ldr	r3, [pc, #36]	; (800d2f0 <tcp_next_iss+0x48>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	4a07      	ldr	r2, [pc, #28]	; (800d2ec <tcp_next_iss+0x44>)
 800d2d0:	6013      	str	r3, [r2, #0]
  return iss;
 800d2d2:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <tcp_next_iss+0x44>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	08015d7c 	.word	0x08015d7c
 800d2e4:	0801646c 	.word	0x0801646c
 800d2e8:	08015dc0 	.word	0x08015dc0
 800d2ec:	20000014 	.word	0x20000014
 800d2f0:	2000b948 	.word	0x2000b948

0800d2f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <tcp_eff_send_mss_netif+0x22>
 800d308:	4b14      	ldr	r3, [pc, #80]	; (800d35c <tcp_eff_send_mss_netif+0x68>)
 800d30a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d30e:	4914      	ldr	r1, [pc, #80]	; (800d360 <tcp_eff_send_mss_netif+0x6c>)
 800d310:	4814      	ldr	r0, [pc, #80]	; (800d364 <tcp_eff_send_mss_netif+0x70>)
 800d312:	f006 fe2b 	bl	8013f6c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	e019      	b.n	800d354 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d324:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d326:	8afb      	ldrh	r3, [r7, #22]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d012      	beq.n	800d352 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d32c:	2328      	movs	r3, #40	; 0x28
 800d32e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d330:	8afa      	ldrh	r2, [r7, #22]
 800d332:	8abb      	ldrh	r3, [r7, #20]
 800d334:	429a      	cmp	r2, r3
 800d336:	d904      	bls.n	800d342 <tcp_eff_send_mss_netif+0x4e>
 800d338:	8afa      	ldrh	r2, [r7, #22]
 800d33a:	8abb      	ldrh	r3, [r7, #20]
 800d33c:	1ad3      	subs	r3, r2, r3
 800d33e:	b29b      	uxth	r3, r3
 800d340:	e000      	b.n	800d344 <tcp_eff_send_mss_netif+0x50>
 800d342:	2300      	movs	r3, #0
 800d344:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d346:	8a7a      	ldrh	r2, [r7, #18]
 800d348:	89fb      	ldrh	r3, [r7, #14]
 800d34a:	4293      	cmp	r3, r2
 800d34c:	bf28      	it	cs
 800d34e:	4613      	movcs	r3, r2
 800d350:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d352:	89fb      	ldrh	r3, [r7, #14]
}
 800d354:	4618      	mov	r0, r3
 800d356:	3718      	adds	r7, #24
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	08015d7c 	.word	0x08015d7c
 800d360:	08016488 	.word	0x08016488
 800d364:	08015dc0 	.word	0x08015dc0

0800d368 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b084      	sub	sp, #16
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d119      	bne.n	800d3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d37c:	4b10      	ldr	r3, [pc, #64]	; (800d3c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d37e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d382:	4910      	ldr	r1, [pc, #64]	; (800d3c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d384:	4810      	ldr	r0, [pc, #64]	; (800d3c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d386:	f006 fdf1 	bl	8013f6c <iprintf>

  while (pcb != NULL) {
 800d38a:	e011      	b.n	800d3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681a      	ldr	r2, [r3, #0]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	429a      	cmp	r2, r3
 800d396:	d108      	bne.n	800d3aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f7fe ffc6 	bl	800c330 <tcp_abort>
      pcb = next;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	e002      	b.n	800d3b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1ea      	bne.n	800d38c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d3b6:	bf00      	nop
 800d3b8:	bf00      	nop
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	08015d7c 	.word	0x08015d7c
 800d3c4:	080164b0 	.word	0x080164b0
 800d3c8:	08015dc0 	.word	0x08015dc0

0800d3cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d02a      	beq.n	800d432 <tcp_netif_ip_addr_changed+0x66>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d026      	beq.n	800d432 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d3e4:	4b15      	ldr	r3, [pc, #84]	; (800d43c <tcp_netif_ip_addr_changed+0x70>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f7ff ffbc 	bl	800d368 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d3f0:	4b13      	ldr	r3, [pc, #76]	; (800d440 <tcp_netif_ip_addr_changed+0x74>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f7ff ffb6 	bl	800d368 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d017      	beq.n	800d432 <tcp_netif_ip_addr_changed+0x66>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d013      	beq.n	800d432 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d40a:	4b0e      	ldr	r3, [pc, #56]	; (800d444 <tcp_netif_ip_addr_changed+0x78>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	e00c      	b.n	800d42c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d103      	bne.n	800d426 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	60fb      	str	r3, [r7, #12]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1ef      	bne.n	800d412 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d432:	bf00      	nop
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	2000b944 	.word	0x2000b944
 800d440:	2000b950 	.word	0x2000b950
 800d444:	2000b94c 	.word	0x2000b94c

0800d448 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d454:	2b00      	cmp	r3, #0
 800d456:	d007      	beq.n	800d468 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7ff fc3d 	bl	800ccdc <tcp_segs_free>
    pcb->ooseq = NULL;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d470:	b590      	push	{r4, r7, lr}
 800d472:	b08d      	sub	sp, #52	; 0x34
 800d474:	af04      	add	r7, sp, #16
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d105      	bne.n	800d48c <tcp_input+0x1c>
 800d480:	4b9b      	ldr	r3, [pc, #620]	; (800d6f0 <tcp_input+0x280>)
 800d482:	2283      	movs	r2, #131	; 0x83
 800d484:	499b      	ldr	r1, [pc, #620]	; (800d6f4 <tcp_input+0x284>)
 800d486:	489c      	ldr	r0, [pc, #624]	; (800d6f8 <tcp_input+0x288>)
 800d488:	f006 fd70 	bl	8013f6c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	4a9a      	ldr	r2, [pc, #616]	; (800d6fc <tcp_input+0x28c>)
 800d492:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	895b      	ldrh	r3, [r3, #10]
 800d498:	2b13      	cmp	r3, #19
 800d49a:	f240 83c4 	bls.w	800dc26 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d49e:	4b98      	ldr	r3, [pc, #608]	; (800d700 <tcp_input+0x290>)
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	4a97      	ldr	r2, [pc, #604]	; (800d700 <tcp_input+0x290>)
 800d4a4:	6812      	ldr	r2, [r2, #0]
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f005 fc43 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f040 83ba 	bne.w	800dc2a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d4b6:	4b92      	ldr	r3, [pc, #584]	; (800d700 <tcp_input+0x290>)
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d4be:	2be0      	cmp	r3, #224	; 0xe0
 800d4c0:	f000 83b3 	beq.w	800dc2a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d4c4:	4b8d      	ldr	r3, [pc, #564]	; (800d6fc <tcp_input+0x28c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	899b      	ldrh	r3, [r3, #12]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fc fdef 	bl	800a0b0 <lwip_htons>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	0b1b      	lsrs	r3, r3, #12
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d4de:	7cbb      	ldrb	r3, [r7, #18]
 800d4e0:	2b13      	cmp	r3, #19
 800d4e2:	f240 83a4 	bls.w	800dc2e <tcp_input+0x7be>
 800d4e6:	7cbb      	ldrb	r3, [r7, #18]
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	891b      	ldrh	r3, [r3, #8]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	f200 839d 	bhi.w	800dc2e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d4f4:	7cbb      	ldrb	r3, [r7, #18]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	3b14      	subs	r3, #20
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	4b81      	ldr	r3, [pc, #516]	; (800d704 <tcp_input+0x294>)
 800d4fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d500:	4b81      	ldr	r3, [pc, #516]	; (800d708 <tcp_input+0x298>)
 800d502:	2200      	movs	r2, #0
 800d504:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	895a      	ldrh	r2, [r3, #10]
 800d50a:	7cbb      	ldrb	r3, [r7, #18]
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	429a      	cmp	r2, r3
 800d510:	d309      	bcc.n	800d526 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d512:	4b7c      	ldr	r3, [pc, #496]	; (800d704 <tcp_input+0x294>)
 800d514:	881a      	ldrh	r2, [r3, #0]
 800d516:	4b7d      	ldr	r3, [pc, #500]	; (800d70c <tcp_input+0x29c>)
 800d518:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d51a:	7cbb      	ldrb	r3, [r7, #18]
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7fe f8ec 	bl	800b6fc <pbuf_remove_header>
 800d524:	e04e      	b.n	800d5c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d105      	bne.n	800d53a <tcp_input+0xca>
 800d52e:	4b70      	ldr	r3, [pc, #448]	; (800d6f0 <tcp_input+0x280>)
 800d530:	22c2      	movs	r2, #194	; 0xc2
 800d532:	4977      	ldr	r1, [pc, #476]	; (800d710 <tcp_input+0x2a0>)
 800d534:	4870      	ldr	r0, [pc, #448]	; (800d6f8 <tcp_input+0x288>)
 800d536:	f006 fd19 	bl	8013f6c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d53a:	2114      	movs	r1, #20
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7fe f8dd 	bl	800b6fc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	895a      	ldrh	r2, [r3, #10]
 800d546:	4b71      	ldr	r3, [pc, #452]	; (800d70c <tcp_input+0x29c>)
 800d548:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d54a:	4b6e      	ldr	r3, [pc, #440]	; (800d704 <tcp_input+0x294>)
 800d54c:	881a      	ldrh	r2, [r3, #0]
 800d54e:	4b6f      	ldr	r3, [pc, #444]	; (800d70c <tcp_input+0x29c>)
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	1ad3      	subs	r3, r2, r3
 800d554:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d556:	4b6d      	ldr	r3, [pc, #436]	; (800d70c <tcp_input+0x29c>)
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7fe f8cd 	bl	800b6fc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	895b      	ldrh	r3, [r3, #10]
 800d568:	8a3a      	ldrh	r2, [r7, #16]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	f200 8361 	bhi.w	800dc32 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	4a64      	ldr	r2, [pc, #400]	; (800d708 <tcp_input+0x298>)
 800d578:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	8a3a      	ldrh	r2, [r7, #16]
 800d580:	4611      	mov	r1, r2
 800d582:	4618      	mov	r0, r3
 800d584:	f7fe f8ba 	bl	800b6fc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	891a      	ldrh	r2, [r3, #8]
 800d58c:	8a3b      	ldrh	r3, [r7, #16]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	b29a      	uxth	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	895b      	ldrh	r3, [r3, #10]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d005      	beq.n	800d5aa <tcp_input+0x13a>
 800d59e:	4b54      	ldr	r3, [pc, #336]	; (800d6f0 <tcp_input+0x280>)
 800d5a0:	22df      	movs	r2, #223	; 0xdf
 800d5a2:	495c      	ldr	r1, [pc, #368]	; (800d714 <tcp_input+0x2a4>)
 800d5a4:	4854      	ldr	r0, [pc, #336]	; (800d6f8 <tcp_input+0x288>)
 800d5a6:	f006 fce1 	bl	8013f6c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	891a      	ldrh	r2, [r3, #8]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d005      	beq.n	800d5c4 <tcp_input+0x154>
 800d5b8:	4b4d      	ldr	r3, [pc, #308]	; (800d6f0 <tcp_input+0x280>)
 800d5ba:	22e0      	movs	r2, #224	; 0xe0
 800d5bc:	4956      	ldr	r1, [pc, #344]	; (800d718 <tcp_input+0x2a8>)
 800d5be:	484e      	ldr	r0, [pc, #312]	; (800d6f8 <tcp_input+0x288>)
 800d5c0:	f006 fcd4 	bl	8013f6c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d5c4:	4b4d      	ldr	r3, [pc, #308]	; (800d6fc <tcp_input+0x28c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	4a4b      	ldr	r2, [pc, #300]	; (800d6fc <tcp_input+0x28c>)
 800d5ce:	6814      	ldr	r4, [r2, #0]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7fc fd6d 	bl	800a0b0 <lwip_htons>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d5da:	4b48      	ldr	r3, [pc, #288]	; (800d6fc <tcp_input+0x28c>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	885b      	ldrh	r3, [r3, #2]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	4a46      	ldr	r2, [pc, #280]	; (800d6fc <tcp_input+0x28c>)
 800d5e4:	6814      	ldr	r4, [r2, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fc fd62 	bl	800a0b0 <lwip_htons>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d5f0:	4b42      	ldr	r3, [pc, #264]	; (800d6fc <tcp_input+0x28c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	4a41      	ldr	r2, [pc, #260]	; (800d6fc <tcp_input+0x28c>)
 800d5f8:	6814      	ldr	r4, [r2, #0]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fc fd6d 	bl	800a0da <lwip_htonl>
 800d600:	4603      	mov	r3, r0
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	6863      	ldr	r3, [r4, #4]
 800d606:	4a45      	ldr	r2, [pc, #276]	; (800d71c <tcp_input+0x2ac>)
 800d608:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d60a:	4b3c      	ldr	r3, [pc, #240]	; (800d6fc <tcp_input+0x28c>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	689b      	ldr	r3, [r3, #8]
 800d610:	4a3a      	ldr	r2, [pc, #232]	; (800d6fc <tcp_input+0x28c>)
 800d612:	6814      	ldr	r4, [r2, #0]
 800d614:	4618      	mov	r0, r3
 800d616:	f7fc fd60 	bl	800a0da <lwip_htonl>
 800d61a:	4603      	mov	r3, r0
 800d61c:	60a3      	str	r3, [r4, #8]
 800d61e:	68a3      	ldr	r3, [r4, #8]
 800d620:	4a3f      	ldr	r2, [pc, #252]	; (800d720 <tcp_input+0x2b0>)
 800d622:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d624:	4b35      	ldr	r3, [pc, #212]	; (800d6fc <tcp_input+0x28c>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	89db      	ldrh	r3, [r3, #14]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	4a33      	ldr	r2, [pc, #204]	; (800d6fc <tcp_input+0x28c>)
 800d62e:	6814      	ldr	r4, [r2, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fc fd3d 	bl	800a0b0 <lwip_htons>
 800d636:	4603      	mov	r3, r0
 800d638:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d63a:	4b30      	ldr	r3, [pc, #192]	; (800d6fc <tcp_input+0x28c>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	899b      	ldrh	r3, [r3, #12]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4618      	mov	r0, r3
 800d644:	f7fc fd34 	bl	800a0b0 <lwip_htons>
 800d648:	4603      	mov	r3, r0
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d650:	b2da      	uxtb	r2, r3
 800d652:	4b34      	ldr	r3, [pc, #208]	; (800d724 <tcp_input+0x2b4>)
 800d654:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	891a      	ldrh	r2, [r3, #8]
 800d65a:	4b33      	ldr	r3, [pc, #204]	; (800d728 <tcp_input+0x2b8>)
 800d65c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d65e:	4b31      	ldr	r3, [pc, #196]	; (800d724 <tcp_input+0x2b4>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	f003 0303 	and.w	r3, r3, #3
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00c      	beq.n	800d684 <tcp_input+0x214>
    tcplen++;
 800d66a:	4b2f      	ldr	r3, [pc, #188]	; (800d728 <tcp_input+0x2b8>)
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	3301      	adds	r3, #1
 800d670:	b29a      	uxth	r2, r3
 800d672:	4b2d      	ldr	r3, [pc, #180]	; (800d728 <tcp_input+0x2b8>)
 800d674:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	891a      	ldrh	r2, [r3, #8]
 800d67a:	4b2b      	ldr	r3, [pc, #172]	; (800d728 <tcp_input+0x2b8>)
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	429a      	cmp	r2, r3
 800d680:	f200 82d9 	bhi.w	800dc36 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d684:	2300      	movs	r3, #0
 800d686:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d688:	4b28      	ldr	r3, [pc, #160]	; (800d72c <tcp_input+0x2bc>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	61fb      	str	r3, [r7, #28]
 800d68e:	e09d      	b.n	800d7cc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d690:	69fb      	ldr	r3, [r7, #28]
 800d692:	7d1b      	ldrb	r3, [r3, #20]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d105      	bne.n	800d6a4 <tcp_input+0x234>
 800d698:	4b15      	ldr	r3, [pc, #84]	; (800d6f0 <tcp_input+0x280>)
 800d69a:	22fb      	movs	r2, #251	; 0xfb
 800d69c:	4924      	ldr	r1, [pc, #144]	; (800d730 <tcp_input+0x2c0>)
 800d69e:	4816      	ldr	r0, [pc, #88]	; (800d6f8 <tcp_input+0x288>)
 800d6a0:	f006 fc64 	bl	8013f6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	7d1b      	ldrb	r3, [r3, #20]
 800d6a8:	2b0a      	cmp	r3, #10
 800d6aa:	d105      	bne.n	800d6b8 <tcp_input+0x248>
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <tcp_input+0x280>)
 800d6ae:	22fc      	movs	r2, #252	; 0xfc
 800d6b0:	4920      	ldr	r1, [pc, #128]	; (800d734 <tcp_input+0x2c4>)
 800d6b2:	4811      	ldr	r0, [pc, #68]	; (800d6f8 <tcp_input+0x288>)
 800d6b4:	f006 fc5a 	bl	8013f6c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	7d1b      	ldrb	r3, [r3, #20]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d105      	bne.n	800d6cc <tcp_input+0x25c>
 800d6c0:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <tcp_input+0x280>)
 800d6c2:	22fd      	movs	r2, #253	; 0xfd
 800d6c4:	491c      	ldr	r1, [pc, #112]	; (800d738 <tcp_input+0x2c8>)
 800d6c6:	480c      	ldr	r0, [pc, #48]	; (800d6f8 <tcp_input+0x288>)
 800d6c8:	f006 fc50 	bl	8013f6c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	7a1b      	ldrb	r3, [r3, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d033      	beq.n	800d73c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	7a1a      	ldrb	r2, [r3, #8]
 800d6d8:	4b09      	ldr	r3, [pc, #36]	; (800d700 <tcp_input+0x290>)
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d029      	beq.n	800d73c <tcp_input+0x2cc>
      prev = pcb;
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	61bb      	str	r3, [r7, #24]
      continue;
 800d6ec:	e06b      	b.n	800d7c6 <tcp_input+0x356>
 800d6ee:	bf00      	nop
 800d6f0:	080164e4 	.word	0x080164e4
 800d6f4:	08016518 	.word	0x08016518
 800d6f8:	08016530 	.word	0x08016530
 800d6fc:	20004a14 	.word	0x20004a14
 800d700:	20008230 	.word	0x20008230
 800d704:	20004a18 	.word	0x20004a18
 800d708:	20004a1c 	.word	0x20004a1c
 800d70c:	20004a1a 	.word	0x20004a1a
 800d710:	08016558 	.word	0x08016558
 800d714:	08016568 	.word	0x08016568
 800d718:	08016574 	.word	0x08016574
 800d71c:	20004a24 	.word	0x20004a24
 800d720:	20004a28 	.word	0x20004a28
 800d724:	20004a30 	.word	0x20004a30
 800d728:	20004a2e 	.word	0x20004a2e
 800d72c:	2000b944 	.word	0x2000b944
 800d730:	08016594 	.word	0x08016594
 800d734:	080165bc 	.word	0x080165bc
 800d738:	080165e8 	.word	0x080165e8
    }

    if (pcb->remote_port == tcphdr->src &&
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	8b1a      	ldrh	r2, [r3, #24]
 800d740:	4b94      	ldr	r3, [pc, #592]	; (800d994 <tcp_input+0x524>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	881b      	ldrh	r3, [r3, #0]
 800d746:	b29b      	uxth	r3, r3
 800d748:	429a      	cmp	r2, r3
 800d74a:	d13a      	bne.n	800d7c2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	8ada      	ldrh	r2, [r3, #22]
 800d750:	4b90      	ldr	r3, [pc, #576]	; (800d994 <tcp_input+0x524>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	885b      	ldrh	r3, [r3, #2]
 800d756:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d758:	429a      	cmp	r2, r3
 800d75a:	d132      	bne.n	800d7c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	4b8d      	ldr	r3, [pc, #564]	; (800d998 <tcp_input+0x528>)
 800d762:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d764:	429a      	cmp	r2, r3
 800d766:	d12c      	bne.n	800d7c2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	4b8a      	ldr	r3, [pc, #552]	; (800d998 <tcp_input+0x528>)
 800d76e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d770:	429a      	cmp	r2, r3
 800d772:	d126      	bne.n	800d7c2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d106      	bne.n	800d78c <tcp_input+0x31c>
 800d77e:	4b87      	ldr	r3, [pc, #540]	; (800d99c <tcp_input+0x52c>)
 800d780:	f240 120d 	movw	r2, #269	; 0x10d
 800d784:	4986      	ldr	r1, [pc, #536]	; (800d9a0 <tcp_input+0x530>)
 800d786:	4887      	ldr	r0, [pc, #540]	; (800d9a4 <tcp_input+0x534>)
 800d788:	f006 fbf0 	bl	8013f6c <iprintf>
      if (prev != NULL) {
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00a      	beq.n	800d7a8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	68da      	ldr	r2, [r3, #12]
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d79a:	4b83      	ldr	r3, [pc, #524]	; (800d9a8 <tcp_input+0x538>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d7a2:	4a81      	ldr	r2, [pc, #516]	; (800d9a8 <tcp_input+0x538>)
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	69fa      	ldr	r2, [r7, #28]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d111      	bne.n	800d7d6 <tcp_input+0x366>
 800d7b2:	4b7a      	ldr	r3, [pc, #488]	; (800d99c <tcp_input+0x52c>)
 800d7b4:	f240 1215 	movw	r2, #277	; 0x115
 800d7b8:	497c      	ldr	r1, [pc, #496]	; (800d9ac <tcp_input+0x53c>)
 800d7ba:	487a      	ldr	r0, [pc, #488]	; (800d9a4 <tcp_input+0x534>)
 800d7bc:	f006 fbd6 	bl	8013f6c <iprintf>
      break;
 800d7c0:	e009      	b.n	800d7d6 <tcp_input+0x366>
    }
    prev = pcb;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	61fb      	str	r3, [r7, #28]
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f47f af5e 	bne.w	800d690 <tcp_input+0x220>
 800d7d4:	e000      	b.n	800d7d8 <tcp_input+0x368>
      break;
 800d7d6:	bf00      	nop
  }

  if (pcb == NULL) {
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f040 8095 	bne.w	800d90a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7e0:	4b73      	ldr	r3, [pc, #460]	; (800d9b0 <tcp_input+0x540>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	61fb      	str	r3, [r7, #28]
 800d7e6:	e03f      	b.n	800d868 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	7d1b      	ldrb	r3, [r3, #20]
 800d7ec:	2b0a      	cmp	r3, #10
 800d7ee:	d006      	beq.n	800d7fe <tcp_input+0x38e>
 800d7f0:	4b6a      	ldr	r3, [pc, #424]	; (800d99c <tcp_input+0x52c>)
 800d7f2:	f240 121f 	movw	r2, #287	; 0x11f
 800d7f6:	496f      	ldr	r1, [pc, #444]	; (800d9b4 <tcp_input+0x544>)
 800d7f8:	486a      	ldr	r0, [pc, #424]	; (800d9a4 <tcp_input+0x534>)
 800d7fa:	f006 fbb7 	bl	8013f6c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	7a1b      	ldrb	r3, [r3, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d009      	beq.n	800d81a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	7a1a      	ldrb	r2, [r3, #8]
 800d80a:	4b63      	ldr	r3, [pc, #396]	; (800d998 <tcp_input+0x528>)
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d812:	3301      	adds	r3, #1
 800d814:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d816:	429a      	cmp	r2, r3
 800d818:	d122      	bne.n	800d860 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	8b1a      	ldrh	r2, [r3, #24]
 800d81e:	4b5d      	ldr	r3, [pc, #372]	; (800d994 <tcp_input+0x524>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	b29b      	uxth	r3, r3
 800d826:	429a      	cmp	r2, r3
 800d828:	d11b      	bne.n	800d862 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d82a:	69fb      	ldr	r3, [r7, #28]
 800d82c:	8ada      	ldrh	r2, [r3, #22]
 800d82e:	4b59      	ldr	r3, [pc, #356]	; (800d994 <tcp_input+0x524>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	885b      	ldrh	r3, [r3, #2]
 800d834:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d836:	429a      	cmp	r2, r3
 800d838:	d113      	bne.n	800d862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	4b56      	ldr	r3, [pc, #344]	; (800d998 <tcp_input+0x528>)
 800d840:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d842:	429a      	cmp	r2, r3
 800d844:	d10d      	bne.n	800d862 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	4b53      	ldr	r3, [pc, #332]	; (800d998 <tcp_input+0x528>)
 800d84c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d84e:	429a      	cmp	r2, r3
 800d850:	d107      	bne.n	800d862 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d852:	69f8      	ldr	r0, [r7, #28]
 800d854:	f000 fb54 	bl	800df00 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7fd ffd5 	bl	800b808 <pbuf_free>
        return;
 800d85e:	e1f0      	b.n	800dc42 <tcp_input+0x7d2>
        continue;
 800d860:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1bc      	bne.n	800d7e8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d872:	4b51      	ldr	r3, [pc, #324]	; (800d9b8 <tcp_input+0x548>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e02a      	b.n	800d8d0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	7a1b      	ldrb	r3, [r3, #8]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d00c      	beq.n	800d89c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	7a1a      	ldrb	r2, [r3, #8]
 800d886:	4b44      	ldr	r3, [pc, #272]	; (800d998 <tcp_input+0x528>)
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d88e:	3301      	adds	r3, #1
 800d890:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d892:	429a      	cmp	r2, r3
 800d894:	d002      	beq.n	800d89c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	61bb      	str	r3, [r7, #24]
        continue;
 800d89a:	e016      	b.n	800d8ca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	8ada      	ldrh	r2, [r3, #22]
 800d8a0:	4b3c      	ldr	r3, [pc, #240]	; (800d994 <tcp_input+0x524>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	885b      	ldrh	r3, [r3, #2]
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d10c      	bne.n	800d8c6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b39      	ldr	r3, [pc, #228]	; (800d998 <tcp_input+0x528>)
 800d8b2:	695b      	ldr	r3, [r3, #20]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d00f      	beq.n	800d8d8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00d      	beq.n	800d8da <tcp_input+0x46a>
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1d1      	bne.n	800d87a <tcp_input+0x40a>
 800d8d6:	e000      	b.n	800d8da <tcp_input+0x46a>
            break;
 800d8d8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d014      	beq.n	800d90a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	68da      	ldr	r2, [r3, #12]
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d8ee:	4b32      	ldr	r3, [pc, #200]	; (800d9b8 <tcp_input+0x548>)
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d8f6:	4a30      	ldr	r2, [pc, #192]	; (800d9b8 <tcp_input+0x548>)
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d8fc:	6978      	ldr	r0, [r7, #20]
 800d8fe:	f000 fa01 	bl	800dd04 <tcp_listen_input>
      }
      pbuf_free(p);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7fd ff80 	bl	800b808 <pbuf_free>
      return;
 800d908:	e19b      	b.n	800dc42 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	f000 8160 	beq.w	800dbd2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d912:	4b2a      	ldr	r3, [pc, #168]	; (800d9bc <tcp_input+0x54c>)
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	891a      	ldrh	r2, [r3, #8]
 800d91c:	4b27      	ldr	r3, [pc, #156]	; (800d9bc <tcp_input+0x54c>)
 800d91e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d920:	4a26      	ldr	r2, [pc, #152]	; (800d9bc <tcp_input+0x54c>)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d926:	4b1b      	ldr	r3, [pc, #108]	; (800d994 <tcp_input+0x524>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a24      	ldr	r2, [pc, #144]	; (800d9bc <tcp_input+0x54c>)
 800d92c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d92e:	4b24      	ldr	r3, [pc, #144]	; (800d9c0 <tcp_input+0x550>)
 800d930:	2200      	movs	r2, #0
 800d932:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d934:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <tcp_input+0x554>)
 800d936:	2200      	movs	r2, #0
 800d938:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d93a:	4b23      	ldr	r3, [pc, #140]	; (800d9c8 <tcp_input+0x558>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d940:	4b22      	ldr	r3, [pc, #136]	; (800d9cc <tcp_input+0x55c>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	f003 0308 	and.w	r3, r3, #8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d006      	beq.n	800d95a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7b5b      	ldrb	r3, [r3, #13]
 800d950:	f043 0301 	orr.w	r3, r3, #1
 800d954:	b2da      	uxtb	r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d038      	beq.n	800d9d4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d962:	69f8      	ldr	r0, [r7, #28]
 800d964:	f7ff f93e 	bl	800cbe4 <tcp_process_refused_data>
 800d968:	4603      	mov	r3, r0
 800d96a:	f113 0f0d 	cmn.w	r3, #13
 800d96e:	d007      	beq.n	800d980 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d974:	2b00      	cmp	r3, #0
 800d976:	d02d      	beq.n	800d9d4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d978:	4b15      	ldr	r3, [pc, #84]	; (800d9d0 <tcp_input+0x560>)
 800d97a:	881b      	ldrh	r3, [r3, #0]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d029      	beq.n	800d9d4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d984:	2b00      	cmp	r3, #0
 800d986:	f040 8104 	bne.w	800db92 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d98a:	69f8      	ldr	r0, [r7, #28]
 800d98c:	f003 f9be 	bl	8010d0c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d990:	e0ff      	b.n	800db92 <tcp_input+0x722>
 800d992:	bf00      	nop
 800d994:	20004a14 	.word	0x20004a14
 800d998:	20008230 	.word	0x20008230
 800d99c:	080164e4 	.word	0x080164e4
 800d9a0:	08016610 	.word	0x08016610
 800d9a4:	08016530 	.word	0x08016530
 800d9a8:	2000b944 	.word	0x2000b944
 800d9ac:	0801663c 	.word	0x0801663c
 800d9b0:	2000b954 	.word	0x2000b954
 800d9b4:	08016668 	.word	0x08016668
 800d9b8:	2000b94c 	.word	0x2000b94c
 800d9bc:	20004a04 	.word	0x20004a04
 800d9c0:	20004a34 	.word	0x20004a34
 800d9c4:	20004a31 	.word	0x20004a31
 800d9c8:	20004a2c 	.word	0x20004a2c
 800d9cc:	20004a30 	.word	0x20004a30
 800d9d0:	20004a2e 	.word	0x20004a2e
      }
    }
    tcp_input_pcb = pcb;
 800d9d4:	4a9c      	ldr	r2, [pc, #624]	; (800dc48 <tcp_input+0x7d8>)
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d9da:	69f8      	ldr	r0, [r7, #28]
 800d9dc:	f000 fb0a 	bl	800dff4 <tcp_process>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d9e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d9e8:	f113 0f0d 	cmn.w	r3, #13
 800d9ec:	f000 80d3 	beq.w	800db96 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d9f0:	4b96      	ldr	r3, [pc, #600]	; (800dc4c <tcp_input+0x7dc>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	f003 0308 	and.w	r3, r3, #8
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d015      	beq.n	800da28 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <tcp_input+0x5a8>
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	6912      	ldr	r2, [r2, #16]
 800da10:	f06f 010d 	mvn.w	r1, #13
 800da14:	4610      	mov	r0, r2
 800da16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da18:	69f9      	ldr	r1, [r7, #28]
 800da1a:	488d      	ldr	r0, [pc, #564]	; (800dc50 <tcp_input+0x7e0>)
 800da1c:	f7ff fbb0 	bl	800d180 <tcp_pcb_remove>
        tcp_free(pcb);
 800da20:	69f8      	ldr	r0, [r7, #28]
 800da22:	f7fe f99d 	bl	800bd60 <tcp_free>
 800da26:	e0c1      	b.n	800dbac <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800da2c:	4b89      	ldr	r3, [pc, #548]	; (800dc54 <tcp_input+0x7e4>)
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d01d      	beq.n	800da70 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800da34:	4b87      	ldr	r3, [pc, #540]	; (800dc54 <tcp_input+0x7e4>)
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00a      	beq.n	800da5a <tcp_input+0x5ea>
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4a:	69fa      	ldr	r2, [r7, #28]
 800da4c:	6910      	ldr	r0, [r2, #16]
 800da4e:	89fa      	ldrh	r2, [r7, #14]
 800da50:	69f9      	ldr	r1, [r7, #28]
 800da52:	4798      	blx	r3
 800da54:	4603      	mov	r3, r0
 800da56:	74fb      	strb	r3, [r7, #19]
 800da58:	e001      	b.n	800da5e <tcp_input+0x5ee>
 800da5a:	2300      	movs	r3, #0
 800da5c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800da5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da62:	f113 0f0d 	cmn.w	r3, #13
 800da66:	f000 8098 	beq.w	800db9a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800da6a:	4b7a      	ldr	r3, [pc, #488]	; (800dc54 <tcp_input+0x7e4>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800da70:	69f8      	ldr	r0, [r7, #28]
 800da72:	f000 f907 	bl	800dc84 <tcp_input_delayed_close>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f040 8090 	bne.w	800db9e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800da7e:	4b76      	ldr	r3, [pc, #472]	; (800dc58 <tcp_input+0x7e8>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d041      	beq.n	800db0a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d006      	beq.n	800da9c <tcp_input+0x62c>
 800da8e:	4b73      	ldr	r3, [pc, #460]	; (800dc5c <tcp_input+0x7ec>)
 800da90:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800da94:	4972      	ldr	r1, [pc, #456]	; (800dc60 <tcp_input+0x7f0>)
 800da96:	4873      	ldr	r0, [pc, #460]	; (800dc64 <tcp_input+0x7f4>)
 800da98:	f006 fa68 	bl	8013f6c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800da9c:	69fb      	ldr	r3, [r7, #28]
 800da9e:	8b5b      	ldrh	r3, [r3, #26]
 800daa0:	f003 0310 	and.w	r3, r3, #16
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d008      	beq.n	800daba <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800daa8:	4b6b      	ldr	r3, [pc, #428]	; (800dc58 <tcp_input+0x7e8>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4618      	mov	r0, r3
 800daae:	f7fd feab 	bl	800b808 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dab2:	69f8      	ldr	r0, [r7, #28]
 800dab4:	f7fe fc3c 	bl	800c330 <tcp_abort>
            goto aborted;
 800dab8:	e078      	b.n	800dbac <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00c      	beq.n	800dade <tcp_input+0x66e>
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	6918      	ldr	r0, [r3, #16]
 800dace:	4b62      	ldr	r3, [pc, #392]	; (800dc58 <tcp_input+0x7e8>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	2300      	movs	r3, #0
 800dad4:	69f9      	ldr	r1, [r7, #28]
 800dad6:	47a0      	blx	r4
 800dad8:	4603      	mov	r3, r0
 800dada:	74fb      	strb	r3, [r7, #19]
 800dadc:	e008      	b.n	800daf0 <tcp_input+0x680>
 800dade:	4b5e      	ldr	r3, [pc, #376]	; (800dc58 <tcp_input+0x7e8>)
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	2300      	movs	r3, #0
 800dae4:	69f9      	ldr	r1, [r7, #28]
 800dae6:	2000      	movs	r0, #0
 800dae8:	f7ff f952 	bl	800cd90 <tcp_recv_null>
 800daec:	4603      	mov	r3, r0
 800daee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800daf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800daf4:	f113 0f0d 	cmn.w	r3, #13
 800daf8:	d053      	beq.n	800dba2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800db02:	4b55      	ldr	r3, [pc, #340]	; (800dc58 <tcp_input+0x7e8>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800db0a:	4b50      	ldr	r3, [pc, #320]	; (800dc4c <tcp_input+0x7dc>)
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	f003 0320 	and.w	r3, r3, #32
 800db12:	2b00      	cmp	r3, #0
 800db14:	d030      	beq.n	800db78 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d009      	beq.n	800db32 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db22:	7b5a      	ldrb	r2, [r3, #13]
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db28:	f042 0220 	orr.w	r2, r2, #32
 800db2c:	b2d2      	uxtb	r2, r2
 800db2e:	735a      	strb	r2, [r3, #13]
 800db30:	e022      	b.n	800db78 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db3a:	d005      	beq.n	800db48 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db40:	3301      	adds	r3, #1
 800db42:	b29a      	uxth	r2, r3
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00b      	beq.n	800db6a <tcp_input+0x6fa>
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	6918      	ldr	r0, [r3, #16]
 800db5c:	2300      	movs	r3, #0
 800db5e:	2200      	movs	r2, #0
 800db60:	69f9      	ldr	r1, [r7, #28]
 800db62:	47a0      	blx	r4
 800db64:	4603      	mov	r3, r0
 800db66:	74fb      	strb	r3, [r7, #19]
 800db68:	e001      	b.n	800db6e <tcp_input+0x6fe>
 800db6a:	2300      	movs	r3, #0
 800db6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800db6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db72:	f113 0f0d 	cmn.w	r3, #13
 800db76:	d016      	beq.n	800dba6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800db78:	4b33      	ldr	r3, [pc, #204]	; (800dc48 <tcp_input+0x7d8>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800db7e:	69f8      	ldr	r0, [r7, #28]
 800db80:	f000 f880 	bl	800dc84 <tcp_input_delayed_close>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d10f      	bne.n	800dbaa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800db8a:	69f8      	ldr	r0, [r7, #28]
 800db8c:	f002 fab8 	bl	8010100 <tcp_output>
 800db90:	e00c      	b.n	800dbac <tcp_input+0x73c>
        goto aborted;
 800db92:	bf00      	nop
 800db94:	e00a      	b.n	800dbac <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800db96:	bf00      	nop
 800db98:	e008      	b.n	800dbac <tcp_input+0x73c>
              goto aborted;
 800db9a:	bf00      	nop
 800db9c:	e006      	b.n	800dbac <tcp_input+0x73c>
          goto aborted;
 800db9e:	bf00      	nop
 800dba0:	e004      	b.n	800dbac <tcp_input+0x73c>
            goto aborted;
 800dba2:	bf00      	nop
 800dba4:	e002      	b.n	800dbac <tcp_input+0x73c>
              goto aborted;
 800dba6:	bf00      	nop
 800dba8:	e000      	b.n	800dbac <tcp_input+0x73c>
          goto aborted;
 800dbaa:	bf00      	nop
    tcp_input_pcb = NULL;
 800dbac:	4b26      	ldr	r3, [pc, #152]	; (800dc48 <tcp_input+0x7d8>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dbb2:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <tcp_input+0x7e8>)
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dbb8:	4b2b      	ldr	r3, [pc, #172]	; (800dc68 <tcp_input+0x7f8>)
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d03f      	beq.n	800dc40 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800dbc0:	4b29      	ldr	r3, [pc, #164]	; (800dc68 <tcp_input+0x7f8>)
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd fe1f 	bl	800b808 <pbuf_free>
      inseg.p = NULL;
 800dbca:	4b27      	ldr	r3, [pc, #156]	; (800dc68 <tcp_input+0x7f8>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dbd0:	e036      	b.n	800dc40 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dbd2:	4b26      	ldr	r3, [pc, #152]	; (800dc6c <tcp_input+0x7fc>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	899b      	ldrh	r3, [r3, #12]
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fc fa68 	bl	800a0b0 <lwip_htons>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	f003 0304 	and.w	r3, r3, #4
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d118      	bne.n	800dc1e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dbec:	4b20      	ldr	r3, [pc, #128]	; (800dc70 <tcp_input+0x800>)
 800dbee:	6819      	ldr	r1, [r3, #0]
 800dbf0:	4b20      	ldr	r3, [pc, #128]	; (800dc74 <tcp_input+0x804>)
 800dbf2:	881b      	ldrh	r3, [r3, #0]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	4b20      	ldr	r3, [pc, #128]	; (800dc78 <tcp_input+0x808>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dbfc:	4b1b      	ldr	r3, [pc, #108]	; (800dc6c <tcp_input+0x7fc>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc00:	885b      	ldrh	r3, [r3, #2]
 800dc02:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc04:	4a19      	ldr	r2, [pc, #100]	; (800dc6c <tcp_input+0x7fc>)
 800dc06:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc08:	8812      	ldrh	r2, [r2, #0]
 800dc0a:	b292      	uxth	r2, r2
 800dc0c:	9202      	str	r2, [sp, #8]
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	4b1a      	ldr	r3, [pc, #104]	; (800dc7c <tcp_input+0x80c>)
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	4b1a      	ldr	r3, [pc, #104]	; (800dc80 <tcp_input+0x810>)
 800dc16:	4602      	mov	r2, r0
 800dc18:	2000      	movs	r0, #0
 800dc1a:	f003 f825 	bl	8010c68 <tcp_rst>
    pbuf_free(p);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f7fd fdf2 	bl	800b808 <pbuf_free>
  return;
 800dc24:	e00c      	b.n	800dc40 <tcp_input+0x7d0>
    goto dropped;
 800dc26:	bf00      	nop
 800dc28:	e006      	b.n	800dc38 <tcp_input+0x7c8>
    goto dropped;
 800dc2a:	bf00      	nop
 800dc2c:	e004      	b.n	800dc38 <tcp_input+0x7c8>
    goto dropped;
 800dc2e:	bf00      	nop
 800dc30:	e002      	b.n	800dc38 <tcp_input+0x7c8>
      goto dropped;
 800dc32:	bf00      	nop
 800dc34:	e000      	b.n	800dc38 <tcp_input+0x7c8>
      goto dropped;
 800dc36:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7fd fde5 	bl	800b808 <pbuf_free>
 800dc3e:	e000      	b.n	800dc42 <tcp_input+0x7d2>
  return;
 800dc40:	bf00      	nop
}
 800dc42:	3724      	adds	r7, #36	; 0x24
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd90      	pop	{r4, r7, pc}
 800dc48:	2000b958 	.word	0x2000b958
 800dc4c:	20004a31 	.word	0x20004a31
 800dc50:	2000b944 	.word	0x2000b944
 800dc54:	20004a2c 	.word	0x20004a2c
 800dc58:	20004a34 	.word	0x20004a34
 800dc5c:	080164e4 	.word	0x080164e4
 800dc60:	08016698 	.word	0x08016698
 800dc64:	08016530 	.word	0x08016530
 800dc68:	20004a04 	.word	0x20004a04
 800dc6c:	20004a14 	.word	0x20004a14
 800dc70:	20004a28 	.word	0x20004a28
 800dc74:	20004a2e 	.word	0x20004a2e
 800dc78:	20004a24 	.word	0x20004a24
 800dc7c:	20008240 	.word	0x20008240
 800dc80:	20008244 	.word	0x20008244

0800dc84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <tcp_input_delayed_close+0x1c>
 800dc92:	4b17      	ldr	r3, [pc, #92]	; (800dcf0 <tcp_input_delayed_close+0x6c>)
 800dc94:	f240 225a 	movw	r2, #602	; 0x25a
 800dc98:	4916      	ldr	r1, [pc, #88]	; (800dcf4 <tcp_input_delayed_close+0x70>)
 800dc9a:	4817      	ldr	r0, [pc, #92]	; (800dcf8 <tcp_input_delayed_close+0x74>)
 800dc9c:	f006 f966 	bl	8013f6c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dca0:	4b16      	ldr	r3, [pc, #88]	; (800dcfc <tcp_input_delayed_close+0x78>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 0310 	and.w	r3, r3, #16
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d01c      	beq.n	800dce6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8b5b      	ldrh	r3, [r3, #26]
 800dcb0:	f003 0310 	and.w	r3, r3, #16
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10d      	bne.n	800dcd4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d008      	beq.n	800dcd4 <tcp_input_delayed_close+0x50>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	6912      	ldr	r2, [r2, #16]
 800dccc:	f06f 010e 	mvn.w	r1, #14
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	480a      	ldr	r0, [pc, #40]	; (800dd00 <tcp_input_delayed_close+0x7c>)
 800dcd8:	f7ff fa52 	bl	800d180 <tcp_pcb_remove>
    tcp_free(pcb);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f7fe f83f 	bl	800bd60 <tcp_free>
    return 1;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e000      	b.n	800dce8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dce6:	2300      	movs	r3, #0
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	080164e4 	.word	0x080164e4
 800dcf4:	080166b4 	.word	0x080166b4
 800dcf8:	08016530 	.word	0x08016530
 800dcfc:	20004a31 	.word	0x20004a31
 800dd00:	2000b944 	.word	0x2000b944

0800dd04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dd04:	b590      	push	{r4, r7, lr}
 800dd06:	b08b      	sub	sp, #44	; 0x2c
 800dd08:	af04      	add	r7, sp, #16
 800dd0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dd0c:	4b6f      	ldr	r3, [pc, #444]	; (800decc <tcp_listen_input+0x1c8>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f040 80d2 	bne.w	800debe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <tcp_listen_input+0x2a>
 800dd20:	4b6b      	ldr	r3, [pc, #428]	; (800ded0 <tcp_listen_input+0x1cc>)
 800dd22:	f240 2281 	movw	r2, #641	; 0x281
 800dd26:	496b      	ldr	r1, [pc, #428]	; (800ded4 <tcp_listen_input+0x1d0>)
 800dd28:	486b      	ldr	r0, [pc, #428]	; (800ded8 <tcp_listen_input+0x1d4>)
 800dd2a:	f006 f91f 	bl	8013f6c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dd2e:	4b67      	ldr	r3, [pc, #412]	; (800decc <tcp_listen_input+0x1c8>)
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	f003 0310 	and.w	r3, r3, #16
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d019      	beq.n	800dd6e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd3a:	4b68      	ldr	r3, [pc, #416]	; (800dedc <tcp_listen_input+0x1d8>)
 800dd3c:	6819      	ldr	r1, [r3, #0]
 800dd3e:	4b68      	ldr	r3, [pc, #416]	; (800dee0 <tcp_listen_input+0x1dc>)
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	4b67      	ldr	r3, [pc, #412]	; (800dee4 <tcp_listen_input+0x1e0>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd4a:	4b67      	ldr	r3, [pc, #412]	; (800dee8 <tcp_listen_input+0x1e4>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd4e:	885b      	ldrh	r3, [r3, #2]
 800dd50:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd52:	4a65      	ldr	r2, [pc, #404]	; (800dee8 <tcp_listen_input+0x1e4>)
 800dd54:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd56:	8812      	ldrh	r2, [r2, #0]
 800dd58:	b292      	uxth	r2, r2
 800dd5a:	9202      	str	r2, [sp, #8]
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	4b63      	ldr	r3, [pc, #396]	; (800deec <tcp_listen_input+0x1e8>)
 800dd60:	9300      	str	r3, [sp, #0]
 800dd62:	4b63      	ldr	r3, [pc, #396]	; (800def0 <tcp_listen_input+0x1ec>)
 800dd64:	4602      	mov	r2, r0
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f002 ff7e 	bl	8010c68 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dd6c:	e0a9      	b.n	800dec2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dd6e:	4b57      	ldr	r3, [pc, #348]	; (800decc <tcp_listen_input+0x1c8>)
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 0302 	and.w	r3, r3, #2
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	f000 80a3 	beq.w	800dec2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	7d5b      	ldrb	r3, [r3, #21]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff f929 	bl	800cfd8 <tcp_alloc>
 800dd86:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d111      	bne.n	800ddb2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	699b      	ldr	r3, [r3, #24]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <tcp_listen_input+0xa8>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	699b      	ldr	r3, [r3, #24]
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	6910      	ldr	r0, [r2, #16]
 800dd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dda2:	2100      	movs	r1, #0
 800dda4:	4798      	blx	r3
 800dda6:	4603      	mov	r3, r0
 800dda8:	73bb      	strb	r3, [r7, #14]
      return;
 800ddaa:	e08b      	b.n	800dec4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ddac:	23f0      	movs	r3, #240	; 0xf0
 800ddae:	73bb      	strb	r3, [r7, #14]
      return;
 800ddb0:	e088      	b.n	800dec4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ddb2:	4b50      	ldr	r3, [pc, #320]	; (800def4 <tcp_listen_input+0x1f0>)
 800ddb4:	695a      	ldr	r2, [r3, #20]
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ddba:	4b4e      	ldr	r3, [pc, #312]	; (800def4 <tcp_listen_input+0x1f0>)
 800ddbc:	691a      	ldr	r2, [r3, #16]
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8ada      	ldrh	r2, [r3, #22]
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ddca:	4b47      	ldr	r3, [pc, #284]	; (800dee8 <tcp_listen_input+0x1e4>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2203      	movs	r2, #3
 800ddda:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dddc:	4b41      	ldr	r3, [pc, #260]	; (800dee4 <tcp_listen_input+0x1e0>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	1c5a      	adds	r2, r3, #1
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddea:	697b      	ldr	r3, [r7, #20]
 800ddec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ddee:	6978      	ldr	r0, [r7, #20]
 800ddf0:	f7ff fa5a 	bl	800d2a8 <tcp_next_iss>
 800ddf4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	693a      	ldr	r2, [r7, #16]
 800de00:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	693a      	ldr	r2, [r7, #16]
 800de0c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800de0e:	4b35      	ldr	r3, [pc, #212]	; (800dee4 <tcp_listen_input+0x1e0>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	1e5a      	subs	r2, r3, #1
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	691a      	ldr	r2, [r3, #16]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7a5b      	ldrb	r3, [r3, #9]
 800de2a:	f003 030c 	and.w	r3, r3, #12
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7a1a      	ldrb	r2, [r3, #8]
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800de3c:	4b2e      	ldr	r3, [pc, #184]	; (800def8 <tcp_listen_input+0x1f4>)
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	60da      	str	r2, [r3, #12]
 800de44:	4a2c      	ldr	r2, [pc, #176]	; (800def8 <tcp_listen_input+0x1f4>)
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	6013      	str	r3, [r2, #0]
 800de4a:	f003 f8cf 	bl	8010fec <tcp_timer_needed>
 800de4e:	4b2b      	ldr	r3, [pc, #172]	; (800defc <tcp_listen_input+0x1f8>)
 800de50:	2201      	movs	r2, #1
 800de52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800de54:	6978      	ldr	r0, [r7, #20]
 800de56:	f001 fd8d 	bl	800f974 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800de5a:	4b23      	ldr	r3, [pc, #140]	; (800dee8 <tcp_listen_input+0x1e4>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	89db      	ldrh	r3, [r3, #14]
 800de60:	b29a      	uxth	r2, r3
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	3304      	adds	r3, #4
 800de7c:	4618      	mov	r0, r3
 800de7e:	f004 fcc3 	bl	8012808 <ip4_route>
 800de82:	4601      	mov	r1, r0
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	3304      	adds	r3, #4
 800de88:	461a      	mov	r2, r3
 800de8a:	4620      	mov	r0, r4
 800de8c:	f7ff fa32 	bl	800d2f4 <tcp_eff_send_mss_netif>
 800de90:	4603      	mov	r3, r0
 800de92:	461a      	mov	r2, r3
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800de98:	2112      	movs	r1, #18
 800de9a:	6978      	ldr	r0, [r7, #20]
 800de9c:	f002 f842 	bl	800ff24 <tcp_enqueue_flags>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d004      	beq.n	800deb6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800deac:	2100      	movs	r1, #0
 800deae:	6978      	ldr	r0, [r7, #20]
 800deb0:	f7fe f980 	bl	800c1b4 <tcp_abandon>
      return;
 800deb4:	e006      	b.n	800dec4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f002 f922 	bl	8010100 <tcp_output>
  return;
 800debc:	e001      	b.n	800dec2 <tcp_listen_input+0x1be>
    return;
 800debe:	bf00      	nop
 800dec0:	e000      	b.n	800dec4 <tcp_listen_input+0x1c0>
  return;
 800dec2:	bf00      	nop
}
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd90      	pop	{r4, r7, pc}
 800deca:	bf00      	nop
 800decc:	20004a30 	.word	0x20004a30
 800ded0:	080164e4 	.word	0x080164e4
 800ded4:	080166dc 	.word	0x080166dc
 800ded8:	08016530 	.word	0x08016530
 800dedc:	20004a28 	.word	0x20004a28
 800dee0:	20004a2e 	.word	0x20004a2e
 800dee4:	20004a24 	.word	0x20004a24
 800dee8:	20004a14 	.word	0x20004a14
 800deec:	20008240 	.word	0x20008240
 800def0:	20008244 	.word	0x20008244
 800def4:	20008230 	.word	0x20008230
 800def8:	2000b944 	.word	0x2000b944
 800defc:	2000b940 	.word	0x2000b940

0800df00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af04      	add	r7, sp, #16
 800df06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800df08:	4b2f      	ldr	r3, [pc, #188]	; (800dfc8 <tcp_timewait_input+0xc8>)
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	f003 0304 	and.w	r3, r3, #4
 800df10:	2b00      	cmp	r3, #0
 800df12:	d153      	bne.n	800dfbc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <tcp_timewait_input+0x28>
 800df1a:	4b2c      	ldr	r3, [pc, #176]	; (800dfcc <tcp_timewait_input+0xcc>)
 800df1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800df20:	492b      	ldr	r1, [pc, #172]	; (800dfd0 <tcp_timewait_input+0xd0>)
 800df22:	482c      	ldr	r0, [pc, #176]	; (800dfd4 <tcp_timewait_input+0xd4>)
 800df24:	f006 f822 	bl	8013f6c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800df28:	4b27      	ldr	r3, [pc, #156]	; (800dfc8 <tcp_timewait_input+0xc8>)
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0302 	and.w	r3, r3, #2
 800df30:	2b00      	cmp	r3, #0
 800df32:	d02a      	beq.n	800df8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800df34:	4b28      	ldr	r3, [pc, #160]	; (800dfd8 <tcp_timewait_input+0xd8>)
 800df36:	681a      	ldr	r2, [r3, #0]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	db2d      	blt.n	800df9e <tcp_timewait_input+0x9e>
 800df42:	4b25      	ldr	r3, [pc, #148]	; (800dfd8 <tcp_timewait_input+0xd8>)
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4a:	6879      	ldr	r1, [r7, #4]
 800df4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800df4e:	440b      	add	r3, r1
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	dc23      	bgt.n	800df9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df56:	4b21      	ldr	r3, [pc, #132]	; (800dfdc <tcp_timewait_input+0xdc>)
 800df58:	6819      	ldr	r1, [r3, #0]
 800df5a:	4b21      	ldr	r3, [pc, #132]	; (800dfe0 <tcp_timewait_input+0xe0>)
 800df5c:	881b      	ldrh	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	4b1d      	ldr	r3, [pc, #116]	; (800dfd8 <tcp_timewait_input+0xd8>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df66:	4b1f      	ldr	r3, [pc, #124]	; (800dfe4 <tcp_timewait_input+0xe4>)
 800df68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df6e:	4a1d      	ldr	r2, [pc, #116]	; (800dfe4 <tcp_timewait_input+0xe4>)
 800df70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df72:	8812      	ldrh	r2, [r2, #0]
 800df74:	b292      	uxth	r2, r2
 800df76:	9202      	str	r2, [sp, #8]
 800df78:	9301      	str	r3, [sp, #4]
 800df7a:	4b1b      	ldr	r3, [pc, #108]	; (800dfe8 <tcp_timewait_input+0xe8>)
 800df7c:	9300      	str	r3, [sp, #0]
 800df7e:	4b1b      	ldr	r3, [pc, #108]	; (800dfec <tcp_timewait_input+0xec>)
 800df80:	4602      	mov	r2, r0
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f002 fe70 	bl	8010c68 <tcp_rst>
      return;
 800df88:	e01b      	b.n	800dfc2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800df8a:	4b0f      	ldr	r3, [pc, #60]	; (800dfc8 <tcp_timewait_input+0xc8>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	2b00      	cmp	r3, #0
 800df94:	d003      	beq.n	800df9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800df96:	4b16      	ldr	r3, [pc, #88]	; (800dff0 <tcp_timewait_input+0xf0>)
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800df9e:	4b10      	ldr	r3, [pc, #64]	; (800dfe0 <tcp_timewait_input+0xe0>)
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00c      	beq.n	800dfc0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	8b5b      	ldrh	r3, [r3, #26]
 800dfaa:	f043 0302 	orr.w	r3, r3, #2
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f002 f8a3 	bl	8010100 <tcp_output>
  }
  return;
 800dfba:	e001      	b.n	800dfc0 <tcp_timewait_input+0xc0>
    return;
 800dfbc:	bf00      	nop
 800dfbe:	e000      	b.n	800dfc2 <tcp_timewait_input+0xc2>
  return;
 800dfc0:	bf00      	nop
}
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	20004a30 	.word	0x20004a30
 800dfcc:	080164e4 	.word	0x080164e4
 800dfd0:	080166fc 	.word	0x080166fc
 800dfd4:	08016530 	.word	0x08016530
 800dfd8:	20004a24 	.word	0x20004a24
 800dfdc:	20004a28 	.word	0x20004a28
 800dfe0:	20004a2e 	.word	0x20004a2e
 800dfe4:	20004a14 	.word	0x20004a14
 800dfe8:	20008240 	.word	0x20008240
 800dfec:	20008244 	.word	0x20008244
 800dff0:	2000b948 	.word	0x2000b948

0800dff4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dff4:	b590      	push	{r4, r7, lr}
 800dff6:	b08d      	sub	sp, #52	; 0x34
 800dff8:	af04      	add	r7, sp, #16
 800dffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d106      	bne.n	800e018 <tcp_process+0x24>
 800e00a:	4ba5      	ldr	r3, [pc, #660]	; (800e2a0 <tcp_process+0x2ac>)
 800e00c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e010:	49a4      	ldr	r1, [pc, #656]	; (800e2a4 <tcp_process+0x2b0>)
 800e012:	48a5      	ldr	r0, [pc, #660]	; (800e2a8 <tcp_process+0x2b4>)
 800e014:	f005 ffaa 	bl	8013f6c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e018:	4ba4      	ldr	r3, [pc, #656]	; (800e2ac <tcp_process+0x2b8>)
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	f003 0304 	and.w	r3, r3, #4
 800e020:	2b00      	cmp	r3, #0
 800e022:	d04e      	beq.n	800e0c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7d1b      	ldrb	r3, [r3, #20]
 800e028:	2b02      	cmp	r3, #2
 800e02a:	d108      	bne.n	800e03e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e030:	4b9f      	ldr	r3, [pc, #636]	; (800e2b0 <tcp_process+0x2bc>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d123      	bne.n	800e080 <tcp_process+0x8c>
        acceptable = 1;
 800e038:	2301      	movs	r3, #1
 800e03a:	76fb      	strb	r3, [r7, #27]
 800e03c:	e020      	b.n	800e080 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e042:	4b9c      	ldr	r3, [pc, #624]	; (800e2b4 <tcp_process+0x2c0>)
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	429a      	cmp	r2, r3
 800e048:	d102      	bne.n	800e050 <tcp_process+0x5c>
        acceptable = 1;
 800e04a:	2301      	movs	r3, #1
 800e04c:	76fb      	strb	r3, [r7, #27]
 800e04e:	e017      	b.n	800e080 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e050:	4b98      	ldr	r3, [pc, #608]	; (800e2b4 <tcp_process+0x2c0>)
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e058:	1ad3      	subs	r3, r2, r3
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	db10      	blt.n	800e080 <tcp_process+0x8c>
 800e05e:	4b95      	ldr	r3, [pc, #596]	; (800e2b4 <tcp_process+0x2c0>)
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e066:	6879      	ldr	r1, [r7, #4]
 800e068:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e06a:	440b      	add	r3, r1
 800e06c:	1ad3      	subs	r3, r2, r3
 800e06e:	2b00      	cmp	r3, #0
 800e070:	dc06      	bgt.n	800e080 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	8b5b      	ldrh	r3, [r3, #26]
 800e076:	f043 0302 	orr.w	r3, r3, #2
 800e07a:	b29a      	uxth	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e080:	7efb      	ldrb	r3, [r7, #27]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d01b      	beq.n	800e0be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7d1b      	ldrb	r3, [r3, #20]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d106      	bne.n	800e09c <tcp_process+0xa8>
 800e08e:	4b84      	ldr	r3, [pc, #528]	; (800e2a0 <tcp_process+0x2ac>)
 800e090:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e094:	4988      	ldr	r1, [pc, #544]	; (800e2b8 <tcp_process+0x2c4>)
 800e096:	4884      	ldr	r0, [pc, #528]	; (800e2a8 <tcp_process+0x2b4>)
 800e098:	f005 ff68 	bl	8013f6c <iprintf>
      recv_flags |= TF_RESET;
 800e09c:	4b87      	ldr	r3, [pc, #540]	; (800e2bc <tcp_process+0x2c8>)
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	f043 0308 	orr.w	r3, r3, #8
 800e0a4:	b2da      	uxtb	r2, r3
 800e0a6:	4b85      	ldr	r3, [pc, #532]	; (800e2bc <tcp_process+0x2c8>)
 800e0a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8b5b      	ldrh	r3, [r3, #26]
 800e0ae:	f023 0301 	bic.w	r3, r3, #1
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e0b8:	f06f 030d 	mvn.w	r3, #13
 800e0bc:	e37a      	b.n	800e7b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e378      	b.n	800e7b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e0c2:	4b7a      	ldr	r3, [pc, #488]	; (800e2ac <tcp_process+0x2b8>)
 800e0c4:	781b      	ldrb	r3, [r3, #0]
 800e0c6:	f003 0302 	and.w	r3, r3, #2
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d010      	beq.n	800e0f0 <tcp_process+0xfc>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	7d1b      	ldrb	r3, [r3, #20]
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d00c      	beq.n	800e0f0 <tcp_process+0xfc>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	7d1b      	ldrb	r3, [r3, #20]
 800e0da:	2b03      	cmp	r3, #3
 800e0dc:	d008      	beq.n	800e0f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8b5b      	ldrh	r3, [r3, #26]
 800e0e2:	f043 0302 	orr.w	r3, r3, #2
 800e0e6:	b29a      	uxth	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e361      	b.n	800e7b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	8b5b      	ldrh	r3, [r3, #26]
 800e0f4:	f003 0310 	and.w	r3, r3, #16
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d103      	bne.n	800e104 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e0fc:	4b70      	ldr	r3, [pc, #448]	; (800e2c0 <tcp_process+0x2cc>)
 800e0fe:	681a      	ldr	r2, [r3, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f001 fc2d 	bl	800f974 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	7d1b      	ldrb	r3, [r3, #20]
 800e11e:	3b02      	subs	r3, #2
 800e120:	2b07      	cmp	r3, #7
 800e122:	f200 8337 	bhi.w	800e794 <tcp_process+0x7a0>
 800e126:	a201      	add	r2, pc, #4	; (adr r2, 800e12c <tcp_process+0x138>)
 800e128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12c:	0800e14d 	.word	0x0800e14d
 800e130:	0800e37d 	.word	0x0800e37d
 800e134:	0800e4f5 	.word	0x0800e4f5
 800e138:	0800e51f 	.word	0x0800e51f
 800e13c:	0800e643 	.word	0x0800e643
 800e140:	0800e4f5 	.word	0x0800e4f5
 800e144:	0800e6cf 	.word	0x0800e6cf
 800e148:	0800e75f 	.word	0x0800e75f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e14c:	4b57      	ldr	r3, [pc, #348]	; (800e2ac <tcp_process+0x2b8>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f003 0310 	and.w	r3, r3, #16
 800e154:	2b00      	cmp	r3, #0
 800e156:	f000 80e4 	beq.w	800e322 <tcp_process+0x32e>
 800e15a:	4b54      	ldr	r3, [pc, #336]	; (800e2ac <tcp_process+0x2b8>)
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f003 0302 	and.w	r3, r3, #2
 800e162:	2b00      	cmp	r3, #0
 800e164:	f000 80dd 	beq.w	800e322 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	4b50      	ldr	r3, [pc, #320]	; (800e2b0 <tcp_process+0x2bc>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	429a      	cmp	r2, r3
 800e174:	f040 80d5 	bne.w	800e322 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e178:	4b4e      	ldr	r3, [pc, #312]	; (800e2b4 <tcp_process+0x2c0>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e18a:	4b49      	ldr	r3, [pc, #292]	; (800e2b0 <tcp_process+0x2bc>)
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e192:	4b4c      	ldr	r3, [pc, #304]	; (800e2c4 <tcp_process+0x2d0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	89db      	ldrh	r3, [r3, #14]
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e1ac:	4b41      	ldr	r3, [pc, #260]	; (800e2b4 <tcp_process+0x2c0>)
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	1e5a      	subs	r2, r3, #1
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2204      	movs	r2, #4
 800e1ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	3304      	adds	r3, #4
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f004 fb1f 	bl	8012808 <ip4_route>
 800e1ca:	4601      	mov	r1, r0
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3304      	adds	r3, #4
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f7ff f88e 	bl	800d2f4 <tcp_eff_send_mss_netif>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	461a      	mov	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1e4:	009a      	lsls	r2, r3, #2
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800e1f0:	428b      	cmp	r3, r1
 800e1f2:	bf38      	it	cc
 800e1f4:	460b      	movcc	r3, r1
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d204      	bcs.n	800e204 <tcp_process+0x210>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	b29b      	uxth	r3, r3
 800e202:	e00d      	b.n	800e220 <tcp_process+0x22c>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e208:	005b      	lsls	r3, r3, #1
 800e20a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e20e:	4293      	cmp	r3, r2
 800e210:	d904      	bls.n	800e21c <tcp_process+0x228>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e216:	005b      	lsls	r3, r3, #1
 800e218:	b29b      	uxth	r3, r3
 800e21a:	e001      	b.n	800e220 <tcp_process+0x22c>
 800e21c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d106      	bne.n	800e23e <tcp_process+0x24a>
 800e230:	4b1b      	ldr	r3, [pc, #108]	; (800e2a0 <tcp_process+0x2ac>)
 800e232:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e236:	4924      	ldr	r1, [pc, #144]	; (800e2c8 <tcp_process+0x2d4>)
 800e238:	481b      	ldr	r0, [pc, #108]	; (800e2a8 <tcp_process+0x2b4>)
 800e23a:	f005 fe97 	bl	8013f6c <iprintf>
        --pcb->snd_queuelen;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e244:	3b01      	subs	r3, #1
 800e246:	b29a      	uxth	r2, r3
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e252:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d111      	bne.n	800e27e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e25e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <tcp_process+0x280>
 800e266:	4b0e      	ldr	r3, [pc, #56]	; (800e2a0 <tcp_process+0x2ac>)
 800e268:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e26c:	4917      	ldr	r1, [pc, #92]	; (800e2cc <tcp_process+0x2d8>)
 800e26e:	480e      	ldr	r0, [pc, #56]	; (800e2a8 <tcp_process+0x2b4>)
 800e270:	f005 fe7c 	bl	8013f6c <iprintf>
          pcb->unsent = rseg->next;
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e27c:	e003      	b.n	800e286 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e286:	69f8      	ldr	r0, [r7, #28]
 800e288:	f7fe fd3d 	bl	800cd06 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e290:	2b00      	cmp	r3, #0
 800e292:	d11d      	bne.n	800e2d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e29a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e29c:	e01f      	b.n	800e2de <tcp_process+0x2ea>
 800e29e:	bf00      	nop
 800e2a0:	080164e4 	.word	0x080164e4
 800e2a4:	0801671c 	.word	0x0801671c
 800e2a8:	08016530 	.word	0x08016530
 800e2ac:	20004a30 	.word	0x20004a30
 800e2b0:	20004a28 	.word	0x20004a28
 800e2b4:	20004a24 	.word	0x20004a24
 800e2b8:	08016738 	.word	0x08016738
 800e2bc:	20004a31 	.word	0x20004a31
 800e2c0:	2000b948 	.word	0x2000b948
 800e2c4:	20004a14 	.word	0x20004a14
 800e2c8:	08016758 	.word	0x08016758
 800e2cc:	08016770 	.word	0x08016770
        } else {
          pcb->rtime = 0;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00a      	beq.n	800e2fe <tcp_process+0x30a>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	6910      	ldr	r0, [r2, #16]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	6879      	ldr	r1, [r7, #4]
 800e2f6:	4798      	blx	r3
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	76bb      	strb	r3, [r7, #26]
 800e2fc:	e001      	b.n	800e302 <tcp_process+0x30e>
 800e2fe:	2300      	movs	r3, #0
 800e300:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e302:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e306:	f113 0f0d 	cmn.w	r3, #13
 800e30a:	d102      	bne.n	800e312 <tcp_process+0x31e>
          return ERR_ABRT;
 800e30c:	f06f 030c 	mvn.w	r3, #12
 800e310:	e250      	b.n	800e7b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	8b5b      	ldrh	r3, [r3, #26]
 800e316:	f043 0302 	orr.w	r3, r3, #2
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e320:	e23a      	b.n	800e798 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e322:	4b9d      	ldr	r3, [pc, #628]	; (800e598 <tcp_process+0x5a4>)
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	f003 0310 	and.w	r3, r3, #16
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 8234 	beq.w	800e798 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e330:	4b9a      	ldr	r3, [pc, #616]	; (800e59c <tcp_process+0x5a8>)
 800e332:	6819      	ldr	r1, [r3, #0]
 800e334:	4b9a      	ldr	r3, [pc, #616]	; (800e5a0 <tcp_process+0x5ac>)
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	461a      	mov	r2, r3
 800e33a:	4b9a      	ldr	r3, [pc, #616]	; (800e5a4 <tcp_process+0x5b0>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e340:	4b99      	ldr	r3, [pc, #612]	; (800e5a8 <tcp_process+0x5b4>)
 800e342:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e344:	885b      	ldrh	r3, [r3, #2]
 800e346:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e348:	4a97      	ldr	r2, [pc, #604]	; (800e5a8 <tcp_process+0x5b4>)
 800e34a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e34c:	8812      	ldrh	r2, [r2, #0]
 800e34e:	b292      	uxth	r2, r2
 800e350:	9202      	str	r2, [sp, #8]
 800e352:	9301      	str	r3, [sp, #4]
 800e354:	4b95      	ldr	r3, [pc, #596]	; (800e5ac <tcp_process+0x5b8>)
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4b95      	ldr	r3, [pc, #596]	; (800e5b0 <tcp_process+0x5bc>)
 800e35a:	4602      	mov	r2, r0
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f002 fc83 	bl	8010c68 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e368:	2b05      	cmp	r3, #5
 800e36a:	f200 8215 	bhi.w	800e798 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f002 fa4d 	bl	8010814 <tcp_rexmit_rto>
      break;
 800e37a:	e20d      	b.n	800e798 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e37c:	4b86      	ldr	r3, [pc, #536]	; (800e598 <tcp_process+0x5a4>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 0310 	and.w	r3, r3, #16
 800e384:	2b00      	cmp	r3, #0
 800e386:	f000 80a1 	beq.w	800e4cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e38a:	4b84      	ldr	r3, [pc, #528]	; (800e59c <tcp_process+0x5a8>)
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	3b01      	subs	r3, #1
 800e396:	2b00      	cmp	r3, #0
 800e398:	db7e      	blt.n	800e498 <tcp_process+0x4a4>
 800e39a:	4b80      	ldr	r3, [pc, #512]	; (800e59c <tcp_process+0x5a8>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	dc77      	bgt.n	800e498 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d102      	bne.n	800e3bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e3b6:	23fa      	movs	r3, #250	; 0xfa
 800e3b8:	76bb      	strb	r3, [r7, #26]
 800e3ba:	e01d      	b.n	800e3f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d106      	bne.n	800e3d4 <tcp_process+0x3e0>
 800e3c6:	4b7b      	ldr	r3, [pc, #492]	; (800e5b4 <tcp_process+0x5c0>)
 800e3c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e3cc:	497a      	ldr	r1, [pc, #488]	; (800e5b8 <tcp_process+0x5c4>)
 800e3ce:	487b      	ldr	r0, [pc, #492]	; (800e5bc <tcp_process+0x5c8>)
 800e3d0:	f005 fdcc 	bl	8013f6c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00a      	beq.n	800e3f4 <tcp_process+0x400>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	687a      	ldr	r2, [r7, #4]
 800e3e6:	6910      	ldr	r0, [r2, #16]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	6879      	ldr	r1, [r7, #4]
 800e3ec:	4798      	blx	r3
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	76bb      	strb	r3, [r7, #26]
 800e3f2:	e001      	b.n	800e3f8 <tcp_process+0x404>
 800e3f4:	23f0      	movs	r3, #240	; 0xf0
 800e3f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e3f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00a      	beq.n	800e416 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e400:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e404:	f113 0f0d 	cmn.w	r3, #13
 800e408:	d002      	beq.n	800e410 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7fd ff90 	bl	800c330 <tcp_abort>
            }
            return ERR_ABRT;
 800e410:	f06f 030c 	mvn.w	r3, #12
 800e414:	e1ce      	b.n	800e7b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 fae0 	bl	800e9dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e41c:	4b68      	ldr	r3, [pc, #416]	; (800e5c0 <tcp_process+0x5cc>)
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d005      	beq.n	800e430 <tcp_process+0x43c>
            recv_acked--;
 800e424:	4b66      	ldr	r3, [pc, #408]	; (800e5c0 <tcp_process+0x5cc>)
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	3b01      	subs	r3, #1
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	4b64      	ldr	r3, [pc, #400]	; (800e5c0 <tcp_process+0x5cc>)
 800e42e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e434:	009a      	lsls	r2, r3, #2
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e43a:	005b      	lsls	r3, r3, #1
 800e43c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e440:	428b      	cmp	r3, r1
 800e442:	bf38      	it	cc
 800e444:	460b      	movcc	r3, r1
 800e446:	429a      	cmp	r2, r3
 800e448:	d204      	bcs.n	800e454 <tcp_process+0x460>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	b29b      	uxth	r3, r3
 800e452:	e00d      	b.n	800e470 <tcp_process+0x47c>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e45e:	4293      	cmp	r3, r2
 800e460:	d904      	bls.n	800e46c <tcp_process+0x478>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e466:	005b      	lsls	r3, r3, #1
 800e468:	b29b      	uxth	r3, r3
 800e46a:	e001      	b.n	800e470 <tcp_process+0x47c>
 800e46c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e476:	4b53      	ldr	r3, [pc, #332]	; (800e5c4 <tcp_process+0x5d0>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	f003 0320 	and.w	r3, r3, #32
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d037      	beq.n	800e4f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	8b5b      	ldrh	r3, [r3, #26]
 800e486:	f043 0302 	orr.w	r3, r3, #2
 800e48a:	b29a      	uxth	r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2207      	movs	r2, #7
 800e494:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e496:	e02c      	b.n	800e4f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e498:	4b40      	ldr	r3, [pc, #256]	; (800e59c <tcp_process+0x5a8>)
 800e49a:	6819      	ldr	r1, [r3, #0]
 800e49c:	4b40      	ldr	r3, [pc, #256]	; (800e5a0 <tcp_process+0x5ac>)
 800e49e:	881b      	ldrh	r3, [r3, #0]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	4b40      	ldr	r3, [pc, #256]	; (800e5a4 <tcp_process+0x5b0>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4a8:	4b3f      	ldr	r3, [pc, #252]	; (800e5a8 <tcp_process+0x5b4>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4ac:	885b      	ldrh	r3, [r3, #2]
 800e4ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4b0:	4a3d      	ldr	r2, [pc, #244]	; (800e5a8 <tcp_process+0x5b4>)
 800e4b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4b4:	8812      	ldrh	r2, [r2, #0]
 800e4b6:	b292      	uxth	r2, r2
 800e4b8:	9202      	str	r2, [sp, #8]
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	4b3b      	ldr	r3, [pc, #236]	; (800e5ac <tcp_process+0x5b8>)
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	4b3b      	ldr	r3, [pc, #236]	; (800e5b0 <tcp_process+0x5bc>)
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f002 fbcf 	bl	8010c68 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e4ca:	e167      	b.n	800e79c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e4cc:	4b32      	ldr	r3, [pc, #200]	; (800e598 <tcp_process+0x5a4>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	f003 0302 	and.w	r3, r3, #2
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	f000 8161 	beq.w	800e79c <tcp_process+0x7a8>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4de:	1e5a      	subs	r2, r3, #1
 800e4e0:	4b30      	ldr	r3, [pc, #192]	; (800e5a4 <tcp_process+0x5b0>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	f040 8159 	bne.w	800e79c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f002 f9b4 	bl	8010858 <tcp_rexmit>
      break;
 800e4f0:	e154      	b.n	800e79c <tcp_process+0x7a8>
 800e4f2:	e153      	b.n	800e79c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 fa71 	bl	800e9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e4fa:	4b32      	ldr	r3, [pc, #200]	; (800e5c4 <tcp_process+0x5d0>)
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	f003 0320 	and.w	r3, r3, #32
 800e502:	2b00      	cmp	r3, #0
 800e504:	f000 814c 	beq.w	800e7a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	8b5b      	ldrh	r3, [r3, #26]
 800e50c:	f043 0302 	orr.w	r3, r3, #2
 800e510:	b29a      	uxth	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2207      	movs	r2, #7
 800e51a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e51c:	e140      	b.n	800e7a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 fa5c 	bl	800e9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e524:	4b27      	ldr	r3, [pc, #156]	; (800e5c4 <tcp_process+0x5d0>)
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	f003 0320 	and.w	r3, r3, #32
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d071      	beq.n	800e614 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e530:	4b19      	ldr	r3, [pc, #100]	; (800e598 <tcp_process+0x5a4>)
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	f003 0310 	and.w	r3, r3, #16
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d060      	beq.n	800e5fe <tcp_process+0x60a>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e540:	4b16      	ldr	r3, [pc, #88]	; (800e59c <tcp_process+0x5a8>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	429a      	cmp	r2, r3
 800e546:	d15a      	bne.n	800e5fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d156      	bne.n	800e5fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	8b5b      	ldrh	r3, [r3, #26]
 800e554:	f043 0302 	orr.w	r3, r3, #2
 800e558:	b29a      	uxth	r2, r3
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7fe fdbe 	bl	800d0e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e564:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <tcp_process+0x5d4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d105      	bne.n	800e57a <tcp_process+0x586>
 800e56e:	4b16      	ldr	r3, [pc, #88]	; (800e5c8 <tcp_process+0x5d4>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	4a14      	ldr	r2, [pc, #80]	; (800e5c8 <tcp_process+0x5d4>)
 800e576:	6013      	str	r3, [r2, #0]
 800e578:	e02e      	b.n	800e5d8 <tcp_process+0x5e4>
 800e57a:	4b13      	ldr	r3, [pc, #76]	; (800e5c8 <tcp_process+0x5d4>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	617b      	str	r3, [r7, #20]
 800e580:	e027      	b.n	800e5d2 <tcp_process+0x5de>
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d11f      	bne.n	800e5cc <tcp_process+0x5d8>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	68da      	ldr	r2, [r3, #12]
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	60da      	str	r2, [r3, #12]
 800e594:	e020      	b.n	800e5d8 <tcp_process+0x5e4>
 800e596:	bf00      	nop
 800e598:	20004a30 	.word	0x20004a30
 800e59c:	20004a28 	.word	0x20004a28
 800e5a0:	20004a2e 	.word	0x20004a2e
 800e5a4:	20004a24 	.word	0x20004a24
 800e5a8:	20004a14 	.word	0x20004a14
 800e5ac:	20008240 	.word	0x20008240
 800e5b0:	20008244 	.word	0x20008244
 800e5b4:	080164e4 	.word	0x080164e4
 800e5b8:	08016784 	.word	0x08016784
 800e5bc:	08016530 	.word	0x08016530
 800e5c0:	20004a2c 	.word	0x20004a2c
 800e5c4:	20004a31 	.word	0x20004a31
 800e5c8:	2000b944 	.word	0x2000b944
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	617b      	str	r3, [r7, #20]
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1d4      	bne.n	800e582 <tcp_process+0x58e>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	60da      	str	r2, [r3, #12]
 800e5de:	4b77      	ldr	r3, [pc, #476]	; (800e7bc <tcp_process+0x7c8>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	220a      	movs	r2, #10
 800e5e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e5ea:	4b75      	ldr	r3, [pc, #468]	; (800e7c0 <tcp_process+0x7cc>)
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	60da      	str	r2, [r3, #12]
 800e5f2:	4a73      	ldr	r2, [pc, #460]	; (800e7c0 <tcp_process+0x7cc>)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6013      	str	r3, [r2, #0]
 800e5f8:	f002 fcf8 	bl	8010fec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e5fc:	e0d2      	b.n	800e7a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	8b5b      	ldrh	r3, [r3, #26]
 800e602:	f043 0302 	orr.w	r3, r3, #2
 800e606:	b29a      	uxth	r2, r3
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2208      	movs	r2, #8
 800e610:	751a      	strb	r2, [r3, #20]
      break;
 800e612:	e0c7      	b.n	800e7a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e614:	4b6b      	ldr	r3, [pc, #428]	; (800e7c4 <tcp_process+0x7d0>)
 800e616:	781b      	ldrb	r3, [r3, #0]
 800e618:	f003 0310 	and.w	r3, r3, #16
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f000 80c1 	beq.w	800e7a4 <tcp_process+0x7b0>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e626:	4b68      	ldr	r3, [pc, #416]	; (800e7c8 <tcp_process+0x7d4>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	f040 80ba 	bne.w	800e7a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e634:	2b00      	cmp	r3, #0
 800e636:	f040 80b5 	bne.w	800e7a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2206      	movs	r2, #6
 800e63e:	751a      	strb	r2, [r3, #20]
      break;
 800e640:	e0b0      	b.n	800e7a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f9ca 	bl	800e9dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e648:	4b60      	ldr	r3, [pc, #384]	; (800e7cc <tcp_process+0x7d8>)
 800e64a:	781b      	ldrb	r3, [r3, #0]
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	2b00      	cmp	r3, #0
 800e652:	f000 80a9 	beq.w	800e7a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	8b5b      	ldrh	r3, [r3, #26]
 800e65a:	f043 0302 	orr.w	r3, r3, #2
 800e65e:	b29a      	uxth	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7fe fd3b 	bl	800d0e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e66a:	4b59      	ldr	r3, [pc, #356]	; (800e7d0 <tcp_process+0x7dc>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	429a      	cmp	r2, r3
 800e672:	d105      	bne.n	800e680 <tcp_process+0x68c>
 800e674:	4b56      	ldr	r3, [pc, #344]	; (800e7d0 <tcp_process+0x7dc>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	4a55      	ldr	r2, [pc, #340]	; (800e7d0 <tcp_process+0x7dc>)
 800e67c:	6013      	str	r3, [r2, #0]
 800e67e:	e013      	b.n	800e6a8 <tcp_process+0x6b4>
 800e680:	4b53      	ldr	r3, [pc, #332]	; (800e7d0 <tcp_process+0x7dc>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	613b      	str	r3, [r7, #16]
 800e686:	e00c      	b.n	800e6a2 <tcp_process+0x6ae>
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d104      	bne.n	800e69c <tcp_process+0x6a8>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	60da      	str	r2, [r3, #12]
 800e69a:	e005      	b.n	800e6a8 <tcp_process+0x6b4>
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	613b      	str	r3, [r7, #16]
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1ef      	bne.n	800e688 <tcp_process+0x694>
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	60da      	str	r2, [r3, #12]
 800e6ae:	4b43      	ldr	r3, [pc, #268]	; (800e7bc <tcp_process+0x7c8>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	220a      	movs	r2, #10
 800e6b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e6ba:	4b41      	ldr	r3, [pc, #260]	; (800e7c0 <tcp_process+0x7cc>)
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	60da      	str	r2, [r3, #12]
 800e6c2:	4a3f      	ldr	r2, [pc, #252]	; (800e7c0 <tcp_process+0x7cc>)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	f002 fc90 	bl	8010fec <tcp_timer_needed>
      }
      break;
 800e6cc:	e06c      	b.n	800e7a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f984 	bl	800e9dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e6d4:	4b3b      	ldr	r3, [pc, #236]	; (800e7c4 <tcp_process+0x7d0>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d065      	beq.n	800e7ac <tcp_process+0x7b8>
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6e4:	4b38      	ldr	r3, [pc, #224]	; (800e7c8 <tcp_process+0x7d4>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d15f      	bne.n	800e7ac <tcp_process+0x7b8>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d15b      	bne.n	800e7ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f7fe fcf3 	bl	800d0e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e6fa:	4b35      	ldr	r3, [pc, #212]	; (800e7d0 <tcp_process+0x7dc>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d105      	bne.n	800e710 <tcp_process+0x71c>
 800e704:	4b32      	ldr	r3, [pc, #200]	; (800e7d0 <tcp_process+0x7dc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	4a31      	ldr	r2, [pc, #196]	; (800e7d0 <tcp_process+0x7dc>)
 800e70c:	6013      	str	r3, [r2, #0]
 800e70e:	e013      	b.n	800e738 <tcp_process+0x744>
 800e710:	4b2f      	ldr	r3, [pc, #188]	; (800e7d0 <tcp_process+0x7dc>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	60fb      	str	r3, [r7, #12]
 800e716:	e00c      	b.n	800e732 <tcp_process+0x73e>
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d104      	bne.n	800e72c <tcp_process+0x738>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68da      	ldr	r2, [r3, #12]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	60da      	str	r2, [r3, #12]
 800e72a:	e005      	b.n	800e738 <tcp_process+0x744>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68db      	ldr	r3, [r3, #12]
 800e730:	60fb      	str	r3, [r7, #12]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d1ef      	bne.n	800e718 <tcp_process+0x724>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2200      	movs	r2, #0
 800e73c:	60da      	str	r2, [r3, #12]
 800e73e:	4b1f      	ldr	r3, [pc, #124]	; (800e7bc <tcp_process+0x7c8>)
 800e740:	2201      	movs	r2, #1
 800e742:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	220a      	movs	r2, #10
 800e748:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e74a:	4b1d      	ldr	r3, [pc, #116]	; (800e7c0 <tcp_process+0x7cc>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	60da      	str	r2, [r3, #12]
 800e752:	4a1b      	ldr	r2, [pc, #108]	; (800e7c0 <tcp_process+0x7cc>)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	f002 fc48 	bl	8010fec <tcp_timer_needed>
      }
      break;
 800e75c:	e026      	b.n	800e7ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f93c 	bl	800e9dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e764:	4b17      	ldr	r3, [pc, #92]	; (800e7c4 <tcp_process+0x7d0>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	f003 0310 	and.w	r3, r3, #16
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d01f      	beq.n	800e7b0 <tcp_process+0x7bc>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e774:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <tcp_process+0x7d4>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d119      	bne.n	800e7b0 <tcp_process+0x7bc>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e780:	2b00      	cmp	r3, #0
 800e782:	d115      	bne.n	800e7b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e784:	4b11      	ldr	r3, [pc, #68]	; (800e7cc <tcp_process+0x7d8>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f043 0310 	orr.w	r3, r3, #16
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	4b0f      	ldr	r3, [pc, #60]	; (800e7cc <tcp_process+0x7d8>)
 800e790:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e792:	e00d      	b.n	800e7b0 <tcp_process+0x7bc>
    default:
      break;
 800e794:	bf00      	nop
 800e796:	e00c      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e798:	bf00      	nop
 800e79a:	e00a      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e79c:	bf00      	nop
 800e79e:	e008      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e7a0:	bf00      	nop
 800e7a2:	e006      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e7a4:	bf00      	nop
 800e7a6:	e004      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e7a8:	bf00      	nop
 800e7aa:	e002      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e7ac:	bf00      	nop
 800e7ae:	e000      	b.n	800e7b2 <tcp_process+0x7be>
      break;
 800e7b0:	bf00      	nop
  }
  return ERR_OK;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3724      	adds	r7, #36	; 0x24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd90      	pop	{r4, r7, pc}
 800e7bc:	2000b940 	.word	0x2000b940
 800e7c0:	2000b954 	.word	0x2000b954
 800e7c4:	20004a30 	.word	0x20004a30
 800e7c8:	20004a28 	.word	0x20004a28
 800e7cc:	20004a31 	.word	0x20004a31
 800e7d0:	2000b944 	.word	0x2000b944

0800e7d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e7d4:	b590      	push	{r4, r7, lr}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d106      	bne.n	800e7f2 <tcp_oos_insert_segment+0x1e>
 800e7e4:	4b3b      	ldr	r3, [pc, #236]	; (800e8d4 <tcp_oos_insert_segment+0x100>)
 800e7e6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e7ea:	493b      	ldr	r1, [pc, #236]	; (800e8d8 <tcp_oos_insert_segment+0x104>)
 800e7ec:	483b      	ldr	r0, [pc, #236]	; (800e8dc <tcp_oos_insert_segment+0x108>)
 800e7ee:	f005 fbbd 	bl	8013f6c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	899b      	ldrh	r3, [r3, #12]
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fb fc58 	bl	800a0b0 <lwip_htons>
 800e800:	4603      	mov	r3, r0
 800e802:	b2db      	uxtb	r3, r3
 800e804:	f003 0301 	and.w	r3, r3, #1
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d028      	beq.n	800e85e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e80c:	6838      	ldr	r0, [r7, #0]
 800e80e:	f7fe fa65 	bl	800ccdc <tcp_segs_free>
    next = NULL;
 800e812:	2300      	movs	r3, #0
 800e814:	603b      	str	r3, [r7, #0]
 800e816:	e056      	b.n	800e8c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	b29b      	uxth	r3, r3
 800e820:	4618      	mov	r0, r3
 800e822:	f7fb fc45 	bl	800a0b0 <lwip_htons>
 800e826:	4603      	mov	r3, r0
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00d      	beq.n	800e84e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	899b      	ldrh	r3, [r3, #12]
 800e838:	b29c      	uxth	r4, r3
 800e83a:	2001      	movs	r0, #1
 800e83c:	f7fb fc38 	bl	800a0b0 <lwip_htons>
 800e840:	4603      	mov	r3, r0
 800e842:	461a      	mov	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	4322      	orrs	r2, r4
 800e84a:	b292      	uxth	r2, r2
 800e84c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e858:	68f8      	ldr	r0, [r7, #12]
 800e85a:	f7fe fa54 	bl	800cd06 <tcp_seg_free>
    while (next &&
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d00e      	beq.n	800e882 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	891b      	ldrh	r3, [r3, #8]
 800e868:	461a      	mov	r2, r3
 800e86a:	4b1d      	ldr	r3, [pc, #116]	; (800e8e0 <tcp_oos_insert_segment+0x10c>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	441a      	add	r2, r3
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	6839      	ldr	r1, [r7, #0]
 800e878:	8909      	ldrh	r1, [r1, #8]
 800e87a:	440b      	add	r3, r1
 800e87c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e87e:	2b00      	cmp	r3, #0
 800e880:	daca      	bge.n	800e818 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01e      	beq.n	800e8c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	891b      	ldrh	r3, [r3, #8]
 800e88c:	461a      	mov	r2, r3
 800e88e:	4b14      	ldr	r3, [pc, #80]	; (800e8e0 <tcp_oos_insert_segment+0x10c>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	441a      	add	r2, r3
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	dd12      	ble.n	800e8c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	4b0d      	ldr	r3, [pc, #52]	; (800e8e0 <tcp_oos_insert_segment+0x10c>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	891b      	ldrh	r3, [r3, #8]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4610      	mov	r0, r2
 800e8c2:	f7fc fe1b 	bl	800b4fc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	601a      	str	r2, [r3, #0]
}
 800e8cc:	bf00      	nop
 800e8ce:	3714      	adds	r7, #20
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}
 800e8d4:	080164e4 	.word	0x080164e4
 800e8d8:	080167a4 	.word	0x080167a4
 800e8dc:	08016530 	.word	0x08016530
 800e8e0:	20004a24 	.word	0x20004a24

0800e8e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e8e4:	b5b0      	push	{r4, r5, r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e8f2:	e03e      	b.n	800e972 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	685b      	ldr	r3, [r3, #4]
 800e902:	4618      	mov	r0, r3
 800e904:	f7fd f80e 	bl	800b924 <pbuf_clen>
 800e908:	4603      	mov	r3, r0
 800e90a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e912:	8a7a      	ldrh	r2, [r7, #18]
 800e914:	429a      	cmp	r2, r3
 800e916:	d906      	bls.n	800e926 <tcp_free_acked_segments+0x42>
 800e918:	4b2a      	ldr	r3, [pc, #168]	; (800e9c4 <tcp_free_acked_segments+0xe0>)
 800e91a:	f240 4257 	movw	r2, #1111	; 0x457
 800e91e:	492a      	ldr	r1, [pc, #168]	; (800e9c8 <tcp_free_acked_segments+0xe4>)
 800e920:	482a      	ldr	r0, [pc, #168]	; (800e9cc <tcp_free_acked_segments+0xe8>)
 800e922:	f005 fb23 	bl	8013f6c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e92c:	8a7b      	ldrh	r3, [r7, #18]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	b29a      	uxth	r2, r3
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	891a      	ldrh	r2, [r3, #8]
 800e93c:	4b24      	ldr	r3, [pc, #144]	; (800e9d0 <tcp_free_acked_segments+0xec>)
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	4413      	add	r3, r2
 800e942:	b29a      	uxth	r2, r3
 800e944:	4b22      	ldr	r3, [pc, #136]	; (800e9d0 <tcp_free_acked_segments+0xec>)
 800e946:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e948:	6978      	ldr	r0, [r7, #20]
 800e94a:	f7fe f9dc 	bl	800cd06 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e954:	2b00      	cmp	r3, #0
 800e956:	d00c      	beq.n	800e972 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d109      	bne.n	800e972 <tcp_free_acked_segments+0x8e>
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <tcp_free_acked_segments+0x8e>
 800e964:	4b17      	ldr	r3, [pc, #92]	; (800e9c4 <tcp_free_acked_segments+0xe0>)
 800e966:	f240 4261 	movw	r2, #1121	; 0x461
 800e96a:	491a      	ldr	r1, [pc, #104]	; (800e9d4 <tcp_free_acked_segments+0xf0>)
 800e96c:	4817      	ldr	r0, [pc, #92]	; (800e9cc <tcp_free_acked_segments+0xe8>)
 800e96e:	f005 fafd 	bl	8013f6c <iprintf>
  while (seg_list != NULL &&
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d020      	beq.n	800e9ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	685b      	ldr	r3, [r3, #4]
 800e97e:	4618      	mov	r0, r3
 800e980:	f7fb fbab 	bl	800a0da <lwip_htonl>
 800e984:	4604      	mov	r4, r0
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	891b      	ldrh	r3, [r3, #8]
 800e98a:	461d      	mov	r5, r3
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	899b      	ldrh	r3, [r3, #12]
 800e992:	b29b      	uxth	r3, r3
 800e994:	4618      	mov	r0, r3
 800e996:	f7fb fb8b 	bl	800a0b0 <lwip_htons>
 800e99a:	4603      	mov	r3, r0
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0303 	and.w	r3, r3, #3
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <tcp_free_acked_segments+0xc6>
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e000      	b.n	800e9ac <tcp_free_acked_segments+0xc8>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	442b      	add	r3, r5
 800e9ae:	18e2      	adds	r2, r4, r3
 800e9b0:	4b09      	ldr	r3, [pc, #36]	; (800e9d8 <tcp_free_acked_segments+0xf4>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd9c      	ble.n	800e8f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e9ba:	68bb      	ldr	r3, [r7, #8]
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3718      	adds	r7, #24
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e9c4:	080164e4 	.word	0x080164e4
 800e9c8:	080167cc 	.word	0x080167cc
 800e9cc:	08016530 	.word	0x08016530
 800e9d0:	20004a2c 	.word	0x20004a2c
 800e9d4:	080167f4 	.word	0x080167f4
 800e9d8:	20004a28 	.word	0x20004a28

0800e9dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e9dc:	b5b0      	push	{r4, r5, r7, lr}
 800e9de:	b094      	sub	sp, #80	; 0x50
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d106      	bne.n	800e9fc <tcp_receive+0x20>
 800e9ee:	4ba6      	ldr	r3, [pc, #664]	; (800ec88 <tcp_receive+0x2ac>)
 800e9f0:	f240 427b 	movw	r2, #1147	; 0x47b
 800e9f4:	49a5      	ldr	r1, [pc, #660]	; (800ec8c <tcp_receive+0x2b0>)
 800e9f6:	48a6      	ldr	r0, [pc, #664]	; (800ec90 <tcp_receive+0x2b4>)
 800e9f8:	f005 fab8 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ea00:	2b03      	cmp	r3, #3
 800ea02:	d806      	bhi.n	800ea12 <tcp_receive+0x36>
 800ea04:	4ba0      	ldr	r3, [pc, #640]	; (800ec88 <tcp_receive+0x2ac>)
 800ea06:	f240 427c 	movw	r2, #1148	; 0x47c
 800ea0a:	49a2      	ldr	r1, [pc, #648]	; (800ec94 <tcp_receive+0x2b8>)
 800ea0c:	48a0      	ldr	r0, [pc, #640]	; (800ec90 <tcp_receive+0x2b4>)
 800ea0e:	f005 faad 	bl	8013f6c <iprintf>

  if (flags & TCP_ACK) {
 800ea12:	4ba1      	ldr	r3, [pc, #644]	; (800ec98 <tcp_receive+0x2bc>)
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	f003 0310 	and.w	r3, r3, #16
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 8263 	beq.w	800eee6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea26:	461a      	mov	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea2c:	4413      	add	r3, r2
 800ea2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea34:	4b99      	ldr	r3, [pc, #612]	; (800ec9c <tcp_receive+0x2c0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	db1b      	blt.n	800ea76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea42:	4b96      	ldr	r3, [pc, #600]	; (800ec9c <tcp_receive+0x2c0>)
 800ea44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d106      	bne.n	800ea58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea4e:	4b94      	ldr	r3, [pc, #592]	; (800eca0 <tcp_receive+0x2c4>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	db0e      	blt.n	800ea76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea5c:	4b90      	ldr	r3, [pc, #576]	; (800eca0 <tcp_receive+0x2c4>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d125      	bne.n	800eab0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ea64:	4b8f      	ldr	r3, [pc, #572]	; (800eca4 <tcp_receive+0x2c8>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	89db      	ldrh	r3, [r3, #14]
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d91c      	bls.n	800eab0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ea76:	4b8b      	ldr	r3, [pc, #556]	; (800eca4 <tcp_receive+0x2c8>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	89db      	ldrh	r3, [r3, #14]
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d205      	bcs.n	800eaa0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eaa0:	4b7e      	ldr	r3, [pc, #504]	; (800ec9c <tcp_receive+0x2c0>)
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800eaa8:	4b7d      	ldr	r3, [pc, #500]	; (800eca0 <tcp_receive+0x2c4>)
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eab0:	4b7b      	ldr	r3, [pc, #492]	; (800eca0 <tcp_receive+0x2c4>)
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	dc58      	bgt.n	800eb70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eabe:	4b7a      	ldr	r3, [pc, #488]	; (800eca8 <tcp_receive+0x2cc>)
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d14b      	bne.n	800eb5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ead0:	4413      	add	r3, r2
 800ead2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d142      	bne.n	800eb5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eade:	2b00      	cmp	r3, #0
 800eae0:	db3d      	blt.n	800eb5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eae6:	4b6e      	ldr	r3, [pc, #440]	; (800eca0 <tcp_receive+0x2c4>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d137      	bne.n	800eb5e <tcp_receive+0x182>
              found_dupack = 1;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eaf8:	2bff      	cmp	r3, #255	; 0xff
 800eafa:	d007      	beq.n	800eb0c <tcp_receive+0x130>
                ++pcb->dupacks;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb02:	3301      	adds	r3, #1
 800eb04:	b2da      	uxtb	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	d91b      	bls.n	800eb4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb20:	4413      	add	r3, r2
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d30a      	bcc.n	800eb44 <tcp_receive+0x168>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb38:	4413      	add	r3, r2
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb42:	e004      	b.n	800eb4e <tcp_receive+0x172>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb54:	2b02      	cmp	r3, #2
 800eb56:	d902      	bls.n	800eb5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f001 fee9 	bl	8010930 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800eb5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	f040 8160 	bne.w	800ee26 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eb6e:	e15a      	b.n	800ee26 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eb70:	4b4b      	ldr	r3, [pc, #300]	; (800eca0 <tcp_receive+0x2c4>)
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb78:	1ad3      	subs	r3, r2, r3
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	f2c0 814d 	blt.w	800ee1c <tcp_receive+0x440>
 800eb82:	4b47      	ldr	r3, [pc, #284]	; (800eca0 <tcp_receive+0x2c4>)
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb8a:	1ad3      	subs	r3, r2, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f300 8145 	bgt.w	800ee1c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	8b5b      	ldrh	r3, [r3, #26]
 800eb96:	f003 0304 	and.w	r3, r3, #4
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d010      	beq.n	800ebc0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	8b5b      	ldrh	r3, [r3, #26]
 800eba2:	f023 0304 	bic.w	r3, r3, #4
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ebce:	10db      	asrs	r3, r3, #3
 800ebd0:	b21b      	sxth	r3, r3
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	4413      	add	r3, r2
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	b21a      	sxth	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ebe8:	4b2d      	ldr	r3, [pc, #180]	; (800eca0 <tcp_receive+0x2c4>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	b29a      	uxth	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ec00:	4b27      	ldr	r3, [pc, #156]	; (800eca0 <tcp_receive+0x2c4>)
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	7d1b      	ldrb	r3, [r3, #20]
 800ec0c:	2b03      	cmp	r3, #3
 800ec0e:	f240 8096 	bls.w	800ed3e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d244      	bcs.n	800ecac <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	8b5b      	ldrh	r3, [r3, #26]
 800ec26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <tcp_receive+0x256>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e000      	b.n	800ec34 <tcp_receive+0x258>
 800ec32:	2302      	movs	r3, #2
 800ec34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ec38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ec42:	fb12 f303 	smulbb	r3, r2, r3
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec4a:	4293      	cmp	r3, r2
 800ec4c:	bf28      	it	cs
 800ec4e:	4613      	movcs	r3, r2
 800ec50:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ec58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec5a:	4413      	add	r3, r2
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d309      	bcc.n	800ec7c <tcp_receive+0x2a0>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ec6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec70:	4413      	add	r3, r2
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ec7a:	e060      	b.n	800ed3e <tcp_receive+0x362>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ec86:	e05a      	b.n	800ed3e <tcp_receive+0x362>
 800ec88:	080164e4 	.word	0x080164e4
 800ec8c:	08016814 	.word	0x08016814
 800ec90:	08016530 	.word	0x08016530
 800ec94:	08016830 	.word	0x08016830
 800ec98:	20004a30 	.word	0x20004a30
 800ec9c:	20004a24 	.word	0x20004a24
 800eca0:	20004a28 	.word	0x20004a28
 800eca4:	20004a14 	.word	0x20004a14
 800eca8:	20004a2e 	.word	0x20004a2e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ecb2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ecb4:	4413      	add	r3, r2
 800ecb6:	b29a      	uxth	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d309      	bcc.n	800ecd6 <tcp_receive+0x2fa>
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ecc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ecca:	4413      	add	r3, r2
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ecd4:	e004      	b.n	800ece0 <tcp_receive+0x304>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecec:	429a      	cmp	r2, r3
 800ecee:	d326      	bcc.n	800ed3e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed10:	4413      	add	r3, r2
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d30a      	bcc.n	800ed34 <tcp_receive+0x358>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed28:	4413      	add	r3, r2
 800ed2a:	b29a      	uxth	r2, r3
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed32:	e004      	b.n	800ed3e <tcp_receive+0x362>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed46:	4a98      	ldr	r2, [pc, #608]	; (800efa8 <tcp_receive+0x5cc>)
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f7ff fdcb 	bl	800e8e4 <tcp_free_acked_segments>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed5c:	4a93      	ldr	r2, [pc, #588]	; (800efac <tcp_receive+0x5d0>)
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff fdc0 	bl	800e8e4 <tcp_free_acked_segments>
 800ed64:	4602      	mov	r2, r0
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d104      	bne.n	800ed7c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed78:	861a      	strh	r2, [r3, #48]	; 0x30
 800ed7a:	e002      	b.n	800ed82 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d103      	bne.n	800ed98 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ed9e:	4b84      	ldr	r3, [pc, #528]	; (800efb0 <tcp_receive+0x5d4>)
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	4413      	add	r3, r2
 800eda4:	b29a      	uxth	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	8b5b      	ldrh	r3, [r3, #26]
 800edb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d035      	beq.n	800ee24 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d118      	bne.n	800edf2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00c      	beq.n	800ede2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fb f980 	bl	800a0da <lwip_htonl>
 800edda:	4603      	mov	r3, r0
 800eddc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800edde:	2b00      	cmp	r3, #0
 800ede0:	dc20      	bgt.n	800ee24 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	8b5b      	ldrh	r3, [r3, #26]
 800ede6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800edea:	b29a      	uxth	r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edf0:	e018      	b.n	800ee24 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fb f96b 	bl	800a0da <lwip_htonl>
 800ee04:	4603      	mov	r3, r0
 800ee06:	1ae3      	subs	r3, r4, r3
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	dc0b      	bgt.n	800ee24 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	8b5b      	ldrh	r3, [r3, #26]
 800ee10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee1a:	e003      	b.n	800ee24 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f001 ff75 	bl	8010d0c <tcp_send_empty_ack>
 800ee22:	e000      	b.n	800ee26 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee24:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d05b      	beq.n	800eee6 <tcp_receive+0x50a>
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee32:	4b60      	ldr	r3, [pc, #384]	; (800efb4 <tcp_receive+0x5d8>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	1ad3      	subs	r3, r2, r3
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	da54      	bge.n	800eee6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ee3c:	4b5e      	ldr	r3, [pc, #376]	; (800efb8 <tcp_receive+0x5dc>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	1ad3      	subs	r3, r2, r3
 800ee4a:	b29b      	uxth	r3, r3
 800ee4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ee50:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ee5a:	10db      	asrs	r3, r3, #3
 800ee5c:	b21b      	sxth	r3, r3
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	b29b      	uxth	r3, r3
 800ee64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ee74:	4413      	add	r3, r2
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	b21a      	sxth	r2, r3
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ee7e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	da05      	bge.n	800ee92 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ee86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ee8a:	425b      	negs	r3, r3
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ee92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee9c:	109b      	asrs	r3, r3, #2
 800ee9e:	b21b      	sxth	r3, r3
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eeb6:	4413      	add	r3, r2
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	b21a      	sxth	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eec6:	10db      	asrs	r3, r3, #3
 800eec8:	b21b      	sxth	r3, r3
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	4413      	add	r3, r2
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	b21a      	sxth	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800eee6:	4b35      	ldr	r3, [pc, #212]	; (800efbc <tcp_receive+0x5e0>)
 800eee8:	881b      	ldrh	r3, [r3, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f000 84e1 	beq.w	800f8b2 <tcp_receive+0xed6>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	7d1b      	ldrb	r3, [r3, #20]
 800eef4:	2b06      	cmp	r3, #6
 800eef6:	f200 84dc 	bhi.w	800f8b2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eefe:	4b30      	ldr	r3, [pc, #192]	; (800efc0 <tcp_receive+0x5e4>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	3b01      	subs	r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f2c0 808e 	blt.w	800f028 <tcp_receive+0x64c>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef10:	4b2a      	ldr	r3, [pc, #168]	; (800efbc <tcp_receive+0x5e0>)
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	4619      	mov	r1, r3
 800ef16:	4b2a      	ldr	r3, [pc, #168]	; (800efc0 <tcp_receive+0x5e4>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	440b      	add	r3, r1
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	3301      	adds	r3, #1
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	f300 8081 	bgt.w	800f028 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ef26:	4b27      	ldr	r3, [pc, #156]	; (800efc4 <tcp_receive+0x5e8>)
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef30:	4b23      	ldr	r3, [pc, #140]	; (800efc0 <tcp_receive+0x5e4>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ef38:	4b22      	ldr	r3, [pc, #136]	; (800efc4 <tcp_receive+0x5e8>)
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d106      	bne.n	800ef4e <tcp_receive+0x572>
 800ef40:	4b21      	ldr	r3, [pc, #132]	; (800efc8 <tcp_receive+0x5ec>)
 800ef42:	f240 5294 	movw	r2, #1428	; 0x594
 800ef46:	4921      	ldr	r1, [pc, #132]	; (800efcc <tcp_receive+0x5f0>)
 800ef48:	4821      	ldr	r0, [pc, #132]	; (800efd0 <tcp_receive+0x5f4>)
 800ef4a:	f005 f80f 	bl	8013f6c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ef4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d906      	bls.n	800ef66 <tcp_receive+0x58a>
 800ef58:	4b1b      	ldr	r3, [pc, #108]	; (800efc8 <tcp_receive+0x5ec>)
 800ef5a:	f240 5295 	movw	r2, #1429	; 0x595
 800ef5e:	491d      	ldr	r1, [pc, #116]	; (800efd4 <tcp_receive+0x5f8>)
 800ef60:	481b      	ldr	r0, [pc, #108]	; (800efd0 <tcp_receive+0x5f4>)
 800ef62:	f005 f803 	bl	8013f6c <iprintf>
      off = (u16_t)off32;
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ef6c:	4b15      	ldr	r3, [pc, #84]	; (800efc4 <tcp_receive+0x5e8>)
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	891b      	ldrh	r3, [r3, #8]
 800ef72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d906      	bls.n	800ef88 <tcp_receive+0x5ac>
 800ef7a:	4b13      	ldr	r3, [pc, #76]	; (800efc8 <tcp_receive+0x5ec>)
 800ef7c:	f240 5297 	movw	r2, #1431	; 0x597
 800ef80:	4915      	ldr	r1, [pc, #84]	; (800efd8 <tcp_receive+0x5fc>)
 800ef82:	4813      	ldr	r0, [pc, #76]	; (800efd0 <tcp_receive+0x5f4>)
 800ef84:	f004 fff2 	bl	8013f6c <iprintf>
      inseg.len -= off;
 800ef88:	4b0e      	ldr	r3, [pc, #56]	; (800efc4 <tcp_receive+0x5e8>)
 800ef8a:	891a      	ldrh	r2, [r3, #8]
 800ef8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef90:	1ad3      	subs	r3, r2, r3
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	4b0b      	ldr	r3, [pc, #44]	; (800efc4 <tcp_receive+0x5e8>)
 800ef96:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ef98:	4b0a      	ldr	r3, [pc, #40]	; (800efc4 <tcp_receive+0x5e8>)
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	891a      	ldrh	r2, [r3, #8]
 800ef9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800efa2:	1ad3      	subs	r3, r2, r3
 800efa4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800efa6:	e029      	b.n	800effc <tcp_receive+0x620>
 800efa8:	0801684c 	.word	0x0801684c
 800efac:	08016854 	.word	0x08016854
 800efb0:	20004a2c 	.word	0x20004a2c
 800efb4:	20004a28 	.word	0x20004a28
 800efb8:	2000b948 	.word	0x2000b948
 800efbc:	20004a2e 	.word	0x20004a2e
 800efc0:	20004a24 	.word	0x20004a24
 800efc4:	20004a04 	.word	0x20004a04
 800efc8:	080164e4 	.word	0x080164e4
 800efcc:	0801685c 	.word	0x0801685c
 800efd0:	08016530 	.word	0x08016530
 800efd4:	0801686c 	.word	0x0801686c
 800efd8:	0801687c 	.word	0x0801687c
        off -= p->len;
 800efdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efde:	895b      	ldrh	r3, [r3, #10]
 800efe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800efea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800efee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff2:	2200      	movs	r2, #0
 800eff4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800eff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800effc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800effe:	895b      	ldrh	r3, [r3, #10]
 800f000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f004:	429a      	cmp	r2, r3
 800f006:	d8e9      	bhi.n	800efdc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f008:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f00c:	4619      	mov	r1, r3
 800f00e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f010:	f7fc fb74 	bl	800b6fc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f018:	4a91      	ldr	r2, [pc, #580]	; (800f260 <tcp_receive+0x884>)
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	4b91      	ldr	r3, [pc, #580]	; (800f264 <tcp_receive+0x888>)
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	4a8f      	ldr	r2, [pc, #572]	; (800f260 <tcp_receive+0x884>)
 800f022:	6812      	ldr	r2, [r2, #0]
 800f024:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f026:	e00d      	b.n	800f044 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f028:	4b8d      	ldr	r3, [pc, #564]	; (800f260 <tcp_receive+0x884>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	da06      	bge.n	800f044 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	8b5b      	ldrh	r3, [r3, #26]
 800f03a:	f043 0302 	orr.w	r3, r3, #2
 800f03e:	b29a      	uxth	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f044:	4b86      	ldr	r3, [pc, #536]	; (800f260 <tcp_receive+0x884>)
 800f046:	681a      	ldr	r2, [r3, #0]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04c:	1ad3      	subs	r3, r2, r3
 800f04e:	2b00      	cmp	r3, #0
 800f050:	f2c0 842a 	blt.w	800f8a8 <tcp_receive+0xecc>
 800f054:	4b82      	ldr	r3, [pc, #520]	; (800f260 <tcp_receive+0x884>)
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f05c:	6879      	ldr	r1, [r7, #4]
 800f05e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f060:	440b      	add	r3, r1
 800f062:	1ad3      	subs	r3, r2, r3
 800f064:	3301      	adds	r3, #1
 800f066:	2b00      	cmp	r3, #0
 800f068:	f300 841e 	bgt.w	800f8a8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f070:	4b7b      	ldr	r3, [pc, #492]	; (800f260 <tcp_receive+0x884>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	f040 829a 	bne.w	800f5ae <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f07a:	4b7a      	ldr	r3, [pc, #488]	; (800f264 <tcp_receive+0x888>)
 800f07c:	891c      	ldrh	r4, [r3, #8]
 800f07e:	4b79      	ldr	r3, [pc, #484]	; (800f264 <tcp_receive+0x888>)
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	899b      	ldrh	r3, [r3, #12]
 800f084:	b29b      	uxth	r3, r3
 800f086:	4618      	mov	r0, r3
 800f088:	f7fb f812 	bl	800a0b0 <lwip_htons>
 800f08c:	4603      	mov	r3, r0
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	f003 0303 	and.w	r3, r3, #3
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <tcp_receive+0x6c0>
 800f098:	2301      	movs	r3, #1
 800f09a:	e000      	b.n	800f09e <tcp_receive+0x6c2>
 800f09c:	2300      	movs	r3, #0
 800f09e:	4423      	add	r3, r4
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	4b71      	ldr	r3, [pc, #452]	; (800f268 <tcp_receive+0x88c>)
 800f0a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f0aa:	4b6f      	ldr	r3, [pc, #444]	; (800f268 <tcp_receive+0x88c>)
 800f0ac:	881b      	ldrh	r3, [r3, #0]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d275      	bcs.n	800f19e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f0b2:	4b6c      	ldr	r3, [pc, #432]	; (800f264 <tcp_receive+0x888>)
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	899b      	ldrh	r3, [r3, #12]
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fa fff8 	bl	800a0b0 <lwip_htons>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	f003 0301 	and.w	r3, r3, #1
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d01f      	beq.n	800f10c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f0cc:	4b65      	ldr	r3, [pc, #404]	; (800f264 <tcp_receive+0x888>)
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	899b      	ldrh	r3, [r3, #12]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	b21b      	sxth	r3, r3
 800f0d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f0da:	b21c      	sxth	r4, r3
 800f0dc:	4b61      	ldr	r3, [pc, #388]	; (800f264 <tcp_receive+0x888>)
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	899b      	ldrh	r3, [r3, #12]
 800f0e2:	b29b      	uxth	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7fa ffe3 	bl	800a0b0 <lwip_htons>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	b2db      	uxtb	r3, r3
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f0f4:	b29b      	uxth	r3, r3
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7fa ffda 	bl	800a0b0 <lwip_htons>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	b21b      	sxth	r3, r3
 800f100:	4323      	orrs	r3, r4
 800f102:	b21a      	sxth	r2, r3
 800f104:	4b57      	ldr	r3, [pc, #348]	; (800f264 <tcp_receive+0x888>)
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	b292      	uxth	r2, r2
 800f10a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f110:	4b54      	ldr	r3, [pc, #336]	; (800f264 <tcp_receive+0x888>)
 800f112:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f114:	4b53      	ldr	r3, [pc, #332]	; (800f264 <tcp_receive+0x888>)
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	899b      	ldrh	r3, [r3, #12]
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fa ffc7 	bl	800a0b0 <lwip_htons>
 800f122:	4603      	mov	r3, r0
 800f124:	b2db      	uxtb	r3, r3
 800f126:	f003 0302 	and.w	r3, r3, #2
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d005      	beq.n	800f13a <tcp_receive+0x75e>
            inseg.len -= 1;
 800f12e:	4b4d      	ldr	r3, [pc, #308]	; (800f264 <tcp_receive+0x888>)
 800f130:	891b      	ldrh	r3, [r3, #8]
 800f132:	3b01      	subs	r3, #1
 800f134:	b29a      	uxth	r2, r3
 800f136:	4b4b      	ldr	r3, [pc, #300]	; (800f264 <tcp_receive+0x888>)
 800f138:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f13a:	4b4a      	ldr	r3, [pc, #296]	; (800f264 <tcp_receive+0x888>)
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	4a49      	ldr	r2, [pc, #292]	; (800f264 <tcp_receive+0x888>)
 800f140:	8912      	ldrh	r2, [r2, #8]
 800f142:	4611      	mov	r1, r2
 800f144:	4618      	mov	r0, r3
 800f146:	f7fc f9d9 	bl	800b4fc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f14a:	4b46      	ldr	r3, [pc, #280]	; (800f264 <tcp_receive+0x888>)
 800f14c:	891c      	ldrh	r4, [r3, #8]
 800f14e:	4b45      	ldr	r3, [pc, #276]	; (800f264 <tcp_receive+0x888>)
 800f150:	68db      	ldr	r3, [r3, #12]
 800f152:	899b      	ldrh	r3, [r3, #12]
 800f154:	b29b      	uxth	r3, r3
 800f156:	4618      	mov	r0, r3
 800f158:	f7fa ffaa 	bl	800a0b0 <lwip_htons>
 800f15c:	4603      	mov	r3, r0
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	f003 0303 	and.w	r3, r3, #3
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <tcp_receive+0x790>
 800f168:	2301      	movs	r3, #1
 800f16a:	e000      	b.n	800f16e <tcp_receive+0x792>
 800f16c:	2300      	movs	r3, #0
 800f16e:	4423      	add	r3, r4
 800f170:	b29a      	uxth	r2, r3
 800f172:	4b3d      	ldr	r3, [pc, #244]	; (800f268 <tcp_receive+0x88c>)
 800f174:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f176:	4b3c      	ldr	r3, [pc, #240]	; (800f268 <tcp_receive+0x88c>)
 800f178:	881b      	ldrh	r3, [r3, #0]
 800f17a:	461a      	mov	r2, r3
 800f17c:	4b38      	ldr	r3, [pc, #224]	; (800f260 <tcp_receive+0x884>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	441a      	add	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f186:	6879      	ldr	r1, [r7, #4]
 800f188:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f18a:	440b      	add	r3, r1
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d006      	beq.n	800f19e <tcp_receive+0x7c2>
 800f190:	4b36      	ldr	r3, [pc, #216]	; (800f26c <tcp_receive+0x890>)
 800f192:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f196:	4936      	ldr	r1, [pc, #216]	; (800f270 <tcp_receive+0x894>)
 800f198:	4836      	ldr	r0, [pc, #216]	; (800f274 <tcp_receive+0x898>)
 800f19a:	f004 fee7 	bl	8013f6c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	f000 80e7 	beq.w	800f376 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f1a8:	4b2e      	ldr	r3, [pc, #184]	; (800f264 <tcp_receive+0x888>)
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	899b      	ldrh	r3, [r3, #12]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fa ff7d 	bl	800a0b0 <lwip_htons>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d010      	beq.n	800f1e4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f1c2:	e00a      	b.n	800f1da <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f7fd fd96 	bl	800cd06 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d1f0      	bne.n	800f1c4 <tcp_receive+0x7e8>
 800f1e2:	e0c8      	b.n	800f376 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f1ea:	e052      	b.n	800f292 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	899b      	ldrh	r3, [r3, #12]
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fa ff5b 	bl	800a0b0 <lwip_htons>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d03d      	beq.n	800f282 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f206:	4b17      	ldr	r3, [pc, #92]	; (800f264 <tcp_receive+0x888>)
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	899b      	ldrh	r3, [r3, #12]
 800f20c:	b29b      	uxth	r3, r3
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fa ff4e 	bl	800a0b0 <lwip_htons>
 800f214:	4603      	mov	r3, r0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d130      	bne.n	800f282 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f220:	4b10      	ldr	r3, [pc, #64]	; (800f264 <tcp_receive+0x888>)
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	899b      	ldrh	r3, [r3, #12]
 800f226:	b29c      	uxth	r4, r3
 800f228:	2001      	movs	r0, #1
 800f22a:	f7fa ff41 	bl	800a0b0 <lwip_htons>
 800f22e:	4603      	mov	r3, r0
 800f230:	461a      	mov	r2, r3
 800f232:	4b0c      	ldr	r3, [pc, #48]	; (800f264 <tcp_receive+0x888>)
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	4322      	orrs	r2, r4
 800f238:	b292      	uxth	r2, r2
 800f23a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f23c:	4b09      	ldr	r3, [pc, #36]	; (800f264 <tcp_receive+0x888>)
 800f23e:	891c      	ldrh	r4, [r3, #8]
 800f240:	4b08      	ldr	r3, [pc, #32]	; (800f264 <tcp_receive+0x888>)
 800f242:	68db      	ldr	r3, [r3, #12]
 800f244:	899b      	ldrh	r3, [r3, #12]
 800f246:	b29b      	uxth	r3, r3
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fa ff31 	bl	800a0b0 <lwip_htons>
 800f24e:	4603      	mov	r3, r0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00e      	beq.n	800f278 <tcp_receive+0x89c>
 800f25a:	2301      	movs	r3, #1
 800f25c:	e00d      	b.n	800f27a <tcp_receive+0x89e>
 800f25e:	bf00      	nop
 800f260:	20004a24 	.word	0x20004a24
 800f264:	20004a04 	.word	0x20004a04
 800f268:	20004a2e 	.word	0x20004a2e
 800f26c:	080164e4 	.word	0x080164e4
 800f270:	0801688c 	.word	0x0801688c
 800f274:	08016530 	.word	0x08016530
 800f278:	2300      	movs	r3, #0
 800f27a:	4423      	add	r3, r4
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	4b98      	ldr	r3, [pc, #608]	; (800f4e0 <tcp_receive+0xb04>)
 800f280:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f284:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f28c:	6938      	ldr	r0, [r7, #16]
 800f28e:	f7fd fd3a 	bl	800cd06 <tcp_seg_free>
            while (next &&
 800f292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00e      	beq.n	800f2b6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f298:	4b91      	ldr	r3, [pc, #580]	; (800f4e0 <tcp_receive+0xb04>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	461a      	mov	r2, r3
 800f29e:	4b91      	ldr	r3, [pc, #580]	; (800f4e4 <tcp_receive+0xb08>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	441a      	add	r2, r3
 800f2a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2ac:	8909      	ldrh	r1, [r1, #8]
 800f2ae:	440b      	add	r3, r1
 800f2b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	da9a      	bge.n	800f1ec <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d059      	beq.n	800f370 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f2bc:	4b88      	ldr	r3, [pc, #544]	; (800f4e0 <tcp_receive+0xb04>)
 800f2be:	881b      	ldrh	r3, [r3, #0]
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	4b88      	ldr	r3, [pc, #544]	; (800f4e4 <tcp_receive+0xb08>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	441a      	add	r2, r3
 800f2c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2ca:	68db      	ldr	r3, [r3, #12]
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	dd4d      	ble.n	800f370 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	4b81      	ldr	r3, [pc, #516]	; (800f4e4 <tcp_receive+0xb08>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	1ad3      	subs	r3, r2, r3
 800f2e4:	b29a      	uxth	r2, r3
 800f2e6:	4b80      	ldr	r3, [pc, #512]	; (800f4e8 <tcp_receive+0xb0c>)
 800f2e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f2ea:	4b7f      	ldr	r3, [pc, #508]	; (800f4e8 <tcp_receive+0xb0c>)
 800f2ec:	68db      	ldr	r3, [r3, #12]
 800f2ee:	899b      	ldrh	r3, [r3, #12]
 800f2f0:	b29b      	uxth	r3, r3
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7fa fedc 	bl	800a0b0 <lwip_htons>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	f003 0302 	and.w	r3, r3, #2
 800f300:	2b00      	cmp	r3, #0
 800f302:	d005      	beq.n	800f310 <tcp_receive+0x934>
                inseg.len -= 1;
 800f304:	4b78      	ldr	r3, [pc, #480]	; (800f4e8 <tcp_receive+0xb0c>)
 800f306:	891b      	ldrh	r3, [r3, #8]
 800f308:	3b01      	subs	r3, #1
 800f30a:	b29a      	uxth	r2, r3
 800f30c:	4b76      	ldr	r3, [pc, #472]	; (800f4e8 <tcp_receive+0xb0c>)
 800f30e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f310:	4b75      	ldr	r3, [pc, #468]	; (800f4e8 <tcp_receive+0xb0c>)
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	4a74      	ldr	r2, [pc, #464]	; (800f4e8 <tcp_receive+0xb0c>)
 800f316:	8912      	ldrh	r2, [r2, #8]
 800f318:	4611      	mov	r1, r2
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fc f8ee 	bl	800b4fc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f320:	4b71      	ldr	r3, [pc, #452]	; (800f4e8 <tcp_receive+0xb0c>)
 800f322:	891c      	ldrh	r4, [r3, #8]
 800f324:	4b70      	ldr	r3, [pc, #448]	; (800f4e8 <tcp_receive+0xb0c>)
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	899b      	ldrh	r3, [r3, #12]
 800f32a:	b29b      	uxth	r3, r3
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fa febf 	bl	800a0b0 <lwip_htons>
 800f332:	4603      	mov	r3, r0
 800f334:	b2db      	uxtb	r3, r3
 800f336:	f003 0303 	and.w	r3, r3, #3
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d001      	beq.n	800f342 <tcp_receive+0x966>
 800f33e:	2301      	movs	r3, #1
 800f340:	e000      	b.n	800f344 <tcp_receive+0x968>
 800f342:	2300      	movs	r3, #0
 800f344:	4423      	add	r3, r4
 800f346:	b29a      	uxth	r2, r3
 800f348:	4b65      	ldr	r3, [pc, #404]	; (800f4e0 <tcp_receive+0xb04>)
 800f34a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f34c:	4b64      	ldr	r3, [pc, #400]	; (800f4e0 <tcp_receive+0xb04>)
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	461a      	mov	r2, r3
 800f352:	4b64      	ldr	r3, [pc, #400]	; (800f4e4 <tcp_receive+0xb08>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	441a      	add	r2, r3
 800f358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d006      	beq.n	800f370 <tcp_receive+0x994>
 800f362:	4b62      	ldr	r3, [pc, #392]	; (800f4ec <tcp_receive+0xb10>)
 800f364:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f368:	4961      	ldr	r1, [pc, #388]	; (800f4f0 <tcp_receive+0xb14>)
 800f36a:	4862      	ldr	r0, [pc, #392]	; (800f4f4 <tcp_receive+0xb18>)
 800f36c:	f004 fdfe 	bl	8013f6c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f374:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f376:	4b5a      	ldr	r3, [pc, #360]	; (800f4e0 <tcp_receive+0xb04>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b59      	ldr	r3, [pc, #356]	; (800f4e4 <tcp_receive+0xb08>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	441a      	add	r2, r3
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f38a:	4b55      	ldr	r3, [pc, #340]	; (800f4e0 <tcp_receive+0xb04>)
 800f38c:	881b      	ldrh	r3, [r3, #0]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d206      	bcs.n	800f3a0 <tcp_receive+0x9c4>
 800f392:	4b56      	ldr	r3, [pc, #344]	; (800f4ec <tcp_receive+0xb10>)
 800f394:	f240 6207 	movw	r2, #1543	; 0x607
 800f398:	4957      	ldr	r1, [pc, #348]	; (800f4f8 <tcp_receive+0xb1c>)
 800f39a:	4856      	ldr	r0, [pc, #344]	; (800f4f4 <tcp_receive+0xb18>)
 800f39c:	f004 fde6 	bl	8013f6c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3a4:	4b4e      	ldr	r3, [pc, #312]	; (800f4e0 <tcp_receive+0xb04>)
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7fc ffc9 	bl	800c348 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f3b6:	4b4c      	ldr	r3, [pc, #304]	; (800f4e8 <tcp_receive+0xb0c>)
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	891b      	ldrh	r3, [r3, #8]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d006      	beq.n	800f3ce <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f3c0:	4b49      	ldr	r3, [pc, #292]	; (800f4e8 <tcp_receive+0xb0c>)
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4a4d      	ldr	r2, [pc, #308]	; (800f4fc <tcp_receive+0xb20>)
 800f3c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f3c8:	4b47      	ldr	r3, [pc, #284]	; (800f4e8 <tcp_receive+0xb0c>)
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3ce:	4b46      	ldr	r3, [pc, #280]	; (800f4e8 <tcp_receive+0xb0c>)
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	899b      	ldrh	r3, [r3, #12]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fa fe6a 	bl	800a0b0 <lwip_htons>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	f003 0301 	and.w	r3, r3, #1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f000 80b8 	beq.w	800f55a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f3ea:	4b45      	ldr	r3, [pc, #276]	; (800f500 <tcp_receive+0xb24>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f043 0320 	orr.w	r3, r3, #32
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	4b42      	ldr	r3, [pc, #264]	; (800f500 <tcp_receive+0xb24>)
 800f3f6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f3f8:	e0af      	b.n	800f55a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3fe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	4a36      	ldr	r2, [pc, #216]	; (800f4e4 <tcp_receive+0xb08>)
 800f40a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	891b      	ldrh	r3, [r3, #8]
 800f410:	461c      	mov	r4, r3
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	899b      	ldrh	r3, [r3, #12]
 800f418:	b29b      	uxth	r3, r3
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fa fe48 	bl	800a0b0 <lwip_htons>
 800f420:	4603      	mov	r3, r0
 800f422:	b2db      	uxtb	r3, r3
 800f424:	f003 0303 	and.w	r3, r3, #3
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <tcp_receive+0xa54>
 800f42c:	2301      	movs	r3, #1
 800f42e:	e000      	b.n	800f432 <tcp_receive+0xa56>
 800f430:	2300      	movs	r3, #0
 800f432:	191a      	adds	r2, r3, r4
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f438:	441a      	add	r2, r3
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f442:	461c      	mov	r4, r3
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	891b      	ldrh	r3, [r3, #8]
 800f448:	461d      	mov	r5, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	899b      	ldrh	r3, [r3, #12]
 800f450:	b29b      	uxth	r3, r3
 800f452:	4618      	mov	r0, r3
 800f454:	f7fa fe2c 	bl	800a0b0 <lwip_htons>
 800f458:	4603      	mov	r3, r0
 800f45a:	b2db      	uxtb	r3, r3
 800f45c:	f003 0303 	and.w	r3, r3, #3
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <tcp_receive+0xa8c>
 800f464:	2301      	movs	r3, #1
 800f466:	e000      	b.n	800f46a <tcp_receive+0xa8e>
 800f468:	2300      	movs	r3, #0
 800f46a:	442b      	add	r3, r5
 800f46c:	429c      	cmp	r4, r3
 800f46e:	d206      	bcs.n	800f47e <tcp_receive+0xaa2>
 800f470:	4b1e      	ldr	r3, [pc, #120]	; (800f4ec <tcp_receive+0xb10>)
 800f472:	f240 622b 	movw	r2, #1579	; 0x62b
 800f476:	4923      	ldr	r1, [pc, #140]	; (800f504 <tcp_receive+0xb28>)
 800f478:	481e      	ldr	r0, [pc, #120]	; (800f4f4 <tcp_receive+0xb18>)
 800f47a:	f004 fd77 	bl	8013f6c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f47e:	68bb      	ldr	r3, [r7, #8]
 800f480:	891b      	ldrh	r3, [r3, #8]
 800f482:	461c      	mov	r4, r3
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	899b      	ldrh	r3, [r3, #12]
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fa fe0f 	bl	800a0b0 <lwip_htons>
 800f492:	4603      	mov	r3, r0
 800f494:	b2db      	uxtb	r3, r3
 800f496:	f003 0303 	and.w	r3, r3, #3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d001      	beq.n	800f4a2 <tcp_receive+0xac6>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e000      	b.n	800f4a4 <tcp_receive+0xac8>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	1919      	adds	r1, r3, r4
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f4aa:	b28b      	uxth	r3, r1
 800f4ac:	1ad3      	subs	r3, r2, r3
 800f4ae:	b29a      	uxth	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7fc ff47 	bl	800c348 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	891b      	ldrh	r3, [r3, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d028      	beq.n	800f516 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f4c4:	4b0d      	ldr	r3, [pc, #52]	; (800f4fc <tcp_receive+0xb20>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d01d      	beq.n	800f508 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f4cc:	4b0b      	ldr	r3, [pc, #44]	; (800f4fc <tcp_receive+0xb20>)
 800f4ce:	681a      	ldr	r2, [r3, #0]
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4610      	mov	r0, r2
 800f4d8:	f7fc fa64 	bl	800b9a4 <pbuf_cat>
 800f4dc:	e018      	b.n	800f510 <tcp_receive+0xb34>
 800f4de:	bf00      	nop
 800f4e0:	20004a2e 	.word	0x20004a2e
 800f4e4:	20004a24 	.word	0x20004a24
 800f4e8:	20004a04 	.word	0x20004a04
 800f4ec:	080164e4 	.word	0x080164e4
 800f4f0:	080168c4 	.word	0x080168c4
 800f4f4:	08016530 	.word	0x08016530
 800f4f8:	08016900 	.word	0x08016900
 800f4fc:	20004a34 	.word	0x20004a34
 800f500:	20004a31 	.word	0x20004a31
 800f504:	08016920 	.word	0x08016920
            } else {
              recv_data = cseg->p;
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	4a70      	ldr	r2, [pc, #448]	; (800f6d0 <tcp_receive+0xcf4>)
 800f50e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	2200      	movs	r2, #0
 800f514:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	899b      	ldrh	r3, [r3, #12]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	4618      	mov	r0, r3
 800f520:	f7fa fdc6 	bl	800a0b0 <lwip_htons>
 800f524:	4603      	mov	r3, r0
 800f526:	b2db      	uxtb	r3, r3
 800f528:	f003 0301 	and.w	r3, r3, #1
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d00d      	beq.n	800f54c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f530:	4b68      	ldr	r3, [pc, #416]	; (800f6d4 <tcp_receive+0xcf8>)
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	f043 0320 	orr.w	r3, r3, #32
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	4b66      	ldr	r3, [pc, #408]	; (800f6d4 <tcp_receive+0xcf8>)
 800f53c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	7d1b      	ldrb	r3, [r3, #20]
 800f542:	2b04      	cmp	r3, #4
 800f544:	d102      	bne.n	800f54c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2207      	movs	r2, #7
 800f54a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f554:	68b8      	ldr	r0, [r7, #8]
 800f556:	f7fd fbd6 	bl	800cd06 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d008      	beq.n	800f574 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f56e:	429a      	cmp	r2, r3
 800f570:	f43f af43 	beq.w	800f3fa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d00e      	beq.n	800f59e <tcp_receive+0xbc2>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8b5b      	ldrh	r3, [r3, #26]
 800f584:	f023 0301 	bic.w	r3, r3, #1
 800f588:	b29a      	uxth	r2, r3
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	835a      	strh	r2, [r3, #26]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	8b5b      	ldrh	r3, [r3, #26]
 800f592:	f043 0302 	orr.w	r3, r3, #2
 800f596:	b29a      	uxth	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f59c:	e188      	b.n	800f8b0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	8b5b      	ldrh	r3, [r3, #26]
 800f5a2:	f043 0301 	orr.w	r3, r3, #1
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f5ac:	e180      	b.n	800f8b0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d106      	bne.n	800f5c4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f5b6:	4848      	ldr	r0, [pc, #288]	; (800f6d8 <tcp_receive+0xcfc>)
 800f5b8:	f7fd fbbe 	bl	800cd38 <tcp_seg_copy>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	675a      	str	r2, [r3, #116]	; 0x74
 800f5c2:	e16d      	b.n	800f8a0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5ce:	e157      	b.n	800f880 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	4b41      	ldr	r3, [pc, #260]	; (800f6dc <tcp_receive+0xd00>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d11d      	bne.n	800f61a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f5de:	4b3e      	ldr	r3, [pc, #248]	; (800f6d8 <tcp_receive+0xcfc>)
 800f5e0:	891a      	ldrh	r2, [r3, #8]
 800f5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e4:	891b      	ldrh	r3, [r3, #8]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	f240 814f 	bls.w	800f88a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f5ec:	483a      	ldr	r0, [pc, #232]	; (800f6d8 <tcp_receive+0xcfc>)
 800f5ee:	f7fd fba3 	bl	800cd38 <tcp_seg_copy>
 800f5f2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f000 8149 	beq.w	800f88e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f5fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d003      	beq.n	800f60a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f604:	697a      	ldr	r2, [r7, #20]
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	e002      	b.n	800f610 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	697a      	ldr	r2, [r7, #20]
 800f60e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f612:	6978      	ldr	r0, [r7, #20]
 800f614:	f7ff f8de 	bl	800e7d4 <tcp_oos_insert_segment>
                }
                break;
 800f618:	e139      	b.n	800f88e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d117      	bne.n	800f650 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f620:	4b2e      	ldr	r3, [pc, #184]	; (800f6dc <tcp_receive+0xd00>)
 800f622:	681a      	ldr	r2, [r3, #0]
 800f624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	da57      	bge.n	800f6e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f630:	4829      	ldr	r0, [pc, #164]	; (800f6d8 <tcp_receive+0xcfc>)
 800f632:	f7fd fb81 	bl	800cd38 <tcp_seg_copy>
 800f636:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 8129 	beq.w	800f892 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69ba      	ldr	r2, [r7, #24]
 800f644:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f646:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f648:	69b8      	ldr	r0, [r7, #24]
 800f64a:	f7ff f8c3 	bl	800e7d4 <tcp_oos_insert_segment>
                  }
                  break;
 800f64e:	e120      	b.n	800f892 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f650:	4b22      	ldr	r3, [pc, #136]	; (800f6dc <tcp_receive+0xd00>)
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f656:	68db      	ldr	r3, [r3, #12]
 800f658:	685b      	ldr	r3, [r3, #4]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	3b01      	subs	r3, #1
 800f65e:	2b00      	cmp	r3, #0
 800f660:	db3e      	blt.n	800f6e0 <tcp_receive+0xd04>
 800f662:	4b1e      	ldr	r3, [pc, #120]	; (800f6dc <tcp_receive+0xd00>)
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	1ad3      	subs	r3, r2, r3
 800f66e:	3301      	adds	r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	dc35      	bgt.n	800f6e0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f674:	4818      	ldr	r0, [pc, #96]	; (800f6d8 <tcp_receive+0xcfc>)
 800f676:	f7fd fb5f 	bl	800cd38 <tcp_seg_copy>
 800f67a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 8109 	beq.w	800f896 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	685b      	ldr	r3, [r3, #4]
 800f68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f68c:	8912      	ldrh	r2, [r2, #8]
 800f68e:	441a      	add	r2, r3
 800f690:	4b12      	ldr	r3, [pc, #72]	; (800f6dc <tcp_receive+0xd00>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	dd12      	ble.n	800f6c0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f69a:	4b10      	ldr	r3, [pc, #64]	; (800f6dc <tcp_receive+0xd00>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	685b      	ldr	r3, [r3, #4]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	b29a      	uxth	r2, r3
 800f6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b2:	685a      	ldr	r2, [r3, #4]
 800f6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b6:	891b      	ldrh	r3, [r3, #8]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4610      	mov	r0, r2
 800f6bc:	f7fb ff1e 	bl	800b4fc <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c2:	69fa      	ldr	r2, [r7, #28]
 800f6c4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f6c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6c8:	69f8      	ldr	r0, [r7, #28]
 800f6ca:	f7ff f883 	bl	800e7d4 <tcp_oos_insert_segment>
                  }
                  break;
 800f6ce:	e0e2      	b.n	800f896 <tcp_receive+0xeba>
 800f6d0:	20004a34 	.word	0x20004a34
 800f6d4:	20004a31 	.word	0x20004a31
 800f6d8:	20004a04 	.word	0x20004a04
 800f6dc:	20004a24 	.word	0x20004a24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f040 80c6 	bne.w	800f87a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f6ee:	4b80      	ldr	r3, [pc, #512]	; (800f8f0 <tcp_receive+0xf14>)
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f340 80bd 	ble.w	800f87a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	899b      	ldrh	r3, [r3, #12]
 800f706:	b29b      	uxth	r3, r3
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fa fcd1 	bl	800a0b0 <lwip_htons>
 800f70e:	4603      	mov	r3, r0
 800f710:	b2db      	uxtb	r3, r3
 800f712:	f003 0301 	and.w	r3, r3, #1
 800f716:	2b00      	cmp	r3, #0
 800f718:	f040 80bf 	bne.w	800f89a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f71c:	4875      	ldr	r0, [pc, #468]	; (800f8f4 <tcp_receive+0xf18>)
 800f71e:	f7fd fb0b 	bl	800cd38 <tcp_seg_copy>
 800f722:	4602      	mov	r2, r0
 800f724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f726:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	f000 80b6 	beq.w	800f89e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f73a:	8912      	ldrh	r2, [r2, #8]
 800f73c:	441a      	add	r2, r3
 800f73e:	4b6c      	ldr	r3, [pc, #432]	; (800f8f0 <tcp_receive+0xf14>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	2b00      	cmp	r3, #0
 800f746:	dd12      	ble.n	800f76e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f748:	4b69      	ldr	r3, [pc, #420]	; (800f8f0 <tcp_receive+0xf14>)
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	685b      	ldr	r3, [r3, #4]
 800f754:	b29b      	uxth	r3, r3
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	b29a      	uxth	r2, r3
 800f75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f75c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f764:	891b      	ldrh	r3, [r3, #8]
 800f766:	4619      	mov	r1, r3
 800f768:	4610      	mov	r0, r2
 800f76a:	f7fb fec7 	bl	800b4fc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f76e:	4b62      	ldr	r3, [pc, #392]	; (800f8f8 <tcp_receive+0xf1c>)
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	461a      	mov	r2, r3
 800f774:	4b5e      	ldr	r3, [pc, #376]	; (800f8f0 <tcp_receive+0xf14>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	441a      	add	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f77e:	6879      	ldr	r1, [r7, #4]
 800f780:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f782:	440b      	add	r3, r1
 800f784:	1ad3      	subs	r3, r2, r3
 800f786:	2b00      	cmp	r3, #0
 800f788:	f340 8089 	ble.w	800f89e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	899b      	ldrh	r3, [r3, #12]
 800f794:	b29b      	uxth	r3, r3
 800f796:	4618      	mov	r0, r3
 800f798:	f7fa fc8a 	bl	800a0b0 <lwip_htons>
 800f79c:	4603      	mov	r3, r0
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	f003 0301 	and.w	r3, r3, #1
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d022      	beq.n	800f7ee <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	899b      	ldrh	r3, [r3, #12]
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	b21b      	sxth	r3, r3
 800f7b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f7b8:	b21c      	sxth	r4, r3
 800f7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68db      	ldr	r3, [r3, #12]
 800f7c0:	899b      	ldrh	r3, [r3, #12]
 800f7c2:	b29b      	uxth	r3, r3
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fa fc73 	bl	800a0b0 <lwip_htons>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7fa fc6a 	bl	800a0b0 <lwip_htons>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	b21b      	sxth	r3, r3
 800f7e0:	4323      	orrs	r3, r4
 800f7e2:	b21a      	sxth	r2, r3
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68db      	ldr	r3, [r3, #12]
 800f7ea:	b292      	uxth	r2, r2
 800f7ec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7f8:	4413      	add	r3, r2
 800f7fa:	b299      	uxth	r1, r3
 800f7fc:	4b3c      	ldr	r3, [pc, #240]	; (800f8f0 <tcp_receive+0xf14>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	b29a      	uxth	r2, r3
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	1a8a      	subs	r2, r1, r2
 800f808:	b292      	uxth	r2, r2
 800f80a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	685a      	ldr	r2, [r3, #4]
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	891b      	ldrh	r3, [r3, #8]
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7fb fe6e 	bl	800b4fc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	891c      	ldrh	r4, [r3, #8]
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4618      	mov	r0, r3
 800f832:	f7fa fc3d 	bl	800a0b0 <lwip_htons>
 800f836:	4603      	mov	r3, r0
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <tcp_receive+0xe6a>
 800f842:	2301      	movs	r3, #1
 800f844:	e000      	b.n	800f848 <tcp_receive+0xe6c>
 800f846:	2300      	movs	r3, #0
 800f848:	4423      	add	r3, r4
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	4b2a      	ldr	r3, [pc, #168]	; (800f8f8 <tcp_receive+0xf1c>)
 800f84e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f850:	4b29      	ldr	r3, [pc, #164]	; (800f8f8 <tcp_receive+0xf1c>)
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	461a      	mov	r2, r3
 800f856:	4b26      	ldr	r3, [pc, #152]	; (800f8f0 <tcp_receive+0xf14>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	441a      	add	r2, r3
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f860:	6879      	ldr	r1, [r7, #4]
 800f862:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f864:	440b      	add	r3, r1
 800f866:	429a      	cmp	r2, r3
 800f868:	d019      	beq.n	800f89e <tcp_receive+0xec2>
 800f86a:	4b24      	ldr	r3, [pc, #144]	; (800f8fc <tcp_receive+0xf20>)
 800f86c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f870:	4923      	ldr	r1, [pc, #140]	; (800f900 <tcp_receive+0xf24>)
 800f872:	4824      	ldr	r0, [pc, #144]	; (800f904 <tcp_receive+0xf28>)
 800f874:	f004 fb7a 	bl	8013f6c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f878:	e011      	b.n	800f89e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f882:	2b00      	cmp	r3, #0
 800f884:	f47f aea4 	bne.w	800f5d0 <tcp_receive+0xbf4>
 800f888:	e00a      	b.n	800f8a0 <tcp_receive+0xec4>
                break;
 800f88a:	bf00      	nop
 800f88c:	e008      	b.n	800f8a0 <tcp_receive+0xec4>
                break;
 800f88e:	bf00      	nop
 800f890:	e006      	b.n	800f8a0 <tcp_receive+0xec4>
                  break;
 800f892:	bf00      	nop
 800f894:	e004      	b.n	800f8a0 <tcp_receive+0xec4>
                  break;
 800f896:	bf00      	nop
 800f898:	e002      	b.n	800f8a0 <tcp_receive+0xec4>
                  break;
 800f89a:	bf00      	nop
 800f89c:	e000      	b.n	800f8a0 <tcp_receive+0xec4>
                break;
 800f89e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f001 fa33 	bl	8010d0c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f8a6:	e003      	b.n	800f8b0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f001 fa2f 	bl	8010d0c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f8ae:	e01a      	b.n	800f8e6 <tcp_receive+0xf0a>
 800f8b0:	e019      	b.n	800f8e6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f8b2:	4b0f      	ldr	r3, [pc, #60]	; (800f8f0 <tcp_receive+0xf14>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ba:	1ad3      	subs	r3, r2, r3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	db0a      	blt.n	800f8d6 <tcp_receive+0xefa>
 800f8c0:	4b0b      	ldr	r3, [pc, #44]	; (800f8f0 <tcp_receive+0xf14>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c8:	6879      	ldr	r1, [r7, #4]
 800f8ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8cc:	440b      	add	r3, r1
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	dd07      	ble.n	800f8e6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	8b5b      	ldrh	r3, [r3, #26]
 800f8da:	f043 0302 	orr.w	r3, r3, #2
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f8e4:	e7ff      	b.n	800f8e6 <tcp_receive+0xf0a>
 800f8e6:	bf00      	nop
 800f8e8:	3750      	adds	r7, #80	; 0x50
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	20004a24 	.word	0x20004a24
 800f8f4:	20004a04 	.word	0x20004a04
 800f8f8:	20004a2e 	.word	0x20004a2e
 800f8fc:	080164e4 	.word	0x080164e4
 800f900:	0801688c 	.word	0x0801688c
 800f904:	08016530 	.word	0x08016530

0800f908 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f90e:	4b15      	ldr	r3, [pc, #84]	; (800f964 <tcp_get_next_optbyte+0x5c>)
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	1c5a      	adds	r2, r3, #1
 800f914:	b291      	uxth	r1, r2
 800f916:	4a13      	ldr	r2, [pc, #76]	; (800f964 <tcp_get_next_optbyte+0x5c>)
 800f918:	8011      	strh	r1, [r2, #0]
 800f91a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f91c:	4b12      	ldr	r3, [pc, #72]	; (800f968 <tcp_get_next_optbyte+0x60>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d004      	beq.n	800f92e <tcp_get_next_optbyte+0x26>
 800f924:	4b11      	ldr	r3, [pc, #68]	; (800f96c <tcp_get_next_optbyte+0x64>)
 800f926:	881b      	ldrh	r3, [r3, #0]
 800f928:	88fa      	ldrh	r2, [r7, #6]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d208      	bcs.n	800f940 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f92e:	4b10      	ldr	r3, [pc, #64]	; (800f970 <tcp_get_next_optbyte+0x68>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	3314      	adds	r3, #20
 800f934:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f936:	88fb      	ldrh	r3, [r7, #6]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	4413      	add	r3, r2
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	e00b      	b.n	800f958 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f940:	88fb      	ldrh	r3, [r7, #6]
 800f942:	b2da      	uxtb	r2, r3
 800f944:	4b09      	ldr	r3, [pc, #36]	; (800f96c <tcp_get_next_optbyte+0x64>)
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	b2db      	uxtb	r3, r3
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f94e:	4b06      	ldr	r3, [pc, #24]	; (800f968 <tcp_get_next_optbyte+0x60>)
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	797b      	ldrb	r3, [r7, #5]
 800f954:	4413      	add	r3, r2
 800f956:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f958:	4618      	mov	r0, r3
 800f95a:	370c      	adds	r7, #12
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr
 800f964:	20004a20 	.word	0x20004a20
 800f968:	20004a1c 	.word	0x20004a1c
 800f96c:	20004a1a 	.word	0x20004a1a
 800f970:	20004a14 	.word	0x20004a14

0800f974 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d106      	bne.n	800f990 <tcp_parseopt+0x1c>
 800f982:	4b32      	ldr	r3, [pc, #200]	; (800fa4c <tcp_parseopt+0xd8>)
 800f984:	f240 727d 	movw	r2, #1917	; 0x77d
 800f988:	4931      	ldr	r1, [pc, #196]	; (800fa50 <tcp_parseopt+0xdc>)
 800f98a:	4832      	ldr	r0, [pc, #200]	; (800fa54 <tcp_parseopt+0xe0>)
 800f98c:	f004 faee 	bl	8013f6c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f990:	4b31      	ldr	r3, [pc, #196]	; (800fa58 <tcp_parseopt+0xe4>)
 800f992:	881b      	ldrh	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d055      	beq.n	800fa44 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f998:	4b30      	ldr	r3, [pc, #192]	; (800fa5c <tcp_parseopt+0xe8>)
 800f99a:	2200      	movs	r2, #0
 800f99c:	801a      	strh	r2, [r3, #0]
 800f99e:	e045      	b.n	800fa2c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f9a0:	f7ff ffb2 	bl	800f908 <tcp_get_next_optbyte>
 800f9a4:	4603      	mov	r3, r0
 800f9a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f9a8:	7bfb      	ldrb	r3, [r7, #15]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d006      	beq.n	800f9bc <tcp_parseopt+0x48>
 800f9ae:	2b02      	cmp	r3, #2
 800f9b0:	dc2b      	bgt.n	800fa0a <tcp_parseopt+0x96>
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d041      	beq.n	800fa3a <tcp_parseopt+0xc6>
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d127      	bne.n	800fa0a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f9ba:	e037      	b.n	800fa2c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f9bc:	f7ff ffa4 	bl	800f908 <tcp_get_next_optbyte>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b04      	cmp	r3, #4
 800f9c4:	d13b      	bne.n	800fa3e <tcp_parseopt+0xca>
 800f9c6:	4b25      	ldr	r3, [pc, #148]	; (800fa5c <tcp_parseopt+0xe8>)
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	4a22      	ldr	r2, [pc, #136]	; (800fa58 <tcp_parseopt+0xe4>)
 800f9ce:	8812      	ldrh	r2, [r2, #0]
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	da34      	bge.n	800fa3e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f9d4:	f7ff ff98 	bl	800f908 <tcp_get_next_optbyte>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	b29b      	uxth	r3, r3
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f9e0:	f7ff ff92 	bl	800f908 <tcp_get_next_optbyte>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	b29a      	uxth	r2, r3
 800f9e8:	89bb      	ldrh	r3, [r7, #12]
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f9ee:	89bb      	ldrh	r3, [r7, #12]
 800f9f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f9f4:	d804      	bhi.n	800fa00 <tcp_parseopt+0x8c>
 800f9f6:	89bb      	ldrh	r3, [r7, #12]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <tcp_parseopt+0x8c>
 800f9fc:	89ba      	ldrh	r2, [r7, #12]
 800f9fe:	e001      	b.n	800fa04 <tcp_parseopt+0x90>
 800fa00:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fa08:	e010      	b.n	800fa2c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fa0a:	f7ff ff7d 	bl	800f908 <tcp_get_next_optbyte>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fa12:	7afb      	ldrb	r3, [r7, #11]
 800fa14:	2b01      	cmp	r3, #1
 800fa16:	d914      	bls.n	800fa42 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fa18:	7afb      	ldrb	r3, [r7, #11]
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	4b0f      	ldr	r3, [pc, #60]	; (800fa5c <tcp_parseopt+0xe8>)
 800fa1e:	881b      	ldrh	r3, [r3, #0]
 800fa20:	4413      	add	r3, r2
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	3b02      	subs	r3, #2
 800fa26:	b29a      	uxth	r2, r3
 800fa28:	4b0c      	ldr	r3, [pc, #48]	; (800fa5c <tcp_parseopt+0xe8>)
 800fa2a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa2c:	4b0b      	ldr	r3, [pc, #44]	; (800fa5c <tcp_parseopt+0xe8>)
 800fa2e:	881a      	ldrh	r2, [r3, #0]
 800fa30:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <tcp_parseopt+0xe4>)
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d3b3      	bcc.n	800f9a0 <tcp_parseopt+0x2c>
 800fa38:	e004      	b.n	800fa44 <tcp_parseopt+0xd0>
          return;
 800fa3a:	bf00      	nop
 800fa3c:	e002      	b.n	800fa44 <tcp_parseopt+0xd0>
            return;
 800fa3e:	bf00      	nop
 800fa40:	e000      	b.n	800fa44 <tcp_parseopt+0xd0>
            return;
 800fa42:	bf00      	nop
      }
    }
  }
}
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	080164e4 	.word	0x080164e4
 800fa50:	08016948 	.word	0x08016948
 800fa54:	08016530 	.word	0x08016530
 800fa58:	20004a18 	.word	0x20004a18
 800fa5c:	20004a20 	.word	0x20004a20

0800fa60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fa60:	b480      	push	{r7}
 800fa62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fa64:	4b05      	ldr	r3, [pc, #20]	; (800fa7c <tcp_trigger_input_pcb_close+0x1c>)
 800fa66:	781b      	ldrb	r3, [r3, #0]
 800fa68:	f043 0310 	orr.w	r3, r3, #16
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	4b03      	ldr	r3, [pc, #12]	; (800fa7c <tcp_trigger_input_pcb_close+0x1c>)
 800fa70:	701a      	strb	r2, [r3, #0]
}
 800fa72:	bf00      	nop
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	20004a31 	.word	0x20004a31

0800fa80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00a      	beq.n	800faa8 <tcp_route+0x28>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	7a1b      	ldrb	r3, [r3, #8]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d006      	beq.n	800faa8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	7a1b      	ldrb	r3, [r3, #8]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fb fb24 	bl	800b0ec <netif_get_by_index>
 800faa4:	4603      	mov	r3, r0
 800faa6:	e003      	b.n	800fab0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f002 fead 	bl	8012808 <ip4_route>
 800faae:	4603      	mov	r3, r0
  }
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fab8:	b590      	push	{r4, r7, lr}
 800faba:	b087      	sub	sp, #28
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	603b      	str	r3, [r7, #0]
 800fac4:	4613      	mov	r3, r2
 800fac6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d105      	bne.n	800fada <tcp_create_segment+0x22>
 800face:	4b44      	ldr	r3, [pc, #272]	; (800fbe0 <tcp_create_segment+0x128>)
 800fad0:	22a3      	movs	r2, #163	; 0xa3
 800fad2:	4944      	ldr	r1, [pc, #272]	; (800fbe4 <tcp_create_segment+0x12c>)
 800fad4:	4844      	ldr	r0, [pc, #272]	; (800fbe8 <tcp_create_segment+0x130>)
 800fad6:	f004 fa49 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d105      	bne.n	800faec <tcp_create_segment+0x34>
 800fae0:	4b3f      	ldr	r3, [pc, #252]	; (800fbe0 <tcp_create_segment+0x128>)
 800fae2:	22a4      	movs	r2, #164	; 0xa4
 800fae4:	4941      	ldr	r1, [pc, #260]	; (800fbec <tcp_create_segment+0x134>)
 800fae6:	4840      	ldr	r0, [pc, #256]	; (800fbe8 <tcp_create_segment+0x130>)
 800fae8:	f004 fa40 	bl	8013f6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800faec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800faf0:	009b      	lsls	r3, r3, #2
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	f003 0304 	and.w	r3, r3, #4
 800faf8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fafa:	2003      	movs	r0, #3
 800fafc:	f7fa ff8e 	bl	800aa1c <memp_malloc>
 800fb00:	6138      	str	r0, [r7, #16]
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d104      	bne.n	800fb12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fb08:	68b8      	ldr	r0, [r7, #8]
 800fb0a:	f7fb fe7d 	bl	800b808 <pbuf_free>
    return NULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e061      	b.n	800fbd6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fb18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	68ba      	ldr	r2, [r7, #8]
 800fb24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	891a      	ldrh	r2, [r3, #8]
 800fb2a:	7dfb      	ldrb	r3, [r7, #23]
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d205      	bcs.n	800fb3e <tcp_create_segment+0x86>
 800fb32:	4b2b      	ldr	r3, [pc, #172]	; (800fbe0 <tcp_create_segment+0x128>)
 800fb34:	22b0      	movs	r2, #176	; 0xb0
 800fb36:	492e      	ldr	r1, [pc, #184]	; (800fbf0 <tcp_create_segment+0x138>)
 800fb38:	482b      	ldr	r0, [pc, #172]	; (800fbe8 <tcp_create_segment+0x130>)
 800fb3a:	f004 fa17 	bl	8013f6c <iprintf>
  seg->len = p->tot_len - optlen;
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	891a      	ldrh	r2, [r3, #8]
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	1ad3      	subs	r3, r2, r3
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fb4e:	2114      	movs	r1, #20
 800fb50:	68b8      	ldr	r0, [r7, #8]
 800fb52:	f7fb fdc3 	bl	800b6dc <pbuf_add_header>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d004      	beq.n	800fb66 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fb5c:	6938      	ldr	r0, [r7, #16]
 800fb5e:	f7fd f8d2 	bl	800cd06 <tcp_seg_free>
    return NULL;
 800fb62:	2300      	movs	r3, #0
 800fb64:	e037      	b.n	800fbd6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fb66:	693b      	ldr	r3, [r7, #16]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	693b      	ldr	r3, [r7, #16]
 800fb6e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	8ada      	ldrh	r2, [r3, #22]
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	68dc      	ldr	r4, [r3, #12]
 800fb78:	4610      	mov	r0, r2
 800fb7a:	f7fa fa99 	bl	800a0b0 <lwip_htons>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	8b1a      	ldrh	r2, [r3, #24]
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	68dc      	ldr	r4, [r3, #12]
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7fa fa90 	bl	800a0b0 <lwip_htons>
 800fb90:	4603      	mov	r3, r0
 800fb92:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	68dc      	ldr	r4, [r3, #12]
 800fb98:	6838      	ldr	r0, [r7, #0]
 800fb9a:	f7fa fa9e 	bl	800a0da <lwip_htonl>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fba2:	7dfb      	ldrb	r3, [r7, #23]
 800fba4:	089b      	lsrs	r3, r3, #2
 800fba6:	b2db      	uxtb	r3, r3
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	3305      	adds	r3, #5
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	031b      	lsls	r3, r3, #12
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	79fb      	ldrb	r3, [r7, #7]
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	68dc      	ldr	r4, [r3, #12]
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fa fa76 	bl	800a0b0 <lwip_htons>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	68db      	ldr	r3, [r3, #12]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	749a      	strb	r2, [r3, #18]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	74da      	strb	r2, [r3, #19]
  return seg;
 800fbd4:	693b      	ldr	r3, [r7, #16]
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	371c      	adds	r7, #28
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd90      	pop	{r4, r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	08016964 	.word	0x08016964
 800fbe4:	08016998 	.word	0x08016998
 800fbe8:	080169b8 	.word	0x080169b8
 800fbec:	080169e0 	.word	0x080169e0
 800fbf0:	08016a04 	.word	0x08016a04

0800fbf4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fbf4:	b590      	push	{r4, r7, lr}
 800fbf6:	b08b      	sub	sp, #44	; 0x2c
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	61fb      	str	r3, [r7, #28]
 800fc04:	2300      	movs	r3, #0
 800fc06:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <tcp_split_unsent_seg+0x2c>
 800fc12:	4b95      	ldr	r3, [pc, #596]	; (800fe68 <tcp_split_unsent_seg+0x274>)
 800fc14:	f240 324b 	movw	r2, #843	; 0x34b
 800fc18:	4994      	ldr	r1, [pc, #592]	; (800fe6c <tcp_split_unsent_seg+0x278>)
 800fc1a:	4895      	ldr	r0, [pc, #596]	; (800fe70 <tcp_split_unsent_seg+0x27c>)
 800fc1c:	f004 f9a6 	bl	8013f6c <iprintf>

  useg = pcb->unsent;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc24:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d102      	bne.n	800fc32 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc30:	e116      	b.n	800fe60 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800fc32:	887b      	ldrh	r3, [r7, #2]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d109      	bne.n	800fc4c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fc38:	4b8b      	ldr	r3, [pc, #556]	; (800fe68 <tcp_split_unsent_seg+0x274>)
 800fc3a:	f240 3253 	movw	r2, #851	; 0x353
 800fc3e:	498d      	ldr	r1, [pc, #564]	; (800fe74 <tcp_split_unsent_seg+0x280>)
 800fc40:	488b      	ldr	r0, [pc, #556]	; (800fe70 <tcp_split_unsent_seg+0x27c>)
 800fc42:	f004 f993 	bl	8013f6c <iprintf>
    return ERR_VAL;
 800fc46:	f06f 0305 	mvn.w	r3, #5
 800fc4a:	e109      	b.n	800fe60 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	891b      	ldrh	r3, [r3, #8]
 800fc50:	887a      	ldrh	r2, [r7, #2]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d301      	bcc.n	800fc5a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fc56:	2300      	movs	r3, #0
 800fc58:	e102      	b.n	800fe60 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc5e:	887a      	ldrh	r2, [r7, #2]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d906      	bls.n	800fc72 <tcp_split_unsent_seg+0x7e>
 800fc64:	4b80      	ldr	r3, [pc, #512]	; (800fe68 <tcp_split_unsent_seg+0x274>)
 800fc66:	f240 325b 	movw	r2, #859	; 0x35b
 800fc6a:	4983      	ldr	r1, [pc, #524]	; (800fe78 <tcp_split_unsent_seg+0x284>)
 800fc6c:	4880      	ldr	r0, [pc, #512]	; (800fe70 <tcp_split_unsent_seg+0x27c>)
 800fc6e:	f004 f97d 	bl	8013f6c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	891b      	ldrh	r3, [r3, #8]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d106      	bne.n	800fc88 <tcp_split_unsent_seg+0x94>
 800fc7a:	4b7b      	ldr	r3, [pc, #492]	; (800fe68 <tcp_split_unsent_seg+0x274>)
 800fc7c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fc80:	497e      	ldr	r1, [pc, #504]	; (800fe7c <tcp_split_unsent_seg+0x288>)
 800fc82:	487b      	ldr	r0, [pc, #492]	; (800fe70 <tcp_split_unsent_seg+0x27c>)
 800fc84:	f004 f972 	bl	8013f6c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fc88:	697b      	ldr	r3, [r7, #20]
 800fc8a:	7a9b      	ldrb	r3, [r3, #10]
 800fc8c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fc8e:	7bfb      	ldrb	r3, [r7, #15]
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	f003 0304 	and.w	r3, r3, #4
 800fc98:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	891a      	ldrh	r2, [r3, #8]
 800fc9e:	887b      	ldrh	r3, [r7, #2]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fca4:	7bbb      	ldrb	r3, [r7, #14]
 800fca6:	b29a      	uxth	r2, r3
 800fca8:	89bb      	ldrh	r3, [r7, #12]
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29b      	uxth	r3, r3
 800fcae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcb2:	4619      	mov	r1, r3
 800fcb4:	2036      	movs	r0, #54	; 0x36
 800fcb6:	f7fb fac3 	bl	800b240 <pbuf_alloc>
 800fcba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	f000 80b7 	beq.w	800fe32 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	891a      	ldrh	r2, [r3, #8]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	891b      	ldrh	r3, [r3, #8]
 800fcce:	1ad3      	subs	r3, r2, r3
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	887b      	ldrh	r3, [r7, #2]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	6858      	ldr	r0, [r3, #4]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	685a      	ldr	r2, [r3, #4]
 800fce0:	7bbb      	ldrb	r3, [r7, #14]
 800fce2:	18d1      	adds	r1, r2, r3
 800fce4:	897b      	ldrh	r3, [r7, #10]
 800fce6:	89ba      	ldrh	r2, [r7, #12]
 800fce8:	f7fb ff84 	bl	800bbf4 <pbuf_copy_partial>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	89bb      	ldrh	r3, [r7, #12]
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	f040 809f 	bne.w	800fe36 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	899b      	ldrh	r3, [r3, #12]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fa f9d5 	bl	800a0b0 <lwip_htons>
 800fd06:	4603      	mov	r3, r0
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd0e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fd10:	2300      	movs	r3, #0
 800fd12:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fd14:	7efb      	ldrb	r3, [r7, #27]
 800fd16:	f003 0308 	and.w	r3, r3, #8
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d007      	beq.n	800fd2e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fd1e:	7efb      	ldrb	r3, [r7, #27]
 800fd20:	f023 0308 	bic.w	r3, r3, #8
 800fd24:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fd26:	7ebb      	ldrb	r3, [r7, #26]
 800fd28:	f043 0308 	orr.w	r3, r3, #8
 800fd2c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fd2e:	7efb      	ldrb	r3, [r7, #27]
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d007      	beq.n	800fd48 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fd38:	7efb      	ldrb	r3, [r7, #27]
 800fd3a:	f023 0301 	bic.w	r3, r3, #1
 800fd3e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fd40:	7ebb      	ldrb	r3, [r7, #26]
 800fd42:	f043 0301 	orr.w	r3, r3, #1
 800fd46:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fa f9c3 	bl	800a0da <lwip_htonl>
 800fd54:	4602      	mov	r2, r0
 800fd56:	887b      	ldrh	r3, [r7, #2]
 800fd58:	18d1      	adds	r1, r2, r3
 800fd5a:	7eba      	ldrb	r2, [r7, #26]
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	9300      	str	r3, [sp, #0]
 800fd60:	460b      	mov	r3, r1
 800fd62:	6939      	ldr	r1, [r7, #16]
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7ff fea7 	bl	800fab8 <tcp_create_segment>
 800fd6a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d063      	beq.n	800fe3a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fb fdd4 	bl	800b924 <pbuf_clen>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	461a      	mov	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fd86:	1a9b      	subs	r3, r3, r2
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	6858      	ldr	r0, [r3, #4]
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	891a      	ldrh	r2, [r3, #8]
 800fd9a:	89bb      	ldrh	r3, [r7, #12]
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	4619      	mov	r1, r3
 800fda2:	f7fb fbab 	bl	800b4fc <pbuf_realloc>
  useg->len -= remainder;
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	891a      	ldrh	r2, [r3, #8]
 800fdaa:	89bb      	ldrh	r3, [r7, #12]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	b29c      	uxth	r4, r3
 800fdbc:	7efb      	ldrb	r3, [r7, #27]
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fa f975 	bl	800a0b0 <lwip_htons>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	461a      	mov	r2, r3
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	68db      	ldr	r3, [r3, #12]
 800fdce:	4322      	orrs	r2, r4
 800fdd0:	b292      	uxth	r2, r2
 800fdd2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7fb fda3 	bl	800b924 <pbuf_clen>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461a      	mov	r2, r3
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fde8:	4413      	add	r3, r2
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7fb fd94 	bl	800b924 <pbuf_clen>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	461a      	mov	r2, r3
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe06:	4413      	add	r3, r2
 800fe08:	b29a      	uxth	r2, r3
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	69fb      	ldr	r3, [r7, #28]
 800fe16:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	69fa      	ldr	r2, [r7, #28]
 800fe1c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d103      	bne.n	800fe2e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e016      	b.n	800fe60 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fe32:	bf00      	nop
 800fe34:	e002      	b.n	800fe3c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe36:	bf00      	nop
 800fe38:	e000      	b.n	800fe3c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fe3a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fe3c:	69fb      	ldr	r3, [r7, #28]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d006      	beq.n	800fe50 <tcp_split_unsent_seg+0x25c>
 800fe42:	4b09      	ldr	r3, [pc, #36]	; (800fe68 <tcp_split_unsent_seg+0x274>)
 800fe44:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fe48:	490d      	ldr	r1, [pc, #52]	; (800fe80 <tcp_split_unsent_seg+0x28c>)
 800fe4a:	4809      	ldr	r0, [pc, #36]	; (800fe70 <tcp_split_unsent_seg+0x27c>)
 800fe4c:	f004 f88e 	bl	8013f6c <iprintf>
  if (p != NULL) {
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d002      	beq.n	800fe5c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fe56:	6938      	ldr	r0, [r7, #16]
 800fe58:	f7fb fcd6 	bl	800b808 <pbuf_free>
  }

  return ERR_MEM;
 800fe5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3724      	adds	r7, #36	; 0x24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd90      	pop	{r4, r7, pc}
 800fe68:	08016964 	.word	0x08016964
 800fe6c:	08016cf8 	.word	0x08016cf8
 800fe70:	080169b8 	.word	0x080169b8
 800fe74:	08016d1c 	.word	0x08016d1c
 800fe78:	08016d40 	.word	0x08016d40
 800fe7c:	08016d50 	.word	0x08016d50
 800fe80:	08016d60 	.word	0x08016d60

0800fe84 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fe84:	b590      	push	{r4, r7, lr}
 800fe86:	b085      	sub	sp, #20
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d106      	bne.n	800fea0 <tcp_send_fin+0x1c>
 800fe92:	4b21      	ldr	r3, [pc, #132]	; (800ff18 <tcp_send_fin+0x94>)
 800fe94:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fe98:	4920      	ldr	r1, [pc, #128]	; (800ff1c <tcp_send_fin+0x98>)
 800fe9a:	4821      	ldr	r0, [pc, #132]	; (800ff20 <tcp_send_fin+0x9c>)
 800fe9c:	f004 f866 	bl	8013f6c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d02e      	beq.n	800ff06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	e002      	b.n	800feb6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d1f8      	bne.n	800feb0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	899b      	ldrh	r3, [r3, #12]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fa f8f2 	bl	800a0b0 <lwip_htons>
 800fecc:	4603      	mov	r3, r0
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	f003 0307 	and.w	r3, r3, #7
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d116      	bne.n	800ff06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	68db      	ldr	r3, [r3, #12]
 800fedc:	899b      	ldrh	r3, [r3, #12]
 800fede:	b29c      	uxth	r4, r3
 800fee0:	2001      	movs	r0, #1
 800fee2:	f7fa f8e5 	bl	800a0b0 <lwip_htons>
 800fee6:	4603      	mov	r3, r0
 800fee8:	461a      	mov	r2, r3
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	68db      	ldr	r3, [r3, #12]
 800feee:	4322      	orrs	r2, r4
 800fef0:	b292      	uxth	r2, r2
 800fef2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	8b5b      	ldrh	r3, [r3, #26]
 800fef8:	f043 0320 	orr.w	r3, r3, #32
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ff02:	2300      	movs	r3, #0
 800ff04:	e004      	b.n	800ff10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ff06:	2101      	movs	r1, #1
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 f80b 	bl	800ff24 <tcp_enqueue_flags>
 800ff0e:	4603      	mov	r3, r0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3714      	adds	r7, #20
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd90      	pop	{r4, r7, pc}
 800ff18:	08016964 	.word	0x08016964
 800ff1c:	08016d6c 	.word	0x08016d6c
 800ff20:	080169b8 	.word	0x080169b8

0800ff24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b08a      	sub	sp, #40	; 0x28
 800ff28:	af02      	add	r7, sp, #8
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	460b      	mov	r3, r1
 800ff2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ff30:	2300      	movs	r3, #0
 800ff32:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ff34:	2300      	movs	r3, #0
 800ff36:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ff38:	78fb      	ldrb	r3, [r7, #3]
 800ff3a:	f003 0303 	and.w	r3, r3, #3
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d106      	bne.n	800ff50 <tcp_enqueue_flags+0x2c>
 800ff42:	4b67      	ldr	r3, [pc, #412]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 800ff44:	f240 4211 	movw	r2, #1041	; 0x411
 800ff48:	4966      	ldr	r1, [pc, #408]	; (80100e4 <tcp_enqueue_flags+0x1c0>)
 800ff4a:	4867      	ldr	r0, [pc, #412]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 800ff4c:	f004 f80e 	bl	8013f6c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d106      	bne.n	800ff64 <tcp_enqueue_flags+0x40>
 800ff56:	4b62      	ldr	r3, [pc, #392]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 800ff58:	f240 4213 	movw	r2, #1043	; 0x413
 800ff5c:	4963      	ldr	r1, [pc, #396]	; (80100ec <tcp_enqueue_flags+0x1c8>)
 800ff5e:	4862      	ldr	r0, [pc, #392]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 800ff60:	f004 f804 	bl	8013f6c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	f003 0302 	and.w	r3, r3, #2
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d001      	beq.n	800ff72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff72:	7ffb      	ldrb	r3, [r7, #31]
 800ff74:	009b      	lsls	r3, r3, #2
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	f003 0304 	and.w	r3, r3, #4
 800ff7c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ff7e:	7dfb      	ldrb	r3, [r7, #23]
 800ff80:	b29b      	uxth	r3, r3
 800ff82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff86:	4619      	mov	r1, r3
 800ff88:	2036      	movs	r0, #54	; 0x36
 800ff8a:	f7fb f959 	bl	800b240 <pbuf_alloc>
 800ff8e:	6138      	str	r0, [r7, #16]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d109      	bne.n	800ffaa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	8b5b      	ldrh	r3, [r3, #26]
 800ff9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295
 800ffa8:	e095      	b.n	80100d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	895a      	ldrh	r2, [r3, #10]
 800ffae:	7dfb      	ldrb	r3, [r7, #23]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	d206      	bcs.n	800ffc4 <tcp_enqueue_flags+0xa0>
 800ffb6:	4b4a      	ldr	r3, [pc, #296]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 800ffb8:	f240 4239 	movw	r2, #1081	; 0x439
 800ffbc:	494c      	ldr	r1, [pc, #304]	; (80100f0 <tcp_enqueue_flags+0x1cc>)
 800ffbe:	484a      	ldr	r0, [pc, #296]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 800ffc0:	f003 ffd4 	bl	8013f6c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ffc8:	78fa      	ldrb	r2, [r7, #3]
 800ffca:	7ffb      	ldrb	r3, [r7, #31]
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	6939      	ldr	r1, [r7, #16]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f7ff fd70 	bl	800fab8 <tcp_create_segment>
 800ffd8:	60f8      	str	r0, [r7, #12]
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d109      	bne.n	800fff4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	8b5b      	ldrh	r3, [r3, #26]
 800ffe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe8:	b29a      	uxth	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ffee:	f04f 33ff 	mov.w	r3, #4294967295
 800fff2:	e070      	b.n	80100d6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	f003 0303 	and.w	r3, r3, #3
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d006      	beq.n	801000e <tcp_enqueue_flags+0xea>
 8010000:	4b37      	ldr	r3, [pc, #220]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 8010002:	f240 4242 	movw	r2, #1090	; 0x442
 8010006:	493b      	ldr	r1, [pc, #236]	; (80100f4 <tcp_enqueue_flags+0x1d0>)
 8010008:	4837      	ldr	r0, [pc, #220]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 801000a:	f003 ffaf 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	891b      	ldrh	r3, [r3, #8]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d006      	beq.n	8010024 <tcp_enqueue_flags+0x100>
 8010016:	4b32      	ldr	r3, [pc, #200]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 8010018:	f240 4243 	movw	r2, #1091	; 0x443
 801001c:	4936      	ldr	r1, [pc, #216]	; (80100f8 <tcp_enqueue_flags+0x1d4>)
 801001e:	4832      	ldr	r0, [pc, #200]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 8010020:	f003 ffa4 	bl	8013f6c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010028:	2b00      	cmp	r3, #0
 801002a:	d103      	bne.n	8010034 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	66da      	str	r2, [r3, #108]	; 0x6c
 8010032:	e00d      	b.n	8010050 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010038:	61bb      	str	r3, [r7, #24]
 801003a:	e002      	b.n	8010042 <tcp_enqueue_flags+0x11e>
 801003c:	69bb      	ldr	r3, [r7, #24]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	61bb      	str	r3, [r7, #24]
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d1f8      	bne.n	801003c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	68fa      	ldr	r2, [r7, #12]
 801004e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2200      	movs	r2, #0
 8010054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010058:	78fb      	ldrb	r3, [r7, #3]
 801005a:	f003 0302 	and.w	r3, r3, #2
 801005e:	2b00      	cmp	r3, #0
 8010060:	d104      	bne.n	801006c <tcp_enqueue_flags+0x148>
 8010062:	78fb      	ldrb	r3, [r7, #3]
 8010064:	f003 0301 	and.w	r3, r3, #1
 8010068:	2b00      	cmp	r3, #0
 801006a:	d004      	beq.n	8010076 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010070:	1c5a      	adds	r2, r3, #1
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010076:	78fb      	ldrb	r3, [r7, #3]
 8010078:	f003 0301 	and.w	r3, r3, #1
 801007c:	2b00      	cmp	r3, #0
 801007e:	d006      	beq.n	801008e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	8b5b      	ldrh	r3, [r3, #26]
 8010084:	f043 0320 	orr.w	r3, r3, #32
 8010088:	b29a      	uxth	r2, r3
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	4618      	mov	r0, r3
 8010094:	f7fb fc46 	bl	800b924 <pbuf_clen>
 8010098:	4603      	mov	r3, r0
 801009a:	461a      	mov	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100a2:	4413      	add	r3, r2
 80100a4:	b29a      	uxth	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00e      	beq.n	80100d4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d10a      	bne.n	80100d4 <tcp_enqueue_flags+0x1b0>
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d106      	bne.n	80100d4 <tcp_enqueue_flags+0x1b0>
 80100c6:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <tcp_enqueue_flags+0x1bc>)
 80100c8:	f240 4265 	movw	r2, #1125	; 0x465
 80100cc:	490b      	ldr	r1, [pc, #44]	; (80100fc <tcp_enqueue_flags+0x1d8>)
 80100ce:	4806      	ldr	r0, [pc, #24]	; (80100e8 <tcp_enqueue_flags+0x1c4>)
 80100d0:	f003 ff4c 	bl	8013f6c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80100d4:	2300      	movs	r3, #0
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	08016964 	.word	0x08016964
 80100e4:	08016d88 	.word	0x08016d88
 80100e8:	080169b8 	.word	0x080169b8
 80100ec:	08016de0 	.word	0x08016de0
 80100f0:	08016e00 	.word	0x08016e00
 80100f4:	08016e3c 	.word	0x08016e3c
 80100f8:	08016e54 	.word	0x08016e54
 80100fc:	08016e80 	.word	0x08016e80

08010100 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b08a      	sub	sp, #40	; 0x28
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d106      	bne.n	801011c <tcp_output+0x1c>
 801010e:	4b9e      	ldr	r3, [pc, #632]	; (8010388 <tcp_output+0x288>)
 8010110:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010114:	499d      	ldr	r1, [pc, #628]	; (801038c <tcp_output+0x28c>)
 8010116:	489e      	ldr	r0, [pc, #632]	; (8010390 <tcp_output+0x290>)
 8010118:	f003 ff28 	bl	8013f6c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7d1b      	ldrb	r3, [r3, #20]
 8010120:	2b01      	cmp	r3, #1
 8010122:	d106      	bne.n	8010132 <tcp_output+0x32>
 8010124:	4b98      	ldr	r3, [pc, #608]	; (8010388 <tcp_output+0x288>)
 8010126:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801012a:	499a      	ldr	r1, [pc, #616]	; (8010394 <tcp_output+0x294>)
 801012c:	4898      	ldr	r0, [pc, #608]	; (8010390 <tcp_output+0x290>)
 801012e:	f003 ff1d 	bl	8013f6c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010132:	4b99      	ldr	r3, [pc, #612]	; (8010398 <tcp_output+0x298>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	687a      	ldr	r2, [r7, #4]
 8010138:	429a      	cmp	r2, r3
 801013a:	d101      	bne.n	8010140 <tcp_output+0x40>
    return ERR_OK;
 801013c:	2300      	movs	r3, #0
 801013e:	e1ce      	b.n	80104de <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801014c:	4293      	cmp	r3, r2
 801014e:	bf28      	it	cs
 8010150:	4613      	movcs	r3, r2
 8010152:	b29b      	uxth	r3, r3
 8010154:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801015a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	2b00      	cmp	r3, #0
 8010160:	d10b      	bne.n	801017a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	8b5b      	ldrh	r3, [r3, #26]
 8010166:	f003 0302 	and.w	r3, r3, #2
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 81aa 	beq.w	80104c4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f000 fdcb 	bl	8010d0c <tcp_send_empty_ack>
 8010176:	4603      	mov	r3, r0
 8010178:	e1b1      	b.n	80104de <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801017a:	6879      	ldr	r1, [r7, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3304      	adds	r3, #4
 8010180:	461a      	mov	r2, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff fc7c 	bl	800fa80 <tcp_route>
 8010188:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d102      	bne.n	8010196 <tcp_output+0x96>
    return ERR_RTE;
 8010190:	f06f 0303 	mvn.w	r3, #3
 8010194:	e1a3      	b.n	80104de <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d003      	beq.n	80101a4 <tcp_output+0xa4>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d111      	bne.n	80101c8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d002      	beq.n	80101b0 <tcp_output+0xb0>
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	3304      	adds	r3, #4
 80101ae:	e000      	b.n	80101b2 <tcp_output+0xb2>
 80101b0:	2300      	movs	r3, #0
 80101b2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d102      	bne.n	80101c0 <tcp_output+0xc0>
      return ERR_RTE;
 80101ba:	f06f 0303 	mvn.w	r3, #3
 80101be:	e18e      	b.n	80104de <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80101c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7f9 ff83 	bl	800a0da <lwip_htonl>
 80101d4:	4602      	mov	r2, r0
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101de:	8912      	ldrh	r2, [r2, #8]
 80101e0:	4413      	add	r3, r2
 80101e2:	69ba      	ldr	r2, [r7, #24]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d227      	bcs.n	8010238 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ee:	461a      	mov	r2, r3
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d114      	bne.n	8010220 <tcp_output+0x120>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d110      	bne.n	8010220 <tcp_output+0x120>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10b      	bne.n	8010220 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2200      	movs	r2, #0
 801020c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2201      	movs	r2, #1
 8010214:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	8b5b      	ldrh	r3, [r3, #26]
 8010224:	f003 0302 	and.w	r3, r3, #2
 8010228:	2b00      	cmp	r3, #0
 801022a:	f000 814d 	beq.w	80104c8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 fd6c 	bl	8010d0c <tcp_send_empty_ack>
 8010234:	4603      	mov	r3, r0
 8010236:	e152      	b.n	80104de <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010244:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010246:	6a3b      	ldr	r3, [r7, #32]
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 811c 	beq.w	8010486 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801024e:	e002      	b.n	8010256 <tcp_output+0x156>
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	623b      	str	r3, [r7, #32]
 8010256:	6a3b      	ldr	r3, [r7, #32]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1f8      	bne.n	8010250 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801025e:	e112      	b.n	8010486 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	899b      	ldrh	r3, [r3, #12]
 8010266:	b29b      	uxth	r3, r3
 8010268:	4618      	mov	r0, r3
 801026a:	f7f9 ff21 	bl	800a0b0 <lwip_htons>
 801026e:	4603      	mov	r3, r0
 8010270:	b2db      	uxtb	r3, r3
 8010272:	f003 0304 	and.w	r3, r3, #4
 8010276:	2b00      	cmp	r3, #0
 8010278:	d006      	beq.n	8010288 <tcp_output+0x188>
 801027a:	4b43      	ldr	r3, [pc, #268]	; (8010388 <tcp_output+0x288>)
 801027c:	f240 5236 	movw	r2, #1334	; 0x536
 8010280:	4946      	ldr	r1, [pc, #280]	; (801039c <tcp_output+0x29c>)
 8010282:	4843      	ldr	r0, [pc, #268]	; (8010390 <tcp_output+0x290>)
 8010284:	f003 fe72 	bl	8013f6c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801028c:	2b00      	cmp	r3, #0
 801028e:	d01f      	beq.n	80102d0 <tcp_output+0x1d0>
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	8b5b      	ldrh	r3, [r3, #26]
 8010294:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010298:	2b00      	cmp	r3, #0
 801029a:	d119      	bne.n	80102d0 <tcp_output+0x1d0>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d00b      	beq.n	80102bc <tcp_output+0x1bc>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d110      	bne.n	80102d0 <tcp_output+0x1d0>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102b2:	891a      	ldrh	r2, [r3, #8]
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d209      	bcs.n	80102d0 <tcp_output+0x1d0>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d004      	beq.n	80102d0 <tcp_output+0x1d0>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102cc:	2b08      	cmp	r3, #8
 80102ce:	d901      	bls.n	80102d4 <tcp_output+0x1d4>
 80102d0:	2301      	movs	r3, #1
 80102d2:	e000      	b.n	80102d6 <tcp_output+0x1d6>
 80102d4:	2300      	movs	r3, #0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	8b5b      	ldrh	r3, [r3, #26]
 80102de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 80e4 	beq.w	80104b0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	7d1b      	ldrb	r3, [r3, #20]
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d00d      	beq.n	801030c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	899b      	ldrh	r3, [r3, #12]
 80102f6:	b29c      	uxth	r4, r3
 80102f8:	2010      	movs	r0, #16
 80102fa:	f7f9 fed9 	bl	800a0b0 <lwip_htons>
 80102fe:	4603      	mov	r3, r0
 8010300:	461a      	mov	r2, r3
 8010302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	4322      	orrs	r2, r4
 8010308:	b292      	uxth	r2, r2
 801030a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010312:	f000 f909 	bl	8010528 <tcp_output_segment>
 8010316:	4603      	mov	r3, r0
 8010318:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801031a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d009      	beq.n	8010336 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	8b5b      	ldrh	r3, [r3, #26]
 8010326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801032a:	b29a      	uxth	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	835a      	strh	r2, [r3, #26]
      return err;
 8010330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010334:	e0d3      	b.n	80104de <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010338:	681a      	ldr	r2, [r3, #0]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	7d1b      	ldrb	r3, [r3, #20]
 8010342:	2b02      	cmp	r3, #2
 8010344:	d006      	beq.n	8010354 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	8b5b      	ldrh	r3, [r3, #26]
 801034a:	f023 0303 	bic.w	r3, r3, #3
 801034e:	b29a      	uxth	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	4618      	mov	r0, r3
 801035c:	f7f9 febd 	bl	800a0da <lwip_htonl>
 8010360:	4604      	mov	r4, r0
 8010362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010364:	891b      	ldrh	r3, [r3, #8]
 8010366:	461d      	mov	r5, r3
 8010368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	899b      	ldrh	r3, [r3, #12]
 801036e:	b29b      	uxth	r3, r3
 8010370:	4618      	mov	r0, r3
 8010372:	f7f9 fe9d 	bl	800a0b0 <lwip_htons>
 8010376:	4603      	mov	r3, r0
 8010378:	b2db      	uxtb	r3, r3
 801037a:	f003 0303 	and.w	r3, r3, #3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00e      	beq.n	80103a0 <tcp_output+0x2a0>
 8010382:	2301      	movs	r3, #1
 8010384:	e00d      	b.n	80103a2 <tcp_output+0x2a2>
 8010386:	bf00      	nop
 8010388:	08016964 	.word	0x08016964
 801038c:	08016ea8 	.word	0x08016ea8
 8010390:	080169b8 	.word	0x080169b8
 8010394:	08016ec0 	.word	0x08016ec0
 8010398:	2000b958 	.word	0x2000b958
 801039c:	08016ee8 	.word	0x08016ee8
 80103a0:	2300      	movs	r3, #0
 80103a2:	442b      	add	r3, r5
 80103a4:	4423      	add	r3, r4
 80103a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	1ad3      	subs	r3, r2, r3
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	da02      	bge.n	80103ba <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	68ba      	ldr	r2, [r7, #8]
 80103b8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	891b      	ldrh	r3, [r3, #8]
 80103be:	461c      	mov	r4, r3
 80103c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	899b      	ldrh	r3, [r3, #12]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7f9 fe71 	bl	800a0b0 <lwip_htons>
 80103ce:	4603      	mov	r3, r0
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	f003 0303 	and.w	r3, r3, #3
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d001      	beq.n	80103de <tcp_output+0x2de>
 80103da:	2301      	movs	r3, #1
 80103dc:	e000      	b.n	80103e0 <tcp_output+0x2e0>
 80103de:	2300      	movs	r3, #0
 80103e0:	4423      	add	r3, r4
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d049      	beq.n	801047a <tcp_output+0x37a>
      seg->next = NULL;
 80103e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103e8:	2200      	movs	r2, #0
 80103ea:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d105      	bne.n	8010400 <tcp_output+0x300>
        pcb->unacked = seg;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103f8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80103fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fc:	623b      	str	r3, [r7, #32]
 80103fe:	e03f      	b.n	8010480 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	4618      	mov	r0, r3
 8010408:	f7f9 fe67 	bl	800a0da <lwip_htonl>
 801040c:	4604      	mov	r4, r0
 801040e:	6a3b      	ldr	r3, [r7, #32]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	f7f9 fe60 	bl	800a0da <lwip_htonl>
 801041a:	4603      	mov	r3, r0
 801041c:	1ae3      	subs	r3, r4, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	da24      	bge.n	801046c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3370      	adds	r3, #112	; 0x70
 8010426:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010428:	e002      	b.n	8010430 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d011      	beq.n	801045c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	68db      	ldr	r3, [r3, #12]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	4618      	mov	r0, r3
 8010442:	f7f9 fe4a 	bl	800a0da <lwip_htonl>
 8010446:	4604      	mov	r4, r0
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	4618      	mov	r0, r3
 8010450:	f7f9 fe43 	bl	800a0da <lwip_htonl>
 8010454:	4603      	mov	r3, r0
 8010456:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010458:	2b00      	cmp	r3, #0
 801045a:	dbe6      	blt.n	801042a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801045c:	69fb      	ldr	r3, [r7, #28]
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010462:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010464:	69fb      	ldr	r3, [r7, #28]
 8010466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	e009      	b.n	8010480 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801046c:	6a3b      	ldr	r3, [r7, #32]
 801046e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010470:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010472:	6a3b      	ldr	r3, [r7, #32]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	623b      	str	r3, [r7, #32]
 8010478:	e002      	b.n	8010480 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801047a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801047c:	f7fc fc43 	bl	800cd06 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	2b00      	cmp	r3, #0
 801048a:	d012      	beq.n	80104b2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	4618      	mov	r0, r3
 8010494:	f7f9 fe21 	bl	800a0da <lwip_htonl>
 8010498:	4602      	mov	r2, r0
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104a2:	8912      	ldrh	r2, [r2, #8]
 80104a4:	4413      	add	r3, r2
  while (seg != NULL &&
 80104a6:	69ba      	ldr	r2, [r7, #24]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	f4bf aed9 	bcs.w	8010260 <tcp_output+0x160>
 80104ae:	e000      	b.n	80104b2 <tcp_output+0x3b2>
      break;
 80104b0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d108      	bne.n	80104cc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2200      	movs	r2, #0
 80104be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80104c2:	e004      	b.n	80104ce <tcp_output+0x3ce>
    goto output_done;
 80104c4:	bf00      	nop
 80104c6:	e002      	b.n	80104ce <tcp_output+0x3ce>
    goto output_done;
 80104c8:	bf00      	nop
 80104ca:	e000      	b.n	80104ce <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80104cc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	8b5b      	ldrh	r3, [r3, #26]
 80104d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3728      	adds	r7, #40	; 0x28
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bdb0      	pop	{r4, r5, r7, pc}
 80104e6:	bf00      	nop

080104e8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <tcp_output_segment_busy+0x1c>
 80104f6:	4b09      	ldr	r3, [pc, #36]	; (801051c <tcp_output_segment_busy+0x34>)
 80104f8:	f240 529a 	movw	r2, #1434	; 0x59a
 80104fc:	4908      	ldr	r1, [pc, #32]	; (8010520 <tcp_output_segment_busy+0x38>)
 80104fe:	4809      	ldr	r0, [pc, #36]	; (8010524 <tcp_output_segment_busy+0x3c>)
 8010500:	f003 fd34 	bl	8013f6c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	7b9b      	ldrb	r3, [r3, #14]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d001      	beq.n	8010512 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801050e:	2301      	movs	r3, #1
 8010510:	e000      	b.n	8010514 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	08016964 	.word	0x08016964
 8010520:	08016f00 	.word	0x08016f00
 8010524:	080169b8 	.word	0x080169b8

08010528 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010528:	b5b0      	push	{r4, r5, r7, lr}
 801052a:	b08c      	sub	sp, #48	; 0x30
 801052c:	af04      	add	r7, sp, #16
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_output_segment+0x20>
 801053a:	4b63      	ldr	r3, [pc, #396]	; (80106c8 <tcp_output_segment+0x1a0>)
 801053c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010540:	4962      	ldr	r1, [pc, #392]	; (80106cc <tcp_output_segment+0x1a4>)
 8010542:	4863      	ldr	r0, [pc, #396]	; (80106d0 <tcp_output_segment+0x1a8>)
 8010544:	f003 fd12 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d106      	bne.n	801055c <tcp_output_segment+0x34>
 801054e:	4b5e      	ldr	r3, [pc, #376]	; (80106c8 <tcp_output_segment+0x1a0>)
 8010550:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010554:	495f      	ldr	r1, [pc, #380]	; (80106d4 <tcp_output_segment+0x1ac>)
 8010556:	485e      	ldr	r0, [pc, #376]	; (80106d0 <tcp_output_segment+0x1a8>)
 8010558:	f003 fd08 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d106      	bne.n	8010570 <tcp_output_segment+0x48>
 8010562:	4b59      	ldr	r3, [pc, #356]	; (80106c8 <tcp_output_segment+0x1a0>)
 8010564:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010568:	495b      	ldr	r1, [pc, #364]	; (80106d8 <tcp_output_segment+0x1b0>)
 801056a:	4859      	ldr	r0, [pc, #356]	; (80106d0 <tcp_output_segment+0x1a8>)
 801056c:	f003 fcfe 	bl	8013f6c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f7ff ffb9 	bl	80104e8 <tcp_output_segment_busy>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d001      	beq.n	8010580 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	e09f      	b.n	80106c0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	68dc      	ldr	r4, [r3, #12]
 8010588:	4610      	mov	r0, r2
 801058a:	f7f9 fda6 	bl	800a0da <lwip_htonl>
 801058e:	4603      	mov	r3, r0
 8010590:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	68dc      	ldr	r4, [r3, #12]
 801059a:	4610      	mov	r0, r2
 801059c:	f7f9 fd88 	bl	800a0b0 <lwip_htons>
 80105a0:	4603      	mov	r3, r0
 80105a2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80105ac:	441a      	add	r2, r3
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	3314      	adds	r3, #20
 80105b8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	7a9b      	ldrb	r3, [r3, #10]
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d015      	beq.n	80105f2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	3304      	adds	r3, #4
 80105ca:	461a      	mov	r2, r3
 80105cc:	6879      	ldr	r1, [r7, #4]
 80105ce:	f44f 7006 	mov.w	r0, #536	; 0x218
 80105d2:	f7fc fe8f 	bl	800d2f4 <tcp_eff_send_mss_netif>
 80105d6:	4603      	mov	r3, r0
 80105d8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80105da:	8b7b      	ldrh	r3, [r7, #26]
 80105dc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7f9 fd7a 	bl	800a0da <lwip_htonl>
 80105e6:	4602      	mov	r2, r0
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	601a      	str	r2, [r3, #0]
    opts += 1;
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	3304      	adds	r3, #4
 80105f0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	da02      	bge.n	8010602 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2200      	movs	r2, #0
 8010600:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010606:	2b00      	cmp	r3, #0
 8010608:	d10c      	bne.n	8010624 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801060a:	4b34      	ldr	r3, [pc, #208]	; (80106dc <tcp_output_segment+0x1b4>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	685b      	ldr	r3, [r3, #4]
 8010618:	4618      	mov	r0, r3
 801061a:	f7f9 fd5e 	bl	800a0da <lwip_htonl>
 801061e:	4602      	mov	r2, r0
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	68da      	ldr	r2, [r3, #12]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	685b      	ldr	r3, [r3, #4]
 801062e:	1ad3      	subs	r3, r2, r3
 8010630:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	8959      	ldrh	r1, [r3, #10]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	685b      	ldr	r3, [r3, #4]
 801063c:	8b3a      	ldrh	r2, [r7, #24]
 801063e:	1a8a      	subs	r2, r1, r2
 8010640:	b292      	uxth	r2, r2
 8010642:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	685b      	ldr	r3, [r3, #4]
 8010648:	8919      	ldrh	r1, [r3, #8]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	8b3a      	ldrh	r2, [r7, #24]
 8010650:	1a8a      	subs	r2, r1, r2
 8010652:	b292      	uxth	r2, r2
 8010654:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	68fa      	ldr	r2, [r7, #12]
 801065c:	68d2      	ldr	r2, [r2, #12]
 801065e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	2200      	movs	r2, #0
 8010666:	741a      	strb	r2, [r3, #16]
 8010668:	2200      	movs	r2, #0
 801066a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	68db      	ldr	r3, [r3, #12]
 8010670:	f103 0214 	add.w	r2, r3, #20
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	7a9b      	ldrb	r3, [r3, #10]
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	f003 0304 	and.w	r3, r3, #4
 801067e:	4413      	add	r3, r2
 8010680:	69fa      	ldr	r2, [r7, #28]
 8010682:	429a      	cmp	r2, r3
 8010684:	d006      	beq.n	8010694 <tcp_output_segment+0x16c>
 8010686:	4b10      	ldr	r3, [pc, #64]	; (80106c8 <tcp_output_segment+0x1a0>)
 8010688:	f240 621c 	movw	r2, #1564	; 0x61c
 801068c:	4914      	ldr	r1, [pc, #80]	; (80106e0 <tcp_output_segment+0x1b8>)
 801068e:	4810      	ldr	r0, [pc, #64]	; (80106d0 <tcp_output_segment+0x1a8>)
 8010690:	f003 fc6c 	bl	8013f6c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6858      	ldr	r0, [r3, #4]
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	1d1c      	adds	r4, r3, #4
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	7add      	ldrb	r5, [r3, #11]
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	7a9b      	ldrb	r3, [r3, #10]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	9202      	str	r2, [sp, #8]
 80106aa:	2206      	movs	r2, #6
 80106ac:	9201      	str	r2, [sp, #4]
 80106ae:	9300      	str	r3, [sp, #0]
 80106b0:	462b      	mov	r3, r5
 80106b2:	4622      	mov	r2, r4
 80106b4:	f002 fa66 	bl	8012b84 <ip4_output_if>
 80106b8:	4603      	mov	r3, r0
 80106ba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80106bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3720      	adds	r7, #32
 80106c4:	46bd      	mov	sp, r7
 80106c6:	bdb0      	pop	{r4, r5, r7, pc}
 80106c8:	08016964 	.word	0x08016964
 80106cc:	08016f28 	.word	0x08016f28
 80106d0:	080169b8 	.word	0x080169b8
 80106d4:	08016f48 	.word	0x08016f48
 80106d8:	08016f68 	.word	0x08016f68
 80106dc:	2000b948 	.word	0x2000b948
 80106e0:	08016f8c 	.word	0x08016f8c

080106e4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80106e4:	b5b0      	push	{r4, r5, r7, lr}
 80106e6:	b084      	sub	sp, #16
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d106      	bne.n	8010700 <tcp_rexmit_rto_prepare+0x1c>
 80106f2:	4b31      	ldr	r3, [pc, #196]	; (80107b8 <tcp_rexmit_rto_prepare+0xd4>)
 80106f4:	f240 6263 	movw	r2, #1635	; 0x663
 80106f8:	4930      	ldr	r1, [pc, #192]	; (80107bc <tcp_rexmit_rto_prepare+0xd8>)
 80106fa:	4831      	ldr	r0, [pc, #196]	; (80107c0 <tcp_rexmit_rto_prepare+0xdc>)
 80106fc:	f003 fc36 	bl	8013f6c <iprintf>

  if (pcb->unacked == NULL) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010704:	2b00      	cmp	r3, #0
 8010706:	d102      	bne.n	801070e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010708:	f06f 0305 	mvn.w	r3, #5
 801070c:	e050      	b.n	80107b0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010712:	60fb      	str	r3, [r7, #12]
 8010714:	e00b      	b.n	801072e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f7ff fee6 	bl	80104e8 <tcp_output_segment_busy>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010722:	f06f 0305 	mvn.w	r3, #5
 8010726:	e043      	b.n	80107b0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	60fb      	str	r3, [r7, #12]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1ef      	bne.n	8010716 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f7ff fed6 	bl	80104e8 <tcp_output_segment_busy>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d002      	beq.n	8010748 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010742:	f06f 0305 	mvn.w	r3, #5
 8010746:	e033      	b.n	80107b0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2200      	movs	r2, #0
 801075c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	8b5b      	ldrh	r3, [r3, #26]
 8010762:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	4618      	mov	r0, r3
 8010774:	f7f9 fcb1 	bl	800a0da <lwip_htonl>
 8010778:	4604      	mov	r4, r0
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	891b      	ldrh	r3, [r3, #8]
 801077e:	461d      	mov	r5, r3
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	68db      	ldr	r3, [r3, #12]
 8010784:	899b      	ldrh	r3, [r3, #12]
 8010786:	b29b      	uxth	r3, r3
 8010788:	4618      	mov	r0, r3
 801078a:	f7f9 fc91 	bl	800a0b0 <lwip_htons>
 801078e:	4603      	mov	r3, r0
 8010790:	b2db      	uxtb	r3, r3
 8010792:	f003 0303 	and.w	r3, r3, #3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d001      	beq.n	801079e <tcp_rexmit_rto_prepare+0xba>
 801079a:	2301      	movs	r3, #1
 801079c:	e000      	b.n	80107a0 <tcp_rexmit_rto_prepare+0xbc>
 801079e:	2300      	movs	r3, #0
 80107a0:	442b      	add	r3, r5
 80107a2:	18e2      	adds	r2, r4, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bdb0      	pop	{r4, r5, r7, pc}
 80107b8:	08016964 	.word	0x08016964
 80107bc:	08016fa0 	.word	0x08016fa0
 80107c0:	080169b8 	.word	0x080169b8

080107c4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d106      	bne.n	80107e0 <tcp_rexmit_rto_commit+0x1c>
 80107d2:	4b0d      	ldr	r3, [pc, #52]	; (8010808 <tcp_rexmit_rto_commit+0x44>)
 80107d4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80107d8:	490c      	ldr	r1, [pc, #48]	; (801080c <tcp_rexmit_rto_commit+0x48>)
 80107da:	480d      	ldr	r0, [pc, #52]	; (8010810 <tcp_rexmit_rto_commit+0x4c>)
 80107dc:	f003 fbc6 	bl	8013f6c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107e6:	2bff      	cmp	r3, #255	; 0xff
 80107e8:	d007      	beq.n	80107fa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107f0:	3301      	adds	r3, #1
 80107f2:	b2da      	uxtb	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7ff fc80 	bl	8010100 <tcp_output>
}
 8010800:	bf00      	nop
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	08016964 	.word	0x08016964
 801080c:	08016fc4 	.word	0x08016fc4
 8010810:	080169b8 	.word	0x080169b8

08010814 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010814:	b580      	push	{r7, lr}
 8010816:	b082      	sub	sp, #8
 8010818:	af00      	add	r7, sp, #0
 801081a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d106      	bne.n	8010830 <tcp_rexmit_rto+0x1c>
 8010822:	4b0a      	ldr	r3, [pc, #40]	; (801084c <tcp_rexmit_rto+0x38>)
 8010824:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010828:	4909      	ldr	r1, [pc, #36]	; (8010850 <tcp_rexmit_rto+0x3c>)
 801082a:	480a      	ldr	r0, [pc, #40]	; (8010854 <tcp_rexmit_rto+0x40>)
 801082c:	f003 fb9e 	bl	8013f6c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f7ff ff57 	bl	80106e4 <tcp_rexmit_rto_prepare>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d102      	bne.n	8010842 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff ffc1 	bl	80107c4 <tcp_rexmit_rto_commit>
  }
}
 8010842:	bf00      	nop
 8010844:	3708      	adds	r7, #8
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	08016964 	.word	0x08016964
 8010850:	08016fe8 	.word	0x08016fe8
 8010854:	080169b8 	.word	0x080169b8

08010858 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010858:	b590      	push	{r4, r7, lr}
 801085a:	b085      	sub	sp, #20
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d106      	bne.n	8010874 <tcp_rexmit+0x1c>
 8010866:	4b2f      	ldr	r3, [pc, #188]	; (8010924 <tcp_rexmit+0xcc>)
 8010868:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801086c:	492e      	ldr	r1, [pc, #184]	; (8010928 <tcp_rexmit+0xd0>)
 801086e:	482f      	ldr	r0, [pc, #188]	; (801092c <tcp_rexmit+0xd4>)
 8010870:	f003 fb7c 	bl	8013f6c <iprintf>

  if (pcb->unacked == NULL) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010878:	2b00      	cmp	r3, #0
 801087a:	d102      	bne.n	8010882 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801087c:	f06f 0305 	mvn.w	r3, #5
 8010880:	e04c      	b.n	801091c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010886:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010888:	68b8      	ldr	r0, [r7, #8]
 801088a:	f7ff fe2d 	bl	80104e8 <tcp_output_segment_busy>
 801088e:	4603      	mov	r3, r0
 8010890:	2b00      	cmp	r3, #0
 8010892:	d002      	beq.n	801089a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010894:	f06f 0305 	mvn.w	r3, #5
 8010898:	e040      	b.n	801091c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	336c      	adds	r3, #108	; 0x6c
 80108a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80108a8:	e002      	b.n	80108b0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d011      	beq.n	80108dc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7f9 fc0a 	bl	800a0da <lwip_htonl>
 80108c6:	4604      	mov	r4, r0
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	68db      	ldr	r3, [r3, #12]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7f9 fc03 	bl	800a0da <lwip_htonl>
 80108d4:	4603      	mov	r3, r0
 80108d6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80108d8:	2b00      	cmp	r3, #0
 80108da:	dbe6      	blt.n	80108aa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	68ba      	ldr	r2, [r7, #8]
 80108e8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d103      	bne.n	80108fa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2200      	movs	r2, #0
 80108f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010900:	2bff      	cmp	r3, #255	; 0xff
 8010902:	d007      	beq.n	8010914 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801090a:	3301      	adds	r3, #1
 801090c:	b2da      	uxtb	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2200      	movs	r2, #0
 8010918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801091a:	2300      	movs	r3, #0
}
 801091c:	4618      	mov	r0, r3
 801091e:	3714      	adds	r7, #20
 8010920:	46bd      	mov	sp, r7
 8010922:	bd90      	pop	{r4, r7, pc}
 8010924:	08016964 	.word	0x08016964
 8010928:	08017004 	.word	0x08017004
 801092c:	080169b8 	.word	0x080169b8

08010930 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d106      	bne.n	801094c <tcp_rexmit_fast+0x1c>
 801093e:	4b2a      	ldr	r3, [pc, #168]	; (80109e8 <tcp_rexmit_fast+0xb8>)
 8010940:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010944:	4929      	ldr	r1, [pc, #164]	; (80109ec <tcp_rexmit_fast+0xbc>)
 8010946:	482a      	ldr	r0, [pc, #168]	; (80109f0 <tcp_rexmit_fast+0xc0>)
 8010948:	f003 fb10 	bl	8013f6c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010950:	2b00      	cmp	r3, #0
 8010952:	d045      	beq.n	80109e0 <tcp_rexmit_fast+0xb0>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8b5b      	ldrh	r3, [r3, #26]
 8010958:	f003 0304 	and.w	r3, r3, #4
 801095c:	2b00      	cmp	r3, #0
 801095e:	d13f      	bne.n	80109e0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff ff79 	bl	8010858 <tcp_rexmit>
 8010966:	4603      	mov	r3, r0
 8010968:	2b00      	cmp	r3, #0
 801096a:	d139      	bne.n	80109e0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010978:	4293      	cmp	r3, r2
 801097a:	bf28      	it	cs
 801097c:	4613      	movcs	r3, r2
 801097e:	b29b      	uxth	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	da00      	bge.n	8010986 <tcp_rexmit_fast+0x56>
 8010984:	3301      	adds	r3, #1
 8010986:	105b      	asrs	r3, r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010996:	461a      	mov	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801099c:	005b      	lsls	r3, r3, #1
 801099e:	429a      	cmp	r2, r3
 80109a0:	d206      	bcs.n	80109b0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ba:	4619      	mov	r1, r3
 80109bc:	0049      	lsls	r1, r1, #1
 80109be:	440b      	add	r3, r1
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	4413      	add	r3, r2
 80109c4:	b29a      	uxth	r2, r3
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	8b5b      	ldrh	r3, [r3, #26]
 80109d0:	f043 0304 	orr.w	r3, r3, #4
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2200      	movs	r2, #0
 80109de:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80109e0:	bf00      	nop
 80109e2:	3708      	adds	r7, #8
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}
 80109e8:	08016964 	.word	0x08016964
 80109ec:	0801701c 	.word	0x0801701c
 80109f0:	080169b8 	.word	0x080169b8

080109f4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b086      	sub	sp, #24
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	607b      	str	r3, [r7, #4]
 80109fe:	460b      	mov	r3, r1
 8010a00:	817b      	strh	r3, [r7, #10]
 8010a02:	4613      	mov	r3, r2
 8010a04:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010a06:	897a      	ldrh	r2, [r7, #10]
 8010a08:	893b      	ldrh	r3, [r7, #8]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	3314      	adds	r3, #20
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a16:	4619      	mov	r1, r3
 8010a18:	2022      	movs	r0, #34	; 0x22
 8010a1a:	f7fa fc11 	bl	800b240 <pbuf_alloc>
 8010a1e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d04d      	beq.n	8010ac2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010a26:	897b      	ldrh	r3, [r7, #10]
 8010a28:	3313      	adds	r3, #19
 8010a2a:	697a      	ldr	r2, [r7, #20]
 8010a2c:	8952      	ldrh	r2, [r2, #10]
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	db06      	blt.n	8010a40 <tcp_output_alloc_header_common+0x4c>
 8010a32:	4b26      	ldr	r3, [pc, #152]	; (8010acc <tcp_output_alloc_header_common+0xd8>)
 8010a34:	f240 7223 	movw	r2, #1827	; 0x723
 8010a38:	4925      	ldr	r1, [pc, #148]	; (8010ad0 <tcp_output_alloc_header_common+0xdc>)
 8010a3a:	4826      	ldr	r0, [pc, #152]	; (8010ad4 <tcp_output_alloc_header_common+0xe0>)
 8010a3c:	f003 fa96 	bl	8013f6c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010a46:	8c3b      	ldrh	r3, [r7, #32]
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f9 fb31 	bl	800a0b0 <lwip_htons>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	461a      	mov	r2, r3
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f9 fb29 	bl	800a0b0 <lwip_htons>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	461a      	mov	r2, r3
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010a6c:	68f8      	ldr	r0, [r7, #12]
 8010a6e:	f7f9 fb34 	bl	800a0da <lwip_htonl>
 8010a72:	4602      	mov	r2, r0
 8010a74:	693b      	ldr	r3, [r7, #16]
 8010a76:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010a78:	897b      	ldrh	r3, [r7, #10]
 8010a7a:	089b      	lsrs	r3, r3, #2
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3305      	adds	r3, #5
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	031b      	lsls	r3, r3, #12
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7f9 fb0d 	bl	800a0b0 <lwip_htons>
 8010a96:	4603      	mov	r3, r0
 8010a98:	461a      	mov	r2, r3
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7f9 fb05 	bl	800a0b0 <lwip_htons>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	741a      	strb	r2, [r3, #16]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2200      	movs	r2, #0
 8010abc:	749a      	strb	r2, [r3, #18]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010ac2:	697b      	ldr	r3, [r7, #20]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3718      	adds	r7, #24
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	08016964 	.word	0x08016964
 8010ad0:	0801703c 	.word	0x0801703c
 8010ad4:	080169b8 	.word	0x080169b8

08010ad8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010ad8:	b5b0      	push	{r4, r5, r7, lr}
 8010ada:	b08a      	sub	sp, #40	; 0x28
 8010adc:	af04      	add	r7, sp, #16
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	607b      	str	r3, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	817b      	strh	r3, [r7, #10]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d106      	bne.n	8010afe <tcp_output_alloc_header+0x26>
 8010af0:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <tcp_output_alloc_header+0x70>)
 8010af2:	f240 7242 	movw	r2, #1858	; 0x742
 8010af6:	4915      	ldr	r1, [pc, #84]	; (8010b4c <tcp_output_alloc_header+0x74>)
 8010af8:	4815      	ldr	r0, [pc, #84]	; (8010b50 <tcp_output_alloc_header+0x78>)
 8010afa:	f003 fa37 	bl	8013f6c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	8adb      	ldrh	r3, [r3, #22]
 8010b06:	68fa      	ldr	r2, [r7, #12]
 8010b08:	8b12      	ldrh	r2, [r2, #24]
 8010b0a:	68f9      	ldr	r1, [r7, #12]
 8010b0c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010b0e:	893d      	ldrh	r5, [r7, #8]
 8010b10:	897c      	ldrh	r4, [r7, #10]
 8010b12:	9103      	str	r1, [sp, #12]
 8010b14:	2110      	movs	r1, #16
 8010b16:	9102      	str	r1, [sp, #8]
 8010b18:	9201      	str	r2, [sp, #4]
 8010b1a:	9300      	str	r3, [sp, #0]
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	462a      	mov	r2, r5
 8010b20:	4621      	mov	r1, r4
 8010b22:	f7ff ff67 	bl	80109f4 <tcp_output_alloc_header_common>
 8010b26:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d006      	beq.n	8010b3c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b36:	441a      	add	r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010b3c:	697b      	ldr	r3, [r7, #20]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bdb0      	pop	{r4, r5, r7, pc}
 8010b46:	bf00      	nop
 8010b48:	08016964 	.word	0x08016964
 8010b4c:	0801706c 	.word	0x0801706c
 8010b50:	080169b8 	.word	0x080169b8

08010b54 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b088      	sub	sp, #32
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	60f8      	str	r0, [r7, #12]
 8010b5c:	60b9      	str	r1, [r7, #8]
 8010b5e:	4611      	mov	r1, r2
 8010b60:	461a      	mov	r2, r3
 8010b62:	460b      	mov	r3, r1
 8010b64:	71fb      	strb	r3, [r7, #7]
 8010b66:	4613      	mov	r3, r2
 8010b68:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <tcp_output_fill_options+0x2e>
 8010b74:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <tcp_output_fill_options+0x70>)
 8010b76:	f240 7256 	movw	r2, #1878	; 0x756
 8010b7a:	4913      	ldr	r1, [pc, #76]	; (8010bc8 <tcp_output_fill_options+0x74>)
 8010b7c:	4813      	ldr	r0, [pc, #76]	; (8010bcc <tcp_output_fill_options+0x78>)
 8010b7e:	f003 f9f5 	bl	8013f6c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010b88:	69bb      	ldr	r3, [r7, #24]
 8010b8a:	3314      	adds	r3, #20
 8010b8c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	f103 0214 	add.w	r2, r3, #20
 8010b94:	8bfb      	ldrh	r3, [r7, #30]
 8010b96:	009b      	lsls	r3, r3, #2
 8010b98:	4619      	mov	r1, r3
 8010b9a:	79fb      	ldrb	r3, [r7, #7]
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	f003 0304 	and.w	r3, r3, #4
 8010ba2:	440b      	add	r3, r1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	697a      	ldr	r2, [r7, #20]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d006      	beq.n	8010bba <tcp_output_fill_options+0x66>
 8010bac:	4b05      	ldr	r3, [pc, #20]	; (8010bc4 <tcp_output_fill_options+0x70>)
 8010bae:	f240 7275 	movw	r2, #1909	; 0x775
 8010bb2:	4907      	ldr	r1, [pc, #28]	; (8010bd0 <tcp_output_fill_options+0x7c>)
 8010bb4:	4805      	ldr	r0, [pc, #20]	; (8010bcc <tcp_output_fill_options+0x78>)
 8010bb6:	f003 f9d9 	bl	8013f6c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010bba:	bf00      	nop
 8010bbc:	3720      	adds	r7, #32
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	08016964 	.word	0x08016964
 8010bc8:	08017094 	.word	0x08017094
 8010bcc:	080169b8 	.word	0x080169b8
 8010bd0:	08016f8c 	.word	0x08016f8c

08010bd4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b08a      	sub	sp, #40	; 0x28
 8010bd8:	af04      	add	r7, sp, #16
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	607a      	str	r2, [r7, #4]
 8010be0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d106      	bne.n	8010bf6 <tcp_output_control_segment+0x22>
 8010be8:	4b1c      	ldr	r3, [pc, #112]	; (8010c5c <tcp_output_control_segment+0x88>)
 8010bea:	f240 7287 	movw	r2, #1927	; 0x787
 8010bee:	491c      	ldr	r1, [pc, #112]	; (8010c60 <tcp_output_control_segment+0x8c>)
 8010bf0:	481c      	ldr	r0, [pc, #112]	; (8010c64 <tcp_output_control_segment+0x90>)
 8010bf2:	f003 f9bb 	bl	8013f6c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010bf6:	683a      	ldr	r2, [r7, #0]
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f7fe ff40 	bl	800fa80 <tcp_route>
 8010c00:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d102      	bne.n	8010c0e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010c08:	23fc      	movs	r3, #252	; 0xfc
 8010c0a:	75fb      	strb	r3, [r7, #23]
 8010c0c:	e01c      	b.n	8010c48 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d006      	beq.n	8010c22 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	7adb      	ldrb	r3, [r3, #11]
 8010c18:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	7a9b      	ldrb	r3, [r3, #10]
 8010c1e:	757b      	strb	r3, [r7, #21]
 8010c20:	e003      	b.n	8010c2a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010c22:	23ff      	movs	r3, #255	; 0xff
 8010c24:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010c26:	2300      	movs	r3, #0
 8010c28:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010c2a:	7dba      	ldrb	r2, [r7, #22]
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	9302      	str	r3, [sp, #8]
 8010c30:	2306      	movs	r3, #6
 8010c32:	9301      	str	r3, [sp, #4]
 8010c34:	7d7b      	ldrb	r3, [r7, #21]
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	683a      	ldr	r2, [r7, #0]
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	68b8      	ldr	r0, [r7, #8]
 8010c40:	f001 ffa0 	bl	8012b84 <ip4_output_if>
 8010c44:	4603      	mov	r3, r0
 8010c46:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010c48:	68b8      	ldr	r0, [r7, #8]
 8010c4a:	f7fa fddd 	bl	800b808 <pbuf_free>
  return err;
 8010c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3718      	adds	r7, #24
 8010c56:	46bd      	mov	sp, r7
 8010c58:	bd80      	pop	{r7, pc}
 8010c5a:	bf00      	nop
 8010c5c:	08016964 	.word	0x08016964
 8010c60:	080170bc 	.word	0x080170bc
 8010c64:	080169b8 	.word	0x080169b8

08010c68 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b08b      	sub	sp, #44	; 0x2c
 8010c6c:	af04      	add	r7, sp, #16
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d106      	bne.n	8010c8a <tcp_rst+0x22>
 8010c7c:	4b1f      	ldr	r3, [pc, #124]	; (8010cfc <tcp_rst+0x94>)
 8010c7e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010c82:	491f      	ldr	r1, [pc, #124]	; (8010d00 <tcp_rst+0x98>)
 8010c84:	481f      	ldr	r0, [pc, #124]	; (8010d04 <tcp_rst+0x9c>)
 8010c86:	f003 f971 	bl	8013f6c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d106      	bne.n	8010c9e <tcp_rst+0x36>
 8010c90:	4b1a      	ldr	r3, [pc, #104]	; (8010cfc <tcp_rst+0x94>)
 8010c92:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010c96:	491c      	ldr	r1, [pc, #112]	; (8010d08 <tcp_rst+0xa0>)
 8010c98:	481a      	ldr	r0, [pc, #104]	; (8010d04 <tcp_rst+0x9c>)
 8010c9a:	f003 f967 	bl	8013f6c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010ca2:	f246 0308 	movw	r3, #24584	; 0x6008
 8010ca6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
 8010caa:	b29c      	uxth	r4, r3
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f7f9 fa14 	bl	800a0da <lwip_htonl>
 8010cb2:	4602      	mov	r2, r0
 8010cb4:	8abb      	ldrh	r3, [r7, #20]
 8010cb6:	9303      	str	r3, [sp, #12]
 8010cb8:	2314      	movs	r3, #20
 8010cba:	9302      	str	r3, [sp, #8]
 8010cbc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	4613      	mov	r3, r2
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	4621      	mov	r1, r4
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7ff fe92 	bl	80109f4 <tcp_output_alloc_header_common>
 8010cd0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00c      	beq.n	8010cf2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
 8010cda:	2200      	movs	r2, #0
 8010cdc:	6939      	ldr	r1, [r7, #16]
 8010cde:	68f8      	ldr	r0, [r7, #12]
 8010ce0:	f7ff ff38 	bl	8010b54 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce6:	683a      	ldr	r2, [r7, #0]
 8010ce8:	6939      	ldr	r1, [r7, #16]
 8010cea:	68f8      	ldr	r0, [r7, #12]
 8010cec:	f7ff ff72 	bl	8010bd4 <tcp_output_control_segment>
 8010cf0:	e000      	b.n	8010cf4 <tcp_rst+0x8c>
    return;
 8010cf2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010cf4:	371c      	adds	r7, #28
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd90      	pop	{r4, r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	08016964 	.word	0x08016964
 8010d00:	080170e8 	.word	0x080170e8
 8010d04:	080169b8 	.word	0x080169b8
 8010d08:	08017104 	.word	0x08017104

08010d0c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010d0c:	b590      	push	{r4, r7, lr}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010d14:	2300      	movs	r3, #0
 8010d16:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d106      	bne.n	8010d30 <tcp_send_empty_ack+0x24>
 8010d22:	4b28      	ldr	r3, [pc, #160]	; (8010dc4 <tcp_send_empty_ack+0xb8>)
 8010d24:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010d28:	4927      	ldr	r1, [pc, #156]	; (8010dc8 <tcp_send_empty_ack+0xbc>)
 8010d2a:	4828      	ldr	r0, [pc, #160]	; (8010dcc <tcp_send_empty_ack+0xc0>)
 8010d2c:	f003 f91e 	bl	8013f6c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010d30:	7dfb      	ldrb	r3, [r7, #23]
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	f003 0304 	and.w	r3, r3, #4
 8010d3a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010d3c:	7d7b      	ldrb	r3, [r7, #21]
 8010d3e:	b29c      	uxth	r4, r3
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7f9 f9c8 	bl	800a0da <lwip_htonl>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	4621      	mov	r1, r4
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff fec1 	bl	8010ad8 <tcp_output_alloc_header>
 8010d56:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d109      	bne.n	8010d72 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	8b5b      	ldrh	r3, [r3, #26]
 8010d62:	f043 0303 	orr.w	r3, r3, #3
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010d6c:	f06f 0301 	mvn.w	r3, #1
 8010d70:	e023      	b.n	8010dba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010d72:	7dbb      	ldrb	r3, [r7, #22]
 8010d74:	7dfa      	ldrb	r2, [r7, #23]
 8010d76:	6939      	ldr	r1, [r7, #16]
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f7ff feeb 	bl	8010b54 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d7e:	687a      	ldr	r2, [r7, #4]
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	3304      	adds	r3, #4
 8010d84:	6939      	ldr	r1, [r7, #16]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff ff24 	bl	8010bd4 <tcp_output_control_segment>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d007      	beq.n	8010da8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	8b5b      	ldrh	r3, [r3, #26]
 8010d9c:	f043 0303 	orr.w	r3, r3, #3
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	835a      	strh	r2, [r3, #26]
 8010da6:	e006      	b.n	8010db6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	8b5b      	ldrh	r3, [r3, #26]
 8010dac:	f023 0303 	bic.w	r3, r3, #3
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd90      	pop	{r4, r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	08016964 	.word	0x08016964
 8010dc8:	08017120 	.word	0x08017120
 8010dcc:	080169b8 	.word	0x080169b8

08010dd0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010dd0:	b590      	push	{r4, r7, lr}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010dd8:	2300      	movs	r3, #0
 8010dda:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <tcp_keepalive+0x20>
 8010de2:	4b18      	ldr	r3, [pc, #96]	; (8010e44 <tcp_keepalive+0x74>)
 8010de4:	f640 0224 	movw	r2, #2084	; 0x824
 8010de8:	4917      	ldr	r1, [pc, #92]	; (8010e48 <tcp_keepalive+0x78>)
 8010dea:	4818      	ldr	r0, [pc, #96]	; (8010e4c <tcp_keepalive+0x7c>)
 8010dec:	f003 f8be 	bl	8013f6c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010df0:	7dfb      	ldrb	r3, [r7, #23]
 8010df2:	b29c      	uxth	r4, r3
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7f9 f96d 	bl	800a0da <lwip_htonl>
 8010e00:	4603      	mov	r3, r0
 8010e02:	2200      	movs	r2, #0
 8010e04:	4621      	mov	r1, r4
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7ff fe66 	bl	8010ad8 <tcp_output_alloc_header>
 8010e0c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d102      	bne.n	8010e1a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010e14:	f04f 33ff 	mov.w	r3, #4294967295
 8010e18:	e010      	b.n	8010e3c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	6939      	ldr	r1, [r7, #16]
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7ff fe97 	bl	8010b54 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3304      	adds	r3, #4
 8010e2c:	6939      	ldr	r1, [r7, #16]
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff fed0 	bl	8010bd4 <tcp_output_control_segment>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	371c      	adds	r7, #28
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd90      	pop	{r4, r7, pc}
 8010e44:	08016964 	.word	0x08016964
 8010e48:	08017140 	.word	0x08017140
 8010e4c:	080169b8 	.word	0x080169b8

08010e50 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010e50:	b590      	push	{r4, r7, lr}
 8010e52:	b08b      	sub	sp, #44	; 0x2c
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d106      	bne.n	8010e72 <tcp_zero_window_probe+0x22>
 8010e64:	4b4c      	ldr	r3, [pc, #304]	; (8010f98 <tcp_zero_window_probe+0x148>)
 8010e66:	f640 024f 	movw	r2, #2127	; 0x84f
 8010e6a:	494c      	ldr	r1, [pc, #304]	; (8010f9c <tcp_zero_window_probe+0x14c>)
 8010e6c:	484c      	ldr	r0, [pc, #304]	; (8010fa0 <tcp_zero_window_probe+0x150>)
 8010e6e:	f003 f87d 	bl	8013f6c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e76:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d101      	bne.n	8010e82 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	e086      	b.n	8010f90 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e88:	2bff      	cmp	r3, #255	; 0xff
 8010e8a:	d007      	beq.n	8010e9c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010e92:	3301      	adds	r3, #1
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	68db      	ldr	r3, [r3, #12]
 8010ea0:	899b      	ldrh	r3, [r3, #12]
 8010ea2:	b29b      	uxth	r3, r3
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7f9 f903 	bl	800a0b0 <lwip_htons>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d005      	beq.n	8010ec2 <tcp_zero_window_probe+0x72>
 8010eb6:	6a3b      	ldr	r3, [r7, #32]
 8010eb8:	891b      	ldrh	r3, [r3, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d101      	bne.n	8010ec2 <tcp_zero_window_probe+0x72>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e000      	b.n	8010ec4 <tcp_zero_window_probe+0x74>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010ec6:	7ffb      	ldrb	r3, [r7, #31]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	bf0c      	ite	eq
 8010ecc:	2301      	moveq	r3, #1
 8010ece:	2300      	movne	r3, #0
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ed8:	b299      	uxth	r1, r3
 8010eda:	6a3b      	ldr	r3, [r7, #32]
 8010edc:	68db      	ldr	r3, [r3, #12]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	8bba      	ldrh	r2, [r7, #28]
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7ff fdf8 	bl	8010ad8 <tcp_output_alloc_header>
 8010ee8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d102      	bne.n	8010ef6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8010ef4:	e04c      	b.n	8010f90 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010efc:	7ffb      	ldrb	r3, [r7, #31]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d011      	beq.n	8010f26 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	899b      	ldrh	r3, [r3, #12]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	b21b      	sxth	r3, r3
 8010f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f0e:	b21c      	sxth	r4, r3
 8010f10:	2011      	movs	r0, #17
 8010f12:	f7f9 f8cd 	bl	800a0b0 <lwip_htons>
 8010f16:	4603      	mov	r3, r0
 8010f18:	b21b      	sxth	r3, r3
 8010f1a:	4323      	orrs	r3, r4
 8010f1c:	b21b      	sxth	r3, r3
 8010f1e:	b29a      	uxth	r2, r3
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	819a      	strh	r2, [r3, #12]
 8010f24:	e010      	b.n	8010f48 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	685b      	ldr	r3, [r3, #4]
 8010f2a:	3314      	adds	r3, #20
 8010f2c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	6858      	ldr	r0, [r3, #4]
 8010f32:	6a3b      	ldr	r3, [r7, #32]
 8010f34:	685b      	ldr	r3, [r3, #4]
 8010f36:	891a      	ldrh	r2, [r3, #8]
 8010f38:	6a3b      	ldr	r3, [r7, #32]
 8010f3a:	891b      	ldrh	r3, [r3, #8]
 8010f3c:	1ad3      	subs	r3, r2, r3
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	2201      	movs	r2, #1
 8010f42:	6939      	ldr	r1, [r7, #16]
 8010f44:	f7fa fe56 	bl	800bbf4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010f48:	6a3b      	ldr	r3, [r7, #32]
 8010f4a:	68db      	ldr	r3, [r3, #12]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7f9 f8c3 	bl	800a0da <lwip_htonl>
 8010f54:	4603      	mov	r3, r0
 8010f56:	3301      	adds	r3, #1
 8010f58:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	1ad3      	subs	r3, r2, r3
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	da02      	bge.n	8010f6c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f70:	2200      	movs	r2, #0
 8010f72:	69b9      	ldr	r1, [r7, #24]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f7ff fded 	bl	8010b54 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	3304      	adds	r3, #4
 8010f80:	69b9      	ldr	r1, [r7, #24]
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff fe26 	bl	8010bd4 <tcp_output_control_segment>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010f8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	372c      	adds	r7, #44	; 0x2c
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}
 8010f98:	08016964 	.word	0x08016964
 8010f9c:	0801715c 	.word	0x0801715c
 8010fa0:	080169b8 	.word	0x080169b8

08010fa4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010fac:	f7fa ff10 	bl	800bdd0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010fb0:	4b0a      	ldr	r3, [pc, #40]	; (8010fdc <tcpip_tcp_timer+0x38>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d103      	bne.n	8010fc0 <tcpip_tcp_timer+0x1c>
 8010fb8:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <tcpip_tcp_timer+0x3c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d005      	beq.n	8010fcc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	4908      	ldr	r1, [pc, #32]	; (8010fe4 <tcpip_tcp_timer+0x40>)
 8010fc4:	20fa      	movs	r0, #250	; 0xfa
 8010fc6:	f000 f8f3 	bl	80111b0 <sys_timeout>
 8010fca:	e003      	b.n	8010fd4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010fcc:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <tcpip_tcp_timer+0x44>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]
  }
}
 8010fd2:	bf00      	nop
 8010fd4:	bf00      	nop
 8010fd6:	3708      	adds	r7, #8
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	2000b944 	.word	0x2000b944
 8010fe0:	2000b954 	.word	0x2000b954
 8010fe4:	08010fa5 	.word	0x08010fa5
 8010fe8:	20004a40 	.word	0x20004a40

08010fec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010ff0:	4b0a      	ldr	r3, [pc, #40]	; (801101c <tcp_timer_needed+0x30>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d10f      	bne.n	8011018 <tcp_timer_needed+0x2c>
 8010ff8:	4b09      	ldr	r3, [pc, #36]	; (8011020 <tcp_timer_needed+0x34>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d103      	bne.n	8011008 <tcp_timer_needed+0x1c>
 8011000:	4b08      	ldr	r3, [pc, #32]	; (8011024 <tcp_timer_needed+0x38>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d007      	beq.n	8011018 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011008:	4b04      	ldr	r3, [pc, #16]	; (801101c <tcp_timer_needed+0x30>)
 801100a:	2201      	movs	r2, #1
 801100c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801100e:	2200      	movs	r2, #0
 8011010:	4905      	ldr	r1, [pc, #20]	; (8011028 <tcp_timer_needed+0x3c>)
 8011012:	20fa      	movs	r0, #250	; 0xfa
 8011014:	f000 f8cc 	bl	80111b0 <sys_timeout>
  }
}
 8011018:	bf00      	nop
 801101a:	bd80      	pop	{r7, pc}
 801101c:	20004a40 	.word	0x20004a40
 8011020:	2000b944 	.word	0x2000b944
 8011024:	2000b954 	.word	0x2000b954
 8011028:	08010fa5 	.word	0x08010fa5

0801102c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011038:	200a      	movs	r0, #10
 801103a:	f7f9 fcef 	bl	800aa1c <memp_malloc>
 801103e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d109      	bne.n	801105a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d151      	bne.n	80110f0 <sys_timeout_abs+0xc4>
 801104c:	4b2a      	ldr	r3, [pc, #168]	; (80110f8 <sys_timeout_abs+0xcc>)
 801104e:	22be      	movs	r2, #190	; 0xbe
 8011050:	492a      	ldr	r1, [pc, #168]	; (80110fc <sys_timeout_abs+0xd0>)
 8011052:	482b      	ldr	r0, [pc, #172]	; (8011100 <sys_timeout_abs+0xd4>)
 8011054:	f002 ff8a 	bl	8013f6c <iprintf>
    return;
 8011058:	e04a      	b.n	80110f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	2200      	movs	r2, #0
 801105e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	687a      	ldr	r2, [r7, #4]
 801106a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	68fa      	ldr	r2, [r7, #12]
 8011070:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011072:	4b24      	ldr	r3, [pc, #144]	; (8011104 <sys_timeout_abs+0xd8>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d103      	bne.n	8011082 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801107a:	4a22      	ldr	r2, [pc, #136]	; (8011104 <sys_timeout_abs+0xd8>)
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	6013      	str	r3, [r2, #0]
    return;
 8011080:	e037      	b.n	80110f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	685a      	ldr	r2, [r3, #4]
 8011086:	4b1f      	ldr	r3, [pc, #124]	; (8011104 <sys_timeout_abs+0xd8>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	1ad3      	subs	r3, r2, r3
 801108e:	0fdb      	lsrs	r3, r3, #31
 8011090:	f003 0301 	and.w	r3, r3, #1
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d007      	beq.n	80110aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801109a:	4b1a      	ldr	r3, [pc, #104]	; (8011104 <sys_timeout_abs+0xd8>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80110a2:	4a18      	ldr	r2, [pc, #96]	; (8011104 <sys_timeout_abs+0xd8>)
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	6013      	str	r3, [r2, #0]
 80110a8:	e023      	b.n	80110f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80110aa:	4b16      	ldr	r3, [pc, #88]	; (8011104 <sys_timeout_abs+0xd8>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	617b      	str	r3, [r7, #20]
 80110b0:	e01a      	b.n	80110e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d00b      	beq.n	80110d2 <sys_timeout_abs+0xa6>
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	685a      	ldr	r2, [r3, #4]
 80110be:	697b      	ldr	r3, [r7, #20]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	1ad3      	subs	r3, r2, r3
 80110c6:	0fdb      	lsrs	r3, r3, #31
 80110c8:	f003 0301 	and.w	r3, r3, #1
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d007      	beq.n	80110e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	693a      	ldr	r2, [r7, #16]
 80110de:	601a      	str	r2, [r3, #0]
        break;
 80110e0:	e007      	b.n	80110f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	617b      	str	r3, [r7, #20]
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1e1      	bne.n	80110b2 <sys_timeout_abs+0x86>
 80110ee:	e000      	b.n	80110f2 <sys_timeout_abs+0xc6>
    return;
 80110f0:	bf00      	nop
      }
    }
  }
}
 80110f2:	3718      	adds	r7, #24
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	08017180 	.word	0x08017180
 80110fc:	080171b4 	.word	0x080171b4
 8011100:	080171f4 	.word	0x080171f4
 8011104:	20004a38 	.word	0x20004a38

08011108 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	4798      	blx	r3

  now = sys_now();
 801111a:	f7f4 fe29 	bl	8005d70 <sys_now>
 801111e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	681a      	ldr	r2, [r3, #0]
 8011124:	4b0f      	ldr	r3, [pc, #60]	; (8011164 <lwip_cyclic_timer+0x5c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4413      	add	r3, r2
 801112a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801112c:	68fa      	ldr	r2, [r7, #12]
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	0fdb      	lsrs	r3, r3, #31
 8011134:	f003 0301 	and.w	r3, r3, #1
 8011138:	b2db      	uxtb	r3, r3
 801113a:	2b00      	cmp	r3, #0
 801113c:	d009      	beq.n	8011152 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	4413      	add	r3, r2
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	4907      	ldr	r1, [pc, #28]	; (8011168 <lwip_cyclic_timer+0x60>)
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff ff6e 	bl	801102c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011150:	e004      	b.n	801115c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	4904      	ldr	r1, [pc, #16]	; (8011168 <lwip_cyclic_timer+0x60>)
 8011156:	68f8      	ldr	r0, [r7, #12]
 8011158:	f7ff ff68 	bl	801102c <sys_timeout_abs>
}
 801115c:	bf00      	nop
 801115e:	3718      	adds	r7, #24
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	20004a3c 	.word	0x20004a3c
 8011168:	08011109 	.word	0x08011109

0801116c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011172:	2301      	movs	r3, #1
 8011174:	607b      	str	r3, [r7, #4]
 8011176:	e00e      	b.n	8011196 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011178:	4a0b      	ldr	r2, [pc, #44]	; (80111a8 <sys_timeouts_init+0x3c>)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	00db      	lsls	r3, r3, #3
 8011184:	4a08      	ldr	r2, [pc, #32]	; (80111a8 <sys_timeouts_init+0x3c>)
 8011186:	4413      	add	r3, r2
 8011188:	461a      	mov	r2, r3
 801118a:	4908      	ldr	r1, [pc, #32]	; (80111ac <sys_timeouts_init+0x40>)
 801118c:	f000 f810 	bl	80111b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3301      	adds	r3, #1
 8011194:	607b      	str	r3, [r7, #4]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2b02      	cmp	r3, #2
 801119a:	d9ed      	bls.n	8011178 <sys_timeouts_init+0xc>
  }
}
 801119c:	bf00      	nop
 801119e:	bf00      	nop
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	08017dc4 	.word	0x08017dc4
 80111ac:	08011109 	.word	0x08011109

080111b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b086      	sub	sp, #24
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80111c2:	d306      	bcc.n	80111d2 <sys_timeout+0x22>
 80111c4:	4b0a      	ldr	r3, [pc, #40]	; (80111f0 <sys_timeout+0x40>)
 80111c6:	f240 1229 	movw	r2, #297	; 0x129
 80111ca:	490a      	ldr	r1, [pc, #40]	; (80111f4 <sys_timeout+0x44>)
 80111cc:	480a      	ldr	r0, [pc, #40]	; (80111f8 <sys_timeout+0x48>)
 80111ce:	f002 fecd 	bl	8013f6c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80111d2:	f7f4 fdcd 	bl	8005d70 <sys_now>
 80111d6:	4602      	mov	r2, r0
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	4413      	add	r3, r2
 80111dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	68b9      	ldr	r1, [r7, #8]
 80111e2:	6978      	ldr	r0, [r7, #20]
 80111e4:	f7ff ff22 	bl	801102c <sys_timeout_abs>
#endif
}
 80111e8:	bf00      	nop
 80111ea:	3718      	adds	r7, #24
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	08017180 	.word	0x08017180
 80111f4:	0801721c 	.word	0x0801721c
 80111f8:	080171f4 	.word	0x080171f4

080111fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011202:	f7f4 fdb5 	bl	8005d70 <sys_now>
 8011206:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011208:	4b17      	ldr	r3, [pc, #92]	; (8011268 <sys_check_timeouts+0x6c>)
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d022      	beq.n	801125a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	68fa      	ldr	r2, [r7, #12]
 801121a:	1ad3      	subs	r3, r2, r3
 801121c:	0fdb      	lsrs	r3, r3, #31
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	b2db      	uxtb	r3, r3
 8011224:	2b00      	cmp	r3, #0
 8011226:	d11a      	bne.n	801125e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a0e      	ldr	r2, [pc, #56]	; (8011268 <sys_check_timeouts+0x6c>)
 801122e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011230:	68bb      	ldr	r3, [r7, #8]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	4a0a      	ldr	r2, [pc, #40]	; (801126c <sys_check_timeouts+0x70>)
 8011242:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011244:	68b9      	ldr	r1, [r7, #8]
 8011246:	200a      	movs	r0, #10
 8011248:	f7f9 fc3a 	bl	800aac0 <memp_free>
    if (handler != NULL) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d0da      	beq.n	8011208 <sys_check_timeouts+0xc>
      handler(arg);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6838      	ldr	r0, [r7, #0]
 8011256:	4798      	blx	r3
  do {
 8011258:	e7d6      	b.n	8011208 <sys_check_timeouts+0xc>
      return;
 801125a:	bf00      	nop
 801125c:	e000      	b.n	8011260 <sys_check_timeouts+0x64>
      return;
 801125e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	20004a38 	.word	0x20004a38
 801126c:	20004a3c 	.word	0x20004a3c

08011270 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011276:	4b16      	ldr	r3, [pc, #88]	; (80112d0 <sys_timeouts_sleeptime+0x60>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d102      	bne.n	8011284 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801127e:	f04f 33ff 	mov.w	r3, #4294967295
 8011282:	e020      	b.n	80112c6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011284:	f7f4 fd74 	bl	8005d70 <sys_now>
 8011288:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801128a:	4b11      	ldr	r3, [pc, #68]	; (80112d0 <sys_timeouts_sleeptime+0x60>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	685a      	ldr	r2, [r3, #4]
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	0fdb      	lsrs	r3, r3, #31
 8011296:	f003 0301 	and.w	r3, r3, #1
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	d001      	beq.n	80112a4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	e010      	b.n	80112c6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80112a4:	4b0a      	ldr	r3, [pc, #40]	; (80112d0 <sys_timeouts_sleeptime+0x60>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	685a      	ldr	r2, [r3, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80112b0:	683b      	ldr	r3, [r7, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	da06      	bge.n	80112c4 <sys_timeouts_sleeptime+0x54>
 80112b6:	4b07      	ldr	r3, [pc, #28]	; (80112d4 <sys_timeouts_sleeptime+0x64>)
 80112b8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80112bc:	4906      	ldr	r1, [pc, #24]	; (80112d8 <sys_timeouts_sleeptime+0x68>)
 80112be:	4807      	ldr	r0, [pc, #28]	; (80112dc <sys_timeouts_sleeptime+0x6c>)
 80112c0:	f002 fe54 	bl	8013f6c <iprintf>
    return ret;
 80112c4:	683b      	ldr	r3, [r7, #0]
  }
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3708      	adds	r7, #8
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	20004a38 	.word	0x20004a38
 80112d4:	08017180 	.word	0x08017180
 80112d8:	08017254 	.word	0x08017254
 80112dc:	080171f4 	.word	0x080171f4

080112e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80112e4:	f002 fe5a 	bl	8013f9c <rand>
 80112e8:	4603      	mov	r3, r0
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80112f0:	b29b      	uxth	r3, r3
 80112f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80112f6:	b29a      	uxth	r2, r3
 80112f8:	4b01      	ldr	r3, [pc, #4]	; (8011300 <udp_init+0x20>)
 80112fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80112fc:	bf00      	nop
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	20000018 	.word	0x20000018

08011304 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b084      	sub	sp, #16
 8011308:	af00      	add	r7, sp, #0
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	4613      	mov	r3, r2
 8011310:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d105      	bne.n	8011324 <udp_input_local_match+0x20>
 8011318:	4b27      	ldr	r3, [pc, #156]	; (80113b8 <udp_input_local_match+0xb4>)
 801131a:	2287      	movs	r2, #135	; 0x87
 801131c:	4927      	ldr	r1, [pc, #156]	; (80113bc <udp_input_local_match+0xb8>)
 801131e:	4828      	ldr	r0, [pc, #160]	; (80113c0 <udp_input_local_match+0xbc>)
 8011320:	f002 fe24 	bl	8013f6c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d105      	bne.n	8011336 <udp_input_local_match+0x32>
 801132a:	4b23      	ldr	r3, [pc, #140]	; (80113b8 <udp_input_local_match+0xb4>)
 801132c:	2288      	movs	r2, #136	; 0x88
 801132e:	4925      	ldr	r1, [pc, #148]	; (80113c4 <udp_input_local_match+0xc0>)
 8011330:	4823      	ldr	r0, [pc, #140]	; (80113c0 <udp_input_local_match+0xbc>)
 8011332:	f002 fe1b 	bl	8013f6c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	7a1b      	ldrb	r3, [r3, #8]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00b      	beq.n	8011356 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	7a1a      	ldrb	r2, [r3, #8]
 8011342:	4b21      	ldr	r3, [pc, #132]	; (80113c8 <udp_input_local_match+0xc4>)
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801134a:	3301      	adds	r3, #1
 801134c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801134e:	429a      	cmp	r2, r3
 8011350:	d001      	beq.n	8011356 <udp_input_local_match+0x52>
    return 0;
 8011352:	2300      	movs	r3, #0
 8011354:	e02b      	b.n	80113ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011356:	79fb      	ldrb	r3, [r7, #7]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d018      	beq.n	801138e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d013      	beq.n	801138a <udp_input_local_match+0x86>
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d00f      	beq.n	801138a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801136a:	4b17      	ldr	r3, [pc, #92]	; (80113c8 <udp_input_local_match+0xc4>)
 801136c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801136e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011372:	d00a      	beq.n	801138a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	4b13      	ldr	r3, [pc, #76]	; (80113c8 <udp_input_local_match+0xc4>)
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	405a      	eors	r2, r3
 801137e:	68bb      	ldr	r3, [r7, #8]
 8011380:	3308      	adds	r3, #8
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011386:	2b00      	cmp	r3, #0
 8011388:	d110      	bne.n	80113ac <udp_input_local_match+0xa8>
          return 1;
 801138a:	2301      	movs	r3, #1
 801138c:	e00f      	b.n	80113ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d009      	beq.n	80113a8 <udp_input_local_match+0xa4>
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <udp_input_local_match+0xa4>
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681a      	ldr	r2, [r3, #0]
 80113a0:	4b09      	ldr	r3, [pc, #36]	; (80113c8 <udp_input_local_match+0xc4>)
 80113a2:	695b      	ldr	r3, [r3, #20]
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d101      	bne.n	80113ac <udp_input_local_match+0xa8>
        return 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e000      	b.n	80113ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	08017268 	.word	0x08017268
 80113bc:	08017298 	.word	0x08017298
 80113c0:	080172bc 	.word	0x080172bc
 80113c4:	080172e4 	.word	0x080172e4
 80113c8:	20008230 	.word	0x20008230

080113cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80113cc:	b590      	push	{r4, r7, lr}
 80113ce:	b08d      	sub	sp, #52	; 0x34
 80113d0:	af02      	add	r7, sp, #8
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80113d6:	2300      	movs	r3, #0
 80113d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d105      	bne.n	80113ec <udp_input+0x20>
 80113e0:	4b7c      	ldr	r3, [pc, #496]	; (80115d4 <udp_input+0x208>)
 80113e2:	22cf      	movs	r2, #207	; 0xcf
 80113e4:	497c      	ldr	r1, [pc, #496]	; (80115d8 <udp_input+0x20c>)
 80113e6:	487d      	ldr	r0, [pc, #500]	; (80115dc <udp_input+0x210>)
 80113e8:	f002 fdc0 	bl	8013f6c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d105      	bne.n	80113fe <udp_input+0x32>
 80113f2:	4b78      	ldr	r3, [pc, #480]	; (80115d4 <udp_input+0x208>)
 80113f4:	22d0      	movs	r2, #208	; 0xd0
 80113f6:	497a      	ldr	r1, [pc, #488]	; (80115e0 <udp_input+0x214>)
 80113f8:	4878      	ldr	r0, [pc, #480]	; (80115dc <udp_input+0x210>)
 80113fa:	f002 fdb7 	bl	8013f6c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	895b      	ldrh	r3, [r3, #10]
 8011402:	2b07      	cmp	r3, #7
 8011404:	d803      	bhi.n	801140e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7fa f9fe 	bl	800b808 <pbuf_free>
    goto end;
 801140c:	e0de      	b.n	80115cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011414:	4b73      	ldr	r3, [pc, #460]	; (80115e4 <udp_input+0x218>)
 8011416:	695b      	ldr	r3, [r3, #20]
 8011418:	4a72      	ldr	r2, [pc, #456]	; (80115e4 <udp_input+0x218>)
 801141a:	6812      	ldr	r2, [r2, #0]
 801141c:	4611      	mov	r1, r2
 801141e:	4618      	mov	r0, r3
 8011420:	f001 fc88 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8011424:	4603      	mov	r3, r0
 8011426:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	881b      	ldrh	r3, [r3, #0]
 801142c:	b29b      	uxth	r3, r3
 801142e:	4618      	mov	r0, r3
 8011430:	f7f8 fe3e 	bl	800a0b0 <lwip_htons>
 8011434:	4603      	mov	r3, r0
 8011436:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	b29b      	uxth	r3, r3
 801143e:	4618      	mov	r0, r3
 8011440:	f7f8 fe36 	bl	800a0b0 <lwip_htons>
 8011444:	4603      	mov	r3, r0
 8011446:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011448:	2300      	movs	r3, #0
 801144a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801144c:	2300      	movs	r3, #0
 801144e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011450:	2300      	movs	r3, #0
 8011452:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011454:	4b64      	ldr	r3, [pc, #400]	; (80115e8 <udp_input+0x21c>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	627b      	str	r3, [r7, #36]	; 0x24
 801145a:	e054      	b.n	8011506 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145e:	8a5b      	ldrh	r3, [r3, #18]
 8011460:	89fa      	ldrh	r2, [r7, #14]
 8011462:	429a      	cmp	r2, r3
 8011464:	d14a      	bne.n	80114fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011466:	7cfb      	ldrb	r3, [r7, #19]
 8011468:	461a      	mov	r2, r3
 801146a:	6839      	ldr	r1, [r7, #0]
 801146c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801146e:	f7ff ff49 	bl	8011304 <udp_input_local_match>
 8011472:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011474:	2b00      	cmp	r3, #0
 8011476:	d041      	beq.n	80114fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801147a:	7c1b      	ldrb	r3, [r3, #16]
 801147c:	f003 0304 	and.w	r3, r3, #4
 8011480:	2b00      	cmp	r3, #0
 8011482:	d11d      	bne.n	80114c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d102      	bne.n	8011490 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148c:	61fb      	str	r3, [r7, #28]
 801148e:	e017      	b.n	80114c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011490:	7cfb      	ldrb	r3, [r7, #19]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d014      	beq.n	80114c0 <udp_input+0xf4>
 8011496:	4b53      	ldr	r3, [pc, #332]	; (80115e4 <udp_input+0x218>)
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149e:	d10f      	bne.n	80114c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	3304      	adds	r3, #4
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d008      	beq.n	80114c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80114ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b0:	681a      	ldr	r2, [r3, #0]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	3304      	adds	r3, #4
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d101      	bne.n	80114c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80114bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80114c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c2:	8a9b      	ldrh	r3, [r3, #20]
 80114c4:	8a3a      	ldrh	r2, [r7, #16]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d118      	bne.n	80114fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d005      	beq.n	80114de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80114d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	4b43      	ldr	r3, [pc, #268]	; (80115e4 <udp_input+0x218>)
 80114d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80114da:	429a      	cmp	r2, r3
 80114dc:	d10e      	bne.n	80114fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d014      	beq.n	801150e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	68da      	ldr	r2, [r3, #12]
 80114e8:	6a3b      	ldr	r3, [r7, #32]
 80114ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80114ec:	4b3e      	ldr	r3, [pc, #248]	; (80115e8 <udp_input+0x21c>)
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80114f4:	4a3c      	ldr	r2, [pc, #240]	; (80115e8 <udp_input+0x21c>)
 80114f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80114fa:	e008      	b.n	801150e <udp_input+0x142>
      }
    }

    prev = pcb;
 80114fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	627b      	str	r3, [r7, #36]	; 0x24
 8011506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1a7      	bne.n	801145c <udp_input+0x90>
 801150c:	e000      	b.n	8011510 <udp_input+0x144>
        break;
 801150e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011512:	2b00      	cmp	r3, #0
 8011514:	d101      	bne.n	801151a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	2b00      	cmp	r3, #0
 801151e:	d002      	beq.n	8011526 <udp_input+0x15a>
    for_us = 1;
 8011520:	2301      	movs	r3, #1
 8011522:	76fb      	strb	r3, [r7, #27]
 8011524:	e00a      	b.n	801153c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	3304      	adds	r3, #4
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	4b2d      	ldr	r3, [pc, #180]	; (80115e4 <udp_input+0x218>)
 801152e:	695b      	ldr	r3, [r3, #20]
 8011530:	429a      	cmp	r2, r3
 8011532:	bf0c      	ite	eq
 8011534:	2301      	moveq	r3, #1
 8011536:	2300      	movne	r3, #0
 8011538:	b2db      	uxtb	r3, r3
 801153a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801153c:	7efb      	ldrb	r3, [r7, #27]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d041      	beq.n	80115c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011542:	2108      	movs	r1, #8
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f7fa f8d9 	bl	800b6fc <pbuf_remove_header>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d00a      	beq.n	8011566 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011550:	4b20      	ldr	r3, [pc, #128]	; (80115d4 <udp_input+0x208>)
 8011552:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011556:	4925      	ldr	r1, [pc, #148]	; (80115ec <udp_input+0x220>)
 8011558:	4820      	ldr	r0, [pc, #128]	; (80115dc <udp_input+0x210>)
 801155a:	f002 fd07 	bl	8013f6c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7fa f952 	bl	800b808 <pbuf_free>
      goto end;
 8011564:	e032      	b.n	80115cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	2b00      	cmp	r3, #0
 801156a:	d012      	beq.n	8011592 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	699b      	ldr	r3, [r3, #24]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d00a      	beq.n	801158a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011576:	699c      	ldr	r4, [r3, #24]
 8011578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157a:	69d8      	ldr	r0, [r3, #28]
 801157c:	8a3b      	ldrh	r3, [r7, #16]
 801157e:	9300      	str	r3, [sp, #0]
 8011580:	4b1b      	ldr	r3, [pc, #108]	; (80115f0 <udp_input+0x224>)
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011586:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011588:	e021      	b.n	80115ce <udp_input+0x202>
        pbuf_free(p);
 801158a:	6878      	ldr	r0, [r7, #4]
 801158c:	f7fa f93c 	bl	800b808 <pbuf_free>
        goto end;
 8011590:	e01c      	b.n	80115cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011592:	7cfb      	ldrb	r3, [r7, #19]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d112      	bne.n	80115be <udp_input+0x1f2>
 8011598:	4b12      	ldr	r3, [pc, #72]	; (80115e4 <udp_input+0x218>)
 801159a:	695b      	ldr	r3, [r3, #20]
 801159c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80115a0:	2be0      	cmp	r3, #224	; 0xe0
 80115a2:	d00c      	beq.n	80115be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80115a4:	4b0f      	ldr	r3, [pc, #60]	; (80115e4 <udp_input+0x218>)
 80115a6:	899b      	ldrh	r3, [r3, #12]
 80115a8:	3308      	adds	r3, #8
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	b21b      	sxth	r3, r3
 80115ae:	4619      	mov	r1, r3
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7fa f916 	bl	800b7e2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80115b6:	2103      	movs	r1, #3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f001 f89b 	bl	80126f4 <icmp_dest_unreach>
      pbuf_free(p);
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7fa f922 	bl	800b808 <pbuf_free>
  return;
 80115c4:	e003      	b.n	80115ce <udp_input+0x202>
    pbuf_free(p);
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f7fa f91e 	bl	800b808 <pbuf_free>
  return;
 80115cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80115ce:	372c      	adds	r7, #44	; 0x2c
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd90      	pop	{r4, r7, pc}
 80115d4:	08017268 	.word	0x08017268
 80115d8:	0801730c 	.word	0x0801730c
 80115dc:	080172bc 	.word	0x080172bc
 80115e0:	08017324 	.word	0x08017324
 80115e4:	20008230 	.word	0x20008230
 80115e8:	2000b95c 	.word	0x2000b95c
 80115ec:	08017340 	.word	0x08017340
 80115f0:	20008240 	.word	0x20008240

080115f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d01e      	beq.n	8011642 <udp_netif_ip_addr_changed+0x4e>
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d01a      	beq.n	8011642 <udp_netif_ip_addr_changed+0x4e>
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d017      	beq.n	8011642 <udp_netif_ip_addr_changed+0x4e>
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d013      	beq.n	8011642 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801161a:	4b0d      	ldr	r3, [pc, #52]	; (8011650 <udp_netif_ip_addr_changed+0x5c>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	60fb      	str	r3, [r7, #12]
 8011620:	e00c      	b.n	801163c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	681a      	ldr	r2, [r3, #0]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	429a      	cmp	r2, r3
 801162c:	d103      	bne.n	8011636 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1ef      	bne.n	8011622 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011642:	bf00      	nop
 8011644:	3714      	adds	r7, #20
 8011646:	46bd      	mov	sp, r7
 8011648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164c:	4770      	bx	lr
 801164e:	bf00      	nop
 8011650:	2000b95c 	.word	0x2000b95c

08011654 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b082      	sub	sp, #8
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801165c:	4915      	ldr	r1, [pc, #84]	; (80116b4 <etharp_free_entry+0x60>)
 801165e:	687a      	ldr	r2, [r7, #4]
 8011660:	4613      	mov	r3, r2
 8011662:	005b      	lsls	r3, r3, #1
 8011664:	4413      	add	r3, r2
 8011666:	00db      	lsls	r3, r3, #3
 8011668:	440b      	add	r3, r1
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d013      	beq.n	8011698 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011670:	4910      	ldr	r1, [pc, #64]	; (80116b4 <etharp_free_entry+0x60>)
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	4613      	mov	r3, r2
 8011676:	005b      	lsls	r3, r3, #1
 8011678:	4413      	add	r3, r2
 801167a:	00db      	lsls	r3, r3, #3
 801167c:	440b      	add	r3, r1
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	4618      	mov	r0, r3
 8011682:	f7fa f8c1 	bl	800b808 <pbuf_free>
    arp_table[i].q = NULL;
 8011686:	490b      	ldr	r1, [pc, #44]	; (80116b4 <etharp_free_entry+0x60>)
 8011688:	687a      	ldr	r2, [r7, #4]
 801168a:	4613      	mov	r3, r2
 801168c:	005b      	lsls	r3, r3, #1
 801168e:	4413      	add	r3, r2
 8011690:	00db      	lsls	r3, r3, #3
 8011692:	440b      	add	r3, r1
 8011694:	2200      	movs	r2, #0
 8011696:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011698:	4906      	ldr	r1, [pc, #24]	; (80116b4 <etharp_free_entry+0x60>)
 801169a:	687a      	ldr	r2, [r7, #4]
 801169c:	4613      	mov	r3, r2
 801169e:	005b      	lsls	r3, r3, #1
 80116a0:	4413      	add	r3, r2
 80116a2:	00db      	lsls	r3, r3, #3
 80116a4:	440b      	add	r3, r1
 80116a6:	3314      	adds	r3, #20
 80116a8:	2200      	movs	r2, #0
 80116aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80116ac:	bf00      	nop
 80116ae:	3708      	adds	r7, #8
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd80      	pop	{r7, pc}
 80116b4:	20004a44 	.word	0x20004a44

080116b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116be:	2300      	movs	r3, #0
 80116c0:	607b      	str	r3, [r7, #4]
 80116c2:	e096      	b.n	80117f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80116c4:	494f      	ldr	r1, [pc, #316]	; (8011804 <etharp_tmr+0x14c>)
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	4613      	mov	r3, r2
 80116ca:	005b      	lsls	r3, r3, #1
 80116cc:	4413      	add	r3, r2
 80116ce:	00db      	lsls	r3, r3, #3
 80116d0:	440b      	add	r3, r1
 80116d2:	3314      	adds	r3, #20
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80116d8:	78fb      	ldrb	r3, [r7, #3]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 8086 	beq.w	80117ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80116e0:	4948      	ldr	r1, [pc, #288]	; (8011804 <etharp_tmr+0x14c>)
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	4613      	mov	r3, r2
 80116e6:	005b      	lsls	r3, r3, #1
 80116e8:	4413      	add	r3, r2
 80116ea:	00db      	lsls	r3, r3, #3
 80116ec:	440b      	add	r3, r1
 80116ee:	3312      	adds	r3, #18
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	3301      	adds	r3, #1
 80116f4:	b298      	uxth	r0, r3
 80116f6:	4943      	ldr	r1, [pc, #268]	; (8011804 <etharp_tmr+0x14c>)
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	4613      	mov	r3, r2
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	4413      	add	r3, r2
 8011700:	00db      	lsls	r3, r3, #3
 8011702:	440b      	add	r3, r1
 8011704:	3312      	adds	r3, #18
 8011706:	4602      	mov	r2, r0
 8011708:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801170a:	493e      	ldr	r1, [pc, #248]	; (8011804 <etharp_tmr+0x14c>)
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	4613      	mov	r3, r2
 8011710:	005b      	lsls	r3, r3, #1
 8011712:	4413      	add	r3, r2
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	440b      	add	r3, r1
 8011718:	3312      	adds	r3, #18
 801171a:	881b      	ldrh	r3, [r3, #0]
 801171c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011720:	d215      	bcs.n	801174e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011722:	4938      	ldr	r1, [pc, #224]	; (8011804 <etharp_tmr+0x14c>)
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	4613      	mov	r3, r2
 8011728:	005b      	lsls	r3, r3, #1
 801172a:	4413      	add	r3, r2
 801172c:	00db      	lsls	r3, r3, #3
 801172e:	440b      	add	r3, r1
 8011730:	3314      	adds	r3, #20
 8011732:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011734:	2b01      	cmp	r3, #1
 8011736:	d10e      	bne.n	8011756 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011738:	4932      	ldr	r1, [pc, #200]	; (8011804 <etharp_tmr+0x14c>)
 801173a:	687a      	ldr	r2, [r7, #4]
 801173c:	4613      	mov	r3, r2
 801173e:	005b      	lsls	r3, r3, #1
 8011740:	4413      	add	r3, r2
 8011742:	00db      	lsls	r3, r3, #3
 8011744:	440b      	add	r3, r1
 8011746:	3312      	adds	r3, #18
 8011748:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801174a:	2b04      	cmp	r3, #4
 801174c:	d903      	bls.n	8011756 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7ff ff80 	bl	8011654 <etharp_free_entry>
 8011754:	e04a      	b.n	80117ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011756:	492b      	ldr	r1, [pc, #172]	; (8011804 <etharp_tmr+0x14c>)
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	4613      	mov	r3, r2
 801175c:	005b      	lsls	r3, r3, #1
 801175e:	4413      	add	r3, r2
 8011760:	00db      	lsls	r3, r3, #3
 8011762:	440b      	add	r3, r1
 8011764:	3314      	adds	r3, #20
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	2b03      	cmp	r3, #3
 801176a:	d10a      	bne.n	8011782 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801176c:	4925      	ldr	r1, [pc, #148]	; (8011804 <etharp_tmr+0x14c>)
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	4613      	mov	r3, r2
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	4413      	add	r3, r2
 8011776:	00db      	lsls	r3, r3, #3
 8011778:	440b      	add	r3, r1
 801177a:	3314      	adds	r3, #20
 801177c:	2204      	movs	r2, #4
 801177e:	701a      	strb	r2, [r3, #0]
 8011780:	e034      	b.n	80117ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011782:	4920      	ldr	r1, [pc, #128]	; (8011804 <etharp_tmr+0x14c>)
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	4613      	mov	r3, r2
 8011788:	005b      	lsls	r3, r3, #1
 801178a:	4413      	add	r3, r2
 801178c:	00db      	lsls	r3, r3, #3
 801178e:	440b      	add	r3, r1
 8011790:	3314      	adds	r3, #20
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	2b04      	cmp	r3, #4
 8011796:	d10a      	bne.n	80117ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011798:	491a      	ldr	r1, [pc, #104]	; (8011804 <etharp_tmr+0x14c>)
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	00db      	lsls	r3, r3, #3
 80117a4:	440b      	add	r3, r1
 80117a6:	3314      	adds	r3, #20
 80117a8:	2202      	movs	r2, #2
 80117aa:	701a      	strb	r2, [r3, #0]
 80117ac:	e01e      	b.n	80117ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80117ae:	4915      	ldr	r1, [pc, #84]	; (8011804 <etharp_tmr+0x14c>)
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	4613      	mov	r3, r2
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	4413      	add	r3, r2
 80117b8:	00db      	lsls	r3, r3, #3
 80117ba:	440b      	add	r3, r1
 80117bc:	3314      	adds	r3, #20
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d113      	bne.n	80117ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80117c4:	490f      	ldr	r1, [pc, #60]	; (8011804 <etharp_tmr+0x14c>)
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	4613      	mov	r3, r2
 80117ca:	005b      	lsls	r3, r3, #1
 80117cc:	4413      	add	r3, r2
 80117ce:	00db      	lsls	r3, r3, #3
 80117d0:	440b      	add	r3, r1
 80117d2:	3308      	adds	r3, #8
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	687a      	ldr	r2, [r7, #4]
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	4a08      	ldr	r2, [pc, #32]	; (8011804 <etharp_tmr+0x14c>)
 80117e2:	4413      	add	r3, r2
 80117e4:	3304      	adds	r3, #4
 80117e6:	4619      	mov	r1, r3
 80117e8:	f000 fe6e 	bl	80124c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3301      	adds	r3, #1
 80117f0:	607b      	str	r3, [r7, #4]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b09      	cmp	r3, #9
 80117f6:	f77f af65 	ble.w	80116c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80117fa:	bf00      	nop
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}
 8011804:	20004a44 	.word	0x20004a44

08011808 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b08a      	sub	sp, #40	; 0x28
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	460b      	mov	r3, r1
 8011812:	607a      	str	r2, [r7, #4]
 8011814:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011816:	230a      	movs	r3, #10
 8011818:	84fb      	strh	r3, [r7, #38]	; 0x26
 801181a:	230a      	movs	r3, #10
 801181c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801181e:	230a      	movs	r3, #10
 8011820:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011822:	2300      	movs	r3, #0
 8011824:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011826:	230a      	movs	r3, #10
 8011828:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801182a:	2300      	movs	r3, #0
 801182c:	83bb      	strh	r3, [r7, #28]
 801182e:	2300      	movs	r3, #0
 8011830:	837b      	strh	r3, [r7, #26]
 8011832:	2300      	movs	r3, #0
 8011834:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011836:	2300      	movs	r3, #0
 8011838:	843b      	strh	r3, [r7, #32]
 801183a:	e0ae      	b.n	801199a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801183c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011840:	49a6      	ldr	r1, [pc, #664]	; (8011adc <etharp_find_entry+0x2d4>)
 8011842:	4613      	mov	r3, r2
 8011844:	005b      	lsls	r3, r3, #1
 8011846:	4413      	add	r3, r2
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	440b      	add	r3, r1
 801184c:	3314      	adds	r3, #20
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011852:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011856:	2b0a      	cmp	r3, #10
 8011858:	d105      	bne.n	8011866 <etharp_find_entry+0x5e>
 801185a:	7dfb      	ldrb	r3, [r7, #23]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d102      	bne.n	8011866 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011860:	8c3b      	ldrh	r3, [r7, #32]
 8011862:	847b      	strh	r3, [r7, #34]	; 0x22
 8011864:	e095      	b.n	8011992 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011866:	7dfb      	ldrb	r3, [r7, #23]
 8011868:	2b00      	cmp	r3, #0
 801186a:	f000 8092 	beq.w	8011992 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801186e:	7dfb      	ldrb	r3, [r7, #23]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d009      	beq.n	8011888 <etharp_find_entry+0x80>
 8011874:	7dfb      	ldrb	r3, [r7, #23]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d806      	bhi.n	8011888 <etharp_find_entry+0x80>
 801187a:	4b99      	ldr	r3, [pc, #612]	; (8011ae0 <etharp_find_entry+0x2d8>)
 801187c:	f240 1223 	movw	r2, #291	; 0x123
 8011880:	4998      	ldr	r1, [pc, #608]	; (8011ae4 <etharp_find_entry+0x2dc>)
 8011882:	4899      	ldr	r0, [pc, #612]	; (8011ae8 <etharp_find_entry+0x2e0>)
 8011884:	f002 fb72 	bl	8013f6c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d020      	beq.n	80118d0 <etharp_find_entry+0xc8>
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	6819      	ldr	r1, [r3, #0]
 8011892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011896:	4891      	ldr	r0, [pc, #580]	; (8011adc <etharp_find_entry+0x2d4>)
 8011898:	4613      	mov	r3, r2
 801189a:	005b      	lsls	r3, r3, #1
 801189c:	4413      	add	r3, r2
 801189e:	00db      	lsls	r3, r3, #3
 80118a0:	4403      	add	r3, r0
 80118a2:	3304      	adds	r3, #4
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	4299      	cmp	r1, r3
 80118a8:	d112      	bne.n	80118d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d00c      	beq.n	80118ca <etharp_find_entry+0xc2>
 80118b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118b4:	4989      	ldr	r1, [pc, #548]	; (8011adc <etharp_find_entry+0x2d4>)
 80118b6:	4613      	mov	r3, r2
 80118b8:	005b      	lsls	r3, r3, #1
 80118ba:	4413      	add	r3, r2
 80118bc:	00db      	lsls	r3, r3, #3
 80118be:	440b      	add	r3, r1
 80118c0:	3308      	adds	r3, #8
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d102      	bne.n	80118d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80118ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118ce:	e100      	b.n	8011ad2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80118d0:	7dfb      	ldrb	r3, [r7, #23]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d140      	bne.n	8011958 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80118d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118da:	4980      	ldr	r1, [pc, #512]	; (8011adc <etharp_find_entry+0x2d4>)
 80118dc:	4613      	mov	r3, r2
 80118de:	005b      	lsls	r3, r3, #1
 80118e0:	4413      	add	r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	440b      	add	r3, r1
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d01a      	beq.n	8011922 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80118ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118f0:	497a      	ldr	r1, [pc, #488]	; (8011adc <etharp_find_entry+0x2d4>)
 80118f2:	4613      	mov	r3, r2
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	440b      	add	r3, r1
 80118fc:	3312      	adds	r3, #18
 80118fe:	881b      	ldrh	r3, [r3, #0]
 8011900:	8bba      	ldrh	r2, [r7, #28]
 8011902:	429a      	cmp	r2, r3
 8011904:	d845      	bhi.n	8011992 <etharp_find_entry+0x18a>
            old_queue = i;
 8011906:	8c3b      	ldrh	r3, [r7, #32]
 8011908:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801190a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801190e:	4973      	ldr	r1, [pc, #460]	; (8011adc <etharp_find_entry+0x2d4>)
 8011910:	4613      	mov	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4413      	add	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	440b      	add	r3, r1
 801191a:	3312      	adds	r3, #18
 801191c:	881b      	ldrh	r3, [r3, #0]
 801191e:	83bb      	strh	r3, [r7, #28]
 8011920:	e037      	b.n	8011992 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011922:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011926:	496d      	ldr	r1, [pc, #436]	; (8011adc <etharp_find_entry+0x2d4>)
 8011928:	4613      	mov	r3, r2
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	4413      	add	r3, r2
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	440b      	add	r3, r1
 8011932:	3312      	adds	r3, #18
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	8b7a      	ldrh	r2, [r7, #26]
 8011938:	429a      	cmp	r2, r3
 801193a:	d82a      	bhi.n	8011992 <etharp_find_entry+0x18a>
            old_pending = i;
 801193c:	8c3b      	ldrh	r3, [r7, #32]
 801193e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011944:	4965      	ldr	r1, [pc, #404]	; (8011adc <etharp_find_entry+0x2d4>)
 8011946:	4613      	mov	r3, r2
 8011948:	005b      	lsls	r3, r3, #1
 801194a:	4413      	add	r3, r2
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	3312      	adds	r3, #18
 8011952:	881b      	ldrh	r3, [r3, #0]
 8011954:	837b      	strh	r3, [r7, #26]
 8011956:	e01c      	b.n	8011992 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011958:	7dfb      	ldrb	r3, [r7, #23]
 801195a:	2b01      	cmp	r3, #1
 801195c:	d919      	bls.n	8011992 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801195e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011962:	495e      	ldr	r1, [pc, #376]	; (8011adc <etharp_find_entry+0x2d4>)
 8011964:	4613      	mov	r3, r2
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	3312      	adds	r3, #18
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	8b3a      	ldrh	r2, [r7, #24]
 8011974:	429a      	cmp	r2, r3
 8011976:	d80c      	bhi.n	8011992 <etharp_find_entry+0x18a>
            old_stable = i;
 8011978:	8c3b      	ldrh	r3, [r7, #32]
 801197a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801197c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011980:	4956      	ldr	r1, [pc, #344]	; (8011adc <etharp_find_entry+0x2d4>)
 8011982:	4613      	mov	r3, r2
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	4413      	add	r3, r2
 8011988:	00db      	lsls	r3, r3, #3
 801198a:	440b      	add	r3, r1
 801198c:	3312      	adds	r3, #18
 801198e:	881b      	ldrh	r3, [r3, #0]
 8011990:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011992:	8c3b      	ldrh	r3, [r7, #32]
 8011994:	3301      	adds	r3, #1
 8011996:	b29b      	uxth	r3, r3
 8011998:	843b      	strh	r3, [r7, #32]
 801199a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801199e:	2b09      	cmp	r3, #9
 80119a0:	f77f af4c 	ble.w	801183c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80119a4:	7afb      	ldrb	r3, [r7, #11]
 80119a6:	f003 0302 	and.w	r3, r3, #2
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d108      	bne.n	80119c0 <etharp_find_entry+0x1b8>
 80119ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119b2:	2b0a      	cmp	r3, #10
 80119b4:	d107      	bne.n	80119c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80119b6:	7afb      	ldrb	r3, [r7, #11]
 80119b8:	f003 0301 	and.w	r3, r3, #1
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d102      	bne.n	80119c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80119c0:	f04f 33ff 	mov.w	r3, #4294967295
 80119c4:	e085      	b.n	8011ad2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80119c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119ca:	2b09      	cmp	r3, #9
 80119cc:	dc02      	bgt.n	80119d4 <etharp_find_entry+0x1cc>
    i = empty;
 80119ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119d0:	843b      	strh	r3, [r7, #32]
 80119d2:	e039      	b.n	8011a48 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80119d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80119d8:	2b09      	cmp	r3, #9
 80119da:	dc14      	bgt.n	8011a06 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80119dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80119de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80119e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119e4:	493d      	ldr	r1, [pc, #244]	; (8011adc <etharp_find_entry+0x2d4>)
 80119e6:	4613      	mov	r3, r2
 80119e8:	005b      	lsls	r3, r3, #1
 80119ea:	4413      	add	r3, r2
 80119ec:	00db      	lsls	r3, r3, #3
 80119ee:	440b      	add	r3, r1
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d018      	beq.n	8011a28 <etharp_find_entry+0x220>
 80119f6:	4b3a      	ldr	r3, [pc, #232]	; (8011ae0 <etharp_find_entry+0x2d8>)
 80119f8:	f240 126d 	movw	r2, #365	; 0x16d
 80119fc:	493b      	ldr	r1, [pc, #236]	; (8011aec <etharp_find_entry+0x2e4>)
 80119fe:	483a      	ldr	r0, [pc, #232]	; (8011ae8 <etharp_find_entry+0x2e0>)
 8011a00:	f002 fab4 	bl	8013f6c <iprintf>
 8011a04:	e010      	b.n	8011a28 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011a0a:	2b09      	cmp	r3, #9
 8011a0c:	dc02      	bgt.n	8011a14 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011a0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011a10:	843b      	strh	r3, [r7, #32]
 8011a12:	e009      	b.n	8011a28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011a14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011a18:	2b09      	cmp	r3, #9
 8011a1a:	dc02      	bgt.n	8011a22 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011a1c:	8bfb      	ldrh	r3, [r7, #30]
 8011a1e:	843b      	strh	r3, [r7, #32]
 8011a20:	e002      	b.n	8011a28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295
 8011a26:	e054      	b.n	8011ad2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a2c:	2b09      	cmp	r3, #9
 8011a2e:	dd06      	ble.n	8011a3e <etharp_find_entry+0x236>
 8011a30:	4b2b      	ldr	r3, [pc, #172]	; (8011ae0 <etharp_find_entry+0x2d8>)
 8011a32:	f240 127f 	movw	r2, #383	; 0x17f
 8011a36:	492e      	ldr	r1, [pc, #184]	; (8011af0 <etharp_find_entry+0x2e8>)
 8011a38:	482b      	ldr	r0, [pc, #172]	; (8011ae8 <etharp_find_entry+0x2e0>)
 8011a3a:	f002 fa97 	bl	8013f6c <iprintf>
    etharp_free_entry(i);
 8011a3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7ff fe06 	bl	8011654 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a4c:	2b09      	cmp	r3, #9
 8011a4e:	dd06      	ble.n	8011a5e <etharp_find_entry+0x256>
 8011a50:	4b23      	ldr	r3, [pc, #140]	; (8011ae0 <etharp_find_entry+0x2d8>)
 8011a52:	f240 1283 	movw	r2, #387	; 0x183
 8011a56:	4926      	ldr	r1, [pc, #152]	; (8011af0 <etharp_find_entry+0x2e8>)
 8011a58:	4823      	ldr	r0, [pc, #140]	; (8011ae8 <etharp_find_entry+0x2e0>)
 8011a5a:	f002 fa87 	bl	8013f6c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a62:	491e      	ldr	r1, [pc, #120]	; (8011adc <etharp_find_entry+0x2d4>)
 8011a64:	4613      	mov	r3, r2
 8011a66:	005b      	lsls	r3, r3, #1
 8011a68:	4413      	add	r3, r2
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	440b      	add	r3, r1
 8011a6e:	3314      	adds	r3, #20
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d006      	beq.n	8011a84 <etharp_find_entry+0x27c>
 8011a76:	4b1a      	ldr	r3, [pc, #104]	; (8011ae0 <etharp_find_entry+0x2d8>)
 8011a78:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011a7c:	491d      	ldr	r1, [pc, #116]	; (8011af4 <etharp_find_entry+0x2ec>)
 8011a7e:	481a      	ldr	r0, [pc, #104]	; (8011ae8 <etharp_find_entry+0x2e0>)
 8011a80:	f002 fa74 	bl	8013f6c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d00b      	beq.n	8011aa2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	6819      	ldr	r1, [r3, #0]
 8011a92:	4812      	ldr	r0, [pc, #72]	; (8011adc <etharp_find_entry+0x2d4>)
 8011a94:	4613      	mov	r3, r2
 8011a96:	005b      	lsls	r3, r3, #1
 8011a98:	4413      	add	r3, r2
 8011a9a:	00db      	lsls	r3, r3, #3
 8011a9c:	4403      	add	r3, r0
 8011a9e:	3304      	adds	r3, #4
 8011aa0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aa6:	490d      	ldr	r1, [pc, #52]	; (8011adc <etharp_find_entry+0x2d4>)
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	4413      	add	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	440b      	add	r3, r1
 8011ab2:	3312      	adds	r3, #18
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011ab8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011abc:	4907      	ldr	r1, [pc, #28]	; (8011adc <etharp_find_entry+0x2d4>)
 8011abe:	4613      	mov	r3, r2
 8011ac0:	005b      	lsls	r3, r3, #1
 8011ac2:	4413      	add	r3, r2
 8011ac4:	00db      	lsls	r3, r3, #3
 8011ac6:	440b      	add	r3, r1
 8011ac8:	3308      	adds	r3, #8
 8011aca:	687a      	ldr	r2, [r7, #4]
 8011acc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011ace:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3728      	adds	r7, #40	; 0x28
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	20004a44 	.word	0x20004a44
 8011ae0:	080175cc 	.word	0x080175cc
 8011ae4:	08017604 	.word	0x08017604
 8011ae8:	08017644 	.word	0x08017644
 8011aec:	0801766c 	.word	0x0801766c
 8011af0:	08017684 	.word	0x08017684
 8011af4:	08017698 	.word	0x08017698

08011af8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b088      	sub	sp, #32
 8011afc:	af02      	add	r7, sp, #8
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	607a      	str	r2, [r7, #4]
 8011b04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011b0c:	2b06      	cmp	r3, #6
 8011b0e:	d006      	beq.n	8011b1e <etharp_update_arp_entry+0x26>
 8011b10:	4b48      	ldr	r3, [pc, #288]	; (8011c34 <etharp_update_arp_entry+0x13c>)
 8011b12:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011b16:	4948      	ldr	r1, [pc, #288]	; (8011c38 <etharp_update_arp_entry+0x140>)
 8011b18:	4848      	ldr	r0, [pc, #288]	; (8011c3c <etharp_update_arp_entry+0x144>)
 8011b1a:	f002 fa27 	bl	8013f6c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d012      	beq.n	8011b4a <etharp_update_arp_entry+0x52>
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d00e      	beq.n	8011b4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68f9      	ldr	r1, [r7, #12]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f001 f8fe 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8011b38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d105      	bne.n	8011b4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b46:	2be0      	cmp	r3, #224	; 0xe0
 8011b48:	d102      	bne.n	8011b50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011b4a:	f06f 030f 	mvn.w	r3, #15
 8011b4e:	e06c      	b.n	8011c2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011b50:	78fb      	ldrb	r3, [r7, #3]
 8011b52:	68fa      	ldr	r2, [r7, #12]
 8011b54:	4619      	mov	r1, r3
 8011b56:	68b8      	ldr	r0, [r7, #8]
 8011b58:	f7ff fe56 	bl	8011808 <etharp_find_entry>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	da02      	bge.n	8011b6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011b68:	8afb      	ldrh	r3, [r7, #22]
 8011b6a:	b25b      	sxtb	r3, r3
 8011b6c:	e05d      	b.n	8011c2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011b6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b72:	4933      	ldr	r1, [pc, #204]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011b74:	4613      	mov	r3, r2
 8011b76:	005b      	lsls	r3, r3, #1
 8011b78:	4413      	add	r3, r2
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3314      	adds	r3, #20
 8011b80:	2202      	movs	r2, #2
 8011b82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b88:	492d      	ldr	r1, [pc, #180]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	005b      	lsls	r3, r3, #1
 8011b8e:	4413      	add	r3, r2
 8011b90:	00db      	lsls	r3, r3, #3
 8011b92:	440b      	add	r3, r1
 8011b94:	3308      	adds	r3, #8
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b9e:	4613      	mov	r3, r2
 8011ba0:	005b      	lsls	r3, r3, #1
 8011ba2:	4413      	add	r3, r2
 8011ba4:	00db      	lsls	r3, r3, #3
 8011ba6:	3308      	adds	r3, #8
 8011ba8:	4a25      	ldr	r2, [pc, #148]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011baa:	4413      	add	r3, r2
 8011bac:	3304      	adds	r3, #4
 8011bae:	2206      	movs	r2, #6
 8011bb0:	6879      	ldr	r1, [r7, #4]
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f002 f9c4 	bl	8013f40 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011bb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bbc:	4920      	ldr	r1, [pc, #128]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011bbe:	4613      	mov	r3, r2
 8011bc0:	005b      	lsls	r3, r3, #1
 8011bc2:	4413      	add	r3, r2
 8011bc4:	00db      	lsls	r3, r3, #3
 8011bc6:	440b      	add	r3, r1
 8011bc8:	3312      	adds	r3, #18
 8011bca:	2200      	movs	r2, #0
 8011bcc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011bce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bd2:	491b      	ldr	r1, [pc, #108]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	005b      	lsls	r3, r3, #1
 8011bd8:	4413      	add	r3, r2
 8011bda:	00db      	lsls	r3, r3, #3
 8011bdc:	440b      	add	r3, r1
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d021      	beq.n	8011c28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011be4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011be8:	4915      	ldr	r1, [pc, #84]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011bea:	4613      	mov	r3, r2
 8011bec:	005b      	lsls	r3, r3, #1
 8011bee:	4413      	add	r3, r2
 8011bf0:	00db      	lsls	r3, r3, #3
 8011bf2:	440b      	add	r3, r1
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011bf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011bfc:	4910      	ldr	r1, [pc, #64]	; (8011c40 <etharp_update_arp_entry+0x148>)
 8011bfe:	4613      	mov	r3, r2
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4413      	add	r3, r2
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	440b      	add	r3, r1
 8011c08:	2200      	movs	r2, #0
 8011c0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011c12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011c16:	9300      	str	r3, [sp, #0]
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6939      	ldr	r1, [r7, #16]
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f002 f823 	bl	8013c68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011c22:	6938      	ldr	r0, [r7, #16]
 8011c24:	f7f9 fdf0 	bl	800b808 <pbuf_free>
  }
  return ERR_OK;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3718      	adds	r7, #24
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop
 8011c34:	080175cc 	.word	0x080175cc
 8011c38:	080176c4 	.word	0x080176c4
 8011c3c:	08017644 	.word	0x08017644
 8011c40:	20004a44 	.word	0x20004a44

08011c44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b084      	sub	sp, #16
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	60fb      	str	r3, [r7, #12]
 8011c50:	e01e      	b.n	8011c90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011c52:	4913      	ldr	r1, [pc, #76]	; (8011ca0 <etharp_cleanup_netif+0x5c>)
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	4613      	mov	r3, r2
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	4413      	add	r3, r2
 8011c5c:	00db      	lsls	r3, r3, #3
 8011c5e:	440b      	add	r3, r1
 8011c60:	3314      	adds	r3, #20
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011c66:	7afb      	ldrb	r3, [r7, #11]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d00e      	beq.n	8011c8a <etharp_cleanup_netif+0x46>
 8011c6c:	490c      	ldr	r1, [pc, #48]	; (8011ca0 <etharp_cleanup_netif+0x5c>)
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	4613      	mov	r3, r2
 8011c72:	005b      	lsls	r3, r3, #1
 8011c74:	4413      	add	r3, r2
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	440b      	add	r3, r1
 8011c7a:	3308      	adds	r3, #8
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d102      	bne.n	8011c8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011c84:	68f8      	ldr	r0, [r7, #12]
 8011c86:	f7ff fce5 	bl	8011654 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	60fb      	str	r3, [r7, #12]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2b09      	cmp	r3, #9
 8011c94:	dddd      	ble.n	8011c52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011c96:	bf00      	nop
 8011c98:	bf00      	nop
 8011c9a:	3710      	adds	r7, #16
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	20004a44 	.word	0x20004a44

08011ca4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011ca4:	b5b0      	push	{r4, r5, r7, lr}
 8011ca6:	b08a      	sub	sp, #40	; 0x28
 8011ca8:	af04      	add	r7, sp, #16
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d107      	bne.n	8011cc4 <etharp_input+0x20>
 8011cb4:	4b3d      	ldr	r3, [pc, #244]	; (8011dac <etharp_input+0x108>)
 8011cb6:	f240 228a 	movw	r2, #650	; 0x28a
 8011cba:	493d      	ldr	r1, [pc, #244]	; (8011db0 <etharp_input+0x10c>)
 8011cbc:	483d      	ldr	r0, [pc, #244]	; (8011db4 <etharp_input+0x110>)
 8011cbe:	f002 f955 	bl	8013f6c <iprintf>
 8011cc2:	e06f      	b.n	8011da4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	881b      	ldrh	r3, [r3, #0]
 8011cce:	b29b      	uxth	r3, r3
 8011cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cd4:	d10c      	bne.n	8011cf0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011cda:	2b06      	cmp	r3, #6
 8011cdc:	d108      	bne.n	8011cf0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011ce2:	2b04      	cmp	r3, #4
 8011ce4:	d104      	bne.n	8011cf0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	885b      	ldrh	r3, [r3, #2]
 8011cea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011cec:	2b08      	cmp	r3, #8
 8011cee:	d003      	beq.n	8011cf8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7f9 fd89 	bl	800b808 <pbuf_free>
    return;
 8011cf6:	e055      	b.n	8011da4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	330e      	adds	r3, #14
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	3318      	adds	r3, #24
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d102      	bne.n	8011d18 <etharp_input+0x74>
    for_us = 0;
 8011d12:	2300      	movs	r3, #0
 8011d14:	75fb      	strb	r3, [r7, #23]
 8011d16:	e009      	b.n	8011d2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011d18:	68ba      	ldr	r2, [r7, #8]
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	bf0c      	ite	eq
 8011d24:	2301      	moveq	r3, #1
 8011d26:	2300      	movne	r3, #0
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011d2c:	693b      	ldr	r3, [r7, #16]
 8011d2e:	f103 0208 	add.w	r2, r3, #8
 8011d32:	7dfb      	ldrb	r3, [r7, #23]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <etharp_input+0x98>
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e000      	b.n	8011d3e <etharp_input+0x9a>
 8011d3c:	2302      	movs	r3, #2
 8011d3e:	f107 010c 	add.w	r1, r7, #12
 8011d42:	6838      	ldr	r0, [r7, #0]
 8011d44:	f7ff fed8 	bl	8011af8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	88db      	ldrh	r3, [r3, #6]
 8011d4c:	b29b      	uxth	r3, r3
 8011d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d52:	d003      	beq.n	8011d5c <etharp_input+0xb8>
 8011d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d58:	d01e      	beq.n	8011d98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011d5a:	e020      	b.n	8011d9e <etharp_input+0xfa>
      if (for_us) {
 8011d5c:	7dfb      	ldrb	r3, [r7, #23]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d01c      	beq.n	8011d9c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011d68:	693b      	ldr	r3, [r7, #16]
 8011d6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011d78:	693a      	ldr	r2, [r7, #16]
 8011d7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011d7c:	2102      	movs	r1, #2
 8011d7e:	9103      	str	r1, [sp, #12]
 8011d80:	f107 010c 	add.w	r1, r7, #12
 8011d84:	9102      	str	r1, [sp, #8]
 8011d86:	9201      	str	r2, [sp, #4]
 8011d88:	9300      	str	r3, [sp, #0]
 8011d8a:	462b      	mov	r3, r5
 8011d8c:	4622      	mov	r2, r4
 8011d8e:	4601      	mov	r1, r0
 8011d90:	6838      	ldr	r0, [r7, #0]
 8011d92:	f000 faeb 	bl	801236c <etharp_raw>
      break;
 8011d96:	e001      	b.n	8011d9c <etharp_input+0xf8>
      break;
 8011d98:	bf00      	nop
 8011d9a:	e000      	b.n	8011d9e <etharp_input+0xfa>
      break;
 8011d9c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011d9e:	6878      	ldr	r0, [r7, #4]
 8011da0:	f7f9 fd32 	bl	800b808 <pbuf_free>
}
 8011da4:	3718      	adds	r7, #24
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bdb0      	pop	{r4, r5, r7, pc}
 8011daa:	bf00      	nop
 8011dac:	080175cc 	.word	0x080175cc
 8011db0:	0801771c 	.word	0x0801771c
 8011db4:	08017644 	.word	0x08017644

08011db8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b086      	sub	sp, #24
 8011dbc:	af02      	add	r7, sp, #8
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	4613      	mov	r3, r2
 8011dc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011dc6:	79fa      	ldrb	r2, [r7, #7]
 8011dc8:	4944      	ldr	r1, [pc, #272]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011dca:	4613      	mov	r3, r2
 8011dcc:	005b      	lsls	r3, r3, #1
 8011dce:	4413      	add	r3, r2
 8011dd0:	00db      	lsls	r3, r3, #3
 8011dd2:	440b      	add	r3, r1
 8011dd4:	3314      	adds	r3, #20
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d806      	bhi.n	8011dea <etharp_output_to_arp_index+0x32>
 8011ddc:	4b40      	ldr	r3, [pc, #256]	; (8011ee0 <etharp_output_to_arp_index+0x128>)
 8011dde:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011de2:	4940      	ldr	r1, [pc, #256]	; (8011ee4 <etharp_output_to_arp_index+0x12c>)
 8011de4:	4840      	ldr	r0, [pc, #256]	; (8011ee8 <etharp_output_to_arp_index+0x130>)
 8011de6:	f002 f8c1 	bl	8013f6c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011dea:	79fa      	ldrb	r2, [r7, #7]
 8011dec:	493b      	ldr	r1, [pc, #236]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011dee:	4613      	mov	r3, r2
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	4413      	add	r3, r2
 8011df4:	00db      	lsls	r3, r3, #3
 8011df6:	440b      	add	r3, r1
 8011df8:	3314      	adds	r3, #20
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	2b02      	cmp	r3, #2
 8011dfe:	d153      	bne.n	8011ea8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011e00:	79fa      	ldrb	r2, [r7, #7]
 8011e02:	4936      	ldr	r1, [pc, #216]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e04:	4613      	mov	r3, r2
 8011e06:	005b      	lsls	r3, r3, #1
 8011e08:	4413      	add	r3, r2
 8011e0a:	00db      	lsls	r3, r3, #3
 8011e0c:	440b      	add	r3, r1
 8011e0e:	3312      	adds	r3, #18
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011e16:	d919      	bls.n	8011e4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011e18:	79fa      	ldrb	r2, [r7, #7]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	4413      	add	r3, r2
 8011e20:	00db      	lsls	r3, r3, #3
 8011e22:	4a2e      	ldr	r2, [pc, #184]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e24:	4413      	add	r3, r2
 8011e26:	3304      	adds	r3, #4
 8011e28:	4619      	mov	r1, r3
 8011e2a:	68f8      	ldr	r0, [r7, #12]
 8011e2c:	f000 fb4c 	bl	80124c8 <etharp_request>
 8011e30:	4603      	mov	r3, r0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d138      	bne.n	8011ea8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e36:	79fa      	ldrb	r2, [r7, #7]
 8011e38:	4928      	ldr	r1, [pc, #160]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e3a:	4613      	mov	r3, r2
 8011e3c:	005b      	lsls	r3, r3, #1
 8011e3e:	4413      	add	r3, r2
 8011e40:	00db      	lsls	r3, r3, #3
 8011e42:	440b      	add	r3, r1
 8011e44:	3314      	adds	r3, #20
 8011e46:	2203      	movs	r2, #3
 8011e48:	701a      	strb	r2, [r3, #0]
 8011e4a:	e02d      	b.n	8011ea8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011e4c:	79fa      	ldrb	r2, [r7, #7]
 8011e4e:	4923      	ldr	r1, [pc, #140]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e50:	4613      	mov	r3, r2
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	4413      	add	r3, r2
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	440b      	add	r3, r1
 8011e5a:	3312      	adds	r3, #18
 8011e5c:	881b      	ldrh	r3, [r3, #0]
 8011e5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011e62:	d321      	bcc.n	8011ea8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011e64:	79fa      	ldrb	r2, [r7, #7]
 8011e66:	4613      	mov	r3, r2
 8011e68:	005b      	lsls	r3, r3, #1
 8011e6a:	4413      	add	r3, r2
 8011e6c:	00db      	lsls	r3, r3, #3
 8011e6e:	4a1b      	ldr	r2, [pc, #108]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e70:	4413      	add	r3, r2
 8011e72:	1d19      	adds	r1, r3, #4
 8011e74:	79fa      	ldrb	r2, [r7, #7]
 8011e76:	4613      	mov	r3, r2
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	4413      	add	r3, r2
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	3308      	adds	r3, #8
 8011e80:	4a16      	ldr	r2, [pc, #88]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e82:	4413      	add	r3, r2
 8011e84:	3304      	adds	r3, #4
 8011e86:	461a      	mov	r2, r3
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 fafb 	bl	8012484 <etharp_request_dst>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d109      	bne.n	8011ea8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e94:	79fa      	ldrb	r2, [r7, #7]
 8011e96:	4911      	ldr	r1, [pc, #68]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011e98:	4613      	mov	r3, r2
 8011e9a:	005b      	lsls	r3, r3, #1
 8011e9c:	4413      	add	r3, r2
 8011e9e:	00db      	lsls	r3, r3, #3
 8011ea0:	440b      	add	r3, r1
 8011ea2:	3314      	adds	r3, #20
 8011ea4:	2203      	movs	r2, #3
 8011ea6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011eae:	79fa      	ldrb	r2, [r7, #7]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	4413      	add	r3, r2
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	3308      	adds	r3, #8
 8011eba:	4a08      	ldr	r2, [pc, #32]	; (8011edc <etharp_output_to_arp_index+0x124>)
 8011ebc:	4413      	add	r3, r2
 8011ebe:	3304      	adds	r3, #4
 8011ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ec4:	9200      	str	r2, [sp, #0]
 8011ec6:	460a      	mov	r2, r1
 8011ec8:	68b9      	ldr	r1, [r7, #8]
 8011eca:	68f8      	ldr	r0, [r7, #12]
 8011ecc:	f001 fecc 	bl	8013c68 <ethernet_output>
 8011ed0:	4603      	mov	r3, r0
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	3710      	adds	r7, #16
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bd80      	pop	{r7, pc}
 8011eda:	bf00      	nop
 8011edc:	20004a44 	.word	0x20004a44
 8011ee0:	080175cc 	.word	0x080175cc
 8011ee4:	0801773c 	.word	0x0801773c
 8011ee8:	08017644 	.word	0x08017644

08011eec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b08a      	sub	sp, #40	; 0x28
 8011ef0:	af02      	add	r7, sp, #8
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <etharp_output+0x24>
 8011f02:	4b73      	ldr	r3, [pc, #460]	; (80120d0 <etharp_output+0x1e4>)
 8011f04:	f240 321e 	movw	r2, #798	; 0x31e
 8011f08:	4972      	ldr	r1, [pc, #456]	; (80120d4 <etharp_output+0x1e8>)
 8011f0a:	4873      	ldr	r0, [pc, #460]	; (80120d8 <etharp_output+0x1ec>)
 8011f0c:	f002 f82e 	bl	8013f6c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <etharp_output+0x38>
 8011f16:	4b6e      	ldr	r3, [pc, #440]	; (80120d0 <etharp_output+0x1e4>)
 8011f18:	f240 321f 	movw	r2, #799	; 0x31f
 8011f1c:	496f      	ldr	r1, [pc, #444]	; (80120dc <etharp_output+0x1f0>)
 8011f1e:	486e      	ldr	r0, [pc, #440]	; (80120d8 <etharp_output+0x1ec>)
 8011f20:	f002 f824 	bl	8013f6c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <etharp_output+0x4c>
 8011f2a:	4b69      	ldr	r3, [pc, #420]	; (80120d0 <etharp_output+0x1e4>)
 8011f2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011f30:	496b      	ldr	r1, [pc, #428]	; (80120e0 <etharp_output+0x1f4>)
 8011f32:	4869      	ldr	r0, [pc, #420]	; (80120d8 <etharp_output+0x1ec>)
 8011f34:	f002 f81a 	bl	8013f6c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	68f9      	ldr	r1, [r7, #12]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f000 fef8 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d002      	beq.n	8011f50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011f4a:	4b66      	ldr	r3, [pc, #408]	; (80120e4 <etharp_output+0x1f8>)
 8011f4c:	61fb      	str	r3, [r7, #28]
 8011f4e:	e0af      	b.n	80120b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f58:	2be0      	cmp	r3, #224	; 0xe0
 8011f5a:	d118      	bne.n	8011f8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011f60:	2300      	movs	r3, #0
 8011f62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011f64:	235e      	movs	r3, #94	; 0x5e
 8011f66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	3301      	adds	r3, #1
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	3302      	adds	r3, #2
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3303      	adds	r3, #3
 8011f82:	781b      	ldrb	r3, [r3, #0]
 8011f84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011f86:	f107 0310 	add.w	r3, r7, #16
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	e090      	b.n	80120b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	3304      	adds	r3, #4
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	405a      	eors	r2, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	4013      	ands	r3, r2
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d012      	beq.n	8011fcc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011fac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d00b      	beq.n	8011fcc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	330c      	adds	r3, #12
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d003      	beq.n	8011fc6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	330c      	adds	r3, #12
 8011fc2:	61bb      	str	r3, [r7, #24]
 8011fc4:	e002      	b.n	8011fcc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011fc6:	f06f 0303 	mvn.w	r3, #3
 8011fca:	e07d      	b.n	80120c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011fcc:	4b46      	ldr	r3, [pc, #280]	; (80120e8 <etharp_output+0x1fc>)
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	4a46      	ldr	r2, [pc, #280]	; (80120ec <etharp_output+0x200>)
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	005b      	lsls	r3, r3, #1
 8011fd8:	440b      	add	r3, r1
 8011fda:	00db      	lsls	r3, r3, #3
 8011fdc:	4413      	add	r3, r2
 8011fde:	3314      	adds	r3, #20
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	2b01      	cmp	r3, #1
 8011fe4:	d925      	bls.n	8012032 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011fe6:	4b40      	ldr	r3, [pc, #256]	; (80120e8 <etharp_output+0x1fc>)
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	4619      	mov	r1, r3
 8011fec:	4a3f      	ldr	r2, [pc, #252]	; (80120ec <etharp_output+0x200>)
 8011fee:	460b      	mov	r3, r1
 8011ff0:	005b      	lsls	r3, r3, #1
 8011ff2:	440b      	add	r3, r1
 8011ff4:	00db      	lsls	r3, r3, #3
 8011ff6:	4413      	add	r3, r2
 8011ff8:	3308      	adds	r3, #8
 8011ffa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d117      	bne.n	8012032 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012002:	69bb      	ldr	r3, [r7, #24]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	4b38      	ldr	r3, [pc, #224]	; (80120e8 <etharp_output+0x1fc>)
 8012008:	781b      	ldrb	r3, [r3, #0]
 801200a:	4618      	mov	r0, r3
 801200c:	4937      	ldr	r1, [pc, #220]	; (80120ec <etharp_output+0x200>)
 801200e:	4603      	mov	r3, r0
 8012010:	005b      	lsls	r3, r3, #1
 8012012:	4403      	add	r3, r0
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	440b      	add	r3, r1
 8012018:	3304      	adds	r3, #4
 801201a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801201c:	429a      	cmp	r2, r3
 801201e:	d108      	bne.n	8012032 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012020:	4b31      	ldr	r3, [pc, #196]	; (80120e8 <etharp_output+0x1fc>)
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	461a      	mov	r2, r3
 8012026:	68b9      	ldr	r1, [r7, #8]
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f7ff fec5 	bl	8011db8 <etharp_output_to_arp_index>
 801202e:	4603      	mov	r3, r0
 8012030:	e04a      	b.n	80120c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012032:	2300      	movs	r3, #0
 8012034:	75fb      	strb	r3, [r7, #23]
 8012036:	e031      	b.n	801209c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012038:	7dfa      	ldrb	r2, [r7, #23]
 801203a:	492c      	ldr	r1, [pc, #176]	; (80120ec <etharp_output+0x200>)
 801203c:	4613      	mov	r3, r2
 801203e:	005b      	lsls	r3, r3, #1
 8012040:	4413      	add	r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	440b      	add	r3, r1
 8012046:	3314      	adds	r3, #20
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b01      	cmp	r3, #1
 801204c:	d923      	bls.n	8012096 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801204e:	7dfa      	ldrb	r2, [r7, #23]
 8012050:	4926      	ldr	r1, [pc, #152]	; (80120ec <etharp_output+0x200>)
 8012052:	4613      	mov	r3, r2
 8012054:	005b      	lsls	r3, r3, #1
 8012056:	4413      	add	r3, r2
 8012058:	00db      	lsls	r3, r3, #3
 801205a:	440b      	add	r3, r1
 801205c:	3308      	adds	r3, #8
 801205e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	429a      	cmp	r2, r3
 8012064:	d117      	bne.n	8012096 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	6819      	ldr	r1, [r3, #0]
 801206a:	7dfa      	ldrb	r2, [r7, #23]
 801206c:	481f      	ldr	r0, [pc, #124]	; (80120ec <etharp_output+0x200>)
 801206e:	4613      	mov	r3, r2
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	4413      	add	r3, r2
 8012074:	00db      	lsls	r3, r3, #3
 8012076:	4403      	add	r3, r0
 8012078:	3304      	adds	r3, #4
 801207a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801207c:	4299      	cmp	r1, r3
 801207e:	d10a      	bne.n	8012096 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012080:	4a19      	ldr	r2, [pc, #100]	; (80120e8 <etharp_output+0x1fc>)
 8012082:	7dfb      	ldrb	r3, [r7, #23]
 8012084:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012086:	7dfb      	ldrb	r3, [r7, #23]
 8012088:	461a      	mov	r2, r3
 801208a:	68b9      	ldr	r1, [r7, #8]
 801208c:	68f8      	ldr	r0, [r7, #12]
 801208e:	f7ff fe93 	bl	8011db8 <etharp_output_to_arp_index>
 8012092:	4603      	mov	r3, r0
 8012094:	e018      	b.n	80120c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012096:	7dfb      	ldrb	r3, [r7, #23]
 8012098:	3301      	adds	r3, #1
 801209a:	75fb      	strb	r3, [r7, #23]
 801209c:	7dfb      	ldrb	r3, [r7, #23]
 801209e:	2b09      	cmp	r3, #9
 80120a0:	d9ca      	bls.n	8012038 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80120a2:	68ba      	ldr	r2, [r7, #8]
 80120a4:	69b9      	ldr	r1, [r7, #24]
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f000 f822 	bl	80120f0 <etharp_query>
 80120ac:	4603      	mov	r3, r0
 80120ae:	e00b      	b.n	80120c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80120b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	68b9      	ldr	r1, [r7, #8]
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f001 fdd1 	bl	8013c68 <ethernet_output>
 80120c6:	4603      	mov	r3, r0
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3720      	adds	r7, #32
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bd80      	pop	{r7, pc}
 80120d0:	080175cc 	.word	0x080175cc
 80120d4:	0801771c 	.word	0x0801771c
 80120d8:	08017644 	.word	0x08017644
 80120dc:	0801776c 	.word	0x0801776c
 80120e0:	0801770c 	.word	0x0801770c
 80120e4:	08017de0 	.word	0x08017de0
 80120e8:	20004b34 	.word	0x20004b34
 80120ec:	20004a44 	.word	0x20004a44

080120f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08c      	sub	sp, #48	; 0x30
 80120f4:	af02      	add	r7, sp, #8
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	3326      	adds	r3, #38	; 0x26
 8012100:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012102:	23ff      	movs	r3, #255	; 0xff
 8012104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	68f9      	ldr	r1, [r7, #12]
 8012112:	4618      	mov	r0, r3
 8012114:	f000 fe0e 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d10c      	bne.n	8012138 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012126:	2be0      	cmp	r3, #224	; 0xe0
 8012128:	d006      	beq.n	8012138 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d003      	beq.n	8012138 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d102      	bne.n	801213e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012138:	f06f 030f 	mvn.w	r3, #15
 801213c:	e101      	b.n	8012342 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801213e:	68fa      	ldr	r2, [r7, #12]
 8012140:	2101      	movs	r1, #1
 8012142:	68b8      	ldr	r0, [r7, #8]
 8012144:	f7ff fb60 	bl	8011808 <etharp_find_entry>
 8012148:	4603      	mov	r3, r0
 801214a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801214c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012150:	2b00      	cmp	r3, #0
 8012152:	da02      	bge.n	801215a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012154:	8a7b      	ldrh	r3, [r7, #18]
 8012156:	b25b      	sxtb	r3, r3
 8012158:	e0f3      	b.n	8012342 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801215a:	8a7b      	ldrh	r3, [r7, #18]
 801215c:	2b7e      	cmp	r3, #126	; 0x7e
 801215e:	d906      	bls.n	801216e <etharp_query+0x7e>
 8012160:	4b7a      	ldr	r3, [pc, #488]	; (801234c <etharp_query+0x25c>)
 8012162:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012166:	497a      	ldr	r1, [pc, #488]	; (8012350 <etharp_query+0x260>)
 8012168:	487a      	ldr	r0, [pc, #488]	; (8012354 <etharp_query+0x264>)
 801216a:	f001 feff 	bl	8013f6c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801216e:	8a7b      	ldrh	r3, [r7, #18]
 8012170:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012172:	7c7a      	ldrb	r2, [r7, #17]
 8012174:	4978      	ldr	r1, [pc, #480]	; (8012358 <etharp_query+0x268>)
 8012176:	4613      	mov	r3, r2
 8012178:	005b      	lsls	r3, r3, #1
 801217a:	4413      	add	r3, r2
 801217c:	00db      	lsls	r3, r3, #3
 801217e:	440b      	add	r3, r1
 8012180:	3314      	adds	r3, #20
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d115      	bne.n	80121b4 <etharp_query+0xc4>
    is_new_entry = 1;
 8012188:	2301      	movs	r3, #1
 801218a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801218c:	7c7a      	ldrb	r2, [r7, #17]
 801218e:	4972      	ldr	r1, [pc, #456]	; (8012358 <etharp_query+0x268>)
 8012190:	4613      	mov	r3, r2
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	4413      	add	r3, r2
 8012196:	00db      	lsls	r3, r3, #3
 8012198:	440b      	add	r3, r1
 801219a:	3314      	adds	r3, #20
 801219c:	2201      	movs	r2, #1
 801219e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80121a0:	7c7a      	ldrb	r2, [r7, #17]
 80121a2:	496d      	ldr	r1, [pc, #436]	; (8012358 <etharp_query+0x268>)
 80121a4:	4613      	mov	r3, r2
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	4413      	add	r3, r2
 80121aa:	00db      	lsls	r3, r3, #3
 80121ac:	440b      	add	r3, r1
 80121ae:	3308      	adds	r3, #8
 80121b0:	68fa      	ldr	r2, [r7, #12]
 80121b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80121b4:	7c7a      	ldrb	r2, [r7, #17]
 80121b6:	4968      	ldr	r1, [pc, #416]	; (8012358 <etharp_query+0x268>)
 80121b8:	4613      	mov	r3, r2
 80121ba:	005b      	lsls	r3, r3, #1
 80121bc:	4413      	add	r3, r2
 80121be:	00db      	lsls	r3, r3, #3
 80121c0:	440b      	add	r3, r1
 80121c2:	3314      	adds	r3, #20
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d011      	beq.n	80121ee <etharp_query+0xfe>
 80121ca:	7c7a      	ldrb	r2, [r7, #17]
 80121cc:	4962      	ldr	r1, [pc, #392]	; (8012358 <etharp_query+0x268>)
 80121ce:	4613      	mov	r3, r2
 80121d0:	005b      	lsls	r3, r3, #1
 80121d2:	4413      	add	r3, r2
 80121d4:	00db      	lsls	r3, r3, #3
 80121d6:	440b      	add	r3, r1
 80121d8:	3314      	adds	r3, #20
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d806      	bhi.n	80121ee <etharp_query+0xfe>
 80121e0:	4b5a      	ldr	r3, [pc, #360]	; (801234c <etharp_query+0x25c>)
 80121e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80121e6:	495d      	ldr	r1, [pc, #372]	; (801235c <etharp_query+0x26c>)
 80121e8:	485a      	ldr	r0, [pc, #360]	; (8012354 <etharp_query+0x264>)
 80121ea:	f001 febf 	bl	8013f6c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d102      	bne.n	80121fa <etharp_query+0x10a>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d10c      	bne.n	8012214 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80121fa:	68b9      	ldr	r1, [r7, #8]
 80121fc:	68f8      	ldr	r0, [r7, #12]
 80121fe:	f000 f963 	bl	80124c8 <etharp_request>
 8012202:	4603      	mov	r3, r0
 8012204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d102      	bne.n	8012214 <etharp_query+0x124>
      return result;
 801220e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012212:	e096      	b.n	8012342 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d106      	bne.n	8012228 <etharp_query+0x138>
 801221a:	4b4c      	ldr	r3, [pc, #304]	; (801234c <etharp_query+0x25c>)
 801221c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012220:	494f      	ldr	r1, [pc, #316]	; (8012360 <etharp_query+0x270>)
 8012222:	484c      	ldr	r0, [pc, #304]	; (8012354 <etharp_query+0x264>)
 8012224:	f001 fea2 	bl	8013f6c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012228:	7c7a      	ldrb	r2, [r7, #17]
 801222a:	494b      	ldr	r1, [pc, #300]	; (8012358 <etharp_query+0x268>)
 801222c:	4613      	mov	r3, r2
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	4413      	add	r3, r2
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	440b      	add	r3, r1
 8012236:	3314      	adds	r3, #20
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d917      	bls.n	801226e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801223e:	4a49      	ldr	r2, [pc, #292]	; (8012364 <etharp_query+0x274>)
 8012240:	7c7b      	ldrb	r3, [r7, #17]
 8012242:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012244:	7c7a      	ldrb	r2, [r7, #17]
 8012246:	4613      	mov	r3, r2
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	4413      	add	r3, r2
 801224c:	00db      	lsls	r3, r3, #3
 801224e:	3308      	adds	r3, #8
 8012250:	4a41      	ldr	r2, [pc, #260]	; (8012358 <etharp_query+0x268>)
 8012252:	4413      	add	r3, r2
 8012254:	3304      	adds	r3, #4
 8012256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801225a:	9200      	str	r2, [sp, #0]
 801225c:	697a      	ldr	r2, [r7, #20]
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f001 fd01 	bl	8013c68 <ethernet_output>
 8012266:	4603      	mov	r3, r0
 8012268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801226c:	e067      	b.n	801233e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801226e:	7c7a      	ldrb	r2, [r7, #17]
 8012270:	4939      	ldr	r1, [pc, #228]	; (8012358 <etharp_query+0x268>)
 8012272:	4613      	mov	r3, r2
 8012274:	005b      	lsls	r3, r3, #1
 8012276:	4413      	add	r3, r2
 8012278:	00db      	lsls	r3, r3, #3
 801227a:	440b      	add	r3, r1
 801227c:	3314      	adds	r3, #20
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d15c      	bne.n	801233e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012284:	2300      	movs	r3, #0
 8012286:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801228c:	e01c      	b.n	80122c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801228e:	69fb      	ldr	r3, [r7, #28]
 8012290:	895a      	ldrh	r2, [r3, #10]
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	891b      	ldrh	r3, [r3, #8]
 8012296:	429a      	cmp	r2, r3
 8012298:	d10a      	bne.n	80122b0 <etharp_query+0x1c0>
 801229a:	69fb      	ldr	r3, [r7, #28]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d006      	beq.n	80122b0 <etharp_query+0x1c0>
 80122a2:	4b2a      	ldr	r3, [pc, #168]	; (801234c <etharp_query+0x25c>)
 80122a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80122a8:	492f      	ldr	r1, [pc, #188]	; (8012368 <etharp_query+0x278>)
 80122aa:	482a      	ldr	r0, [pc, #168]	; (8012354 <etharp_query+0x264>)
 80122ac:	f001 fe5e 	bl	8013f6c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80122b0:	69fb      	ldr	r3, [r7, #28]
 80122b2:	7b1b      	ldrb	r3, [r3, #12]
 80122b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d002      	beq.n	80122c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80122bc:	2301      	movs	r3, #1
 80122be:	61bb      	str	r3, [r7, #24]
        break;
 80122c0:	e005      	b.n	80122ce <etharp_query+0x1de>
      }
      p = p->next;
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d1df      	bne.n	801228e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d007      	beq.n	80122e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80122d4:	687a      	ldr	r2, [r7, #4]
 80122d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80122da:	200e      	movs	r0, #14
 80122dc:	f7f9 fcfc 	bl	800bcd8 <pbuf_clone>
 80122e0:	61f8      	str	r0, [r7, #28]
 80122e2:	e004      	b.n	80122ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80122e8:	69f8      	ldr	r0, [r7, #28]
 80122ea:	f7f9 fb33 	bl	800b954 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d021      	beq.n	8012338 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80122f4:	7c7a      	ldrb	r2, [r7, #17]
 80122f6:	4918      	ldr	r1, [pc, #96]	; (8012358 <etharp_query+0x268>)
 80122f8:	4613      	mov	r3, r2
 80122fa:	005b      	lsls	r3, r3, #1
 80122fc:	4413      	add	r3, r2
 80122fe:	00db      	lsls	r3, r3, #3
 8012300:	440b      	add	r3, r1
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d00a      	beq.n	801231e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012308:	7c7a      	ldrb	r2, [r7, #17]
 801230a:	4913      	ldr	r1, [pc, #76]	; (8012358 <etharp_query+0x268>)
 801230c:	4613      	mov	r3, r2
 801230e:	005b      	lsls	r3, r3, #1
 8012310:	4413      	add	r3, r2
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	440b      	add	r3, r1
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	4618      	mov	r0, r3
 801231a:	f7f9 fa75 	bl	800b808 <pbuf_free>
      }
      arp_table[i].q = p;
 801231e:	7c7a      	ldrb	r2, [r7, #17]
 8012320:	490d      	ldr	r1, [pc, #52]	; (8012358 <etharp_query+0x268>)
 8012322:	4613      	mov	r3, r2
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4413      	add	r3, r2
 8012328:	00db      	lsls	r3, r3, #3
 801232a:	440b      	add	r3, r1
 801232c:	69fa      	ldr	r2, [r7, #28]
 801232e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012336:	e002      	b.n	801233e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012338:	23ff      	movs	r3, #255	; 0xff
 801233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801233e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012342:	4618      	mov	r0, r3
 8012344:	3728      	adds	r7, #40	; 0x28
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	080175cc 	.word	0x080175cc
 8012350:	08017778 	.word	0x08017778
 8012354:	08017644 	.word	0x08017644
 8012358:	20004a44 	.word	0x20004a44
 801235c:	08017788 	.word	0x08017788
 8012360:	0801776c 	.word	0x0801776c
 8012364:	20004b34 	.word	0x20004b34
 8012368:	080177b0 	.word	0x080177b0

0801236c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b08a      	sub	sp, #40	; 0x28
 8012370:	af02      	add	r7, sp, #8
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801237a:	2300      	movs	r3, #0
 801237c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d106      	bne.n	8012392 <etharp_raw+0x26>
 8012384:	4b3a      	ldr	r3, [pc, #232]	; (8012470 <etharp_raw+0x104>)
 8012386:	f240 4257 	movw	r2, #1111	; 0x457
 801238a:	493a      	ldr	r1, [pc, #232]	; (8012474 <etharp_raw+0x108>)
 801238c:	483a      	ldr	r0, [pc, #232]	; (8012478 <etharp_raw+0x10c>)
 801238e:	f001 fded 	bl	8013f6c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012392:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012396:	211c      	movs	r1, #28
 8012398:	200e      	movs	r0, #14
 801239a:	f7f8 ff51 	bl	800b240 <pbuf_alloc>
 801239e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d102      	bne.n	80123ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80123a6:	f04f 33ff 	mov.w	r3, #4294967295
 80123aa:	e05d      	b.n	8012468 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	895b      	ldrh	r3, [r3, #10]
 80123b0:	2b1b      	cmp	r3, #27
 80123b2:	d806      	bhi.n	80123c2 <etharp_raw+0x56>
 80123b4:	4b2e      	ldr	r3, [pc, #184]	; (8012470 <etharp_raw+0x104>)
 80123b6:	f240 4262 	movw	r2, #1122	; 0x462
 80123ba:	4930      	ldr	r1, [pc, #192]	; (801247c <etharp_raw+0x110>)
 80123bc:	482e      	ldr	r0, [pc, #184]	; (8012478 <etharp_raw+0x10c>)
 80123be:	f001 fdd5 	bl	8013f6c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80123c2:	69bb      	ldr	r3, [r7, #24]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80123c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7f7 fe70 	bl	800a0b0 <lwip_htons>
 80123d0:	4603      	mov	r3, r0
 80123d2:	461a      	mov	r2, r3
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80123de:	2b06      	cmp	r3, #6
 80123e0:	d006      	beq.n	80123f0 <etharp_raw+0x84>
 80123e2:	4b23      	ldr	r3, [pc, #140]	; (8012470 <etharp_raw+0x104>)
 80123e4:	f240 4269 	movw	r2, #1129	; 0x469
 80123e8:	4925      	ldr	r1, [pc, #148]	; (8012480 <etharp_raw+0x114>)
 80123ea:	4823      	ldr	r0, [pc, #140]	; (8012478 <etharp_raw+0x10c>)
 80123ec:	f001 fdbe 	bl	8013f6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	3308      	adds	r3, #8
 80123f4:	2206      	movs	r2, #6
 80123f6:	6839      	ldr	r1, [r7, #0]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f001 fda1 	bl	8013f40 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	3312      	adds	r3, #18
 8012402:	2206      	movs	r2, #6
 8012404:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012406:	4618      	mov	r0, r3
 8012408:	f001 fd9a 	bl	8013f40 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	330e      	adds	r3, #14
 8012410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012412:	6812      	ldr	r2, [r2, #0]
 8012414:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012416:	697b      	ldr	r3, [r7, #20]
 8012418:	3318      	adds	r3, #24
 801241a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801241c:	6812      	ldr	r2, [r2, #0]
 801241e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	2200      	movs	r2, #0
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	2200      	movs	r2, #0
 8012428:	f042 0201 	orr.w	r2, r2, #1
 801242c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	2200      	movs	r2, #0
 8012432:	f042 0208 	orr.w	r2, r2, #8
 8012436:	709a      	strb	r2, [r3, #2]
 8012438:	2200      	movs	r2, #0
 801243a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	2206      	movs	r2, #6
 8012440:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	2204      	movs	r2, #4
 8012446:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012448:	f640 0306 	movw	r3, #2054	; 0x806
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	69b9      	ldr	r1, [r7, #24]
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f001 fc07 	bl	8013c68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801245a:	69b8      	ldr	r0, [r7, #24]
 801245c:	f7f9 f9d4 	bl	800b808 <pbuf_free>
  p = NULL;
 8012460:	2300      	movs	r3, #0
 8012462:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012464:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012468:	4618      	mov	r0, r3
 801246a:	3720      	adds	r7, #32
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	080175cc 	.word	0x080175cc
 8012474:	0801771c 	.word	0x0801771c
 8012478:	08017644 	.word	0x08017644
 801247c:	080177cc 	.word	0x080177cc
 8012480:	08017800 	.word	0x08017800

08012484 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af04      	add	r7, sp, #16
 801248a:	60f8      	str	r0, [r7, #12]
 801248c:	60b9      	str	r1, [r7, #8]
 801248e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80124a0:	2201      	movs	r2, #1
 80124a2:	9203      	str	r2, [sp, #12]
 80124a4:	68ba      	ldr	r2, [r7, #8]
 80124a6:	9202      	str	r2, [sp, #8]
 80124a8:	4a06      	ldr	r2, [pc, #24]	; (80124c4 <etharp_request_dst+0x40>)
 80124aa:	9201      	str	r2, [sp, #4]
 80124ac:	9300      	str	r3, [sp, #0]
 80124ae:	4603      	mov	r3, r0
 80124b0:	687a      	ldr	r2, [r7, #4]
 80124b2:	68f8      	ldr	r0, [r7, #12]
 80124b4:	f7ff ff5a 	bl	801236c <etharp_raw>
 80124b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	08017de8 	.word	0x08017de8

080124c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80124d2:	4a05      	ldr	r2, [pc, #20]	; (80124e8 <etharp_request+0x20>)
 80124d4:	6839      	ldr	r1, [r7, #0]
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f7ff ffd4 	bl	8012484 <etharp_request_dst>
 80124dc:	4603      	mov	r3, r0
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	08017de0 	.word	0x08017de0

080124ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b08e      	sub	sp, #56	; 0x38
 80124f0:	af04      	add	r7, sp, #16
 80124f2:	6078      	str	r0, [r7, #4]
 80124f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80124f6:	4b79      	ldr	r3, [pc, #484]	; (80126dc <icmp_input+0x1f0>)
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80124fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	f003 030f 	and.w	r3, r3, #15
 8012504:	b2db      	uxtb	r3, r3
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	b2db      	uxtb	r3, r3
 801250a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801250c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801250e:	2b13      	cmp	r3, #19
 8012510:	f240 80cd 	bls.w	80126ae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	895b      	ldrh	r3, [r3, #10]
 8012518:	2b03      	cmp	r3, #3
 801251a:	f240 80ca 	bls.w	80126b2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	781b      	ldrb	r3, [r3, #0]
 8012524:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012528:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 80b7 	beq.w	80126a0 <icmp_input+0x1b4>
 8012532:	2b08      	cmp	r3, #8
 8012534:	f040 80b7 	bne.w	80126a6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012538:	4b69      	ldr	r3, [pc, #420]	; (80126e0 <icmp_input+0x1f4>)
 801253a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801253c:	4b67      	ldr	r3, [pc, #412]	; (80126dc <icmp_input+0x1f0>)
 801253e:	695b      	ldr	r3, [r3, #20]
 8012540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012544:	2be0      	cmp	r3, #224	; 0xe0
 8012546:	f000 80bb 	beq.w	80126c0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801254a:	4b64      	ldr	r3, [pc, #400]	; (80126dc <icmp_input+0x1f0>)
 801254c:	695b      	ldr	r3, [r3, #20]
 801254e:	4a63      	ldr	r2, [pc, #396]	; (80126dc <icmp_input+0x1f0>)
 8012550:	6812      	ldr	r2, [r2, #0]
 8012552:	4611      	mov	r1, r2
 8012554:	4618      	mov	r0, r3
 8012556:	f000 fbed 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	f040 80b1 	bne.w	80126c4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	891b      	ldrh	r3, [r3, #8]
 8012566:	2b07      	cmp	r3, #7
 8012568:	f240 80a5 	bls.w	80126b6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801256c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801256e:	330e      	adds	r3, #14
 8012570:	4619      	mov	r1, r3
 8012572:	6878      	ldr	r0, [r7, #4]
 8012574:	f7f9 f8b2 	bl	800b6dc <pbuf_add_header>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d04b      	beq.n	8012616 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	891a      	ldrh	r2, [r3, #8]
 8012582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012584:	4413      	add	r3, r2
 8012586:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	891b      	ldrh	r3, [r3, #8]
 801258c:	8b7a      	ldrh	r2, [r7, #26]
 801258e:	429a      	cmp	r2, r3
 8012590:	f0c0 809a 	bcc.w	80126c8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012594:	8b7b      	ldrh	r3, [r7, #26]
 8012596:	f44f 7220 	mov.w	r2, #640	; 0x280
 801259a:	4619      	mov	r1, r3
 801259c:	200e      	movs	r0, #14
 801259e:	f7f8 fe4f 	bl	800b240 <pbuf_alloc>
 80125a2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	f000 8090 	beq.w	80126cc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	895b      	ldrh	r3, [r3, #10]
 80125b0:	461a      	mov	r2, r3
 80125b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125b4:	3308      	adds	r3, #8
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d203      	bcs.n	80125c2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80125ba:	6978      	ldr	r0, [r7, #20]
 80125bc:	f7f9 f924 	bl	800b808 <pbuf_free>
          goto icmperr;
 80125c0:	e085      	b.n	80126ce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80125c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80125ca:	4618      	mov	r0, r3
 80125cc:	f001 fcb8 	bl	8013f40 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80125d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125d2:	4619      	mov	r1, r3
 80125d4:	6978      	ldr	r0, [r7, #20]
 80125d6:	f7f9 f891 	bl	800b6fc <pbuf_remove_header>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d009      	beq.n	80125f4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80125e0:	4b40      	ldr	r3, [pc, #256]	; (80126e4 <icmp_input+0x1f8>)
 80125e2:	22b6      	movs	r2, #182	; 0xb6
 80125e4:	4940      	ldr	r1, [pc, #256]	; (80126e8 <icmp_input+0x1fc>)
 80125e6:	4841      	ldr	r0, [pc, #260]	; (80126ec <icmp_input+0x200>)
 80125e8:	f001 fcc0 	bl	8013f6c <iprintf>
          pbuf_free(r);
 80125ec:	6978      	ldr	r0, [r7, #20]
 80125ee:	f7f9 f90b 	bl	800b808 <pbuf_free>
          goto icmperr;
 80125f2:	e06c      	b.n	80126ce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80125f4:	6879      	ldr	r1, [r7, #4]
 80125f6:	6978      	ldr	r0, [r7, #20]
 80125f8:	f7f9 fa2a 	bl	800ba50 <pbuf_copy>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d003      	beq.n	801260a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012602:	6978      	ldr	r0, [r7, #20]
 8012604:	f7f9 f900 	bl	800b808 <pbuf_free>
          goto icmperr;
 8012608:	e061      	b.n	80126ce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7f9 f8fc 	bl	800b808 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	607b      	str	r3, [r7, #4]
 8012614:	e00f      	b.n	8012636 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012618:	330e      	adds	r3, #14
 801261a:	4619      	mov	r1, r3
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7f9 f86d 	bl	800b6fc <pbuf_remove_header>
 8012622:	4603      	mov	r3, r0
 8012624:	2b00      	cmp	r3, #0
 8012626:	d006      	beq.n	8012636 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012628:	4b2e      	ldr	r3, [pc, #184]	; (80126e4 <icmp_input+0x1f8>)
 801262a:	22c7      	movs	r2, #199	; 0xc7
 801262c:	4930      	ldr	r1, [pc, #192]	; (80126f0 <icmp_input+0x204>)
 801262e:	482f      	ldr	r0, [pc, #188]	; (80126ec <icmp_input+0x200>)
 8012630:	f001 fc9c 	bl	8013f6c <iprintf>
          goto icmperr;
 8012634:	e04b      	b.n	80126ce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801263c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801263e:	4619      	mov	r1, r3
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f7f9 f84b 	bl	800b6dc <pbuf_add_header>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d12b      	bne.n	80126a4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801265a:	4b20      	ldr	r3, [pc, #128]	; (80126dc <icmp_input+0x1f0>)
 801265c:	691a      	ldr	r2, [r3, #16]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012662:	693b      	ldr	r3, [r7, #16]
 8012664:	2200      	movs	r2, #0
 8012666:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	2200      	movs	r2, #0
 801266c:	709a      	strb	r2, [r3, #2]
 801266e:	2200      	movs	r2, #0
 8012670:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	22ff      	movs	r2, #255	; 0xff
 8012676:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	2200      	movs	r2, #0
 801267c:	729a      	strb	r2, [r3, #10]
 801267e:	2200      	movs	r2, #0
 8012680:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	9302      	str	r3, [sp, #8]
 8012686:	2301      	movs	r3, #1
 8012688:	9301      	str	r3, [sp, #4]
 801268a:	2300      	movs	r3, #0
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	23ff      	movs	r3, #255	; 0xff
 8012690:	2200      	movs	r2, #0
 8012692:	69f9      	ldr	r1, [r7, #28]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 fa75 	bl	8012b84 <ip4_output_if>
 801269a:	4603      	mov	r3, r0
 801269c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801269e:	e001      	b.n	80126a4 <icmp_input+0x1b8>
      break;
 80126a0:	bf00      	nop
 80126a2:	e000      	b.n	80126a6 <icmp_input+0x1ba>
      break;
 80126a4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7f9 f8ae 	bl	800b808 <pbuf_free>
  return;
 80126ac:	e013      	b.n	80126d6 <icmp_input+0x1ea>
    goto lenerr;
 80126ae:	bf00      	nop
 80126b0:	e002      	b.n	80126b8 <icmp_input+0x1cc>
    goto lenerr;
 80126b2:	bf00      	nop
 80126b4:	e000      	b.n	80126b8 <icmp_input+0x1cc>
        goto lenerr;
 80126b6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7f9 f8a5 	bl	800b808 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80126be:	e00a      	b.n	80126d6 <icmp_input+0x1ea>
        goto icmperr;
 80126c0:	bf00      	nop
 80126c2:	e004      	b.n	80126ce <icmp_input+0x1e2>
        goto icmperr;
 80126c4:	bf00      	nop
 80126c6:	e002      	b.n	80126ce <icmp_input+0x1e2>
          goto icmperr;
 80126c8:	bf00      	nop
 80126ca:	e000      	b.n	80126ce <icmp_input+0x1e2>
          goto icmperr;
 80126cc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7f9 f89a 	bl	800b808 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80126d4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80126d6:	3728      	adds	r7, #40	; 0x28
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}
 80126dc:	20008230 	.word	0x20008230
 80126e0:	20008244 	.word	0x20008244
 80126e4:	08017844 	.word	0x08017844
 80126e8:	0801787c 	.word	0x0801787c
 80126ec:	080178b4 	.word	0x080178b4
 80126f0:	080178dc 	.word	0x080178dc

080126f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
 80126fc:	460b      	mov	r3, r1
 80126fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012700:	78fb      	ldrb	r3, [r7, #3]
 8012702:	461a      	mov	r2, r3
 8012704:	2103      	movs	r1, #3
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 f814 	bl	8012734 <icmp_send_response>
}
 801270c:	bf00      	nop
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	460b      	mov	r3, r1
 801271e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012720:	78fb      	ldrb	r3, [r7, #3]
 8012722:	461a      	mov	r2, r3
 8012724:	210b      	movs	r1, #11
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 f804 	bl	8012734 <icmp_send_response>
}
 801272c:	bf00      	nop
 801272e:	3708      	adds	r7, #8
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b08c      	sub	sp, #48	; 0x30
 8012738:	af04      	add	r7, sp, #16
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	460b      	mov	r3, r1
 801273e:	70fb      	strb	r3, [r7, #3]
 8012740:	4613      	mov	r3, r2
 8012742:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012744:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012748:	2124      	movs	r1, #36	; 0x24
 801274a:	2022      	movs	r0, #34	; 0x22
 801274c:	f7f8 fd78 	bl	800b240 <pbuf_alloc>
 8012750:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d04c      	beq.n	80127f2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	895b      	ldrh	r3, [r3, #10]
 801275c:	2b23      	cmp	r3, #35	; 0x23
 801275e:	d806      	bhi.n	801276e <icmp_send_response+0x3a>
 8012760:	4b26      	ldr	r3, [pc, #152]	; (80127fc <icmp_send_response+0xc8>)
 8012762:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012766:	4926      	ldr	r1, [pc, #152]	; (8012800 <icmp_send_response+0xcc>)
 8012768:	4826      	ldr	r0, [pc, #152]	; (8012804 <icmp_send_response+0xd0>)
 801276a:	f001 fbff 	bl	8013f6c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	78fa      	ldrb	r2, [r7, #3]
 801277e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	78ba      	ldrb	r2, [r7, #2]
 8012784:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012786:	697b      	ldr	r3, [r7, #20]
 8012788:	2200      	movs	r2, #0
 801278a:	711a      	strb	r2, [r3, #4]
 801278c:	2200      	movs	r2, #0
 801278e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2200      	movs	r2, #0
 8012794:	719a      	strb	r2, [r3, #6]
 8012796:	2200      	movs	r2, #0
 8012798:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	f103 0008 	add.w	r0, r3, #8
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	221c      	movs	r2, #28
 80127a8:	4619      	mov	r1, r3
 80127aa:	f001 fbc9 	bl	8013f40 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80127ae:	69bb      	ldr	r3, [r7, #24]
 80127b0:	68db      	ldr	r3, [r3, #12]
 80127b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80127b4:	f107 030c 	add.w	r3, r7, #12
 80127b8:	4618      	mov	r0, r3
 80127ba:	f000 f825 	bl	8012808 <ip4_route>
 80127be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d011      	beq.n	80127ea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2200      	movs	r2, #0
 80127ca:	709a      	strb	r2, [r3, #2]
 80127cc:	2200      	movs	r2, #0
 80127ce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80127d0:	f107 020c 	add.w	r2, r7, #12
 80127d4:	693b      	ldr	r3, [r7, #16]
 80127d6:	9302      	str	r3, [sp, #8]
 80127d8:	2301      	movs	r3, #1
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	2300      	movs	r3, #0
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	23ff      	movs	r3, #255	; 0xff
 80127e2:	2100      	movs	r1, #0
 80127e4:	69f8      	ldr	r0, [r7, #28]
 80127e6:	f000 f9cd 	bl	8012b84 <ip4_output_if>
  }
  pbuf_free(q);
 80127ea:	69f8      	ldr	r0, [r7, #28]
 80127ec:	f7f9 f80c 	bl	800b808 <pbuf_free>
 80127f0:	e000      	b.n	80127f4 <icmp_send_response+0xc0>
    return;
 80127f2:	bf00      	nop
}
 80127f4:	3720      	adds	r7, #32
 80127f6:	46bd      	mov	sp, r7
 80127f8:	bd80      	pop	{r7, pc}
 80127fa:	bf00      	nop
 80127fc:	08017844 	.word	0x08017844
 8012800:	08017910 	.word	0x08017910
 8012804:	080178b4 	.word	0x080178b4

08012808 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012808:	b480      	push	{r7}
 801280a:	b085      	sub	sp, #20
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012810:	4b33      	ldr	r3, [pc, #204]	; (80128e0 <ip4_route+0xd8>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	60fb      	str	r3, [r7, #12]
 8012816:	e036      	b.n	8012886 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801281e:	f003 0301 	and.w	r3, r3, #1
 8012822:	b2db      	uxtb	r3, r3
 8012824:	2b00      	cmp	r3, #0
 8012826:	d02b      	beq.n	8012880 <ip4_route+0x78>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801282e:	089b      	lsrs	r3, r3, #2
 8012830:	f003 0301 	and.w	r3, r3, #1
 8012834:	b2db      	uxtb	r3, r3
 8012836:	2b00      	cmp	r3, #0
 8012838:	d022      	beq.n	8012880 <ip4_route+0x78>
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	3304      	adds	r3, #4
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d01d      	beq.n	8012880 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	3304      	adds	r3, #4
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	405a      	eors	r2, r3
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	3308      	adds	r3, #8
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4013      	ands	r3, r2
 8012858:	2b00      	cmp	r3, #0
 801285a:	d101      	bne.n	8012860 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	e038      	b.n	80128d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d108      	bne.n	8012880 <ip4_route+0x78>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	330c      	adds	r3, #12
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	429a      	cmp	r2, r3
 801287a:	d101      	bne.n	8012880 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	e028      	b.n	80128d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	60fb      	str	r3, [r7, #12]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1c5      	bne.n	8012818 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801288c:	4b15      	ldr	r3, [pc, #84]	; (80128e4 <ip4_route+0xdc>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d01a      	beq.n	80128ca <ip4_route+0xc2>
 8012894:	4b13      	ldr	r3, [pc, #76]	; (80128e4 <ip4_route+0xdc>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801289c:	f003 0301 	and.w	r3, r3, #1
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d012      	beq.n	80128ca <ip4_route+0xc2>
 80128a4:	4b0f      	ldr	r3, [pc, #60]	; (80128e4 <ip4_route+0xdc>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128ac:	f003 0304 	and.w	r3, r3, #4
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d00a      	beq.n	80128ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80128b4:	4b0b      	ldr	r3, [pc, #44]	; (80128e4 <ip4_route+0xdc>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	3304      	adds	r3, #4
 80128ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d004      	beq.n	80128ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	2b7f      	cmp	r3, #127	; 0x7f
 80128c8:	d101      	bne.n	80128ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80128ca:	2300      	movs	r3, #0
 80128cc:	e001      	b.n	80128d2 <ip4_route+0xca>
  }

  return netif_default;
 80128ce:	4b05      	ldr	r3, [pc, #20]	; (80128e4 <ip4_route+0xdc>)
 80128d0:	681b      	ldr	r3, [r3, #0]
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3714      	adds	r7, #20
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	2000b934 	.word	0x2000b934
 80128e4:	2000b938 	.word	0x2000b938

080128e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128f6:	f003 0301 	and.w	r3, r3, #1
 80128fa:	b2db      	uxtb	r3, r3
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d016      	beq.n	801292e <ip4_input_accept+0x46>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	3304      	adds	r3, #4
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d011      	beq.n	801292e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801290a:	4b0b      	ldr	r3, [pc, #44]	; (8012938 <ip4_input_accept+0x50>)
 801290c:	695a      	ldr	r2, [r3, #20]
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	3304      	adds	r3, #4
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	429a      	cmp	r2, r3
 8012916:	d008      	beq.n	801292a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012918:	4b07      	ldr	r3, [pc, #28]	; (8012938 <ip4_input_accept+0x50>)
 801291a:	695b      	ldr	r3, [r3, #20]
 801291c:	6879      	ldr	r1, [r7, #4]
 801291e:	4618      	mov	r0, r3
 8012920:	f000 fa08 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8012924:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012926:	2b00      	cmp	r3, #0
 8012928:	d001      	beq.n	801292e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801292a:	2301      	movs	r3, #1
 801292c:	e000      	b.n	8012930 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801292e:	2300      	movs	r3, #0
}
 8012930:	4618      	mov	r0, r3
 8012932:	3708      	adds	r7, #8
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}
 8012938:	20008230 	.word	0x20008230

0801293c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b086      	sub	sp, #24
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	091b      	lsrs	r3, r3, #4
 8012952:	b2db      	uxtb	r3, r3
 8012954:	2b04      	cmp	r3, #4
 8012956:	d004      	beq.n	8012962 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012958:	6878      	ldr	r0, [r7, #4]
 801295a:	f7f8 ff55 	bl	800b808 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801295e:	2300      	movs	r3, #0
 8012960:	e107      	b.n	8012b72 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	f003 030f 	and.w	r3, r3, #15
 801296a:	b2db      	uxtb	r3, r3
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	b2db      	uxtb	r3, r3
 8012970:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	885b      	ldrh	r3, [r3, #2]
 8012976:	b29b      	uxth	r3, r3
 8012978:	4618      	mov	r0, r3
 801297a:	f7f7 fb99 	bl	800a0b0 <lwip_htons>
 801297e:	4603      	mov	r3, r0
 8012980:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	891b      	ldrh	r3, [r3, #8]
 8012986:	89ba      	ldrh	r2, [r7, #12]
 8012988:	429a      	cmp	r2, r3
 801298a:	d204      	bcs.n	8012996 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801298c:	89bb      	ldrh	r3, [r7, #12]
 801298e:	4619      	mov	r1, r3
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7f8 fdb3 	bl	800b4fc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	895b      	ldrh	r3, [r3, #10]
 801299a:	89fa      	ldrh	r2, [r7, #14]
 801299c:	429a      	cmp	r2, r3
 801299e:	d807      	bhi.n	80129b0 <ip4_input+0x74>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	891b      	ldrh	r3, [r3, #8]
 80129a4:	89ba      	ldrh	r2, [r7, #12]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d802      	bhi.n	80129b0 <ip4_input+0x74>
 80129aa:	89fb      	ldrh	r3, [r7, #14]
 80129ac:	2b13      	cmp	r3, #19
 80129ae:	d804      	bhi.n	80129ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f7f8 ff29 	bl	800b808 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80129b6:	2300      	movs	r3, #0
 80129b8:	e0db      	b.n	8012b72 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	691b      	ldr	r3, [r3, #16]
 80129be:	4a6f      	ldr	r2, [pc, #444]	; (8012b7c <ip4_input+0x240>)
 80129c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	4a6d      	ldr	r2, [pc, #436]	; (8012b7c <ip4_input+0x240>)
 80129c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80129ca:	4b6c      	ldr	r3, [pc, #432]	; (8012b7c <ip4_input+0x240>)
 80129cc:	695b      	ldr	r3, [r3, #20]
 80129ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129d2:	2be0      	cmp	r3, #224	; 0xe0
 80129d4:	d112      	bne.n	80129fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129dc:	f003 0301 	and.w	r3, r3, #1
 80129e0:	b2db      	uxtb	r3, r3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d007      	beq.n	80129f6 <ip4_input+0xba>
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	3304      	adds	r3, #4
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d002      	beq.n	80129f6 <ip4_input+0xba>
      netif = inp;
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	613b      	str	r3, [r7, #16]
 80129f4:	e02a      	b.n	8012a4c <ip4_input+0x110>
    } else {
      netif = NULL;
 80129f6:	2300      	movs	r3, #0
 80129f8:	613b      	str	r3, [r7, #16]
 80129fa:	e027      	b.n	8012a4c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80129fc:	6838      	ldr	r0, [r7, #0]
 80129fe:	f7ff ff73 	bl	80128e8 <ip4_input_accept>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <ip4_input+0xd2>
      netif = inp;
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	613b      	str	r3, [r7, #16]
 8012a0c:	e01e      	b.n	8012a4c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012a12:	4b5a      	ldr	r3, [pc, #360]	; (8012b7c <ip4_input+0x240>)
 8012a14:	695b      	ldr	r3, [r3, #20]
 8012a16:	b2db      	uxtb	r3, r3
 8012a18:	2b7f      	cmp	r3, #127	; 0x7f
 8012a1a:	d017      	beq.n	8012a4c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012a1c:	4b58      	ldr	r3, [pc, #352]	; (8012b80 <ip4_input+0x244>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	613b      	str	r3, [r7, #16]
 8012a22:	e00e      	b.n	8012a42 <ip4_input+0x106>
          if (netif == inp) {
 8012a24:	693a      	ldr	r2, [r7, #16]
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d006      	beq.n	8012a3a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012a2c:	6938      	ldr	r0, [r7, #16]
 8012a2e:	f7ff ff5b 	bl	80128e8 <ip4_input_accept>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d108      	bne.n	8012a4a <ip4_input+0x10e>
 8012a38:	e000      	b.n	8012a3c <ip4_input+0x100>
            continue;
 8012a3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	613b      	str	r3, [r7, #16]
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1ed      	bne.n	8012a24 <ip4_input+0xe8>
 8012a48:	e000      	b.n	8012a4c <ip4_input+0x110>
            break;
 8012a4a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a4c:	4b4b      	ldr	r3, [pc, #300]	; (8012b7c <ip4_input+0x240>)
 8012a4e:	691b      	ldr	r3, [r3, #16]
 8012a50:	6839      	ldr	r1, [r7, #0]
 8012a52:	4618      	mov	r0, r3
 8012a54:	f000 f96e 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d105      	bne.n	8012a6a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012a5e:	4b47      	ldr	r3, [pc, #284]	; (8012b7c <ip4_input+0x240>)
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012a66:	2be0      	cmp	r3, #224	; 0xe0
 8012a68:	d104      	bne.n	8012a74 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f7f8 fecc 	bl	800b808 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012a70:	2300      	movs	r3, #0
 8012a72:	e07e      	b.n	8012b72 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d104      	bne.n	8012a84 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7f8 fec4 	bl	800b808 <pbuf_free>
    return ERR_OK;
 8012a80:	2300      	movs	r3, #0
 8012a82:	e076      	b.n	8012b72 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	88db      	ldrh	r3, [r3, #6]
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012a90:	4013      	ands	r3, r2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00b      	beq.n	8012aae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 fd24 	bl	80134e4 <ip4_reass>
 8012a9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d101      	bne.n	8012aa8 <ip4_input+0x16c>
      return ERR_OK;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	e064      	b.n	8012b72 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012aae:	4a33      	ldr	r2, [pc, #204]	; (8012b7c <ip4_input+0x240>)
 8012ab0:	693b      	ldr	r3, [r7, #16]
 8012ab2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012ab4:	4a31      	ldr	r2, [pc, #196]	; (8012b7c <ip4_input+0x240>)
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012aba:	4a30      	ldr	r2, [pc, #192]	; (8012b7c <ip4_input+0x240>)
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	f003 030f 	and.w	r3, r3, #15
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	b29a      	uxth	r2, r3
 8012ad0:	4b2a      	ldr	r3, [pc, #168]	; (8012b7c <ip4_input+0x240>)
 8012ad2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012ad4:	89fb      	ldrh	r3, [r7, #14]
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7f8 fe0f 	bl	800b6fc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	7a5b      	ldrb	r3, [r3, #9]
 8012ae2:	2b11      	cmp	r3, #17
 8012ae4:	d006      	beq.n	8012af4 <ip4_input+0x1b8>
 8012ae6:	2b11      	cmp	r3, #17
 8012ae8:	dc13      	bgt.n	8012b12 <ip4_input+0x1d6>
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d00c      	beq.n	8012b08 <ip4_input+0x1cc>
 8012aee:	2b06      	cmp	r3, #6
 8012af0:	d005      	beq.n	8012afe <ip4_input+0x1c2>
 8012af2:	e00e      	b.n	8012b12 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012af4:	6839      	ldr	r1, [r7, #0]
 8012af6:	6878      	ldr	r0, [r7, #4]
 8012af8:	f7fe fc68 	bl	80113cc <udp_input>
        break;
 8012afc:	e026      	b.n	8012b4c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012afe:	6839      	ldr	r1, [r7, #0]
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7fa fcb5 	bl	800d470 <tcp_input>
        break;
 8012b06:	e021      	b.n	8012b4c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012b08:	6839      	ldr	r1, [r7, #0]
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f7ff fcee 	bl	80124ec <icmp_input>
        break;
 8012b10:	e01c      	b.n	8012b4c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b12:	4b1a      	ldr	r3, [pc, #104]	; (8012b7c <ip4_input+0x240>)
 8012b14:	695b      	ldr	r3, [r3, #20]
 8012b16:	6939      	ldr	r1, [r7, #16]
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f000 f90b 	bl	8012d34 <ip4_addr_isbroadcast_u32>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d10f      	bne.n	8012b44 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b24:	4b15      	ldr	r3, [pc, #84]	; (8012b7c <ip4_input+0x240>)
 8012b26:	695b      	ldr	r3, [r3, #20]
 8012b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012b2c:	2be0      	cmp	r3, #224	; 0xe0
 8012b2e:	d009      	beq.n	8012b44 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012b30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012b34:	4619      	mov	r1, r3
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	f7f8 fe53 	bl	800b7e2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012b3c:	2102      	movs	r1, #2
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7ff fdd8 	bl	80126f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7f8 fe5f 	bl	800b808 <pbuf_free>
        break;
 8012b4a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012b4c:	4b0b      	ldr	r3, [pc, #44]	; (8012b7c <ip4_input+0x240>)
 8012b4e:	2200      	movs	r2, #0
 8012b50:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012b52:	4b0a      	ldr	r3, [pc, #40]	; (8012b7c <ip4_input+0x240>)
 8012b54:	2200      	movs	r2, #0
 8012b56:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012b58:	4b08      	ldr	r3, [pc, #32]	; (8012b7c <ip4_input+0x240>)
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012b5e:	4b07      	ldr	r3, [pc, #28]	; (8012b7c <ip4_input+0x240>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012b64:	4b05      	ldr	r3, [pc, #20]	; (8012b7c <ip4_input+0x240>)
 8012b66:	2200      	movs	r2, #0
 8012b68:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012b6a:	4b04      	ldr	r3, [pc, #16]	; (8012b7c <ip4_input+0x240>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3718      	adds	r7, #24
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20008230 	.word	0x20008230
 8012b80:	2000b934 	.word	0x2000b934

08012b84 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b08a      	sub	sp, #40	; 0x28
 8012b88:	af04      	add	r7, sp, #16
 8012b8a:	60f8      	str	r0, [r7, #12]
 8012b8c:	60b9      	str	r1, [r7, #8]
 8012b8e:	607a      	str	r2, [r7, #4]
 8012b90:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d009      	beq.n	8012bb0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d003      	beq.n	8012baa <ip4_output_if+0x26>
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d102      	bne.n	8012bb0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bac:	3304      	adds	r3, #4
 8012bae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012bb0:	78fa      	ldrb	r2, [r7, #3]
 8012bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb4:	9302      	str	r3, [sp, #8]
 8012bb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012bba:	9301      	str	r3, [sp, #4]
 8012bbc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	4613      	mov	r3, r2
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	6979      	ldr	r1, [r7, #20]
 8012bc8:	68f8      	ldr	r0, [r7, #12]
 8012bca:	f000 f805 	bl	8012bd8 <ip4_output_if_src>
 8012bce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	3718      	adds	r7, #24
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	bd80      	pop	{r7, pc}

08012bd8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b088      	sub	sp, #32
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	60f8      	str	r0, [r7, #12]
 8012be0:	60b9      	str	r1, [r7, #8]
 8012be2:	607a      	str	r2, [r7, #4]
 8012be4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	7b9b      	ldrb	r3, [r3, #14]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d006      	beq.n	8012bfc <ip4_output_if_src+0x24>
 8012bee:	4b4b      	ldr	r3, [pc, #300]	; (8012d1c <ip4_output_if_src+0x144>)
 8012bf0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012bf4:	494a      	ldr	r1, [pc, #296]	; (8012d20 <ip4_output_if_src+0x148>)
 8012bf6:	484b      	ldr	r0, [pc, #300]	; (8012d24 <ip4_output_if_src+0x14c>)
 8012bf8:	f001 f9b8 	bl	8013f6c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d060      	beq.n	8012cc4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012c02:	2314      	movs	r3, #20
 8012c04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012c06:	2114      	movs	r1, #20
 8012c08:	68f8      	ldr	r0, [r7, #12]
 8012c0a:	f7f8 fd67 	bl	800b6dc <pbuf_add_header>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d002      	beq.n	8012c1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012c14:	f06f 0301 	mvn.w	r3, #1
 8012c18:	e07c      	b.n	8012d14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	685b      	ldr	r3, [r3, #4]
 8012c1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	895b      	ldrh	r3, [r3, #10]
 8012c24:	2b13      	cmp	r3, #19
 8012c26:	d806      	bhi.n	8012c36 <ip4_output_if_src+0x5e>
 8012c28:	4b3c      	ldr	r3, [pc, #240]	; (8012d1c <ip4_output_if_src+0x144>)
 8012c2a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012c2e:	493e      	ldr	r1, [pc, #248]	; (8012d28 <ip4_output_if_src+0x150>)
 8012c30:	483c      	ldr	r0, [pc, #240]	; (8012d24 <ip4_output_if_src+0x14c>)
 8012c32:	f001 f99b 	bl	8013f6c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	78fa      	ldrb	r2, [r7, #3]
 8012c3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012c42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012c4c:	8b7b      	ldrh	r3, [r7, #26]
 8012c4e:	089b      	lsrs	r3, r3, #2
 8012c50:	b29b      	uxth	r3, r3
 8012c52:	b2db      	uxtb	r3, r3
 8012c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012c64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	891b      	ldrh	r3, [r3, #8]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7f7 fa20 	bl	800a0b0 <lwip_htons>
 8012c70:	4603      	mov	r3, r0
 8012c72:	461a      	mov	r2, r3
 8012c74:	69fb      	ldr	r3, [r7, #28]
 8012c76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	719a      	strb	r2, [r3, #6]
 8012c7e:	2200      	movs	r2, #0
 8012c80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012c82:	4b2a      	ldr	r3, [pc, #168]	; (8012d2c <ip4_output_if_src+0x154>)
 8012c84:	881b      	ldrh	r3, [r3, #0]
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7f7 fa12 	bl	800a0b0 <lwip_htons>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	461a      	mov	r2, r3
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012c94:	4b25      	ldr	r3, [pc, #148]	; (8012d2c <ip4_output_if_src+0x154>)
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	3301      	adds	r3, #1
 8012c9a:	b29a      	uxth	r2, r3
 8012c9c:	4b23      	ldr	r3, [pc, #140]	; (8012d2c <ip4_output_if_src+0x154>)
 8012c9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d104      	bne.n	8012cb0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012ca6:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <ip4_output_if_src+0x158>)
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	60da      	str	r2, [r3, #12]
 8012cae:	e003      	b.n	8012cb8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012cb0:	68bb      	ldr	r3, [r7, #8]
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	69fb      	ldr	r3, [r7, #28]
 8012cb6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012cb8:	69fb      	ldr	r3, [r7, #28]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	729a      	strb	r2, [r3, #10]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	72da      	strb	r2, [r3, #11]
 8012cc2:	e00f      	b.n	8012ce4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	895b      	ldrh	r3, [r3, #10]
 8012cc8:	2b13      	cmp	r3, #19
 8012cca:	d802      	bhi.n	8012cd2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012ccc:	f06f 0301 	mvn.w	r3, #1
 8012cd0:	e020      	b.n	8012d14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012cd8:	69fb      	ldr	r3, [r7, #28]
 8012cda:	691b      	ldr	r3, [r3, #16]
 8012cdc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012cde:	f107 0314 	add.w	r3, r7, #20
 8012ce2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ce6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00c      	beq.n	8012d06 <ip4_output_if_src+0x12e>
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	891a      	ldrh	r2, [r3, #8]
 8012cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d906      	bls.n	8012d06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012cfc:	68f8      	ldr	r0, [r7, #12]
 8012cfe:	f000 fddf 	bl	80138c0 <ip4_frag>
 8012d02:	4603      	mov	r3, r0
 8012d04:	e006      	b.n	8012d14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d08:	695b      	ldr	r3, [r3, #20]
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	68f9      	ldr	r1, [r7, #12]
 8012d0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d10:	4798      	blx	r3
 8012d12:	4603      	mov	r3, r0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3720      	adds	r7, #32
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	0801793c 	.word	0x0801793c
 8012d20:	08017970 	.word	0x08017970
 8012d24:	0801797c 	.word	0x0801797c
 8012d28:	080179a4 	.word	0x080179a4
 8012d2c:	20004b36 	.word	0x20004b36
 8012d30:	08017ddc 	.word	0x08017ddc

08012d34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012d34:	b480      	push	{r7}
 8012d36:	b085      	sub	sp, #20
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d48:	d002      	beq.n	8012d50 <ip4_addr_isbroadcast_u32+0x1c>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d101      	bne.n	8012d54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012d50:	2301      	movs	r3, #1
 8012d52:	e02a      	b.n	8012daa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012d54:	683b      	ldr	r3, [r7, #0]
 8012d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d5a:	f003 0302 	and.w	r3, r3, #2
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d101      	bne.n	8012d66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012d62:	2300      	movs	r3, #0
 8012d64:	e021      	b.n	8012daa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	3304      	adds	r3, #4
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	687a      	ldr	r2, [r7, #4]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d101      	bne.n	8012d76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012d72:	2300      	movs	r3, #0
 8012d74:	e019      	b.n	8012daa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	3304      	adds	r3, #4
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	405a      	eors	r2, r3
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	3308      	adds	r3, #8
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4013      	ands	r3, r2
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10d      	bne.n	8012da8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	3308      	adds	r3, #8
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	43da      	mvns	r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012d98:	683b      	ldr	r3, [r7, #0]
 8012d9a:	3308      	adds	r3, #8
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d101      	bne.n	8012da8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e000      	b.n	8012daa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012da8:	2300      	movs	r3, #0
  }
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3714      	adds	r7, #20
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr
	...

08012db8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b082      	sub	sp, #8
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8012dc0:	2210      	movs	r2, #16
 8012dc2:	4904      	ldr	r1, [pc, #16]	; (8012dd4 <ip4addr_ntoa+0x1c>)
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f000 f807 	bl	8012dd8 <ip4addr_ntoa_r>
 8012dca:	4603      	mov	r3, r0
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3708      	adds	r7, #8
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}
 8012dd4:	20004b38 	.word	0x20004b38

08012dd8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8012dd8:	b480      	push	{r7}
 8012dda:	b08d      	sub	sp, #52	; 0x34
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8012dee:	68bb      	ldr	r3, [r7, #8]
 8012df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8012df2:	f107 0318 	add.w	r3, r7, #24
 8012df6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012df8:	2300      	movs	r3, #0
 8012dfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012dfe:	e059      	b.n	8012eb4 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8012e00:	2300      	movs	r3, #0
 8012e02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8012e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e08:	781a      	ldrb	r2, [r3, #0]
 8012e0a:	4b33      	ldr	r3, [pc, #204]	; (8012ed8 <ip4addr_ntoa_r+0x100>)
 8012e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8012e10:	08d9      	lsrs	r1, r3, #3
 8012e12:	460b      	mov	r3, r1
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	440b      	add	r3, r1
 8012e18:	005b      	lsls	r3, r3, #1
 8012e1a:	1ad3      	subs	r3, r2, r3
 8012e1c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8012e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	4a2d      	ldr	r2, [pc, #180]	; (8012ed8 <ip4addr_ntoa_r+0x100>)
 8012e24:	fba2 2303 	umull	r2, r3, r2, r3
 8012e28:	08db      	lsrs	r3, r3, #3
 8012e2a:	b2da      	uxtb	r2, r3
 8012e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8012e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e34:	1c5a      	adds	r2, r3, #1
 8012e36:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	7ffb      	ldrb	r3, [r7, #31]
 8012e3e:	3330      	adds	r3, #48	; 0x30
 8012e40:	b2da      	uxtb	r2, r3
 8012e42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012e46:	440b      	add	r3, r1
 8012e48:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8012e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d1d8      	bne.n	8012e06 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8012e54:	e012      	b.n	8012e7c <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	1c5a      	adds	r2, r3, #1
 8012e5a:	623a      	str	r2, [r7, #32]
 8012e5c:	687a      	ldr	r2, [r7, #4]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	dc01      	bgt.n	8012e66 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e031      	b.n	8012eca <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8012e66:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8012e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e6c:	1c59      	adds	r1, r3, #1
 8012e6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8012e70:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012e74:	440a      	add	r2, r1
 8012e76:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8012e7a:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8012e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e80:	1e5a      	subs	r2, r3, #1
 8012e82:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1e5      	bne.n	8012e56 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	623a      	str	r2, [r7, #32]
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	dc01      	bgt.n	8012e9a <ip4addr_ntoa_r+0xc2>
      return NULL;
 8012e96:	2300      	movs	r3, #0
 8012e98:	e017      	b.n	8012eca <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8012e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012ea0:	222e      	movs	r2, #46	; 0x2e
 8012ea2:	701a      	strb	r2, [r3, #0]
    ap++;
 8012ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8012eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eae:	3301      	adds	r3, #1
 8012eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012eb8:	2b03      	cmp	r3, #3
 8012eba:	d9a1      	bls.n	8012e00 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8012ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebe:	3b01      	subs	r3, #1
 8012ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	701a      	strb	r2, [r3, #0]
  return buf;
 8012ec8:	68bb      	ldr	r3, [r7, #8]
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3734      	adds	r7, #52	; 0x34
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed4:	4770      	bx	lr
 8012ed6:	bf00      	nop
 8012ed8:	cccccccd 	.word	0xcccccccd

08012edc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012ee6:	4b12      	ldr	r3, [pc, #72]	; (8012f30 <ip_reass_tmr+0x54>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012eec:	e018      	b.n	8012f20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	7fdb      	ldrb	r3, [r3, #31]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d00b      	beq.n	8012f0e <ip_reass_tmr+0x32>
      r->timer--;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	7fdb      	ldrb	r3, [r3, #31]
 8012efa:	3b01      	subs	r3, #1
 8012efc:	b2da      	uxtb	r2, r3
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	60fb      	str	r3, [r7, #12]
 8012f0c:	e008      	b.n	8012f20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f18:	68b9      	ldr	r1, [r7, #8]
 8012f1a:	6878      	ldr	r0, [r7, #4]
 8012f1c:	f000 f80a 	bl	8012f34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d1e3      	bne.n	8012eee <ip_reass_tmr+0x12>
    }
  }
}
 8012f26:	bf00      	nop
 8012f28:	bf00      	nop
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	20004b48 	.word	0x20004b48

08012f34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b088      	sub	sp, #32
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012f42:	683a      	ldr	r2, [r7, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d105      	bne.n	8012f56 <ip_reass_free_complete_datagram+0x22>
 8012f4a:	4b45      	ldr	r3, [pc, #276]	; (8013060 <ip_reass_free_complete_datagram+0x12c>)
 8012f4c:	22ab      	movs	r2, #171	; 0xab
 8012f4e:	4945      	ldr	r1, [pc, #276]	; (8013064 <ip_reass_free_complete_datagram+0x130>)
 8012f50:	4845      	ldr	r0, [pc, #276]	; (8013068 <ip_reass_free_complete_datagram+0x134>)
 8012f52:	f001 f80b 	bl	8013f6c <iprintf>
  if (prev != NULL) {
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d00a      	beq.n	8012f72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d005      	beq.n	8012f72 <ip_reass_free_complete_datagram+0x3e>
 8012f66:	4b3e      	ldr	r3, [pc, #248]	; (8013060 <ip_reass_free_complete_datagram+0x12c>)
 8012f68:	22ad      	movs	r2, #173	; 0xad
 8012f6a:	4940      	ldr	r1, [pc, #256]	; (801306c <ip_reass_free_complete_datagram+0x138>)
 8012f6c:	483e      	ldr	r0, [pc, #248]	; (8013068 <ip_reass_free_complete_datagram+0x134>)
 8012f6e:	f000 fffd 	bl	8013f6c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	685b      	ldr	r3, [r3, #4]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	889b      	ldrh	r3, [r3, #4]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d12a      	bne.n	8012fda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	681a      	ldr	r2, [r3, #0]
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012f92:	69bb      	ldr	r3, [r7, #24]
 8012f94:	6858      	ldr	r0, [r3, #4]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	3308      	adds	r3, #8
 8012f9a:	2214      	movs	r2, #20
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	f000 ffcf 	bl	8013f40 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012fa2:	2101      	movs	r1, #1
 8012fa4:	69b8      	ldr	r0, [r7, #24]
 8012fa6:	f7ff fbb5 	bl	8012714 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012faa:	69b8      	ldr	r0, [r7, #24]
 8012fac:	f7f8 fcba 	bl	800b924 <pbuf_clen>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012fb4:	8bfa      	ldrh	r2, [r7, #30]
 8012fb6:	8a7b      	ldrh	r3, [r7, #18]
 8012fb8:	4413      	add	r3, r2
 8012fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012fbe:	db05      	blt.n	8012fcc <ip_reass_free_complete_datagram+0x98>
 8012fc0:	4b27      	ldr	r3, [pc, #156]	; (8013060 <ip_reass_free_complete_datagram+0x12c>)
 8012fc2:	22bc      	movs	r2, #188	; 0xbc
 8012fc4:	492a      	ldr	r1, [pc, #168]	; (8013070 <ip_reass_free_complete_datagram+0x13c>)
 8012fc6:	4828      	ldr	r0, [pc, #160]	; (8013068 <ip_reass_free_complete_datagram+0x134>)
 8012fc8:	f000 ffd0 	bl	8013f6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012fcc:	8bfa      	ldrh	r2, [r7, #30]
 8012fce:	8a7b      	ldrh	r3, [r7, #18]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012fd4:	69b8      	ldr	r0, [r7, #24]
 8012fd6:	f7f8 fc17 	bl	800b808 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012fe0:	e01f      	b.n	8013022 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012fe8:	69bb      	ldr	r3, [r7, #24]
 8012fea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012fec:	697b      	ldr	r3, [r7, #20]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f7f8 fc96 	bl	800b924 <pbuf_clen>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ffc:	8bfa      	ldrh	r2, [r7, #30]
 8012ffe:	8a7b      	ldrh	r3, [r7, #18]
 8013000:	4413      	add	r3, r2
 8013002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013006:	db05      	blt.n	8013014 <ip_reass_free_complete_datagram+0xe0>
 8013008:	4b15      	ldr	r3, [pc, #84]	; (8013060 <ip_reass_free_complete_datagram+0x12c>)
 801300a:	22cc      	movs	r2, #204	; 0xcc
 801300c:	4918      	ldr	r1, [pc, #96]	; (8013070 <ip_reass_free_complete_datagram+0x13c>)
 801300e:	4816      	ldr	r0, [pc, #88]	; (8013068 <ip_reass_free_complete_datagram+0x134>)
 8013010:	f000 ffac 	bl	8013f6c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013014:	8bfa      	ldrh	r2, [r7, #30]
 8013016:	8a7b      	ldrh	r3, [r7, #18]
 8013018:	4413      	add	r3, r2
 801301a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f7f8 fbf3 	bl	800b808 <pbuf_free>
  while (p != NULL) {
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d1dc      	bne.n	8012fe2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013028:	6839      	ldr	r1, [r7, #0]
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 f8c2 	bl	80131b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013030:	4b10      	ldr	r3, [pc, #64]	; (8013074 <ip_reass_free_complete_datagram+0x140>)
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	8bfa      	ldrh	r2, [r7, #30]
 8013036:	429a      	cmp	r2, r3
 8013038:	d905      	bls.n	8013046 <ip_reass_free_complete_datagram+0x112>
 801303a:	4b09      	ldr	r3, [pc, #36]	; (8013060 <ip_reass_free_complete_datagram+0x12c>)
 801303c:	22d2      	movs	r2, #210	; 0xd2
 801303e:	490e      	ldr	r1, [pc, #56]	; (8013078 <ip_reass_free_complete_datagram+0x144>)
 8013040:	4809      	ldr	r0, [pc, #36]	; (8013068 <ip_reass_free_complete_datagram+0x134>)
 8013042:	f000 ff93 	bl	8013f6c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013046:	4b0b      	ldr	r3, [pc, #44]	; (8013074 <ip_reass_free_complete_datagram+0x140>)
 8013048:	881a      	ldrh	r2, [r3, #0]
 801304a:	8bfb      	ldrh	r3, [r7, #30]
 801304c:	1ad3      	subs	r3, r2, r3
 801304e:	b29a      	uxth	r2, r3
 8013050:	4b08      	ldr	r3, [pc, #32]	; (8013074 <ip_reass_free_complete_datagram+0x140>)
 8013052:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013054:	8bfb      	ldrh	r3, [r7, #30]
}
 8013056:	4618      	mov	r0, r3
 8013058:	3720      	adds	r7, #32
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
 801305e:	bf00      	nop
 8013060:	080179d4 	.word	0x080179d4
 8013064:	08017a10 	.word	0x08017a10
 8013068:	08017a1c 	.word	0x08017a1c
 801306c:	08017a44 	.word	0x08017a44
 8013070:	08017a58 	.word	0x08017a58
 8013074:	20004b4c 	.word	0x20004b4c
 8013078:	08017a78 	.word	0x08017a78

0801307c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b08a      	sub	sp, #40	; 0x28
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013086:	2300      	movs	r3, #0
 8013088:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801308e:	2300      	movs	r3, #0
 8013090:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013092:	2300      	movs	r3, #0
 8013094:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013096:	2300      	movs	r3, #0
 8013098:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801309a:	4b28      	ldr	r3, [pc, #160]	; (801313c <ip_reass_remove_oldest_datagram+0xc0>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80130a0:	e030      	b.n	8013104 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80130a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a4:	695a      	ldr	r2, [r3, #20]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d10c      	bne.n	80130c8 <ip_reass_remove_oldest_datagram+0x4c>
 80130ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b0:	699a      	ldr	r2, [r3, #24]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	691b      	ldr	r3, [r3, #16]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d106      	bne.n	80130c8 <ip_reass_remove_oldest_datagram+0x4c>
 80130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130bc:	899a      	ldrh	r2, [r3, #12]
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	889b      	ldrh	r3, [r3, #4]
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d014      	beq.n	80130f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	3301      	adds	r3, #1
 80130cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80130ce:	6a3b      	ldr	r3, [r7, #32]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d104      	bne.n	80130de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80130d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	61bb      	str	r3, [r7, #24]
 80130dc:	e009      	b.n	80130f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	7fda      	ldrb	r2, [r3, #31]
 80130e2:	6a3b      	ldr	r3, [r7, #32]
 80130e4:	7fdb      	ldrb	r3, [r3, #31]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d803      	bhi.n	80130f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80130ee:	69fb      	ldr	r3, [r7, #28]
 80130f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d001      	beq.n	80130fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80130fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013106:	2b00      	cmp	r3, #0
 8013108:	d1cb      	bne.n	80130a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801310a:	6a3b      	ldr	r3, [r7, #32]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d008      	beq.n	8013122 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013110:	69b9      	ldr	r1, [r7, #24]
 8013112:	6a38      	ldr	r0, [r7, #32]
 8013114:	f7ff ff0e 	bl	8012f34 <ip_reass_free_complete_datagram>
 8013118:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801311a:	697a      	ldr	r2, [r7, #20]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	4413      	add	r3, r2
 8013120:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013122:	697a      	ldr	r2, [r7, #20]
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	429a      	cmp	r2, r3
 8013128:	da02      	bge.n	8013130 <ip_reass_remove_oldest_datagram+0xb4>
 801312a:	693b      	ldr	r3, [r7, #16]
 801312c:	2b01      	cmp	r3, #1
 801312e:	dcac      	bgt.n	801308a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013130:	697b      	ldr	r3, [r7, #20]
}
 8013132:	4618      	mov	r0, r3
 8013134:	3728      	adds	r7, #40	; 0x28
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	20004b48 	.word	0x20004b48

08013140 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b084      	sub	sp, #16
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
 8013148:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801314a:	2004      	movs	r0, #4
 801314c:	f7f7 fc66 	bl	800aa1c <memp_malloc>
 8013150:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d110      	bne.n	801317a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013158:	6839      	ldr	r1, [r7, #0]
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7ff ff8e 	bl	801307c <ip_reass_remove_oldest_datagram>
 8013160:	4602      	mov	r2, r0
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	4293      	cmp	r3, r2
 8013166:	dc03      	bgt.n	8013170 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013168:	2004      	movs	r0, #4
 801316a:	f7f7 fc57 	bl	800aa1c <memp_malloc>
 801316e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d101      	bne.n	801317a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013176:	2300      	movs	r3, #0
 8013178:	e016      	b.n	80131a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801317a:	2220      	movs	r2, #32
 801317c:	2100      	movs	r1, #0
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f000 feec 	bl	8013f5c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	220f      	movs	r2, #15
 8013188:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801318a:	4b09      	ldr	r3, [pc, #36]	; (80131b0 <ip_reass_enqueue_new_datagram+0x70>)
 801318c:	681a      	ldr	r2, [r3, #0]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013192:	4a07      	ldr	r2, [pc, #28]	; (80131b0 <ip_reass_enqueue_new_datagram+0x70>)
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	3308      	adds	r3, #8
 801319c:	2214      	movs	r2, #20
 801319e:	6879      	ldr	r1, [r7, #4]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f000 fecd 	bl	8013f40 <memcpy>
  return ipr;
 80131a6:	68fb      	ldr	r3, [r7, #12]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3710      	adds	r7, #16
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}
 80131b0:	20004b48 	.word	0x20004b48

080131b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80131be:	4b10      	ldr	r3, [pc, #64]	; (8013200 <ip_reass_dequeue_datagram+0x4c>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d104      	bne.n	80131d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a0c      	ldr	r2, [pc, #48]	; (8013200 <ip_reass_dequeue_datagram+0x4c>)
 80131ce:	6013      	str	r3, [r2, #0]
 80131d0:	e00d      	b.n	80131ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d106      	bne.n	80131e6 <ip_reass_dequeue_datagram+0x32>
 80131d8:	4b0a      	ldr	r3, [pc, #40]	; (8013204 <ip_reass_dequeue_datagram+0x50>)
 80131da:	f240 1245 	movw	r2, #325	; 0x145
 80131de:	490a      	ldr	r1, [pc, #40]	; (8013208 <ip_reass_dequeue_datagram+0x54>)
 80131e0:	480a      	ldr	r0, [pc, #40]	; (801320c <ip_reass_dequeue_datagram+0x58>)
 80131e2:	f000 fec3 	bl	8013f6c <iprintf>
    prev->next = ipr->next;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681a      	ldr	r2, [r3, #0]
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80131ee:	6879      	ldr	r1, [r7, #4]
 80131f0:	2004      	movs	r0, #4
 80131f2:	f7f7 fc65 	bl	800aac0 <memp_free>
}
 80131f6:	bf00      	nop
 80131f8:	3708      	adds	r7, #8
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	20004b48 	.word	0x20004b48
 8013204:	080179d4 	.word	0x080179d4
 8013208:	08017a9c 	.word	0x08017a9c
 801320c:	08017a1c 	.word	0x08017a1c

08013210 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	b08c      	sub	sp, #48	; 0x30
 8013214:	af00      	add	r7, sp, #0
 8013216:	60f8      	str	r0, [r7, #12]
 8013218:	60b9      	str	r1, [r7, #8]
 801321a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801321c:	2300      	movs	r3, #0
 801321e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013220:	2301      	movs	r3, #1
 8013222:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	885b      	ldrh	r3, [r3, #2]
 801322e:	b29b      	uxth	r3, r3
 8013230:	4618      	mov	r0, r3
 8013232:	f7f6 ff3d 	bl	800a0b0 <lwip_htons>
 8013236:	4603      	mov	r3, r0
 8013238:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	f003 030f 	and.w	r3, r3, #15
 8013242:	b2db      	uxtb	r3, r3
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013248:	7e7b      	ldrb	r3, [r7, #25]
 801324a:	b29b      	uxth	r3, r3
 801324c:	8b7a      	ldrh	r2, [r7, #26]
 801324e:	429a      	cmp	r2, r3
 8013250:	d202      	bcs.n	8013258 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013252:	f04f 33ff 	mov.w	r3, #4294967295
 8013256:	e135      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013258:	7e7b      	ldrb	r3, [r7, #25]
 801325a:	b29b      	uxth	r3, r3
 801325c:	8b7a      	ldrh	r2, [r7, #26]
 801325e:	1ad3      	subs	r3, r2, r3
 8013260:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	88db      	ldrh	r3, [r3, #6]
 8013266:	b29b      	uxth	r3, r3
 8013268:	4618      	mov	r0, r3
 801326a:	f7f6 ff21 	bl	800a0b0 <lwip_htons>
 801326e:	4603      	mov	r3, r0
 8013270:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013274:	b29b      	uxth	r3, r3
 8013276:	00db      	lsls	r3, r3, #3
 8013278:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013282:	2200      	movs	r2, #0
 8013284:	701a      	strb	r2, [r3, #0]
 8013286:	2200      	movs	r2, #0
 8013288:	705a      	strb	r2, [r3, #1]
 801328a:	2200      	movs	r2, #0
 801328c:	709a      	strb	r2, [r3, #2]
 801328e:	2200      	movs	r2, #0
 8013290:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	8afa      	ldrh	r2, [r7, #22]
 8013296:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013298:	8afa      	ldrh	r2, [r7, #22]
 801329a:	8b7b      	ldrh	r3, [r7, #26]
 801329c:	4413      	add	r3, r2
 801329e:	b29a      	uxth	r2, r3
 80132a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80132a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132a6:	88db      	ldrh	r3, [r3, #6]
 80132a8:	b29b      	uxth	r3, r3
 80132aa:	8afa      	ldrh	r2, [r7, #22]
 80132ac:	429a      	cmp	r2, r3
 80132ae:	d902      	bls.n	80132b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295
 80132b4:	e106      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	627b      	str	r3, [r7, #36]	; 0x24
 80132bc:	e068      	b.n	8013390 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	685b      	ldr	r3, [r3, #4]
 80132c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80132c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132c6:	889b      	ldrh	r3, [r3, #4]
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	889b      	ldrh	r3, [r3, #4]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d235      	bcs.n	8013340 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80132da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d020      	beq.n	8013322 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80132e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e2:	889b      	ldrh	r3, [r3, #4]
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e8:	88db      	ldrh	r3, [r3, #6]
 80132ea:	b29b      	uxth	r3, r3
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d307      	bcc.n	8013300 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80132f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f2:	88db      	ldrh	r3, [r3, #6]
 80132f4:	b29a      	uxth	r2, r3
 80132f6:	693b      	ldr	r3, [r7, #16]
 80132f8:	889b      	ldrh	r3, [r3, #4]
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d902      	bls.n	8013306 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013300:	f04f 33ff 	mov.w	r3, #4294967295
 8013304:	e0de      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	68ba      	ldr	r2, [r7, #8]
 801330a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330e:	88db      	ldrh	r3, [r3, #6]
 8013310:	b29a      	uxth	r2, r3
 8013312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013314:	889b      	ldrh	r3, [r3, #4]
 8013316:	b29b      	uxth	r3, r3
 8013318:	429a      	cmp	r2, r3
 801331a:	d03d      	beq.n	8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801331c:	2300      	movs	r3, #0
 801331e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013320:	e03a      	b.n	8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013324:	88db      	ldrh	r3, [r3, #6]
 8013326:	b29a      	uxth	r2, r3
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	889b      	ldrh	r3, [r3, #4]
 801332c:	b29b      	uxth	r3, r3
 801332e:	429a      	cmp	r2, r3
 8013330:	d902      	bls.n	8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013332:	f04f 33ff 	mov.w	r3, #4294967295
 8013336:	e0c5      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	68ba      	ldr	r2, [r7, #8]
 801333c:	605a      	str	r2, [r3, #4]
      break;
 801333e:	e02b      	b.n	8013398 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013342:	889b      	ldrh	r3, [r3, #4]
 8013344:	b29a      	uxth	r2, r3
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	889b      	ldrh	r3, [r3, #4]
 801334a:	b29b      	uxth	r3, r3
 801334c:	429a      	cmp	r2, r3
 801334e:	d102      	bne.n	8013356 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013350:	f04f 33ff 	mov.w	r3, #4294967295
 8013354:	e0b6      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013358:	889b      	ldrh	r3, [r3, #4]
 801335a:	b29a      	uxth	r2, r3
 801335c:	693b      	ldr	r3, [r7, #16]
 801335e:	88db      	ldrh	r3, [r3, #6]
 8013360:	b29b      	uxth	r3, r3
 8013362:	429a      	cmp	r2, r3
 8013364:	d202      	bcs.n	801336c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013366:	f04f 33ff 	mov.w	r3, #4294967295
 801336a:	e0ab      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336e:	2b00      	cmp	r3, #0
 8013370:	d009      	beq.n	8013386 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013374:	88db      	ldrh	r3, [r3, #6]
 8013376:	b29a      	uxth	r2, r3
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	889b      	ldrh	r3, [r3, #4]
 801337c:	b29b      	uxth	r3, r3
 801337e:	429a      	cmp	r2, r3
 8013380:	d001      	beq.n	8013386 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013382:	2300      	movs	r3, #0
 8013384:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013386:	693b      	ldr	r3, [r7, #16]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801338c:	693b      	ldr	r3, [r7, #16]
 801338e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013392:	2b00      	cmp	r3, #0
 8013394:	d193      	bne.n	80132be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013396:	e000      	b.n	801339a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013398:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339c:	2b00      	cmp	r3, #0
 801339e:	d12d      	bne.n	80133fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80133a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d01c      	beq.n	80133e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80133a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a8:	88db      	ldrh	r3, [r3, #6]
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ae:	889b      	ldrh	r3, [r3, #4]
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d906      	bls.n	80133c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80133b6:	4b45      	ldr	r3, [pc, #276]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80133bc:	4944      	ldr	r1, [pc, #272]	; (80134d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80133be:	4845      	ldr	r0, [pc, #276]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133c0:	f000 fdd4 	bl	8013f6c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80133c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c6:	68ba      	ldr	r2, [r7, #8]
 80133c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80133ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133cc:	88db      	ldrh	r3, [r3, #6]
 80133ce:	b29a      	uxth	r2, r3
 80133d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d2:	889b      	ldrh	r3, [r3, #4]
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d010      	beq.n	80133fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80133da:	2300      	movs	r3, #0
 80133dc:	623b      	str	r3, [r7, #32]
 80133de:	e00d      	b.n	80133fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d006      	beq.n	80133f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80133e8:	4b38      	ldr	r3, [pc, #224]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80133ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80133ee:	493a      	ldr	r1, [pc, #232]	; (80134d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80133f0:	4838      	ldr	r0, [pc, #224]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80133f2:	f000 fdbb 	bl	8013f6c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	68ba      	ldr	r2, [r7, #8]
 80133fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d105      	bne.n	801340e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	7f9b      	ldrb	r3, [r3, #30]
 8013406:	f003 0301 	and.w	r3, r3, #1
 801340a:	2b00      	cmp	r3, #0
 801340c:	d059      	beq.n	80134c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d04f      	beq.n	80134b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d006      	beq.n	801342a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	889b      	ldrh	r3, [r3, #4]
 8013424:	b29b      	uxth	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	d002      	beq.n	8013430 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801342a:	2300      	movs	r3, #0
 801342c:	623b      	str	r3, [r7, #32]
 801342e:	e041      	b.n	80134b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013432:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801343a:	e012      	b.n	8013462 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013444:	88db      	ldrh	r3, [r3, #6]
 8013446:	b29a      	uxth	r2, r3
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	889b      	ldrh	r3, [r3, #4]
 801344c:	b29b      	uxth	r3, r3
 801344e:	429a      	cmp	r2, r3
 8013450:	d002      	beq.n	8013458 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013452:	2300      	movs	r3, #0
 8013454:	623b      	str	r3, [r7, #32]
            break;
 8013456:	e007      	b.n	8013468 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013464:	2b00      	cmp	r3, #0
 8013466:	d1e9      	bne.n	801343c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013468:	6a3b      	ldr	r3, [r7, #32]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d022      	beq.n	80134b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d106      	bne.n	8013484 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013476:	4b15      	ldr	r3, [pc, #84]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013478:	f240 12df 	movw	r2, #479	; 0x1df
 801347c:	4917      	ldr	r1, [pc, #92]	; (80134dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801347e:	4815      	ldr	r0, [pc, #84]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013480:	f000 fd74 	bl	8013f6c <iprintf>
          LWIP_ASSERT("sanity check",
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801348c:	429a      	cmp	r2, r3
 801348e:	d106      	bne.n	801349e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013490:	4b0e      	ldr	r3, [pc, #56]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013492:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013496:	4911      	ldr	r1, [pc, #68]	; (80134dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013498:	480e      	ldr	r0, [pc, #56]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801349a:	f000 fd67 	bl	8013f6c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d006      	beq.n	80134b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80134a6:	4b09      	ldr	r3, [pc, #36]	; (80134cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80134ac:	490c      	ldr	r1, [pc, #48]	; (80134e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80134ae:	4809      	ldr	r0, [pc, #36]	; (80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134b0:	f000 fd5c 	bl	8013f6c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80134b4:	6a3b      	ldr	r3, [r7, #32]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	bf14      	ite	ne
 80134ba:	2301      	movne	r3, #1
 80134bc:	2300      	moveq	r3, #0
 80134be:	b2db      	uxtb	r3, r3
 80134c0:	e000      	b.n	80134c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80134c2:	2300      	movs	r3, #0
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3730      	adds	r7, #48	; 0x30
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	080179d4 	.word	0x080179d4
 80134d0:	08017ab8 	.word	0x08017ab8
 80134d4:	08017a1c 	.word	0x08017a1c
 80134d8:	08017ad8 	.word	0x08017ad8
 80134dc:	08017b10 	.word	0x08017b10
 80134e0:	08017b20 	.word	0x08017b20

080134e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08e      	sub	sp, #56	; 0x38
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80134f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134f4:	781b      	ldrb	r3, [r3, #0]
 80134f6:	f003 030f 	and.w	r3, r3, #15
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	009b      	lsls	r3, r3, #2
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	2b14      	cmp	r3, #20
 8013502:	f040 8167 	bne.w	80137d4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013508:	88db      	ldrh	r3, [r3, #6]
 801350a:	b29b      	uxth	r3, r3
 801350c:	4618      	mov	r0, r3
 801350e:	f7f6 fdcf 	bl	800a0b0 <lwip_htons>
 8013512:	4603      	mov	r3, r0
 8013514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013518:	b29b      	uxth	r3, r3
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013520:	885b      	ldrh	r3, [r3, #2]
 8013522:	b29b      	uxth	r3, r3
 8013524:	4618      	mov	r0, r3
 8013526:	f7f6 fdc3 	bl	800a0b0 <lwip_htons>
 801352a:	4603      	mov	r3, r0
 801352c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	f003 030f 	and.w	r3, r3, #15
 8013536:	b2db      	uxtb	r3, r3
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801353e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013542:	b29b      	uxth	r3, r3
 8013544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013546:	429a      	cmp	r2, r3
 8013548:	f0c0 8146 	bcc.w	80137d8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801354c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013550:	b29b      	uxth	r3, r3
 8013552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013554:	1ad3      	subs	r3, r2, r3
 8013556:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7f8 f9e3 	bl	800b924 <pbuf_clen>
 801355e:	4603      	mov	r3, r0
 8013560:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013562:	4b9f      	ldr	r3, [pc, #636]	; (80137e0 <ip4_reass+0x2fc>)
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	461a      	mov	r2, r3
 8013568:	8c3b      	ldrh	r3, [r7, #32]
 801356a:	4413      	add	r3, r2
 801356c:	2b0a      	cmp	r3, #10
 801356e:	dd10      	ble.n	8013592 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013570:	8c3b      	ldrh	r3, [r7, #32]
 8013572:	4619      	mov	r1, r3
 8013574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013576:	f7ff fd81 	bl	801307c <ip_reass_remove_oldest_datagram>
 801357a:	4603      	mov	r3, r0
 801357c:	2b00      	cmp	r3, #0
 801357e:	f000 812d 	beq.w	80137dc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013582:	4b97      	ldr	r3, [pc, #604]	; (80137e0 <ip4_reass+0x2fc>)
 8013584:	881b      	ldrh	r3, [r3, #0]
 8013586:	461a      	mov	r2, r3
 8013588:	8c3b      	ldrh	r3, [r7, #32]
 801358a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801358c:	2b0a      	cmp	r3, #10
 801358e:	f300 8125 	bgt.w	80137dc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013592:	4b94      	ldr	r3, [pc, #592]	; (80137e4 <ip4_reass+0x300>)
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	633b      	str	r3, [r7, #48]	; 0x30
 8013598:	e015      	b.n	80135c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801359c:	695a      	ldr	r2, [r3, #20]
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	68db      	ldr	r3, [r3, #12]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d10c      	bne.n	80135c0 <ip4_reass+0xdc>
 80135a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135a8:	699a      	ldr	r2, [r3, #24]
 80135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ac:	691b      	ldr	r3, [r3, #16]
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d106      	bne.n	80135c0 <ip4_reass+0xdc>
 80135b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135b4:	899a      	ldrh	r2, [r3, #12]
 80135b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b8:	889b      	ldrh	r3, [r3, #4]
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	429a      	cmp	r2, r3
 80135be:	d006      	beq.n	80135ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80135c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	633b      	str	r3, [r7, #48]	; 0x30
 80135c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d1e6      	bne.n	801359a <ip4_reass+0xb6>
 80135cc:	e000      	b.n	80135d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80135ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d109      	bne.n	80135ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80135d6:	8c3b      	ldrh	r3, [r7, #32]
 80135d8:	4619      	mov	r1, r3
 80135da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135dc:	f7ff fdb0 	bl	8013140 <ip_reass_enqueue_new_datagram>
 80135e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80135e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d11c      	bne.n	8013622 <ip4_reass+0x13e>
      goto nullreturn;
 80135e8:	e109      	b.n	80137fe <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80135ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ec:	88db      	ldrh	r3, [r3, #6]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7f6 fd5d 	bl	800a0b0 <lwip_htons>
 80135f6:	4603      	mov	r3, r0
 80135f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d110      	bne.n	8013622 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013602:	89db      	ldrh	r3, [r3, #14]
 8013604:	4618      	mov	r0, r3
 8013606:	f7f6 fd53 	bl	800a0b0 <lwip_htons>
 801360a:	4603      	mov	r3, r0
 801360c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013610:	2b00      	cmp	r3, #0
 8013612:	d006      	beq.n	8013622 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013616:	3308      	adds	r3, #8
 8013618:	2214      	movs	r2, #20
 801361a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801361c:	4618      	mov	r0, r3
 801361e:	f000 fc8f 	bl	8013f40 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013624:	88db      	ldrh	r3, [r3, #6]
 8013626:	b29b      	uxth	r3, r3
 8013628:	f003 0320 	and.w	r3, r3, #32
 801362c:	2b00      	cmp	r3, #0
 801362e:	bf0c      	ite	eq
 8013630:	2301      	moveq	r3, #1
 8013632:	2300      	movne	r3, #0
 8013634:	b2db      	uxtb	r3, r3
 8013636:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00e      	beq.n	801365c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801363e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013642:	4413      	add	r3, r2
 8013644:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013646:	8b7a      	ldrh	r2, [r7, #26]
 8013648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801364a:	429a      	cmp	r2, r3
 801364c:	f0c0 80a0 	bcc.w	8013790 <ip4_reass+0x2ac>
 8013650:	8b7b      	ldrh	r3, [r7, #26]
 8013652:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013656:	4293      	cmp	r3, r2
 8013658:	f200 809a 	bhi.w	8013790 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801365c:	69fa      	ldr	r2, [r7, #28]
 801365e:	6879      	ldr	r1, [r7, #4]
 8013660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013662:	f7ff fdd5 	bl	8013210 <ip_reass_chain_frag_into_datagram_and_validate>
 8013666:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801366e:	f000 8091 	beq.w	8013794 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013672:	4b5b      	ldr	r3, [pc, #364]	; (80137e0 <ip4_reass+0x2fc>)
 8013674:	881a      	ldrh	r2, [r3, #0]
 8013676:	8c3b      	ldrh	r3, [r7, #32]
 8013678:	4413      	add	r3, r2
 801367a:	b29a      	uxth	r2, r3
 801367c:	4b58      	ldr	r3, [pc, #352]	; (80137e0 <ip4_reass+0x2fc>)
 801367e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d00d      	beq.n	80136a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013686:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013688:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801368a:	4413      	add	r3, r2
 801368c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	8a7a      	ldrh	r2, [r7, #18]
 8013692:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013696:	7f9b      	ldrb	r3, [r3, #30]
 8013698:	f043 0301 	orr.w	r3, r3, #1
 801369c:	b2da      	uxtb	r2, r3
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d171      	bne.n	801378c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80136a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136aa:	8b9b      	ldrh	r3, [r3, #28]
 80136ac:	3314      	adds	r3, #20
 80136ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80136b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b2:	685b      	ldr	r3, [r3, #4]
 80136b4:	685b      	ldr	r3, [r3, #4]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80136ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136bc:	685b      	ldr	r3, [r3, #4]
 80136be:	685b      	ldr	r3, [r3, #4]
 80136c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80136c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c4:	3308      	adds	r3, #8
 80136c6:	2214      	movs	r2, #20
 80136c8:	4619      	mov	r1, r3
 80136ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136cc:	f000 fc38 	bl	8013f40 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80136d0:	8a3b      	ldrh	r3, [r7, #16]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7f6 fcec 	bl	800a0b0 <lwip_htons>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80136e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e2:	2200      	movs	r2, #0
 80136e4:	719a      	strb	r2, [r3, #6]
 80136e6:	2200      	movs	r2, #0
 80136e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80136ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ec:	2200      	movs	r2, #0
 80136ee:	729a      	strb	r2, [r3, #10]
 80136f0:	2200      	movs	r2, #0
 80136f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80136f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f6:	685b      	ldr	r3, [r3, #4]
 80136f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80136fa:	e00d      	b.n	8013718 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80136fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013702:	2114      	movs	r1, #20
 8013704:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013706:	f7f7 fff9 	bl	800b6fc <pbuf_remove_header>
      pbuf_cat(p, r);
 801370a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f7f8 f949 	bl	800b9a4 <pbuf_cat>
      r = iprh->next_pbuf;
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801371a:	2b00      	cmp	r3, #0
 801371c:	d1ee      	bne.n	80136fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801371e:	4b31      	ldr	r3, [pc, #196]	; (80137e4 <ip4_reass+0x300>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013724:	429a      	cmp	r2, r3
 8013726:	d102      	bne.n	801372e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013728:	2300      	movs	r3, #0
 801372a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801372c:	e010      	b.n	8013750 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801372e:	4b2d      	ldr	r3, [pc, #180]	; (80137e4 <ip4_reass+0x300>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013734:	e007      	b.n	8013746 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801373c:	429a      	cmp	r2, r3
 801373e:	d006      	beq.n	801374e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1f4      	bne.n	8013736 <ip4_reass+0x252>
 801374c:	e000      	b.n	8013750 <ip4_reass+0x26c>
          break;
 801374e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013750:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013754:	f7ff fd2e 	bl	80131b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7f8 f8e3 	bl	800b924 <pbuf_clen>
 801375e:	4603      	mov	r3, r0
 8013760:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013762:	4b1f      	ldr	r3, [pc, #124]	; (80137e0 <ip4_reass+0x2fc>)
 8013764:	881b      	ldrh	r3, [r3, #0]
 8013766:	8c3a      	ldrh	r2, [r7, #32]
 8013768:	429a      	cmp	r2, r3
 801376a:	d906      	bls.n	801377a <ip4_reass+0x296>
 801376c:	4b1e      	ldr	r3, [pc, #120]	; (80137e8 <ip4_reass+0x304>)
 801376e:	f240 229b 	movw	r2, #667	; 0x29b
 8013772:	491e      	ldr	r1, [pc, #120]	; (80137ec <ip4_reass+0x308>)
 8013774:	481e      	ldr	r0, [pc, #120]	; (80137f0 <ip4_reass+0x30c>)
 8013776:	f000 fbf9 	bl	8013f6c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801377a:	4b19      	ldr	r3, [pc, #100]	; (80137e0 <ip4_reass+0x2fc>)
 801377c:	881a      	ldrh	r2, [r3, #0]
 801377e:	8c3b      	ldrh	r3, [r7, #32]
 8013780:	1ad3      	subs	r3, r2, r3
 8013782:	b29a      	uxth	r2, r3
 8013784:	4b16      	ldr	r3, [pc, #88]	; (80137e0 <ip4_reass+0x2fc>)
 8013786:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	e03c      	b.n	8013806 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801378c:	2300      	movs	r3, #0
 801378e:	e03a      	b.n	8013806 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013790:	bf00      	nop
 8013792:	e000      	b.n	8013796 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013794:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	2b00      	cmp	r3, #0
 801379a:	d106      	bne.n	80137aa <ip4_reass+0x2c6>
 801379c:	4b12      	ldr	r3, [pc, #72]	; (80137e8 <ip4_reass+0x304>)
 801379e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80137a2:	4914      	ldr	r1, [pc, #80]	; (80137f4 <ip4_reass+0x310>)
 80137a4:	4812      	ldr	r0, [pc, #72]	; (80137f0 <ip4_reass+0x30c>)
 80137a6:	f000 fbe1 	bl	8013f6c <iprintf>
  if (ipr->p == NULL) {
 80137aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d124      	bne.n	80137fc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80137b2:	4b0c      	ldr	r3, [pc, #48]	; (80137e4 <ip4_reass+0x300>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d006      	beq.n	80137ca <ip4_reass+0x2e6>
 80137bc:	4b0a      	ldr	r3, [pc, #40]	; (80137e8 <ip4_reass+0x304>)
 80137be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80137c2:	490d      	ldr	r1, [pc, #52]	; (80137f8 <ip4_reass+0x314>)
 80137c4:	480a      	ldr	r0, [pc, #40]	; (80137f0 <ip4_reass+0x30c>)
 80137c6:	f000 fbd1 	bl	8013f6c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80137ca:	2100      	movs	r1, #0
 80137cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ce:	f7ff fcf1 	bl	80131b4 <ip_reass_dequeue_datagram>
 80137d2:	e014      	b.n	80137fe <ip4_reass+0x31a>
    goto nullreturn;
 80137d4:	bf00      	nop
 80137d6:	e012      	b.n	80137fe <ip4_reass+0x31a>
    goto nullreturn;
 80137d8:	bf00      	nop
 80137da:	e010      	b.n	80137fe <ip4_reass+0x31a>
      goto nullreturn;
 80137dc:	bf00      	nop
 80137de:	e00e      	b.n	80137fe <ip4_reass+0x31a>
 80137e0:	20004b4c 	.word	0x20004b4c
 80137e4:	20004b48 	.word	0x20004b48
 80137e8:	080179d4 	.word	0x080179d4
 80137ec:	08017b44 	.word	0x08017b44
 80137f0:	08017a1c 	.word	0x08017a1c
 80137f4:	08017b60 	.word	0x08017b60
 80137f8:	08017b6c 	.word	0x08017b6c
  }

nullreturn:
 80137fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7f8 f802 	bl	800b808 <pbuf_free>
  return NULL;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3738      	adds	r7, #56	; 0x38
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop

08013810 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013814:	2005      	movs	r0, #5
 8013816:	f7f7 f901 	bl	800aa1c <memp_malloc>
 801381a:	4603      	mov	r3, r0
}
 801381c:	4618      	mov	r0, r3
 801381e:	bd80      	pop	{r7, pc}

08013820 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d106      	bne.n	801383c <ip_frag_free_pbuf_custom_ref+0x1c>
 801382e:	4b07      	ldr	r3, [pc, #28]	; (801384c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013830:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013834:	4906      	ldr	r1, [pc, #24]	; (8013850 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013836:	4807      	ldr	r0, [pc, #28]	; (8013854 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013838:	f000 fb98 	bl	8013f6c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801383c:	6879      	ldr	r1, [r7, #4]
 801383e:	2005      	movs	r0, #5
 8013840:	f7f7 f93e 	bl	800aac0 <memp_free>
}
 8013844:	bf00      	nop
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	080179d4 	.word	0x080179d4
 8013850:	08017b8c 	.word	0x08017b8c
 8013854:	08017a1c 	.word	0x08017a1c

08013858 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d106      	bne.n	8013878 <ipfrag_free_pbuf_custom+0x20>
 801386a:	4b11      	ldr	r3, [pc, #68]	; (80138b0 <ipfrag_free_pbuf_custom+0x58>)
 801386c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013870:	4910      	ldr	r1, [pc, #64]	; (80138b4 <ipfrag_free_pbuf_custom+0x5c>)
 8013872:	4811      	ldr	r0, [pc, #68]	; (80138b8 <ipfrag_free_pbuf_custom+0x60>)
 8013874:	f000 fb7a 	bl	8013f6c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013878:	68fa      	ldr	r2, [r7, #12]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	429a      	cmp	r2, r3
 801387e:	d006      	beq.n	801388e <ipfrag_free_pbuf_custom+0x36>
 8013880:	4b0b      	ldr	r3, [pc, #44]	; (80138b0 <ipfrag_free_pbuf_custom+0x58>)
 8013882:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013886:	490d      	ldr	r1, [pc, #52]	; (80138bc <ipfrag_free_pbuf_custom+0x64>)
 8013888:	480b      	ldr	r0, [pc, #44]	; (80138b8 <ipfrag_free_pbuf_custom+0x60>)
 801388a:	f000 fb6f 	bl	8013f6c <iprintf>
  if (pcr->original != NULL) {
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	695b      	ldr	r3, [r3, #20]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d004      	beq.n	80138a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	695b      	ldr	r3, [r3, #20]
 801389a:	4618      	mov	r0, r3
 801389c:	f7f7 ffb4 	bl	800b808 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f7ff ffbd 	bl	8013820 <ip_frag_free_pbuf_custom_ref>
}
 80138a6:	bf00      	nop
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
 80138ae:	bf00      	nop
 80138b0:	080179d4 	.word	0x080179d4
 80138b4:	08017b98 	.word	0x08017b98
 80138b8:	08017a1c 	.word	0x08017a1c
 80138bc:	08017ba4 	.word	0x08017ba4

080138c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b094      	sub	sp, #80	; 0x50
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80138d2:	68bb      	ldr	r3, [r7, #8]
 80138d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80138d6:	3b14      	subs	r3, #20
 80138d8:	2b00      	cmp	r3, #0
 80138da:	da00      	bge.n	80138de <ip4_frag+0x1e>
 80138dc:	3307      	adds	r3, #7
 80138de:	10db      	asrs	r3, r3, #3
 80138e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80138e2:	2314      	movs	r3, #20
 80138e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80138f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f2:	781b      	ldrb	r3, [r3, #0]
 80138f4:	f003 030f 	and.w	r3, r3, #15
 80138f8:	b2db      	uxtb	r3, r3
 80138fa:	009b      	lsls	r3, r3, #2
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	2b14      	cmp	r3, #20
 8013900:	d002      	beq.n	8013908 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013902:	f06f 0305 	mvn.w	r3, #5
 8013906:	e110      	b.n	8013b2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	895b      	ldrh	r3, [r3, #10]
 801390c:	2b13      	cmp	r3, #19
 801390e:	d809      	bhi.n	8013924 <ip4_frag+0x64>
 8013910:	4b88      	ldr	r3, [pc, #544]	; (8013b34 <ip4_frag+0x274>)
 8013912:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013916:	4988      	ldr	r1, [pc, #544]	; (8013b38 <ip4_frag+0x278>)
 8013918:	4888      	ldr	r0, [pc, #544]	; (8013b3c <ip4_frag+0x27c>)
 801391a:	f000 fb27 	bl	8013f6c <iprintf>
 801391e:	f06f 0305 	mvn.w	r3, #5
 8013922:	e102      	b.n	8013b2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013926:	88db      	ldrh	r3, [r3, #6]
 8013928:	b29b      	uxth	r3, r3
 801392a:	4618      	mov	r0, r3
 801392c:	f7f6 fbc0 	bl	800a0b0 <lwip_htons>
 8013930:	4603      	mov	r3, r0
 8013932:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013934:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013936:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801393a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801393e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013944:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	3b14      	subs	r3, #20
 801394c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013950:	e0e1      	b.n	8013b16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013952:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013954:	00db      	lsls	r3, r3, #3
 8013956:	b29b      	uxth	r3, r3
 8013958:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801395c:	4293      	cmp	r3, r2
 801395e:	bf28      	it	cs
 8013960:	4613      	movcs	r3, r2
 8013962:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013964:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013968:	2114      	movs	r1, #20
 801396a:	200e      	movs	r0, #14
 801396c:	f7f7 fc68 	bl	800b240 <pbuf_alloc>
 8013970:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013974:	2b00      	cmp	r3, #0
 8013976:	f000 80d5 	beq.w	8013b24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397c:	895b      	ldrh	r3, [r3, #10]
 801397e:	2b13      	cmp	r3, #19
 8013980:	d806      	bhi.n	8013990 <ip4_frag+0xd0>
 8013982:	4b6c      	ldr	r3, [pc, #432]	; (8013b34 <ip4_frag+0x274>)
 8013984:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013988:	496d      	ldr	r1, [pc, #436]	; (8013b40 <ip4_frag+0x280>)
 801398a:	486c      	ldr	r0, [pc, #432]	; (8013b3c <ip4_frag+0x27c>)
 801398c:	f000 faee 	bl	8013f6c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	2214      	movs	r2, #20
 8013996:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013998:	4618      	mov	r0, r3
 801399a:	f000 fad1 	bl	8013f40 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80139a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80139a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80139aa:	e064      	b.n	8013a76 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	895a      	ldrh	r2, [r3, #10]
 80139b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139b2:	1ad3      	subs	r3, r2, r3
 80139b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	895b      	ldrh	r3, [r3, #10]
 80139ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80139bc:	429a      	cmp	r2, r3
 80139be:	d906      	bls.n	80139ce <ip4_frag+0x10e>
 80139c0:	4b5c      	ldr	r3, [pc, #368]	; (8013b34 <ip4_frag+0x274>)
 80139c2:	f240 322d 	movw	r2, #813	; 0x32d
 80139c6:	495f      	ldr	r1, [pc, #380]	; (8013b44 <ip4_frag+0x284>)
 80139c8:	485c      	ldr	r0, [pc, #368]	; (8013b3c <ip4_frag+0x27c>)
 80139ca:	f000 facf 	bl	8013f6c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80139ce:	8bfa      	ldrh	r2, [r7, #30]
 80139d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80139d4:	4293      	cmp	r3, r2
 80139d6:	bf28      	it	cs
 80139d8:	4613      	movcs	r3, r2
 80139da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80139de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d105      	bne.n	80139f2 <ip4_frag+0x132>
        poff = 0;
 80139e6:	2300      	movs	r3, #0
 80139e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	60fb      	str	r3, [r7, #12]
        continue;
 80139f0:	e041      	b.n	8013a76 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80139f2:	f7ff ff0d 	bl	8013810 <ip_frag_alloc_pbuf_custom_ref>
 80139f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d103      	bne.n	8013a06 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80139fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a00:	f7f7 ff02 	bl	800b808 <pbuf_free>
        goto memerr;
 8013a04:	e08f      	b.n	8013b26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a06:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a0e:	4413      	add	r3, r2
 8013a10:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013a14:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013a18:	9201      	str	r2, [sp, #4]
 8013a1a:	9300      	str	r3, [sp, #0]
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2241      	movs	r2, #65	; 0x41
 8013a20:	2000      	movs	r0, #0
 8013a22:	f7f7 fd37 	bl	800b494 <pbuf_alloced_custom>
 8013a26:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d106      	bne.n	8013a3c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013a2e:	69b8      	ldr	r0, [r7, #24]
 8013a30:	f7ff fef6 	bl	8013820 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a36:	f7f7 fee7 	bl	800b808 <pbuf_free>
        goto memerr;
 8013a3a:	e074      	b.n	8013b26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f7f7 ff89 	bl	800b954 <pbuf_ref>
      pcr->original = p;
 8013a42:	69bb      	ldr	r3, [r7, #24]
 8013a44:	68fa      	ldr	r2, [r7, #12]
 8013a46:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	4a3f      	ldr	r2, [pc, #252]	; (8013b48 <ip4_frag+0x288>)
 8013a4c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013a4e:	6979      	ldr	r1, [r7, #20]
 8013a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a52:	f7f7 ffa7 	bl	800b9a4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013a56:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013a5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a5e:	1ad3      	subs	r3, r2, r3
 8013a60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013a64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d004      	beq.n	8013a76 <ip4_frag+0x1b6>
        poff = 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013a76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d196      	bne.n	80139ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013a7e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a80:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a84:	4413      	add	r3, r2
 8013a86:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013a8c:	f1a3 0213 	sub.w	r2, r3, #19
 8013a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a94:	429a      	cmp	r2, r3
 8013a96:	bfcc      	ite	gt
 8013a98:	2301      	movgt	r3, #1
 8013a9a:	2300      	movle	r3, #0
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013aa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013aa8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013aaa:	6a3b      	ldr	r3, [r7, #32]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d002      	beq.n	8013ab6 <ip4_frag+0x1f6>
 8013ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d003      	beq.n	8013abe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013ab6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ab8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013abc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013abe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	f7f6 faf5 	bl	800a0b0 <lwip_htons>
 8013ac6:	4603      	mov	r3, r0
 8013ac8:	461a      	mov	r2, r3
 8013aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013acc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013ace:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ad0:	3314      	adds	r3, #20
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f6 faeb 	bl	800a0b0 <lwip_htons>
 8013ada:	4603      	mov	r3, r0
 8013adc:	461a      	mov	r2, r3
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	729a      	strb	r2, [r3, #10]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013aec:	68bb      	ldr	r3, [r7, #8]
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	687a      	ldr	r2, [r7, #4]
 8013af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013af4:	68b8      	ldr	r0, [r7, #8]
 8013af6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013afa:	f7f7 fe85 	bl	800b808 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013afe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b10:	4413      	add	r3, r2
 8013b12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013b16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	f47f af19 	bne.w	8013952 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013b20:	2300      	movs	r3, #0
 8013b22:	e002      	b.n	8013b2a <ip4_frag+0x26a>
      goto memerr;
 8013b24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3748      	adds	r7, #72	; 0x48
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	080179d4 	.word	0x080179d4
 8013b38:	08017bb0 	.word	0x08017bb0
 8013b3c:	08017a1c 	.word	0x08017a1c
 8013b40:	08017bcc 	.word	0x08017bcc
 8013b44:	08017bec 	.word	0x08017bec
 8013b48:	08013859 	.word	0x08013859

08013b4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b086      	sub	sp, #24
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013b56:	230e      	movs	r3, #14
 8013b58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	895b      	ldrh	r3, [r3, #10]
 8013b5e:	2b0e      	cmp	r3, #14
 8013b60:	d96e      	bls.n	8013c40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	7bdb      	ldrb	r3, [r3, #15]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b70:	3301      	adds	r3, #1
 8013b72:	b2da      	uxtb	r2, r3
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	7b1a      	ldrb	r2, [r3, #12]
 8013b82:	7b5b      	ldrb	r3, [r3, #13]
 8013b84:	021b      	lsls	r3, r3, #8
 8013b86:	4313      	orrs	r3, r2
 8013b88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	f003 0301 	and.w	r3, r3, #1
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d023      	beq.n	8013bde <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	2b01      	cmp	r3, #1
 8013b9c:	d10f      	bne.n	8013bbe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	785b      	ldrb	r3, [r3, #1]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d11b      	bne.n	8013bde <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013baa:	2b5e      	cmp	r3, #94	; 0x5e
 8013bac:	d117      	bne.n	8013bde <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	7b5b      	ldrb	r3, [r3, #13]
 8013bb2:	f043 0310 	orr.w	r3, r3, #16
 8013bb6:	b2da      	uxtb	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	735a      	strb	r2, [r3, #13]
 8013bbc:	e00f      	b.n	8013bde <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	2206      	movs	r2, #6
 8013bc2:	4928      	ldr	r1, [pc, #160]	; (8013c64 <ethernet_input+0x118>)
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f000 f9ad 	bl	8013f24 <memcmp>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d106      	bne.n	8013bde <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	7b5b      	ldrb	r3, [r3, #13]
 8013bd4:	f043 0308 	orr.w	r3, r3, #8
 8013bd8:	b2da      	uxtb	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013bde:	89fb      	ldrh	r3, [r7, #14]
 8013be0:	2b08      	cmp	r3, #8
 8013be2:	d003      	beq.n	8013bec <ethernet_input+0xa0>
 8013be4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013be8:	d014      	beq.n	8013c14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013bea:	e032      	b.n	8013c52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013bec:	683b      	ldr	r3, [r7, #0]
 8013bee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bf2:	f003 0308 	and.w	r3, r3, #8
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d024      	beq.n	8013c44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013bfa:	8afb      	ldrh	r3, [r7, #22]
 8013bfc:	4619      	mov	r1, r3
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f7f7 fd7c 	bl	800b6fc <pbuf_remove_header>
 8013c04:	4603      	mov	r3, r0
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d11e      	bne.n	8013c48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c0a:	6839      	ldr	r1, [r7, #0]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7fe fe95 	bl	801293c <ip4_input>
      break;
 8013c12:	e013      	b.n	8013c3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c1a:	f003 0308 	and.w	r3, r3, #8
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d014      	beq.n	8013c4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c22:	8afb      	ldrh	r3, [r7, #22]
 8013c24:	4619      	mov	r1, r3
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f7f7 fd68 	bl	800b6fc <pbuf_remove_header>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d10e      	bne.n	8013c50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013c32:	6839      	ldr	r1, [r7, #0]
 8013c34:	6878      	ldr	r0, [r7, #4]
 8013c36:	f7fe f835 	bl	8011ca4 <etharp_input>
      break;
 8013c3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	e00c      	b.n	8013c5a <ethernet_input+0x10e>
    goto free_and_return;
 8013c40:	bf00      	nop
 8013c42:	e006      	b.n	8013c52 <ethernet_input+0x106>
        goto free_and_return;
 8013c44:	bf00      	nop
 8013c46:	e004      	b.n	8013c52 <ethernet_input+0x106>
        goto free_and_return;
 8013c48:	bf00      	nop
 8013c4a:	e002      	b.n	8013c52 <ethernet_input+0x106>
        goto free_and_return;
 8013c4c:	bf00      	nop
 8013c4e:	e000      	b.n	8013c52 <ethernet_input+0x106>
        goto free_and_return;
 8013c50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7f7 fdd8 	bl	800b808 <pbuf_free>
  return ERR_OK;
 8013c58:	2300      	movs	r3, #0
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	08017de0 	.word	0x08017de0

08013c68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b086      	sub	sp, #24
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013c76:	8c3b      	ldrh	r3, [r7, #32]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f6 fa19 	bl	800a0b0 <lwip_htons>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013c82:	210e      	movs	r1, #14
 8013c84:	68b8      	ldr	r0, [r7, #8]
 8013c86:	f7f7 fd29 	bl	800b6dc <pbuf_add_header>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d125      	bne.n	8013cdc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	685b      	ldr	r3, [r3, #4]
 8013c94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	8afa      	ldrh	r2, [r7, #22]
 8013c9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	2206      	movs	r2, #6
 8013ca0:	6839      	ldr	r1, [r7, #0]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 f94c 	bl	8013f40 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	3306      	adds	r3, #6
 8013cac:	2206      	movs	r2, #6
 8013cae:	6879      	ldr	r1, [r7, #4]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	f000 f945 	bl	8013f40 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013cbc:	2b06      	cmp	r3, #6
 8013cbe:	d006      	beq.n	8013cce <ethernet_output+0x66>
 8013cc0:	4b0a      	ldr	r3, [pc, #40]	; (8013cec <ethernet_output+0x84>)
 8013cc2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013cc6:	490a      	ldr	r1, [pc, #40]	; (8013cf0 <ethernet_output+0x88>)
 8013cc8:	480a      	ldr	r0, [pc, #40]	; (8013cf4 <ethernet_output+0x8c>)
 8013cca:	f000 f94f 	bl	8013f6c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	699b      	ldr	r3, [r3, #24]
 8013cd2:	68b9      	ldr	r1, [r7, #8]
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	4798      	blx	r3
 8013cd8:	4603      	mov	r3, r0
 8013cda:	e002      	b.n	8013ce2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013cdc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013cde:	f06f 0301 	mvn.w	r3, #1
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3718      	adds	r7, #24
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	08017bfc 	.word	0x08017bfc
 8013cf0:	08017c34 	.word	0x08017c34
 8013cf4:	08017c68 	.word	0x08017c68

08013cf8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013d02:	683b      	ldr	r3, [r7, #0]
 8013d04:	2200      	movs	r2, #0
 8013d06:	2104      	movs	r1, #4
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f2 fd0b 	bl	8006724 <osMessageQueueNew>
 8013d0e:	4602      	mov	r2, r0
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d102      	bne.n	8013d22 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013d20:	e000      	b.n	8013d24 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3708      	adds	r7, #8
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6818      	ldr	r0, [r3, #0]
 8013d3a:	4639      	mov	r1, r7
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f7f2 fd76 	bl	8006830 <osMessageQueuePut>
 8013d44:	4603      	mov	r3, r0
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d102      	bne.n	8013d50 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	73fb      	strb	r3, [r7, #15]
 8013d4e:	e001      	b.n	8013d54 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013d50:	23ff      	movs	r3, #255	; 0xff
 8013d52:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013d54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3710      	adds	r7, #16
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b086      	sub	sp, #24
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	60f8      	str	r0, [r7, #12]
 8013d68:	60b9      	str	r1, [r7, #8]
 8013d6a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013d6c:	f7f2 f93c 	bl	8005fe8 <osKernelGetTickCount>
 8013d70:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d013      	beq.n	8013da0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	6818      	ldr	r0, [r3, #0]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2200      	movs	r2, #0
 8013d80:	68b9      	ldr	r1, [r7, #8]
 8013d82:	f7f2 fdc9 	bl	8006918 <osMessageQueueGet>
 8013d86:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013d88:	693b      	ldr	r3, [r7, #16]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d105      	bne.n	8013d9a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013d8e:	f7f2 f92b 	bl	8005fe8 <osKernelGetTickCount>
 8013d92:	4602      	mov	r2, r0
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	e00f      	b.n	8013dba <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013d9e:	e00c      	b.n	8013dba <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	6818      	ldr	r0, [r3, #0]
 8013da4:	f04f 33ff 	mov.w	r3, #4294967295
 8013da8:	2200      	movs	r2, #0
 8013daa:	68b9      	ldr	r1, [r7, #8]
 8013dac:	f7f2 fdb4 	bl	8006918 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013db0:	f7f2 f91a 	bl	8005fe8 <osKernelGetTickCount>
 8013db4:	4602      	mov	r2, r0
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3718      	adds	r7, #24
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}

08013dc2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013dc2:	b480      	push	{r7}
 8013dc4:	b083      	sub	sp, #12
 8013dc6:	af00      	add	r7, sp, #0
 8013dc8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d101      	bne.n	8013dd6 <sys_mbox_valid+0x14>
    return 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	e000      	b.n	8013dd8 <sys_mbox_valid+0x16>
  else
    return 1;
 8013dd6:	2301      	movs	r3, #1
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	370c      	adds	r7, #12
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de2:	4770      	bx	lr

08013de4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013de8:	2000      	movs	r0, #0
 8013dea:	f7f2 f9f9 	bl	80061e0 <osMutexNew>
 8013dee:	4603      	mov	r3, r0
 8013df0:	4a01      	ldr	r2, [pc, #4]	; (8013df8 <sys_init+0x14>)
 8013df2:	6013      	str	r3, [r2, #0]
#endif
}
 8013df4:	bf00      	nop
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	2000b964 	.word	0x2000b964

08013dfc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013e04:	2000      	movs	r0, #0
 8013e06:	f7f2 f9eb 	bl	80061e0 <osMutexNew>
 8013e0a:	4602      	mov	r2, r0
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d102      	bne.n	8013e1e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295
 8013e1c:	e000      	b.n	8013e20 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013e1e:	2300      	movs	r3, #0
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3708      	adds	r7, #8
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	f04f 31ff 	mov.w	r1, #4294967295
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7f2 fa6b 	bl	8006314 <osMutexAcquire>
#endif
}
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}

08013e46 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013e46:	b580      	push	{r7, lr}
 8013e48:	b082      	sub	sp, #8
 8013e4a:	af00      	add	r7, sp, #0
 8013e4c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7f2 fabc 	bl	80063d0 <osMutexRelease>
}
 8013e58:	bf00      	nop
 8013e5a:	3708      	adds	r7, #8
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}

08013e60 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b08e      	sub	sp, #56	; 0x38
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	60f8      	str	r0, [r7, #12]
 8013e68:	60b9      	str	r1, [r7, #8]
 8013e6a:	607a      	str	r2, [r7, #4]
 8013e6c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013e6e:	f107 0314 	add.w	r3, r7, #20
 8013e72:	2224      	movs	r2, #36	; 0x24
 8013e74:	2100      	movs	r1, #0
 8013e76:	4618      	mov	r0, r3
 8013e78:	f000 f870 	bl	8013f5c <memset>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	617b      	str	r3, [r7, #20]
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8013e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e86:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013e88:	f107 0314 	add.w	r3, r7, #20
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	6879      	ldr	r1, [r7, #4]
 8013e90:	68b8      	ldr	r0, [r7, #8]
 8013e92:	f7f2 f8d1 	bl	8006038 <osThreadNew>
 8013e96:	4603      	mov	r3, r0
#endif
}
 8013e98:	4618      	mov	r0, r3
 8013e9a:	3738      	adds	r7, #56	; 0x38
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013ea4:	4b04      	ldr	r3, [pc, #16]	; (8013eb8 <sys_arch_protect+0x18>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f2 fa31 	bl	8006314 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8013eb2:	2301      	movs	r3, #1
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	2000b964 	.word	0x2000b964

08013ebc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b082      	sub	sp, #8
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013ec4:	4b04      	ldr	r3, [pc, #16]	; (8013ed8 <sys_arch_unprotect+0x1c>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f2 fa81 	bl	80063d0 <osMutexRelease>
}
 8013ece:	bf00      	nop
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	2000b964 	.word	0x2000b964

08013edc <__libc_init_array>:
 8013edc:	b570      	push	{r4, r5, r6, lr}
 8013ede:	4d0d      	ldr	r5, [pc, #52]	; (8013f14 <__libc_init_array+0x38>)
 8013ee0:	4c0d      	ldr	r4, [pc, #52]	; (8013f18 <__libc_init_array+0x3c>)
 8013ee2:	1b64      	subs	r4, r4, r5
 8013ee4:	10a4      	asrs	r4, r4, #2
 8013ee6:	2600      	movs	r6, #0
 8013ee8:	42a6      	cmp	r6, r4
 8013eea:	d109      	bne.n	8013f00 <__libc_init_array+0x24>
 8013eec:	4d0b      	ldr	r5, [pc, #44]	; (8013f1c <__libc_init_array+0x40>)
 8013eee:	4c0c      	ldr	r4, [pc, #48]	; (8013f20 <__libc_init_array+0x44>)
 8013ef0:	f001 f92e 	bl	8015150 <_init>
 8013ef4:	1b64      	subs	r4, r4, r5
 8013ef6:	10a4      	asrs	r4, r4, #2
 8013ef8:	2600      	movs	r6, #0
 8013efa:	42a6      	cmp	r6, r4
 8013efc:	d105      	bne.n	8013f0a <__libc_init_array+0x2e>
 8013efe:	bd70      	pop	{r4, r5, r6, pc}
 8013f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f04:	4798      	blx	r3
 8013f06:	3601      	adds	r6, #1
 8013f08:	e7ee      	b.n	8013ee8 <__libc_init_array+0xc>
 8013f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013f0e:	4798      	blx	r3
 8013f10:	3601      	adds	r6, #1
 8013f12:	e7f2      	b.n	8013efa <__libc_init_array+0x1e>
 8013f14:	08017f44 	.word	0x08017f44
 8013f18:	08017f44 	.word	0x08017f44
 8013f1c:	08017f44 	.word	0x08017f44
 8013f20:	08017f48 	.word	0x08017f48

08013f24 <memcmp>:
 8013f24:	b530      	push	{r4, r5, lr}
 8013f26:	3901      	subs	r1, #1
 8013f28:	2400      	movs	r4, #0
 8013f2a:	42a2      	cmp	r2, r4
 8013f2c:	d101      	bne.n	8013f32 <memcmp+0xe>
 8013f2e:	2000      	movs	r0, #0
 8013f30:	e005      	b.n	8013f3e <memcmp+0x1a>
 8013f32:	5d03      	ldrb	r3, [r0, r4]
 8013f34:	3401      	adds	r4, #1
 8013f36:	5d0d      	ldrb	r5, [r1, r4]
 8013f38:	42ab      	cmp	r3, r5
 8013f3a:	d0f6      	beq.n	8013f2a <memcmp+0x6>
 8013f3c:	1b58      	subs	r0, r3, r5
 8013f3e:	bd30      	pop	{r4, r5, pc}

08013f40 <memcpy>:
 8013f40:	440a      	add	r2, r1
 8013f42:	4291      	cmp	r1, r2
 8013f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8013f48:	d100      	bne.n	8013f4c <memcpy+0xc>
 8013f4a:	4770      	bx	lr
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013f56:	4291      	cmp	r1, r2
 8013f58:	d1f9      	bne.n	8013f4e <memcpy+0xe>
 8013f5a:	bd10      	pop	{r4, pc}

08013f5c <memset>:
 8013f5c:	4402      	add	r2, r0
 8013f5e:	4603      	mov	r3, r0
 8013f60:	4293      	cmp	r3, r2
 8013f62:	d100      	bne.n	8013f66 <memset+0xa>
 8013f64:	4770      	bx	lr
 8013f66:	f803 1b01 	strb.w	r1, [r3], #1
 8013f6a:	e7f9      	b.n	8013f60 <memset+0x4>

08013f6c <iprintf>:
 8013f6c:	b40f      	push	{r0, r1, r2, r3}
 8013f6e:	4b0a      	ldr	r3, [pc, #40]	; (8013f98 <iprintf+0x2c>)
 8013f70:	b513      	push	{r0, r1, r4, lr}
 8013f72:	681c      	ldr	r4, [r3, #0]
 8013f74:	b124      	cbz	r4, 8013f80 <iprintf+0x14>
 8013f76:	69a3      	ldr	r3, [r4, #24]
 8013f78:	b913      	cbnz	r3, 8013f80 <iprintf+0x14>
 8013f7a:	4620      	mov	r0, r4
 8013f7c:	f000 fa4c 	bl	8014418 <__sinit>
 8013f80:	ab05      	add	r3, sp, #20
 8013f82:	9a04      	ldr	r2, [sp, #16]
 8013f84:	68a1      	ldr	r1, [r4, #8]
 8013f86:	9301      	str	r3, [sp, #4]
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f000 fc37 	bl	80147fc <_vfiprintf_r>
 8013f8e:	b002      	add	sp, #8
 8013f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f94:	b004      	add	sp, #16
 8013f96:	4770      	bx	lr
 8013f98:	2000001c 	.word	0x2000001c

08013f9c <rand>:
 8013f9c:	4b17      	ldr	r3, [pc, #92]	; (8013ffc <rand+0x60>)
 8013f9e:	b510      	push	{r4, lr}
 8013fa0:	681c      	ldr	r4, [r3, #0]
 8013fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013fa4:	b9b3      	cbnz	r3, 8013fd4 <rand+0x38>
 8013fa6:	2018      	movs	r0, #24
 8013fa8:	f000 fb4c 	bl	8014644 <malloc>
 8013fac:	63a0      	str	r0, [r4, #56]	; 0x38
 8013fae:	b928      	cbnz	r0, 8013fbc <rand+0x20>
 8013fb0:	4602      	mov	r2, r0
 8013fb2:	4b13      	ldr	r3, [pc, #76]	; (8014000 <rand+0x64>)
 8013fb4:	4813      	ldr	r0, [pc, #76]	; (8014004 <rand+0x68>)
 8013fb6:	214e      	movs	r1, #78	; 0x4e
 8013fb8:	f000 f8f6 	bl	80141a8 <__assert_func>
 8013fbc:	4a12      	ldr	r2, [pc, #72]	; (8014008 <rand+0x6c>)
 8013fbe:	4b13      	ldr	r3, [pc, #76]	; (801400c <rand+0x70>)
 8013fc0:	e9c0 2300 	strd	r2, r3, [r0]
 8013fc4:	4b12      	ldr	r3, [pc, #72]	; (8014010 <rand+0x74>)
 8013fc6:	6083      	str	r3, [r0, #8]
 8013fc8:	230b      	movs	r3, #11
 8013fca:	8183      	strh	r3, [r0, #12]
 8013fcc:	2201      	movs	r2, #1
 8013fce:	2300      	movs	r3, #0
 8013fd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013fd4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013fd6:	480f      	ldr	r0, [pc, #60]	; (8014014 <rand+0x78>)
 8013fd8:	690a      	ldr	r2, [r1, #16]
 8013fda:	694b      	ldr	r3, [r1, #20]
 8013fdc:	4c0e      	ldr	r4, [pc, #56]	; (8014018 <rand+0x7c>)
 8013fde:	4350      	muls	r0, r2
 8013fe0:	fb04 0003 	mla	r0, r4, r3, r0
 8013fe4:	fba2 3404 	umull	r3, r4, r2, r4
 8013fe8:	1c5a      	adds	r2, r3, #1
 8013fea:	4404      	add	r4, r0
 8013fec:	f144 0000 	adc.w	r0, r4, #0
 8013ff0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013ff4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013ff8:	bd10      	pop	{r4, pc}
 8013ffa:	bf00      	nop
 8013ffc:	2000001c 	.word	0x2000001c
 8014000:	08017df4 	.word	0x08017df4
 8014004:	08017e0b 	.word	0x08017e0b
 8014008:	abcd330e 	.word	0xabcd330e
 801400c:	e66d1234 	.word	0xe66d1234
 8014010:	0005deec 	.word	0x0005deec
 8014014:	5851f42d 	.word	0x5851f42d
 8014018:	4c957f2d 	.word	0x4c957f2d

0801401c <setvbuf>:
 801401c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014020:	461d      	mov	r5, r3
 8014022:	4b5d      	ldr	r3, [pc, #372]	; (8014198 <setvbuf+0x17c>)
 8014024:	681f      	ldr	r7, [r3, #0]
 8014026:	4604      	mov	r4, r0
 8014028:	460e      	mov	r6, r1
 801402a:	4690      	mov	r8, r2
 801402c:	b127      	cbz	r7, 8014038 <setvbuf+0x1c>
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	b913      	cbnz	r3, 8014038 <setvbuf+0x1c>
 8014032:	4638      	mov	r0, r7
 8014034:	f000 f9f0 	bl	8014418 <__sinit>
 8014038:	4b58      	ldr	r3, [pc, #352]	; (801419c <setvbuf+0x180>)
 801403a:	429c      	cmp	r4, r3
 801403c:	d167      	bne.n	801410e <setvbuf+0xf2>
 801403e:	687c      	ldr	r4, [r7, #4]
 8014040:	f1b8 0f02 	cmp.w	r8, #2
 8014044:	d006      	beq.n	8014054 <setvbuf+0x38>
 8014046:	f1b8 0f01 	cmp.w	r8, #1
 801404a:	f200 809f 	bhi.w	801418c <setvbuf+0x170>
 801404e:	2d00      	cmp	r5, #0
 8014050:	f2c0 809c 	blt.w	801418c <setvbuf+0x170>
 8014054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014056:	07db      	lsls	r3, r3, #31
 8014058:	d405      	bmi.n	8014066 <setvbuf+0x4a>
 801405a:	89a3      	ldrh	r3, [r4, #12]
 801405c:	0598      	lsls	r0, r3, #22
 801405e:	d402      	bmi.n	8014066 <setvbuf+0x4a>
 8014060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014062:	f000 fa89 	bl	8014578 <__retarget_lock_acquire_recursive>
 8014066:	4621      	mov	r1, r4
 8014068:	4638      	mov	r0, r7
 801406a:	f000 f941 	bl	80142f0 <_fflush_r>
 801406e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014070:	b141      	cbz	r1, 8014084 <setvbuf+0x68>
 8014072:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014076:	4299      	cmp	r1, r3
 8014078:	d002      	beq.n	8014080 <setvbuf+0x64>
 801407a:	4638      	mov	r0, r7
 801407c:	f000 faea 	bl	8014654 <_free_r>
 8014080:	2300      	movs	r3, #0
 8014082:	6363      	str	r3, [r4, #52]	; 0x34
 8014084:	2300      	movs	r3, #0
 8014086:	61a3      	str	r3, [r4, #24]
 8014088:	6063      	str	r3, [r4, #4]
 801408a:	89a3      	ldrh	r3, [r4, #12]
 801408c:	0619      	lsls	r1, r3, #24
 801408e:	d503      	bpl.n	8014098 <setvbuf+0x7c>
 8014090:	6921      	ldr	r1, [r4, #16]
 8014092:	4638      	mov	r0, r7
 8014094:	f000 fade 	bl	8014654 <_free_r>
 8014098:	89a3      	ldrh	r3, [r4, #12]
 801409a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801409e:	f023 0303 	bic.w	r3, r3, #3
 80140a2:	f1b8 0f02 	cmp.w	r8, #2
 80140a6:	81a3      	strh	r3, [r4, #12]
 80140a8:	d06c      	beq.n	8014184 <setvbuf+0x168>
 80140aa:	ab01      	add	r3, sp, #4
 80140ac:	466a      	mov	r2, sp
 80140ae:	4621      	mov	r1, r4
 80140b0:	4638      	mov	r0, r7
 80140b2:	f000 fa63 	bl	801457c <__swhatbuf_r>
 80140b6:	89a3      	ldrh	r3, [r4, #12]
 80140b8:	4318      	orrs	r0, r3
 80140ba:	81a0      	strh	r0, [r4, #12]
 80140bc:	2d00      	cmp	r5, #0
 80140be:	d130      	bne.n	8014122 <setvbuf+0x106>
 80140c0:	9d00      	ldr	r5, [sp, #0]
 80140c2:	4628      	mov	r0, r5
 80140c4:	f000 fabe 	bl	8014644 <malloc>
 80140c8:	4606      	mov	r6, r0
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d155      	bne.n	801417a <setvbuf+0x15e>
 80140ce:	f8dd 9000 	ldr.w	r9, [sp]
 80140d2:	45a9      	cmp	r9, r5
 80140d4:	d14a      	bne.n	801416c <setvbuf+0x150>
 80140d6:	f04f 35ff 	mov.w	r5, #4294967295
 80140da:	2200      	movs	r2, #0
 80140dc:	60a2      	str	r2, [r4, #8]
 80140de:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80140e2:	6022      	str	r2, [r4, #0]
 80140e4:	6122      	str	r2, [r4, #16]
 80140e6:	2201      	movs	r2, #1
 80140e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140ec:	6162      	str	r2, [r4, #20]
 80140ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80140f0:	f043 0302 	orr.w	r3, r3, #2
 80140f4:	07d2      	lsls	r2, r2, #31
 80140f6:	81a3      	strh	r3, [r4, #12]
 80140f8:	d405      	bmi.n	8014106 <setvbuf+0xea>
 80140fa:	f413 7f00 	tst.w	r3, #512	; 0x200
 80140fe:	d102      	bne.n	8014106 <setvbuf+0xea>
 8014100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014102:	f000 fa3a 	bl	801457a <__retarget_lock_release_recursive>
 8014106:	4628      	mov	r0, r5
 8014108:	b003      	add	sp, #12
 801410a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801410e:	4b24      	ldr	r3, [pc, #144]	; (80141a0 <setvbuf+0x184>)
 8014110:	429c      	cmp	r4, r3
 8014112:	d101      	bne.n	8014118 <setvbuf+0xfc>
 8014114:	68bc      	ldr	r4, [r7, #8]
 8014116:	e793      	b.n	8014040 <setvbuf+0x24>
 8014118:	4b22      	ldr	r3, [pc, #136]	; (80141a4 <setvbuf+0x188>)
 801411a:	429c      	cmp	r4, r3
 801411c:	bf08      	it	eq
 801411e:	68fc      	ldreq	r4, [r7, #12]
 8014120:	e78e      	b.n	8014040 <setvbuf+0x24>
 8014122:	2e00      	cmp	r6, #0
 8014124:	d0cd      	beq.n	80140c2 <setvbuf+0xa6>
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	b913      	cbnz	r3, 8014130 <setvbuf+0x114>
 801412a:	4638      	mov	r0, r7
 801412c:	f000 f974 	bl	8014418 <__sinit>
 8014130:	f1b8 0f01 	cmp.w	r8, #1
 8014134:	bf08      	it	eq
 8014136:	89a3      	ldrheq	r3, [r4, #12]
 8014138:	6026      	str	r6, [r4, #0]
 801413a:	bf04      	itt	eq
 801413c:	f043 0301 	orreq.w	r3, r3, #1
 8014140:	81a3      	strheq	r3, [r4, #12]
 8014142:	89a2      	ldrh	r2, [r4, #12]
 8014144:	f012 0308 	ands.w	r3, r2, #8
 8014148:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801414c:	d01c      	beq.n	8014188 <setvbuf+0x16c>
 801414e:	07d3      	lsls	r3, r2, #31
 8014150:	bf41      	itttt	mi
 8014152:	2300      	movmi	r3, #0
 8014154:	426d      	negmi	r5, r5
 8014156:	60a3      	strmi	r3, [r4, #8]
 8014158:	61a5      	strmi	r5, [r4, #24]
 801415a:	bf58      	it	pl
 801415c:	60a5      	strpl	r5, [r4, #8]
 801415e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8014160:	f015 0501 	ands.w	r5, r5, #1
 8014164:	d115      	bne.n	8014192 <setvbuf+0x176>
 8014166:	f412 7f00 	tst.w	r2, #512	; 0x200
 801416a:	e7c8      	b.n	80140fe <setvbuf+0xe2>
 801416c:	4648      	mov	r0, r9
 801416e:	f000 fa69 	bl	8014644 <malloc>
 8014172:	4606      	mov	r6, r0
 8014174:	2800      	cmp	r0, #0
 8014176:	d0ae      	beq.n	80140d6 <setvbuf+0xba>
 8014178:	464d      	mov	r5, r9
 801417a:	89a3      	ldrh	r3, [r4, #12]
 801417c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014180:	81a3      	strh	r3, [r4, #12]
 8014182:	e7d0      	b.n	8014126 <setvbuf+0x10a>
 8014184:	2500      	movs	r5, #0
 8014186:	e7a8      	b.n	80140da <setvbuf+0xbe>
 8014188:	60a3      	str	r3, [r4, #8]
 801418a:	e7e8      	b.n	801415e <setvbuf+0x142>
 801418c:	f04f 35ff 	mov.w	r5, #4294967295
 8014190:	e7b9      	b.n	8014106 <setvbuf+0xea>
 8014192:	2500      	movs	r5, #0
 8014194:	e7b7      	b.n	8014106 <setvbuf+0xea>
 8014196:	bf00      	nop
 8014198:	2000001c 	.word	0x2000001c
 801419c:	08017ec8 	.word	0x08017ec8
 80141a0:	08017ee8 	.word	0x08017ee8
 80141a4:	08017ea8 	.word	0x08017ea8

080141a8 <__assert_func>:
 80141a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141aa:	4614      	mov	r4, r2
 80141ac:	461a      	mov	r2, r3
 80141ae:	4b09      	ldr	r3, [pc, #36]	; (80141d4 <__assert_func+0x2c>)
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4605      	mov	r5, r0
 80141b4:	68d8      	ldr	r0, [r3, #12]
 80141b6:	b14c      	cbz	r4, 80141cc <__assert_func+0x24>
 80141b8:	4b07      	ldr	r3, [pc, #28]	; (80141d8 <__assert_func+0x30>)
 80141ba:	9100      	str	r1, [sp, #0]
 80141bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80141c0:	4906      	ldr	r1, [pc, #24]	; (80141dc <__assert_func+0x34>)
 80141c2:	462b      	mov	r3, r5
 80141c4:	f000 f9a6 	bl	8014514 <fiprintf>
 80141c8:	f000 ff02 	bl	8014fd0 <abort>
 80141cc:	4b04      	ldr	r3, [pc, #16]	; (80141e0 <__assert_func+0x38>)
 80141ce:	461c      	mov	r4, r3
 80141d0:	e7f3      	b.n	80141ba <__assert_func+0x12>
 80141d2:	bf00      	nop
 80141d4:	2000001c 	.word	0x2000001c
 80141d8:	08017e6a 	.word	0x08017e6a
 80141dc:	08017e77 	.word	0x08017e77
 80141e0:	08017ea5 	.word	0x08017ea5

080141e4 <__sflush_r>:
 80141e4:	898a      	ldrh	r2, [r1, #12]
 80141e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ea:	4605      	mov	r5, r0
 80141ec:	0710      	lsls	r0, r2, #28
 80141ee:	460c      	mov	r4, r1
 80141f0:	d458      	bmi.n	80142a4 <__sflush_r+0xc0>
 80141f2:	684b      	ldr	r3, [r1, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	dc05      	bgt.n	8014204 <__sflush_r+0x20>
 80141f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	dc02      	bgt.n	8014204 <__sflush_r+0x20>
 80141fe:	2000      	movs	r0, #0
 8014200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014206:	2e00      	cmp	r6, #0
 8014208:	d0f9      	beq.n	80141fe <__sflush_r+0x1a>
 801420a:	2300      	movs	r3, #0
 801420c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014210:	682f      	ldr	r7, [r5, #0]
 8014212:	602b      	str	r3, [r5, #0]
 8014214:	d032      	beq.n	801427c <__sflush_r+0x98>
 8014216:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014218:	89a3      	ldrh	r3, [r4, #12]
 801421a:	075a      	lsls	r2, r3, #29
 801421c:	d505      	bpl.n	801422a <__sflush_r+0x46>
 801421e:	6863      	ldr	r3, [r4, #4]
 8014220:	1ac0      	subs	r0, r0, r3
 8014222:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014224:	b10b      	cbz	r3, 801422a <__sflush_r+0x46>
 8014226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014228:	1ac0      	subs	r0, r0, r3
 801422a:	2300      	movs	r3, #0
 801422c:	4602      	mov	r2, r0
 801422e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014230:	6a21      	ldr	r1, [r4, #32]
 8014232:	4628      	mov	r0, r5
 8014234:	47b0      	blx	r6
 8014236:	1c43      	adds	r3, r0, #1
 8014238:	89a3      	ldrh	r3, [r4, #12]
 801423a:	d106      	bne.n	801424a <__sflush_r+0x66>
 801423c:	6829      	ldr	r1, [r5, #0]
 801423e:	291d      	cmp	r1, #29
 8014240:	d82c      	bhi.n	801429c <__sflush_r+0xb8>
 8014242:	4a2a      	ldr	r2, [pc, #168]	; (80142ec <__sflush_r+0x108>)
 8014244:	40ca      	lsrs	r2, r1
 8014246:	07d6      	lsls	r6, r2, #31
 8014248:	d528      	bpl.n	801429c <__sflush_r+0xb8>
 801424a:	2200      	movs	r2, #0
 801424c:	6062      	str	r2, [r4, #4]
 801424e:	04d9      	lsls	r1, r3, #19
 8014250:	6922      	ldr	r2, [r4, #16]
 8014252:	6022      	str	r2, [r4, #0]
 8014254:	d504      	bpl.n	8014260 <__sflush_r+0x7c>
 8014256:	1c42      	adds	r2, r0, #1
 8014258:	d101      	bne.n	801425e <__sflush_r+0x7a>
 801425a:	682b      	ldr	r3, [r5, #0]
 801425c:	b903      	cbnz	r3, 8014260 <__sflush_r+0x7c>
 801425e:	6560      	str	r0, [r4, #84]	; 0x54
 8014260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014262:	602f      	str	r7, [r5, #0]
 8014264:	2900      	cmp	r1, #0
 8014266:	d0ca      	beq.n	80141fe <__sflush_r+0x1a>
 8014268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801426c:	4299      	cmp	r1, r3
 801426e:	d002      	beq.n	8014276 <__sflush_r+0x92>
 8014270:	4628      	mov	r0, r5
 8014272:	f000 f9ef 	bl	8014654 <_free_r>
 8014276:	2000      	movs	r0, #0
 8014278:	6360      	str	r0, [r4, #52]	; 0x34
 801427a:	e7c1      	b.n	8014200 <__sflush_r+0x1c>
 801427c:	6a21      	ldr	r1, [r4, #32]
 801427e:	2301      	movs	r3, #1
 8014280:	4628      	mov	r0, r5
 8014282:	47b0      	blx	r6
 8014284:	1c41      	adds	r1, r0, #1
 8014286:	d1c7      	bne.n	8014218 <__sflush_r+0x34>
 8014288:	682b      	ldr	r3, [r5, #0]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d0c4      	beq.n	8014218 <__sflush_r+0x34>
 801428e:	2b1d      	cmp	r3, #29
 8014290:	d001      	beq.n	8014296 <__sflush_r+0xb2>
 8014292:	2b16      	cmp	r3, #22
 8014294:	d101      	bne.n	801429a <__sflush_r+0xb6>
 8014296:	602f      	str	r7, [r5, #0]
 8014298:	e7b1      	b.n	80141fe <__sflush_r+0x1a>
 801429a:	89a3      	ldrh	r3, [r4, #12]
 801429c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142a0:	81a3      	strh	r3, [r4, #12]
 80142a2:	e7ad      	b.n	8014200 <__sflush_r+0x1c>
 80142a4:	690f      	ldr	r7, [r1, #16]
 80142a6:	2f00      	cmp	r7, #0
 80142a8:	d0a9      	beq.n	80141fe <__sflush_r+0x1a>
 80142aa:	0793      	lsls	r3, r2, #30
 80142ac:	680e      	ldr	r6, [r1, #0]
 80142ae:	bf08      	it	eq
 80142b0:	694b      	ldreq	r3, [r1, #20]
 80142b2:	600f      	str	r7, [r1, #0]
 80142b4:	bf18      	it	ne
 80142b6:	2300      	movne	r3, #0
 80142b8:	eba6 0807 	sub.w	r8, r6, r7
 80142bc:	608b      	str	r3, [r1, #8]
 80142be:	f1b8 0f00 	cmp.w	r8, #0
 80142c2:	dd9c      	ble.n	80141fe <__sflush_r+0x1a>
 80142c4:	6a21      	ldr	r1, [r4, #32]
 80142c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142c8:	4643      	mov	r3, r8
 80142ca:	463a      	mov	r2, r7
 80142cc:	4628      	mov	r0, r5
 80142ce:	47b0      	blx	r6
 80142d0:	2800      	cmp	r0, #0
 80142d2:	dc06      	bgt.n	80142e2 <__sflush_r+0xfe>
 80142d4:	89a3      	ldrh	r3, [r4, #12]
 80142d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142da:	81a3      	strh	r3, [r4, #12]
 80142dc:	f04f 30ff 	mov.w	r0, #4294967295
 80142e0:	e78e      	b.n	8014200 <__sflush_r+0x1c>
 80142e2:	4407      	add	r7, r0
 80142e4:	eba8 0800 	sub.w	r8, r8, r0
 80142e8:	e7e9      	b.n	80142be <__sflush_r+0xda>
 80142ea:	bf00      	nop
 80142ec:	20400001 	.word	0x20400001

080142f0 <_fflush_r>:
 80142f0:	b538      	push	{r3, r4, r5, lr}
 80142f2:	690b      	ldr	r3, [r1, #16]
 80142f4:	4605      	mov	r5, r0
 80142f6:	460c      	mov	r4, r1
 80142f8:	b913      	cbnz	r3, 8014300 <_fflush_r+0x10>
 80142fa:	2500      	movs	r5, #0
 80142fc:	4628      	mov	r0, r5
 80142fe:	bd38      	pop	{r3, r4, r5, pc}
 8014300:	b118      	cbz	r0, 801430a <_fflush_r+0x1a>
 8014302:	6983      	ldr	r3, [r0, #24]
 8014304:	b90b      	cbnz	r3, 801430a <_fflush_r+0x1a>
 8014306:	f000 f887 	bl	8014418 <__sinit>
 801430a:	4b14      	ldr	r3, [pc, #80]	; (801435c <_fflush_r+0x6c>)
 801430c:	429c      	cmp	r4, r3
 801430e:	d11b      	bne.n	8014348 <_fflush_r+0x58>
 8014310:	686c      	ldr	r4, [r5, #4]
 8014312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d0ef      	beq.n	80142fa <_fflush_r+0xa>
 801431a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801431c:	07d0      	lsls	r0, r2, #31
 801431e:	d404      	bmi.n	801432a <_fflush_r+0x3a>
 8014320:	0599      	lsls	r1, r3, #22
 8014322:	d402      	bmi.n	801432a <_fflush_r+0x3a>
 8014324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014326:	f000 f927 	bl	8014578 <__retarget_lock_acquire_recursive>
 801432a:	4628      	mov	r0, r5
 801432c:	4621      	mov	r1, r4
 801432e:	f7ff ff59 	bl	80141e4 <__sflush_r>
 8014332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014334:	07da      	lsls	r2, r3, #31
 8014336:	4605      	mov	r5, r0
 8014338:	d4e0      	bmi.n	80142fc <_fflush_r+0xc>
 801433a:	89a3      	ldrh	r3, [r4, #12]
 801433c:	059b      	lsls	r3, r3, #22
 801433e:	d4dd      	bmi.n	80142fc <_fflush_r+0xc>
 8014340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014342:	f000 f91a 	bl	801457a <__retarget_lock_release_recursive>
 8014346:	e7d9      	b.n	80142fc <_fflush_r+0xc>
 8014348:	4b05      	ldr	r3, [pc, #20]	; (8014360 <_fflush_r+0x70>)
 801434a:	429c      	cmp	r4, r3
 801434c:	d101      	bne.n	8014352 <_fflush_r+0x62>
 801434e:	68ac      	ldr	r4, [r5, #8]
 8014350:	e7df      	b.n	8014312 <_fflush_r+0x22>
 8014352:	4b04      	ldr	r3, [pc, #16]	; (8014364 <_fflush_r+0x74>)
 8014354:	429c      	cmp	r4, r3
 8014356:	bf08      	it	eq
 8014358:	68ec      	ldreq	r4, [r5, #12]
 801435a:	e7da      	b.n	8014312 <_fflush_r+0x22>
 801435c:	08017ec8 	.word	0x08017ec8
 8014360:	08017ee8 	.word	0x08017ee8
 8014364:	08017ea8 	.word	0x08017ea8

08014368 <std>:
 8014368:	2300      	movs	r3, #0
 801436a:	b510      	push	{r4, lr}
 801436c:	4604      	mov	r4, r0
 801436e:	e9c0 3300 	strd	r3, r3, [r0]
 8014372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014376:	6083      	str	r3, [r0, #8]
 8014378:	8181      	strh	r1, [r0, #12]
 801437a:	6643      	str	r3, [r0, #100]	; 0x64
 801437c:	81c2      	strh	r2, [r0, #14]
 801437e:	6183      	str	r3, [r0, #24]
 8014380:	4619      	mov	r1, r3
 8014382:	2208      	movs	r2, #8
 8014384:	305c      	adds	r0, #92	; 0x5c
 8014386:	f7ff fde9 	bl	8013f5c <memset>
 801438a:	4b05      	ldr	r3, [pc, #20]	; (80143a0 <std+0x38>)
 801438c:	6263      	str	r3, [r4, #36]	; 0x24
 801438e:	4b05      	ldr	r3, [pc, #20]	; (80143a4 <std+0x3c>)
 8014390:	62a3      	str	r3, [r4, #40]	; 0x28
 8014392:	4b05      	ldr	r3, [pc, #20]	; (80143a8 <std+0x40>)
 8014394:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014396:	4b05      	ldr	r3, [pc, #20]	; (80143ac <std+0x44>)
 8014398:	6224      	str	r4, [r4, #32]
 801439a:	6323      	str	r3, [r4, #48]	; 0x30
 801439c:	bd10      	pop	{r4, pc}
 801439e:	bf00      	nop
 80143a0:	08014da5 	.word	0x08014da5
 80143a4:	08014dc7 	.word	0x08014dc7
 80143a8:	08014dff 	.word	0x08014dff
 80143ac:	08014e23 	.word	0x08014e23

080143b0 <_cleanup_r>:
 80143b0:	4901      	ldr	r1, [pc, #4]	; (80143b8 <_cleanup_r+0x8>)
 80143b2:	f000 b8c1 	b.w	8014538 <_fwalk_reent>
 80143b6:	bf00      	nop
 80143b8:	080142f1 	.word	0x080142f1

080143bc <__sfmoreglue>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	1e4a      	subs	r2, r1, #1
 80143c0:	2568      	movs	r5, #104	; 0x68
 80143c2:	4355      	muls	r5, r2
 80143c4:	460e      	mov	r6, r1
 80143c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143ca:	f000 f993 	bl	80146f4 <_malloc_r>
 80143ce:	4604      	mov	r4, r0
 80143d0:	b140      	cbz	r0, 80143e4 <__sfmoreglue+0x28>
 80143d2:	2100      	movs	r1, #0
 80143d4:	e9c0 1600 	strd	r1, r6, [r0]
 80143d8:	300c      	adds	r0, #12
 80143da:	60a0      	str	r0, [r4, #8]
 80143dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143e0:	f7ff fdbc 	bl	8013f5c <memset>
 80143e4:	4620      	mov	r0, r4
 80143e6:	bd70      	pop	{r4, r5, r6, pc}

080143e8 <__sfp_lock_acquire>:
 80143e8:	4801      	ldr	r0, [pc, #4]	; (80143f0 <__sfp_lock_acquire+0x8>)
 80143ea:	f000 b8c5 	b.w	8014578 <__retarget_lock_acquire_recursive>
 80143ee:	bf00      	nop
 80143f0:	2000b970 	.word	0x2000b970

080143f4 <__sfp_lock_release>:
 80143f4:	4801      	ldr	r0, [pc, #4]	; (80143fc <__sfp_lock_release+0x8>)
 80143f6:	f000 b8c0 	b.w	801457a <__retarget_lock_release_recursive>
 80143fa:	bf00      	nop
 80143fc:	2000b970 	.word	0x2000b970

08014400 <__sinit_lock_acquire>:
 8014400:	4801      	ldr	r0, [pc, #4]	; (8014408 <__sinit_lock_acquire+0x8>)
 8014402:	f000 b8b9 	b.w	8014578 <__retarget_lock_acquire_recursive>
 8014406:	bf00      	nop
 8014408:	2000b96b 	.word	0x2000b96b

0801440c <__sinit_lock_release>:
 801440c:	4801      	ldr	r0, [pc, #4]	; (8014414 <__sinit_lock_release+0x8>)
 801440e:	f000 b8b4 	b.w	801457a <__retarget_lock_release_recursive>
 8014412:	bf00      	nop
 8014414:	2000b96b 	.word	0x2000b96b

08014418 <__sinit>:
 8014418:	b510      	push	{r4, lr}
 801441a:	4604      	mov	r4, r0
 801441c:	f7ff fff0 	bl	8014400 <__sinit_lock_acquire>
 8014420:	69a3      	ldr	r3, [r4, #24]
 8014422:	b11b      	cbz	r3, 801442c <__sinit+0x14>
 8014424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014428:	f7ff bff0 	b.w	801440c <__sinit_lock_release>
 801442c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014430:	6523      	str	r3, [r4, #80]	; 0x50
 8014432:	4b13      	ldr	r3, [pc, #76]	; (8014480 <__sinit+0x68>)
 8014434:	4a13      	ldr	r2, [pc, #76]	; (8014484 <__sinit+0x6c>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	62a2      	str	r2, [r4, #40]	; 0x28
 801443a:	42a3      	cmp	r3, r4
 801443c:	bf04      	itt	eq
 801443e:	2301      	moveq	r3, #1
 8014440:	61a3      	streq	r3, [r4, #24]
 8014442:	4620      	mov	r0, r4
 8014444:	f000 f820 	bl	8014488 <__sfp>
 8014448:	6060      	str	r0, [r4, #4]
 801444a:	4620      	mov	r0, r4
 801444c:	f000 f81c 	bl	8014488 <__sfp>
 8014450:	60a0      	str	r0, [r4, #8]
 8014452:	4620      	mov	r0, r4
 8014454:	f000 f818 	bl	8014488 <__sfp>
 8014458:	2200      	movs	r2, #0
 801445a:	60e0      	str	r0, [r4, #12]
 801445c:	2104      	movs	r1, #4
 801445e:	6860      	ldr	r0, [r4, #4]
 8014460:	f7ff ff82 	bl	8014368 <std>
 8014464:	68a0      	ldr	r0, [r4, #8]
 8014466:	2201      	movs	r2, #1
 8014468:	2109      	movs	r1, #9
 801446a:	f7ff ff7d 	bl	8014368 <std>
 801446e:	68e0      	ldr	r0, [r4, #12]
 8014470:	2202      	movs	r2, #2
 8014472:	2112      	movs	r1, #18
 8014474:	f7ff ff78 	bl	8014368 <std>
 8014478:	2301      	movs	r3, #1
 801447a:	61a3      	str	r3, [r4, #24]
 801447c:	e7d2      	b.n	8014424 <__sinit+0xc>
 801447e:	bf00      	nop
 8014480:	08017df0 	.word	0x08017df0
 8014484:	080143b1 	.word	0x080143b1

08014488 <__sfp>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	4607      	mov	r7, r0
 801448c:	f7ff ffac 	bl	80143e8 <__sfp_lock_acquire>
 8014490:	4b1e      	ldr	r3, [pc, #120]	; (801450c <__sfp+0x84>)
 8014492:	681e      	ldr	r6, [r3, #0]
 8014494:	69b3      	ldr	r3, [r6, #24]
 8014496:	b913      	cbnz	r3, 801449e <__sfp+0x16>
 8014498:	4630      	mov	r0, r6
 801449a:	f7ff ffbd 	bl	8014418 <__sinit>
 801449e:	3648      	adds	r6, #72	; 0x48
 80144a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80144a4:	3b01      	subs	r3, #1
 80144a6:	d503      	bpl.n	80144b0 <__sfp+0x28>
 80144a8:	6833      	ldr	r3, [r6, #0]
 80144aa:	b30b      	cbz	r3, 80144f0 <__sfp+0x68>
 80144ac:	6836      	ldr	r6, [r6, #0]
 80144ae:	e7f7      	b.n	80144a0 <__sfp+0x18>
 80144b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80144b4:	b9d5      	cbnz	r5, 80144ec <__sfp+0x64>
 80144b6:	4b16      	ldr	r3, [pc, #88]	; (8014510 <__sfp+0x88>)
 80144b8:	60e3      	str	r3, [r4, #12]
 80144ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80144be:	6665      	str	r5, [r4, #100]	; 0x64
 80144c0:	f000 f859 	bl	8014576 <__retarget_lock_init_recursive>
 80144c4:	f7ff ff96 	bl	80143f4 <__sfp_lock_release>
 80144c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144d0:	6025      	str	r5, [r4, #0]
 80144d2:	61a5      	str	r5, [r4, #24]
 80144d4:	2208      	movs	r2, #8
 80144d6:	4629      	mov	r1, r5
 80144d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144dc:	f7ff fd3e 	bl	8013f5c <memset>
 80144e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144e8:	4620      	mov	r0, r4
 80144ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ec:	3468      	adds	r4, #104	; 0x68
 80144ee:	e7d9      	b.n	80144a4 <__sfp+0x1c>
 80144f0:	2104      	movs	r1, #4
 80144f2:	4638      	mov	r0, r7
 80144f4:	f7ff ff62 	bl	80143bc <__sfmoreglue>
 80144f8:	4604      	mov	r4, r0
 80144fa:	6030      	str	r0, [r6, #0]
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d1d5      	bne.n	80144ac <__sfp+0x24>
 8014500:	f7ff ff78 	bl	80143f4 <__sfp_lock_release>
 8014504:	230c      	movs	r3, #12
 8014506:	603b      	str	r3, [r7, #0]
 8014508:	e7ee      	b.n	80144e8 <__sfp+0x60>
 801450a:	bf00      	nop
 801450c:	08017df0 	.word	0x08017df0
 8014510:	ffff0001 	.word	0xffff0001

08014514 <fiprintf>:
 8014514:	b40e      	push	{r1, r2, r3}
 8014516:	b503      	push	{r0, r1, lr}
 8014518:	4601      	mov	r1, r0
 801451a:	ab03      	add	r3, sp, #12
 801451c:	4805      	ldr	r0, [pc, #20]	; (8014534 <fiprintf+0x20>)
 801451e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014522:	6800      	ldr	r0, [r0, #0]
 8014524:	9301      	str	r3, [sp, #4]
 8014526:	f000 f969 	bl	80147fc <_vfiprintf_r>
 801452a:	b002      	add	sp, #8
 801452c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014530:	b003      	add	sp, #12
 8014532:	4770      	bx	lr
 8014534:	2000001c 	.word	0x2000001c

08014538 <_fwalk_reent>:
 8014538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801453c:	4606      	mov	r6, r0
 801453e:	4688      	mov	r8, r1
 8014540:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014544:	2700      	movs	r7, #0
 8014546:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801454a:	f1b9 0901 	subs.w	r9, r9, #1
 801454e:	d505      	bpl.n	801455c <_fwalk_reent+0x24>
 8014550:	6824      	ldr	r4, [r4, #0]
 8014552:	2c00      	cmp	r4, #0
 8014554:	d1f7      	bne.n	8014546 <_fwalk_reent+0xe>
 8014556:	4638      	mov	r0, r7
 8014558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801455c:	89ab      	ldrh	r3, [r5, #12]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d907      	bls.n	8014572 <_fwalk_reent+0x3a>
 8014562:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014566:	3301      	adds	r3, #1
 8014568:	d003      	beq.n	8014572 <_fwalk_reent+0x3a>
 801456a:	4629      	mov	r1, r5
 801456c:	4630      	mov	r0, r6
 801456e:	47c0      	blx	r8
 8014570:	4307      	orrs	r7, r0
 8014572:	3568      	adds	r5, #104	; 0x68
 8014574:	e7e9      	b.n	801454a <_fwalk_reent+0x12>

08014576 <__retarget_lock_init_recursive>:
 8014576:	4770      	bx	lr

08014578 <__retarget_lock_acquire_recursive>:
 8014578:	4770      	bx	lr

0801457a <__retarget_lock_release_recursive>:
 801457a:	4770      	bx	lr

0801457c <__swhatbuf_r>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	460e      	mov	r6, r1
 8014580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014584:	2900      	cmp	r1, #0
 8014586:	b096      	sub	sp, #88	; 0x58
 8014588:	4614      	mov	r4, r2
 801458a:	461d      	mov	r5, r3
 801458c:	da07      	bge.n	801459e <__swhatbuf_r+0x22>
 801458e:	2300      	movs	r3, #0
 8014590:	602b      	str	r3, [r5, #0]
 8014592:	89b3      	ldrh	r3, [r6, #12]
 8014594:	061a      	lsls	r2, r3, #24
 8014596:	d410      	bmi.n	80145ba <__swhatbuf_r+0x3e>
 8014598:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801459c:	e00e      	b.n	80145bc <__swhatbuf_r+0x40>
 801459e:	466a      	mov	r2, sp
 80145a0:	f000 fd2e 	bl	8015000 <_fstat_r>
 80145a4:	2800      	cmp	r0, #0
 80145a6:	dbf2      	blt.n	801458e <__swhatbuf_r+0x12>
 80145a8:	9a01      	ldr	r2, [sp, #4]
 80145aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80145ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80145b2:	425a      	negs	r2, r3
 80145b4:	415a      	adcs	r2, r3
 80145b6:	602a      	str	r2, [r5, #0]
 80145b8:	e7ee      	b.n	8014598 <__swhatbuf_r+0x1c>
 80145ba:	2340      	movs	r3, #64	; 0x40
 80145bc:	2000      	movs	r0, #0
 80145be:	6023      	str	r3, [r4, #0]
 80145c0:	b016      	add	sp, #88	; 0x58
 80145c2:	bd70      	pop	{r4, r5, r6, pc}

080145c4 <__smakebuf_r>:
 80145c4:	898b      	ldrh	r3, [r1, #12]
 80145c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80145c8:	079d      	lsls	r5, r3, #30
 80145ca:	4606      	mov	r6, r0
 80145cc:	460c      	mov	r4, r1
 80145ce:	d507      	bpl.n	80145e0 <__smakebuf_r+0x1c>
 80145d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80145d4:	6023      	str	r3, [r4, #0]
 80145d6:	6123      	str	r3, [r4, #16]
 80145d8:	2301      	movs	r3, #1
 80145da:	6163      	str	r3, [r4, #20]
 80145dc:	b002      	add	sp, #8
 80145de:	bd70      	pop	{r4, r5, r6, pc}
 80145e0:	ab01      	add	r3, sp, #4
 80145e2:	466a      	mov	r2, sp
 80145e4:	f7ff ffca 	bl	801457c <__swhatbuf_r>
 80145e8:	9900      	ldr	r1, [sp, #0]
 80145ea:	4605      	mov	r5, r0
 80145ec:	4630      	mov	r0, r6
 80145ee:	f000 f881 	bl	80146f4 <_malloc_r>
 80145f2:	b948      	cbnz	r0, 8014608 <__smakebuf_r+0x44>
 80145f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145f8:	059a      	lsls	r2, r3, #22
 80145fa:	d4ef      	bmi.n	80145dc <__smakebuf_r+0x18>
 80145fc:	f023 0303 	bic.w	r3, r3, #3
 8014600:	f043 0302 	orr.w	r3, r3, #2
 8014604:	81a3      	strh	r3, [r4, #12]
 8014606:	e7e3      	b.n	80145d0 <__smakebuf_r+0xc>
 8014608:	4b0d      	ldr	r3, [pc, #52]	; (8014640 <__smakebuf_r+0x7c>)
 801460a:	62b3      	str	r3, [r6, #40]	; 0x28
 801460c:	89a3      	ldrh	r3, [r4, #12]
 801460e:	6020      	str	r0, [r4, #0]
 8014610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014614:	81a3      	strh	r3, [r4, #12]
 8014616:	9b00      	ldr	r3, [sp, #0]
 8014618:	6163      	str	r3, [r4, #20]
 801461a:	9b01      	ldr	r3, [sp, #4]
 801461c:	6120      	str	r0, [r4, #16]
 801461e:	b15b      	cbz	r3, 8014638 <__smakebuf_r+0x74>
 8014620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014624:	4630      	mov	r0, r6
 8014626:	f000 fcfd 	bl	8015024 <_isatty_r>
 801462a:	b128      	cbz	r0, 8014638 <__smakebuf_r+0x74>
 801462c:	89a3      	ldrh	r3, [r4, #12]
 801462e:	f023 0303 	bic.w	r3, r3, #3
 8014632:	f043 0301 	orr.w	r3, r3, #1
 8014636:	81a3      	strh	r3, [r4, #12]
 8014638:	89a0      	ldrh	r0, [r4, #12]
 801463a:	4305      	orrs	r5, r0
 801463c:	81a5      	strh	r5, [r4, #12]
 801463e:	e7cd      	b.n	80145dc <__smakebuf_r+0x18>
 8014640:	080143b1 	.word	0x080143b1

08014644 <malloc>:
 8014644:	4b02      	ldr	r3, [pc, #8]	; (8014650 <malloc+0xc>)
 8014646:	4601      	mov	r1, r0
 8014648:	6818      	ldr	r0, [r3, #0]
 801464a:	f000 b853 	b.w	80146f4 <_malloc_r>
 801464e:	bf00      	nop
 8014650:	2000001c 	.word	0x2000001c

08014654 <_free_r>:
 8014654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014656:	2900      	cmp	r1, #0
 8014658:	d048      	beq.n	80146ec <_free_r+0x98>
 801465a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801465e:	9001      	str	r0, [sp, #4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	f1a1 0404 	sub.w	r4, r1, #4
 8014666:	bfb8      	it	lt
 8014668:	18e4      	addlt	r4, r4, r3
 801466a:	f000 fcfd 	bl	8015068 <__malloc_lock>
 801466e:	4a20      	ldr	r2, [pc, #128]	; (80146f0 <_free_r+0x9c>)
 8014670:	9801      	ldr	r0, [sp, #4]
 8014672:	6813      	ldr	r3, [r2, #0]
 8014674:	4615      	mov	r5, r2
 8014676:	b933      	cbnz	r3, 8014686 <_free_r+0x32>
 8014678:	6063      	str	r3, [r4, #4]
 801467a:	6014      	str	r4, [r2, #0]
 801467c:	b003      	add	sp, #12
 801467e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014682:	f000 bcf7 	b.w	8015074 <__malloc_unlock>
 8014686:	42a3      	cmp	r3, r4
 8014688:	d90b      	bls.n	80146a2 <_free_r+0x4e>
 801468a:	6821      	ldr	r1, [r4, #0]
 801468c:	1862      	adds	r2, r4, r1
 801468e:	4293      	cmp	r3, r2
 8014690:	bf04      	itt	eq
 8014692:	681a      	ldreq	r2, [r3, #0]
 8014694:	685b      	ldreq	r3, [r3, #4]
 8014696:	6063      	str	r3, [r4, #4]
 8014698:	bf04      	itt	eq
 801469a:	1852      	addeq	r2, r2, r1
 801469c:	6022      	streq	r2, [r4, #0]
 801469e:	602c      	str	r4, [r5, #0]
 80146a0:	e7ec      	b.n	801467c <_free_r+0x28>
 80146a2:	461a      	mov	r2, r3
 80146a4:	685b      	ldr	r3, [r3, #4]
 80146a6:	b10b      	cbz	r3, 80146ac <_free_r+0x58>
 80146a8:	42a3      	cmp	r3, r4
 80146aa:	d9fa      	bls.n	80146a2 <_free_r+0x4e>
 80146ac:	6811      	ldr	r1, [r2, #0]
 80146ae:	1855      	adds	r5, r2, r1
 80146b0:	42a5      	cmp	r5, r4
 80146b2:	d10b      	bne.n	80146cc <_free_r+0x78>
 80146b4:	6824      	ldr	r4, [r4, #0]
 80146b6:	4421      	add	r1, r4
 80146b8:	1854      	adds	r4, r2, r1
 80146ba:	42a3      	cmp	r3, r4
 80146bc:	6011      	str	r1, [r2, #0]
 80146be:	d1dd      	bne.n	801467c <_free_r+0x28>
 80146c0:	681c      	ldr	r4, [r3, #0]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	6053      	str	r3, [r2, #4]
 80146c6:	4421      	add	r1, r4
 80146c8:	6011      	str	r1, [r2, #0]
 80146ca:	e7d7      	b.n	801467c <_free_r+0x28>
 80146cc:	d902      	bls.n	80146d4 <_free_r+0x80>
 80146ce:	230c      	movs	r3, #12
 80146d0:	6003      	str	r3, [r0, #0]
 80146d2:	e7d3      	b.n	801467c <_free_r+0x28>
 80146d4:	6825      	ldr	r5, [r4, #0]
 80146d6:	1961      	adds	r1, r4, r5
 80146d8:	428b      	cmp	r3, r1
 80146da:	bf04      	itt	eq
 80146dc:	6819      	ldreq	r1, [r3, #0]
 80146de:	685b      	ldreq	r3, [r3, #4]
 80146e0:	6063      	str	r3, [r4, #4]
 80146e2:	bf04      	itt	eq
 80146e4:	1949      	addeq	r1, r1, r5
 80146e6:	6021      	streq	r1, [r4, #0]
 80146e8:	6054      	str	r4, [r2, #4]
 80146ea:	e7c7      	b.n	801467c <_free_r+0x28>
 80146ec:	b003      	add	sp, #12
 80146ee:	bd30      	pop	{r4, r5, pc}
 80146f0:	20004b50 	.word	0x20004b50

080146f4 <_malloc_r>:
 80146f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f6:	1ccd      	adds	r5, r1, #3
 80146f8:	f025 0503 	bic.w	r5, r5, #3
 80146fc:	3508      	adds	r5, #8
 80146fe:	2d0c      	cmp	r5, #12
 8014700:	bf38      	it	cc
 8014702:	250c      	movcc	r5, #12
 8014704:	2d00      	cmp	r5, #0
 8014706:	4606      	mov	r6, r0
 8014708:	db01      	blt.n	801470e <_malloc_r+0x1a>
 801470a:	42a9      	cmp	r1, r5
 801470c:	d903      	bls.n	8014716 <_malloc_r+0x22>
 801470e:	230c      	movs	r3, #12
 8014710:	6033      	str	r3, [r6, #0]
 8014712:	2000      	movs	r0, #0
 8014714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014716:	f000 fca7 	bl	8015068 <__malloc_lock>
 801471a:	4921      	ldr	r1, [pc, #132]	; (80147a0 <_malloc_r+0xac>)
 801471c:	680a      	ldr	r2, [r1, #0]
 801471e:	4614      	mov	r4, r2
 8014720:	b99c      	cbnz	r4, 801474a <_malloc_r+0x56>
 8014722:	4f20      	ldr	r7, [pc, #128]	; (80147a4 <_malloc_r+0xb0>)
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	b923      	cbnz	r3, 8014732 <_malloc_r+0x3e>
 8014728:	4621      	mov	r1, r4
 801472a:	4630      	mov	r0, r6
 801472c:	f000 fb2a 	bl	8014d84 <_sbrk_r>
 8014730:	6038      	str	r0, [r7, #0]
 8014732:	4629      	mov	r1, r5
 8014734:	4630      	mov	r0, r6
 8014736:	f000 fb25 	bl	8014d84 <_sbrk_r>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	d123      	bne.n	8014786 <_malloc_r+0x92>
 801473e:	230c      	movs	r3, #12
 8014740:	6033      	str	r3, [r6, #0]
 8014742:	4630      	mov	r0, r6
 8014744:	f000 fc96 	bl	8015074 <__malloc_unlock>
 8014748:	e7e3      	b.n	8014712 <_malloc_r+0x1e>
 801474a:	6823      	ldr	r3, [r4, #0]
 801474c:	1b5b      	subs	r3, r3, r5
 801474e:	d417      	bmi.n	8014780 <_malloc_r+0x8c>
 8014750:	2b0b      	cmp	r3, #11
 8014752:	d903      	bls.n	801475c <_malloc_r+0x68>
 8014754:	6023      	str	r3, [r4, #0]
 8014756:	441c      	add	r4, r3
 8014758:	6025      	str	r5, [r4, #0]
 801475a:	e004      	b.n	8014766 <_malloc_r+0x72>
 801475c:	6863      	ldr	r3, [r4, #4]
 801475e:	42a2      	cmp	r2, r4
 8014760:	bf0c      	ite	eq
 8014762:	600b      	streq	r3, [r1, #0]
 8014764:	6053      	strne	r3, [r2, #4]
 8014766:	4630      	mov	r0, r6
 8014768:	f000 fc84 	bl	8015074 <__malloc_unlock>
 801476c:	f104 000b 	add.w	r0, r4, #11
 8014770:	1d23      	adds	r3, r4, #4
 8014772:	f020 0007 	bic.w	r0, r0, #7
 8014776:	1ac2      	subs	r2, r0, r3
 8014778:	d0cc      	beq.n	8014714 <_malloc_r+0x20>
 801477a:	1a1b      	subs	r3, r3, r0
 801477c:	50a3      	str	r3, [r4, r2]
 801477e:	e7c9      	b.n	8014714 <_malloc_r+0x20>
 8014780:	4622      	mov	r2, r4
 8014782:	6864      	ldr	r4, [r4, #4]
 8014784:	e7cc      	b.n	8014720 <_malloc_r+0x2c>
 8014786:	1cc4      	adds	r4, r0, #3
 8014788:	f024 0403 	bic.w	r4, r4, #3
 801478c:	42a0      	cmp	r0, r4
 801478e:	d0e3      	beq.n	8014758 <_malloc_r+0x64>
 8014790:	1a21      	subs	r1, r4, r0
 8014792:	4630      	mov	r0, r6
 8014794:	f000 faf6 	bl	8014d84 <_sbrk_r>
 8014798:	3001      	adds	r0, #1
 801479a:	d1dd      	bne.n	8014758 <_malloc_r+0x64>
 801479c:	e7cf      	b.n	801473e <_malloc_r+0x4a>
 801479e:	bf00      	nop
 80147a0:	20004b50 	.word	0x20004b50
 80147a4:	20004b54 	.word	0x20004b54

080147a8 <__sfputc_r>:
 80147a8:	6893      	ldr	r3, [r2, #8]
 80147aa:	3b01      	subs	r3, #1
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	b410      	push	{r4}
 80147b0:	6093      	str	r3, [r2, #8]
 80147b2:	da08      	bge.n	80147c6 <__sfputc_r+0x1e>
 80147b4:	6994      	ldr	r4, [r2, #24]
 80147b6:	42a3      	cmp	r3, r4
 80147b8:	db01      	blt.n	80147be <__sfputc_r+0x16>
 80147ba:	290a      	cmp	r1, #10
 80147bc:	d103      	bne.n	80147c6 <__sfputc_r+0x1e>
 80147be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147c2:	f000 bb33 	b.w	8014e2c <__swbuf_r>
 80147c6:	6813      	ldr	r3, [r2, #0]
 80147c8:	1c58      	adds	r0, r3, #1
 80147ca:	6010      	str	r0, [r2, #0]
 80147cc:	7019      	strb	r1, [r3, #0]
 80147ce:	4608      	mov	r0, r1
 80147d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147d4:	4770      	bx	lr

080147d6 <__sfputs_r>:
 80147d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d8:	4606      	mov	r6, r0
 80147da:	460f      	mov	r7, r1
 80147dc:	4614      	mov	r4, r2
 80147de:	18d5      	adds	r5, r2, r3
 80147e0:	42ac      	cmp	r4, r5
 80147e2:	d101      	bne.n	80147e8 <__sfputs_r+0x12>
 80147e4:	2000      	movs	r0, #0
 80147e6:	e007      	b.n	80147f8 <__sfputs_r+0x22>
 80147e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147ec:	463a      	mov	r2, r7
 80147ee:	4630      	mov	r0, r6
 80147f0:	f7ff ffda 	bl	80147a8 <__sfputc_r>
 80147f4:	1c43      	adds	r3, r0, #1
 80147f6:	d1f3      	bne.n	80147e0 <__sfputs_r+0xa>
 80147f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147fc <_vfiprintf_r>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	460d      	mov	r5, r1
 8014802:	b09d      	sub	sp, #116	; 0x74
 8014804:	4614      	mov	r4, r2
 8014806:	4698      	mov	r8, r3
 8014808:	4606      	mov	r6, r0
 801480a:	b118      	cbz	r0, 8014814 <_vfiprintf_r+0x18>
 801480c:	6983      	ldr	r3, [r0, #24]
 801480e:	b90b      	cbnz	r3, 8014814 <_vfiprintf_r+0x18>
 8014810:	f7ff fe02 	bl	8014418 <__sinit>
 8014814:	4b89      	ldr	r3, [pc, #548]	; (8014a3c <_vfiprintf_r+0x240>)
 8014816:	429d      	cmp	r5, r3
 8014818:	d11b      	bne.n	8014852 <_vfiprintf_r+0x56>
 801481a:	6875      	ldr	r5, [r6, #4]
 801481c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801481e:	07d9      	lsls	r1, r3, #31
 8014820:	d405      	bmi.n	801482e <_vfiprintf_r+0x32>
 8014822:	89ab      	ldrh	r3, [r5, #12]
 8014824:	059a      	lsls	r2, r3, #22
 8014826:	d402      	bmi.n	801482e <_vfiprintf_r+0x32>
 8014828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801482a:	f7ff fea5 	bl	8014578 <__retarget_lock_acquire_recursive>
 801482e:	89ab      	ldrh	r3, [r5, #12]
 8014830:	071b      	lsls	r3, r3, #28
 8014832:	d501      	bpl.n	8014838 <_vfiprintf_r+0x3c>
 8014834:	692b      	ldr	r3, [r5, #16]
 8014836:	b9eb      	cbnz	r3, 8014874 <_vfiprintf_r+0x78>
 8014838:	4629      	mov	r1, r5
 801483a:	4630      	mov	r0, r6
 801483c:	f000 fb5a 	bl	8014ef4 <__swsetup_r>
 8014840:	b1c0      	cbz	r0, 8014874 <_vfiprintf_r+0x78>
 8014842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014844:	07dc      	lsls	r4, r3, #31
 8014846:	d50e      	bpl.n	8014866 <_vfiprintf_r+0x6a>
 8014848:	f04f 30ff 	mov.w	r0, #4294967295
 801484c:	b01d      	add	sp, #116	; 0x74
 801484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014852:	4b7b      	ldr	r3, [pc, #492]	; (8014a40 <_vfiprintf_r+0x244>)
 8014854:	429d      	cmp	r5, r3
 8014856:	d101      	bne.n	801485c <_vfiprintf_r+0x60>
 8014858:	68b5      	ldr	r5, [r6, #8]
 801485a:	e7df      	b.n	801481c <_vfiprintf_r+0x20>
 801485c:	4b79      	ldr	r3, [pc, #484]	; (8014a44 <_vfiprintf_r+0x248>)
 801485e:	429d      	cmp	r5, r3
 8014860:	bf08      	it	eq
 8014862:	68f5      	ldreq	r5, [r6, #12]
 8014864:	e7da      	b.n	801481c <_vfiprintf_r+0x20>
 8014866:	89ab      	ldrh	r3, [r5, #12]
 8014868:	0598      	lsls	r0, r3, #22
 801486a:	d4ed      	bmi.n	8014848 <_vfiprintf_r+0x4c>
 801486c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801486e:	f7ff fe84 	bl	801457a <__retarget_lock_release_recursive>
 8014872:	e7e9      	b.n	8014848 <_vfiprintf_r+0x4c>
 8014874:	2300      	movs	r3, #0
 8014876:	9309      	str	r3, [sp, #36]	; 0x24
 8014878:	2320      	movs	r3, #32
 801487a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801487e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014882:	2330      	movs	r3, #48	; 0x30
 8014884:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014a48 <_vfiprintf_r+0x24c>
 8014888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801488c:	f04f 0901 	mov.w	r9, #1
 8014890:	4623      	mov	r3, r4
 8014892:	469a      	mov	sl, r3
 8014894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014898:	b10a      	cbz	r2, 801489e <_vfiprintf_r+0xa2>
 801489a:	2a25      	cmp	r2, #37	; 0x25
 801489c:	d1f9      	bne.n	8014892 <_vfiprintf_r+0x96>
 801489e:	ebba 0b04 	subs.w	fp, sl, r4
 80148a2:	d00b      	beq.n	80148bc <_vfiprintf_r+0xc0>
 80148a4:	465b      	mov	r3, fp
 80148a6:	4622      	mov	r2, r4
 80148a8:	4629      	mov	r1, r5
 80148aa:	4630      	mov	r0, r6
 80148ac:	f7ff ff93 	bl	80147d6 <__sfputs_r>
 80148b0:	3001      	adds	r0, #1
 80148b2:	f000 80aa 	beq.w	8014a0a <_vfiprintf_r+0x20e>
 80148b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80148b8:	445a      	add	r2, fp
 80148ba:	9209      	str	r2, [sp, #36]	; 0x24
 80148bc:	f89a 3000 	ldrb.w	r3, [sl]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 80a2 	beq.w	8014a0a <_vfiprintf_r+0x20e>
 80148c6:	2300      	movs	r3, #0
 80148c8:	f04f 32ff 	mov.w	r2, #4294967295
 80148cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80148d0:	f10a 0a01 	add.w	sl, sl, #1
 80148d4:	9304      	str	r3, [sp, #16]
 80148d6:	9307      	str	r3, [sp, #28]
 80148d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80148dc:	931a      	str	r3, [sp, #104]	; 0x68
 80148de:	4654      	mov	r4, sl
 80148e0:	2205      	movs	r2, #5
 80148e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148e6:	4858      	ldr	r0, [pc, #352]	; (8014a48 <_vfiprintf_r+0x24c>)
 80148e8:	f7eb fcaa 	bl	8000240 <memchr>
 80148ec:	9a04      	ldr	r2, [sp, #16]
 80148ee:	b9d8      	cbnz	r0, 8014928 <_vfiprintf_r+0x12c>
 80148f0:	06d1      	lsls	r1, r2, #27
 80148f2:	bf44      	itt	mi
 80148f4:	2320      	movmi	r3, #32
 80148f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80148fa:	0713      	lsls	r3, r2, #28
 80148fc:	bf44      	itt	mi
 80148fe:	232b      	movmi	r3, #43	; 0x2b
 8014900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014904:	f89a 3000 	ldrb.w	r3, [sl]
 8014908:	2b2a      	cmp	r3, #42	; 0x2a
 801490a:	d015      	beq.n	8014938 <_vfiprintf_r+0x13c>
 801490c:	9a07      	ldr	r2, [sp, #28]
 801490e:	4654      	mov	r4, sl
 8014910:	2000      	movs	r0, #0
 8014912:	f04f 0c0a 	mov.w	ip, #10
 8014916:	4621      	mov	r1, r4
 8014918:	f811 3b01 	ldrb.w	r3, [r1], #1
 801491c:	3b30      	subs	r3, #48	; 0x30
 801491e:	2b09      	cmp	r3, #9
 8014920:	d94e      	bls.n	80149c0 <_vfiprintf_r+0x1c4>
 8014922:	b1b0      	cbz	r0, 8014952 <_vfiprintf_r+0x156>
 8014924:	9207      	str	r2, [sp, #28]
 8014926:	e014      	b.n	8014952 <_vfiprintf_r+0x156>
 8014928:	eba0 0308 	sub.w	r3, r0, r8
 801492c:	fa09 f303 	lsl.w	r3, r9, r3
 8014930:	4313      	orrs	r3, r2
 8014932:	9304      	str	r3, [sp, #16]
 8014934:	46a2      	mov	sl, r4
 8014936:	e7d2      	b.n	80148de <_vfiprintf_r+0xe2>
 8014938:	9b03      	ldr	r3, [sp, #12]
 801493a:	1d19      	adds	r1, r3, #4
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	9103      	str	r1, [sp, #12]
 8014940:	2b00      	cmp	r3, #0
 8014942:	bfbb      	ittet	lt
 8014944:	425b      	neglt	r3, r3
 8014946:	f042 0202 	orrlt.w	r2, r2, #2
 801494a:	9307      	strge	r3, [sp, #28]
 801494c:	9307      	strlt	r3, [sp, #28]
 801494e:	bfb8      	it	lt
 8014950:	9204      	strlt	r2, [sp, #16]
 8014952:	7823      	ldrb	r3, [r4, #0]
 8014954:	2b2e      	cmp	r3, #46	; 0x2e
 8014956:	d10c      	bne.n	8014972 <_vfiprintf_r+0x176>
 8014958:	7863      	ldrb	r3, [r4, #1]
 801495a:	2b2a      	cmp	r3, #42	; 0x2a
 801495c:	d135      	bne.n	80149ca <_vfiprintf_r+0x1ce>
 801495e:	9b03      	ldr	r3, [sp, #12]
 8014960:	1d1a      	adds	r2, r3, #4
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	9203      	str	r2, [sp, #12]
 8014966:	2b00      	cmp	r3, #0
 8014968:	bfb8      	it	lt
 801496a:	f04f 33ff 	movlt.w	r3, #4294967295
 801496e:	3402      	adds	r4, #2
 8014970:	9305      	str	r3, [sp, #20]
 8014972:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014a58 <_vfiprintf_r+0x25c>
 8014976:	7821      	ldrb	r1, [r4, #0]
 8014978:	2203      	movs	r2, #3
 801497a:	4650      	mov	r0, sl
 801497c:	f7eb fc60 	bl	8000240 <memchr>
 8014980:	b140      	cbz	r0, 8014994 <_vfiprintf_r+0x198>
 8014982:	2340      	movs	r3, #64	; 0x40
 8014984:	eba0 000a 	sub.w	r0, r0, sl
 8014988:	fa03 f000 	lsl.w	r0, r3, r0
 801498c:	9b04      	ldr	r3, [sp, #16]
 801498e:	4303      	orrs	r3, r0
 8014990:	3401      	adds	r4, #1
 8014992:	9304      	str	r3, [sp, #16]
 8014994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014998:	482c      	ldr	r0, [pc, #176]	; (8014a4c <_vfiprintf_r+0x250>)
 801499a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801499e:	2206      	movs	r2, #6
 80149a0:	f7eb fc4e 	bl	8000240 <memchr>
 80149a4:	2800      	cmp	r0, #0
 80149a6:	d03f      	beq.n	8014a28 <_vfiprintf_r+0x22c>
 80149a8:	4b29      	ldr	r3, [pc, #164]	; (8014a50 <_vfiprintf_r+0x254>)
 80149aa:	bb1b      	cbnz	r3, 80149f4 <_vfiprintf_r+0x1f8>
 80149ac:	9b03      	ldr	r3, [sp, #12]
 80149ae:	3307      	adds	r3, #7
 80149b0:	f023 0307 	bic.w	r3, r3, #7
 80149b4:	3308      	adds	r3, #8
 80149b6:	9303      	str	r3, [sp, #12]
 80149b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149ba:	443b      	add	r3, r7
 80149bc:	9309      	str	r3, [sp, #36]	; 0x24
 80149be:	e767      	b.n	8014890 <_vfiprintf_r+0x94>
 80149c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80149c4:	460c      	mov	r4, r1
 80149c6:	2001      	movs	r0, #1
 80149c8:	e7a5      	b.n	8014916 <_vfiprintf_r+0x11a>
 80149ca:	2300      	movs	r3, #0
 80149cc:	3401      	adds	r4, #1
 80149ce:	9305      	str	r3, [sp, #20]
 80149d0:	4619      	mov	r1, r3
 80149d2:	f04f 0c0a 	mov.w	ip, #10
 80149d6:	4620      	mov	r0, r4
 80149d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80149dc:	3a30      	subs	r2, #48	; 0x30
 80149de:	2a09      	cmp	r2, #9
 80149e0:	d903      	bls.n	80149ea <_vfiprintf_r+0x1ee>
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d0c5      	beq.n	8014972 <_vfiprintf_r+0x176>
 80149e6:	9105      	str	r1, [sp, #20]
 80149e8:	e7c3      	b.n	8014972 <_vfiprintf_r+0x176>
 80149ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80149ee:	4604      	mov	r4, r0
 80149f0:	2301      	movs	r3, #1
 80149f2:	e7f0      	b.n	80149d6 <_vfiprintf_r+0x1da>
 80149f4:	ab03      	add	r3, sp, #12
 80149f6:	9300      	str	r3, [sp, #0]
 80149f8:	462a      	mov	r2, r5
 80149fa:	4b16      	ldr	r3, [pc, #88]	; (8014a54 <_vfiprintf_r+0x258>)
 80149fc:	a904      	add	r1, sp, #16
 80149fe:	4630      	mov	r0, r6
 8014a00:	f3af 8000 	nop.w
 8014a04:	4607      	mov	r7, r0
 8014a06:	1c78      	adds	r0, r7, #1
 8014a08:	d1d6      	bne.n	80149b8 <_vfiprintf_r+0x1bc>
 8014a0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a0c:	07d9      	lsls	r1, r3, #31
 8014a0e:	d405      	bmi.n	8014a1c <_vfiprintf_r+0x220>
 8014a10:	89ab      	ldrh	r3, [r5, #12]
 8014a12:	059a      	lsls	r2, r3, #22
 8014a14:	d402      	bmi.n	8014a1c <_vfiprintf_r+0x220>
 8014a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a18:	f7ff fdaf 	bl	801457a <__retarget_lock_release_recursive>
 8014a1c:	89ab      	ldrh	r3, [r5, #12]
 8014a1e:	065b      	lsls	r3, r3, #25
 8014a20:	f53f af12 	bmi.w	8014848 <_vfiprintf_r+0x4c>
 8014a24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a26:	e711      	b.n	801484c <_vfiprintf_r+0x50>
 8014a28:	ab03      	add	r3, sp, #12
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	462a      	mov	r2, r5
 8014a2e:	4b09      	ldr	r3, [pc, #36]	; (8014a54 <_vfiprintf_r+0x258>)
 8014a30:	a904      	add	r1, sp, #16
 8014a32:	4630      	mov	r0, r6
 8014a34:	f000 f880 	bl	8014b38 <_printf_i>
 8014a38:	e7e4      	b.n	8014a04 <_vfiprintf_r+0x208>
 8014a3a:	bf00      	nop
 8014a3c:	08017ec8 	.word	0x08017ec8
 8014a40:	08017ee8 	.word	0x08017ee8
 8014a44:	08017ea8 	.word	0x08017ea8
 8014a48:	08017f08 	.word	0x08017f08
 8014a4c:	08017f12 	.word	0x08017f12
 8014a50:	00000000 	.word	0x00000000
 8014a54:	080147d7 	.word	0x080147d7
 8014a58:	08017f0e 	.word	0x08017f0e

08014a5c <_printf_common>:
 8014a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a60:	4616      	mov	r6, r2
 8014a62:	4699      	mov	r9, r3
 8014a64:	688a      	ldr	r2, [r1, #8]
 8014a66:	690b      	ldr	r3, [r1, #16]
 8014a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014a6c:	4293      	cmp	r3, r2
 8014a6e:	bfb8      	it	lt
 8014a70:	4613      	movlt	r3, r2
 8014a72:	6033      	str	r3, [r6, #0]
 8014a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014a78:	4607      	mov	r7, r0
 8014a7a:	460c      	mov	r4, r1
 8014a7c:	b10a      	cbz	r2, 8014a82 <_printf_common+0x26>
 8014a7e:	3301      	adds	r3, #1
 8014a80:	6033      	str	r3, [r6, #0]
 8014a82:	6823      	ldr	r3, [r4, #0]
 8014a84:	0699      	lsls	r1, r3, #26
 8014a86:	bf42      	ittt	mi
 8014a88:	6833      	ldrmi	r3, [r6, #0]
 8014a8a:	3302      	addmi	r3, #2
 8014a8c:	6033      	strmi	r3, [r6, #0]
 8014a8e:	6825      	ldr	r5, [r4, #0]
 8014a90:	f015 0506 	ands.w	r5, r5, #6
 8014a94:	d106      	bne.n	8014aa4 <_printf_common+0x48>
 8014a96:	f104 0a19 	add.w	sl, r4, #25
 8014a9a:	68e3      	ldr	r3, [r4, #12]
 8014a9c:	6832      	ldr	r2, [r6, #0]
 8014a9e:	1a9b      	subs	r3, r3, r2
 8014aa0:	42ab      	cmp	r3, r5
 8014aa2:	dc26      	bgt.n	8014af2 <_printf_common+0x96>
 8014aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014aa8:	1e13      	subs	r3, r2, #0
 8014aaa:	6822      	ldr	r2, [r4, #0]
 8014aac:	bf18      	it	ne
 8014aae:	2301      	movne	r3, #1
 8014ab0:	0692      	lsls	r2, r2, #26
 8014ab2:	d42b      	bmi.n	8014b0c <_printf_common+0xb0>
 8014ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ab8:	4649      	mov	r1, r9
 8014aba:	4638      	mov	r0, r7
 8014abc:	47c0      	blx	r8
 8014abe:	3001      	adds	r0, #1
 8014ac0:	d01e      	beq.n	8014b00 <_printf_common+0xa4>
 8014ac2:	6823      	ldr	r3, [r4, #0]
 8014ac4:	68e5      	ldr	r5, [r4, #12]
 8014ac6:	6832      	ldr	r2, [r6, #0]
 8014ac8:	f003 0306 	and.w	r3, r3, #6
 8014acc:	2b04      	cmp	r3, #4
 8014ace:	bf08      	it	eq
 8014ad0:	1aad      	subeq	r5, r5, r2
 8014ad2:	68a3      	ldr	r3, [r4, #8]
 8014ad4:	6922      	ldr	r2, [r4, #16]
 8014ad6:	bf0c      	ite	eq
 8014ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014adc:	2500      	movne	r5, #0
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	bfc4      	itt	gt
 8014ae2:	1a9b      	subgt	r3, r3, r2
 8014ae4:	18ed      	addgt	r5, r5, r3
 8014ae6:	2600      	movs	r6, #0
 8014ae8:	341a      	adds	r4, #26
 8014aea:	42b5      	cmp	r5, r6
 8014aec:	d11a      	bne.n	8014b24 <_printf_common+0xc8>
 8014aee:	2000      	movs	r0, #0
 8014af0:	e008      	b.n	8014b04 <_printf_common+0xa8>
 8014af2:	2301      	movs	r3, #1
 8014af4:	4652      	mov	r2, sl
 8014af6:	4649      	mov	r1, r9
 8014af8:	4638      	mov	r0, r7
 8014afa:	47c0      	blx	r8
 8014afc:	3001      	adds	r0, #1
 8014afe:	d103      	bne.n	8014b08 <_printf_common+0xac>
 8014b00:	f04f 30ff 	mov.w	r0, #4294967295
 8014b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b08:	3501      	adds	r5, #1
 8014b0a:	e7c6      	b.n	8014a9a <_printf_common+0x3e>
 8014b0c:	18e1      	adds	r1, r4, r3
 8014b0e:	1c5a      	adds	r2, r3, #1
 8014b10:	2030      	movs	r0, #48	; 0x30
 8014b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b16:	4422      	add	r2, r4
 8014b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014b20:	3302      	adds	r3, #2
 8014b22:	e7c7      	b.n	8014ab4 <_printf_common+0x58>
 8014b24:	2301      	movs	r3, #1
 8014b26:	4622      	mov	r2, r4
 8014b28:	4649      	mov	r1, r9
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	47c0      	blx	r8
 8014b2e:	3001      	adds	r0, #1
 8014b30:	d0e6      	beq.n	8014b00 <_printf_common+0xa4>
 8014b32:	3601      	adds	r6, #1
 8014b34:	e7d9      	b.n	8014aea <_printf_common+0x8e>
	...

08014b38 <_printf_i>:
 8014b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b3c:	460c      	mov	r4, r1
 8014b3e:	4691      	mov	r9, r2
 8014b40:	7e27      	ldrb	r7, [r4, #24]
 8014b42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014b44:	2f78      	cmp	r7, #120	; 0x78
 8014b46:	4680      	mov	r8, r0
 8014b48:	469a      	mov	sl, r3
 8014b4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b4e:	d807      	bhi.n	8014b60 <_printf_i+0x28>
 8014b50:	2f62      	cmp	r7, #98	; 0x62
 8014b52:	d80a      	bhi.n	8014b6a <_printf_i+0x32>
 8014b54:	2f00      	cmp	r7, #0
 8014b56:	f000 80d8 	beq.w	8014d0a <_printf_i+0x1d2>
 8014b5a:	2f58      	cmp	r7, #88	; 0x58
 8014b5c:	f000 80a3 	beq.w	8014ca6 <_printf_i+0x16e>
 8014b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014b68:	e03a      	b.n	8014be0 <_printf_i+0xa8>
 8014b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014b6e:	2b15      	cmp	r3, #21
 8014b70:	d8f6      	bhi.n	8014b60 <_printf_i+0x28>
 8014b72:	a001      	add	r0, pc, #4	; (adr r0, 8014b78 <_printf_i+0x40>)
 8014b74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014b78:	08014bd1 	.word	0x08014bd1
 8014b7c:	08014be5 	.word	0x08014be5
 8014b80:	08014b61 	.word	0x08014b61
 8014b84:	08014b61 	.word	0x08014b61
 8014b88:	08014b61 	.word	0x08014b61
 8014b8c:	08014b61 	.word	0x08014b61
 8014b90:	08014be5 	.word	0x08014be5
 8014b94:	08014b61 	.word	0x08014b61
 8014b98:	08014b61 	.word	0x08014b61
 8014b9c:	08014b61 	.word	0x08014b61
 8014ba0:	08014b61 	.word	0x08014b61
 8014ba4:	08014cf1 	.word	0x08014cf1
 8014ba8:	08014c15 	.word	0x08014c15
 8014bac:	08014cd3 	.word	0x08014cd3
 8014bb0:	08014b61 	.word	0x08014b61
 8014bb4:	08014b61 	.word	0x08014b61
 8014bb8:	08014d13 	.word	0x08014d13
 8014bbc:	08014b61 	.word	0x08014b61
 8014bc0:	08014c15 	.word	0x08014c15
 8014bc4:	08014b61 	.word	0x08014b61
 8014bc8:	08014b61 	.word	0x08014b61
 8014bcc:	08014cdb 	.word	0x08014cdb
 8014bd0:	680b      	ldr	r3, [r1, #0]
 8014bd2:	1d1a      	adds	r2, r3, #4
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	600a      	str	r2, [r1, #0]
 8014bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014be0:	2301      	movs	r3, #1
 8014be2:	e0a3      	b.n	8014d2c <_printf_i+0x1f4>
 8014be4:	6825      	ldr	r5, [r4, #0]
 8014be6:	6808      	ldr	r0, [r1, #0]
 8014be8:	062e      	lsls	r6, r5, #24
 8014bea:	f100 0304 	add.w	r3, r0, #4
 8014bee:	d50a      	bpl.n	8014c06 <_printf_i+0xce>
 8014bf0:	6805      	ldr	r5, [r0, #0]
 8014bf2:	600b      	str	r3, [r1, #0]
 8014bf4:	2d00      	cmp	r5, #0
 8014bf6:	da03      	bge.n	8014c00 <_printf_i+0xc8>
 8014bf8:	232d      	movs	r3, #45	; 0x2d
 8014bfa:	426d      	negs	r5, r5
 8014bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c00:	485e      	ldr	r0, [pc, #376]	; (8014d7c <_printf_i+0x244>)
 8014c02:	230a      	movs	r3, #10
 8014c04:	e019      	b.n	8014c3a <_printf_i+0x102>
 8014c06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014c0a:	6805      	ldr	r5, [r0, #0]
 8014c0c:	600b      	str	r3, [r1, #0]
 8014c0e:	bf18      	it	ne
 8014c10:	b22d      	sxthne	r5, r5
 8014c12:	e7ef      	b.n	8014bf4 <_printf_i+0xbc>
 8014c14:	680b      	ldr	r3, [r1, #0]
 8014c16:	6825      	ldr	r5, [r4, #0]
 8014c18:	1d18      	adds	r0, r3, #4
 8014c1a:	6008      	str	r0, [r1, #0]
 8014c1c:	0628      	lsls	r0, r5, #24
 8014c1e:	d501      	bpl.n	8014c24 <_printf_i+0xec>
 8014c20:	681d      	ldr	r5, [r3, #0]
 8014c22:	e002      	b.n	8014c2a <_printf_i+0xf2>
 8014c24:	0669      	lsls	r1, r5, #25
 8014c26:	d5fb      	bpl.n	8014c20 <_printf_i+0xe8>
 8014c28:	881d      	ldrh	r5, [r3, #0]
 8014c2a:	4854      	ldr	r0, [pc, #336]	; (8014d7c <_printf_i+0x244>)
 8014c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8014c2e:	bf0c      	ite	eq
 8014c30:	2308      	moveq	r3, #8
 8014c32:	230a      	movne	r3, #10
 8014c34:	2100      	movs	r1, #0
 8014c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014c3a:	6866      	ldr	r6, [r4, #4]
 8014c3c:	60a6      	str	r6, [r4, #8]
 8014c3e:	2e00      	cmp	r6, #0
 8014c40:	bfa2      	ittt	ge
 8014c42:	6821      	ldrge	r1, [r4, #0]
 8014c44:	f021 0104 	bicge.w	r1, r1, #4
 8014c48:	6021      	strge	r1, [r4, #0]
 8014c4a:	b90d      	cbnz	r5, 8014c50 <_printf_i+0x118>
 8014c4c:	2e00      	cmp	r6, #0
 8014c4e:	d04d      	beq.n	8014cec <_printf_i+0x1b4>
 8014c50:	4616      	mov	r6, r2
 8014c52:	fbb5 f1f3 	udiv	r1, r5, r3
 8014c56:	fb03 5711 	mls	r7, r3, r1, r5
 8014c5a:	5dc7      	ldrb	r7, [r0, r7]
 8014c5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014c60:	462f      	mov	r7, r5
 8014c62:	42bb      	cmp	r3, r7
 8014c64:	460d      	mov	r5, r1
 8014c66:	d9f4      	bls.n	8014c52 <_printf_i+0x11a>
 8014c68:	2b08      	cmp	r3, #8
 8014c6a:	d10b      	bne.n	8014c84 <_printf_i+0x14c>
 8014c6c:	6823      	ldr	r3, [r4, #0]
 8014c6e:	07df      	lsls	r7, r3, #31
 8014c70:	d508      	bpl.n	8014c84 <_printf_i+0x14c>
 8014c72:	6923      	ldr	r3, [r4, #16]
 8014c74:	6861      	ldr	r1, [r4, #4]
 8014c76:	4299      	cmp	r1, r3
 8014c78:	bfde      	ittt	le
 8014c7a:	2330      	movle	r3, #48	; 0x30
 8014c7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014c80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014c84:	1b92      	subs	r2, r2, r6
 8014c86:	6122      	str	r2, [r4, #16]
 8014c88:	f8cd a000 	str.w	sl, [sp]
 8014c8c:	464b      	mov	r3, r9
 8014c8e:	aa03      	add	r2, sp, #12
 8014c90:	4621      	mov	r1, r4
 8014c92:	4640      	mov	r0, r8
 8014c94:	f7ff fee2 	bl	8014a5c <_printf_common>
 8014c98:	3001      	adds	r0, #1
 8014c9a:	d14c      	bne.n	8014d36 <_printf_i+0x1fe>
 8014c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014ca0:	b004      	add	sp, #16
 8014ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ca6:	4835      	ldr	r0, [pc, #212]	; (8014d7c <_printf_i+0x244>)
 8014ca8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	680e      	ldr	r6, [r1, #0]
 8014cb0:	061f      	lsls	r7, r3, #24
 8014cb2:	f856 5b04 	ldr.w	r5, [r6], #4
 8014cb6:	600e      	str	r6, [r1, #0]
 8014cb8:	d514      	bpl.n	8014ce4 <_printf_i+0x1ac>
 8014cba:	07d9      	lsls	r1, r3, #31
 8014cbc:	bf44      	itt	mi
 8014cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8014cc2:	6023      	strmi	r3, [r4, #0]
 8014cc4:	b91d      	cbnz	r5, 8014cce <_printf_i+0x196>
 8014cc6:	6823      	ldr	r3, [r4, #0]
 8014cc8:	f023 0320 	bic.w	r3, r3, #32
 8014ccc:	6023      	str	r3, [r4, #0]
 8014cce:	2310      	movs	r3, #16
 8014cd0:	e7b0      	b.n	8014c34 <_printf_i+0xfc>
 8014cd2:	6823      	ldr	r3, [r4, #0]
 8014cd4:	f043 0320 	orr.w	r3, r3, #32
 8014cd8:	6023      	str	r3, [r4, #0]
 8014cda:	2378      	movs	r3, #120	; 0x78
 8014cdc:	4828      	ldr	r0, [pc, #160]	; (8014d80 <_printf_i+0x248>)
 8014cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014ce2:	e7e3      	b.n	8014cac <_printf_i+0x174>
 8014ce4:	065e      	lsls	r6, r3, #25
 8014ce6:	bf48      	it	mi
 8014ce8:	b2ad      	uxthmi	r5, r5
 8014cea:	e7e6      	b.n	8014cba <_printf_i+0x182>
 8014cec:	4616      	mov	r6, r2
 8014cee:	e7bb      	b.n	8014c68 <_printf_i+0x130>
 8014cf0:	680b      	ldr	r3, [r1, #0]
 8014cf2:	6826      	ldr	r6, [r4, #0]
 8014cf4:	6960      	ldr	r0, [r4, #20]
 8014cf6:	1d1d      	adds	r5, r3, #4
 8014cf8:	600d      	str	r5, [r1, #0]
 8014cfa:	0635      	lsls	r5, r6, #24
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	d501      	bpl.n	8014d04 <_printf_i+0x1cc>
 8014d00:	6018      	str	r0, [r3, #0]
 8014d02:	e002      	b.n	8014d0a <_printf_i+0x1d2>
 8014d04:	0671      	lsls	r1, r6, #25
 8014d06:	d5fb      	bpl.n	8014d00 <_printf_i+0x1c8>
 8014d08:	8018      	strh	r0, [r3, #0]
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	6123      	str	r3, [r4, #16]
 8014d0e:	4616      	mov	r6, r2
 8014d10:	e7ba      	b.n	8014c88 <_printf_i+0x150>
 8014d12:	680b      	ldr	r3, [r1, #0]
 8014d14:	1d1a      	adds	r2, r3, #4
 8014d16:	600a      	str	r2, [r1, #0]
 8014d18:	681e      	ldr	r6, [r3, #0]
 8014d1a:	6862      	ldr	r2, [r4, #4]
 8014d1c:	2100      	movs	r1, #0
 8014d1e:	4630      	mov	r0, r6
 8014d20:	f7eb fa8e 	bl	8000240 <memchr>
 8014d24:	b108      	cbz	r0, 8014d2a <_printf_i+0x1f2>
 8014d26:	1b80      	subs	r0, r0, r6
 8014d28:	6060      	str	r0, [r4, #4]
 8014d2a:	6863      	ldr	r3, [r4, #4]
 8014d2c:	6123      	str	r3, [r4, #16]
 8014d2e:	2300      	movs	r3, #0
 8014d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d34:	e7a8      	b.n	8014c88 <_printf_i+0x150>
 8014d36:	6923      	ldr	r3, [r4, #16]
 8014d38:	4632      	mov	r2, r6
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	4640      	mov	r0, r8
 8014d3e:	47d0      	blx	sl
 8014d40:	3001      	adds	r0, #1
 8014d42:	d0ab      	beq.n	8014c9c <_printf_i+0x164>
 8014d44:	6823      	ldr	r3, [r4, #0]
 8014d46:	079b      	lsls	r3, r3, #30
 8014d48:	d413      	bmi.n	8014d72 <_printf_i+0x23a>
 8014d4a:	68e0      	ldr	r0, [r4, #12]
 8014d4c:	9b03      	ldr	r3, [sp, #12]
 8014d4e:	4298      	cmp	r0, r3
 8014d50:	bfb8      	it	lt
 8014d52:	4618      	movlt	r0, r3
 8014d54:	e7a4      	b.n	8014ca0 <_printf_i+0x168>
 8014d56:	2301      	movs	r3, #1
 8014d58:	4632      	mov	r2, r6
 8014d5a:	4649      	mov	r1, r9
 8014d5c:	4640      	mov	r0, r8
 8014d5e:	47d0      	blx	sl
 8014d60:	3001      	adds	r0, #1
 8014d62:	d09b      	beq.n	8014c9c <_printf_i+0x164>
 8014d64:	3501      	adds	r5, #1
 8014d66:	68e3      	ldr	r3, [r4, #12]
 8014d68:	9903      	ldr	r1, [sp, #12]
 8014d6a:	1a5b      	subs	r3, r3, r1
 8014d6c:	42ab      	cmp	r3, r5
 8014d6e:	dcf2      	bgt.n	8014d56 <_printf_i+0x21e>
 8014d70:	e7eb      	b.n	8014d4a <_printf_i+0x212>
 8014d72:	2500      	movs	r5, #0
 8014d74:	f104 0619 	add.w	r6, r4, #25
 8014d78:	e7f5      	b.n	8014d66 <_printf_i+0x22e>
 8014d7a:	bf00      	nop
 8014d7c:	08017f19 	.word	0x08017f19
 8014d80:	08017f2a 	.word	0x08017f2a

08014d84 <_sbrk_r>:
 8014d84:	b538      	push	{r3, r4, r5, lr}
 8014d86:	4d06      	ldr	r5, [pc, #24]	; (8014da0 <_sbrk_r+0x1c>)
 8014d88:	2300      	movs	r3, #0
 8014d8a:	4604      	mov	r4, r0
 8014d8c:	4608      	mov	r0, r1
 8014d8e:	602b      	str	r3, [r5, #0]
 8014d90:	f7ec f892 	bl	8000eb8 <_sbrk>
 8014d94:	1c43      	adds	r3, r0, #1
 8014d96:	d102      	bne.n	8014d9e <_sbrk_r+0x1a>
 8014d98:	682b      	ldr	r3, [r5, #0]
 8014d9a:	b103      	cbz	r3, 8014d9e <_sbrk_r+0x1a>
 8014d9c:	6023      	str	r3, [r4, #0]
 8014d9e:	bd38      	pop	{r3, r4, r5, pc}
 8014da0:	2000b960 	.word	0x2000b960

08014da4 <__sread>:
 8014da4:	b510      	push	{r4, lr}
 8014da6:	460c      	mov	r4, r1
 8014da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dac:	f000 f968 	bl	8015080 <_read_r>
 8014db0:	2800      	cmp	r0, #0
 8014db2:	bfab      	itete	ge
 8014db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014db6:	89a3      	ldrhlt	r3, [r4, #12]
 8014db8:	181b      	addge	r3, r3, r0
 8014dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014dbe:	bfac      	ite	ge
 8014dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014dc2:	81a3      	strhlt	r3, [r4, #12]
 8014dc4:	bd10      	pop	{r4, pc}

08014dc6 <__swrite>:
 8014dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dca:	461f      	mov	r7, r3
 8014dcc:	898b      	ldrh	r3, [r1, #12]
 8014dce:	05db      	lsls	r3, r3, #23
 8014dd0:	4605      	mov	r5, r0
 8014dd2:	460c      	mov	r4, r1
 8014dd4:	4616      	mov	r6, r2
 8014dd6:	d505      	bpl.n	8014de4 <__swrite+0x1e>
 8014dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ddc:	2302      	movs	r3, #2
 8014dde:	2200      	movs	r2, #0
 8014de0:	f000 f930 	bl	8015044 <_lseek_r>
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014dee:	81a3      	strh	r3, [r4, #12]
 8014df0:	4632      	mov	r2, r6
 8014df2:	463b      	mov	r3, r7
 8014df4:	4628      	mov	r0, r5
 8014df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014dfa:	f000 b869 	b.w	8014ed0 <_write_r>

08014dfe <__sseek>:
 8014dfe:	b510      	push	{r4, lr}
 8014e00:	460c      	mov	r4, r1
 8014e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e06:	f000 f91d 	bl	8015044 <_lseek_r>
 8014e0a:	1c43      	adds	r3, r0, #1
 8014e0c:	89a3      	ldrh	r3, [r4, #12]
 8014e0e:	bf15      	itete	ne
 8014e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8014e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014e1a:	81a3      	strheq	r3, [r4, #12]
 8014e1c:	bf18      	it	ne
 8014e1e:	81a3      	strhne	r3, [r4, #12]
 8014e20:	bd10      	pop	{r4, pc}

08014e22 <__sclose>:
 8014e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e26:	f000 b8db 	b.w	8014fe0 <_close_r>
	...

08014e2c <__swbuf_r>:
 8014e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e2e:	460e      	mov	r6, r1
 8014e30:	4614      	mov	r4, r2
 8014e32:	4605      	mov	r5, r0
 8014e34:	b118      	cbz	r0, 8014e3e <__swbuf_r+0x12>
 8014e36:	6983      	ldr	r3, [r0, #24]
 8014e38:	b90b      	cbnz	r3, 8014e3e <__swbuf_r+0x12>
 8014e3a:	f7ff faed 	bl	8014418 <__sinit>
 8014e3e:	4b21      	ldr	r3, [pc, #132]	; (8014ec4 <__swbuf_r+0x98>)
 8014e40:	429c      	cmp	r4, r3
 8014e42:	d12b      	bne.n	8014e9c <__swbuf_r+0x70>
 8014e44:	686c      	ldr	r4, [r5, #4]
 8014e46:	69a3      	ldr	r3, [r4, #24]
 8014e48:	60a3      	str	r3, [r4, #8]
 8014e4a:	89a3      	ldrh	r3, [r4, #12]
 8014e4c:	071a      	lsls	r2, r3, #28
 8014e4e:	d52f      	bpl.n	8014eb0 <__swbuf_r+0x84>
 8014e50:	6923      	ldr	r3, [r4, #16]
 8014e52:	b36b      	cbz	r3, 8014eb0 <__swbuf_r+0x84>
 8014e54:	6923      	ldr	r3, [r4, #16]
 8014e56:	6820      	ldr	r0, [r4, #0]
 8014e58:	1ac0      	subs	r0, r0, r3
 8014e5a:	6963      	ldr	r3, [r4, #20]
 8014e5c:	b2f6      	uxtb	r6, r6
 8014e5e:	4283      	cmp	r3, r0
 8014e60:	4637      	mov	r7, r6
 8014e62:	dc04      	bgt.n	8014e6e <__swbuf_r+0x42>
 8014e64:	4621      	mov	r1, r4
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7ff fa42 	bl	80142f0 <_fflush_r>
 8014e6c:	bb30      	cbnz	r0, 8014ebc <__swbuf_r+0x90>
 8014e6e:	68a3      	ldr	r3, [r4, #8]
 8014e70:	3b01      	subs	r3, #1
 8014e72:	60a3      	str	r3, [r4, #8]
 8014e74:	6823      	ldr	r3, [r4, #0]
 8014e76:	1c5a      	adds	r2, r3, #1
 8014e78:	6022      	str	r2, [r4, #0]
 8014e7a:	701e      	strb	r6, [r3, #0]
 8014e7c:	6963      	ldr	r3, [r4, #20]
 8014e7e:	3001      	adds	r0, #1
 8014e80:	4283      	cmp	r3, r0
 8014e82:	d004      	beq.n	8014e8e <__swbuf_r+0x62>
 8014e84:	89a3      	ldrh	r3, [r4, #12]
 8014e86:	07db      	lsls	r3, r3, #31
 8014e88:	d506      	bpl.n	8014e98 <__swbuf_r+0x6c>
 8014e8a:	2e0a      	cmp	r6, #10
 8014e8c:	d104      	bne.n	8014e98 <__swbuf_r+0x6c>
 8014e8e:	4621      	mov	r1, r4
 8014e90:	4628      	mov	r0, r5
 8014e92:	f7ff fa2d 	bl	80142f0 <_fflush_r>
 8014e96:	b988      	cbnz	r0, 8014ebc <__swbuf_r+0x90>
 8014e98:	4638      	mov	r0, r7
 8014e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e9c:	4b0a      	ldr	r3, [pc, #40]	; (8014ec8 <__swbuf_r+0x9c>)
 8014e9e:	429c      	cmp	r4, r3
 8014ea0:	d101      	bne.n	8014ea6 <__swbuf_r+0x7a>
 8014ea2:	68ac      	ldr	r4, [r5, #8]
 8014ea4:	e7cf      	b.n	8014e46 <__swbuf_r+0x1a>
 8014ea6:	4b09      	ldr	r3, [pc, #36]	; (8014ecc <__swbuf_r+0xa0>)
 8014ea8:	429c      	cmp	r4, r3
 8014eaa:	bf08      	it	eq
 8014eac:	68ec      	ldreq	r4, [r5, #12]
 8014eae:	e7ca      	b.n	8014e46 <__swbuf_r+0x1a>
 8014eb0:	4621      	mov	r1, r4
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f000 f81e 	bl	8014ef4 <__swsetup_r>
 8014eb8:	2800      	cmp	r0, #0
 8014eba:	d0cb      	beq.n	8014e54 <__swbuf_r+0x28>
 8014ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8014ec0:	e7ea      	b.n	8014e98 <__swbuf_r+0x6c>
 8014ec2:	bf00      	nop
 8014ec4:	08017ec8 	.word	0x08017ec8
 8014ec8:	08017ee8 	.word	0x08017ee8
 8014ecc:	08017ea8 	.word	0x08017ea8

08014ed0 <_write_r>:
 8014ed0:	b538      	push	{r3, r4, r5, lr}
 8014ed2:	4d07      	ldr	r5, [pc, #28]	; (8014ef0 <_write_r+0x20>)
 8014ed4:	4604      	mov	r4, r0
 8014ed6:	4608      	mov	r0, r1
 8014ed8:	4611      	mov	r1, r2
 8014eda:	2200      	movs	r2, #0
 8014edc:	602a      	str	r2, [r5, #0]
 8014ede:	461a      	mov	r2, r3
 8014ee0:	f7eb fe00 	bl	8000ae4 <_write>
 8014ee4:	1c43      	adds	r3, r0, #1
 8014ee6:	d102      	bne.n	8014eee <_write_r+0x1e>
 8014ee8:	682b      	ldr	r3, [r5, #0]
 8014eea:	b103      	cbz	r3, 8014eee <_write_r+0x1e>
 8014eec:	6023      	str	r3, [r4, #0]
 8014eee:	bd38      	pop	{r3, r4, r5, pc}
 8014ef0:	2000b960 	.word	0x2000b960

08014ef4 <__swsetup_r>:
 8014ef4:	4b32      	ldr	r3, [pc, #200]	; (8014fc0 <__swsetup_r+0xcc>)
 8014ef6:	b570      	push	{r4, r5, r6, lr}
 8014ef8:	681d      	ldr	r5, [r3, #0]
 8014efa:	4606      	mov	r6, r0
 8014efc:	460c      	mov	r4, r1
 8014efe:	b125      	cbz	r5, 8014f0a <__swsetup_r+0x16>
 8014f00:	69ab      	ldr	r3, [r5, #24]
 8014f02:	b913      	cbnz	r3, 8014f0a <__swsetup_r+0x16>
 8014f04:	4628      	mov	r0, r5
 8014f06:	f7ff fa87 	bl	8014418 <__sinit>
 8014f0a:	4b2e      	ldr	r3, [pc, #184]	; (8014fc4 <__swsetup_r+0xd0>)
 8014f0c:	429c      	cmp	r4, r3
 8014f0e:	d10f      	bne.n	8014f30 <__swsetup_r+0x3c>
 8014f10:	686c      	ldr	r4, [r5, #4]
 8014f12:	89a3      	ldrh	r3, [r4, #12]
 8014f14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f18:	0719      	lsls	r1, r3, #28
 8014f1a:	d42c      	bmi.n	8014f76 <__swsetup_r+0x82>
 8014f1c:	06dd      	lsls	r5, r3, #27
 8014f1e:	d411      	bmi.n	8014f44 <__swsetup_r+0x50>
 8014f20:	2309      	movs	r3, #9
 8014f22:	6033      	str	r3, [r6, #0]
 8014f24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014f28:	81a3      	strh	r3, [r4, #12]
 8014f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014f2e:	e03e      	b.n	8014fae <__swsetup_r+0xba>
 8014f30:	4b25      	ldr	r3, [pc, #148]	; (8014fc8 <__swsetup_r+0xd4>)
 8014f32:	429c      	cmp	r4, r3
 8014f34:	d101      	bne.n	8014f3a <__swsetup_r+0x46>
 8014f36:	68ac      	ldr	r4, [r5, #8]
 8014f38:	e7eb      	b.n	8014f12 <__swsetup_r+0x1e>
 8014f3a:	4b24      	ldr	r3, [pc, #144]	; (8014fcc <__swsetup_r+0xd8>)
 8014f3c:	429c      	cmp	r4, r3
 8014f3e:	bf08      	it	eq
 8014f40:	68ec      	ldreq	r4, [r5, #12]
 8014f42:	e7e6      	b.n	8014f12 <__swsetup_r+0x1e>
 8014f44:	0758      	lsls	r0, r3, #29
 8014f46:	d512      	bpl.n	8014f6e <__swsetup_r+0x7a>
 8014f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f4a:	b141      	cbz	r1, 8014f5e <__swsetup_r+0x6a>
 8014f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f50:	4299      	cmp	r1, r3
 8014f52:	d002      	beq.n	8014f5a <__swsetup_r+0x66>
 8014f54:	4630      	mov	r0, r6
 8014f56:	f7ff fb7d 	bl	8014654 <_free_r>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	6363      	str	r3, [r4, #52]	; 0x34
 8014f5e:	89a3      	ldrh	r3, [r4, #12]
 8014f60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014f64:	81a3      	strh	r3, [r4, #12]
 8014f66:	2300      	movs	r3, #0
 8014f68:	6063      	str	r3, [r4, #4]
 8014f6a:	6923      	ldr	r3, [r4, #16]
 8014f6c:	6023      	str	r3, [r4, #0]
 8014f6e:	89a3      	ldrh	r3, [r4, #12]
 8014f70:	f043 0308 	orr.w	r3, r3, #8
 8014f74:	81a3      	strh	r3, [r4, #12]
 8014f76:	6923      	ldr	r3, [r4, #16]
 8014f78:	b94b      	cbnz	r3, 8014f8e <__swsetup_r+0x9a>
 8014f7a:	89a3      	ldrh	r3, [r4, #12]
 8014f7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f84:	d003      	beq.n	8014f8e <__swsetup_r+0x9a>
 8014f86:	4621      	mov	r1, r4
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f7ff fb1b 	bl	80145c4 <__smakebuf_r>
 8014f8e:	89a0      	ldrh	r0, [r4, #12]
 8014f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f94:	f010 0301 	ands.w	r3, r0, #1
 8014f98:	d00a      	beq.n	8014fb0 <__swsetup_r+0xbc>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	60a3      	str	r3, [r4, #8]
 8014f9e:	6963      	ldr	r3, [r4, #20]
 8014fa0:	425b      	negs	r3, r3
 8014fa2:	61a3      	str	r3, [r4, #24]
 8014fa4:	6923      	ldr	r3, [r4, #16]
 8014fa6:	b943      	cbnz	r3, 8014fba <__swsetup_r+0xc6>
 8014fa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014fac:	d1ba      	bne.n	8014f24 <__swsetup_r+0x30>
 8014fae:	bd70      	pop	{r4, r5, r6, pc}
 8014fb0:	0781      	lsls	r1, r0, #30
 8014fb2:	bf58      	it	pl
 8014fb4:	6963      	ldrpl	r3, [r4, #20]
 8014fb6:	60a3      	str	r3, [r4, #8]
 8014fb8:	e7f4      	b.n	8014fa4 <__swsetup_r+0xb0>
 8014fba:	2000      	movs	r0, #0
 8014fbc:	e7f7      	b.n	8014fae <__swsetup_r+0xba>
 8014fbe:	bf00      	nop
 8014fc0:	2000001c 	.word	0x2000001c
 8014fc4:	08017ec8 	.word	0x08017ec8
 8014fc8:	08017ee8 	.word	0x08017ee8
 8014fcc:	08017ea8 	.word	0x08017ea8

08014fd0 <abort>:
 8014fd0:	b508      	push	{r3, lr}
 8014fd2:	2006      	movs	r0, #6
 8014fd4:	f000 f88e 	bl	80150f4 <raise>
 8014fd8:	2001      	movs	r0, #1
 8014fda:	f000 f8b7 	bl	801514c <_exit>
	...

08014fe0 <_close_r>:
 8014fe0:	b538      	push	{r3, r4, r5, lr}
 8014fe2:	4d06      	ldr	r5, [pc, #24]	; (8014ffc <_close_r+0x1c>)
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	4608      	mov	r0, r1
 8014fea:	602b      	str	r3, [r5, #0]
 8014fec:	f7eb fda6 	bl	8000b3c <_close>
 8014ff0:	1c43      	adds	r3, r0, #1
 8014ff2:	d102      	bne.n	8014ffa <_close_r+0x1a>
 8014ff4:	682b      	ldr	r3, [r5, #0]
 8014ff6:	b103      	cbz	r3, 8014ffa <_close_r+0x1a>
 8014ff8:	6023      	str	r3, [r4, #0]
 8014ffa:	bd38      	pop	{r3, r4, r5, pc}
 8014ffc:	2000b960 	.word	0x2000b960

08015000 <_fstat_r>:
 8015000:	b538      	push	{r3, r4, r5, lr}
 8015002:	4d07      	ldr	r5, [pc, #28]	; (8015020 <_fstat_r+0x20>)
 8015004:	2300      	movs	r3, #0
 8015006:	4604      	mov	r4, r0
 8015008:	4608      	mov	r0, r1
 801500a:	4611      	mov	r1, r2
 801500c:	602b      	str	r3, [r5, #0]
 801500e:	f7eb fdeb 	bl	8000be8 <_fstat>
 8015012:	1c43      	adds	r3, r0, #1
 8015014:	d102      	bne.n	801501c <_fstat_r+0x1c>
 8015016:	682b      	ldr	r3, [r5, #0]
 8015018:	b103      	cbz	r3, 801501c <_fstat_r+0x1c>
 801501a:	6023      	str	r3, [r4, #0]
 801501c:	bd38      	pop	{r3, r4, r5, pc}
 801501e:	bf00      	nop
 8015020:	2000b960 	.word	0x2000b960

08015024 <_isatty_r>:
 8015024:	b538      	push	{r3, r4, r5, lr}
 8015026:	4d06      	ldr	r5, [pc, #24]	; (8015040 <_isatty_r+0x1c>)
 8015028:	2300      	movs	r3, #0
 801502a:	4604      	mov	r4, r0
 801502c:	4608      	mov	r0, r1
 801502e:	602b      	str	r3, [r5, #0]
 8015030:	f7eb fd40 	bl	8000ab4 <_isatty>
 8015034:	1c43      	adds	r3, r0, #1
 8015036:	d102      	bne.n	801503e <_isatty_r+0x1a>
 8015038:	682b      	ldr	r3, [r5, #0]
 801503a:	b103      	cbz	r3, 801503e <_isatty_r+0x1a>
 801503c:	6023      	str	r3, [r4, #0]
 801503e:	bd38      	pop	{r3, r4, r5, pc}
 8015040:	2000b960 	.word	0x2000b960

08015044 <_lseek_r>:
 8015044:	b538      	push	{r3, r4, r5, lr}
 8015046:	4d07      	ldr	r5, [pc, #28]	; (8015064 <_lseek_r+0x20>)
 8015048:	4604      	mov	r4, r0
 801504a:	4608      	mov	r0, r1
 801504c:	4611      	mov	r1, r2
 801504e:	2200      	movs	r2, #0
 8015050:	602a      	str	r2, [r5, #0]
 8015052:	461a      	mov	r2, r3
 8015054:	f7eb fd8c 	bl	8000b70 <_lseek>
 8015058:	1c43      	adds	r3, r0, #1
 801505a:	d102      	bne.n	8015062 <_lseek_r+0x1e>
 801505c:	682b      	ldr	r3, [r5, #0]
 801505e:	b103      	cbz	r3, 8015062 <_lseek_r+0x1e>
 8015060:	6023      	str	r3, [r4, #0]
 8015062:	bd38      	pop	{r3, r4, r5, pc}
 8015064:	2000b960 	.word	0x2000b960

08015068 <__malloc_lock>:
 8015068:	4801      	ldr	r0, [pc, #4]	; (8015070 <__malloc_lock+0x8>)
 801506a:	f7ff ba85 	b.w	8014578 <__retarget_lock_acquire_recursive>
 801506e:	bf00      	nop
 8015070:	2000b96c 	.word	0x2000b96c

08015074 <__malloc_unlock>:
 8015074:	4801      	ldr	r0, [pc, #4]	; (801507c <__malloc_unlock+0x8>)
 8015076:	f7ff ba80 	b.w	801457a <__retarget_lock_release_recursive>
 801507a:	bf00      	nop
 801507c:	2000b96c 	.word	0x2000b96c

08015080 <_read_r>:
 8015080:	b538      	push	{r3, r4, r5, lr}
 8015082:	4d07      	ldr	r5, [pc, #28]	; (80150a0 <_read_r+0x20>)
 8015084:	4604      	mov	r4, r0
 8015086:	4608      	mov	r0, r1
 8015088:	4611      	mov	r1, r2
 801508a:	2200      	movs	r2, #0
 801508c:	602a      	str	r2, [r5, #0]
 801508e:	461a      	mov	r2, r3
 8015090:	f7eb fd82 	bl	8000b98 <_read>
 8015094:	1c43      	adds	r3, r0, #1
 8015096:	d102      	bne.n	801509e <_read_r+0x1e>
 8015098:	682b      	ldr	r3, [r5, #0]
 801509a:	b103      	cbz	r3, 801509e <_read_r+0x1e>
 801509c:	6023      	str	r3, [r4, #0]
 801509e:	bd38      	pop	{r3, r4, r5, pc}
 80150a0:	2000b960 	.word	0x2000b960

080150a4 <_raise_r>:
 80150a4:	291f      	cmp	r1, #31
 80150a6:	b538      	push	{r3, r4, r5, lr}
 80150a8:	4604      	mov	r4, r0
 80150aa:	460d      	mov	r5, r1
 80150ac:	d904      	bls.n	80150b8 <_raise_r+0x14>
 80150ae:	2316      	movs	r3, #22
 80150b0:	6003      	str	r3, [r0, #0]
 80150b2:	f04f 30ff 	mov.w	r0, #4294967295
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80150ba:	b112      	cbz	r2, 80150c2 <_raise_r+0x1e>
 80150bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150c0:	b94b      	cbnz	r3, 80150d6 <_raise_r+0x32>
 80150c2:	4620      	mov	r0, r4
 80150c4:	f000 f830 	bl	8015128 <_getpid_r>
 80150c8:	462a      	mov	r2, r5
 80150ca:	4601      	mov	r1, r0
 80150cc:	4620      	mov	r0, r4
 80150ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150d2:	f000 b817 	b.w	8015104 <_kill_r>
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d00a      	beq.n	80150f0 <_raise_r+0x4c>
 80150da:	1c59      	adds	r1, r3, #1
 80150dc:	d103      	bne.n	80150e6 <_raise_r+0x42>
 80150de:	2316      	movs	r3, #22
 80150e0:	6003      	str	r3, [r0, #0]
 80150e2:	2001      	movs	r0, #1
 80150e4:	e7e7      	b.n	80150b6 <_raise_r+0x12>
 80150e6:	2400      	movs	r4, #0
 80150e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150ec:	4628      	mov	r0, r5
 80150ee:	4798      	blx	r3
 80150f0:	2000      	movs	r0, #0
 80150f2:	e7e0      	b.n	80150b6 <_raise_r+0x12>

080150f4 <raise>:
 80150f4:	4b02      	ldr	r3, [pc, #8]	; (8015100 <raise+0xc>)
 80150f6:	4601      	mov	r1, r0
 80150f8:	6818      	ldr	r0, [r3, #0]
 80150fa:	f7ff bfd3 	b.w	80150a4 <_raise_r>
 80150fe:	bf00      	nop
 8015100:	2000001c 	.word	0x2000001c

08015104 <_kill_r>:
 8015104:	b538      	push	{r3, r4, r5, lr}
 8015106:	4d07      	ldr	r5, [pc, #28]	; (8015124 <_kill_r+0x20>)
 8015108:	2300      	movs	r3, #0
 801510a:	4604      	mov	r4, r0
 801510c:	4608      	mov	r0, r1
 801510e:	4611      	mov	r1, r2
 8015110:	602b      	str	r3, [r5, #0]
 8015112:	f000 f813 	bl	801513c <_kill>
 8015116:	1c43      	adds	r3, r0, #1
 8015118:	d102      	bne.n	8015120 <_kill_r+0x1c>
 801511a:	682b      	ldr	r3, [r5, #0]
 801511c:	b103      	cbz	r3, 8015120 <_kill_r+0x1c>
 801511e:	6023      	str	r3, [r4, #0]
 8015120:	bd38      	pop	{r3, r4, r5, pc}
 8015122:	bf00      	nop
 8015124:	2000b960 	.word	0x2000b960

08015128 <_getpid_r>:
 8015128:	f000 b800 	b.w	801512c <_getpid>

0801512c <_getpid>:
 801512c:	4b02      	ldr	r3, [pc, #8]	; (8015138 <_getpid+0xc>)
 801512e:	2258      	movs	r2, #88	; 0x58
 8015130:	601a      	str	r2, [r3, #0]
 8015132:	f04f 30ff 	mov.w	r0, #4294967295
 8015136:	4770      	bx	lr
 8015138:	2000b960 	.word	0x2000b960

0801513c <_kill>:
 801513c:	4b02      	ldr	r3, [pc, #8]	; (8015148 <_kill+0xc>)
 801513e:	2258      	movs	r2, #88	; 0x58
 8015140:	601a      	str	r2, [r3, #0]
 8015142:	f04f 30ff 	mov.w	r0, #4294967295
 8015146:	4770      	bx	lr
 8015148:	2000b960 	.word	0x2000b960

0801514c <_exit>:
 801514c:	e7fe      	b.n	801514c <_exit>
	...

08015150 <_init>:
 8015150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015152:	bf00      	nop
 8015154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015156:	bc08      	pop	{r3}
 8015158:	469e      	mov	lr, r3
 801515a:	4770      	bx	lr

0801515c <_fini>:
 801515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515e:	bf00      	nop
 8015160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015162:	bc08      	pop	{r3}
 8015164:	469e      	mov	lr, r3
 8015166:	4770      	bx	lr
