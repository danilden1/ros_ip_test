
ros_ip_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017080  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003188  08017280  08017280  00027280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a408  0801a408  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801a408  0801a408  0002a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a410  0801a410  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a410  0801a410  0002a410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a414  0801a414  0002a414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801a418  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b8ec  20000084  0801a49c  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b970  0801a49c  0003b970  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b29e  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008826  00000000  00000000  0007b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002618  00000000  00000000  00083b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002488  00000000  00000000  00086190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000119b5  00000000  00000000  00088618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a49c  00000000  00000000  00099fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001254e4  00000000  00000000  000d4469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f994d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a76c  00000000  00000000  001f99a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0020410c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  00204148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08017268 	.word	0x08017268

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08017268 	.word	0x08017268

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 fc73 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f81e 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f910 	bl	8000808 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f8b0 	bl	800074c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f8de 	bl	80007ac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x38>)
 80005f2:	f000 f9db 	bl	80009ac <RetargetInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f6:	f005 fb43 	bl	8005c80 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fa:	4a06      	ldr	r2, [pc, #24]	; (8000614 <main+0x3c>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x40>)
 8000600:	f005 fbd0 	bl	8005da4 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <main+0x44>)
 8000608:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800060a:	f005 fb6d 	bl	8005ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x36>
 8000610:	20004b6c 	.word	0x20004b6c
 8000614:	0801a148 	.word	0x0801a148
 8000618:	0800094d 	.word	0x0800094d
 800061c:	20004b68 	.word	0x20004b68

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0b8      	sub	sp, #224	; 0xe0
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f015 fd20 	bl	8016074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2290      	movs	r2, #144	; 0x90
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f015 fd11 	bl	8016074 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f002 f9fd 	bl	8002a50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <SystemClock_Config+0x120>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	4a39      	ldr	r2, [pc, #228]	; (8000740 <SystemClock_Config+0x120>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	6413      	str	r3, [r2, #64]	; 0x40
 8000662:	4b37      	ldr	r3, [pc, #220]	; (8000740 <SystemClock_Config+0x120>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	4b35      	ldr	r3, [pc, #212]	; (8000744 <SystemClock_Config+0x124>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000676:	4a33      	ldr	r2, [pc, #204]	; (8000744 <SystemClock_Config+0x124>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	4b31      	ldr	r3, [pc, #196]	; (8000744 <SystemClock_Config+0x124>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fa24 	bl	8002b10 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80006ce:	f000 f967 	bl	80009a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d2:	f002 f9cd 	bl	8002a70 <HAL_PWREx_EnableOverDrive>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 f960 	bl	80009a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000700:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000704:	2103      	movs	r1, #3
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fcb0 	bl	800306c <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000712:	f000 f945 	bl	80009a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <SystemClock_Config+0x128>)
 8000718:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800071a:	2300      	movs	r3, #0
 800071c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fed3 	bl	80034d4 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000734:	f000 f934 	bl	80009a0 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	37e0      	adds	r7, #224	; 0xe0
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000
 8000748:	00200100 	.word	0x00200100

0800074c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	; (80007a8 <MX_USART3_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_USART3_UART_Init+0x58>)
 8000790:	f003 fda8 	bl	80042e4 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f901 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004b6c 	.word	0x20004b6c
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2206      	movs	r2, #6
 80007bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2202      	movs	r2, #2
 80007c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f0:	f001 ffe5 	bl	80027be <HAL_PCD_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f8d1 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20004bf0 	.word	0x20004bf0

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	; 0x30
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b46      	ldr	r3, [pc, #280]	; (8000938 <MX_GPIO_Init+0x130>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a45      	ldr	r2, [pc, #276]	; (8000938 <MX_GPIO_Init+0x130>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b43      	ldr	r3, [pc, #268]	; (8000938 <MX_GPIO_Init+0x130>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b40      	ldr	r3, [pc, #256]	; (8000938 <MX_GPIO_Init+0x130>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <MX_GPIO_Init+0x130>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_GPIO_Init+0x130>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_GPIO_Init+0x130>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a39      	ldr	r2, [pc, #228]	; (8000938 <MX_GPIO_Init+0x130>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_GPIO_Init+0x130>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_GPIO_Init+0x130>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a33      	ldr	r2, [pc, #204]	; (8000938 <MX_GPIO_Init+0x130>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_GPIO_Init+0x130>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_GPIO_Init+0x130>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <MX_GPIO_Init+0x130>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_GPIO_Init+0x130>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_GPIO_Init+0x130>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a27      	ldr	r2, [pc, #156]	; (8000938 <MX_GPIO_Init+0x130>)
 800089c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_GPIO_Init+0x130>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80008b4:	4821      	ldr	r0, [pc, #132]	; (800093c <MX_GPIO_Init+0x134>)
 80008b6:	f001 ff69 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2140      	movs	r1, #64	; 0x40
 80008be:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_GPIO_Init+0x138>)
 80008c0:	f001 ff64 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_GPIO_Init+0x13c>)
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <MX_GPIO_Init+0x140>)
 80008da:	f001 fdab 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008de:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0x134>)
 80008f8:	f001 fd9c 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480b      	ldr	r0, [pc, #44]	; (8000940 <MX_GPIO_Init+0x138>)
 8000914:	f001 fd8e 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_GPIO_Init+0x138>)
 800092c:	f001 fd82 	bl	8002434 <HAL_GPIO_Init>

}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40023800 	.word	0x40023800
 800093c:	40020400 	.word	0x40020400
 8000940:	40021800 	.word	0x40021800
 8000944:	10110000 	.word	0x10110000
 8000948:	40020800 	.word	0x40020800

0800094c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000954:	f004 fcfa 	bl	800534c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000958:	4806      	ldr	r0, [pc, #24]	; (8000974 <StartDefaultTask+0x28>)
 800095a:	f014 fab9 	bl	8014ed0 <ip4addr_ntoa>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <StartDefaultTask+0x2c>)
 8000964:	f015 fb8e 	bl	8016084 <iprintf>
    osDelay(1000);
 8000968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800096c:	f005 fac0 	bl	8005ef0 <osDelay>
    printf("DHCP worked! IP: %s\r\n",ip4addr_ntoa(&gnetif.ip_addr));
 8000970:	e7f2      	b.n	8000958 <StartDefaultTask+0xc>
 8000972:	bf00      	nop
 8000974:	20005078 	.word	0x20005078
 8000978:	0801728c 	.word	0x0801728c

0800097c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a04      	ldr	r2, [pc, #16]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d101      	bne.n	8000992 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098e:	f000 faa7 	bl	8000ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40001000 	.word	0x40001000

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <Error_Handler+0x8>
	...

080009ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <RetargetInit+0x28>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80009ba:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <RetargetInit+0x2c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6898      	ldr	r0, [r3, #8]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2202      	movs	r2, #2
 80009c4:	2100      	movs	r1, #0
 80009c6:	f015 fbb5 	bl	8016134 <setvbuf>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20004ff4 	.word	0x20004ff4
 80009d8:	20000020 	.word	0x20000020

080009dc <_isatty>:

int _isatty(int fd) {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db04      	blt.n	80009f4 <_isatty+0x18>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	dc01      	bgt.n	80009f4 <_isatty+0x18>
    return 1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	e003      	b.n	80009fc <_isatty+0x20>

  errno = EBADF;
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <_isatty+0x2c>)
 80009f6:	2209      	movs	r2, #9
 80009f8:	601a      	str	r2, [r3, #0]
  return 0;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	2000b95c 	.word	0x2000b95c

08000a0c <_write>:

int _write(int fd, char* ptr, int len) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d002      	beq.n	8000a24 <_write+0x18>
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d111      	bne.n	8000a48 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <_write+0x50>)
 8000a26:	6818      	ldr	r0, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	f003 fca5 	bl	8004380 <HAL_UART_Transmit>
 8000a36:	4603      	mov	r3, r0
 8000a38:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000a3a:	7dfb      	ldrb	r3, [r7, #23]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <_write+0x38>
      return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	e006      	b.n	8000a52 <_write+0x46>
    else
      return EIO;
 8000a44:	2305      	movs	r3, #5
 8000a46:	e004      	b.n	8000a52 <_write+0x46>
  }
  errno = EBADF;
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <_write+0x54>)
 8000a4a:	2209      	movs	r2, #9
 8000a4c:	601a      	str	r2, [r3, #0]
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20004ff4 	.word	0x20004ff4
 8000a60:	2000b95c 	.word	0x2000b95c

08000a64 <_close>:

int _close(int fd) {
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db04      	blt.n	8000a7c <_close+0x18>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	dc01      	bgt.n	8000a7c <_close+0x18>
    return 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e004      	b.n	8000a86 <_close+0x22>

  errno = EBADF;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <_close+0x30>)
 8000a7e:	2209      	movs	r2, #9
 8000a80:	601a      	str	r2, [r3, #0]
  return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000b95c 	.word	0x2000b95c

08000a98 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <_lseek+0x24>)
 8000aa6:	2209      	movs	r2, #9
 8000aa8:	601a      	str	r2, [r3, #0]
  return -1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2000b95c 	.word	0x2000b95c

08000ac0 <_read>:

int _read(int fd, char* ptr, int len) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d110      	bne.n	8000af4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <_read+0x48>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ada:	2201      	movs	r2, #1
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	f003 fce2 	bl	80044a6 <HAL_UART_Receive>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <_read+0x30>
      return 1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e006      	b.n	8000afe <_read+0x3e>
    else
      return EIO;
 8000af0:	2305      	movs	r3, #5
 8000af2:	e004      	b.n	8000afe <_read+0x3e>
  }
  errno = EBADF;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <_read+0x4c>)
 8000af6:	2209      	movs	r2, #9
 8000af8:	601a      	str	r2, [r3, #0]
  return -1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20004ff4 	.word	0x20004ff4
 8000b0c:	2000b95c 	.word	0x2000b95c

08000b10 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db08      	blt.n	8000b32 <_fstat+0x22>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	dc05      	bgt.n	8000b32 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b2c:	605a      	str	r2, [r3, #4]
    return 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e003      	b.n	8000b3a <_fstat+0x2a>
  }

  errno = EBADF;
 8000b32:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <_fstat+0x38>)
 8000b34:	2209      	movs	r2, #9
 8000b36:	601a      	str	r2, [r3, #0]
  return 0;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	2000b95c 	.word	0x2000b95c

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	210f      	movs	r1, #15
 8000b86:	f06f 0001 	mvn.w	r0, #1
 8000b8a:	f000 faa5 	bl	80010d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d128      	bne.n	8000c10 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c00:	2307      	movs	r3, #7
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000c0c:	f001 fc12 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40004800 	.word	0x40004800
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020c00 	.word	0x40020c00

08000c24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c44:	d141      	bne.n	8000cca <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a22      	ldr	r2, [pc, #136]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c70:	230a      	movs	r3, #10
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4817      	ldr	r0, [pc, #92]	; (8000cd8 <HAL_PCD_MspInit+0xb4>)
 8000c7c:	f001 fbda 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4810      	ldr	r0, [pc, #64]	; (8000cd8 <HAL_PCD_MspInit+0xb4>)
 8000c96:	f001 fbcd 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_PCD_MspInit+0xb0>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08c      	sub	sp, #48	; 0x30
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	2036      	movs	r0, #54	; 0x36
 8000cf2:	f000 f9f1 	bl	80010d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cf6:	2036      	movs	r0, #54	; 0x36
 8000cf8:	f000 fa0a 	bl	8001110 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_InitTick+0xa0>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_InitTick+0xa0>)
 8000d02:	f043 0310 	orr.w	r3, r3, #16
 8000d06:	6413      	str	r3, [r2, #64]	; 0x40
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0xa0>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f003 0310 	and.w	r3, r3, #16
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d14:	f107 0210 	add.w	r2, r7, #16
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fba6 	bl	8003470 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d24:	f002 fb7c 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d30:	4a13      	ldr	r2, [pc, #76]	; (8000d80 <HAL_InitTick+0xa4>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_InitTick+0xac>)
 8000d40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d5e:	f002 ffe1 	bl	8003d24 <HAL_TIM_Base_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d68:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_InitTick+0xa8>)
 8000d6a:	f003 f83d 	bl	8003de8 <HAL_TIM_Base_Start_IT>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	; 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	431bde83 	.word	0x431bde83
 8000d84:	20004ff8 	.word	0x20004ff8
 8000d88:	40001000 	.word	0x40001000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <TIM6_DAC_IRQHandler+0x10>)
 8000dbe:	f003 f88b 	bl	8003ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20004ff8 	.word	0x20004ff8

08000dcc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <ETH_IRQHandler+0x10>)
 8000dd2:	f000 fd8d 	bl	80018f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20006988 	.word	0x20006988

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4413      	add	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d205      	bcs.n	8000e1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <_sbrk+0x6c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	20080000 	.word	0x20080000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	200000a0 	.word	0x200000a0
 8000e48:	2000b970 	.word	0x2000b970
 8000e4c:	2000b95c 	.word	0x2000b95c

08000e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f015 f8a7 	bl	8015ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fb97 	bl	80005d8 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000eb8:	0801a418 	.word	0x0801a418
  ldr r2, =_sbss
 8000ebc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ec0:	2000b970 	.word	0x2000b970

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>

08000ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 f8f9 	bl	80010c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff ff03 	bl	8000cdc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fe39 	bl	8000b4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20005044 	.word	0x20005044

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20005044 	.word	0x20005044

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x40>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00
 8000fac:	05fa0000 	.word	0x05fa0000

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff4c 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
 80010e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ea:	f7ff ff61 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	6978      	ldr	r0, [r7, #20]
 80010f6:	f7ff ffb1 	bl	800105c <NVIC_EncodePriority>
 80010fa:	4602      	mov	r2, r0
 80010fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ff80 	bl	8001008 <__NVIC_SetPriority>
}
 8001108:	bf00      	nop
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff54 	bl	8000fcc <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800113c:	4ba9      	ldr	r3, [pc, #676]	; (80013e4 <HAL_ETH_Init+0x2b8>)
 800113e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e181      	b.n	8001456 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d106      	bne.n	800116c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f004 f964 	bl	8005434 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116c:	4b9e      	ldr	r3, [pc, #632]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	4a9d      	ldr	r2, [pc, #628]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001176:	6453      	str	r3, [r2, #68]	; 0x44
 8001178:	4b9b      	ldr	r3, [pc, #620]	; (80013e8 <HAL_ETH_Init+0x2bc>)
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001184:	4b99      	ldr	r3, [pc, #612]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a98      	ldr	r2, [pc, #608]	; (80013ec <HAL_ETH_Init+0x2c0>)
 800118a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800118e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001190:	4b96      	ldr	r3, [pc, #600]	; (80013ec <HAL_ETH_Init+0x2c0>)
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4994      	ldr	r1, [pc, #592]	; (80013ec <HAL_ETH_Init+0x2c0>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80011b6:	f7ff fea7 	bl	8000f08 <HAL_GetTick>
 80011ba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011bc:	e011      	b.n	80011e2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80011be:	f7ff fea3 	bl	8000f08 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011cc:	d909      	bls.n	80011e2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2203      	movs	r2, #3
 80011d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e139      	b.n	8001456 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1e4      	bne.n	80011be <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f023 031c 	bic.w	r3, r3, #28
 8001202:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001204:	f002 f900 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8001208:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a78      	ldr	r2, [pc, #480]	; (80013f0 <HAL_ETH_Init+0x2c4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d908      	bls.n	8001224 <HAL_ETH_Init+0xf8>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4a77      	ldr	r2, [pc, #476]	; (80013f4 <HAL_ETH_Init+0x2c8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d804      	bhi.n	8001224 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e027      	b.n	8001274 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4a73      	ldr	r2, [pc, #460]	; (80013f4 <HAL_ETH_Init+0x2c8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d908      	bls.n	800123e <HAL_ETH_Init+0x112>
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4a6d      	ldr	r2, [pc, #436]	; (80013e4 <HAL_ETH_Init+0x2b8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d204      	bcs.n	800123e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f043 030c 	orr.w	r3, r3, #12
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	e01a      	b.n	8001274 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	4a68      	ldr	r2, [pc, #416]	; (80013e4 <HAL_ETH_Init+0x2b8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d303      	bcc.n	800124e <HAL_ETH_Init+0x122>
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4a6b      	ldr	r2, [pc, #428]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d911      	bls.n	8001272 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4a69      	ldr	r2, [pc, #420]	; (80013f8 <HAL_ETH_Init+0x2cc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d908      	bls.n	8001268 <HAL_ETH_Init+0x13c>
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4a68      	ldr	r2, [pc, #416]	; (80013fc <HAL_ETH_Init+0x2d0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d804      	bhi.n	8001268 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e005      	b.n	8001274 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	e000      	b.n	8001274 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001272:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800127c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001280:	2100      	movs	r1, #0
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f000 fc17 	bl	8001ab6 <HAL_ETH_WritePHYRegister>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001292:	6939      	ldr	r1, [r7, #16]
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 fdcd 	bl	8001e34 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e0d7      	b.n	8001456 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80012a6:	20ff      	movs	r0, #255	; 0xff
 80012a8:	f7ff fe3a 	bl	8000f20 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a5 	beq.w	8001400 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80012b6:	f7ff fe27 	bl	8000f08 <HAL_GetTick>
 80012ba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	461a      	mov	r2, r3
 80012c2:	2101      	movs	r1, #1
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 fb8e 	bl	80019e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80012ca:	f7ff fe1d 	bl	8000f08 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d90f      	bls.n	80012fc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012e0:	6939      	ldr	r1, [r7, #16]
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fda6 	bl	8001e34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e0ac      	b.n	8001456 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0da      	beq.n	80012bc <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001306:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fbd2 	bl	8001ab6 <HAL_ETH_WritePHYRegister>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fd88 	bl	8001e34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800132c:	2301      	movs	r3, #1
 800132e:	e092      	b.n	8001456 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fdea 	bl	8000f08 <HAL_GetTick>
 8001334:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	461a      	mov	r2, r3
 800133c:	2101      	movs	r1, #1
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 fb51 	bl	80019e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001344:	f7ff fde0 	bl	8000f08 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d90f      	bls.n	8001376 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800135a:	6939      	ldr	r1, [r7, #16]
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fd69 	bl	8001e34 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e06f      	b.n	8001456 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 0320 	and.w	r3, r3, #32
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0da      	beq.n	8001336 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	461a      	mov	r2, r3
 8001386:	2110      	movs	r1, #16
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fb2c 	bl	80019e6 <HAL_ETH_ReadPHYRegister>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001398:	6939      	ldr	r1, [r7, #16]
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fd4a 	bl	8001e34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013a8:	2301      	movs	r3, #1
 80013aa:	e054      	b.n	8001456 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e002      	b.n	80013c6 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	e035      	b.n	8001444 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e030      	b.n	8001444 <HAL_ETH_Init+0x318>
 80013e2:	bf00      	nop
 80013e4:	03938700 	.word	0x03938700
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40013800 	.word	0x40013800
 80013f0:	01312cff 	.word	0x01312cff
 80013f4:	02160ebf 	.word	0x02160ebf
 80013f8:	05f5e0ff 	.word	0x05f5e0ff
 80013fc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001410:	4313      	orrs	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	461a      	mov	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fb4c 	bl	8001ab6 <HAL_ETH_WritePHYRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fd02 	bl	8001e34 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e00c      	b.n	8001456 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800143c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001440:	f7ff fd6e 	bl	8000f20 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fcf4 	bl	8001e34 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop

08001460 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_ETH_DMATxDescListInit+0x20>
 800147c:	2302      	movs	r3, #2
 800147e:	e052      	b.n	8001526 <HAL_ETH_DMATxDescListInit+0xc6>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2202      	movs	r2, #2
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	e030      	b.n	80014fe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	015b      	lsls	r3, r3, #5
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	4413      	add	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d105      	bne.n	80014d6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d208      	bcs.n	80014f2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	015b      	lsls	r3, r3, #5
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	e002      	b.n	80014f8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d3ca      	bcc.n	800149c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001510:	440b      	add	r3, r1
 8001512:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001532:	b480      	push	{r7}
 8001534:	b087      	sub	sp, #28
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ETH_DMARxDescListInit+0x20>
 800154e:	2302      	movs	r3, #2
 8001550:	e056      	b.n	8001600 <HAL_ETH_DMARxDescListInit+0xce>
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e034      	b.n	80015d8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	4413      	add	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800157e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001586:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	461a      	mov	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d208      	bcs.n	80015cc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	4413      	add	r3, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	e002      	b.n	80015d2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d3c6      	bcc.n	800156e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80015ea:	440b      	add	r3, r1
 80015ec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ETH_TransmitFrame+0x24>
 800162c:	2302      	movs	r3, #2
 800162e:	e0cd      	b.n	80017cc <HAL_ETH_TransmitFrame+0x1c0>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001656:	2301      	movs	r3, #1
 8001658:	e0b8      	b.n	80017cc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	da09      	bge.n	8001678 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2212      	movs	r2, #18
 8001668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0a9      	b.n	80017cc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800167e:	4293      	cmp	r3, r2
 8001680:	d915      	bls.n	80016ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4a54      	ldr	r2, [pc, #336]	; (80017d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001686:	fba2 2303 	umull	r2, r3, r2, r3
 800168a:	0a9b      	lsrs	r3, r3, #10
 800168c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001692:	fba3 1302 	umull	r1, r3, r3, r2
 8001696:	0a9b      	lsrs	r3, r3, #10
 8001698:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e001      	b.n	80016b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80016ae:	2301      	movs	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d11c      	bne.n	80016f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80016c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80016f0:	e04b      	b.n	800178a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	e044      	b.n	8001782 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001702:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001706:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d107      	bne.n	800171e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001726:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	3b01      	subs	r3, #1
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	429a      	cmp	r2, r3
 8001730:	d116      	bne.n	8001760 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001740:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4a25      	ldr	r2, [pc, #148]	; (80017dc <HAL_ETH_TransmitFrame+0x1d0>)
 8001746:	fb02 f203 	mul.w	r2, r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	4413      	add	r3, r2
 800174e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001752:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800175e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800176e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	461a      	mov	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3301      	adds	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3b6      	bcc.n	80016f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001792:	4413      	add	r3, r2
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80017a6:	4413      	add	r3, r2
 80017a8:	2204      	movs	r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f241 0304 	movw	r3, #4100	; 0x1004
 80017b4:	4413      	add	r3, r2
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	ac02b00b 	.word	0xac02b00b
 80017dc:	fffffa0c 	.word	0xfffffa0c

080017e0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e074      	b.n	80018e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800180a:	e05a      	b.n	80018c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800181c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001820:	d10d      	bne.n	800183e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
 800183c:	e041      	b.n	80018c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10b      	bne.n	8001864 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
 8001862:	e02e      	b.n	80018c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	2b01      	cmp	r3, #1
 800187c:	d103      	bne.n	8001886 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001892:	1f1a      	subs	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e010      	b.n	80018e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db02      	blt.n	80018d2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d99c      	bls.n	800180c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	f241 0314 	movw	r3, #4116	; 0x1014
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	2b40      	cmp	r3, #64	; 0x40
 800190a:	d112      	bne.n	8001932 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f003 fe51 	bl	80055b4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	f241 0314 	movw	r3, #4116	; 0x1014
 800191a:	4413      	add	r3, r2
 800191c:	2240      	movs	r2, #64	; 0x40
 800191e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001930:	e01b      	b.n	800196a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f241 0314 	movw	r3, #4116	; 0x1014
 800193a:	4413      	add	r3, r2
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b01      	cmp	r3, #1
 8001944:	d111      	bne.n	800196a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f839 	bl	80019be <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	f241 0314 	movw	r3, #4116	; 0x1014
 8001954:	4413      	add	r3, r2
 8001956:	2201      	movs	r2, #1
 8001958:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001972:	4413      	add	r3, r2
 8001974:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001978:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001982:	4413      	add	r3, r2
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800198a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198e:	d112      	bne.n	80019b6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f81e 	bl	80019d2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	f241 0314 	movw	r3, #4116	; 0x1014
 800199e:	4413      	add	r3, r2
 80019a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	460b      	mov	r3, r1
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b82      	cmp	r3, #130	; 0x82
 8001a06:	d101      	bne.n	8001a0c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e050      	b.n	8001aae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2282      	movs	r2, #130	; 0x82
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 031c 	and.w	r3, r3, #28
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8a1b      	ldrh	r3, [r3, #16]
 8001a28:	02db      	lsls	r3, r3, #11
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	019b      	lsls	r3, r3, #6
 8001a36:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f023 0302 	bic.w	r3, r3, #2
 8001a46:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a58:	f7ff fa56 	bl	8000f08 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a5e:	e015      	b.n	8001a8c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001a60:	f7ff fa52 	bl	8000f08 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a6e:	d309      	bcc.n	8001a84 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e014      	b.n	8001aae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1e4      	bne.n	8001a60 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b42      	cmp	r3, #66	; 0x42
 8001ad6:	d101      	bne.n	8001adc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e04e      	b.n	8001b7a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2242      	movs	r2, #66	; 0x42
 8001ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 031c 	and.w	r3, r3, #28
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8a1b      	ldrh	r3, [r3, #16]
 8001af8:	02db      	lsls	r3, r3, #11
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	019b      	lsls	r3, r3, #6
 8001b06:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b32:	f7ff f9e9 	bl	8000f08 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b38:	e015      	b.n	8001b66 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001b3a:	f7ff f9e5 	bl	8000f08 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d309      	bcc.n	8001b5e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e00d      	b.n	8001b7a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e4      	bne.n	8001b3a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_ETH_Start+0x16>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e01f      	b.n	8001bd8 <HAL_ETH_Start+0x56>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 fb45 	bl	8002238 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fb7c 	bl	80022ac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 fc13 	bl	80023e0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 fbb0 	bl	8002320 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 fbdd 	bl	8002380 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ETH_Stop+0x16>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e01f      	b.n	8001c36 <HAL_ETH_Stop+0x56>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2202      	movs	r2, #2
 8001c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fba2 	bl	8002350 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fbcf 	bl	80023b0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fb67 	bl	80022e6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fbe1 	bl	80023e0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 fb27 	bl	8002272 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d101      	bne.n	8001c5c <HAL_ETH_ConfigMAC+0x1c>
 8001c58:	2302      	movs	r3, #2
 8001c5a:	e0e4      	b.n	8001e26 <HAL_ETH_ConfigMAC+0x1e6>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80b1 	beq.w	8001dd6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c8c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c92:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c98:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c9e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ca4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001caa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001cb0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001cb6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001cbc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001cc2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001cc8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001cce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7ff f91a 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cfc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d02:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d08:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d0e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001d14:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001d1a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001d26:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d28:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f7ff f8f4 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d48:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d52:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d62:	4013      	ands	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d70:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d76:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d7c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d82:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d88:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff f8bd 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7ff f8aa 	bl	8000f20 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	61da      	str	r2, [r3, #28]
 8001dd4:	e01e      	b.n	8001e14 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001de4:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff f88a 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	ff20810f 	.word	0xff20810f

08001e34 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b0b0      	sub	sp, #192	; 0xc0
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d007      	beq.n	8001e5a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e50:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e58:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e62:	2300      	movs	r3, #0
 8001e64:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d103      	bne.n	8001e82 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e80:	e001      	b.n	8001e86 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e90:	2300      	movs	r3, #0
 8001e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001ea0:	2340      	movs	r3, #64	; 0x40
 8001ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f0c:	4bab      	ldr	r3, [pc, #684]	; (80021bc <ETH_MACDMAConfig+0x388>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f14:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f18:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001f1c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001f20:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001f26:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001f2a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001f2e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f34:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f38:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f3c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f40:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f44:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f48:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001f4a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f5c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7fe ffd9 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f76:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f7c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f80:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f86:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f8c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f92:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f98:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f9c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001fa4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001fa6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7fe ffb4 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fc0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001fca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fd4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fe8:	4013      	ands	r3, r2
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001ff8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ffe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002004:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800200a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800200c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002010:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002012:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002024:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f7fe ff75 	bl	8000f20 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002040:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002044:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800205a:	2001      	movs	r0, #1
 800205c:	f7fe ff60 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002068:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002078:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800207c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800208e:	2304      	movs	r3, #4
 8002090:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800209e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f241 0318 	movw	r3, #4120	; 0x1018
 80020be:	4413      	add	r3, r2
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80020c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <ETH_MACDMAConfig+0x38c>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020d2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020d4:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020d6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020d8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020da:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020dc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020de:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020e0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020e2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020e4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020e6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020e8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020ea:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020ee:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020f2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	f241 0318 	movw	r3, #4120	; 0x1018
 8002106:	4413      	add	r3, r2
 8002108:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800210c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	f241 0318 	movw	r3, #4120	; 0x1018
 8002116:	4413      	add	r3, r2
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800211e:	2001      	movs	r0, #1
 8002120:	f7fe fefe 	bl	8000f20 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f241 0318 	movw	r3, #4120	; 0x1018
 800212c:	4413      	add	r3, r2
 800212e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002132:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002138:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800213c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002140:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002144:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800214a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800214c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800214e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800216c:	2001      	movs	r0, #1
 800216e:	f7fe fed7 	bl	8000f20 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800217e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10d      	bne.n	80021a4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002190:	4413      	add	r3, r2
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6811      	ldr	r1, [r2, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <ETH_MACDMAConfig+0x390>)
 800219a:	431a      	orrs	r2, r3
 800219c:	f241 031c 	movw	r3, #4124	; 0x101c
 80021a0:	440b      	add	r3, r1
 80021a2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	461a      	mov	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f80b 	bl	80021c8 <ETH_MACAddressConfig>
}
 80021b2:	bf00      	nop
 80021b4:	37c0      	adds	r7, #192	; 0xc0
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	ff20810f 	.word	0xff20810f
 80021c0:	f8de3f23 	.word	0xf8de3f23
 80021c4:	00010040 	.word	0x00010040

080021c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3305      	adds	r3, #5
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	3204      	adds	r2, #4
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <ETH_MACAddressConfig+0x68>)
 80021ea:	4413      	add	r3, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3303      	adds	r3, #3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	061a      	lsls	r2, r3, #24
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3302      	adds	r3, #2
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3301      	adds	r3, #1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	4313      	orrs	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	7812      	ldrb	r2, [r2, #0]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <ETH_MACAddressConfig+0x6c>)
 800221a:	4413      	add	r3, r2
 800221c:	461a      	mov	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	6013      	str	r3, [r2, #0]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40028040 	.word	0x40028040
 8002234:	40028044 	.word	0x40028044

08002238 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0208 	orr.w	r2, r2, #8
 8002252:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800225c:	2001      	movs	r0, #1
 800225e:	f7fe fe5f 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	601a      	str	r2, [r3, #0]
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0208 	bic.w	r2, r2, #8
 800228c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7fe fe42 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0204 	orr.w	r2, r2, #4
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7fe fe25 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	601a      	str	r2, [r3, #0]
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0204 	bic.w	r2, r2, #4
 8002300:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800230a:	2001      	movs	r0, #1
 800230c:	f7fe fe08 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002330:	4413      	add	r3, r2
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6811      	ldr	r1, [r2, #0]
 8002338:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800233c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002340:	440b      	add	r3, r1
 8002342:	601a      	str	r2, [r3, #0]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6811      	ldr	r1, [r2, #0]
 8002368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800236c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002370:	440b      	add	r3, r1
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002390:	4413      	add	r3, r2
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6811      	ldr	r1, [r2, #0]
 8002398:	f043 0202 	orr.w	r2, r3, #2
 800239c:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a0:	440b      	add	r3, r1
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80023c0:	4413      	add	r3, r2
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6811      	ldr	r1, [r2, #0]
 80023c8:	f023 0202 	bic.w	r2, r3, #2
 80023cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80023d0:	440b      	add	r3, r1
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023f4:	4413      	add	r3, r2
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6811      	ldr	r1, [r2, #0]
 80023fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002400:	f241 0318 	movw	r3, #4120	; 0x1018
 8002404:	440b      	add	r3, r1
 8002406:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002410:	4413      	add	r3, r2
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002416:	2001      	movs	r0, #1
 8002418:	f7fe fd82 	bl	8000f20 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	f241 0318 	movw	r3, #4120	; 0x1018
 8002426:	440b      	add	r3, r1
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e175      	b.n	8002740 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8164 	bne.w	800273a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d00b      	beq.n	8002492 <HAL_GPIO_Init+0x5e>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002486:	2b11      	cmp	r3, #17
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b12      	cmp	r3, #18
 8002490:	d130      	bne.n	80024f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c8:	2201      	movs	r2, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 0201 	and.w	r2, r3, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x100>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b12      	cmp	r3, #18
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80be 	beq.w	800273a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	4b66      	ldr	r3, [pc, #408]	; (8002758 <HAL_GPIO_Init+0x324>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4a65      	ldr	r2, [pc, #404]	; (8002758 <HAL_GPIO_Init+0x324>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_GPIO_Init+0x324>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <HAL_GPIO_Init+0x328>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a58      	ldr	r2, [pc, #352]	; (8002760 <HAL_GPIO_Init+0x32c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d037      	beq.n	8002672 <HAL_GPIO_Init+0x23e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_GPIO_Init+0x330>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d031      	beq.n	800266e <HAL_GPIO_Init+0x23a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a56      	ldr	r2, [pc, #344]	; (8002768 <HAL_GPIO_Init+0x334>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x236>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a55      	ldr	r2, [pc, #340]	; (800276c <HAL_GPIO_Init+0x338>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x232>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_GPIO_Init+0x33c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x22e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a53      	ldr	r2, [pc, #332]	; (8002774 <HAL_GPIO_Init+0x340>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x22a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a52      	ldr	r2, [pc, #328]	; (8002778 <HAL_GPIO_Init+0x344>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x226>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a51      	ldr	r2, [pc, #324]	; (800277c <HAL_GPIO_Init+0x348>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x222>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a50      	ldr	r2, [pc, #320]	; (8002780 <HAL_GPIO_Init+0x34c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x21e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	; (8002784 <HAL_GPIO_Init+0x350>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x21a>
 800264a:	2309      	movs	r3, #9
 800264c:	e012      	b.n	8002674 <HAL_GPIO_Init+0x240>
 800264e:	230a      	movs	r3, #10
 8002650:	e010      	b.n	8002674 <HAL_GPIO_Init+0x240>
 8002652:	2308      	movs	r3, #8
 8002654:	e00e      	b.n	8002674 <HAL_GPIO_Init+0x240>
 8002656:	2307      	movs	r3, #7
 8002658:	e00c      	b.n	8002674 <HAL_GPIO_Init+0x240>
 800265a:	2306      	movs	r3, #6
 800265c:	e00a      	b.n	8002674 <HAL_GPIO_Init+0x240>
 800265e:	2305      	movs	r3, #5
 8002660:	e008      	b.n	8002674 <HAL_GPIO_Init+0x240>
 8002662:	2304      	movs	r3, #4
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x240>
 8002666:	2303      	movs	r3, #3
 8002668:	e004      	b.n	8002674 <HAL_GPIO_Init+0x240>
 800266a:	2302      	movs	r3, #2
 800266c:	e002      	b.n	8002674 <HAL_GPIO_Init+0x240>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_GPIO_Init+0x240>
 8002672:	2300      	movs	r3, #0
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f002 0203 	and.w	r2, r2, #3
 800267a:	0092      	lsls	r2, r2, #2
 800267c:	4093      	lsls	r3, r2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002684:	4935      	ldr	r1, [pc, #212]	; (800275c <HAL_GPIO_Init+0x328>)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	089b      	lsrs	r3, r3, #2
 800268a:	3302      	adds	r3, #2
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_GPIO_Init+0x354>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026b6:	4a34      	ldr	r2, [pc, #208]	; (8002788 <HAL_GPIO_Init+0x354>)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026bc:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_GPIO_Init+0x354>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e0:	4a29      	ldr	r2, [pc, #164]	; (8002788 <HAL_GPIO_Init+0x354>)
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_GPIO_Init+0x354>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_GPIO_Init+0x354>)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002710:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_GPIO_Init+0x354>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002734:	4a14      	ldr	r2, [pc, #80]	; (8002788 <HAL_GPIO_Init+0x354>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b0f      	cmp	r3, #15
 8002744:	f67f ae86 	bls.w	8002454 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40021400 	.word	0x40021400
 8002778:	40021800 	.word	0x40021800
 800277c:	40021c00 	.word	0x40021c00
 8002780:	40022000 	.word	0x40022000
 8002784:	40022400 	.word	0x40022400
 8002788:	40013c00 	.word	0x40013c00

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800279c:	787b      	ldrb	r3, [r7, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80027a8:	e003      	b.n	80027b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c0:	b08f      	sub	sp, #60	; 0x3c
 80027c2:	af0a      	add	r7, sp, #40	; 0x28
 80027c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e116      	b.n	80029fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d106      	bne.n	80027f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7fe fa1a 	bl	8000c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d102      	bne.n	800280a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fb3c 	bl	8004e8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	687e      	ldr	r6, [r7, #4]
 800281c:	466d      	mov	r5, sp
 800281e:	f106 0410 	add.w	r4, r6, #16
 8002822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800282e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002832:	1d33      	adds	r3, r6, #4
 8002834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002836:	6838      	ldr	r0, [r7, #0]
 8002838:	f002 fad0 	bl	8004ddc <USB_CoreInit>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d005      	beq.n	800284e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0d7      	b.n	80029fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fb2a 	bl	8004eae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e04a      	b.n	80028f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	333d      	adds	r3, #61	; 0x3d
 8002870:	2201      	movs	r2, #1
 8002872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	333c      	adds	r3, #60	; 0x3c
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	b298      	uxth	r0, r3
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3342      	adds	r3, #66	; 0x42
 800289c:	4602      	mov	r2, r0
 800289e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	333f      	adds	r3, #63	; 0x3f
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3344      	adds	r3, #68	; 0x44
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	3348      	adds	r3, #72	; 0x48
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3350      	adds	r3, #80	; 0x50
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	3301      	adds	r3, #1
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3af      	bcc.n	8002860 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	2300      	movs	r3, #0
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e044      	b.n	8002990 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800295e:	7bfa      	ldrb	r2, [r7, #15]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	3301      	adds	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	429a      	cmp	r2, r3
 8002998:	d3b5      	bcc.n	8002906 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	687e      	ldr	r6, [r7, #4]
 80029a2:	466d      	mov	r5, sp
 80029a4:	f106 0410 	add.w	r4, r6, #16
 80029a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b8:	1d33      	adds	r3, r6, #4
 80029ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029bc:	6838      	ldr	r0, [r7, #0]
 80029be:	f002 faa1 	bl	8004f04 <USB_DevInit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e014      	b.n	80029fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f80b 	bl	8002a08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fc53 	bl	80052a2 <USB_DevDisconnect>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_PCDEx_ActivateLPM+0x44>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	10000003 	.word	0x10000003

08002a50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
}
 8002a60:	bf00      	nop
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40007000 	.word	0x40007000

08002a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9e:	f7fe fa33 	bl	8000f08 <HAL_GetTick>
 8002aa2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aa4:	e009      	b.n	8002aba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa6:	f7fe fa2f 	bl	8000f08 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab4:	d901      	bls.n	8002aba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e022      	b.n	8002b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad4:	f7fe fa18 	bl	8000f08 <HAL_GetTick>
 8002ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ada:	e009      	b.n	8002af0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002adc:	f7fe fa14 	bl	8000f08 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aea:	d901      	bls.n	8002af0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e007      	b.n	8002b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002afc:	d1ee      	bne.n	8002adc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40007000 	.word	0x40007000

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e29b      	b.n	800305e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8087 	beq.w	8002c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b34:	4b96      	ldr	r3, [pc, #600]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d00c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b40:	4b93      	ldr	r3, [pc, #588]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 030c 	and.w	r3, r3, #12
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d112      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
 8002b4c:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b8d      	ldr	r3, [pc, #564]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d06c      	beq.n	8002c40 <HAL_RCC_OscConfig+0x130>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d168      	bne.n	8002c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e275      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x7a>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e02e      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x9c>
 8002b92:	4b7f      	ldr	r3, [pc, #508]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7e      	ldr	r2, [pc, #504]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b7c      	ldr	r3, [pc, #496]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a7b      	ldr	r2, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e01d      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a75      	ldr	r2, [pc, #468]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b73      	ldr	r3, [pc, #460]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a72      	ldr	r2, [pc, #456]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0xd8>
 8002bd0:	4b6f      	ldr	r3, [pc, #444]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6e      	ldr	r2, [pc, #440]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a6b      	ldr	r2, [pc, #428]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7fe f98a 	bl	8000f08 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe f986 	bl	8000f08 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e229      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f976 	bl	8000f08 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7fe f972 	bl	8000f08 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e215      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c32:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x110>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d069      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c4e:	4b50      	ldr	r3, [pc, #320]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	4b47      	ldr	r3, [pc, #284]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d001      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e1e9      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	493d      	ldr	r1, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9e:	e040      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d023      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca8:	4b39      	ldr	r3, [pc, #228]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a38      	ldr	r2, [pc, #224]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f928 	bl	8000f08 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7fe f924 	bl	8000f08 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1c7      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4929      	ldr	r1, [pc, #164]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
 8002cee:	e018      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a26      	ldr	r2, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002cf6:	f023 0301 	bic.w	r3, r3, #1
 8002cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe f904 	bl	8000f08 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe f900 	bl	8000f08 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e1a3      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d038      	beq.n	8002da0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d019      	beq.n	8002d6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d42:	f7fe f8e1 	bl	8000f08 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d4a:	f7fe f8dd 	bl	8000f08 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e180      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x23a>
 8002d68:	e01a      	b.n	8002da0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_RCC_OscConfig+0x280>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d76:	f7fe f8c7 	bl	8000f08 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d7e:	f7fe f8c3 	bl	8000f08 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d903      	bls.n	8002d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e166      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
 8002d90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d94:	4b92      	ldr	r3, [pc, #584]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 80a4 	beq.w	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b8c      	ldr	r3, [pc, #560]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b89      	ldr	r3, [pc, #548]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	4a88      	ldr	r2, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc6:	4b86      	ldr	r3, [pc, #536]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd6:	4b83      	ldr	r3, [pc, #524]	; (8002fe4 <HAL_RCC_OscConfig+0x4d4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002de2:	4b80      	ldr	r3, [pc, #512]	; (8002fe4 <HAL_RCC_OscConfig+0x4d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a7f      	ldr	r2, [pc, #508]	; (8002fe4 <HAL_RCC_OscConfig+0x4d4>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7fe f88b 	bl	8000f08 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe f887 	bl	8000f08 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e12a      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e08:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x4d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x31a>
 8002e1c:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	e02d      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x33c>
 8002e32:	4b6b      	ldr	r3, [pc, #428]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	4a6a      	ldr	r2, [pc, #424]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3e:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e42:	4a67      	ldr	r2, [pc, #412]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e44:	f023 0304 	bic.w	r3, r3, #4
 8002e48:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4a:	e01c      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x35e>
 8002e54:	4b62      	ldr	r3, [pc, #392]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e58:	4a61      	ldr	r2, [pc, #388]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e60:	4b5f      	ldr	r3, [pc, #380]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a5e      	ldr	r2, [pc, #376]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
 8002e6e:	4b5c      	ldr	r3, [pc, #368]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fe f83b 	bl	8000f08 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e94:	e00a      	b.n	8002eac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e96:	f7fe f837 	bl	8000f08 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e0d8      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eac:	4b4c      	ldr	r3, [pc, #304]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ee      	beq.n	8002e96 <HAL_RCC_OscConfig+0x386>
 8002eb8:	e014      	b.n	8002ee4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe f825 	bl	8000f08 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe f821 	bl	8000f08 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0c2      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed8:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ee      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d105      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80ae 	beq.w	800305c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d06d      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d14b      	bne.n	8002fac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b32      	ldr	r3, [pc, #200]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a31      	ldr	r2, [pc, #196]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fd fff2 	bl	8000f08 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd ffee 	bl	8000f08 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e091      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	085b      	lsrs	r3, r3, #1
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	071b      	lsls	r3, r3, #28
 8002f72:	491b      	ldr	r1, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fd ffc0 	bl	8000f08 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8c:	f7fd ffbc 	bl	8000f08 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e05f      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0x47c>
 8002faa:	e057      	b.n	800305c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fd ffa6 	bl	8000f08 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fd ffa2 	bl	8000f08 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e045      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_RCC_OscConfig+0x4d0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4b0>
 8002fde:	e03d      	b.n	800305c <HAL_RCC_OscConfig+0x54c>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fe8:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_RCC_OscConfig+0x558>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d030      	beq.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d129      	bne.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d122      	bne.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800301e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003020:	4293      	cmp	r3, r2
 8003022:	d119      	bne.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	085b      	lsrs	r3, r3, #1
 8003030:	3b01      	subs	r3, #1
 8003032:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d10f      	bne.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003044:	429a      	cmp	r2, r3
 8003046:	d107      	bne.n	8003058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40023800 	.word	0x40023800

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0d0      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d910      	bls.n	80030b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b67      	ldr	r3, [pc, #412]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 020f 	bic.w	r2, r3, #15
 800309a:	4965      	ldr	r1, [pc, #404]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a2:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d001      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0b8      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030cc:	4b59      	ldr	r3, [pc, #356]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a58      	ldr	r2, [pc, #352]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030e4:	4b53      	ldr	r3, [pc, #332]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a52      	ldr	r2, [pc, #328]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f0:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d040      	beq.n	8003190 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d107      	bne.n	8003126 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d115      	bne.n	800314e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e07f      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e073      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3d      	ldr	r3, [pc, #244]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4936      	ldr	r1, [pc, #216]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003160:	f7fd fed2 	bl	8000f08 <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fd fece 	bl	8000f08 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e053      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d210      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 020f 	bic.w	r2, r3, #15
 80031a6:	4922      	ldr	r1, [pc, #136]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b20      	ldr	r3, [pc, #128]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e032      	b.n	8003226 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d008      	beq.n	80031de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031cc:	4b19      	ldr	r3, [pc, #100]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4916      	ldr	r1, [pc, #88]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031ea:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	490e      	ldr	r1, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031fe:	f000 f821 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8003202:	4602      	mov	r2, r0
 8003204:	4b0b      	ldr	r3, [pc, #44]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	490a      	ldr	r1, [pc, #40]	; (8003238 <HAL_RCC_ClockConfig+0x1cc>)
 8003210:	5ccb      	ldrb	r3, [r1, r3]
 8003212:	fa22 f303 	lsr.w	r3, r2, r3
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HAL_RCC_ClockConfig+0x1d0>)
 8003218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <HAL_RCC_ClockConfig+0x1d4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fd5c 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40023c00 	.word	0x40023c00
 8003234:	40023800 	.word	0x40023800
 8003238:	0801a16c 	.word	0x0801a16c
 800323c:	20000000 	.word	0x20000000
 8003240:	20000004 	.word	0x20000004

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	2300      	movs	r3, #0
 8003256:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800325c:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b08      	cmp	r3, #8
 8003266:	d00d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x40>
 8003268:	2b08      	cmp	r3, #8
 800326a:	f200 80bd 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 8003272:	2b04      	cmp	r3, #4
 8003274:	d003      	beq.n	800327e <HAL_RCC_GetSysClockFreq+0x3a>
 8003276:	e0b7      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b61      	ldr	r3, [pc, #388]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800327a:	60bb      	str	r3, [r7, #8]
      break;
 800327c:	e0b7      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003280:	60bb      	str	r3, [r7, #8]
      break;
 8003282:	e0b4      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003284:	4b5d      	ldr	r3, [pc, #372]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04d      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	461a      	mov	r2, r3
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	ea02 0800 	and.w	r8, r2, r0
 80032b2:	ea03 0901 	and.w	r9, r3, r1
 80032b6:	4640      	mov	r0, r8
 80032b8:	4649      	mov	r1, r9
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	014b      	lsls	r3, r1, #5
 80032c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c8:	0142      	lsls	r2, r0, #5
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	ebb0 0008 	subs.w	r0, r0, r8
 80032d2:	eb61 0109 	sbc.w	r1, r1, r9
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	018b      	lsls	r3, r1, #6
 80032e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032e4:	0182      	lsls	r2, r0, #6
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	eb63 0301 	sbc.w	r3, r3, r1
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	00d9      	lsls	r1, r3, #3
 80032f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032fa:	00d0      	lsls	r0, r2, #3
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	eb12 0208 	adds.w	r2, r2, r8
 8003304:	eb43 0309 	adc.w	r3, r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0259      	lsls	r1, r3, #9
 8003312:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003316:	0250      	lsls	r0, r2, #9
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	461a      	mov	r2, r3
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	f7fc ffda 	bl	80002e0 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e04a      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003336:	4b31      	ldr	r3, [pc, #196]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	099b      	lsrs	r3, r3, #6
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	ea02 0400 	and.w	r4, r2, r0
 800334e:	ea03 0501 	and.w	r5, r3, r1
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	014b      	lsls	r3, r1, #5
 8003360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003364:	0142      	lsls	r2, r0, #5
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	1b00      	subs	r0, r0, r4
 800336c:	eb61 0105 	sbc.w	r1, r1, r5
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	018b      	lsls	r3, r1, #6
 800337a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800337e:	0182      	lsls	r2, r0, #6
 8003380:	1a12      	subs	r2, r2, r0
 8003382:	eb63 0301 	sbc.w	r3, r3, r1
 8003386:	f04f 0000 	mov.w	r0, #0
 800338a:	f04f 0100 	mov.w	r1, #0
 800338e:	00d9      	lsls	r1, r3, #3
 8003390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003394:	00d0      	lsls	r0, r2, #3
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	1912      	adds	r2, r2, r4
 800339c:	eb45 0303 	adc.w	r3, r5, r3
 80033a0:	f04f 0000 	mov.w	r0, #0
 80033a4:	f04f 0100 	mov.w	r1, #0
 80033a8:	0299      	lsls	r1, r3, #10
 80033aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ae:	0290      	lsls	r0, r2, #10
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	461a      	mov	r2, r3
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	f7fc ff8e 	bl	80002e0 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ea:	60bb      	str	r3, [r7, #8]
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	68bb      	ldr	r3, [r7, #8]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	; (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000000 	.word	0x20000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	0801a17c 	.word	0x0801a17c

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffdc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0b5b      	lsrs	r3, r3, #13
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	0801a17c 	.word	0x0801a17c

08003470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	220f      	movs	r2, #15
 800347e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCC_GetClockConfig+0x5c>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0203 	and.w	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_RCC_GetClockConfig+0x5c>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034a4:	4b09      	ldr	r3, [pc, #36]	; (80034cc <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	08db      	lsrs	r3, r3, #3
 80034aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034b2:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_RCC_GetClockConfig+0x60>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	601a      	str	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40023c00 	.word	0x40023c00

080034d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d012      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034fc:	4b69      	ldr	r3, [pc, #420]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	4a68      	ldr	r2, [pc, #416]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003506:	6093      	str	r3, [r2, #8]
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	4964      	ldr	r1, [pc, #400]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800351e:	2301      	movs	r3, #1
 8003520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d017      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	4959      	ldr	r1, [pc, #356]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354c:	d101      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800355a:	2301      	movs	r3, #1
 800355c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d017      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800356a:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	494a      	ldr	r1, [pc, #296]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 808b 	beq.w	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	4a39      	ldr	r2, [pc, #228]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6413      	str	r3, [r2, #64]	; 0x40
 80035c4:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd fc94 	bl	8000f08 <HAL_GetTick>
 80035e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7fd fc90 	bl	8000f08 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	; 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e38f      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80035f6:	4b2c      	ldr	r3, [pc, #176]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003602:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800360a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d035      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d02e      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a1a      	ldr	r2, [pc, #104]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800363c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003642:	4a18      	ldr	r2, [pc, #96]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b01      	cmp	r3, #1
 8003652:	d114      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7fd fc58 	bl	8000f08 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd fc54 	bl	8000f08 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e351      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368a:	d111      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800369a:	400b      	ands	r3, r1
 800369c:	4901      	ldr	r1, [pc, #4]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]
 80036a2:	e00b      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40007000 	.word	0x40007000
 80036ac:	0ffffcff 	.word	0x0ffffcff
 80036b0:	4bb3      	ldr	r3, [pc, #716]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4ab2      	ldr	r2, [pc, #712]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036ba:	6093      	str	r3, [r2, #8]
 80036bc:	4bb0      	ldr	r3, [pc, #704]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c8:	49ad      	ldr	r1, [pc, #692]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036da:	4ba9      	ldr	r3, [pc, #676]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	4aa7      	ldr	r2, [pc, #668]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80036ea:	4ba5      	ldr	r3, [pc, #660]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f4:	49a2      	ldr	r1, [pc, #648]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003708:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003716:	499a      	ldr	r1, [pc, #616]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800372a:	4b95      	ldr	r3, [pc, #596]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003738:	4991      	ldr	r1, [pc, #580]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374c:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800375a:	4989      	ldr	r1, [pc, #548]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800376e:	4b84      	ldr	r3, [pc, #528]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4980      	ldr	r1, [pc, #512]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003790:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	4978      	ldr	r1, [pc, #480]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f023 020c 	bic.w	r2, r3, #12
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	496f      	ldr	r1, [pc, #444]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	4967      	ldr	r1, [pc, #412]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f6:	4b62      	ldr	r3, [pc, #392]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003804:	495e      	ldr	r1, [pc, #376]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	4956      	ldr	r1, [pc, #344]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800383a:	4b51      	ldr	r3, [pc, #324]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800385c:	4b48      	ldr	r3, [pc, #288]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	4945      	ldr	r1, [pc, #276]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800387e:	4b40      	ldr	r3, [pc, #256]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800388c:	493c      	ldr	r1, [pc, #240]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038a0:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038ae:	4934      	ldr	r1, [pc, #208]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d011      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80038c2:	4b2f      	ldr	r3, [pc, #188]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d0:	492b      	ldr	r1, [pc, #172]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003902:	4b1f      	ldr	r3, [pc, #124]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003910:	491b      	ldr	r1, [pc, #108]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003912:	4313      	orrs	r3, r2
 8003914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00b      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003934:	4912      	ldr	r1, [pc, #72]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003958:	4909      	ldr	r1, [pc, #36]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003972:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	e002      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	4986      	ldr	r1, [pc, #536]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003998:	4b81      	ldr	r3, [pc, #516]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800399a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a8:	497d      	ldr	r1, [pc, #500]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d006      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d6 	beq.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c4:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d0:	f7fd fa9a 	bl	8000f08 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d6:	e008      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d8:	f7fd fa96 	bl	8000f08 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	; 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e195      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1f0      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d021      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0c1b      	lsrs	r3, r3, #16
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a18:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1e:	0e1b      	lsrs	r3, r3, #24
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	019a      	lsls	r2, r3, #6
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	061b      	lsls	r3, r3, #24
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	071b      	lsls	r3, r3, #28
 8003a3e:	4958      	ldr	r1, [pc, #352]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d02e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a70:	d129      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a80:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	061b      	lsls	r3, r3, #24
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	493e      	ldr	r1, [pc, #248]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aae:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab4:	f023 021f 	bic.w	r2, r3, #31
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4938      	ldr	r1, [pc, #224]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01d      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad8:	0e1b      	lsrs	r3, r3, #24
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae6:	0f1b      	lsrs	r3, r3, #28
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	019a      	lsls	r2, r3, #6
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	431a      	orrs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	071b      	lsls	r3, r3, #28
 8003b06:	4926      	ldr	r1, [pc, #152]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d011      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	019a      	lsls	r2, r3, #6
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	041b      	lsls	r3, r3, #16
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	061b      	lsls	r3, r3, #24
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	491a      	ldr	r1, [pc, #104]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4a:	f7fd f9dd 	bl	8000f08 <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b52:	f7fd f9d9 	bl	8000f08 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b64      	cmp	r3, #100	; 0x64
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e0d8      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	f040 80ce 	bne.w	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a08      	ldr	r2, [pc, #32]	; (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b84:	f7fd f9c0 	bl	8000f08 <HAL_GetTick>
 8003b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b8c:	f7fd f9bc 	bl	8000f08 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d904      	bls.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0bb      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba4:	4b5e      	ldr	r3, [pc, #376]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bb0:	d0ec      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d02e      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d12a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bda:	4b51      	ldr	r3, [pc, #324]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	0f1b      	lsrs	r3, r3, #28
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	019a      	lsls	r2, r3, #6
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	041b      	lsls	r3, r3, #16
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	061b      	lsls	r3, r3, #24
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	071b      	lsls	r3, r3, #28
 8003c0e:	4944      	ldr	r1, [pc, #272]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	493d      	ldr	r1, [pc, #244]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c44:	d11d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c46:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c54:	4b32      	ldr	r3, [pc, #200]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	0f1b      	lsrs	r3, r3, #28
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	019a      	lsls	r2, r3, #6
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	041b      	lsls	r3, r3, #16
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	061b      	lsls	r3, r3, #24
 8003c74:	431a      	orrs	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	071b      	lsls	r3, r3, #28
 8003c7a:	4929      	ldr	r1, [pc, #164]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8e:	4b24      	ldr	r3, [pc, #144]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	0e1b      	lsrs	r3, r3, #24
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c9c:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	019a      	lsls	r2, r3, #6
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	071b      	lsls	r3, r3, #28
 8003cc2:	4917      	ldr	r1, [pc, #92]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cca:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4911      	ldr	r1, [pc, #68]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ce0:	4b0f      	ldr	r3, [pc, #60]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0e      	ldr	r2, [pc, #56]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cec:	f7fd f90c 	bl	8000f08 <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf4:	f7fd f908 	bl	8000f08 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e007      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d06:	4b06      	ldr	r3, [pc, #24]	; (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d1ef      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e049      	b.n	8003dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f841 	bl	8003dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4619      	mov	r1, r3
 8003d62:	4610      	mov	r0, r2
 8003d64:	f000 fa00 	bl	8004168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
	...

08003de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d001      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e054      	b.n	8003eaa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d022      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d01d      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a22      	ldr	r2, [pc, #136]	; (8003ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d018      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d013      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1f      	ldr	r2, [pc, #124]	; (8003ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00e      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1e      	ldr	r2, [pc, #120]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <HAL_TIM_Base_Start_IT+0xe4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d004      	beq.n	8003e68 <HAL_TIM_Base_Start_IT+0x80>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1b      	ldr	r2, [pc, #108]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d115      	bne.n	8003e94 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b06      	cmp	r3, #6
 8003e78:	d015      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0xbe>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e80:	d011      	beq.n	8003ea6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	e008      	b.n	8003ea6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40010000 	.word	0x40010000
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	40010400 	.word	0x40010400
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40001800 	.word	0x40001800
 8003ed4:	00010007 	.word	0x00010007

08003ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d122      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d11b      	bne.n	8003f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0202 	mvn.w	r2, #2
 8003f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f905 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003f20:	e005      	b.n	8003f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8f7 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f908 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0204 	mvn.w	r2, #4
 8003f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8db 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f8cd 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f8de 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0208 	mvn.w	r2, #8
 8003fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8b1 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8a3 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8b4 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0310 	and.w	r3, r3, #16
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0210 	mvn.w	r2, #16
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2208      	movs	r2, #8
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f887 	bl	800412a <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f879 	bl	8004116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 f88a 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b01      	cmp	r3, #1
 800403c:	d10e      	bne.n	800405c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d107      	bne.n	800405c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0201 	mvn.w	r2, #1
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fc90 	bl	800097c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	2b80      	cmp	r3, #128	; 0x80
 8004068:	d10e      	bne.n	8004088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004074:	2b80      	cmp	r3, #128	; 0x80
 8004076:	d107      	bne.n	8004088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f91a 	bl	80042bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004096:	d10e      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b80      	cmp	r3, #128	; 0x80
 80040a4:	d107      	bne.n	80040b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f90d 	bl	80042d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d10e      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b40      	cmp	r3, #64	; 0x40
 80040d0:	d107      	bne.n	80040e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f838 	bl	8004152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d10e      	bne.n	800410e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d107      	bne.n	800410e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f06f 0220 	mvn.w	r2, #32
 8004106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8cd 	bl	80042a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a40      	ldr	r2, [pc, #256]	; (800427c <TIM_Base_SetConfig+0x114>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d013      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d00f      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <TIM_Base_SetConfig+0x118>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3c      	ldr	r2, [pc, #240]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3b      	ldr	r2, [pc, #236]	; (8004288 <TIM_Base_SetConfig+0x120>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3a      	ldr	r2, [pc, #232]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a2f      	ldr	r2, [pc, #188]	; (800427c <TIM_Base_SetConfig+0x114>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d02b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d027      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <TIM_Base_SetConfig+0x118>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d023      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2b      	ldr	r2, [pc, #172]	; (8004284 <TIM_Base_SetConfig+0x11c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <TIM_Base_SetConfig+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a29      	ldr	r2, [pc, #164]	; (800428c <TIM_Base_SetConfig+0x124>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d017      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a28      	ldr	r2, [pc, #160]	; (8004290 <TIM_Base_SetConfig+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <TIM_Base_SetConfig+0x12c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00f      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a26      	ldr	r2, [pc, #152]	; (8004298 <TIM_Base_SetConfig+0x130>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00b      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <TIM_Base_SetConfig+0x134>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d007      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <TIM_Base_SetConfig+0x138>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <TIM_Base_SetConfig+0x13c>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d108      	bne.n	800422c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a0a      	ldr	r2, [pc, #40]	; (800427c <TIM_Base_SetConfig+0x114>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d003      	beq.n	8004260 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <TIM_Base_SetConfig+0x124>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40010400 	.word	0x40010400
 8004290:	40014000 	.word	0x40014000
 8004294:	40014400 	.word	0x40014400
 8004298:	40014800 	.word	0x40014800
 800429c:	40001800 	.word	0x40001800
 80042a0:	40001c00 	.word	0x40001c00
 80042a4:	40002000 	.word	0x40002000

080042a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e040      	b.n	8004378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fc48 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f990 	bl	8004648 <UART_SetConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e022      	b.n	8004378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fbe6 	bl	8004b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800434e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800435e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fc6d 	bl	8004c50 <UART_CheckIdleState>
 8004376:	4603      	mov	r3, r0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	; 0x28
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004394:	2b20      	cmp	r3, #32
 8004396:	f040 8081 	bne.w	800449c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_UART_Transmit+0x26>
 80043a0:	88fb      	ldrh	r3, [r7, #6]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e079      	b.n	800449e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_UART_Transmit+0x38>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e072      	b.n	800449e <HAL_UART_Transmit+0x11e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2221      	movs	r2, #33	; 0x21
 80043cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fc fd9b 	bl	8000f08 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	88fa      	ldrh	r2, [r7, #6]
 80043e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d108      	bne.n	8004400 <HAL_UART_Transmit+0x80>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d104      	bne.n	8004400 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e003      	b.n	8004408 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004410:	e02c      	b.n	800446c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	2200      	movs	r2, #0
 800441a:	2180      	movs	r1, #128	; 0x80
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc60 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e038      	b.n	800449e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	461a      	mov	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	3302      	adds	r3, #2
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	e007      	b.n	800445a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	781a      	ldrb	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3301      	adds	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1cc      	bne.n	8004412 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	2140      	movs	r1, #64	; 0x40
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fc2d 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e005      	b.n	800449e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b08a      	sub	sp, #40	; 0x28
 80044aa:	af02      	add	r7, sp, #8
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	f040 80be 	bne.w	800463c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Receive+0x26>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0b6      	b.n	800463e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_UART_Receive+0x38>
 80044da:	2302      	movs	r3, #2
 80044dc:	e0af      	b.n	800463e <HAL_UART_Receive+0x198>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044fa:	f7fc fd05 	bl	8000f08 <HAL_GetTick>
 80044fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	88fa      	ldrh	r2, [r7, #6]
 8004504:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004518:	d10e      	bne.n	8004538 <HAL_UART_Receive+0x92>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_UART_Receive+0x88>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800452c:	e02d      	b.n	800458a <HAL_UART_Receive+0xe4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	22ff      	movs	r2, #255	; 0xff
 8004532:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004536:	e028      	b.n	800458a <HAL_UART_Receive+0xe4>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_UART_Receive+0xb6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_UART_Receive+0xac>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	22ff      	movs	r2, #255	; 0xff
 800454c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004550:	e01b      	b.n	800458a <HAL_UART_Receive+0xe4>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	227f      	movs	r2, #127	; 0x7f
 8004556:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800455a:	e016      	b.n	800458a <HAL_UART_Receive+0xe4>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004564:	d10d      	bne.n	8004582 <HAL_UART_Receive+0xdc>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <HAL_UART_Receive+0xd2>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	227f      	movs	r2, #127	; 0x7f
 8004572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004576:	e008      	b.n	800458a <HAL_UART_Receive+0xe4>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	223f      	movs	r2, #63	; 0x3f
 800457c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004580:	e003      	b.n	800458a <HAL_UART_Receive+0xe4>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004590:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	d108      	bne.n	80045ae <HAL_UART_Receive+0x108>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
 80045ac:	e003      	b.n	80045b6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045be:	e032      	b.n	8004626 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2120      	movs	r1, #32
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fb89 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e031      	b.n	800463e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10c      	bne.n	80045fa <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	8a7b      	ldrh	r3, [r7, #18]
 80045ea:	4013      	ands	r3, r2
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	3302      	adds	r3, #2
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	e00c      	b.n	8004614 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004600:	b2da      	uxtb	r2, r3
 8004602:	8a7b      	ldrh	r3, [r7, #18]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4013      	ands	r3, r2
 8004608:	b2da      	uxtb	r2, r3
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1c6      	bne.n	80045c0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4ba7      	ldr	r3, [pc, #668]	; (8004910 <UART_SetConfig+0x2c8>)
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	6979      	ldr	r1, [r7, #20]
 800467c:	430b      	orrs	r3, r1
 800467e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a95      	ldr	r2, [pc, #596]	; (8004914 <UART_SetConfig+0x2cc>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d120      	bne.n	8004706 <UART_SetConfig+0xbe>
 80046c4:	4b94      	ldr	r3, [pc, #592]	; (8004918 <UART_SetConfig+0x2d0>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	d816      	bhi.n	8004700 <UART_SetConfig+0xb8>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <UART_SetConfig+0x90>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046ef 	.word	0x080046ef
 80046e4:	080046fb 	.word	0x080046fb
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e14f      	b.n	800498e <UART_SetConfig+0x346>
 80046ee:	2302      	movs	r3, #2
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e14c      	b.n	800498e <UART_SetConfig+0x346>
 80046f4:	2304      	movs	r3, #4
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e149      	b.n	800498e <UART_SetConfig+0x346>
 80046fa:	2308      	movs	r3, #8
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e146      	b.n	800498e <UART_SetConfig+0x346>
 8004700:	2310      	movs	r3, #16
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e143      	b.n	800498e <UART_SetConfig+0x346>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a84      	ldr	r2, [pc, #528]	; (800491c <UART_SetConfig+0x2d4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d132      	bne.n	8004776 <UART_SetConfig+0x12e>
 8004710:	4b81      	ldr	r3, [pc, #516]	; (8004918 <UART_SetConfig+0x2d0>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d828      	bhi.n	8004770 <UART_SetConfig+0x128>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0xdc>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004759 	.word	0x08004759
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
 8004734:	08004765 	.word	0x08004765
 8004738:	08004771 	.word	0x08004771
 800473c:	08004771 	.word	0x08004771
 8004740:	08004771 	.word	0x08004771
 8004744:	0800475f 	.word	0x0800475f
 8004748:	08004771 	.word	0x08004771
 800474c:	08004771 	.word	0x08004771
 8004750:	08004771 	.word	0x08004771
 8004754:	0800476b 	.word	0x0800476b
 8004758:	2300      	movs	r3, #0
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e117      	b.n	800498e <UART_SetConfig+0x346>
 800475e:	2302      	movs	r3, #2
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e114      	b.n	800498e <UART_SetConfig+0x346>
 8004764:	2304      	movs	r3, #4
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e111      	b.n	800498e <UART_SetConfig+0x346>
 800476a:	2308      	movs	r3, #8
 800476c:	77fb      	strb	r3, [r7, #31]
 800476e:	e10e      	b.n	800498e <UART_SetConfig+0x346>
 8004770:	2310      	movs	r3, #16
 8004772:	77fb      	strb	r3, [r7, #31]
 8004774:	e10b      	b.n	800498e <UART_SetConfig+0x346>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a69      	ldr	r2, [pc, #420]	; (8004920 <UART_SetConfig+0x2d8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d120      	bne.n	80047c2 <UART_SetConfig+0x17a>
 8004780:	4b65      	ldr	r3, [pc, #404]	; (8004918 <UART_SetConfig+0x2d0>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800478a:	2b30      	cmp	r3, #48	; 0x30
 800478c:	d013      	beq.n	80047b6 <UART_SetConfig+0x16e>
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d814      	bhi.n	80047bc <UART_SetConfig+0x174>
 8004792:	2b20      	cmp	r3, #32
 8004794:	d009      	beq.n	80047aa <UART_SetConfig+0x162>
 8004796:	2b20      	cmp	r3, #32
 8004798:	d810      	bhi.n	80047bc <UART_SetConfig+0x174>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <UART_SetConfig+0x15c>
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d006      	beq.n	80047b0 <UART_SetConfig+0x168>
 80047a2:	e00b      	b.n	80047bc <UART_SetConfig+0x174>
 80047a4:	2300      	movs	r3, #0
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e0f1      	b.n	800498e <UART_SetConfig+0x346>
 80047aa:	2302      	movs	r3, #2
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e0ee      	b.n	800498e <UART_SetConfig+0x346>
 80047b0:	2304      	movs	r3, #4
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0eb      	b.n	800498e <UART_SetConfig+0x346>
 80047b6:	2308      	movs	r3, #8
 80047b8:	77fb      	strb	r3, [r7, #31]
 80047ba:	e0e8      	b.n	800498e <UART_SetConfig+0x346>
 80047bc:	2310      	movs	r3, #16
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e0e5      	b.n	800498e <UART_SetConfig+0x346>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a57      	ldr	r2, [pc, #348]	; (8004924 <UART_SetConfig+0x2dc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d120      	bne.n	800480e <UART_SetConfig+0x1c6>
 80047cc:	4b52      	ldr	r3, [pc, #328]	; (8004918 <UART_SetConfig+0x2d0>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047d6:	2bc0      	cmp	r3, #192	; 0xc0
 80047d8:	d013      	beq.n	8004802 <UART_SetConfig+0x1ba>
 80047da:	2bc0      	cmp	r3, #192	; 0xc0
 80047dc:	d814      	bhi.n	8004808 <UART_SetConfig+0x1c0>
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d009      	beq.n	80047f6 <UART_SetConfig+0x1ae>
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d810      	bhi.n	8004808 <UART_SetConfig+0x1c0>
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <UART_SetConfig+0x1a8>
 80047ea:	2b40      	cmp	r3, #64	; 0x40
 80047ec:	d006      	beq.n	80047fc <UART_SetConfig+0x1b4>
 80047ee:	e00b      	b.n	8004808 <UART_SetConfig+0x1c0>
 80047f0:	2300      	movs	r3, #0
 80047f2:	77fb      	strb	r3, [r7, #31]
 80047f4:	e0cb      	b.n	800498e <UART_SetConfig+0x346>
 80047f6:	2302      	movs	r3, #2
 80047f8:	77fb      	strb	r3, [r7, #31]
 80047fa:	e0c8      	b.n	800498e <UART_SetConfig+0x346>
 80047fc:	2304      	movs	r3, #4
 80047fe:	77fb      	strb	r3, [r7, #31]
 8004800:	e0c5      	b.n	800498e <UART_SetConfig+0x346>
 8004802:	2308      	movs	r3, #8
 8004804:	77fb      	strb	r3, [r7, #31]
 8004806:	e0c2      	b.n	800498e <UART_SetConfig+0x346>
 8004808:	2310      	movs	r3, #16
 800480a:	77fb      	strb	r3, [r7, #31]
 800480c:	e0bf      	b.n	800498e <UART_SetConfig+0x346>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a45      	ldr	r2, [pc, #276]	; (8004928 <UART_SetConfig+0x2e0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d125      	bne.n	8004864 <UART_SetConfig+0x21c>
 8004818:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <UART_SetConfig+0x2d0>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004826:	d017      	beq.n	8004858 <UART_SetConfig+0x210>
 8004828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800482c:	d817      	bhi.n	800485e <UART_SetConfig+0x216>
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d00b      	beq.n	800484c <UART_SetConfig+0x204>
 8004834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004838:	d811      	bhi.n	800485e <UART_SetConfig+0x216>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <UART_SetConfig+0x1fe>
 800483e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004842:	d006      	beq.n	8004852 <UART_SetConfig+0x20a>
 8004844:	e00b      	b.n	800485e <UART_SetConfig+0x216>
 8004846:	2300      	movs	r3, #0
 8004848:	77fb      	strb	r3, [r7, #31]
 800484a:	e0a0      	b.n	800498e <UART_SetConfig+0x346>
 800484c:	2302      	movs	r3, #2
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e09d      	b.n	800498e <UART_SetConfig+0x346>
 8004852:	2304      	movs	r3, #4
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e09a      	b.n	800498e <UART_SetConfig+0x346>
 8004858:	2308      	movs	r3, #8
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e097      	b.n	800498e <UART_SetConfig+0x346>
 800485e:	2310      	movs	r3, #16
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e094      	b.n	800498e <UART_SetConfig+0x346>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a30      	ldr	r2, [pc, #192]	; (800492c <UART_SetConfig+0x2e4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d125      	bne.n	80048ba <UART_SetConfig+0x272>
 800486e:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <UART_SetConfig+0x2d0>)
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004874:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004878:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800487c:	d017      	beq.n	80048ae <UART_SetConfig+0x266>
 800487e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004882:	d817      	bhi.n	80048b4 <UART_SetConfig+0x26c>
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d00b      	beq.n	80048a2 <UART_SetConfig+0x25a>
 800488a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488e:	d811      	bhi.n	80048b4 <UART_SetConfig+0x26c>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <UART_SetConfig+0x254>
 8004894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004898:	d006      	beq.n	80048a8 <UART_SetConfig+0x260>
 800489a:	e00b      	b.n	80048b4 <UART_SetConfig+0x26c>
 800489c:	2301      	movs	r3, #1
 800489e:	77fb      	strb	r3, [r7, #31]
 80048a0:	e075      	b.n	800498e <UART_SetConfig+0x346>
 80048a2:	2302      	movs	r3, #2
 80048a4:	77fb      	strb	r3, [r7, #31]
 80048a6:	e072      	b.n	800498e <UART_SetConfig+0x346>
 80048a8:	2304      	movs	r3, #4
 80048aa:	77fb      	strb	r3, [r7, #31]
 80048ac:	e06f      	b.n	800498e <UART_SetConfig+0x346>
 80048ae:	2308      	movs	r3, #8
 80048b0:	77fb      	strb	r3, [r7, #31]
 80048b2:	e06c      	b.n	800498e <UART_SetConfig+0x346>
 80048b4:	2310      	movs	r3, #16
 80048b6:	77fb      	strb	r3, [r7, #31]
 80048b8:	e069      	b.n	800498e <UART_SetConfig+0x346>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1c      	ldr	r2, [pc, #112]	; (8004930 <UART_SetConfig+0x2e8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d137      	bne.n	8004934 <UART_SetConfig+0x2ec>
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <UART_SetConfig+0x2d0>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048d2:	d017      	beq.n	8004904 <UART_SetConfig+0x2bc>
 80048d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048d8:	d817      	bhi.n	800490a <UART_SetConfig+0x2c2>
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048de:	d00b      	beq.n	80048f8 <UART_SetConfig+0x2b0>
 80048e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e4:	d811      	bhi.n	800490a <UART_SetConfig+0x2c2>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <UART_SetConfig+0x2aa>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d006      	beq.n	80048fe <UART_SetConfig+0x2b6>
 80048f0:	e00b      	b.n	800490a <UART_SetConfig+0x2c2>
 80048f2:	2300      	movs	r3, #0
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e04a      	b.n	800498e <UART_SetConfig+0x346>
 80048f8:	2302      	movs	r3, #2
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e047      	b.n	800498e <UART_SetConfig+0x346>
 80048fe:	2304      	movs	r3, #4
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e044      	b.n	800498e <UART_SetConfig+0x346>
 8004904:	2308      	movs	r3, #8
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e041      	b.n	800498e <UART_SetConfig+0x346>
 800490a:	2310      	movs	r3, #16
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e03e      	b.n	800498e <UART_SetConfig+0x346>
 8004910:	efff69f3 	.word	0xefff69f3
 8004914:	40011000 	.word	0x40011000
 8004918:	40023800 	.word	0x40023800
 800491c:	40004400 	.word	0x40004400
 8004920:	40004800 	.word	0x40004800
 8004924:	40004c00 	.word	0x40004c00
 8004928:	40005000 	.word	0x40005000
 800492c:	40011400 	.word	0x40011400
 8004930:	40007800 	.word	0x40007800
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a71      	ldr	r2, [pc, #452]	; (8004b00 <UART_SetConfig+0x4b8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d125      	bne.n	800498a <UART_SetConfig+0x342>
 800493e:	4b71      	ldr	r3, [pc, #452]	; (8004b04 <UART_SetConfig+0x4bc>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004948:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800494c:	d017      	beq.n	800497e <UART_SetConfig+0x336>
 800494e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004952:	d817      	bhi.n	8004984 <UART_SetConfig+0x33c>
 8004954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004958:	d00b      	beq.n	8004972 <UART_SetConfig+0x32a>
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d811      	bhi.n	8004984 <UART_SetConfig+0x33c>
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <UART_SetConfig+0x324>
 8004964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004968:	d006      	beq.n	8004978 <UART_SetConfig+0x330>
 800496a:	e00b      	b.n	8004984 <UART_SetConfig+0x33c>
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e00d      	b.n	800498e <UART_SetConfig+0x346>
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e00a      	b.n	800498e <UART_SetConfig+0x346>
 8004978:	2304      	movs	r3, #4
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e007      	b.n	800498e <UART_SetConfig+0x346>
 800497e:	2308      	movs	r3, #8
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e004      	b.n	800498e <UART_SetConfig+0x346>
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e001      	b.n	800498e <UART_SetConfig+0x346>
 800498a:	2310      	movs	r3, #16
 800498c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004996:	d15b      	bne.n	8004a50 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004998:	7ffb      	ldrb	r3, [r7, #31]
 800499a:	2b08      	cmp	r3, #8
 800499c:	d827      	bhi.n	80049ee <UART_SetConfig+0x3a6>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x35c>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fe fd2a 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80049cc:	61b8      	str	r0, [r7, #24]
        break;
 80049ce:	e013      	b.n	80049f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fe fd3a 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 80049d4:	61b8      	str	r0, [r7, #24]
        break;
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b4b      	ldr	r3, [pc, #300]	; (8004b08 <UART_SetConfig+0x4c0>)
 80049da:	61bb      	str	r3, [r7, #24]
        break;
 80049dc:	e00c      	b.n	80049f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fe fc31 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80049e2:	61b8      	str	r0, [r7, #24]
        break;
 80049e4:	e008      	b.n	80049f8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	61bb      	str	r3, [r7, #24]
        break;
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	77bb      	strb	r3, [r7, #30]
        break;
 80049f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d074      	beq.n	8004ae8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b0f      	cmp	r3, #15
 8004a1a:	d916      	bls.n	8004a4a <UART_SetConfig+0x402>
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d212      	bcs.n	8004a4a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	f023 030f 	bic.w	r3, r3, #15
 8004a2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	89fb      	ldrh	r3, [r7, #14]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	89fa      	ldrh	r2, [r7, #14]
 8004a46:	60da      	str	r2, [r3, #12]
 8004a48:	e04e      	b.n	8004ae8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77bb      	strb	r3, [r7, #30]
 8004a4e:	e04b      	b.n	8004ae8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a50:	7ffb      	ldrb	r3, [r7, #31]
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d827      	bhi.n	8004aa6 <UART_SetConfig+0x45e>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x414>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fe fcce 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004a84:	61b8      	str	r0, [r7, #24]
        break;
 8004a86:	e013      	b.n	8004ab0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fe fcde 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	61b8      	str	r0, [r7, #24]
        break;
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <UART_SetConfig+0x4c0>)
 8004a92:	61bb      	str	r3, [r7, #24]
        break;
 8004a94:	e00c      	b.n	8004ab0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fe fbd5 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 8004a9a:	61b8      	str	r0, [r7, #24]
        break;
 8004a9c:	e008      	b.n	8004ab0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	61bb      	str	r3, [r7, #24]
        break;
 8004aa4:	e004      	b.n	8004ab0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	77bb      	strb	r3, [r7, #30]
        break;
 8004aae:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085a      	lsrs	r2, r3, #1
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d908      	bls.n	8004ae4 <UART_SetConfig+0x49c>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d204      	bcs.n	8004ae4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e001      	b.n	8004ae8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004af4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	40007c00 	.word	0x40007c00
 8004b04:	40023800 	.word	0x40023800
 8004b08:	00f42400 	.word	0x00f42400

08004b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00a      	beq.n	8004bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00a      	beq.n	8004be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01a      	beq.n	8004c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c0a:	d10a      	bne.n	8004c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	605a      	str	r2, [r3, #4]
  }
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c60:	f7fc f952 	bl	8000f08 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10e      	bne.n	8004c92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f82d 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d001      	beq.n	8004c92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e023      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d10e      	bne.n	8004cbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ca0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f817 	bl	8004ce2 <UART_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e00d      	b.n	8004cda <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cf2:	e05e      	b.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfa:	d05a      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cfc:	f7fc f904 	bl	8000f08 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d302      	bcc.n	8004d12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d11b      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d20:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0201 	bic.w	r2, r2, #1
 8004d30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e043      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d02c      	beq.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d66:	d124      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e00f      	b.n	8004dd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69da      	ldr	r2, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d091      	beq.n	8004cf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ddc:	b084      	sub	sp, #16
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	f107 001c 	add.w	r0, r7, #28
 8004dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d120      	bne.n	8004e36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <USB_CoreInit+0xac>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d105      	bne.n	8004e2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fa5a 	bl	80052e4 <USB_CoreReset>
 8004e30:	4603      	mov	r3, r0
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e010      	b.n	8004e58 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa4e 	bl	80052e4 <USB_CoreReset>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d10b      	bne.n	8004e76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f043 0206 	orr.w	r2, r3, #6
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e82:	b004      	add	sp, #16
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	ffbdffbf 	.word	0xffbdffbf

08004e8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f023 0201 	bic.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ec6:	78fb      	ldrb	r3, [r7, #3]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	e00b      	b.n	8004ef2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e001      	b.n	8004ef2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e003      	b.n	8004efa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ef2:	2032      	movs	r0, #50	; 0x32
 8004ef4:	f7fc f814 	bl	8000f20 <HAL_Delay>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f04:	b084      	sub	sp, #16
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b086      	sub	sp, #24
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e009      	b.n	8004f38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3340      	adds	r3, #64	; 0x40
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	3301      	adds	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b0e      	cmp	r3, #14
 8004f3c:	d9f2      	bls.n	8004f24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11c      	bne.n	8004f7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f52:	f043 0302 	orr.w	r3, r3, #2
 8004f56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	e005      	b.n	8004f8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f90:	461a      	mov	r2, r3
 8004f92:	2300      	movs	r3, #0
 8004f94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	680b      	ldr	r3, [r1, #0]
 8004fa8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10c      	bne.n	8004fca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d104      	bne.n	8004fc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f959 	bl	8005270 <USB_SetDevSpeed>
 8004fbe:	e018      	b.n	8004ff2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f954 	bl	8005270 <USB_SetDevSpeed>
 8004fc8:	e013      	b.n	8004ff2 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d10c      	bne.n	8004fea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f949 	bl	8005270 <USB_SetDevSpeed>
 8004fde:	e008      	b.n	8004ff2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f944 	bl	8005270 <USB_SetDevSpeed>
 8004fe8:	e003      	b.n	8004ff2 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004fea:	2103      	movs	r1, #3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f93f 	bl	8005270 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ff2:	2110      	movs	r1, #16
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f8f3 	bl	80051e0 <USB_FlushTxFifo>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f911 	bl	800522c <USB_FlushRxFifo>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	461a      	mov	r2, r3
 800501c:	2300      	movs	r3, #0
 800501e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	461a      	mov	r2, r3
 8005034:	2300      	movs	r3, #0
 8005036:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	e043      	b.n	80050c6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005054:	d118      	bne.n	8005088 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	461a      	mov	r2, r3
 800506a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e013      	b.n	800509a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507e:	461a      	mov	r2, r3
 8005080:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e008      	b.n	800509a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a6:	461a      	mov	r2, r3
 80050a8:	2300      	movs	r3, #0
 80050aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3301      	adds	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d3b7      	bcc.n	800503e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ce:	2300      	movs	r3, #0
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e043      	b.n	800515c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ea:	d118      	bne.n	800511e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fe:	461a      	mov	r2, r3
 8005100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e013      	b.n	8005130 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4413      	add	r3, r2
 8005110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005114:	461a      	mov	r2, r3
 8005116:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e008      	b.n	8005130 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	461a      	mov	r2, r3
 800513e:	2300      	movs	r3, #0
 8005140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005154:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	3301      	adds	r3, #1
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	429a      	cmp	r2, r3
 8005162:	d3b7      	bcc.n	80050d4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005176:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005184:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	f043 0210 	orr.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <USB_DevInit+0x2d4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d005      	beq.n	80051b6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f043 0208 	orr.w	r2, r3, #8
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d105      	bne.n	80051c8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699a      	ldr	r2, [r3, #24]
 80051c0:	4b06      	ldr	r3, [pc, #24]	; (80051dc <USB_DevInit+0x2d8>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80051c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80051d4:	b004      	add	sp, #16
 80051d6:	4770      	bx	lr
 80051d8:	803c3800 	.word	0x803c3800
 80051dc:	40000004 	.word	0x40000004

080051e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <USB_FlushTxFifo+0x48>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b20      	cmp	r3, #32
 8005216:	d0f0      	beq.n	80051fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	00030d40 	.word	0x00030d40

0800522c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2210      	movs	r2, #16
 800523c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <USB_FlushRxFifo+0x40>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e006      	b.n	800525e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	2b10      	cmp	r3, #16
 800525a:	d0f0      	beq.n	800523e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	00030d40 	.word	0x00030d40

08005270 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	78fb      	ldrb	r3, [r7, #3]
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052bc:	f023 0303 	bic.w	r3, r3, #3
 80052c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <USB_CoreReset+0x64>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e01b      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	daf2      	bge.n	80052f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f043 0201 	orr.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <USB_CoreReset+0x64>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e006      	b.n	800533a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d0f0      	beq.n	800531a <USB_CoreReset+0x36>

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	00030d40 	.word	0x00030d40

0800534c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005352:	2100      	movs	r1, #0
 8005354:	2000      	movs	r0, #0
 8005356:	f004 fd19 	bl	8009d8c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800535a:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <MX_LWIP_Init+0xb8>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005360:	4b29      	ldr	r3, [pc, #164]	; (8005408 <MX_LWIP_Init+0xbc>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <MX_LWIP_Init+0xc0>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800536c:	4b28      	ldr	r3, [pc, #160]	; (8005410 <MX_LWIP_Init+0xc4>)
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	4b28      	ldr	r3, [pc, #160]	; (8005414 <MX_LWIP_Init+0xc8>)
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	2300      	movs	r3, #0
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4b24      	ldr	r3, [pc, #144]	; (800540c <MX_LWIP_Init+0xc0>)
 800537a:	4a23      	ldr	r2, [pc, #140]	; (8005408 <MX_LWIP_Init+0xbc>)
 800537c:	4921      	ldr	r1, [pc, #132]	; (8005404 <MX_LWIP_Init+0xb8>)
 800537e:	4826      	ldr	r0, [pc, #152]	; (8005418 <MX_LWIP_Init+0xcc>)
 8005380:	f005 fa88 	bl	800a894 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005384:	4824      	ldr	r0, [pc, #144]	; (8005418 <MX_LWIP_Init+0xcc>)
 8005386:	f005 fc3f 	bl	800ac08 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800538a:	4b23      	ldr	r3, [pc, #140]	; (8005418 <MX_LWIP_Init+0xcc>)
 800538c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005390:	089b      	lsrs	r3, r3, #2
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800539c:	481e      	ldr	r0, [pc, #120]	; (8005418 <MX_LWIP_Init+0xcc>)
 800539e:	f005 fc43 	bl	800ac28 <netif_set_up>
 80053a2:	e002      	b.n	80053aa <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80053a4:	481c      	ldr	r0, [pc, #112]	; (8005418 <MX_LWIP_Init+0xcc>)
 80053a6:	f005 fcab 	bl	800ad00 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80053aa:	491c      	ldr	r1, [pc, #112]	; (800541c <MX_LWIP_Init+0xd0>)
 80053ac:	481a      	ldr	r0, [pc, #104]	; (8005418 <MX_LWIP_Init+0xcc>)
 80053ae:	f005 fd41 	bl	800ae34 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2101      	movs	r1, #1
 80053b6:	2001      	movs	r0, #1
 80053b8:	f000 ff10 	bl	80061dc <osSemaphoreNew>
 80053bc:	4603      	mov	r3, r0
 80053be:	4a18      	ldr	r2, [pc, #96]	; (8005420 <MX_LWIP_Init+0xd4>)
 80053c0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <MX_LWIP_Init+0xd8>)
 80053c4:	4a14      	ldr	r2, [pc, #80]	; (8005418 <MX_LWIP_Init+0xcc>)
 80053c6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80053c8:	4b15      	ldr	r3, [pc, #84]	; (8005420 <MX_LWIP_Init+0xd4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <MX_LWIP_Init+0xd8>)
 80053ce:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80053d0:	2224      	movs	r2, #36	; 0x24
 80053d2:	2100      	movs	r1, #0
 80053d4:	4814      	ldr	r0, [pc, #80]	; (8005428 <MX_LWIP_Init+0xdc>)
 80053d6:	f010 fe4d 	bl	8016074 <memset>
  attributes.name = "LinkThr";
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <MX_LWIP_Init+0xdc>)
 80053dc:	4a13      	ldr	r2, [pc, #76]	; (800542c <MX_LWIP_Init+0xe0>)
 80053de:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <MX_LWIP_Init+0xdc>)
 80053e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053e6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <MX_LWIP_Init+0xdc>)
 80053ea:	2210      	movs	r2, #16
 80053ec:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80053ee:	4a0e      	ldr	r2, [pc, #56]	; (8005428 <MX_LWIP_Init+0xdc>)
 80053f0:	490c      	ldr	r1, [pc, #48]	; (8005424 <MX_LWIP_Init+0xd8>)
 80053f2:	480f      	ldr	r0, [pc, #60]	; (8005430 <MX_LWIP_Init+0xe4>)
 80053f4:	f000 fcd6 	bl	8005da4 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80053f8:	4807      	ldr	r0, [pc, #28]	; (8005418 <MX_LWIP_Init+0xcc>)
 80053fa:	f00c fe7f 	bl	80120fc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200050ac 	.word	0x200050ac
 8005408:	200050b0 	.word	0x200050b0
 800540c:	200050b4 	.word	0x200050b4
 8005410:	08009cc9 	.word	0x08009cc9
 8005414:	08005a81 	.word	0x08005a81
 8005418:	20005074 	.word	0x20005074
 800541c:	08005b65 	.word	0x08005b65
 8005420:	200000a4 	.word	0x200000a4
 8005424:	20005048 	.word	0x20005048
 8005428:	20005050 	.word	0x20005050
 800542c:	080172a4 	.word	0x080172a4
 8005430:	08005aed 	.word	0x08005aed

08005434 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08e      	sub	sp, #56	; 0x38
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a52      	ldr	r2, [pc, #328]	; (800559c <HAL_ETH_MspInit+0x168>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f040 809e 	bne.w	8005594 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4a50      	ldr	r2, [pc, #320]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 800545e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005462:	6313      	str	r3, [r2, #48]	; 0x30
 8005464:	4b4e      	ldr	r3, [pc, #312]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	4b4b      	ldr	r3, [pc, #300]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	4a4a      	ldr	r2, [pc, #296]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 8005476:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800547a:	6313      	str	r3, [r2, #48]	; 0x30
 800547c:	4b48      	ldr	r3, [pc, #288]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4b45      	ldr	r3, [pc, #276]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4a44      	ldr	r2, [pc, #272]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 800548e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005492:	6313      	str	r3, [r2, #48]	; 0x30
 8005494:	4b42      	ldr	r3, [pc, #264]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a0:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	4a3e      	ldr	r2, [pc, #248]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054a6:	f043 0304 	orr.w	r3, r3, #4
 80054aa:	6313      	str	r3, [r2, #48]	; 0x30
 80054ac:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	f003 0304 	and.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b8:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4a38      	ldr	r2, [pc, #224]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6313      	str	r3, [r2, #48]	; 0x30
 80054c4:	4b36      	ldr	r3, [pc, #216]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d0:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054d6:	f043 0302 	orr.w	r3, r3, #2
 80054da:	6313      	str	r3, [r2, #48]	; 0x30
 80054dc:	4b30      	ldr	r3, [pc, #192]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	f003 0302 	and.w	r3, r3, #2
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80054e8:	4b2d      	ldr	r3, [pc, #180]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054f2:	6313      	str	r3, [r2, #48]	; 0x30
 80054f4:	4b2a      	ldr	r3, [pc, #168]	; (80055a0 <HAL_ETH_MspInit+0x16c>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005500:	2332      	movs	r3, #50	; 0x32
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005504:	2302      	movs	r3, #2
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005508:	2300      	movs	r3, #0
 800550a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800550c:	2303      	movs	r3, #3
 800550e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005510:	230b      	movs	r3, #11
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005518:	4619      	mov	r1, r3
 800551a:	4822      	ldr	r0, [pc, #136]	; (80055a4 <HAL_ETH_MspInit+0x170>)
 800551c:	f7fc ff8a 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005520:	2386      	movs	r3, #134	; 0x86
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005524:	2302      	movs	r3, #2
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552c:	2303      	movs	r3, #3
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005530:	230b      	movs	r3, #11
 8005532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005538:	4619      	mov	r1, r3
 800553a:	481b      	ldr	r0, [pc, #108]	; (80055a8 <HAL_ETH_MspInit+0x174>)
 800553c:	f7fc ff7a 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005546:	2302      	movs	r3, #2
 8005548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554a:	2300      	movs	r3, #0
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554e:	2303      	movs	r3, #3
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005552:	230b      	movs	r3, #11
 8005554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800555a:	4619      	mov	r1, r3
 800555c:	4813      	ldr	r0, [pc, #76]	; (80055ac <HAL_ETH_MspInit+0x178>)
 800555e:	f7fc ff69 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005562:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005568:	2302      	movs	r3, #2
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005570:	2303      	movs	r3, #3
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005574:	230b      	movs	r3, #11
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800557c:	4619      	mov	r1, r3
 800557e:	480c      	ldr	r0, [pc, #48]	; (80055b0 <HAL_ETH_MspInit+0x17c>)
 8005580:	f7fc ff58 	bl	8002434 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005584:	2200      	movs	r2, #0
 8005586:	2105      	movs	r1, #5
 8005588:	203d      	movs	r0, #61	; 0x3d
 800558a:	f7fb fda5 	bl	80010d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800558e:	203d      	movs	r0, #61	; 0x3d
 8005590:	f7fb fdbe 	bl	8001110 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005594:	bf00      	nop
 8005596:	3738      	adds	r7, #56	; 0x38
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40028000 	.word	0x40028000
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40020800 	.word	0x40020800
 80055a8:	40020000 	.word	0x40020000
 80055ac:	40020400 	.word	0x40020400
 80055b0:	40021800 	.word	0x40021800

080055b4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_ETH_RxCpltCallback+0x1c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 ff0d 	bl	80063e0 <osSemaphoreRelease>
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	200000a8 	.word	0x200000a8

080055d4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b090      	sub	sp, #64	; 0x40
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80055e0:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <low_level_init+0x184>)
 80055e2:	4a5e      	ldr	r2, [pc, #376]	; (800575c <low_level_init+0x188>)
 80055e4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80055e6:	4b5c      	ldr	r3, [pc, #368]	; (8005758 <low_level_init+0x184>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80055ec:	4b5a      	ldr	r3, [pc, #360]	; (8005758 <low_level_init+0x184>)
 80055ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80055f2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <low_level_init+0x184>)
 80055f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fa:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80055fc:	4b56      	ldr	r3, [pc, #344]	; (8005758 <low_level_init+0x184>)
 80055fe:	2200      	movs	r2, #0
 8005600:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005602:	2300      	movs	r3, #0
 8005604:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800560a:	23e1      	movs	r3, #225	; 0xe1
 800560c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800560e:	2300      	movs	r3, #0
 8005610:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005612:	2300      	movs	r3, #0
 8005614:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8005616:	2300      	movs	r3, #0
 8005618:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800561a:	4a4f      	ldr	r2, [pc, #316]	; (8005758 <low_level_init+0x184>)
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005622:	4b4d      	ldr	r3, [pc, #308]	; (8005758 <low_level_init+0x184>)
 8005624:	2201      	movs	r2, #1
 8005626:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005628:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <low_level_init+0x184>)
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <low_level_init+0x184>)
 8005630:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005634:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005636:	4848      	ldr	r0, [pc, #288]	; (8005758 <low_level_init+0x184>)
 8005638:	f7fb fd78 	bl	800112c <HAL_ETH_Init>
 800563c:	4603      	mov	r3, r0
 800563e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005646:	2b00      	cmp	r3, #0
 8005648:	d108      	bne.n	800565c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005650:	f043 0304 	orr.w	r3, r3, #4
 8005654:	b2da      	uxtb	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800565c:	2304      	movs	r3, #4
 800565e:	4a40      	ldr	r2, [pc, #256]	; (8005760 <low_level_init+0x18c>)
 8005660:	4940      	ldr	r1, [pc, #256]	; (8005764 <low_level_init+0x190>)
 8005662:	483d      	ldr	r0, [pc, #244]	; (8005758 <low_level_init+0x184>)
 8005664:	f7fb fefc 	bl	8001460 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005668:	2304      	movs	r3, #4
 800566a:	4a3f      	ldr	r2, [pc, #252]	; (8005768 <low_level_init+0x194>)
 800566c:	493f      	ldr	r1, [pc, #252]	; (800576c <low_level_init+0x198>)
 800566e:	483a      	ldr	r0, [pc, #232]	; (8005758 <low_level_init+0x184>)
 8005670:	f7fb ff5f 	bl	8001532 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2206      	movs	r2, #6
 8005678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800567c:	4b36      	ldr	r3, [pc, #216]	; (8005758 <low_level_init+0x184>)
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005688:	4b33      	ldr	r3, [pc, #204]	; (8005758 <low_level_init+0x184>)
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	785a      	ldrb	r2, [r3, #1]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005694:	4b30      	ldr	r3, [pc, #192]	; (8005758 <low_level_init+0x184>)
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	789a      	ldrb	r2, [r3, #2]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80056a0:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <low_level_init+0x184>)
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	78da      	ldrb	r2, [r3, #3]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80056ac:	4b2a      	ldr	r3, [pc, #168]	; (8005758 <low_level_init+0x184>)
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	791a      	ldrb	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80056b8:	4b27      	ldr	r3, [pc, #156]	; (8005758 <low_level_init+0x184>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	795a      	ldrb	r2, [r3, #5]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056ca:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056d2:	f043 030a 	orr.w	r3, r3, #10
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80056de:	2200      	movs	r2, #0
 80056e0:	2101      	movs	r1, #1
 80056e2:	2001      	movs	r0, #1
 80056e4:	f000 fd7a 	bl	80061dc <osSemaphoreNew>
 80056e8:	4603      	mov	r3, r0
 80056ea:	4a21      	ldr	r2, [pc, #132]	; (8005770 <low_level_init+0x19c>)
 80056ec:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80056ee:	f107 0314 	add.w	r3, r7, #20
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f010 fcbc 	bl	8016074 <memset>
  attributes.name = "EthIf";
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <low_level_init+0x1a0>)
 80056fe:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005700:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8005706:	2330      	movs	r3, #48	; 0x30
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800570a:	f107 0314 	add.w	r3, r7, #20
 800570e:	461a      	mov	r2, r3
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4819      	ldr	r0, [pc, #100]	; (8005778 <low_level_init+0x1a4>)
 8005714:	f000 fb46 	bl	8005da4 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8005718:	480f      	ldr	r0, [pc, #60]	; (8005758 <low_level_init+0x184>)
 800571a:	f7fc fa32 	bl	8001b82 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800571e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005722:	461a      	mov	r2, r3
 8005724:	211d      	movs	r1, #29
 8005726:	480c      	ldr	r0, [pc, #48]	; (8005758 <low_level_init+0x184>)
 8005728:	f7fc f95d 	bl	80019e6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f043 030b 	orr.w	r3, r3, #11
 8005732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005736:	461a      	mov	r2, r3
 8005738:	211d      	movs	r1, #29
 800573a:	4807      	ldr	r0, [pc, #28]	; (8005758 <low_level_init+0x184>)
 800573c:	f7fc f9bb 	bl	8001ab6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005744:	461a      	mov	r2, r3
 8005746:	211d      	movs	r1, #29
 8005748:	4803      	ldr	r0, [pc, #12]	; (8005758 <low_level_init+0x184>)
 800574a:	f7fc f94c 	bl	80019e6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800574e:	bf00      	nop
 8005750:	3740      	adds	r7, #64	; 0x40
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20006988 	.word	0x20006988
 800575c:	40028000 	.word	0x40028000
 8005760:	200069d0 	.word	0x200069d0
 8005764:	200050b8 	.word	0x200050b8
 8005768:	20005138 	.word	0x20005138
 800576c:	20006908 	.word	0x20006908
 8005770:	200000a8 	.word	0x200000a8
 8005774:	080172ac 	.word	0x080172ac
 8005778:	08005a21 	.word	0x08005a21

0800577c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005786:	4b4b      	ldr	r3, [pc, #300]	; (80058b4 <low_level_output+0x138>)
 8005788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800579e:	4b45      	ldr	r3, [pc, #276]	; (80058b4 <low_level_output+0x138>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	e05a      	b.n	8005864 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	da03      	bge.n	80057be <low_level_output+0x42>
      {
        errval = ERR_USE;
 80057b6:	23f8      	movs	r3, #248	; 0xf8
 80057b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80057bc:	e05c      	b.n	8005878 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	895b      	ldrh	r3, [r3, #10]
 80057c2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80057c8:	e02f      	b.n	800582a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	18d0      	adds	r0, r2, r3
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	18d1      	adds	r1, r2, r3
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	461a      	mov	r2, r3
 80057e2:	f010 fc39 	bl	8016058 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da03      	bge.n	80057fc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80057f4:	23f8      	movs	r3, #248	; 0xf8
 80057f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80057fa:	e03d      	b.n	8005878 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800580c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005818:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005824:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	4413      	add	r3, r2
 8005830:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005834:	4293      	cmp	r3, r2
 8005836:	d8c8      	bhi.n	80057ca <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	18d0      	adds	r0, r2, r3
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	4413      	add	r3, r2
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4619      	mov	r1, r3
 800584a:	f010 fc05 	bl	8016058 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	623b      	str	r3, [r7, #32]
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1a1      	bne.n	80057ae <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800586a:	6979      	ldr	r1, [r7, #20]
 800586c:	4811      	ldr	r0, [pc, #68]	; (80058b4 <low_level_output+0x138>)
 800586e:	f7fb fecd 	bl	800160c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005878:	4b0e      	ldr	r3, [pc, #56]	; (80058b4 <low_level_output+0x138>)
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005880:	4413      	add	r3, r2
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <low_level_output+0x138>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	f241 0314 	movw	r3, #4116	; 0x1014
 8005894:	4413      	add	r3, r2
 8005896:	2220      	movs	r2, #32
 8005898:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <low_level_output+0x138>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f241 0304 	movw	r3, #4100	; 0x1004
 80058a2:	4413      	add	r3, r2
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80058a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3728      	adds	r7, #40	; 0x28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20006988 	.word	0x20006988

080058b8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08c      	sub	sp, #48	; 0x30
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80058dc:	484f      	ldr	r0, [pc, #316]	; (8005a1c <low_level_input+0x164>)
 80058de:	f7fb ff7f 	bl	80017e0 <HAL_ETH_GetReceivedFrame_IT>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <low_level_input+0x34>

    return NULL;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e092      	b.n	8005a12 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80058ec:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <low_level_input+0x164>)
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80058f2:	4b4a      	ldr	r3, [pc, #296]	; (8005a1c <low_level_input+0x164>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80058fe:	89fb      	ldrh	r3, [r7, #14]
 8005900:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005904:	4619      	mov	r1, r3
 8005906:	2000      	movs	r0, #0
 8005908:	f005 fb5e 	bl	800afc8 <pbuf_alloc>
 800590c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d04b      	beq.n	80059ac <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005914:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <low_level_input+0x164>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005918:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	62bb      	str	r3, [r7, #40]	; 0x28
 8005922:	e040      	b.n	80059a6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	895b      	ldrh	r3, [r3, #10]
 8005928:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800592e:	e021      	b.n	8005974 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	18d0      	adds	r0, r2, r3
 8005938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	18d1      	adds	r1, r2, r3
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005944:	1a9b      	subs	r3, r3, r2
 8005946:	461a      	mov	r2, r3
 8005948:	f010 fb86 	bl	8016058 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	4413      	add	r3, r2
 800595e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005962:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800596e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800597e:	4293      	cmp	r3, r2
 8005980:	d8d6      	bhi.n	8005930 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	685a      	ldr	r2, [r3, #4]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	18d0      	adds	r0, r2, r3
 800598a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	4619      	mov	r1, r3
 8005994:	f010 fb60 	bl	8016058 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1bb      	bne.n	8005924 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <low_level_input+0x164>)
 80059ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e00b      	b.n	80059d0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80059b8:	6a3b      	ldr	r3, [r7, #32]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	3301      	adds	r3, #1
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <low_level_input+0x164>)
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d3ee      	bcc.n	80059b8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80059da:	4b10      	ldr	r3, [pc, #64]	; (8005a1c <low_level_input+0x164>)
 80059dc:	2200      	movs	r2, #0
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80059e0:	4b0e      	ldr	r3, [pc, #56]	; (8005a1c <low_level_input+0x164>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	f241 0314 	movw	r3, #4116	; 0x1014
 80059e8:	4413      	add	r3, r2
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <low_level_input+0x164>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80059fc:	4413      	add	r3, r2
 80059fe:	2280      	movs	r2, #128	; 0x80
 8005a00:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <low_level_input+0x164>)
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	f241 0308 	movw	r3, #4104	; 0x1008
 8005a0a:	4413      	add	r3, r2
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3730      	adds	r7, #48	; 0x30
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20006988 	.word	0x20006988

08005a20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a2c:	4b12      	ldr	r3, [pc, #72]	; (8005a78 <ethernetif_input+0x58>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fc6d 	bl	8006314 <osSemaphoreAcquire>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f5      	bne.n	8005a2c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005a40:	480e      	ldr	r0, [pc, #56]	; (8005a7c <ethernetif_input+0x5c>)
 8005a42:	f010 fa7d 	bl	8015f40 <sys_mutex_lock>
        p = low_level_input( netif );
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff ff36 	bl	80058b8 <low_level_input>
 8005a4c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005a64:	68b8      	ldr	r0, [r7, #8]
 8005a66:	f005 fd93 	bl	800b590 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005a6a:	4804      	ldr	r0, [pc, #16]	; (8005a7c <ethernetif_input+0x5c>)
 8005a6c:	f010 fa77 	bl	8015f5e <sys_mutex_unlock>
      } while(p!=NULL);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e4      	bne.n	8005a40 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a76:	e7d9      	b.n	8005a2c <ethernetif_input+0xc>
 8005a78:	200000a8 	.word	0x200000a8
 8005a7c:	200081e0 	.word	0x200081e0

08005a80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <ethernetif_init+0x1c>
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <ethernetif_init+0x48>)
 8005a90:	f240 223a 	movw	r2, #570	; 0x23a
 8005a94:	490d      	ldr	r1, [pc, #52]	; (8005acc <ethernetif_init+0x4c>)
 8005a96:	480e      	ldr	r0, [pc, #56]	; (8005ad0 <ethernetif_init+0x50>)
 8005a98:	f010 faf4 	bl	8016084 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2273      	movs	r2, #115	; 0x73
 8005aa0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2274      	movs	r2, #116	; 0x74
 8005aa8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <ethernetif_init+0x54>)
 8005ab0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <ethernetif_init+0x58>)
 8005ab6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7ff fd8b 	bl	80055d4 <low_level_init>

  return ERR_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	080172b4 	.word	0x080172b4
 8005acc:	080172d0 	.word	0x080172d0
 8005ad0:	080172e0 	.word	0x080172e0
 8005ad4:	08013fc9 	.word	0x08013fc9
 8005ad8:	0800577d 	.word	0x0800577d

08005adc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ae0:	f7fb fa12 	bl	8000f08 <HAL_GetTick>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005afc:	f107 0308 	add.w	r3, r7, #8
 8005b00:	461a      	mov	r2, r3
 8005b02:	2101      	movs	r1, #1
 8005b04:	4816      	ldr	r0, [pc, #88]	; (8005b60 <ethernetif_set_link+0x74>)
 8005b06:	f7fb ff6e 	bl	80019e6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b1a:	f003 0304 	and.w	r3, r3, #4
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d108      	bne.n	8005b34 <ethernetif_set_link+0x48>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f005 f919 	bl	800ad64 <netif_set_link_up>
 8005b32:	e011      	b.n	8005b58 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b3c:	089b      	lsrs	r3, r3, #2
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d007      	beq.n	8005b58 <ethernetif_set_link+0x6c>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f005 f93e 	bl	800add4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005b58:	20c8      	movs	r0, #200	; 0xc8
 8005b5a:	f000 f9c9 	bl	8005ef0 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005b5e:	e7cd      	b.n	8005afc <ethernetif_set_link+0x10>
 8005b60:	20006988 	.word	0x20006988

08005b64 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d05d      	beq.n	8005c42 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005b86:	4b34      	ldr	r3, [pc, #208]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03f      	beq.n	8005c0e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005b8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005b92:	2100      	movs	r1, #0
 8005b94:	4830      	ldr	r0, [pc, #192]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005b96:	f7fb ff8e 	bl	8001ab6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005b9a:	f7fb f9b5 	bl	8000f08 <HAL_GetTick>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005ba2:	f107 0308 	add.w	r3, r7, #8
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2101      	movs	r1, #1
 8005baa:	482b      	ldr	r0, [pc, #172]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005bac:	f7fb ff1b 	bl	80019e6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005bb0:	f7fb f9aa 	bl	8000f08 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bbe:	d828      	bhi.n	8005c12 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0eb      	beq.n	8005ba2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005bca:	f107 0308 	add.w	r3, r7, #8
 8005bce:	461a      	mov	r2, r3
 8005bd0:	2110      	movs	r1, #16
 8005bd2:	4821      	ldr	r0, [pc, #132]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005bd4:	f7fb ff07 	bl	80019e6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005be2:	4b1d      	ldr	r3, [pc, #116]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005be8:	60da      	str	r2, [r3, #12]
 8005bea:	e002      	b.n	8005bf2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005bec:	4b1a      	ldr	r3, [pc, #104]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
 8005c02:	e016      	b.n	8005c32 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005c04:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	e011      	b.n	8005c32 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <ethernetif_update_config+0xb0>
          goto error;
 8005c12:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c14:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005c1c:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005c24:	4313      	orrs	r3, r2
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	480a      	ldr	r0, [pc, #40]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c2e:	f7fb ff42 	bl	8001ab6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005c32:	2100      	movs	r1, #0
 8005c34:	4808      	ldr	r0, [pc, #32]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c36:	f7fc f803 	bl	8001c40 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005c3a:	4807      	ldr	r0, [pc, #28]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c3c:	f7fb ffa1 	bl	8001b82 <HAL_ETH_Start>
 8005c40:	e002      	b.n	8005c48 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005c42:	4805      	ldr	r0, [pc, #20]	; (8005c58 <ethernetif_update_config+0xf4>)
 8005c44:	f7fb ffcc 	bl	8001be0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f807 	bl	8005c5c <ethernetif_notify_conn_changed>
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20006988 	.word	0x20006988

08005c5c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c74:	bf00      	nop
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
	...

08005c80 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c86:	f3ef 8305 	mrs	r3, IPSR
 8005c8a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c8c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c92:	f3ef 8310 	mrs	r3, PRIMASK
 8005c96:	607b      	str	r3, [r7, #4]
  return(result);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d105      	bne.n	8005caa <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c9e:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <osKernelInitialize+0x3a>
 8005caa:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <osKernelInitialize+0x64>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d103      	bne.n	8005cba <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cb2:	f06f 0305 	mvn.w	r3, #5
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	e00c      	b.n	8005cd4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <osKernelInitialize+0x64>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <osKernelInitialize+0x64>)
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e002      	b.n	8005cd4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005cce:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	200000ac 	.word	0x200000ac

08005ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cee:	f3ef 8305 	mrs	r3, IPSR
 8005cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfe:	607b      	str	r3, [r7, #4]
  return(result);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d06:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <osKernelStart+0x3a>
 8005d12:	4b0f      	ldr	r3, [pc, #60]	; (8005d50 <osKernelStart+0x68>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d103      	bne.n	8005d22 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d1a:	f06f 0305 	mvn.w	r3, #5
 8005d1e:	60fb      	str	r3, [r7, #12]
 8005d20:	e010      	b.n	8005d44 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <osKernelStart+0x68>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d109      	bne.n	8005d3e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d2a:	f7ff ffa1 	bl	8005c70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d2e:	4b08      	ldr	r3, [pc, #32]	; (8005d50 <osKernelStart+0x68>)
 8005d30:	2202      	movs	r2, #2
 8005d32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d34:	f002 f8f0 	bl	8007f18 <vTaskStartScheduler>
      stat = osOK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e002      	b.n	8005d44 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d44:	68fb      	ldr	r3, [r7, #12]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	200000ac 	.word	0x200000ac

08005d54 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d5a:	f3ef 8305 	mrs	r3, IPSR
 8005d5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d60:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10f      	bne.n	8005d86 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d66:	f3ef 8310 	mrs	r3, PRIMASK
 8005d6a:	607b      	str	r3, [r7, #4]
  return(result);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d72:	f3ef 8311 	mrs	r3, BASEPRI
 8005d76:	603b      	str	r3, [r7, #0]
  return(result);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <osKernelGetTickCount+0x3a>
 8005d7e:	4b08      	ldr	r3, [pc, #32]	; (8005da0 <osKernelGetTickCount+0x4c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d103      	bne.n	8005d8e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005d86:	f002 f9ef 	bl	8008168 <xTaskGetTickCountFromISR>
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	e002      	b.n	8005d94 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005d8e:	f002 f9db 	bl	8008148 <xTaskGetTickCount>
 8005d92:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005d94:	68fb      	ldr	r3, [r7, #12]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200000ac 	.word	0x200000ac

08005da4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b090      	sub	sp, #64	; 0x40
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db4:	f3ef 8305 	mrs	r3, IPSR
 8005db8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dba:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 808f 	bne.w	8005ee0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d105      	bne.n	8005dda <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dce:	f3ef 8311 	mrs	r3, BASEPRI
 8005dd2:	617b      	str	r3, [r7, #20]
  return(result);
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <osThreadNew+0x3e>
 8005dda:	4b44      	ldr	r3, [pc, #272]	; (8005eec <osThreadNew+0x148>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d07e      	beq.n	8005ee0 <osThreadNew+0x13c>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d07b      	beq.n	8005ee0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005dec:	2318      	movs	r3, #24
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d045      	beq.n	8005e8c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <osThreadNew+0x6a>
        name = attr->name;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d008      	beq.n	8005e34 <osThreadNew+0x90>
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	2b38      	cmp	r3, #56	; 0x38
 8005e26:	d805      	bhi.n	8005e34 <osThreadNew+0x90>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <osThreadNew+0x94>
        return (NULL);
 8005e34:	2300      	movs	r3, #0
 8005e36:	e054      	b.n	8005ee2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00e      	beq.n	8005e6e <osThreadNew+0xca>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b5b      	cmp	r3, #91	; 0x5b
 8005e56:	d90a      	bls.n	8005e6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <osThreadNew+0xca>
        mem = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	623b      	str	r3, [r7, #32]
 8005e6c:	e010      	b.n	8005e90 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <osThreadNew+0xec>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <osThreadNew+0xec>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <osThreadNew+0xec>
          mem = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	623b      	str	r3, [r7, #32]
 8005e8a:	e001      	b.n	8005e90 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d110      	bne.n	8005eb8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e9e:	9202      	str	r2, [sp, #8]
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f001 fe53 	bl	8007b58 <xTaskCreateStatic>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e013      	b.n	8005ee0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d110      	bne.n	8005ee0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	f107 0310 	add.w	r3, r7, #16
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f001 fea4 	bl	8007c1e <xTaskCreate>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d001      	beq.n	8005ee0 <osThreadNew+0x13c>
          hTask = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ee0:	693b      	ldr	r3, [r7, #16]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3730      	adds	r7, #48	; 0x30
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200000ac 	.word	0x200000ac

08005ef0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef8:	f3ef 8305 	mrs	r3, IPSR
 8005efc:	613b      	str	r3, [r7, #16]
  return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10f      	bne.n	8005f24 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f04:	f3ef 8310 	mrs	r3, PRIMASK
 8005f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f10:	f3ef 8311 	mrs	r3, BASEPRI
 8005f14:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <osDelay+0x3c>
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <osDelay+0x58>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d103      	bne.n	8005f2c <osDelay+0x3c>
    stat = osErrorISR;
 8005f24:	f06f 0305 	mvn.w	r3, #5
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e007      	b.n	8005f3c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 ffb8 	bl	8007eac <vTaskDelay>
    }
  }

  return (stat);
 8005f3c:	697b      	ldr	r3, [r7, #20]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3718      	adds	r7, #24
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	200000ac 	.word	0x200000ac

08005f4c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	; 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f58:	f3ef 8305 	mrs	r3, IPSR
 8005f5c:	613b      	str	r3, [r7, #16]
  return(result);
 8005f5e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f040 8085 	bne.w	8006070 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f66:	f3ef 8310 	mrs	r3, PRIMASK
 8005f6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d105      	bne.n	8005f7e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f72:	f3ef 8311 	mrs	r3, BASEPRI
 8005f76:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <osMutexNew+0x3a>
 8005f7e:	4b3f      	ldr	r3, [pc, #252]	; (800607c <osMutexNew+0x130>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d074      	beq.n	8006070 <osMutexNew+0x124>
    if (attr != NULL) {
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <osMutexNew+0x48>
      type = attr->attr_bits;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	e001      	b.n	8005f98 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <osMutexNew+0x5c>
      rmtx = 1U;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e001      	b.n	8005fac <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d15c      	bne.n	8006070 <osMutexNew+0x124>
      mem = -1;
 8005fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fba:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d015      	beq.n	8005fee <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d006      	beq.n	8005fd8 <osMutexNew+0x8c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	2b4f      	cmp	r3, #79	; 0x4f
 8005fd0:	d902      	bls.n	8005fd8 <osMutexNew+0x8c>
          mem = 1;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e00c      	b.n	8005ff2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <osMutexNew+0xa6>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <osMutexNew+0xa6>
            mem = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	e001      	b.n	8005ff2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d112      	bne.n	800601e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d007      	beq.n	800600e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	4619      	mov	r1, r3
 8006004:	2004      	movs	r0, #4
 8006006:	f000 fe1a 	bl	8006c3e <xQueueCreateMutexStatic>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24
 800600c:	e016      	b.n	800603c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	4619      	mov	r1, r3
 8006014:	2001      	movs	r0, #1
 8006016:	f000 fe12 	bl	8006c3e <xQueueCreateMutexStatic>
 800601a:	6278      	str	r0, [r7, #36]	; 0x24
 800601c:	e00e      	b.n	800603c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800602a:	2004      	movs	r0, #4
 800602c:	f000 fdef 	bl	8006c0e <xQueueCreateMutex>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24
 8006032:	e003      	b.n	800603c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006034:	2001      	movs	r0, #1
 8006036:	f000 fdea 	bl	8006c0e <xQueueCreateMutex>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00c      	beq.n	800605c <osMutexNew+0x110>
        if (attr != NULL) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <osMutexNew+0x104>
          name = attr->name;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006058:	f001 fcf6 	bl	8007a48 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	2b00      	cmp	r3, #0
 8006060:	d006      	beq.n	8006070 <osMutexNew+0x124>
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f043 0301 	orr.w	r3, r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	; 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	200000ac 	.word	0x200000ac

08006080 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f023 0301 	bic.w	r3, r3, #1
 8006090:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609e:	f3ef 8305 	mrs	r3, IPSR
 80060a2:	613b      	str	r3, [r7, #16]
  return(result);
 80060a4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10f      	bne.n	80060ca <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060aa:	f3ef 8310 	mrs	r3, PRIMASK
 80060ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d105      	bne.n	80060c2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d007      	beq.n	80060d2 <osMutexAcquire+0x52>
 80060c2:	4b1d      	ldr	r3, [pc, #116]	; (8006138 <osMutexAcquire+0xb8>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d103      	bne.n	80060d2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80060ca:	f06f 0305 	mvn.w	r3, #5
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	e02c      	b.n	800612c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80060d8:	f06f 0303 	mvn.w	r3, #3
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e025      	b.n	800612c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d011      	beq.n	800610a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	69b8      	ldr	r0, [r7, #24]
 80060ea:	f000 fdf9 	bl	8006ce0 <xQueueTakeMutexRecursive>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d01b      	beq.n	800612c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80060fa:	f06f 0301 	mvn.w	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	e014      	b.n	800612c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006102:	f06f 0302 	mvn.w	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e010      	b.n	800612c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	69b8      	ldr	r0, [r7, #24]
 800610e:	f001 f9b3 	bl	8007478 <xQueueSemaphoreTake>
 8006112:	4603      	mov	r3, r0
 8006114:	2b01      	cmp	r3, #1
 8006116:	d009      	beq.n	800612c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800611e:	f06f 0301 	mvn.w	r3, #1
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e002      	b.n	800612c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006126:	f06f 0302 	mvn.w	r3, #2
 800612a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200000ac 	.word	0x200000ac

0800613c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f023 0301 	bic.w	r3, r3, #1
 800614a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006154:	2300      	movs	r3, #0
 8006156:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006158:	f3ef 8305 	mrs	r3, IPSR
 800615c:	613b      	str	r3, [r7, #16]
  return(result);
 800615e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006164:	f3ef 8310 	mrs	r3, PRIMASK
 8006168:	60fb      	str	r3, [r7, #12]
  return(result);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d105      	bne.n	800617c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	60bb      	str	r3, [r7, #8]
  return(result);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <osMutexRelease+0x50>
 800617c:	4b16      	ldr	r3, [pc, #88]	; (80061d8 <osMutexRelease+0x9c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d103      	bne.n	800618c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006184:	f06f 0305 	mvn.w	r3, #5
 8006188:	61fb      	str	r3, [r7, #28]
 800618a:	e01f      	b.n	80061cc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006192:	f06f 0303 	mvn.w	r3, #3
 8006196:	61fb      	str	r3, [r7, #28]
 8006198:	e018      	b.n	80061cc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d009      	beq.n	80061b4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80061a0:	69b8      	ldr	r0, [r7, #24]
 80061a2:	f000 fd67 	bl	8006c74 <xQueueGiveMutexRecursive>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d00f      	beq.n	80061cc <osMutexRelease+0x90>
        stat = osErrorResource;
 80061ac:	f06f 0302 	mvn.w	r3, #2
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e00b      	b.n	80061cc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80061b4:	2300      	movs	r3, #0
 80061b6:	2200      	movs	r2, #0
 80061b8:	2100      	movs	r1, #0
 80061ba:	69b8      	ldr	r0, [r7, #24]
 80061bc:	f000 fe3a 	bl	8006e34 <xQueueGenericSend>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d002      	beq.n	80061cc <osMutexRelease+0x90>
        stat = osErrorResource;
 80061c6:	f06f 0302 	mvn.w	r3, #2
 80061ca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80061cc:	69fb      	ldr	r3, [r7, #28]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3720      	adds	r7, #32
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200000ac 	.word	0x200000ac

080061dc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80061e8:	2300      	movs	r3, #0
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ec:	f3ef 8305 	mrs	r3, IPSR
 80061f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80061f2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f040 8086 	bne.w	8006306 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fa:	f3ef 8310 	mrs	r3, PRIMASK
 80061fe:	617b      	str	r3, [r7, #20]
  return(result);
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d105      	bne.n	8006212 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006206:	f3ef 8311 	mrs	r3, BASEPRI
 800620a:	613b      	str	r3, [r7, #16]
  return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <osSemaphoreNew+0x3e>
 8006212:	4b3f      	ldr	r3, [pc, #252]	; (8006310 <osSemaphoreNew+0x134>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d075      	beq.n	8006306 <osSemaphoreNew+0x12a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d072      	beq.n	8006306 <osSemaphoreNew+0x12a>
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d86e      	bhi.n	8006306 <osSemaphoreNew+0x12a>
    mem = -1;
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d015      	beq.n	8006260 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d006      	beq.n	800624a <osSemaphoreNew+0x6e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	2b4f      	cmp	r3, #79	; 0x4f
 8006242:	d902      	bls.n	800624a <osSemaphoreNew+0x6e>
        mem = 1;
 8006244:	2301      	movs	r3, #1
 8006246:	623b      	str	r3, [r7, #32]
 8006248:	e00c      	b.n	8006264 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d108      	bne.n	8006264 <osSemaphoreNew+0x88>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <osSemaphoreNew+0x88>
          mem = 0;
 800625a:	2300      	movs	r3, #0
 800625c:	623b      	str	r3, [r7, #32]
 800625e:	e001      	b.n	8006264 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626a:	d04c      	beq.n	8006306 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d128      	bne.n	80062c4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10a      	bne.n	800628e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	2203      	movs	r2, #3
 800627e:	9200      	str	r2, [sp, #0]
 8006280:	2200      	movs	r2, #0
 8006282:	2100      	movs	r1, #0
 8006284:	2001      	movs	r0, #1
 8006286:	f000 fbc1 	bl	8006a0c <xQueueGenericCreateStatic>
 800628a:	6278      	str	r0, [r7, #36]	; 0x24
 800628c:	e005      	b.n	800629a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800628e:	2203      	movs	r2, #3
 8006290:	2100      	movs	r1, #0
 8006292:	2001      	movs	r0, #1
 8006294:	f000 fc3c 	bl	8006b10 <xQueueGenericCreate>
 8006298:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	2b00      	cmp	r3, #0
 800629e:	d022      	beq.n	80062e6 <osSemaphoreNew+0x10a>
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d01f      	beq.n	80062e6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80062a6:	2300      	movs	r3, #0
 80062a8:	2200      	movs	r2, #0
 80062aa:	2100      	movs	r1, #0
 80062ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ae:	f000 fdc1 	bl	8006e34 <xQueueGenericSend>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d016      	beq.n	80062e6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80062b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062ba:	f001 fa77 	bl	80077ac <vQueueDelete>
            hSemaphore = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
 80062c2:	e010      	b.n	80062e6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d108      	bne.n	80062dc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fd3c 	bl	8006d50 <xQueueCreateCountingSemaphoreStatic>
 80062d8:	6278      	str	r0, [r7, #36]	; 0x24
 80062da:	e004      	b.n	80062e6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fd71 	bl	8006dc6 <xQueueCreateCountingSemaphore>
 80062e4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00c      	beq.n	8006306 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osSemaphoreNew+0x11e>
          name = attr->name;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61fb      	str	r3, [r7, #28]
 80062f8:	e001      	b.n	80062fe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80062fe:	69f9      	ldr	r1, [r7, #28]
 8006300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006302:	f001 fba1 	bl	8007a48 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006308:	4618      	mov	r0, r3
 800630a:	3728      	adds	r7, #40	; 0x28
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	200000ac 	.word	0x200000ac

08006314 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d103      	bne.n	8006334 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800632c:	f06f 0303 	mvn.w	r3, #3
 8006330:	61fb      	str	r3, [r7, #28]
 8006332:	e04b      	b.n	80063cc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006334:	f3ef 8305 	mrs	r3, IPSR
 8006338:	617b      	str	r3, [r7, #20]
  return(result);
 800633a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10f      	bne.n	8006360 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006340:	f3ef 8310 	mrs	r3, PRIMASK
 8006344:	613b      	str	r3, [r7, #16]
  return(result);
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800634c:	f3ef 8311 	mrs	r3, BASEPRI
 8006350:	60fb      	str	r3, [r7, #12]
  return(result);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d026      	beq.n	80063a6 <osSemaphoreAcquire+0x92>
 8006358:	4b1f      	ldr	r3, [pc, #124]	; (80063d8 <osSemaphoreAcquire+0xc4>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d122      	bne.n	80063a6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006366:	f06f 0303 	mvn.w	r3, #3
 800636a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800636c:	e02d      	b.n	80063ca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006372:	f107 0308 	add.w	r3, r7, #8
 8006376:	461a      	mov	r2, r3
 8006378:	2100      	movs	r1, #0
 800637a:	69b8      	ldr	r0, [r7, #24]
 800637c:	f001 f990 	bl	80076a0 <xQueueReceiveFromISR>
 8006380:	4603      	mov	r3, r0
 8006382:	2b01      	cmp	r3, #1
 8006384:	d003      	beq.n	800638e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006386:	f06f 0302 	mvn.w	r3, #2
 800638a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800638c:	e01d      	b.n	80063ca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <osSemaphoreAcquire+0xb6>
 8006394:	4b11      	ldr	r3, [pc, #68]	; (80063dc <osSemaphoreAcquire+0xc8>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80063a4:	e011      	b.n	80063ca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	69b8      	ldr	r0, [r7, #24]
 80063aa:	f001 f865 	bl	8007478 <xQueueSemaphoreTake>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d00b      	beq.n	80063cc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80063ba:	f06f 0301 	mvn.w	r3, #1
 80063be:	61fb      	str	r3, [r7, #28]
 80063c0:	e004      	b.n	80063cc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80063c2:	f06f 0302 	mvn.w	r3, #2
 80063c6:	61fb      	str	r3, [r7, #28]
 80063c8:	e000      	b.n	80063cc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80063ca:	bf00      	nop
      }
    }
  }

  return (stat);
 80063cc:	69fb      	ldr	r3, [r7, #28]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3720      	adds	r7, #32
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	200000ac 	.word	0x200000ac
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d103      	bne.n	80063fe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80063f6:	f06f 0303 	mvn.w	r3, #3
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e03e      	b.n	800647c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	617b      	str	r3, [r7, #20]
  return(result);
 8006404:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640a:	f3ef 8310 	mrs	r3, PRIMASK
 800640e:	613b      	str	r3, [r7, #16]
  return(result);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	60fb      	str	r3, [r7, #12]
  return(result);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d01e      	beq.n	8006460 <osSemaphoreRelease+0x80>
 8006422:	4b19      	ldr	r3, [pc, #100]	; (8006488 <osSemaphoreRelease+0xa8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d11a      	bne.n	8006460 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	4619      	mov	r1, r3
 8006434:	69b8      	ldr	r0, [r7, #24]
 8006436:	f000 fea3 	bl	8007180 <xQueueGiveFromISR>
 800643a:	4603      	mov	r3, r0
 800643c:	2b01      	cmp	r3, #1
 800643e:	d003      	beq.n	8006448 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006440:	f06f 0302 	mvn.w	r3, #2
 8006444:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006446:	e018      	b.n	800647a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d015      	beq.n	800647a <osSemaphoreRelease+0x9a>
 800644e:	4b0f      	ldr	r3, [pc, #60]	; (800648c <osSemaphoreRelease+0xac>)
 8006450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800645e:	e00c      	b.n	800647a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006460:	2300      	movs	r3, #0
 8006462:	2200      	movs	r2, #0
 8006464:	2100      	movs	r1, #0
 8006466:	69b8      	ldr	r0, [r7, #24]
 8006468:	f000 fce4 	bl	8006e34 <xQueueGenericSend>
 800646c:	4603      	mov	r3, r0
 800646e:	2b01      	cmp	r3, #1
 8006470:	d004      	beq.n	800647c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006472:	f06f 0302 	mvn.w	r3, #2
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e000      	b.n	800647c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800647a:	bf00      	nop
    }
  }

  return (stat);
 800647c:	69fb      	ldr	r3, [r7, #28]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	200000ac 	.word	0x200000ac
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b08c      	sub	sp, #48	; 0x30
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a0:	f3ef 8305 	mrs	r3, IPSR
 80064a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80064a6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d16f      	bne.n	800658c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ac:	f3ef 8310 	mrs	r3, PRIMASK
 80064b0:	617b      	str	r3, [r7, #20]
  return(result);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d105      	bne.n	80064c4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064b8:	f3ef 8311 	mrs	r3, BASEPRI
 80064bc:	613b      	str	r3, [r7, #16]
  return(result);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <osMessageQueueNew+0x3c>
 80064c4:	4b34      	ldr	r3, [pc, #208]	; (8006598 <osMessageQueueNew+0x108>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d05f      	beq.n	800658c <osMessageQueueNew+0xfc>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d05c      	beq.n	800658c <osMessageQueueNew+0xfc>
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d059      	beq.n	800658c <osMessageQueueNew+0xfc>
    mem = -1;
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d029      	beq.n	8006538 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d012      	beq.n	8006512 <osMessageQueueNew+0x82>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b4f      	cmp	r3, #79	; 0x4f
 80064f2:	d90e      	bls.n	8006512 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <osMessageQueueNew+0x82>
        mem = 1;
 800650c:	2301      	movs	r3, #1
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	e014      	b.n	800653c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d110      	bne.n	800653c <osMessageQueueNew+0xac>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10c      	bne.n	800653c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d104      	bne.n	800653c <osMessageQueueNew+0xac>
          mem = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	623b      	str	r3, [r7, #32]
 8006536:	e001      	b.n	800653c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006538:	2300      	movs	r3, #0
 800653a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10b      	bne.n	800655a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2100      	movs	r1, #0
 800654c:	9100      	str	r1, [sp, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fa5b 	bl	8006a0c <xQueueGenericCreateStatic>
 8006556:	6278      	str	r0, [r7, #36]	; 0x24
 8006558:	e008      	b.n	800656c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d105      	bne.n	800656c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006560:	2200      	movs	r2, #0
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fad3 	bl	8006b10 <xQueueGenericCreate>
 800656a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00c      	beq.n	800658c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e001      	b.n	8006584 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006584:	69f9      	ldr	r1, [r7, #28]
 8006586:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006588:	f001 fa5e 	bl	8007a48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800658c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800658e:	4618      	mov	r0, r3
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200000ac 	.word	0x200000ac

0800659c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b4:	f3ef 8305 	mrs	r3, IPSR
 80065b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80065ba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10f      	bne.n	80065e0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065c0:	f3ef 8310 	mrs	r3, PRIMASK
 80065c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065cc:	f3ef 8311 	mrs	r3, BASEPRI
 80065d0:	617b      	str	r3, [r7, #20]
  return(result);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d02c      	beq.n	8006632 <osMessageQueuePut+0x96>
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <osMessageQueuePut+0xe0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d128      	bne.n	8006632 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <osMessageQueuePut+0x56>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <osMessageQueuePut+0x56>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80065f2:	f06f 0303 	mvn.w	r3, #3
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80065f8:	e039      	b.n	800666e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80065fe:	f107 0210 	add.w	r2, r7, #16
 8006602:	2300      	movs	r3, #0
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	6a38      	ldr	r0, [r7, #32]
 8006608:	f000 fd1a 	bl	8007040 <xQueueGenericSendFromISR>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d003      	beq.n	800661a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006612:	f06f 0302 	mvn.w	r3, #2
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006618:	e029      	b.n	800666e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d026      	beq.n	800666e <osMessageQueuePut+0xd2>
 8006620:	4b17      	ldr	r3, [pc, #92]	; (8006680 <osMessageQueuePut+0xe4>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006630:	e01d      	b.n	800666e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <osMessageQueuePut+0xa2>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800663e:	f06f 0303 	mvn.w	r3, #3
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
 8006644:	e014      	b.n	8006670 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006646:	2300      	movs	r3, #0
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	6a38      	ldr	r0, [r7, #32]
 800664e:	f000 fbf1 	bl	8006e34 <xQueueGenericSend>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00b      	beq.n	8006670 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800665e:	f06f 0301 	mvn.w	r3, #1
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	e004      	b.n	8006670 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006666:	f06f 0302 	mvn.w	r3, #2
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
 800666c:	e000      	b.n	8006670 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800666e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006672:	4618      	mov	r0, r3
 8006674:	3728      	adds	r7, #40	; 0x28
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	200000ac 	.word	0x200000ac
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669a:	f3ef 8305 	mrs	r3, IPSR
 800669e:	61fb      	str	r3, [r7, #28]
  return(result);
 80066a0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10f      	bne.n	80066c6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066a6:	f3ef 8310 	mrs	r3, PRIMASK
 80066aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d105      	bne.n	80066be <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066b2:	f3ef 8311 	mrs	r3, BASEPRI
 80066b6:	617b      	str	r3, [r7, #20]
  return(result);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d02c      	beq.n	8006718 <osMessageQueueGet+0x94>
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <osMessageQueueGet+0xdc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d128      	bne.n	8006718 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <osMessageQueueGet+0x54>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <osMessageQueueGet+0x54>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80066d8:	f06f 0303 	mvn.w	r3, #3
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066de:	e038      	b.n	8006752 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80066e0:	2300      	movs	r3, #0
 80066e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	461a      	mov	r2, r3
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	6a38      	ldr	r0, [r7, #32]
 80066ee:	f000 ffd7 	bl	80076a0 <xQueueReceiveFromISR>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d003      	beq.n	8006700 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80066f8:	f06f 0302 	mvn.w	r3, #2
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80066fe:	e028      	b.n	8006752 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d025      	beq.n	8006752 <osMessageQueueGet+0xce>
 8006706:	4b17      	ldr	r3, [pc, #92]	; (8006764 <osMessageQueueGet+0xe0>)
 8006708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006716:	e01c      	b.n	8006752 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <osMessageQueueGet+0xa0>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006724:	f06f 0303 	mvn.w	r3, #3
 8006728:	627b      	str	r3, [r7, #36]	; 0x24
 800672a:	e013      	b.n	8006754 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800672c:	683a      	ldr	r2, [r7, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	6a38      	ldr	r0, [r7, #32]
 8006732:	f000 fdbb 	bl	80072ac <xQueueReceive>
 8006736:	4603      	mov	r3, r0
 8006738:	2b01      	cmp	r3, #1
 800673a:	d00b      	beq.n	8006754 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006742:	f06f 0301 	mvn.w	r3, #1
 8006746:	627b      	str	r3, [r7, #36]	; 0x24
 8006748:	e004      	b.n	8006754 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800674a:	f06f 0302 	mvn.w	r3, #2
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
 8006750:	e000      	b.n	8006754 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006752:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006756:	4618      	mov	r0, r3
 8006758:	3728      	adds	r7, #40	; 0x28
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200000ac 	.word	0x200000ac
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a07      	ldr	r2, [pc, #28]	; (8006794 <vApplicationGetIdleTaskMemory+0x2c>)
 8006778:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4a06      	ldr	r2, [pc, #24]	; (8006798 <vApplicationGetIdleTaskMemory+0x30>)
 800677e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2280      	movs	r2, #128	; 0x80
 8006784:	601a      	str	r2, [r3, #0]
}
 8006786:	bf00      	nop
 8006788:	3714      	adds	r7, #20
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	200000b0 	.word	0x200000b0
 8006798:	2000010c 	.word	0x2000010c

0800679c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a07      	ldr	r2, [pc, #28]	; (80067c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80067ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	4a06      	ldr	r2, [pc, #24]	; (80067cc <vApplicationGetTimerTaskMemory+0x30>)
 80067b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ba:	601a      	str	r2, [r3, #0]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	2000030c 	.word	0x2000030c
 80067cc:	20000368 	.word	0x20000368

080067d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f103 0208 	add.w	r2, r3, #8
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f103 0208 	add.w	r2, r3, #8
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f103 0208 	add.w	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
}
 8006866:	bf00      	nop
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d103      	bne.n	8006892 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	e00c      	b.n	80068ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3308      	adds	r3, #8
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e002      	b.n	80068a0 <vListInsert+0x2e>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d2f6      	bcs.n	800689a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	685a      	ldr	r2, [r3, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	601a      	str	r2, [r3, #0]
}
 80068d8:	bf00      	nop
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6852      	ldr	r2, [r2, #4]
 8006904:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d103      	bne.n	8006918 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	1e5a      	subs	r2, r3, #1
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10c      	bne.n	8006966 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	b672      	cpsid	i
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	b662      	cpsie	i
 8006960:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006962:	bf00      	nop
 8006964:	e7fe      	b.n	8006964 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006966:	f002 fda9 	bl	80094bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006976:	fb01 f303 	mul.w	r3, r1, r3
 800697a:	441a      	add	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006996:	3b01      	subs	r3, #1
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	22ff      	movs	r2, #255	; 0xff
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	22ff      	movs	r2, #255	; 0xff
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d114      	bne.n	80069e6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01a      	beq.n	80069fa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3310      	adds	r3, #16
 80069c8:	4618      	mov	r0, r3
 80069ca:	f001 fd4f 	bl	800846c <xTaskRemoveFromEventList>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d012      	beq.n	80069fa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <xQueueGenericReset+0xd0>)
 80069d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	e009      	b.n	80069fa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3310      	adds	r3, #16
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff fef0 	bl	80067d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3324      	adds	r3, #36	; 0x24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff feeb 	bl	80067d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069fa:	f002 fd93 	bl	8009524 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069fe:	2301      	movs	r3, #1
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08e      	sub	sp, #56	; 0x38
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10c      	bne.n	8006a3a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	b672      	cpsid	i
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	b662      	cpsie	i
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10c      	bne.n	8006a5a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	b672      	cpsid	i
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	b662      	cpsie	i
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a56:	bf00      	nop
 8006a58:	e7fe      	b.n	8006a58 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <xQueueGenericCreateStatic+0x5a>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <xQueueGenericCreateStatic+0x5e>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericCreateStatic+0x60>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10c      	bne.n	8006a8a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	b672      	cpsid	i
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	b662      	cpsie	i
 8006a84:	623b      	str	r3, [r7, #32]
}
 8006a86:	bf00      	nop
 8006a88:	e7fe      	b.n	8006a88 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <xQueueGenericCreateStatic+0x8a>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <xQueueGenericCreateStatic+0x8e>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <xQueueGenericCreateStatic+0x90>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10c      	bne.n	8006aba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa4:	b672      	cpsid	i
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	b662      	cpsie	i
 8006ab4:	61fb      	str	r3, [r7, #28]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aba:	2350      	movs	r3, #80	; 0x50
 8006abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b50      	cmp	r3, #80	; 0x50
 8006ac2:	d00c      	beq.n	8006ade <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	b672      	cpsid	i
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	b662      	cpsie	i
 8006ad8:	61bb      	str	r3, [r7, #24]
}
 8006ada:	bf00      	nop
 8006adc:	e7fe      	b.n	8006adc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ade:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00d      	beq.n	8006b06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006af2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4613      	mov	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f000 f847 	bl	8006b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3730      	adds	r7, #48	; 0x30
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10c      	bne.n	8006b3e <xQueueGenericCreate+0x2e>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	b672      	cpsid	i
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	b662      	cpsie	i
 8006b38:	613b      	str	r3, [r7, #16]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	61fb      	str	r3, [r7, #28]
 8006b48:	e004      	b.n	8006b54 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	fb02 f303 	mul.w	r3, r2, r3
 8006b52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3350      	adds	r3, #80	; 0x50
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 fddb 	bl	8009714 <pvPortMalloc>
 8006b5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d011      	beq.n	8006b8a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	3350      	adds	r3, #80	; 0x50
 8006b6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b78:	79fa      	ldrb	r2, [r7, #7]
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f805 	bl	8006b94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	69b8      	ldr	r0, [r7, #24]
 8006bc6:	f7ff feb7 	bl	8006938 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	78fa      	ldrb	r2, [r7, #3]
 8006bce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00e      	beq.n	8006c06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2100      	movs	r1, #0
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f917 	bl	8006e34 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b086      	sub	sp, #24
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	4603      	mov	r3, r0
 8006c16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	461a      	mov	r2, r3
 8006c24:	6939      	ldr	r1, [r7, #16]
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	f7ff ff72 	bl	8006b10 <xQueueGenericCreate>
 8006c2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ffd3 	bl	8006bda <prvInitialiseMutex>

		return xNewQueue;
 8006c34:	68fb      	ldr	r3, [r7, #12]
	}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b088      	sub	sp, #32
 8006c42:	af02      	add	r7, sp, #8
 8006c44:	4603      	mov	r3, r0
 8006c46:	6039      	str	r1, [r7, #0]
 8006c48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	6939      	ldr	r1, [r7, #16]
 8006c5c:	6978      	ldr	r0, [r7, #20]
 8006c5e:	f7ff fed5 	bl	8006a0c <xQueueGenericCreateStatic>
 8006c62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff ffb8 	bl	8006bda <prvInitialiseMutex>

		return xNewQueue;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10c      	bne.n	8006ca0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8a:	b672      	cpsid	i
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	b662      	cpsie	i
 8006c9a:	60fb      	str	r3, [r7, #12]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	689c      	ldr	r4, [r3, #8]
 8006ca4:	f001 fda8 	bl	80087f8 <xTaskGetCurrentTaskHandle>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	429c      	cmp	r4, r3
 8006cac:	d111      	bne.n	8006cd2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	1e5a      	subs	r2, r3, #1
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d105      	bne.n	8006ccc <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6938      	ldr	r0, [r7, #16]
 8006cc8:	f000 f8b4 	bl	8006e34 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e001      	b.n	8006cd6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006cd6:	697b      	ldr	r3, [r7, #20]
	}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd90      	pop	{r4, r7, pc}

08006ce0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10c      	bne.n	8006d0e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf8:	b672      	cpsid	i
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	b662      	cpsie	i
 8006d08:	60fb      	str	r3, [r7, #12]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	689c      	ldr	r4, [r3, #8]
 8006d12:	f001 fd71 	bl	80087f8 <xTaskGetCurrentTaskHandle>
 8006d16:	4603      	mov	r3, r0
 8006d18:	429c      	cmp	r4, r3
 8006d1a:	d107      	bne.n	8006d2c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	1c5a      	adds	r2, r3, #1
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006d26:	2301      	movs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	e00c      	b.n	8006d46 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6938      	ldr	r0, [r7, #16]
 8006d30:	f000 fba2 	bl	8007478 <xQueueSemaphoreTake>
 8006d34:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006d46:	697b      	ldr	r3, [r7, #20]
	}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd90      	pop	{r4, r7, pc}

08006d50 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10c      	bne.n	8006d7c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	b672      	cpsid	i
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	b662      	cpsie	i
 8006d76:	61bb      	str	r3, [r7, #24]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d90c      	bls.n	8006d9e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8006d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d88:	b672      	cpsid	i
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	b662      	cpsie	i
 8006d98:	617b      	str	r3, [r7, #20]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d9e:	2302      	movs	r3, #2
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	2100      	movs	r1, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff fe2f 	bl	8006a0c <xQueueGenericCreateStatic>
 8006dae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
	}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b086      	sub	sp, #24
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10c      	bne.n	8006df0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	b672      	cpsid	i
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	b662      	cpsie	i
 8006dea:	613b      	str	r3, [r7, #16]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d90c      	bls.n	8006e12 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	b672      	cpsid	i
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	b662      	cpsie	i
 8006e0c:	60fb      	str	r3, [r7, #12]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006e12:	2202      	movs	r2, #2
 8006e14:	2100      	movs	r1, #0
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fe7a 	bl	8006b10 <xQueueGenericCreate>
 8006e1c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e2a:	697b      	ldr	r3, [r7, #20]
	}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b08e      	sub	sp, #56	; 0x38
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e42:	2300      	movs	r3, #0
 8006e44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10c      	bne.n	8006e6a <xQueueGenericSend+0x36>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	b672      	cpsid	i
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	b662      	cpsie	i
 8006e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <xQueueGenericSend+0x44>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <xQueueGenericSend+0x48>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <xQueueGenericSend+0x4a>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10c      	bne.n	8006e9c <xQueueGenericSend+0x68>
	__asm volatile
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	b672      	cpsid	i
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	b662      	cpsie	i
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d103      	bne.n	8006eaa <xQueueGenericSend+0x76>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d101      	bne.n	8006eae <xQueueGenericSend+0x7a>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e000      	b.n	8006eb0 <xQueueGenericSend+0x7c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10c      	bne.n	8006ece <xQueueGenericSend+0x9a>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	b672      	cpsid	i
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	b662      	cpsie	i
 8006ec8:	623b      	str	r3, [r7, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ece:	f001 fca3 	bl	8008818 <xTaskGetSchedulerState>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <xQueueGenericSend+0xaa>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <xQueueGenericSend+0xae>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e000      	b.n	8006ee4 <xQueueGenericSend+0xb0>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10c      	bne.n	8006f02 <xQueueGenericSend+0xce>
	__asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	61fb      	str	r3, [r7, #28]
}
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f02:	f002 fadb 	bl	80094bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d302      	bcc.n	8006f18 <xQueueGenericSend+0xe4>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d129      	bne.n	8006f6c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f1e:	f000 fc82 	bl	8007826 <prvCopyDataToQueue>
 8006f22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	3324      	adds	r3, #36	; 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f001 fa9b 	bl	800846c <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d013      	beq.n	8006f64 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f3c:	4b3f      	ldr	r3, [pc, #252]	; (800703c <xQueueGenericSend+0x208>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	e00a      	b.n	8006f64 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d007      	beq.n	8006f64 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f54:	4b39      	ldr	r3, [pc, #228]	; (800703c <xQueueGenericSend+0x208>)
 8006f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f64:	f002 fade 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e063      	b.n	8007034 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d103      	bne.n	8006f7a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f72:	f002 fad7 	bl	8009524 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e05c      	b.n	8007034 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f80:	f107 0314 	add.w	r3, r7, #20
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fad7 	bl	8008538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f8e:	f002 fac9 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f92:	f001 f82b 	bl	8007fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f96:	f002 fa91 	bl	80094bc <vPortEnterCritical>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d103      	bne.n	8006fb0 <xQueueGenericSend+0x17c>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb6:	b25b      	sxtb	r3, r3
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d103      	bne.n	8006fc6 <xQueueGenericSend+0x192>
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fc6:	f002 faad 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fca:	1d3a      	adds	r2, r7, #4
 8006fcc:	f107 0314 	add.w	r3, r7, #20
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f001 fac6 	bl	8008564 <xTaskCheckForTimeOut>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d124      	bne.n	8007028 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fe0:	f000 fd19 	bl	8007a16 <prvIsQueueFull>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d018      	beq.n	800701c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	3310      	adds	r3, #16
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4611      	mov	r1, r2
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f9e6 	bl	80083c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ffa:	f000 fca4 	bl	8007946 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ffe:	f001 f803 	bl	8008008 <xTaskResumeAll>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f af7c 	bne.w	8006f02 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800700a:	4b0c      	ldr	r3, [pc, #48]	; (800703c <xQueueGenericSend+0x208>)
 800700c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	e772      	b.n	8006f02 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800701c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800701e:	f000 fc92 	bl	8007946 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007022:	f000 fff1 	bl	8008008 <xTaskResumeAll>
 8007026:	e76c      	b.n	8006f02 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702a:	f000 fc8c 	bl	8007946 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800702e:	f000 ffeb 	bl	8008008 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007034:	4618      	mov	r0, r3
 8007036:	3738      	adds	r7, #56	; 0x38
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08e      	sub	sp, #56	; 0x38
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10c      	bne.n	8007072 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	b672      	cpsid	i
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	b662      	cpsie	i
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <xQueueGenericSendFromISR+0x40>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <xQueueGenericSendFromISR+0x44>
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <xQueueGenericSendFromISR+0x46>
 8007084:	2300      	movs	r3, #0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10c      	bne.n	80070a4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	b672      	cpsid	i
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	b662      	cpsie	i
 800709e:	623b      	str	r3, [r7, #32]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d103      	bne.n	80070b2 <xQueueGenericSendFromISR+0x72>
 80070aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <xQueueGenericSendFromISR+0x76>
 80070b2:	2301      	movs	r3, #1
 80070b4:	e000      	b.n	80070b8 <xQueueGenericSendFromISR+0x78>
 80070b6:	2300      	movs	r3, #0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10c      	bne.n	80070d6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	b672      	cpsid	i
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	b662      	cpsie	i
 80070d0:	61fb      	str	r3, [r7, #28]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070d6:	f002 fad9 	bl	800968c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070da:	f3ef 8211 	mrs	r2, BASEPRI
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	b672      	cpsid	i
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	b662      	cpsie	i
 80070f2:	61ba      	str	r2, [r7, #24]
 80070f4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070f6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007102:	429a      	cmp	r2, r3
 8007104:	d302      	bcc.n	800710c <xQueueGenericSendFromISR+0xcc>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d12c      	bne.n	8007166 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800711c:	f000 fb83 	bl	8007826 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007120:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d112      	bne.n	8007150 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	2b00      	cmp	r3, #0
 8007130:	d016      	beq.n	8007160 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	3324      	adds	r3, #36	; 0x24
 8007136:	4618      	mov	r0, r3
 8007138:	f001 f998 	bl	800846c <xTaskRemoveFromEventList>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d00e      	beq.n	8007160 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e007      	b.n	8007160 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007150:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007154:	3301      	adds	r3, #1
 8007156:	b2db      	uxtb	r3, r3
 8007158:	b25a      	sxtb	r2, r3
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007160:	2301      	movs	r3, #1
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007164:	e001      	b.n	800716a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007166:	2300      	movs	r3, #0
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007174:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007178:	4618      	mov	r0, r3
 800717a:	3738      	adds	r7, #56	; 0x38
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	; 0x38
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10c      	bne.n	80071ae <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	b672      	cpsid	i
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	b662      	cpsie	i
 80071a8:	623b      	str	r3, [r7, #32]
}
 80071aa:	bf00      	nop
 80071ac:	e7fe      	b.n	80071ac <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00c      	beq.n	80071d0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ba:	b672      	cpsid	i
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	b662      	cpsie	i
 80071ca:	61fb      	str	r3, [r7, #28]
}
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <xQueueGiveFromISR+0x60>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <xQueueGiveFromISR+0x64>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <xQueueGiveFromISR+0x66>
 80071e4:	2300      	movs	r3, #0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10c      	bne.n	8007204 <xQueueGiveFromISR+0x84>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	b672      	cpsid	i
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	b662      	cpsie	i
 80071fe:	61bb      	str	r3, [r7, #24]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007204:	f002 fa42 	bl	800968c <vPortValidateInterruptPriority>
	__asm volatile
 8007208:	f3ef 8211 	mrs	r2, BASEPRI
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	617a      	str	r2, [r7, #20]
 8007222:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007224:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007234:	429a      	cmp	r2, r3
 8007236:	d22b      	bcs.n	8007290 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800723e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	1c5a      	adds	r2, r3, #1
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800724a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800724e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007252:	d112      	bne.n	800727a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	3324      	adds	r3, #36	; 0x24
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f903 	bl	800846c <xTaskRemoveFromEventList>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00e      	beq.n	800728a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e007      	b.n	800728a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800727a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727e:	3301      	adds	r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	b25a      	sxtb	r2, r3
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800728a:	2301      	movs	r3, #1
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
 800728e:	e001      	b.n	8007294 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007290:	2300      	movs	r3, #0
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f383 8811 	msr	BASEPRI, r3
}
 800729e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3738      	adds	r7, #56	; 0x38
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08c      	sub	sp, #48	; 0x30
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80072b8:	2300      	movs	r3, #0
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10c      	bne.n	80072e0 <xQueueReceive+0x34>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ca:	b672      	cpsid	i
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	b662      	cpsie	i
 80072da:	623b      	str	r3, [r7, #32]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <xQueueReceive+0x42>
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <xQueueReceive+0x46>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e000      	b.n	80072f4 <xQueueReceive+0x48>
 80072f2:	2300      	movs	r3, #0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10c      	bne.n	8007312 <xQueueReceive+0x66>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	b672      	cpsid	i
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	b662      	cpsie	i
 800730c:	61fb      	str	r3, [r7, #28]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007312:	f001 fa81 	bl	8008818 <xTaskGetSchedulerState>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d102      	bne.n	8007322 <xQueueReceive+0x76>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <xQueueReceive+0x7a>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <xQueueReceive+0x7c>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10c      	bne.n	8007346 <xQueueReceive+0x9a>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	b672      	cpsid	i
 8007332:	f383 8811 	msr	BASEPRI, r3
 8007336:	f3bf 8f6f 	isb	sy
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	b662      	cpsie	i
 8007340:	61bb      	str	r3, [r7, #24]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007346:	f002 f8b9 	bl	80094bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01f      	beq.n	8007396 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800735a:	f000 face 	bl	80078fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	1e5a      	subs	r2, r3, #1
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	3310      	adds	r3, #16
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f87a 	bl	800846c <xTaskRemoveFromEventList>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800737e:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <xQueueReceive+0x1c8>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800738e:	f002 f8c9 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 8007392:	2301      	movs	r3, #1
 8007394:	e069      	b.n	800746a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d103      	bne.n	80073a4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800739c:	f002 f8c2 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80073a0:	2300      	movs	r3, #0
 80073a2:	e062      	b.n	800746a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073aa:	f107 0310 	add.w	r3, r7, #16
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f8c2 	bl	8008538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073b4:	2301      	movs	r3, #1
 80073b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073b8:	f002 f8b4 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073bc:	f000 fe16 	bl	8007fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073c0:	f002 f87c 	bl	80094bc <vPortEnterCritical>
 80073c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073ca:	b25b      	sxtb	r3, r3
 80073cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d0:	d103      	bne.n	80073da <xQueueReceive+0x12e>
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073e0:	b25b      	sxtb	r3, r3
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	d103      	bne.n	80073f0 <xQueueReceive+0x144>
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073f0:	f002 f898 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073f4:	1d3a      	adds	r2, r7, #4
 80073f6:	f107 0310 	add.w	r3, r7, #16
 80073fa:	4611      	mov	r1, r2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 f8b1 	bl	8008564 <xTaskCheckForTimeOut>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d123      	bne.n	8007450 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800740a:	f000 faee 	bl	80079ea <prvIsQueueEmpty>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	3324      	adds	r3, #36	; 0x24
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 ffd1 	bl	80083c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007424:	f000 fa8f 	bl	8007946 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007428:	f000 fdee 	bl	8008008 <xTaskResumeAll>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d189      	bne.n	8007346 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <xQueueReceive+0x1c8>)
 8007434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	e780      	b.n	8007346 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007446:	f000 fa7e 	bl	8007946 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800744a:	f000 fddd 	bl	8008008 <xTaskResumeAll>
 800744e:	e77a      	b.n	8007346 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007452:	f000 fa78 	bl	8007946 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007456:	f000 fdd7 	bl	8008008 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800745a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800745c:	f000 fac5 	bl	80079ea <prvIsQueueEmpty>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	f43f af6f 	beq.w	8007346 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800746a:	4618      	mov	r0, r3
 800746c:	3730      	adds	r7, #48	; 0x30
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	e000ed04 	.word	0xe000ed04

08007478 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007482:	2300      	movs	r3, #0
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800748a:	2300      	movs	r3, #0
 800748c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10c      	bne.n	80074ae <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	b672      	cpsid	i
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	b662      	cpsie	i
 80074a8:	623b      	str	r3, [r7, #32]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00c      	beq.n	80074d0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	b672      	cpsid	i
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	b662      	cpsie	i
 80074ca:	61fb      	str	r3, [r7, #28]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074d0:	f001 f9a2 	bl	8008818 <xTaskGetSchedulerState>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <xQueueSemaphoreTake+0x68>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <xQueueSemaphoreTake+0x6c>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e000      	b.n	80074e6 <xQueueSemaphoreTake+0x6e>
 80074e4:	2300      	movs	r3, #0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10c      	bne.n	8007504 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	b672      	cpsid	i
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	b662      	cpsie	i
 80074fe:	61bb      	str	r3, [r7, #24]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007504:	f001 ffda 	bl	80094bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d024      	beq.n	800755e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	1e5a      	subs	r2, r3, #1
 8007518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007524:	f001 faf6 	bl	8008b14 <pvTaskIncrementMutexHeldCount>
 8007528:	4602      	mov	r2, r0
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00f      	beq.n	8007556 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	3310      	adds	r3, #16
 800753a:	4618      	mov	r0, r3
 800753c:	f000 ff96 	bl	800846c <xTaskRemoveFromEventList>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007546:	4b55      	ldr	r3, [pc, #340]	; (800769c <xQueueSemaphoreTake+0x224>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007556:	f001 ffe5 	bl	8009524 <vPortExitCritical>
				return pdPASS;
 800755a:	2301      	movs	r3, #1
 800755c:	e099      	b.n	8007692 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d113      	bne.n	800758c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	b672      	cpsid	i
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	b662      	cpsie	i
 800757e:	617b      	str	r3, [r7, #20]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007584:	f001 ffce 	bl	8009524 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007588:	2300      	movs	r3, #0
 800758a:	e082      	b.n	8007692 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800758c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800758e:	2b00      	cmp	r3, #0
 8007590:	d106      	bne.n	80075a0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007592:	f107 030c 	add.w	r3, r7, #12
 8007596:	4618      	mov	r0, r3
 8007598:	f000 ffce 	bl	8008538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80075a0:	f001 ffc0 	bl	8009524 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80075a4:	f000 fd22 	bl	8007fec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80075a8:	f001 ff88 	bl	80094bc <vPortEnterCritical>
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d103      	bne.n	80075c2 <xQueueSemaphoreTake+0x14a>
 80075ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075bc:	2200      	movs	r2, #0
 80075be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075c8:	b25b      	sxtb	r3, r3
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d103      	bne.n	80075d8 <xQueueSemaphoreTake+0x160>
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075d8:	f001 ffa4 	bl	8009524 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075dc:	463a      	mov	r2, r7
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	4611      	mov	r1, r2
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ffbd 	bl	8008564 <xTaskCheckForTimeOut>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d132      	bne.n	8007656 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075f2:	f000 f9fa 	bl	80079ea <prvIsQueueEmpty>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d026      	beq.n	800764a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d109      	bne.n	8007618 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007604:	f001 ff5a 	bl	80094bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	4618      	mov	r0, r3
 800760e:	f001 f921 	bl	8008854 <xTaskPriorityInherit>
 8007612:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007614:	f001 ff86 	bl	8009524 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	3324      	adds	r3, #36	; 0x24
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f000 fecf 	bl	80083c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007628:	f000 f98d 	bl	8007946 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800762c:	f000 fcec 	bl	8008008 <xTaskResumeAll>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	f47f af66 	bne.w	8007504 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007638:	4b18      	ldr	r3, [pc, #96]	; (800769c <xQueueSemaphoreTake+0x224>)
 800763a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	e75c      	b.n	8007504 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800764a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800764c:	f000 f97b 	bl	8007946 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007650:	f000 fcda 	bl	8008008 <xTaskResumeAll>
 8007654:	e756      	b.n	8007504 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007658:	f000 f975 	bl	8007946 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800765c:	f000 fcd4 	bl	8008008 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007662:	f000 f9c2 	bl	80079ea <prvIsQueueEmpty>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f43f af4b 	beq.w	8007504 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00d      	beq.n	8007690 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007674:	f001 ff22 	bl	80094bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800767a:	f000 f8bc 	bl	80077f6 <prvGetDisinheritPriorityAfterTimeout>
 800767e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007686:	4618      	mov	r0, r3
 8007688:	f001 f9be 	bl	8008a08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800768c:	f001 ff4a 	bl	8009524 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007690:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007692:	4618      	mov	r0, r3
 8007694:	3738      	adds	r7, #56	; 0x38
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	e000ed04 	.word	0xe000ed04

080076a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08e      	sub	sp, #56	; 0x38
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10c      	bne.n	80076d0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	b672      	cpsid	i
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	b662      	cpsie	i
 80076ca:	623b      	str	r3, [r7, #32]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d103      	bne.n	80076de <xQueueReceiveFromISR+0x3e>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xQueueReceiveFromISR+0x42>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <xQueueReceiveFromISR+0x44>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10c      	bne.n	8007702 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	b672      	cpsid	i
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	b662      	cpsie	i
 80076fc:	61fb      	str	r3, [r7, #28]
}
 80076fe:	bf00      	nop
 8007700:	e7fe      	b.n	8007700 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007702:	f001 ffc3 	bl	800968c <vPortValidateInterruptPriority>
	__asm volatile
 8007706:	f3ef 8211 	mrs	r2, BASEPRI
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	b672      	cpsid	i
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	b662      	cpsie	i
 800771e:	61ba      	str	r2, [r7, #24]
 8007720:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007722:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007724:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800772c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02f      	beq.n	8007792 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007740:	f000 f8db 	bl	80078fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800774c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d112      	bne.n	800777c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d016      	beq.n	800778c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	3310      	adds	r3, #16
 8007762:	4618      	mov	r0, r3
 8007764:	f000 fe82 	bl	800846c <xTaskRemoveFromEventList>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	e007      	b.n	800778c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800777c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007780:	3301      	adds	r3, #1
 8007782:	b2db      	uxtb	r3, r3
 8007784:	b25a      	sxtb	r2, r3
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800778c:	2301      	movs	r3, #1
 800778e:	637b      	str	r3, [r7, #52]	; 0x34
 8007790:	e001      	b.n	8007796 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
 8007796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007798:	613b      	str	r3, [r7, #16]
	__asm volatile
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f383 8811 	msr	BASEPRI, r3
}
 80077a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3738      	adds	r7, #56	; 0x38
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <vQueueDelete+0x2c>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	b672      	cpsid	i
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	b662      	cpsie	i
 80077d2:	60bb      	str	r3, [r7, #8]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f95f 	bl	8007a9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f002 f85d 	bl	80098a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	2b00      	cmp	r3, #0
 8007804:	d006      	beq.n	8007814 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e001      	b.n	8007818 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007818:	68fb      	ldr	r3, [r7, #12]
	}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b086      	sub	sp, #24
 800782a:	af00      	add	r7, sp, #0
 800782c:	60f8      	str	r0, [r7, #12]
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10d      	bne.n	8007860 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d14d      	bne.n	80078e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f867 	bl	8008924 <xTaskPriorityDisinherit>
 8007856:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	609a      	str	r2, [r3, #8]
 800785e:	e043      	b.n	80078e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d119      	bne.n	800789a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6858      	ldr	r0, [r3, #4]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	461a      	mov	r2, r3
 8007870:	68b9      	ldr	r1, [r7, #8]
 8007872:	f00e fbf1 	bl	8016058 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	441a      	add	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	429a      	cmp	r2, r3
 800788e:	d32b      	bcc.n	80078e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	e026      	b.n	80078e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	68d8      	ldr	r0, [r3, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	461a      	mov	r2, r3
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	f00e fbd7 	bl	8016058 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b2:	425b      	negs	r3, r3
 80078b4:	441a      	add	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d207      	bcs.n	80078d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ce:	425b      	negs	r3, r3
 80078d0:	441a      	add	r2, r3
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d105      	bne.n	80078e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078f0:	697b      	ldr	r3, [r7, #20]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b082      	sub	sp, #8
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d018      	beq.n	800793e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	441a      	add	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	429a      	cmp	r2, r3
 8007924:	d303      	bcc.n	800792e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68d9      	ldr	r1, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	461a      	mov	r2, r3
 8007938:	6838      	ldr	r0, [r7, #0]
 800793a:	f00e fb8d 	bl	8016058 <memcpy>
	}
}
 800793e:	bf00      	nop
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800794e:	f001 fdb5 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007958:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800795a:	e011      	b.n	8007980 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d012      	beq.n	800798a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3324      	adds	r3, #36	; 0x24
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fd7f 	bl	800846c <xTaskRemoveFromEventList>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007974:	f000 fe5c 	bl	8008630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	3b01      	subs	r3, #1
 800797c:	b2db      	uxtb	r3, r3
 800797e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dce9      	bgt.n	800795c <prvUnlockQueue+0x16>
 8007988:	e000      	b.n	800798c <prvUnlockQueue+0x46>
					break;
 800798a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	22ff      	movs	r2, #255	; 0xff
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007994:	f001 fdc6 	bl	8009524 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007998:	f001 fd90 	bl	80094bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079a4:	e011      	b.n	80079ca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d012      	beq.n	80079d4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3310      	adds	r3, #16
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fd5a 	bl	800846c <xTaskRemoveFromEventList>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079be:	f000 fe37 	bl	8008630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dce9      	bgt.n	80079a6 <prvUnlockQueue+0x60>
 80079d2:	e000      	b.n	80079d6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079d4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	22ff      	movs	r2, #255	; 0xff
 80079da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80079de:	f001 fda1 	bl	8009524 <vPortExitCritical>
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079f2:	f001 fd63 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d102      	bne.n	8007a04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079fe:	2301      	movs	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e001      	b.n	8007a08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a08:	f001 fd8c 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a1e:	f001 fd4d 	bl	80094bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d102      	bne.n	8007a34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	60fb      	str	r3, [r7, #12]
 8007a32:	e001      	b.n	8007a38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a38:	f001 fd74 	bl	8009524 <vPortExitCritical>

	return xReturn;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	e014      	b.n	8007a82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a58:	4a0f      	ldr	r2, [pc, #60]	; (8007a98 <vQueueAddToRegistry+0x50>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a64:	490c      	ldr	r1, [pc, #48]	; (8007a98 <vQueueAddToRegistry+0x50>)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a6e:	4a0a      	ldr	r2, [pc, #40]	; (8007a98 <vQueueAddToRegistry+0x50>)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	4413      	add	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a7a:	e006      	b.n	8007a8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b07      	cmp	r3, #7
 8007a86:	d9e7      	bls.n	8007a58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a88:	bf00      	nop
 8007a8a:	bf00      	nop
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	200081a0 	.word	0x200081a0

08007a9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]
 8007aa8:	e016      	b.n	8007ad8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007aaa:	4a10      	ldr	r2, [pc, #64]	; (8007aec <vQueueUnregisterQueue+0x50>)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d10b      	bne.n	8007ad2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007aba:	4a0c      	ldr	r2, [pc, #48]	; (8007aec <vQueueUnregisterQueue+0x50>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ac4:	4a09      	ldr	r2, [pc, #36]	; (8007aec <vQueueUnregisterQueue+0x50>)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4413      	add	r3, r2
 8007acc:	2200      	movs	r2, #0
 8007ace:	605a      	str	r2, [r3, #4]
				break;
 8007ad0:	e006      	b.n	8007ae0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b07      	cmp	r3, #7
 8007adc:	d9e5      	bls.n	8007aaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007ade:	bf00      	nop
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	200081a0 	.word	0x200081a0

08007af0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b00:	f001 fcdc 	bl	80094bc <vPortEnterCritical>
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b0a:	b25b      	sxtb	r3, r3
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d103      	bne.n	8007b1a <vQueueWaitForMessageRestricted+0x2a>
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b20:	b25b      	sxtb	r3, r3
 8007b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b26:	d103      	bne.n	8007b30 <vQueueWaitForMessageRestricted+0x40>
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b30:	f001 fcf8 	bl	8009524 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d106      	bne.n	8007b4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	3324      	adds	r3, #36	; 0x24
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fc63 	bl	8008410 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b4a:	6978      	ldr	r0, [r7, #20]
 8007b4c:	f7ff fefb 	bl	8007946 <prvUnlockQueue>
	}
 8007b50:	bf00      	nop
 8007b52:	3718      	adds	r7, #24
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08e      	sub	sp, #56	; 0x38
 8007b5c:	af04      	add	r7, sp, #16
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10c      	bne.n	8007b86 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	b672      	cpsid	i
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	b662      	cpsie	i
 8007b80:	623b      	str	r3, [r7, #32]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10c      	bne.n	8007ba6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b90:	b672      	cpsid	i
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	b662      	cpsie	i
 8007ba0:	61fb      	str	r3, [r7, #28]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ba6:	235c      	movs	r3, #92	; 0x5c
 8007ba8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b5c      	cmp	r3, #92	; 0x5c
 8007bae:	d00c      	beq.n	8007bca <xTaskCreateStatic+0x72>
	__asm volatile
 8007bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb4:	b672      	cpsid	i
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	b662      	cpsie	i
 8007bc4:	61bb      	str	r3, [r7, #24]
}
 8007bc6:	bf00      	nop
 8007bc8:	e7fe      	b.n	8007bc8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01e      	beq.n	8007c10 <xTaskCreateStatic+0xb8>
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d01b      	beq.n	8007c10 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2202      	movs	r2, #2
 8007be6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bea:	2300      	movs	r3, #0
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	f107 0314 	add.w	r3, r7, #20
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 f850 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c0a:	f000 f8df 	bl	8007dcc <prvAddNewTaskToReadyList>
 8007c0e:	e001      	b.n	8007c14 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c14:	697b      	ldr	r3, [r7, #20]
	}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3728      	adds	r7, #40	; 0x28
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b08c      	sub	sp, #48	; 0x30
 8007c22:	af04      	add	r7, sp, #16
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	60b9      	str	r1, [r7, #8]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c2e:	88fb      	ldrh	r3, [r7, #6]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fd6e 	bl	8009714 <pvPortMalloc>
 8007c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00e      	beq.n	8007c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c40:	205c      	movs	r0, #92	; 0x5c
 8007c42:	f001 fd67 	bl	8009714 <pvPortMalloc>
 8007c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
 8007c54:	e005      	b.n	8007c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f001 fe26 	bl	80098a8 <vPortFree>
 8007c5c:	e001      	b.n	8007c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d017      	beq.n	8007c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c70:	88fa      	ldrh	r2, [r7, #6]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	9302      	str	r3, [sp, #8]
 8007c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 f80e 	bl	8007ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c8c:	69f8      	ldr	r0, [r7, #28]
 8007c8e:	f000 f89d 	bl	8007dcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	e002      	b.n	8007c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3720      	adds	r7, #32
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	21a5      	movs	r1, #165	; 0xa5
 8007cc2:	f00e f9d7 	bl	8016074 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007cd0:	440b      	add	r3, r1
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	f023 0307 	bic.w	r3, r3, #7
 8007cde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00c      	beq.n	8007d04 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	617b      	str	r3, [r7, #20]
}
 8007d00:	bf00      	nop
 8007d02:	e7fe      	b.n	8007d02 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d01f      	beq.n	8007d4a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e012      	b.n	8007d36 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	7819      	ldrb	r1, [r3, #0]
 8007d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3334      	adds	r3, #52	; 0x34
 8007d20:	460a      	mov	r2, r1
 8007d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d006      	beq.n	8007d3e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	3301      	adds	r3, #1
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	2b0f      	cmp	r3, #15
 8007d3a:	d9e9      	bls.n	8007d10 <prvInitialiseNewTask+0x68>
 8007d3c:	e000      	b.n	8007d40 <prvInitialiseNewTask+0x98>
			{
				break;
 8007d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d48:	e003      	b.n	8007d52 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d54:	2b37      	cmp	r3, #55	; 0x37
 8007d56:	d901      	bls.n	8007d5c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d58:	2337      	movs	r3, #55	; 0x37
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	3304      	adds	r3, #4
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fd4c 	bl	8006810 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	3318      	adds	r3, #24
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fd47 	bl	8006810 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	68f9      	ldr	r1, [r7, #12]
 8007daa:	69b8      	ldr	r0, [r7, #24]
 8007dac:	f001 fa76 	bl	800929c <pxPortInitialiseStack>
 8007db0:	4602      	mov	r2, r0
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc2:	bf00      	nop
 8007dc4:	3720      	adds	r7, #32
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dd4:	f001 fb72 	bl	80094bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dd8:	4b2d      	ldr	r3, [pc, #180]	; (8007e90 <prvAddNewTaskToReadyList+0xc4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	4a2c      	ldr	r2, [pc, #176]	; (8007e90 <prvAddNewTaskToReadyList+0xc4>)
 8007de0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007de2:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <prvAddNewTaskToReadyList+0xc8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dea:	4a2a      	ldr	r2, [pc, #168]	; (8007e94 <prvAddNewTaskToReadyList+0xc8>)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007df0:	4b27      	ldr	r3, [pc, #156]	; (8007e90 <prvAddNewTaskToReadyList+0xc4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d110      	bne.n	8007e1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007df8:	f000 fc3e 	bl	8008678 <prvInitialiseTaskLists>
 8007dfc:	e00d      	b.n	8007e1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dfe:	4b26      	ldr	r3, [pc, #152]	; (8007e98 <prvAddNewTaskToReadyList+0xcc>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <prvAddNewTaskToReadyList+0xc8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d802      	bhi.n	8007e1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <prvAddNewTaskToReadyList+0xc8>)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e1a:	4b20      	ldr	r3, [pc, #128]	; (8007e9c <prvAddNewTaskToReadyList+0xd0>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	4a1e      	ldr	r2, [pc, #120]	; (8007e9c <prvAddNewTaskToReadyList+0xd0>)
 8007e22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e24:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <prvAddNewTaskToReadyList+0xd0>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	4b1b      	ldr	r3, [pc, #108]	; (8007ea0 <prvAddNewTaskToReadyList+0xd4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d903      	bls.n	8007e40 <prvAddNewTaskToReadyList+0x74>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3c:	4a18      	ldr	r2, [pc, #96]	; (8007ea0 <prvAddNewTaskToReadyList+0xd4>)
 8007e3e:	6013      	str	r3, [r2, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <prvAddNewTaskToReadyList+0xd8>)
 8007e4e:	441a      	add	r2, r3
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f7fe fce7 	bl	800682a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e5c:	f001 fb62 	bl	8009524 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <prvAddNewTaskToReadyList+0xcc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <prvAddNewTaskToReadyList+0xc8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d207      	bcs.n	8007e86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <prvAddNewTaskToReadyList+0xdc>)
 8007e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7c:	601a      	str	r2, [r3, #0]
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000c3c 	.word	0x20000c3c
 8007e94:	20000768 	.word	0x20000768
 8007e98:	20000c48 	.word	0x20000c48
 8007e9c:	20000c58 	.word	0x20000c58
 8007ea0:	20000c44 	.word	0x20000c44
 8007ea4:	2000076c 	.word	0x2000076c
 8007ea8:	e000ed04 	.word	0xe000ed04

08007eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d019      	beq.n	8007ef2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <vTaskDelay+0x64>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <vTaskDelay+0x34>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	b672      	cpsid	i
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	b662      	cpsie	i
 8007eda:	60bb      	str	r3, [r7, #8]
}
 8007edc:	bf00      	nop
 8007ede:	e7fe      	b.n	8007ede <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007ee0:	f000 f884 	bl	8007fec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fe28 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007eec:	f000 f88c 	bl	8008008 <xTaskResumeAll>
 8007ef0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d107      	bne.n	8007f08 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <vTaskDelay+0x68>)
 8007efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	20000c64 	.word	0x20000c64
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b08a      	sub	sp, #40	; 0x28
 8007f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f26:	463a      	mov	r2, r7
 8007f28:	1d39      	adds	r1, r7, #4
 8007f2a:	f107 0308 	add.w	r3, r7, #8
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fc1a 	bl	8006768 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	9202      	str	r2, [sp, #8]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	2300      	movs	r3, #0
 8007f44:	460a      	mov	r2, r1
 8007f46:	4923      	ldr	r1, [pc, #140]	; (8007fd4 <vTaskStartScheduler+0xbc>)
 8007f48:	4823      	ldr	r0, [pc, #140]	; (8007fd8 <vTaskStartScheduler+0xc0>)
 8007f4a:	f7ff fe05 	bl	8007b58 <xTaskCreateStatic>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4a22      	ldr	r2, [pc, #136]	; (8007fdc <vTaskStartScheduler+0xc4>)
 8007f52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <vTaskStartScheduler+0xc4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e001      	b.n	8007f66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d102      	bne.n	8007f72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f6c:	f000 fe3a 	bl	8008be4 <xTimerCreateTimerTask>
 8007f70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d118      	bne.n	8007faa <vTaskStartScheduler+0x92>
	__asm volatile
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	b672      	cpsid	i
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	b662      	cpsie	i
 8007f8c:	613b      	str	r3, [r7, #16]
}
 8007f8e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f90:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <vTaskStartScheduler+0xc8>)
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <vTaskStartScheduler+0xcc>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f9e:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <vTaskStartScheduler+0xd0>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fa4:	f001 fa0c 	bl	80093c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fa8:	e010      	b.n	8007fcc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb0:	d10c      	bne.n	8007fcc <vTaskStartScheduler+0xb4>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	b672      	cpsid	i
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	b662      	cpsie	i
 8007fc6:	60fb      	str	r3, [r7, #12]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <vTaskStartScheduler+0xb2>
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	08017308 	.word	0x08017308
 8007fd8:	08008649 	.word	0x08008649
 8007fdc:	20000c60 	.word	0x20000c60
 8007fe0:	20000c5c 	.word	0x20000c5c
 8007fe4:	20000c48 	.word	0x20000c48
 8007fe8:	20000c40 	.word	0x20000c40

08007fec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ff0:	4b04      	ldr	r3, [pc, #16]	; (8008004 <vTaskSuspendAll+0x18>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	4a03      	ldr	r2, [pc, #12]	; (8008004 <vTaskSuspendAll+0x18>)
 8007ff8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007ffa:	bf00      	nop
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	20000c64 	.word	0x20000c64

08008008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008016:	4b43      	ldr	r3, [pc, #268]	; (8008124 <xTaskResumeAll+0x11c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10c      	bne.n	8008038 <xTaskResumeAll+0x30>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008022:	b672      	cpsid	i
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	b662      	cpsie	i
 8008032:	603b      	str	r3, [r7, #0]
}
 8008034:	bf00      	nop
 8008036:	e7fe      	b.n	8008036 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008038:	f001 fa40 	bl	80094bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800803c:	4b39      	ldr	r3, [pc, #228]	; (8008124 <xTaskResumeAll+0x11c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	4a38      	ldr	r2, [pc, #224]	; (8008124 <xTaskResumeAll+0x11c>)
 8008044:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008046:	4b37      	ldr	r3, [pc, #220]	; (8008124 <xTaskResumeAll+0x11c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d162      	bne.n	8008114 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800804e:	4b36      	ldr	r3, [pc, #216]	; (8008128 <xTaskResumeAll+0x120>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d05e      	beq.n	8008114 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008056:	e02f      	b.n	80080b8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008058:	4b34      	ldr	r3, [pc, #208]	; (800812c <xTaskResumeAll+0x124>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3318      	adds	r3, #24
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fc3d 	bl	80068e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3304      	adds	r3, #4
 800806e:	4618      	mov	r0, r3
 8008070:	f7fe fc38 	bl	80068e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008078:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <xTaskResumeAll+0x128>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	429a      	cmp	r2, r3
 800807e:	d903      	bls.n	8008088 <xTaskResumeAll+0x80>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	4a2a      	ldr	r2, [pc, #168]	; (8008130 <xTaskResumeAll+0x128>)
 8008086:	6013      	str	r3, [r2, #0]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808c:	4613      	mov	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	4413      	add	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4a27      	ldr	r2, [pc, #156]	; (8008134 <xTaskResumeAll+0x12c>)
 8008096:	441a      	add	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f7fe fbc3 	bl	800682a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a8:	4b23      	ldr	r3, [pc, #140]	; (8008138 <xTaskResumeAll+0x130>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d302      	bcc.n	80080b8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80080b2:	4b22      	ldr	r3, [pc, #136]	; (800813c <xTaskResumeAll+0x134>)
 80080b4:	2201      	movs	r2, #1
 80080b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080b8:	4b1c      	ldr	r3, [pc, #112]	; (800812c <xTaskResumeAll+0x124>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1cb      	bne.n	8008058 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080c6:	f000 fb77 	bl	80087b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080ca:	4b1d      	ldr	r3, [pc, #116]	; (8008140 <xTaskResumeAll+0x138>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d010      	beq.n	80080f8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080d6:	f000 f859 	bl	800818c <xTaskIncrementTick>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80080e0:	4b16      	ldr	r3, [pc, #88]	; (800813c <xTaskResumeAll+0x134>)
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f1      	bne.n	80080d6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <xTaskResumeAll+0x138>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080f8:	4b10      	ldr	r3, [pc, #64]	; (800813c <xTaskResumeAll+0x134>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d009      	beq.n	8008114 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <xTaskResumeAll+0x13c>)
 8008106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008114:	f001 fa06 	bl	8009524 <vPortExitCritical>

	return xAlreadyYielded;
 8008118:	68bb      	ldr	r3, [r7, #8]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	20000c64 	.word	0x20000c64
 8008128:	20000c3c 	.word	0x20000c3c
 800812c:	20000bfc 	.word	0x20000bfc
 8008130:	20000c44 	.word	0x20000c44
 8008134:	2000076c 	.word	0x2000076c
 8008138:	20000768 	.word	0x20000768
 800813c:	20000c50 	.word	0x20000c50
 8008140:	20000c4c 	.word	0x20000c4c
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <xTaskGetTickCount+0x1c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008154:	687b      	ldr	r3, [r7, #4]
}
 8008156:	4618      	mov	r0, r3
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	20000c40 	.word	0x20000c40

08008168 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800816e:	f001 fa8d 	bl	800968c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008176:	4b04      	ldr	r3, [pc, #16]	; (8008188 <xTaskGetTickCountFromISR+0x20>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800817c:	683b      	ldr	r3, [r7, #0]
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000c40 	.word	0x20000c40

0800818c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008196:	4b50      	ldr	r3, [pc, #320]	; (80082d8 <xTaskIncrementTick+0x14c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f040 808b 	bne.w	80082b6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081a0:	4b4e      	ldr	r3, [pc, #312]	; (80082dc <xTaskIncrementTick+0x150>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081a8:	4a4c      	ldr	r2, [pc, #304]	; (80082dc <xTaskIncrementTick+0x150>)
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d122      	bne.n	80081fa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80081b4:	4b4a      	ldr	r3, [pc, #296]	; (80082e0 <xTaskIncrementTick+0x154>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00c      	beq.n	80081d8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	b672      	cpsid	i
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	b662      	cpsie	i
 80081d2:	603b      	str	r3, [r7, #0]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xTaskIncrementTick+0x4a>
 80081d8:	4b41      	ldr	r3, [pc, #260]	; (80082e0 <xTaskIncrementTick+0x154>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]
 80081de:	4b41      	ldr	r3, [pc, #260]	; (80082e4 <xTaskIncrementTick+0x158>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a3f      	ldr	r2, [pc, #252]	; (80082e0 <xTaskIncrementTick+0x154>)
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	4a3f      	ldr	r2, [pc, #252]	; (80082e4 <xTaskIncrementTick+0x158>)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6013      	str	r3, [r2, #0]
 80081ec:	4b3e      	ldr	r3, [pc, #248]	; (80082e8 <xTaskIncrementTick+0x15c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3301      	adds	r3, #1
 80081f2:	4a3d      	ldr	r2, [pc, #244]	; (80082e8 <xTaskIncrementTick+0x15c>)
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	f000 fadf 	bl	80087b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081fa:	4b3c      	ldr	r3, [pc, #240]	; (80082ec <xTaskIncrementTick+0x160>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	429a      	cmp	r2, r3
 8008202:	d349      	bcc.n	8008298 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008204:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <xTaskIncrementTick+0x154>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d104      	bne.n	8008218 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800820e:	4b37      	ldr	r3, [pc, #220]	; (80082ec <xTaskIncrementTick+0x160>)
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	601a      	str	r2, [r3, #0]
					break;
 8008216:	e03f      	b.n	8008298 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008218:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <xTaskIncrementTick+0x154>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d203      	bcs.n	8008238 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008230:	4a2e      	ldr	r2, [pc, #184]	; (80082ec <xTaskIncrementTick+0x160>)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008236:	e02f      	b.n	8008298 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3304      	adds	r3, #4
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fb51 	bl	80068e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	3318      	adds	r3, #24
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fb48 	bl	80068e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b25      	ldr	r3, [pc, #148]	; (80082f0 <xTaskIncrementTick+0x164>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d903      	bls.n	8008268 <xTaskIncrementTick+0xdc>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <xTaskIncrementTick+0x164>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <xTaskIncrementTick+0x168>)
 8008276:	441a      	add	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fad3 	bl	800682a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <xTaskIncrementTick+0x16c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	429a      	cmp	r2, r3
 8008290:	d3b8      	bcc.n	8008204 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008296:	e7b5      	b.n	8008204 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <xTaskIncrementTick+0x16c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4915      	ldr	r1, [pc, #84]	; (80082f4 <xTaskIncrementTick+0x168>)
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d907      	bls.n	80082c0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	e004      	b.n	80082c0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <xTaskIncrementTick+0x170>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <xTaskIncrementTick+0x170>)
 80082be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082c0:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <xTaskIncrementTick+0x174>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082cc:	697b      	ldr	r3, [r7, #20]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	20000c64 	.word	0x20000c64
 80082dc:	20000c40 	.word	0x20000c40
 80082e0:	20000bf4 	.word	0x20000bf4
 80082e4:	20000bf8 	.word	0x20000bf8
 80082e8:	20000c54 	.word	0x20000c54
 80082ec:	20000c5c 	.word	0x20000c5c
 80082f0:	20000c44 	.word	0x20000c44
 80082f4:	2000076c 	.word	0x2000076c
 80082f8:	20000768 	.word	0x20000768
 80082fc:	20000c4c 	.word	0x20000c4c
 8008300:	20000c50 	.word	0x20000c50

08008304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800830a:	4b29      	ldr	r3, [pc, #164]	; (80083b0 <vTaskSwitchContext+0xac>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008312:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <vTaskSwitchContext+0xb0>)
 8008314:	2201      	movs	r2, #1
 8008316:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008318:	e043      	b.n	80083a2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800831a:	4b26      	ldr	r3, [pc, #152]	; (80083b4 <vTaskSwitchContext+0xb0>)
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <vTaskSwitchContext+0xb4>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e012      	b.n	800834e <vTaskSwitchContext+0x4a>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10c      	bne.n	8008348 <vTaskSwitchContext+0x44>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	607b      	str	r3, [r7, #4]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <vTaskSwitchContext+0x42>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3b01      	subs	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	491b      	ldr	r1, [pc, #108]	; (80083bc <vTaskSwitchContext+0xb8>)
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	440b      	add	r3, r1
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0e2      	beq.n	8008328 <vTaskSwitchContext+0x24>
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4a13      	ldr	r2, [pc, #76]	; (80083bc <vTaskSwitchContext+0xb8>)
 800836e:	4413      	add	r3, r2
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	3308      	adds	r3, #8
 8008384:	429a      	cmp	r2, r3
 8008386:	d104      	bne.n	8008392 <vTaskSwitchContext+0x8e>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4a09      	ldr	r2, [pc, #36]	; (80083c0 <vTaskSwitchContext+0xbc>)
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	4a06      	ldr	r2, [pc, #24]	; (80083b8 <vTaskSwitchContext+0xb4>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6013      	str	r3, [r2, #0]
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000c64 	.word	0x20000c64
 80083b4:	20000c50 	.word	0x20000c50
 80083b8:	20000c44 	.word	0x20000c44
 80083bc:	2000076c 	.word	0x2000076c
 80083c0:	20000768 	.word	0x20000768

080083c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10c      	bne.n	80083ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	b672      	cpsid	i
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	b662      	cpsie	i
 80083e8:	60fb      	str	r3, [r7, #12]
}
 80083ea:	bf00      	nop
 80083ec:	e7fe      	b.n	80083ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <vTaskPlaceOnEventList+0x48>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3318      	adds	r3, #24
 80083f4:	4619      	mov	r1, r3
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7fe fa3b 	bl	8006872 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083fc:	2101      	movs	r1, #1
 80083fe:	6838      	ldr	r0, [r7, #0]
 8008400:	f000 fb9c 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
}
 8008404:	bf00      	nop
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000768 	.word	0x20000768

08008410 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10c      	bne.n	800843c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	b672      	cpsid	i
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	b662      	cpsie	i
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <vTaskPlaceOnEventListRestricted+0x58>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3318      	adds	r3, #24
 8008442:	4619      	mov	r1, r3
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f7fe f9f0 	bl	800682a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295
 8008454:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	68b8      	ldr	r0, [r7, #8]
 800845a:	f000 fb6f 	bl	8008b3c <prvAddCurrentTaskToDelayedList>
	}
 800845e:	bf00      	nop
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20000768 	.word	0x20000768

0800846c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10c      	bne.n	800849c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	b672      	cpsid	i
 8008488:	f383 8811 	msr	BASEPRI, r3
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f3bf 8f4f 	dsb	sy
 8008494:	b662      	cpsie	i
 8008496:	60fb      	str	r3, [r7, #12]
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	3318      	adds	r3, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fa1f 	bl	80068e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084a6:	4b1e      	ldr	r3, [pc, #120]	; (8008520 <xTaskRemoveFromEventList+0xb4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d11d      	bne.n	80084ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	3304      	adds	r3, #4
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe fa16 	bl	80068e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084bc:	4b19      	ldr	r3, [pc, #100]	; (8008524 <xTaskRemoveFromEventList+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d903      	bls.n	80084cc <xTaskRemoveFromEventList+0x60>
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a16      	ldr	r2, [pc, #88]	; (8008524 <xTaskRemoveFromEventList+0xb8>)
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4a13      	ldr	r2, [pc, #76]	; (8008528 <xTaskRemoveFromEventList+0xbc>)
 80084da:	441a      	add	r2, r3
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	3304      	adds	r3, #4
 80084e0:	4619      	mov	r1, r3
 80084e2:	4610      	mov	r0, r2
 80084e4:	f7fe f9a1 	bl	800682a <vListInsertEnd>
 80084e8:	e005      	b.n	80084f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3318      	adds	r3, #24
 80084ee:	4619      	mov	r1, r3
 80084f0:	480e      	ldr	r0, [pc, #56]	; (800852c <xTaskRemoveFromEventList+0xc0>)
 80084f2:	f7fe f99a 	bl	800682a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <xTaskRemoveFromEventList+0xc4>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	429a      	cmp	r2, r3
 8008502:	d905      	bls.n	8008510 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <xTaskRemoveFromEventList+0xc8>)
 800850a:	2201      	movs	r2, #1
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e001      	b.n	8008514 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000c64 	.word	0x20000c64
 8008524:	20000c44 	.word	0x20000c44
 8008528:	2000076c 	.word	0x2000076c
 800852c:	20000bfc 	.word	0x20000bfc
 8008530:	20000768 	.word	0x20000768
 8008534:	20000c50 	.word	0x20000c50

08008538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <vTaskInternalSetTimeOutState+0x24>)
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008548:	4b05      	ldr	r3, [pc, #20]	; (8008560 <vTaskInternalSetTimeOutState+0x28>)
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	605a      	str	r2, [r3, #4]
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20000c54 	.word	0x20000c54
 8008560:	20000c40 	.word	0x20000c40

08008564 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10c      	bne.n	800858e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	b672      	cpsid	i
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	b662      	cpsie	i
 8008588:	613b      	str	r3, [r7, #16]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10c      	bne.n	80085ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	60fb      	str	r3, [r7, #12]
}
 80085aa:	bf00      	nop
 80085ac:	e7fe      	b.n	80085ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80085ae:	f000 ff85 	bl	80094bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80085b2:	4b1d      	ldr	r3, [pc, #116]	; (8008628 <xTaskCheckForTimeOut+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d102      	bne.n	80085d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	e023      	b.n	800861a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <xTaskCheckForTimeOut+0xc8>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d007      	beq.n	80085ee <xTaskCheckForTimeOut+0x8a>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	69ba      	ldr	r2, [r7, #24]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d302      	bcc.n	80085ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085e8:	2301      	movs	r3, #1
 80085ea:	61fb      	str	r3, [r7, #28]
 80085ec:	e015      	b.n	800861a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d20b      	bcs.n	8008610 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f7ff ff97 	bl	8008538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800860a:	2300      	movs	r3, #0
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	e004      	b.n	800861a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008616:	2301      	movs	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800861a:	f000 ff83 	bl	8009524 <vPortExitCritical>

	return xReturn;
 800861e:	69fb      	ldr	r3, [r7, #28]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20000c40 	.word	0x20000c40
 800862c:	20000c54 	.word	0x20000c54

08008630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008634:	4b03      	ldr	r3, [pc, #12]	; (8008644 <vTaskMissedYield+0x14>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
}
 800863a:	bf00      	nop
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr
 8008644:	20000c50 	.word	0x20000c50

08008648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008650:	f000 f852 	bl	80086f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008654:	4b06      	ldr	r3, [pc, #24]	; (8008670 <prvIdleTask+0x28>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d9f9      	bls.n	8008650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800865c:	4b05      	ldr	r3, [pc, #20]	; (8008674 <prvIdleTask+0x2c>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800866c:	e7f0      	b.n	8008650 <prvIdleTask+0x8>
 800866e:	bf00      	nop
 8008670:	2000076c 	.word	0x2000076c
 8008674:	e000ed04 	.word	0xe000ed04

08008678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
 8008682:	e00c      	b.n	800869e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4a12      	ldr	r2, [pc, #72]	; (80086d8 <prvInitialiseTaskLists+0x60>)
 8008690:	4413      	add	r3, r2
 8008692:	4618      	mov	r0, r3
 8008694:	f7fe f89c 	bl	80067d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3301      	adds	r3, #1
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b37      	cmp	r3, #55	; 0x37
 80086a2:	d9ef      	bls.n	8008684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80086a4:	480d      	ldr	r0, [pc, #52]	; (80086dc <prvInitialiseTaskLists+0x64>)
 80086a6:	f7fe f893 	bl	80067d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80086aa:	480d      	ldr	r0, [pc, #52]	; (80086e0 <prvInitialiseTaskLists+0x68>)
 80086ac:	f7fe f890 	bl	80067d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80086b0:	480c      	ldr	r0, [pc, #48]	; (80086e4 <prvInitialiseTaskLists+0x6c>)
 80086b2:	f7fe f88d 	bl	80067d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80086b6:	480c      	ldr	r0, [pc, #48]	; (80086e8 <prvInitialiseTaskLists+0x70>)
 80086b8:	f7fe f88a 	bl	80067d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80086bc:	480b      	ldr	r0, [pc, #44]	; (80086ec <prvInitialiseTaskLists+0x74>)
 80086be:	f7fe f887 	bl	80067d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80086c2:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <prvInitialiseTaskLists+0x78>)
 80086c4:	4a05      	ldr	r2, [pc, #20]	; (80086dc <prvInitialiseTaskLists+0x64>)
 80086c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvInitialiseTaskLists+0x7c>)
 80086ca:	4a05      	ldr	r2, [pc, #20]	; (80086e0 <prvInitialiseTaskLists+0x68>)
 80086cc:	601a      	str	r2, [r3, #0]
}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	2000076c 	.word	0x2000076c
 80086dc:	20000bcc 	.word	0x20000bcc
 80086e0:	20000be0 	.word	0x20000be0
 80086e4:	20000bfc 	.word	0x20000bfc
 80086e8:	20000c10 	.word	0x20000c10
 80086ec:	20000c28 	.word	0x20000c28
 80086f0:	20000bf4 	.word	0x20000bf4
 80086f4:	20000bf8 	.word	0x20000bf8

080086f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086fe:	e019      	b.n	8008734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008700:	f000 fedc 	bl	80094bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008704:	4b10      	ldr	r3, [pc, #64]	; (8008748 <prvCheckTasksWaitingTermination+0x50>)
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3304      	adds	r3, #4
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe f8e7 	bl	80068e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <prvCheckTasksWaitingTermination+0x54>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3b01      	subs	r3, #1
 800871c:	4a0b      	ldr	r2, [pc, #44]	; (800874c <prvCheckTasksWaitingTermination+0x54>)
 800871e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <prvCheckTasksWaitingTermination+0x58>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	3b01      	subs	r3, #1
 8008726:	4a0a      	ldr	r2, [pc, #40]	; (8008750 <prvCheckTasksWaitingTermination+0x58>)
 8008728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800872a:	f000 fefb 	bl	8009524 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f810 	bl	8008754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <prvCheckTasksWaitingTermination+0x58>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e1      	bne.n	8008700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000c10 	.word	0x20000c10
 800874c:	20000c3c 	.word	0x20000c3c
 8008750:	20000c24 	.word	0x20000c24

08008754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008762:	2b00      	cmp	r3, #0
 8008764:	d108      	bne.n	8008778 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876a:	4618      	mov	r0, r3
 800876c:	f001 f89c 	bl	80098a8 <vPortFree>
				vPortFree( pxTCB );
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 f899 	bl	80098a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008776:	e01a      	b.n	80087ae <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800877e:	2b01      	cmp	r3, #1
 8008780:	d103      	bne.n	800878a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 f890 	bl	80098a8 <vPortFree>
	}
 8008788:	e011      	b.n	80087ae <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008790:	2b02      	cmp	r3, #2
 8008792:	d00c      	beq.n	80087ae <prvDeleteTCB+0x5a>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	b672      	cpsid	i
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	b662      	cpsie	i
 80087a8:	60fb      	str	r3, [r7, #12]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <prvDeleteTCB+0x58>
	}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <prvResetNextTaskUnblockTime+0x38>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80087c8:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <prvResetNextTaskUnblockTime+0x3c>)
 80087ca:	f04f 32ff 	mov.w	r2, #4294967295
 80087ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80087d0:	e008      	b.n	80087e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <prvResetNextTaskUnblockTime+0x38>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	4a04      	ldr	r2, [pc, #16]	; (80087f4 <prvResetNextTaskUnblockTime+0x3c>)
 80087e2:	6013      	str	r3, [r2, #0]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000bf4 	.word	0x20000bf4
 80087f4:	20000c5c 	.word	0x20000c5c

080087f8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <xTaskGetCurrentTaskHandle+0x1c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008804:	687b      	ldr	r3, [r7, #4]
	}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20000768 	.word	0x20000768

08008818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800881e:	4b0b      	ldr	r3, [pc, #44]	; (800884c <xTaskGetSchedulerState+0x34>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008826:	2301      	movs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
 800882a:	e008      	b.n	800883e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882c:	4b08      	ldr	r3, [pc, #32]	; (8008850 <xTaskGetSchedulerState+0x38>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d102      	bne.n	800883a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008834:	2302      	movs	r3, #2
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	e001      	b.n	800883e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800883a:	2300      	movs	r3, #0
 800883c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800883e:	687b      	ldr	r3, [r7, #4]
	}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20000c48 	.word	0x20000c48
 8008850:	20000c64 	.word	0x20000c64

08008854 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d051      	beq.n	800890e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <xTaskPriorityInherit+0xc4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008874:	429a      	cmp	r2, r3
 8008876:	d241      	bcs.n	80088fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	db06      	blt.n	800888e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <xTaskPriorityInherit+0xc4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6959      	ldr	r1, [r3, #20]
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008896:	4613      	mov	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4a1f      	ldr	r2, [pc, #124]	; (800891c <xTaskPriorityInherit+0xc8>)
 80088a0:	4413      	add	r3, r2
 80088a2:	4299      	cmp	r1, r3
 80088a4:	d122      	bne.n	80088ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe f81a 	bl	80068e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088b0:	4b19      	ldr	r3, [pc, #100]	; (8008918 <xTaskPriorityInherit+0xc4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <xTaskPriorityInherit+0xcc>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d903      	bls.n	80088ce <xTaskPriorityInherit+0x7a>
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ca:	4a15      	ldr	r2, [pc, #84]	; (8008920 <xTaskPriorityInherit+0xcc>)
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4a10      	ldr	r2, [pc, #64]	; (800891c <xTaskPriorityInherit+0xc8>)
 80088dc:	441a      	add	r2, r3
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	3304      	adds	r3, #4
 80088e2:	4619      	mov	r1, r3
 80088e4:	4610      	mov	r0, r2
 80088e6:	f7fd ffa0 	bl	800682a <vListInsertEnd>
 80088ea:	e004      	b.n	80088f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <xTaskPriorityInherit+0xc4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80088f6:	2301      	movs	r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	e008      	b.n	800890e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <xTaskPriorityInherit+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	429a      	cmp	r2, r3
 8008908:	d201      	bcs.n	800890e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800890e:	68fb      	ldr	r3, [r7, #12]
	}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20000768 	.word	0x20000768
 800891c:	2000076c 	.word	0x2000076c
 8008920:	20000c44 	.word	0x20000c44

08008924 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008924:	b580      	push	{r7, lr}
 8008926:	b086      	sub	sp, #24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008930:	2300      	movs	r3, #0
 8008932:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d05a      	beq.n	80089f0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800893a:	4b30      	ldr	r3, [pc, #192]	; (80089fc <xTaskPriorityDisinherit+0xd8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	429a      	cmp	r2, r3
 8008942:	d00c      	beq.n	800895e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	b672      	cpsid	i
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	b662      	cpsie	i
 8008958:	60fb      	str	r3, [r7, #12]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10c      	bne.n	8008980 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	b672      	cpsid	i
 800896c:	f383 8811 	msr	BASEPRI, r3
 8008970:	f3bf 8f6f 	isb	sy
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	b662      	cpsie	i
 800897a:	60bb      	str	r3, [r7, #8]
}
 800897c:	bf00      	nop
 800897e:	e7fe      	b.n	800897e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	429a      	cmp	r2, r3
 8008994:	d02c      	beq.n	80089f0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800899a:	2b00      	cmp	r3, #0
 800899c:	d128      	bne.n	80089f0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	3304      	adds	r3, #4
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fd ff9e 	bl	80068e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c0:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <xTaskPriorityDisinherit+0xdc>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d903      	bls.n	80089d0 <xTaskPriorityDisinherit+0xac>
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	4a0c      	ldr	r2, [pc, #48]	; (8008a00 <xTaskPriorityDisinherit+0xdc>)
 80089ce:	6013      	str	r3, [r2, #0]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d4:	4613      	mov	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <xTaskPriorityDisinherit+0xe0>)
 80089de:	441a      	add	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	3304      	adds	r3, #4
 80089e4:	4619      	mov	r1, r3
 80089e6:	4610      	mov	r0, r2
 80089e8:	f7fd ff1f 	bl	800682a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089f0:	697b      	ldr	r3, [r7, #20]
	}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	20000768 	.word	0x20000768
 8008a00:	20000c44 	.word	0x20000c44
 8008a04:	2000076c 	.word	0x2000076c

08008a08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a16:	2301      	movs	r3, #1
 8008a18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d06e      	beq.n	8008afe <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10c      	bne.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	b672      	cpsid	i
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	b662      	cpsie	i
 8008a3c:	60fb      	str	r3, [r7, #12]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d902      	bls.n	8008a52 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	61fb      	str	r3, [r7, #28]
 8008a50:	e002      	b.n	8008a58 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	69fa      	ldr	r2, [r7, #28]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d04d      	beq.n	8008afe <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d148      	bne.n	8008afe <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a6c:	4b26      	ldr	r3, [pc, #152]	; (8008b08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d10c      	bne.n	8008a90 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	b672      	cpsid	i
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	b662      	cpsie	i
 8008a8a:	60bb      	str	r3, [r7, #8]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	db04      	blt.n	8008aae <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	6959      	ldr	r1, [r3, #20]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4a13      	ldr	r2, [pc, #76]	; (8008b0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008abe:	4413      	add	r3, r2
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	d11c      	bne.n	8008afe <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd ff0b 	bl	80068e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d903      	bls.n	8008ae2 <vTaskPriorityDisinheritAfterTimeout+0xda>
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ade:	4a0c      	ldr	r2, [pc, #48]	; (8008b10 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4a07      	ldr	r2, [pc, #28]	; (8008b0c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008af0:	441a      	add	r2, r3
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	3304      	adds	r3, #4
 8008af6:	4619      	mov	r1, r3
 8008af8:	4610      	mov	r0, r2
 8008afa:	f7fd fe96 	bl	800682a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008afe:	bf00      	nop
 8008b00:	3720      	adds	r7, #32
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	20000768 	.word	0x20000768
 8008b0c:	2000076c 	.word	0x2000076c
 8008b10:	20000c44 	.word	0x20000c44

08008b14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b18:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b20:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b26:	3201      	adds	r2, #1
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008b2a:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
	}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	20000768 	.word	0x20000768

08008b3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b46:	4b21      	ldr	r3, [pc, #132]	; (8008bcc <prvAddCurrentTaskToDelayedList+0x90>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b4c:	4b20      	ldr	r3, [pc, #128]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3304      	adds	r3, #4
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fd fec6 	bl	80068e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b5e:	d10a      	bne.n	8008b76 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d007      	beq.n	8008b76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4819      	ldr	r0, [pc, #100]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b70:	f7fd fe5b 	bl	800682a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b74:	e026      	b.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b7e:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d209      	bcs.n	8008ba2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b8e:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4619      	mov	r1, r3
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	f7fd fe69 	bl	8006872 <vListInsert>
}
 8008ba0:	e010      	b.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba2:	4b0e      	ldr	r3, [pc, #56]	; (8008bdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f7fd fe5f 	bl	8006872 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bb4:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d202      	bcs.n	8008bc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bbe:	4a08      	ldr	r2, [pc, #32]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	6013      	str	r3, [r2, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000c40 	.word	0x20000c40
 8008bd0:	20000768 	.word	0x20000768
 8008bd4:	20000c28 	.word	0x20000c28
 8008bd8:	20000bf8 	.word	0x20000bf8
 8008bdc:	20000bf4 	.word	0x20000bf4
 8008be0:	20000c5c 	.word	0x20000c5c

08008be4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008bee:	f000 fb15 	bl	800921c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008bf2:	4b1d      	ldr	r3, [pc, #116]	; (8008c68 <xTimerCreateTimerTask+0x84>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d021      	beq.n	8008c3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c02:	1d3a      	adds	r2, r7, #4
 8008c04:	f107 0108 	add.w	r1, r7, #8
 8008c08:	f107 030c 	add.w	r3, r7, #12
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fd fdc5 	bl	800679c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	9202      	str	r2, [sp, #8]
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	2300      	movs	r3, #0
 8008c22:	460a      	mov	r2, r1
 8008c24:	4911      	ldr	r1, [pc, #68]	; (8008c6c <xTimerCreateTimerTask+0x88>)
 8008c26:	4812      	ldr	r0, [pc, #72]	; (8008c70 <xTimerCreateTimerTask+0x8c>)
 8008c28:	f7fe ff96 	bl	8007b58 <xTaskCreateStatic>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	4a11      	ldr	r2, [pc, #68]	; (8008c74 <xTimerCreateTimerTask+0x90>)
 8008c30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <xTimerCreateTimerTask+0x90>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10c      	bne.n	8008c5e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	613b      	str	r3, [r7, #16]
}
 8008c5a:	bf00      	nop
 8008c5c:	e7fe      	b.n	8008c5c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008c5e:	697b      	ldr	r3, [r7, #20]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	20000c98 	.word	0x20000c98
 8008c6c:	08017310 	.word	0x08017310
 8008c70:	08008db5 	.word	0x08008db5
 8008c74:	20000c9c 	.word	0x20000c9c

08008c78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <xTimerGenericCommand+0x32>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	623b      	str	r3, [r7, #32]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008caa:	4b1a      	ldr	r3, [pc, #104]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d02a      	beq.n	8008d08 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	dc18      	bgt.n	8008cf6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cc4:	f7ff fda8 	bl	8008818 <xTaskGetSchedulerState>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d109      	bne.n	8008ce2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cce:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f107 0110 	add.w	r1, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cda:	f7fe f8ab 	bl	8006e34 <xQueueGenericSend>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce0:	e012      	b.n	8008d08 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	2300      	movs	r3, #0
 8008cec:	2200      	movs	r2, #0
 8008cee:	f7fe f8a1 	bl	8006e34 <xQueueGenericSend>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8008cf4:	e008      	b.n	8008d08 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008cf6:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <xTimerGenericCommand+0x9c>)
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f107 0110 	add.w	r1, r7, #16
 8008cfe:	2300      	movs	r3, #0
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	f7fe f99d 	bl	8007040 <xQueueGenericSendFromISR>
 8008d06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3728      	adds	r7, #40	; 0x28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000c98 	.word	0x20000c98

08008d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af02      	add	r7, sp, #8
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d22:	4b23      	ldr	r3, [pc, #140]	; (8008db0 <prvProcessExpiredTimer+0x98>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	3304      	adds	r3, #4
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd fdd7 	bl	80068e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d024      	beq.n	8008d8e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	699a      	ldr	r2, [r3, #24]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	18d1      	adds	r1, r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	6978      	ldr	r0, [r7, #20]
 8008d52:	f000 f8d3 	bl	8008efc <prvInsertTimerInActiveList>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d021      	beq.n	8008da0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	2100      	movs	r1, #0
 8008d66:	6978      	ldr	r0, [r7, #20]
 8008d68:	f7ff ff86 	bl	8008c78 <xTimerGenericCommand>
 8008d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d115      	bne.n	8008da0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8008d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d78:	b672      	cpsid	i
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	b662      	cpsie	i
 8008d88:	60fb      	str	r3, [r7, #12]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d94:	f023 0301 	bic.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	4798      	blx	r3
}
 8008da8:	bf00      	nop
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000c90 	.word	0x20000c90

08008db4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dbc:	f107 0308 	add.w	r3, r7, #8
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f857 	bl	8008e74 <prvGetNextExpireTime>
 8008dc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 f803 	bl	8008dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dd2:	f000 f8d5 	bl	8008f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dd6:	e7f1      	b.n	8008dbc <prvTimerTask+0x8>

08008dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008de2:	f7ff f903 	bl	8007fec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008de6:	f107 0308 	add.w	r3, r7, #8
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f866 	bl	8008ebc <prvSampleTimeNow>
 8008df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d130      	bne.n	8008e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <prvProcessTimerOrBlockTask+0x3c>
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d806      	bhi.n	8008e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e06:	f7ff f8ff 	bl	8008008 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7ff ff83 	bl	8008d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e12:	e024      	b.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e1a:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <prvProcessTimerOrBlockTask+0x90>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <prvProcessTimerOrBlockTask+0x50>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <prvProcessTimerOrBlockTask+0x52>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <prvProcessTimerOrBlockTask+0x94>)
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	683a      	ldr	r2, [r7, #0]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f7fe fe59 	bl	8007af0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e3e:	f7ff f8e3 	bl	8008008 <xTaskResumeAll>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10a      	bne.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e48:	4b09      	ldr	r3, [pc, #36]	; (8008e70 <prvProcessTimerOrBlockTask+0x98>)
 8008e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	f3bf 8f6f 	isb	sy
}
 8008e58:	e001      	b.n	8008e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e5a:	f7ff f8d5 	bl	8008008 <xTaskResumeAll>
}
 8008e5e:	bf00      	nop
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000c94 	.word	0x20000c94
 8008e6c:	20000c98 	.word	0x20000c98
 8008e70:	e000ed04 	.word	0xe000ed04

08008e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <prvGetNextExpireTime+0x44>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <prvGetNextExpireTime+0x16>
 8008e86:	2201      	movs	r2, #1
 8008e88:	e000      	b.n	8008e8c <prvGetNextExpireTime+0x18>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d105      	bne.n	8008ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e98:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <prvGetNextExpireTime+0x44>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e001      	b.n	8008ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000c90 	.word	0x20000c90

08008ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ec4:	f7ff f940 	bl	8008148 <xTaskGetTickCount>
 8008ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eca:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvSampleTimeNow+0x3c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d205      	bcs.n	8008ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ed4:	f000 f93c 	bl	8009150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e002      	b.n	8008ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ee6:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <prvSampleTimeNow+0x3c>)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008eec:	68fb      	ldr	r3, [r7, #12]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000ca0 	.word	0x20000ca0

08008efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	607a      	str	r2, [r7, #4]
 8008f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d812      	bhi.n	8008f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	1ad2      	subs	r2, r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d302      	bcc.n	8008f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f30:	2301      	movs	r3, #1
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e01b      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f36:	4b10      	ldr	r3, [pc, #64]	; (8008f78 <prvInsertTimerInActiveList+0x7c>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4610      	mov	r0, r2
 8008f42:	f7fd fc96 	bl	8006872 <vListInsert>
 8008f46:	e012      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d206      	bcs.n	8008f5e <prvInsertTimerInActiveList+0x62>
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d302      	bcc.n	8008f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e007      	b.n	8008f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <prvInsertTimerInActiveList+0x80>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd fc82 	bl	8006872 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f6e:	697b      	ldr	r3, [r7, #20]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000c94 	.word	0x20000c94
 8008f7c:	20000c90 	.word	0x20000c90

08008f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f86:	e0d0      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da1a      	bge.n	8008fc4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f8e:	1d3b      	adds	r3, r7, #4
 8008f90:	3304      	adds	r3, #4
 8008f92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10c      	bne.n	8008fb4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	b672      	cpsid	i
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	b662      	cpsie	i
 8008fae:	61fb      	str	r3, [r7, #28]
}
 8008fb0:	bf00      	nop
 8008fb2:	e7fe      	b.n	8008fb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fba:	6850      	ldr	r0, [r2, #4]
 8008fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fbe:	6892      	ldr	r2, [r2, #8]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f2c0 80ae 	blt.w	8009128 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd2:	695b      	ldr	r3, [r3, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	3304      	adds	r3, #4
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fd fc81 	bl	80068e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fe2:	463b      	mov	r3, r7
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff69 	bl	8008ebc <prvSampleTimeNow>
 8008fea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b09      	cmp	r3, #9
 8008ff0:	f200 809b 	bhi.w	800912a <prvProcessReceivedCommands+0x1aa>
 8008ff4:	a201      	add	r2, pc, #4	; (adr r2, 8008ffc <prvProcessReceivedCommands+0x7c>)
 8008ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ffa:	bf00      	nop
 8008ffc:	08009025 	.word	0x08009025
 8009000:	08009025 	.word	0x08009025
 8009004:	08009025 	.word	0x08009025
 8009008:	0800909d 	.word	0x0800909d
 800900c:	080090b1 	.word	0x080090b1
 8009010:	080090ff 	.word	0x080090ff
 8009014:	08009025 	.word	0x08009025
 8009018:	08009025 	.word	0x08009025
 800901c:	0800909d 	.word	0x0800909d
 8009020:	080090b1 	.word	0x080090b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	b2da      	uxtb	r2, r3
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009036:	68ba      	ldr	r2, [r7, #8]
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	18d1      	adds	r1, r2, r3
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009044:	f7ff ff5a 	bl	8008efc <prvInsertTimerInActiveList>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d06d      	beq.n	800912a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800904e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d062      	beq.n	800912a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	441a      	add	r2, r3
 800906c:	2300      	movs	r3, #0
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	2100      	movs	r1, #0
 8009074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009076:	f7ff fdff 	bl	8008c78 <xTimerGenericCommand>
 800907a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d153      	bne.n	800912a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	b672      	cpsid	i
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	b662      	cpsie	i
 8009096:	61bb      	str	r3, [r7, #24]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a2:	f023 0301 	bic.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090ae:	e03c      	b.n	800912a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090b6:	f043 0301 	orr.w	r3, r3, #1
 80090ba:	b2da      	uxtb	r2, r3
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	699b      	ldr	r3, [r3, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10c      	bne.n	80090ea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	b672      	cpsid	i
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	b662      	cpsie	i
 80090e4:	617b      	str	r3, [r7, #20]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	18d1      	adds	r1, r2, r3
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f8:	f7ff ff00 	bl	8008efc <prvInsertTimerInActiveList>
					break;
 80090fc:	e015      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800910c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910e:	f000 fbcb 	bl	80098a8 <vPortFree>
 8009112:	e00a      	b.n	800912a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009126:	e000      	b.n	800912a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <prvProcessReceivedCommands+0x1cc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1d39      	adds	r1, r7, #4
 8009130:	2200      	movs	r2, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe f8ba 	bl	80072ac <xQueueReceive>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f47f af24 	bne.w	8008f88 <prvProcessReceivedCommands+0x8>
	}
}
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	3730      	adds	r7, #48	; 0x30
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000c98 	.word	0x20000c98

08009150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009156:	e04a      	b.n	80091ee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009158:	4b2e      	ldr	r3, [pc, #184]	; (8009214 <prvSwitchTimerLists+0xc4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b2c      	ldr	r3, [pc, #176]	; (8009214 <prvSwitchTimerLists+0xc4>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fd fbb7 	bl	80068e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d030      	beq.n	80091ee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	429a      	cmp	r2, r3
 800919c:	d90e      	bls.n	80091bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b1a      	ldr	r3, [pc, #104]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fd fb5c 	bl	8006872 <vListInsert>
 80091ba:	e018      	b.n	80091ee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	2100      	movs	r1, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff fd56 	bl	8008c78 <xTimerGenericCommand>
 80091cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <prvSwitchTimerLists+0x9e>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	b672      	cpsid	i
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	b662      	cpsie	i
 80091e8:	603b      	str	r3, [r7, #0]
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ee:	4b09      	ldr	r3, [pc, #36]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1af      	bne.n	8009158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091f8:	4b06      	ldr	r3, [pc, #24]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091fe:	4b06      	ldr	r3, [pc, #24]	; (8009218 <prvSwitchTimerLists+0xc8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a04      	ldr	r2, [pc, #16]	; (8009214 <prvSwitchTimerLists+0xc4>)
 8009204:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009206:	4a04      	ldr	r2, [pc, #16]	; (8009218 <prvSwitchTimerLists+0xc8>)
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	20000c90 	.word	0x20000c90
 8009218:	20000c94 	.word	0x20000c94

0800921c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b082      	sub	sp, #8
 8009220:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009222:	f000 f94b 	bl	80094bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009226:	4b15      	ldr	r3, [pc, #84]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d120      	bne.n	8009270 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800922e:	4814      	ldr	r0, [pc, #80]	; (8009280 <prvCheckForValidListAndQueue+0x64>)
 8009230:	f7fd face 	bl	80067d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009234:	4813      	ldr	r0, [pc, #76]	; (8009284 <prvCheckForValidListAndQueue+0x68>)
 8009236:	f7fd facb 	bl	80067d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800923a:	4b13      	ldr	r3, [pc, #76]	; (8009288 <prvCheckForValidListAndQueue+0x6c>)
 800923c:	4a10      	ldr	r2, [pc, #64]	; (8009280 <prvCheckForValidListAndQueue+0x64>)
 800923e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009240:	4b12      	ldr	r3, [pc, #72]	; (800928c <prvCheckForValidListAndQueue+0x70>)
 8009242:	4a10      	ldr	r2, [pc, #64]	; (8009284 <prvCheckForValidListAndQueue+0x68>)
 8009244:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009246:	2300      	movs	r3, #0
 8009248:	9300      	str	r3, [sp, #0]
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <prvCheckForValidListAndQueue+0x74>)
 800924c:	4a11      	ldr	r2, [pc, #68]	; (8009294 <prvCheckForValidListAndQueue+0x78>)
 800924e:	2110      	movs	r1, #16
 8009250:	200a      	movs	r0, #10
 8009252:	f7fd fbdb 	bl	8006a0c <xQueueGenericCreateStatic>
 8009256:	4603      	mov	r3, r0
 8009258:	4a08      	ldr	r2, [pc, #32]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 800925a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800925c:	4b07      	ldr	r3, [pc, #28]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d005      	beq.n	8009270 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <prvCheckForValidListAndQueue+0x60>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	490b      	ldr	r1, [pc, #44]	; (8009298 <prvCheckForValidListAndQueue+0x7c>)
 800926a:	4618      	mov	r0, r3
 800926c:	f7fe fbec 	bl	8007a48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009270:	f000 f958 	bl	8009524 <vPortExitCritical>
}
 8009274:	bf00      	nop
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000c98 	.word	0x20000c98
 8009280:	20000c68 	.word	0x20000c68
 8009284:	20000c7c 	.word	0x20000c7c
 8009288:	20000c90 	.word	0x20000c90
 800928c:	20000c94 	.word	0x20000c94
 8009290:	20000d44 	.word	0x20000d44
 8009294:	20000ca4 	.word	0x20000ca4
 8009298:	08017318 	.word	0x08017318

0800929c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	3b04      	subs	r3, #4
 80092ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f023 0201 	bic.w	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3b04      	subs	r3, #4
 80092ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092cc:	4a0c      	ldr	r2, [pc, #48]	; (8009300 <pxPortInitialiseStack+0x64>)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3b14      	subs	r3, #20
 80092d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3b04      	subs	r3, #4
 80092e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f06f 0202 	mvn.w	r2, #2
 80092ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3b20      	subs	r3, #32
 80092f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	08009305 	.word	0x08009305

08009304 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800930e:	4b14      	ldr	r3, [pc, #80]	; (8009360 <prvTaskExitError+0x5c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d00c      	beq.n	8009332 <prvTaskExitError+0x2e>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	b672      	cpsid	i
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	b662      	cpsie	i
 800932c:	60fb      	str	r3, [r7, #12]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <prvTaskExitError+0x2c>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	b672      	cpsid	i
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	b662      	cpsie	i
 8009346:	60bb      	str	r3, [r7, #8]
}
 8009348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800934a:	bf00      	nop
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0fc      	beq.n	800934c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	2000000c 	.word	0x2000000c
	...

08009370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <pxCurrentTCBConst2>)
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	6808      	ldr	r0, [r1, #0]
 8009376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f380 8809 	msr	PSP, r0
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f04f 0000 	mov.w	r0, #0
 8009386:	f380 8811 	msr	BASEPRI, r0
 800938a:	4770      	bx	lr
 800938c:	f3af 8000 	nop.w

08009390 <pxCurrentTCBConst2>:
 8009390:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009394:	bf00      	nop
 8009396:	bf00      	nop

08009398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009398:	4808      	ldr	r0, [pc, #32]	; (80093bc <prvPortStartFirstTask+0x24>)
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	6800      	ldr	r0, [r0, #0]
 800939e:	f380 8808 	msr	MSP, r0
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8814 	msr	CONTROL, r0
 80093aa:	b662      	cpsie	i
 80093ac:	b661      	cpsie	f
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	df00      	svc	0
 80093b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093ba:	bf00      	nop
 80093bc:	e000ed08 	.word	0xe000ed08

080093c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093c6:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <xPortStartScheduler+0xe4>)
 80093c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b2f      	ldr	r3, [pc, #188]	; (80094a8 <xPortStartScheduler+0xe8>)
 80093ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093ee:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <xPortStartScheduler+0xec>)
 80093f0:	2207      	movs	r2, #7
 80093f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093f4:	e009      	b.n	800940a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80093f6:	4b2d      	ldr	r3, [pc, #180]	; (80094ac <xPortStartScheduler+0xec>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <xPortStartScheduler+0xec>)
 80093fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	005b      	lsls	r3, r3, #1
 8009406:	b2db      	uxtb	r3, r3
 8009408:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009412:	2b80      	cmp	r3, #128	; 0x80
 8009414:	d0ef      	beq.n	80093f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009416:	4b25      	ldr	r3, [pc, #148]	; (80094ac <xPortStartScheduler+0xec>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f1c3 0307 	rsb	r3, r3, #7
 800941e:	2b04      	cmp	r3, #4
 8009420:	d00c      	beq.n	800943c <xPortStartScheduler+0x7c>
	__asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009426:	b672      	cpsid	i
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	b662      	cpsie	i
 8009436:	60bb      	str	r3, [r7, #8]
}
 8009438:	bf00      	nop
 800943a:	e7fe      	b.n	800943a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <xPortStartScheduler+0xec>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <xPortStartScheduler+0xec>)
 8009444:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009446:	4b19      	ldr	r3, [pc, #100]	; (80094ac <xPortStartScheduler+0xec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800944e:	4a17      	ldr	r2, [pc, #92]	; (80094ac <xPortStartScheduler+0xec>)
 8009450:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800945a:	4b15      	ldr	r3, [pc, #84]	; (80094b0 <xPortStartScheduler+0xf0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a14      	ldr	r2, [pc, #80]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009464:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009466:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <xPortStartScheduler+0xf0>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a11      	ldr	r2, [pc, #68]	; (80094b0 <xPortStartScheduler+0xf0>)
 800946c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009470:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009472:	f000 f8dd 	bl	8009630 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009476:	4b0f      	ldr	r3, [pc, #60]	; (80094b4 <xPortStartScheduler+0xf4>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800947c:	f000 f8fc 	bl	8009678 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009480:	4b0d      	ldr	r3, [pc, #52]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <xPortStartScheduler+0xf8>)
 8009486:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800948a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800948c:	f7ff ff84 	bl	8009398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009490:	f7fe ff38 	bl	8008304 <vTaskSwitchContext>
	prvTaskExitError();
 8009494:	f7ff ff36 	bl	8009304 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	e000e400 	.word	0xe000e400
 80094a8:	20000d94 	.word	0x20000d94
 80094ac:	20000d98 	.word	0x20000d98
 80094b0:	e000ed20 	.word	0xe000ed20
 80094b4:	2000000c 	.word	0x2000000c
 80094b8:	e000ef34 	.word	0xe000ef34

080094bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	b672      	cpsid	i
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	b662      	cpsie	i
 80094d6:	607b      	str	r3, [r7, #4]
}
 80094d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094da:	4b10      	ldr	r3, [pc, #64]	; (800951c <vPortEnterCritical+0x60>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	4a0e      	ldr	r2, [pc, #56]	; (800951c <vPortEnterCritical+0x60>)
 80094e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094e4:	4b0d      	ldr	r3, [pc, #52]	; (800951c <vPortEnterCritical+0x60>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d111      	bne.n	8009510 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094ec:	4b0c      	ldr	r3, [pc, #48]	; (8009520 <vPortEnterCritical+0x64>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <vPortEnterCritical+0x54>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	b672      	cpsid	i
 80094fc:	f383 8811 	msr	BASEPRI, r3
 8009500:	f3bf 8f6f 	isb	sy
 8009504:	f3bf 8f4f 	dsb	sy
 8009508:	b662      	cpsie	i
 800950a:	603b      	str	r3, [r7, #0]
}
 800950c:	bf00      	nop
 800950e:	e7fe      	b.n	800950e <vPortEnterCritical+0x52>
	}
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	2000000c 	.word	0x2000000c
 8009520:	e000ed04 	.word	0xe000ed04

08009524 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800952a:	4b13      	ldr	r3, [pc, #76]	; (8009578 <vPortExitCritical+0x54>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10c      	bne.n	800954c <vPortExitCritical+0x28>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	607b      	str	r3, [r7, #4]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <vPortExitCritical+0x54>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3b01      	subs	r3, #1
 8009552:	4a09      	ldr	r2, [pc, #36]	; (8009578 <vPortExitCritical+0x54>)
 8009554:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <vPortExitCritical+0x54>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d105      	bne.n	800956a <vPortExitCritical+0x46>
 800955e:	2300      	movs	r3, #0
 8009560:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	f383 8811 	msr	BASEPRI, r3
}
 8009568:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	2000000c 	.word	0x2000000c
 800957c:	00000000 	.word	0x00000000

08009580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009580:	f3ef 8009 	mrs	r0, PSP
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <pxCurrentTCBConst>)
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	f01e 0f10 	tst.w	lr, #16
 8009590:	bf08      	it	eq
 8009592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095a4:	b672      	cpsid	i
 80095a6:	f380 8811 	msr	BASEPRI, r0
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	b662      	cpsie	i
 80095b4:	f7fe fea6 	bl	8008304 <vTaskSwitchContext>
 80095b8:	f04f 0000 	mov.w	r0, #0
 80095bc:	f380 8811 	msr	BASEPRI, r0
 80095c0:	bc09      	pop	{r0, r3}
 80095c2:	6819      	ldr	r1, [r3, #0]
 80095c4:	6808      	ldr	r0, [r1, #0]
 80095c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f01e 0f10 	tst.w	lr, #16
 80095ce:	bf08      	it	eq
 80095d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095d4:	f380 8809 	msr	PSP, r0
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop

080095e0 <pxCurrentTCBConst>:
 80095e0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop

080095e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	b672      	cpsid	i
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	b662      	cpsie	i
 8009602:	607b      	str	r3, [r7, #4]
}
 8009604:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009606:	f7fe fdc1 	bl	800818c <xTaskIncrementTick>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009610:	4b06      	ldr	r3, [pc, #24]	; (800962c <SysTick_Handler+0x44>)
 8009612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f383 8811 	msr	BASEPRI, r3
}
 8009622:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009624:	bf00      	nop
 8009626:	3708      	adds	r7, #8
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	e000ed04 	.word	0xe000ed04

08009630 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009630:	b480      	push	{r7}
 8009632:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009634:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009636:	2200      	movs	r2, #0
 8009638:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <vPortSetupTimerInterrupt+0x38>)
 800963c:	2200      	movs	r2, #0
 800963e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009640:	4b0a      	ldr	r3, [pc, #40]	; (800966c <vPortSetupTimerInterrupt+0x3c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a0a      	ldr	r2, [pc, #40]	; (8009670 <vPortSetupTimerInterrupt+0x40>)
 8009646:	fba2 2303 	umull	r2, r3, r2, r3
 800964a:	099b      	lsrs	r3, r3, #6
 800964c:	4a09      	ldr	r2, [pc, #36]	; (8009674 <vPortSetupTimerInterrupt+0x44>)
 800964e:	3b01      	subs	r3, #1
 8009650:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009652:	4b04      	ldr	r3, [pc, #16]	; (8009664 <vPortSetupTimerInterrupt+0x34>)
 8009654:	2207      	movs	r2, #7
 8009656:	601a      	str	r2, [r3, #0]
}
 8009658:	bf00      	nop
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	e000e010 	.word	0xe000e010
 8009668:	e000e018 	.word	0xe000e018
 800966c:	20000000 	.word	0x20000000
 8009670:	10624dd3 	.word	0x10624dd3
 8009674:	e000e014 	.word	0xe000e014

08009678 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009678:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009688 <vPortEnableVFP+0x10>
 800967c:	6801      	ldr	r1, [r0, #0]
 800967e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009682:	6001      	str	r1, [r0, #0]
 8009684:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009686:	bf00      	nop
 8009688:	e000ed88 	.word	0xe000ed88

0800968c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009692:	f3ef 8305 	mrs	r3, IPSR
 8009696:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b0f      	cmp	r3, #15
 800969c:	d916      	bls.n	80096cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800969e:	4a19      	ldr	r2, [pc, #100]	; (8009704 <vPortValidateInterruptPriority+0x78>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096a8:	4b17      	ldr	r3, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x7c>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	7afa      	ldrb	r2, [r7, #11]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d20c      	bcs.n	80096cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	607b      	str	r3, [r7, #4]
}
 80096c8:	bf00      	nop
 80096ca:	e7fe      	b.n	80096ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <vPortValidateInterruptPriority+0x80>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d90c      	bls.n	80096f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	b672      	cpsid	i
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	b662      	cpsie	i
 80096f0:	603b      	str	r3, [r7, #0]
}
 80096f2:	bf00      	nop
 80096f4:	e7fe      	b.n	80096f4 <vPortValidateInterruptPriority+0x68>
	}
 80096f6:	bf00      	nop
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000e3f0 	.word	0xe000e3f0
 8009708:	20000d94 	.word	0x20000d94
 800970c:	e000ed0c 	.word	0xe000ed0c
 8009710:	20000d98 	.word	0x20000d98

08009714 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08a      	sub	sp, #40	; 0x28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009720:	f7fe fc64 	bl	8007fec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009724:	4b5b      	ldr	r3, [pc, #364]	; (8009894 <pvPortMalloc+0x180>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800972c:	f000 f91a 	bl	8009964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009730:	4b59      	ldr	r3, [pc, #356]	; (8009898 <pvPortMalloc+0x184>)
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4013      	ands	r3, r2
 8009738:	2b00      	cmp	r3, #0
 800973a:	f040 8092 	bne.w	8009862 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d01f      	beq.n	8009784 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009744:	2208      	movs	r2, #8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f003 0307 	and.w	r3, r3, #7
 8009752:	2b00      	cmp	r3, #0
 8009754:	d016      	beq.n	8009784 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f023 0307 	bic.w	r3, r3, #7
 800975c:	3308      	adds	r3, #8
 800975e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <pvPortMalloc+0x70>
	__asm volatile
 800976a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976e:	b672      	cpsid	i
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	b662      	cpsie	i
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06b      	beq.n	8009862 <pvPortMalloc+0x14e>
 800978a:	4b44      	ldr	r3, [pc, #272]	; (800989c <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d866      	bhi.n	8009862 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b42      	ldr	r3, [pc, #264]	; (80098a0 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b41      	ldr	r3, [pc, #260]	; (80098a0 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa8>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b35      	ldr	r3, [pc, #212]	; (8009894 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d04d      	beq.n	8009862 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d921      	bls.n	800982c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00c      	beq.n	8009814 <pvPortMalloc+0x100>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	b672      	cpsid	i
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	b662      	cpsie	i
 800980e:	613b      	str	r3, [r7, #16]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	1ad2      	subs	r2, r2, r3
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009826:	69b8      	ldr	r0, [r7, #24]
 8009828:	f000 f8fe 	bl	8009a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800982c:	4b1b      	ldr	r3, [pc, #108]	; (800989c <pvPortMalloc+0x188>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	4a19      	ldr	r2, [pc, #100]	; (800989c <pvPortMalloc+0x188>)
 8009838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800983a:	4b18      	ldr	r3, [pc, #96]	; (800989c <pvPortMalloc+0x188>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <pvPortMalloc+0x190>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	429a      	cmp	r2, r3
 8009844:	d203      	bcs.n	800984e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <pvPortMalloc+0x188>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <pvPortMalloc+0x190>)
 800984c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	685a      	ldr	r2, [r3, #4]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <pvPortMalloc+0x184>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	431a      	orrs	r2, r3
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2200      	movs	r2, #0
 8009860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009862:	f7fe fbd1 	bl	8008008 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00c      	beq.n	800988a <pvPortMalloc+0x176>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <pvPortMalloc+0x174>
	return pvReturn;
 800988a:	69fb      	ldr	r3, [r7, #28]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3728      	adds	r7, #40	; 0x28
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	200049a4 	.word	0x200049a4
 8009898:	200049b0 	.word	0x200049b0
 800989c:	200049a8 	.word	0x200049a8
 80098a0:	2000499c 	.word	0x2000499c
 80098a4:	200049ac 	.word	0x200049ac

080098a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d04c      	beq.n	8009954 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098ba:	2308      	movs	r3, #8
 80098bc:	425b      	negs	r3, r3
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4413      	add	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <vPortFree+0xb4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4013      	ands	r3, r2
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10c      	bne.n	80098f0 <vPortFree+0x48>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	b672      	cpsid	i
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	b662      	cpsie	i
 80098ea:	60fb      	str	r3, [r7, #12]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00c      	beq.n	8009912 <vPortFree+0x6a>
	__asm volatile
 80098f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fc:	b672      	cpsid	i
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	b662      	cpsie	i
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <vPortFree+0xb4>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d019      	beq.n	8009954 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d115      	bne.n	8009954 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0b      	ldr	r3, [pc, #44]	; (800995c <vPortFree+0xb4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fb58 	bl	8007fec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b07      	ldr	r3, [pc, #28]	; (8009960 <vPortFree+0xb8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a06      	ldr	r2, [pc, #24]	; (8009960 <vPortFree+0xb8>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f86c 	bl	8009a28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009950:	f7fe fb5a 	bl	8008008 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009954:	bf00      	nop
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	200049b0 	.word	0x200049b0
 8009960:	200049a8 	.word	0x200049a8

08009964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800996a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800996e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009970:	4b27      	ldr	r3, [pc, #156]	; (8009a10 <prvHeapInit+0xac>)
 8009972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3307      	adds	r3, #7
 8009982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0307 	bic.w	r3, r3, #7
 800998a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	4a1f      	ldr	r2, [pc, #124]	; (8009a10 <prvHeapInit+0xac>)
 8009994:	4413      	add	r3, r2
 8009996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800999c:	4a1d      	ldr	r2, [pc, #116]	; (8009a14 <prvHeapInit+0xb0>)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099a2:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <prvHeapInit+0xb0>)
 80099a4:	2200      	movs	r2, #0
 80099a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099b0:	2208      	movs	r2, #8
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4a15      	ldr	r2, [pc, #84]	; (8009a18 <prvHeapInit+0xb4>)
 80099c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099c6:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <prvHeapInit+0xb4>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2200      	movs	r2, #0
 80099cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <prvHeapInit+0xb4>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	1ad2      	subs	r2, r2, r3
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <prvHeapInit+0xb4>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	; (8009a1c <prvHeapInit+0xb8>)
 80099f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	4a09      	ldr	r2, [pc, #36]	; (8009a20 <prvHeapInit+0xbc>)
 80099fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099fc:	4b09      	ldr	r3, [pc, #36]	; (8009a24 <prvHeapInit+0xc0>)
 80099fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	3714      	adds	r7, #20
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	20000d9c 	.word	0x20000d9c
 8009a14:	2000499c 	.word	0x2000499c
 8009a18:	200049a4 	.word	0x200049a4
 8009a1c:	200049ac 	.word	0x200049ac
 8009a20:	200049a8 	.word	0x200049a8
 8009a24:	200049b0 	.word	0x200049b0

08009a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a30:	4b28      	ldr	r3, [pc, #160]	; (8009ad4 <prvInsertBlockIntoFreeList+0xac>)
 8009a32:	60fb      	str	r3, [r7, #12]
 8009a34:	e002      	b.n	8009a3c <prvInsertBlockIntoFreeList+0x14>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d8f7      	bhi.n	8009a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	4413      	add	r3, r2
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d108      	bne.n	8009a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	441a      	add	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	441a      	add	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d118      	bne.n	8009ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b15      	ldr	r3, [pc, #84]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d00d      	beq.n	8009aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	441a      	add	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	e008      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	e003      	b.n	8009ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ab8:	68fa      	ldr	r2, [r7, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d002      	beq.n	8009ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ac6:	bf00      	nop
 8009ac8:	3714      	adds	r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr
 8009ad2:	bf00      	nop
 8009ad4:	2000499c 	.word	0x2000499c
 8009ad8:	200049a4 	.word	0x200049a4

08009adc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009ae6:	f007 fa97 	bl	8011018 <sys_timeouts_sleeptime>
 8009aea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af2:	d10b      	bne.n	8009b0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009af4:	4813      	ldr	r0, [pc, #76]	; (8009b44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009af6:	f00c fa32 	bl	8015f5e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009afa:	2200      	movs	r2, #0
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f00c f9ba 	bl	8015e78 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009b04:	480f      	ldr	r0, [pc, #60]	; (8009b44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b06:	f00c fa1b 	bl	8015f40 <sys_mutex_lock>
    return;
 8009b0a:	e018      	b.n	8009b3e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009b12:	f007 fa47 	bl	8010fa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b16:	e7e6      	b.n	8009ae6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009b18:	480a      	ldr	r0, [pc, #40]	; (8009b44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b1a:	f00c fa20 	bl	8015f5e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f00c f9a8 	bl	8015e78 <sys_arch_mbox_fetch>
 8009b28:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009b2a:	4806      	ldr	r0, [pc, #24]	; (8009b44 <tcpip_timeouts_mbox_fetch+0x68>)
 8009b2c:	f00c fa08 	bl	8015f40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b36:	d102      	bne.n	8009b3e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009b38:	f007 fa34 	bl	8010fa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009b3c:	e7d3      	b.n	8009ae6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200081e0 	.word	0x200081e0

08009b48 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009b50:	4810      	ldr	r0, [pc, #64]	; (8009b94 <tcpip_thread+0x4c>)
 8009b52:	f00c f9f5 	bl	8015f40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <tcpip_thread+0x50>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d005      	beq.n	8009b6a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009b5e:	4b0e      	ldr	r3, [pc, #56]	; (8009b98 <tcpip_thread+0x50>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a0e      	ldr	r2, [pc, #56]	; (8009b9c <tcpip_thread+0x54>)
 8009b64:	6812      	ldr	r2, [r2, #0]
 8009b66:	4610      	mov	r0, r2
 8009b68:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009b6a:	f107 030c 	add.w	r3, r7, #12
 8009b6e:	4619      	mov	r1, r3
 8009b70:	480b      	ldr	r0, [pc, #44]	; (8009ba0 <tcpip_thread+0x58>)
 8009b72:	f7ff ffb3 	bl	8009adc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d106      	bne.n	8009b8a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009b7c:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <tcpip_thread+0x5c>)
 8009b7e:	2291      	movs	r2, #145	; 0x91
 8009b80:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <tcpip_thread+0x60>)
 8009b82:	480a      	ldr	r0, [pc, #40]	; (8009bac <tcpip_thread+0x64>)
 8009b84:	f00c fa7e 	bl	8016084 <iprintf>
      continue;
 8009b88:	e003      	b.n	8009b92 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 f80f 	bl	8009bb0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009b92:	e7ea      	b.n	8009b6a <tcpip_thread+0x22>
 8009b94:	200081e0 	.word	0x200081e0
 8009b98:	200049b4 	.word	0x200049b4
 8009b9c:	200049b8 	.word	0x200049b8
 8009ba0:	200049bc 	.word	0x200049bc
 8009ba4:	08017320 	.word	0x08017320
 8009ba8:	08017350 	.word	0x08017350
 8009bac:	08017370 	.word	0x08017370

08009bb0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d026      	beq.n	8009c0e <tcpip_thread_handle_msg+0x5e>
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	dc2b      	bgt.n	8009c1c <tcpip_thread_handle_msg+0x6c>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <tcpip_thread_handle_msg+0x1e>
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d015      	beq.n	8009bf8 <tcpip_thread_handle_msg+0x48>
 8009bcc:	e026      	b.n	8009c1c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6850      	ldr	r0, [r2, #4]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6892      	ldr	r2, [r2, #8]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4798      	blx	r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 fcd1 	bl	800b590 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009bee:	6879      	ldr	r1, [r7, #4]
 8009bf0:	2009      	movs	r0, #9
 8009bf2:	f000 fe1d 	bl	800a830 <memp_free>
      break;
 8009bf6:	e018      	b.n	8009c2a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	6892      	ldr	r2, [r2, #8]
 8009c00:	4610      	mov	r0, r2
 8009c02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	2008      	movs	r0, #8
 8009c08:	f000 fe12 	bl	800a830 <memp_free>
      break;
 8009c0c:	e00d      	b.n	8009c2a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	6892      	ldr	r2, [r2, #8]
 8009c16:	4610      	mov	r0, r2
 8009c18:	4798      	blx	r3
      break;
 8009c1a:	e006      	b.n	8009c2a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <tcpip_thread_handle_msg+0x84>)
 8009c1e:	22cf      	movs	r2, #207	; 0xcf
 8009c20:	4905      	ldr	r1, [pc, #20]	; (8009c38 <tcpip_thread_handle_msg+0x88>)
 8009c22:	4806      	ldr	r0, [pc, #24]	; (8009c3c <tcpip_thread_handle_msg+0x8c>)
 8009c24:	f00c fa2e 	bl	8016084 <iprintf>
      break;
 8009c28:	bf00      	nop
  }
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	08017320 	.word	0x08017320
 8009c38:	08017350 	.word	0x08017350
 8009c3c:	08017370 	.word	0x08017370

08009c40 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009c4c:	481a      	ldr	r0, [pc, #104]	; (8009cb8 <tcpip_inpkt+0x78>)
 8009c4e:	f00c f944 	bl	8015eda <sys_mbox_valid>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d105      	bne.n	8009c64 <tcpip_inpkt+0x24>
 8009c58:	4b18      	ldr	r3, [pc, #96]	; (8009cbc <tcpip_inpkt+0x7c>)
 8009c5a:	22fc      	movs	r2, #252	; 0xfc
 8009c5c:	4918      	ldr	r1, [pc, #96]	; (8009cc0 <tcpip_inpkt+0x80>)
 8009c5e:	4819      	ldr	r0, [pc, #100]	; (8009cc4 <tcpip_inpkt+0x84>)
 8009c60:	f00c fa10 	bl	8016084 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009c64:	2009      	movs	r0, #9
 8009c66:	f000 fd91 	bl	800a78c <memp_malloc>
 8009c6a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d102      	bne.n	8009c78 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009c72:	f04f 33ff 	mov.w	r3, #4294967295
 8009c76:	e01a      	b.n	8009cae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009c90:	6979      	ldr	r1, [r7, #20]
 8009c92:	4809      	ldr	r0, [pc, #36]	; (8009cb8 <tcpip_inpkt+0x78>)
 8009c94:	f00c f8d6 	bl	8015e44 <sys_mbox_trypost>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d006      	beq.n	8009cac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	2009      	movs	r0, #9
 8009ca2:	f000 fdc5 	bl	800a830 <memp_free>
    return ERR_MEM;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	e000      	b.n	8009cae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009cac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	200049bc 	.word	0x200049bc
 8009cbc:	08017320 	.word	0x08017320
 8009cc0:	08017398 	.word	0x08017398
 8009cc4:	08017370 	.word	0x08017370

08009cc8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009cd8:	f003 0318 	and.w	r3, r3, #24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d006      	beq.n	8009cee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009ce0:	4a08      	ldr	r2, [pc, #32]	; (8009d04 <tcpip_input+0x3c>)
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff ffab 	bl	8009c40 <tcpip_inpkt>
 8009cea:	4603      	mov	r3, r0
 8009cec:	e005      	b.n	8009cfa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009cee:	4a06      	ldr	r2, [pc, #24]	; (8009d08 <tcpip_input+0x40>)
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff ffa4 	bl	8009c40 <tcpip_inpkt>
 8009cf8:	4603      	mov	r3, r0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	08015c65 	.word	0x08015c65
 8009d08:	08014a19 	.word	0x08014a19

08009d0c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009d16:	4819      	ldr	r0, [pc, #100]	; (8009d7c <tcpip_try_callback+0x70>)
 8009d18:	f00c f8df 	bl	8015eda <sys_mbox_valid>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <tcpip_try_callback+0x24>
 8009d22:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <tcpip_try_callback+0x74>)
 8009d24:	f240 125d 	movw	r2, #349	; 0x15d
 8009d28:	4916      	ldr	r1, [pc, #88]	; (8009d84 <tcpip_try_callback+0x78>)
 8009d2a:	4817      	ldr	r0, [pc, #92]	; (8009d88 <tcpip_try_callback+0x7c>)
 8009d2c:	f00c f9aa 	bl	8016084 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009d30:	2008      	movs	r0, #8
 8009d32:	f000 fd2b 	bl	800a78c <memp_malloc>
 8009d36:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d42:	e017      	b.n	8009d74 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d56:	68f9      	ldr	r1, [r7, #12]
 8009d58:	4808      	ldr	r0, [pc, #32]	; (8009d7c <tcpip_try_callback+0x70>)
 8009d5a:	f00c f873 	bl	8015e44 <sys_mbox_trypost>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009d64:	68f9      	ldr	r1, [r7, #12]
 8009d66:	2008      	movs	r0, #8
 8009d68:	f000 fd62 	bl	800a830 <memp_free>
    return ERR_MEM;
 8009d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d70:	e000      	b.n	8009d74 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200049bc 	.word	0x200049bc
 8009d80:	08017320 	.word	0x08017320
 8009d84:	08017398 	.word	0x08017398
 8009d88:	08017370 	.word	0x08017370

08009d8c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009d96:	f000 f871 	bl	8009e7c <lwip_init>

  tcpip_init_done = initfunc;
 8009d9a:	4a17      	ldr	r2, [pc, #92]	; (8009df8 <tcpip_init+0x6c>)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009da0:	4a16      	ldr	r2, [pc, #88]	; (8009dfc <tcpip_init+0x70>)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009da6:	2106      	movs	r1, #6
 8009da8:	4815      	ldr	r0, [pc, #84]	; (8009e00 <tcpip_init+0x74>)
 8009daa:	f00c f831 	bl	8015e10 <sys_mbox_new>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d006      	beq.n	8009dc2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009db4:	4b13      	ldr	r3, [pc, #76]	; (8009e04 <tcpip_init+0x78>)
 8009db6:	f240 2261 	movw	r2, #609	; 0x261
 8009dba:	4913      	ldr	r1, [pc, #76]	; (8009e08 <tcpip_init+0x7c>)
 8009dbc:	4813      	ldr	r0, [pc, #76]	; (8009e0c <tcpip_init+0x80>)
 8009dbe:	f00c f961 	bl	8016084 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009dc2:	4813      	ldr	r0, [pc, #76]	; (8009e10 <tcpip_init+0x84>)
 8009dc4:	f00c f8a6 	bl	8015f14 <sys_mutex_new>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d006      	beq.n	8009ddc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009dce:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <tcpip_init+0x78>)
 8009dd0:	f240 2265 	movw	r2, #613	; 0x265
 8009dd4:	490f      	ldr	r1, [pc, #60]	; (8009e14 <tcpip_init+0x88>)
 8009dd6:	480d      	ldr	r0, [pc, #52]	; (8009e0c <tcpip_init+0x80>)
 8009dd8:	f00c f954 	bl	8016084 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009ddc:	2318      	movs	r3, #24
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de4:	2200      	movs	r2, #0
 8009de6:	490c      	ldr	r1, [pc, #48]	; (8009e18 <tcpip_init+0x8c>)
 8009de8:	480c      	ldr	r0, [pc, #48]	; (8009e1c <tcpip_init+0x90>)
 8009dea:	f00c f8c5 	bl	8015f78 <sys_thread_new>
}
 8009dee:	bf00      	nop
 8009df0:	3708      	adds	r7, #8
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200049b4 	.word	0x200049b4
 8009dfc:	200049b8 	.word	0x200049b8
 8009e00:	200049bc 	.word	0x200049bc
 8009e04:	08017320 	.word	0x08017320
 8009e08:	080173a8 	.word	0x080173a8
 8009e0c:	08017370 	.word	0x08017370
 8009e10:	200081e0 	.word	0x200081e0
 8009e14:	080173cc 	.word	0x080173cc
 8009e18:	08009b49 	.word	0x08009b49
 8009e1c:	080173f0 	.word	0x080173f0

08009e20 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	4603      	mov	r3, r0
 8009e28:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	b21a      	sxth	r2, r3
 8009e30:	88fb      	ldrh	r3, [r7, #6]
 8009e32:	0a1b      	lsrs	r3, r3, #8
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	b21b      	sxth	r3, r3
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	b29b      	uxth	r3, r3
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	370c      	adds	r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	061a      	lsls	r2, r3, #24
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	0a1b      	lsrs	r3, r3, #8
 8009e64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e68:	431a      	orrs	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	0e1b      	lsrs	r3, r3, #24
 8009e6e:	4313      	orrs	r3, r2
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e82:	2300      	movs	r3, #0
 8009e84:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009e86:	f00c f839 	bl	8015efc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009e8a:	f000 f8d5 	bl	800a038 <mem_init>
  memp_init();
 8009e8e:	f000 fc31 	bl	800a6f4 <memp_init>
  pbuf_init();
  netif_init();
 8009e92:	f000 fcf7 	bl	800a884 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009e96:	f007 f8f7 	bl	8011088 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009e9a:	f001 fe23 	bl	800bae4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009e9e:	f007 f839 	bl	8010f14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009eb6:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <ptr_to_mem+0x20>)
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	88fb      	ldrh	r3, [r7, #6]
 8009ebc:	4413      	add	r3, r2
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	200049c0 	.word	0x200049c0

08009ed0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009ed8:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <mem_to_ptr+0x20>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	b29b      	uxth	r3, r3
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	200049c0 	.word	0x200049c0

08009ef4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009ef4:	b590      	push	{r4, r7, lr}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009efc:	4b45      	ldr	r3, [pc, #276]	; (800a014 <plug_holes+0x120>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d206      	bcs.n	8009f14 <plug_holes+0x20>
 8009f06:	4b44      	ldr	r3, [pc, #272]	; (800a018 <plug_holes+0x124>)
 8009f08:	f240 12df 	movw	r2, #479	; 0x1df
 8009f0c:	4943      	ldr	r1, [pc, #268]	; (800a01c <plug_holes+0x128>)
 8009f0e:	4844      	ldr	r0, [pc, #272]	; (800a020 <plug_holes+0x12c>)
 8009f10:	f00c f8b8 	bl	8016084 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009f14:	4b43      	ldr	r3, [pc, #268]	; (800a024 <plug_holes+0x130>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d306      	bcc.n	8009f2c <plug_holes+0x38>
 8009f1e:	4b3e      	ldr	r3, [pc, #248]	; (800a018 <plug_holes+0x124>)
 8009f20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009f24:	4940      	ldr	r1, [pc, #256]	; (800a028 <plug_holes+0x134>)
 8009f26:	483e      	ldr	r0, [pc, #248]	; (800a020 <plug_holes+0x12c>)
 8009f28:	f00c f8ac 	bl	8016084 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	791b      	ldrb	r3, [r3, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <plug_holes+0x4e>
 8009f34:	4b38      	ldr	r3, [pc, #224]	; (800a018 <plug_holes+0x124>)
 8009f36:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009f3a:	493c      	ldr	r1, [pc, #240]	; (800a02c <plug_holes+0x138>)
 8009f3c:	4838      	ldr	r0, [pc, #224]	; (800a020 <plug_holes+0x12c>)
 8009f3e:	f00c f8a1 	bl	8016084 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	881b      	ldrh	r3, [r3, #0]
 8009f46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f4a:	d906      	bls.n	8009f5a <plug_holes+0x66>
 8009f4c:	4b32      	ldr	r3, [pc, #200]	; (800a018 <plug_holes+0x124>)
 8009f4e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009f52:	4937      	ldr	r1, [pc, #220]	; (800a030 <plug_holes+0x13c>)
 8009f54:	4832      	ldr	r0, [pc, #200]	; (800a020 <plug_holes+0x12c>)
 8009f56:	f00c f895 	bl	8016084 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff ffa4 	bl	8009eac <ptr_to_mem>
 8009f64:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d024      	beq.n	8009fb8 <plug_holes+0xc4>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	791b      	ldrb	r3, [r3, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d120      	bne.n	8009fb8 <plug_holes+0xc4>
 8009f76:	4b2b      	ldr	r3, [pc, #172]	; (800a024 <plug_holes+0x130>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d01b      	beq.n	8009fb8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009f80:	4b2c      	ldr	r3, [pc, #176]	; (800a034 <plug_holes+0x140>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d102      	bne.n	8009f90 <plug_holes+0x9c>
      lfree = mem;
 8009f8a:	4a2a      	ldr	r2, [pc, #168]	; (800a034 <plug_holes+0x140>)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	881a      	ldrh	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fa0:	d00a      	beq.n	8009fb8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f7ff ff80 	bl	8009eac <ptr_to_mem>
 8009fac:	4604      	mov	r4, r0
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff ff8e 	bl	8009ed0 <mem_to_ptr>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	885b      	ldrh	r3, [r3, #2]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff ff75 	bl	8009eac <ptr_to_mem>
 8009fc2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d01f      	beq.n	800a00c <plug_holes+0x118>
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	791b      	ldrb	r3, [r3, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d11b      	bne.n	800a00c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <plug_holes+0x140>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d102      	bne.n	8009fe4 <plug_holes+0xf0>
      lfree = pmem;
 8009fde:	4a15      	ldr	r2, [pc, #84]	; (800a034 <plug_holes+0x140>)
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	881a      	ldrh	r2, [r3, #0]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ff4:	d00a      	beq.n	800a00c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff ff56 	bl	8009eac <ptr_to_mem>
 800a000:	4604      	mov	r4, r0
 800a002:	68b8      	ldr	r0, [r7, #8]
 800a004:	f7ff ff64 	bl	8009ed0 <mem_to_ptr>
 800a008:	4603      	mov	r3, r0
 800a00a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a00c:	bf00      	nop
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	bd90      	pop	{r4, r7, pc}
 800a014:	200049c0 	.word	0x200049c0
 800a018:	08017400 	.word	0x08017400
 800a01c:	08017430 	.word	0x08017430
 800a020:	08017448 	.word	0x08017448
 800a024:	200049c4 	.word	0x200049c4
 800a028:	08017470 	.word	0x08017470
 800a02c:	0801748c 	.word	0x0801748c
 800a030:	080174a8 	.word	0x080174a8
 800a034:	200049cc 	.word	0x200049cc

0800a038 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a03e:	4b1f      	ldr	r3, [pc, #124]	; (800a0bc <mem_init+0x84>)
 800a040:	3303      	adds	r3, #3
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	461a      	mov	r2, r3
 800a048:	4b1d      	ldr	r3, [pc, #116]	; (800a0c0 <mem_init+0x88>)
 800a04a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a04c:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <mem_init+0x88>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a058:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a066:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a06a:	f7ff ff1f 	bl	8009eac <ptr_to_mem>
 800a06e:	4603      	mov	r3, r0
 800a070:	4a14      	ldr	r2, [pc, #80]	; (800a0c4 <mem_init+0x8c>)
 800a072:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a074:	4b13      	ldr	r3, [pc, #76]	; (800a0c4 <mem_init+0x8c>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2201      	movs	r2, #1
 800a07a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a07c:	4b11      	ldr	r3, [pc, #68]	; (800a0c4 <mem_init+0x8c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a084:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a086:	4b0f      	ldr	r3, [pc, #60]	; (800a0c4 <mem_init+0x8c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a08e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a090:	4b0b      	ldr	r3, [pc, #44]	; (800a0c0 <mem_init+0x88>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a0c      	ldr	r2, [pc, #48]	; (800a0c8 <mem_init+0x90>)
 800a096:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a098:	480c      	ldr	r0, [pc, #48]	; (800a0cc <mem_init+0x94>)
 800a09a:	f00b ff3b 	bl	8015f14 <sys_mutex_new>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d006      	beq.n	800a0b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a0a4:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <mem_init+0x98>)
 800a0a6:	f240 221f 	movw	r2, #543	; 0x21f
 800a0aa:	490a      	ldr	r1, [pc, #40]	; (800a0d4 <mem_init+0x9c>)
 800a0ac:	480a      	ldr	r0, [pc, #40]	; (800a0d8 <mem_init+0xa0>)
 800a0ae:	f00b ffe9 	bl	8016084 <iprintf>
  }
}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200081fc 	.word	0x200081fc
 800a0c0:	200049c0 	.word	0x200049c0
 800a0c4:	200049c4 	.word	0x200049c4
 800a0c8:	200049cc 	.word	0x200049cc
 800a0cc:	200049c8 	.word	0x200049c8
 800a0d0:	08017400 	.word	0x08017400
 800a0d4:	080174d4 	.word	0x080174d4
 800a0d8:	08017448 	.word	0x08017448

0800a0dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fef3 	bl	8009ed0 <mem_to_ptr>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	881b      	ldrh	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff feda 	bl	8009eac <ptr_to_mem>
 800a0f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff fed4 	bl	8009eac <ptr_to_mem>
 800a104:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a10e:	d818      	bhi.n	800a142 <mem_link_valid+0x66>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	885b      	ldrh	r3, [r3, #2]
 800a114:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a118:	d813      	bhi.n	800a142 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a11e:	8afa      	ldrh	r2, [r7, #22]
 800a120:	429a      	cmp	r2, r3
 800a122:	d004      	beq.n	800a12e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	8afa      	ldrh	r2, [r7, #22]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d109      	bne.n	800a142 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a12e:	4b08      	ldr	r3, [pc, #32]	; (800a150 <mem_link_valid+0x74>)
 800a130:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	429a      	cmp	r2, r3
 800a136:	d006      	beq.n	800a146 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	885b      	ldrh	r3, [r3, #2]
 800a13c:	8afa      	ldrh	r2, [r7, #22]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d001      	beq.n	800a146 <mem_link_valid+0x6a>
    return 0;
 800a142:	2300      	movs	r3, #0
 800a144:	e000      	b.n	800a148 <mem_link_valid+0x6c>
  }
  return 1;
 800a146:	2301      	movs	r3, #1
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	200049c4 	.word	0x200049c4

0800a154 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d070      	beq.n	800a244 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f003 0303 	and.w	r3, r3, #3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00d      	beq.n	800a188 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a16c:	4b37      	ldr	r3, [pc, #220]	; (800a24c <mem_free+0xf8>)
 800a16e:	f240 2273 	movw	r2, #627	; 0x273
 800a172:	4937      	ldr	r1, [pc, #220]	; (800a250 <mem_free+0xfc>)
 800a174:	4837      	ldr	r0, [pc, #220]	; (800a254 <mem_free+0x100>)
 800a176:	f00b ff85 	bl	8016084 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a17a:	f00b ff1d 	bl	8015fb8 <sys_arch_protect>
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f00b ff27 	bl	8015fd4 <sys_arch_unprotect>
    return;
 800a186:	e05e      	b.n	800a246 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	3b08      	subs	r3, #8
 800a18c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a18e:	4b32      	ldr	r3, [pc, #200]	; (800a258 <mem_free+0x104>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	69fa      	ldr	r2, [r7, #28]
 800a194:	429a      	cmp	r2, r3
 800a196:	d306      	bcc.n	800a1a6 <mem_free+0x52>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 020c 	add.w	r2, r3, #12
 800a19e:	4b2f      	ldr	r3, [pc, #188]	; (800a25c <mem_free+0x108>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90d      	bls.n	800a1c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a1a6:	4b29      	ldr	r3, [pc, #164]	; (800a24c <mem_free+0xf8>)
 800a1a8:	f240 227f 	movw	r2, #639	; 0x27f
 800a1ac:	492c      	ldr	r1, [pc, #176]	; (800a260 <mem_free+0x10c>)
 800a1ae:	4829      	ldr	r0, [pc, #164]	; (800a254 <mem_free+0x100>)
 800a1b0:	f00b ff68 	bl	8016084 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a1b4:	f00b ff00 	bl	8015fb8 <sys_arch_protect>
 800a1b8:	6138      	str	r0, [r7, #16]
 800a1ba:	6938      	ldr	r0, [r7, #16]
 800a1bc:	f00b ff0a 	bl	8015fd4 <sys_arch_unprotect>
    return;
 800a1c0:	e041      	b.n	800a246 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a1c2:	4828      	ldr	r0, [pc, #160]	; (800a264 <mem_free+0x110>)
 800a1c4:	f00b febc 	bl	8015f40 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	791b      	ldrb	r3, [r3, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d110      	bne.n	800a1f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a1d0:	4b1e      	ldr	r3, [pc, #120]	; (800a24c <mem_free+0xf8>)
 800a1d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a1d6:	4924      	ldr	r1, [pc, #144]	; (800a268 <mem_free+0x114>)
 800a1d8:	481e      	ldr	r0, [pc, #120]	; (800a254 <mem_free+0x100>)
 800a1da:	f00b ff53 	bl	8016084 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a1de:	4821      	ldr	r0, [pc, #132]	; (800a264 <mem_free+0x110>)
 800a1e0:	f00b febd 	bl	8015f5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a1e4:	f00b fee8 	bl	8015fb8 <sys_arch_protect>
 800a1e8:	6178      	str	r0, [r7, #20]
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	f00b fef2 	bl	8015fd4 <sys_arch_unprotect>
    return;
 800a1f0:	e029      	b.n	800a246 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a1f2:	69f8      	ldr	r0, [r7, #28]
 800a1f4:	f7ff ff72 	bl	800a0dc <mem_link_valid>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d110      	bne.n	800a220 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <mem_free+0xf8>)
 800a200:	f240 2295 	movw	r2, #661	; 0x295
 800a204:	4919      	ldr	r1, [pc, #100]	; (800a26c <mem_free+0x118>)
 800a206:	4813      	ldr	r0, [pc, #76]	; (800a254 <mem_free+0x100>)
 800a208:	f00b ff3c 	bl	8016084 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a20c:	4815      	ldr	r0, [pc, #84]	; (800a264 <mem_free+0x110>)
 800a20e:	f00b fea6 	bl	8015f5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a212:	f00b fed1 	bl	8015fb8 <sys_arch_protect>
 800a216:	61b8      	str	r0, [r7, #24]
 800a218:	69b8      	ldr	r0, [r7, #24]
 800a21a:	f00b fedb 	bl	8015fd4 <sys_arch_unprotect>
    return;
 800a21e:	e012      	b.n	800a246 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	2200      	movs	r2, #0
 800a224:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a226:	4b12      	ldr	r3, [pc, #72]	; (800a270 <mem_free+0x11c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d202      	bcs.n	800a236 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a230:	4a0f      	ldr	r2, [pc, #60]	; (800a270 <mem_free+0x11c>)
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a236:	69f8      	ldr	r0, [r7, #28]
 800a238:	f7ff fe5c 	bl	8009ef4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a23c:	4809      	ldr	r0, [pc, #36]	; (800a264 <mem_free+0x110>)
 800a23e:	f00b fe8e 	bl	8015f5e <sys_mutex_unlock>
 800a242:	e000      	b.n	800a246 <mem_free+0xf2>
    return;
 800a244:	bf00      	nop
}
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	08017400 	.word	0x08017400
 800a250:	080174f0 	.word	0x080174f0
 800a254:	08017448 	.word	0x08017448
 800a258:	200049c0 	.word	0x200049c0
 800a25c:	200049c4 	.word	0x200049c4
 800a260:	08017514 	.word	0x08017514
 800a264:	200049c8 	.word	0x200049c8
 800a268:	08017530 	.word	0x08017530
 800a26c:	08017558 	.word	0x08017558
 800a270:	200049cc 	.word	0x200049cc

0800a274 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	460b      	mov	r3, r1
 800a27e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a280:	887b      	ldrh	r3, [r7, #2]
 800a282:	3303      	adds	r3, #3
 800a284:	b29b      	uxth	r3, r3
 800a286:	f023 0303 	bic.w	r3, r3, #3
 800a28a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a28c:	8bfb      	ldrh	r3, [r7, #30]
 800a28e:	2b0b      	cmp	r3, #11
 800a290:	d801      	bhi.n	800a296 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a292:	230c      	movs	r3, #12
 800a294:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a296:	8bfb      	ldrh	r3, [r7, #30]
 800a298:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a29c:	d803      	bhi.n	800a2a6 <mem_trim+0x32>
 800a29e:	8bfa      	ldrh	r2, [r7, #30]
 800a2a0:	887b      	ldrh	r3, [r7, #2]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d201      	bcs.n	800a2aa <mem_trim+0x36>
    return NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	e0d8      	b.n	800a45c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a2aa:	4b6e      	ldr	r3, [pc, #440]	; (800a464 <mem_trim+0x1f0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d304      	bcc.n	800a2be <mem_trim+0x4a>
 800a2b4:	4b6c      	ldr	r3, [pc, #432]	; (800a468 <mem_trim+0x1f4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d306      	bcc.n	800a2cc <mem_trim+0x58>
 800a2be:	4b6b      	ldr	r3, [pc, #428]	; (800a46c <mem_trim+0x1f8>)
 800a2c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a2c4:	496a      	ldr	r1, [pc, #424]	; (800a470 <mem_trim+0x1fc>)
 800a2c6:	486b      	ldr	r0, [pc, #428]	; (800a474 <mem_trim+0x200>)
 800a2c8:	f00b fedc 	bl	8016084 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a2cc:	4b65      	ldr	r3, [pc, #404]	; (800a464 <mem_trim+0x1f0>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d304      	bcc.n	800a2e0 <mem_trim+0x6c>
 800a2d6:	4b64      	ldr	r3, [pc, #400]	; (800a468 <mem_trim+0x1f4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d307      	bcc.n	800a2f0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2e0:	f00b fe6a 	bl	8015fb8 <sys_arch_protect>
 800a2e4:	60b8      	str	r0, [r7, #8]
 800a2e6:	68b8      	ldr	r0, [r7, #8]
 800a2e8:	f00b fe74 	bl	8015fd4 <sys_arch_unprotect>
    return rmem;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	e0b5      	b.n	800a45c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3b08      	subs	r3, #8
 800a2f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a2f6:	69b8      	ldr	r0, [r7, #24]
 800a2f8:	f7ff fdea 	bl	8009ed0 <mem_to_ptr>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	881a      	ldrh	r2, [r3, #0]
 800a304:	8afb      	ldrh	r3, [r7, #22]
 800a306:	1ad3      	subs	r3, r2, r3
 800a308:	b29b      	uxth	r3, r3
 800a30a:	3b08      	subs	r3, #8
 800a30c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a30e:	8bfa      	ldrh	r2, [r7, #30]
 800a310:	8abb      	ldrh	r3, [r7, #20]
 800a312:	429a      	cmp	r2, r3
 800a314:	d906      	bls.n	800a324 <mem_trim+0xb0>
 800a316:	4b55      	ldr	r3, [pc, #340]	; (800a46c <mem_trim+0x1f8>)
 800a318:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a31c:	4956      	ldr	r1, [pc, #344]	; (800a478 <mem_trim+0x204>)
 800a31e:	4855      	ldr	r0, [pc, #340]	; (800a474 <mem_trim+0x200>)
 800a320:	f00b feb0 	bl	8016084 <iprintf>
  if (newsize > size) {
 800a324:	8bfa      	ldrh	r2, [r7, #30]
 800a326:	8abb      	ldrh	r3, [r7, #20]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d901      	bls.n	800a330 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	e095      	b.n	800a45c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a330:	8bfa      	ldrh	r2, [r7, #30]
 800a332:	8abb      	ldrh	r3, [r7, #20]
 800a334:	429a      	cmp	r2, r3
 800a336:	d101      	bne.n	800a33c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	e08f      	b.n	800a45c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a33c:	484f      	ldr	r0, [pc, #316]	; (800a47c <mem_trim+0x208>)
 800a33e:	f00b fdff 	bl	8015f40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff fdb0 	bl	8009eac <ptr_to_mem>
 800a34c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	791b      	ldrb	r3, [r3, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d13f      	bne.n	800a3d6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a35e:	d106      	bne.n	800a36e <mem_trim+0xfa>
 800a360:	4b42      	ldr	r3, [pc, #264]	; (800a46c <mem_trim+0x1f8>)
 800a362:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a366:	4946      	ldr	r1, [pc, #280]	; (800a480 <mem_trim+0x20c>)
 800a368:	4842      	ldr	r0, [pc, #264]	; (800a474 <mem_trim+0x200>)
 800a36a:	f00b fe8b 	bl	8016084 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a374:	8afa      	ldrh	r2, [r7, #22]
 800a376:	8bfb      	ldrh	r3, [r7, #30]
 800a378:	4413      	add	r3, r2
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3308      	adds	r3, #8
 800a37e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a380:	4b40      	ldr	r3, [pc, #256]	; (800a484 <mem_trim+0x210>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	693a      	ldr	r2, [r7, #16]
 800a386:	429a      	cmp	r2, r3
 800a388:	d106      	bne.n	800a398 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a38a:	89fb      	ldrh	r3, [r7, #14]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff fd8d 	bl	8009eac <ptr_to_mem>
 800a392:	4603      	mov	r3, r0
 800a394:	4a3b      	ldr	r2, [pc, #236]	; (800a484 <mem_trim+0x210>)
 800a396:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a398:	89fb      	ldrh	r3, [r7, #14]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fd86 	bl	8009eac <ptr_to_mem>
 800a3a0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	89ba      	ldrh	r2, [r7, #12]
 800a3ac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	8afa      	ldrh	r2, [r7, #22]
 800a3b2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	89fa      	ldrh	r2, [r7, #14]
 800a3b8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3c2:	d047      	beq.n	800a454 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff fd6f 	bl	8009eac <ptr_to_mem>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	8053      	strh	r3, [r2, #2]
 800a3d4:	e03e      	b.n	800a454 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a3d6:	8bfb      	ldrh	r3, [r7, #30]
 800a3d8:	f103 0214 	add.w	r2, r3, #20
 800a3dc:	8abb      	ldrh	r3, [r7, #20]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d838      	bhi.n	800a454 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a3e2:	8afa      	ldrh	r2, [r7, #22]
 800a3e4:	8bfb      	ldrh	r3, [r7, #30]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3f6:	d106      	bne.n	800a406 <mem_trim+0x192>
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	; (800a46c <mem_trim+0x1f8>)
 800a3fa:	f240 3216 	movw	r2, #790	; 0x316
 800a3fe:	4920      	ldr	r1, [pc, #128]	; (800a480 <mem_trim+0x20c>)
 800a400:	481c      	ldr	r0, [pc, #112]	; (800a474 <mem_trim+0x200>)
 800a402:	f00b fe3f 	bl	8016084 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	4618      	mov	r0, r3
 800a40a:	f7ff fd4f 	bl	8009eac <ptr_to_mem>
 800a40e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a410:	4b1c      	ldr	r3, [pc, #112]	; (800a484 <mem_trim+0x210>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	693a      	ldr	r2, [r7, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d202      	bcs.n	800a420 <mem_trim+0x1ac>
      lfree = mem2;
 800a41a:	4a1a      	ldr	r2, [pc, #104]	; (800a484 <mem_trim+0x210>)
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	2200      	movs	r2, #0
 800a424:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	881a      	ldrh	r2, [r3, #0]
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	8afa      	ldrh	r2, [r7, #22]
 800a432:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	89fa      	ldrh	r2, [r7, #14]
 800a438:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a442:	d007      	beq.n	800a454 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fd2f 	bl	8009eac <ptr_to_mem>
 800a44e:	4602      	mov	r2, r0
 800a450:	89fb      	ldrh	r3, [r7, #14]
 800a452:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <mem_trim+0x208>)
 800a456:	f00b fd82 	bl	8015f5e <sys_mutex_unlock>
  return rmem;
 800a45a:	687b      	ldr	r3, [r7, #4]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3720      	adds	r7, #32
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	200049c0 	.word	0x200049c0
 800a468:	200049c4 	.word	0x200049c4
 800a46c:	08017400 	.word	0x08017400
 800a470:	0801758c 	.word	0x0801758c
 800a474:	08017448 	.word	0x08017448
 800a478:	080175a4 	.word	0x080175a4
 800a47c:	200049c8 	.word	0x200049c8
 800a480:	080175c4 	.word	0x080175c4
 800a484:	200049cc 	.word	0x200049cc

0800a488 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b088      	sub	sp, #32
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a492:	88fb      	ldrh	r3, [r7, #6]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <mem_malloc+0x14>
    return NULL;
 800a498:	2300      	movs	r3, #0
 800a49a:	e0e2      	b.n	800a662 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a49c:	88fb      	ldrh	r3, [r7, #6]
 800a49e:	3303      	adds	r3, #3
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a4a8:	8bbb      	ldrh	r3, [r7, #28]
 800a4aa:	2b0b      	cmp	r3, #11
 800a4ac:	d801      	bhi.n	800a4b2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a4b2:	8bbb      	ldrh	r3, [r7, #28]
 800a4b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b8:	d803      	bhi.n	800a4c2 <mem_malloc+0x3a>
 800a4ba:	8bba      	ldrh	r2, [r7, #28]
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d201      	bcs.n	800a4c6 <mem_malloc+0x3e>
    return NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e0cd      	b.n	800a662 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a4c6:	4869      	ldr	r0, [pc, #420]	; (800a66c <mem_malloc+0x1e4>)
 800a4c8:	f00b fd3a 	bl	8015f40 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a4cc:	4b68      	ldr	r3, [pc, #416]	; (800a670 <mem_malloc+0x1e8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fcfd 	bl	8009ed0 <mem_to_ptr>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	83fb      	strh	r3, [r7, #30]
 800a4da:	e0b7      	b.n	800a64c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a4dc:	8bfb      	ldrh	r3, [r7, #30]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fce4 	bl	8009eac <ptr_to_mem>
 800a4e4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	791b      	ldrb	r3, [r3, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 80a7 	bne.w	800a63e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	881b      	ldrh	r3, [r3, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	8bfb      	ldrh	r3, [r7, #30]
 800a4f8:	1ad3      	subs	r3, r2, r3
 800a4fa:	f1a3 0208 	sub.w	r2, r3, #8
 800a4fe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a500:	429a      	cmp	r2, r3
 800a502:	f0c0 809c 	bcc.w	800a63e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	461a      	mov	r2, r3
 800a50c:	8bfb      	ldrh	r3, [r7, #30]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	f1a3 0208 	sub.w	r2, r3, #8
 800a514:	8bbb      	ldrh	r3, [r7, #28]
 800a516:	3314      	adds	r3, #20
 800a518:	429a      	cmp	r2, r3
 800a51a:	d333      	bcc.n	800a584 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a51c:	8bfa      	ldrh	r2, [r7, #30]
 800a51e:	8bbb      	ldrh	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	3308      	adds	r3, #8
 800a526:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a528:	8a7b      	ldrh	r3, [r7, #18]
 800a52a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a52e:	d106      	bne.n	800a53e <mem_malloc+0xb6>
 800a530:	4b50      	ldr	r3, [pc, #320]	; (800a674 <mem_malloc+0x1ec>)
 800a532:	f240 3287 	movw	r2, #903	; 0x387
 800a536:	4950      	ldr	r1, [pc, #320]	; (800a678 <mem_malloc+0x1f0>)
 800a538:	4850      	ldr	r0, [pc, #320]	; (800a67c <mem_malloc+0x1f4>)
 800a53a:	f00b fda3 	bl	8016084 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a53e:	8a7b      	ldrh	r3, [r7, #18]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fcb3 	bl	8009eac <ptr_to_mem>
 800a546:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	881a      	ldrh	r2, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8bfa      	ldrh	r2, [r7, #30]
 800a55a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	8a7a      	ldrh	r2, [r7, #18]
 800a560:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2201      	movs	r2, #1
 800a566:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	881b      	ldrh	r3, [r3, #0]
 800a56c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a570:	d00b      	beq.n	800a58a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f7ff fc98 	bl	8009eac <ptr_to_mem>
 800a57c:	4602      	mov	r2, r0
 800a57e:	8a7b      	ldrh	r3, [r7, #18]
 800a580:	8053      	strh	r3, [r2, #2]
 800a582:	e002      	b.n	800a58a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	2201      	movs	r2, #1
 800a588:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a58a:	4b39      	ldr	r3, [pc, #228]	; (800a670 <mem_malloc+0x1e8>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	429a      	cmp	r2, r3
 800a592:	d127      	bne.n	800a5e4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a594:	4b36      	ldr	r3, [pc, #216]	; (800a670 <mem_malloc+0x1e8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a59a:	e005      	b.n	800a5a8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fc83 	bl	8009eac <ptr_to_mem>
 800a5a6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	791b      	ldrb	r3, [r3, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d004      	beq.n	800a5ba <mem_malloc+0x132>
 800a5b0:	4b33      	ldr	r3, [pc, #204]	; (800a680 <mem_malloc+0x1f8>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	69ba      	ldr	r2, [r7, #24]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d1f0      	bne.n	800a59c <mem_malloc+0x114>
          }
          lfree = cur;
 800a5ba:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <mem_malloc+0x1e8>)
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a5c0:	4b2b      	ldr	r3, [pc, #172]	; (800a670 <mem_malloc+0x1e8>)
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	4b2e      	ldr	r3, [pc, #184]	; (800a680 <mem_malloc+0x1f8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d00b      	beq.n	800a5e4 <mem_malloc+0x15c>
 800a5cc:	4b28      	ldr	r3, [pc, #160]	; (800a670 <mem_malloc+0x1e8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	791b      	ldrb	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d006      	beq.n	800a5e4 <mem_malloc+0x15c>
 800a5d6:	4b27      	ldr	r3, [pc, #156]	; (800a674 <mem_malloc+0x1ec>)
 800a5d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a5dc:	4929      	ldr	r1, [pc, #164]	; (800a684 <mem_malloc+0x1fc>)
 800a5de:	4827      	ldr	r0, [pc, #156]	; (800a67c <mem_malloc+0x1f4>)
 800a5e0:	f00b fd50 	bl	8016084 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a5e4:	4821      	ldr	r0, [pc, #132]	; (800a66c <mem_malloc+0x1e4>)
 800a5e6:	f00b fcba 	bl	8015f5e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a5ea:	8bba      	ldrh	r2, [r7, #28]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	4a23      	ldr	r2, [pc, #140]	; (800a680 <mem_malloc+0x1f8>)
 800a5f4:	6812      	ldr	r2, [r2, #0]
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d906      	bls.n	800a608 <mem_malloc+0x180>
 800a5fa:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <mem_malloc+0x1ec>)
 800a5fc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a600:	4921      	ldr	r1, [pc, #132]	; (800a688 <mem_malloc+0x200>)
 800a602:	481e      	ldr	r0, [pc, #120]	; (800a67c <mem_malloc+0x1f4>)
 800a604:	f00b fd3e 	bl	8016084 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d006      	beq.n	800a620 <mem_malloc+0x198>
 800a612:	4b18      	ldr	r3, [pc, #96]	; (800a674 <mem_malloc+0x1ec>)
 800a614:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a618:	491c      	ldr	r1, [pc, #112]	; (800a68c <mem_malloc+0x204>)
 800a61a:	4818      	ldr	r0, [pc, #96]	; (800a67c <mem_malloc+0x1f4>)
 800a61c:	f00b fd32 	bl	8016084 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d006      	beq.n	800a638 <mem_malloc+0x1b0>
 800a62a:	4b12      	ldr	r3, [pc, #72]	; (800a674 <mem_malloc+0x1ec>)
 800a62c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a630:	4917      	ldr	r1, [pc, #92]	; (800a690 <mem_malloc+0x208>)
 800a632:	4812      	ldr	r0, [pc, #72]	; (800a67c <mem_malloc+0x1f4>)
 800a634:	f00b fd26 	bl	8016084 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	3308      	adds	r3, #8
 800a63c:	e011      	b.n	800a662 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a63e:	8bfb      	ldrh	r3, [r7, #30]
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fc33 	bl	8009eac <ptr_to_mem>
 800a646:	4603      	mov	r3, r0
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a64c:	8bfa      	ldrh	r2, [r7, #30]
 800a64e:	8bbb      	ldrh	r3, [r7, #28]
 800a650:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a654:	429a      	cmp	r2, r3
 800a656:	f4ff af41 	bcc.w	800a4dc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a65a:	4804      	ldr	r0, [pc, #16]	; (800a66c <mem_malloc+0x1e4>)
 800a65c:	f00b fc7f 	bl	8015f5e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200049c8 	.word	0x200049c8
 800a670:	200049cc 	.word	0x200049cc
 800a674:	08017400 	.word	0x08017400
 800a678:	080175c4 	.word	0x080175c4
 800a67c:	08017448 	.word	0x08017448
 800a680:	200049c4 	.word	0x200049c4
 800a684:	080175d8 	.word	0x080175d8
 800a688:	080175f4 	.word	0x080175f4
 800a68c:	08017624 	.word	0x08017624
 800a690:	08017654 	.word	0x08017654

0800a694 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	3303      	adds	r3, #3
 800a6aa:	f023 0303 	bic.w	r3, r3, #3
 800a6ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	e011      	b.n	800a6da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	dbe7      	blt.n	800a6b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a6e6:	bf00      	nop
 800a6e8:	bf00      	nop
 800a6ea:	3714      	adds	r7, #20
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	80fb      	strh	r3, [r7, #6]
 800a6fe:	e009      	b.n	800a714 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	4a08      	ldr	r2, [pc, #32]	; (800a724 <memp_init+0x30>)
 800a704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff ffc3 	bl	800a694 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	3301      	adds	r3, #1
 800a712:	80fb      	strh	r3, [r7, #6]
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	2b0c      	cmp	r3, #12
 800a718:	d9f2      	bls.n	800a700 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a71a:	bf00      	nop
 800a71c:	bf00      	nop
 800a71e:	3708      	adds	r7, #8
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}
 800a724:	0801a220 	.word	0x0801a220

0800a728 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a730:	f00b fc42 	bl	8015fb8 <sys_arch_protect>
 800a734:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d015      	beq.n	800a770 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	6812      	ldr	r2, [r2, #0]
 800a74c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f003 0303 	and.w	r3, r3, #3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <do_memp_malloc_pool+0x3e>
 800a758:	4b09      	ldr	r3, [pc, #36]	; (800a780 <do_memp_malloc_pool+0x58>)
 800a75a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a75e:	4909      	ldr	r1, [pc, #36]	; (800a784 <do_memp_malloc_pool+0x5c>)
 800a760:	4809      	ldr	r0, [pc, #36]	; (800a788 <do_memp_malloc_pool+0x60>)
 800a762:	f00b fc8f 	bl	8016084 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f00b fc34 	bl	8015fd4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	e003      	b.n	800a778 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f00b fc2f 	bl	8015fd4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	08017678 	.word	0x08017678
 800a784:	080176a8 	.word	0x080176a8
 800a788:	080176cc 	.word	0x080176cc

0800a78c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b084      	sub	sp, #16
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a796:	79fb      	ldrb	r3, [r7, #7]
 800a798:	2b0c      	cmp	r3, #12
 800a79a:	d908      	bls.n	800a7ae <memp_malloc+0x22>
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <memp_malloc+0x3c>)
 800a79e:	f240 1257 	movw	r2, #343	; 0x157
 800a7a2:	490a      	ldr	r1, [pc, #40]	; (800a7cc <memp_malloc+0x40>)
 800a7a4:	480a      	ldr	r0, [pc, #40]	; (800a7d0 <memp_malloc+0x44>)
 800a7a6:	f00b fc6d 	bl	8016084 <iprintf>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e008      	b.n	800a7c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	4a08      	ldr	r2, [pc, #32]	; (800a7d4 <memp_malloc+0x48>)
 800a7b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff ffb6 	bl	800a728 <do_memp_malloc_pool>
 800a7bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a7be:	68fb      	ldr	r3, [r7, #12]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	08017678 	.word	0x08017678
 800a7cc:	08017708 	.word	0x08017708
 800a7d0:	080176cc 	.word	0x080176cc
 800a7d4:	0801a220 	.word	0x0801a220

0800a7d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d006      	beq.n	800a7fa <do_memp_free_pool+0x22>
 800a7ec:	4b0d      	ldr	r3, [pc, #52]	; (800a824 <do_memp_free_pool+0x4c>)
 800a7ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a7f2:	490d      	ldr	r1, [pc, #52]	; (800a828 <do_memp_free_pool+0x50>)
 800a7f4:	480d      	ldr	r0, [pc, #52]	; (800a82c <do_memp_free_pool+0x54>)
 800a7f6:	f00b fc45 	bl	8016084 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a7fe:	f00b fbdb 	bl	8015fb8 <sys_arch_protect>
 800a802:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a816:	68b8      	ldr	r0, [r7, #8]
 800a818:	f00b fbdc 	bl	8015fd4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a81c:	bf00      	nop
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	08017678 	.word	0x08017678
 800a828:	08017728 	.word	0x08017728
 800a82c:	080176cc 	.word	0x080176cc

0800a830 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	2b0c      	cmp	r3, #12
 800a840:	d907      	bls.n	800a852 <memp_free+0x22>
 800a842:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <memp_free+0x44>)
 800a844:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a848:	490b      	ldr	r1, [pc, #44]	; (800a878 <memp_free+0x48>)
 800a84a:	480c      	ldr	r0, [pc, #48]	; (800a87c <memp_free+0x4c>)
 800a84c:	f00b fc1a 	bl	8016084 <iprintf>
 800a850:	e00c      	b.n	800a86c <memp_free+0x3c>

  if (mem == NULL) {
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a858:	79fb      	ldrb	r3, [r7, #7]
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <memp_free+0x50>)
 800a85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff ffb8 	bl	800a7d8 <do_memp_free_pool>
 800a868:	e000      	b.n	800a86c <memp_free+0x3c>
    return;
 800a86a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08017678 	.word	0x08017678
 800a878:	08017748 	.word	0x08017748
 800a87c:	080176cc 	.word	0x080176cc
 800a880:	0801a220 	.word	0x0801a220

0800a884 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a884:	b480      	push	{r7}
 800a886:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a888:	bf00      	nop
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
	...

0800a894 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	607a      	str	r2, [r7, #4]
 800a8a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d108      	bne.n	800a8ba <netif_add+0x26>
 800a8a8:	4b5b      	ldr	r3, [pc, #364]	; (800aa18 <netif_add+0x184>)
 800a8aa:	f240 1227 	movw	r2, #295	; 0x127
 800a8ae:	495b      	ldr	r1, [pc, #364]	; (800aa1c <netif_add+0x188>)
 800a8b0:	485b      	ldr	r0, [pc, #364]	; (800aa20 <netif_add+0x18c>)
 800a8b2:	f00b fbe7 	bl	8016084 <iprintf>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e0a9      	b.n	800aa0e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d108      	bne.n	800a8d2 <netif_add+0x3e>
 800a8c0:	4b55      	ldr	r3, [pc, #340]	; (800aa18 <netif_add+0x184>)
 800a8c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a8c6:	4957      	ldr	r1, [pc, #348]	; (800aa24 <netif_add+0x190>)
 800a8c8:	4855      	ldr	r0, [pc, #340]	; (800aa20 <netif_add+0x18c>)
 800a8ca:	f00b fbdb 	bl	8016084 <iprintf>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e09d      	b.n	800aa0e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a8d8:	4b53      	ldr	r3, [pc, #332]	; (800aa28 <netif_add+0x194>)
 800a8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a8e2:	4b51      	ldr	r3, [pc, #324]	; (800aa28 <netif_add+0x194>)
 800a8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a8ec:	4b4e      	ldr	r3, [pc, #312]	; (800aa28 <netif_add+0x194>)
 800a8ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2200      	movs	r2, #0
 800a900:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4a49      	ldr	r2, [pc, #292]	; (800aa2c <netif_add+0x198>)
 800a906:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3324      	adds	r3, #36	; 0x24
 800a91a:	2204      	movs	r2, #4
 800a91c:	2100      	movs	r1, #0
 800a91e:	4618      	mov	r0, r3
 800a920:	f00b fba8 	bl	8016074 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6a3a      	ldr	r2, [r7, #32]
 800a92e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a930:	4b3f      	ldr	r3, [pc, #252]	; (800aa30 <netif_add+0x19c>)
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a93e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	68b9      	ldr	r1, [r7, #8]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f000 f914 	bl	800ab74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	4798      	blx	r3
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <netif_add+0xc8>
    return NULL;
 800a958:	2300      	movs	r3, #0
 800a95a:	e058      	b.n	800aa0e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a962:	2bff      	cmp	r3, #255	; 0xff
 800a964:	d103      	bne.n	800a96e <netif_add+0xda>
        netif->num = 0;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a972:	4b30      	ldr	r3, [pc, #192]	; (800aa34 <netif_add+0x1a0>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	e02b      	b.n	800a9d2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d106      	bne.n	800a990 <netif_add+0xfc>
 800a982:	4b25      	ldr	r3, [pc, #148]	; (800aa18 <netif_add+0x184>)
 800a984:	f240 128b 	movw	r2, #395	; 0x18b
 800a988:	492b      	ldr	r1, [pc, #172]	; (800aa38 <netif_add+0x1a4>)
 800a98a:	4825      	ldr	r0, [pc, #148]	; (800aa20 <netif_add+0x18c>)
 800a98c:	f00b fb7a 	bl	8016084 <iprintf>
        num_netifs++;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	3301      	adds	r3, #1
 800a994:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	2bff      	cmp	r3, #255	; 0xff
 800a99a:	dd06      	ble.n	800a9aa <netif_add+0x116>
 800a99c:	4b1e      	ldr	r3, [pc, #120]	; (800aa18 <netif_add+0x184>)
 800a99e:	f240 128d 	movw	r2, #397	; 0x18d
 800a9a2:	4926      	ldr	r1, [pc, #152]	; (800aa3c <netif_add+0x1a8>)
 800a9a4:	481e      	ldr	r0, [pc, #120]	; (800aa20 <netif_add+0x18c>)
 800a9a6:	f00b fb6d 	bl	8016084 <iprintf>
        if (netif2->num == netif->num) {
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d108      	bne.n	800a9cc <netif_add+0x138>
          netif->num++;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a9ca:	e005      	b.n	800a9d8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	617b      	str	r3, [r7, #20]
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d1d0      	bne.n	800a97a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1be      	bne.n	800a95c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9e4:	2bfe      	cmp	r3, #254	; 0xfe
 800a9e6:	d103      	bne.n	800a9f0 <netif_add+0x15c>
    netif_num = 0;
 800a9e8:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <netif_add+0x19c>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
 800a9ee:	e006      	b.n	800a9fe <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	4b0d      	ldr	r3, [pc, #52]	; (800aa30 <netif_add+0x19c>)
 800a9fc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <netif_add+0x1a0>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aa06:	4a0b      	ldr	r2, [pc, #44]	; (800aa34 <netif_add+0x1a0>)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08017764 	.word	0x08017764
 800aa1c:	080177f8 	.word	0x080177f8
 800aa20:	080177b4 	.word	0x080177b4
 800aa24:	08017814 	.word	0x08017814
 800aa28:	0801a2a4 	.word	0x0801a2a4
 800aa2c:	0800ae57 	.word	0x0800ae57
 800aa30:	20004a04 	.word	0x20004a04
 800aa34:	2000b908 	.word	0x2000b908
 800aa38:	08017838 	.word	0x08017838
 800aa3c:	0801784c 	.word	0x0801784c

0800aa40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f002 fb91 	bl	800d174 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f006 ffa3 	bl	80119a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <netif_do_set_ipaddr+0x20>
 800aa76:	4b1d      	ldr	r3, [pc, #116]	; (800aaec <netif_do_set_ipaddr+0x88>)
 800aa78:	f240 12cb 	movw	r2, #459	; 0x1cb
 800aa7c:	491c      	ldr	r1, [pc, #112]	; (800aaf0 <netif_do_set_ipaddr+0x8c>)
 800aa7e:	481d      	ldr	r0, [pc, #116]	; (800aaf4 <netif_do_set_ipaddr+0x90>)
 800aa80:	f00b fb00 	bl	8016084 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d106      	bne.n	800aa98 <netif_do_set_ipaddr+0x34>
 800aa8a:	4b18      	ldr	r3, [pc, #96]	; (800aaec <netif_do_set_ipaddr+0x88>)
 800aa8c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aa90:	4917      	ldr	r1, [pc, #92]	; (800aaf0 <netif_do_set_ipaddr+0x8c>)
 800aa92:	4818      	ldr	r0, [pc, #96]	; (800aaf4 <netif_do_set_ipaddr+0x90>)
 800aa94:	f00b faf6 	bl	8016084 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d01c      	beq.n	800aae0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3304      	adds	r3, #4
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aab6:	f107 0314 	add.w	r3, r7, #20
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7ff ffbf 	bl	800aa40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <netif_do_set_ipaddr+0x6a>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	e000      	b.n	800aad0 <netif_do_set_ipaddr+0x6c>
 800aace:	2300      	movs	r3, #0
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aad4:	2101      	movs	r1, #1
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 f8d2 	bl	800ac80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	08017764 	.word	0x08017764
 800aaf0:	0801787c 	.word	0x0801787c
 800aaf4:	080177b4 	.word	0x080177b4

0800aaf8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d00a      	beq.n	800ab28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <netif_do_set_netmask+0x26>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	e000      	b.n	800ab20 <netif_do_set_netmask+0x28>
 800ab1e:	2300      	movs	r3, #0
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ab24:	2301      	movs	r3, #1
 800ab26:	e000      	b.n	800ab2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr

0800ab36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ab36:	b480      	push	{r7}
 800ab38:	b085      	sub	sp, #20
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	60b9      	str	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	330c      	adds	r3, #12
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d00a      	beq.n	800ab66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <netif_do_set_gw+0x26>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	e000      	b.n	800ab5e <netif_do_set_gw+0x28>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ab82:	2300      	movs	r3, #0
 800ab84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ab90:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <netif_set_addr+0x90>)
 800ab92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ab9a:	4b1a      	ldr	r3, [pc, #104]	; (800ac04 <netif_set_addr+0x90>)
 800ab9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aba4:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <netif_set_addr+0x90>)
 800aba6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <netif_set_addr+0x42>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <netif_set_addr+0x46>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <netif_set_addr+0x48>
 800abba:	2300      	movs	r3, #0
 800abbc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d006      	beq.n	800abd2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abc4:	f107 0310 	add.w	r3, r7, #16
 800abc8:	461a      	mov	r2, r3
 800abca:	68b9      	ldr	r1, [r7, #8]
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f7ff ff49 	bl	800aa64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800abd2:	69fa      	ldr	r2, [r7, #28]
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f7ff ff8e 	bl	800aaf8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f7ff ffa8 	bl	800ab36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d106      	bne.n	800abfa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abec:	f107 0310 	add.w	r3, r7, #16
 800abf0:	461a      	mov	r2, r3
 800abf2:	68b9      	ldr	r1, [r7, #8]
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	f7ff ff35 	bl	800aa64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800abfa:	bf00      	nop
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	0801a2a4 	.word	0x0801a2a4

0800ac08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac10:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <netif_set_default+0x1c>)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	2000b90c 	.word	0x2000b90c

0800ac28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d107      	bne.n	800ac46 <netif_set_up+0x1e>
 800ac36:	4b0f      	ldr	r3, [pc, #60]	; (800ac74 <netif_set_up+0x4c>)
 800ac38:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ac3c:	490e      	ldr	r1, [pc, #56]	; (800ac78 <netif_set_up+0x50>)
 800ac3e:	480f      	ldr	r0, [pc, #60]	; (800ac7c <netif_set_up+0x54>)
 800ac40:	f00b fa20 	bl	8016084 <iprintf>
 800ac44:	e013      	b.n	800ac6e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac5a:	f043 0301 	orr.w	r3, r3, #1
 800ac5e:	b2da      	uxtb	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac66:	2103      	movs	r1, #3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 f809 	bl	800ac80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	08017764 	.word	0x08017764
 800ac78:	080178ec 	.word	0x080178ec
 800ac7c:	080177b4 	.word	0x080177b4

0800ac80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <netif_issue_reports+0x20>
 800ac92:	4b18      	ldr	r3, [pc, #96]	; (800acf4 <netif_issue_reports+0x74>)
 800ac94:	f240 326d 	movw	r2, #877	; 0x36d
 800ac98:	4917      	ldr	r1, [pc, #92]	; (800acf8 <netif_issue_reports+0x78>)
 800ac9a:	4818      	ldr	r0, [pc, #96]	; (800acfc <netif_issue_reports+0x7c>)
 800ac9c:	f00b f9f2 	bl	8016084 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aca6:	f003 0304 	and.w	r3, r3, #4
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01e      	beq.n	800acec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acb4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d017      	beq.n	800acec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d013      	beq.n	800acee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	3304      	adds	r3, #4
 800acca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00e      	beq.n	800acee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d007      	beq.n	800acee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4619      	mov	r1, r3
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f009 fc5d 	bl	80145a4 <etharp_request>
 800acea:	e000      	b.n	800acee <netif_issue_reports+0x6e>
    return;
 800acec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	08017764 	.word	0x08017764
 800acf8:	08017908 	.word	0x08017908
 800acfc:	080177b4 	.word	0x080177b4

0800ad00 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d107      	bne.n	800ad1e <netif_set_down+0x1e>
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <netif_set_down+0x58>)
 800ad10:	f240 329b 	movw	r2, #923	; 0x39b
 800ad14:	4911      	ldr	r1, [pc, #68]	; (800ad5c <netif_set_down+0x5c>)
 800ad16:	4812      	ldr	r0, [pc, #72]	; (800ad60 <netif_set_down+0x60>)
 800ad18:	f00b f9b4 	bl	8016084 <iprintf>
 800ad1c:	e019      	b.n	800ad52 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad24:	f003 0301 	and.w	r3, r3, #1
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d012      	beq.n	800ad52 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad32:	f023 0301 	bic.w	r3, r3, #1
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad44:	f003 0308 	and.w	r3, r3, #8
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f008 ffe3 	bl	8013d18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	08017764 	.word	0x08017764
 800ad5c:	0801792c 	.word	0x0801792c
 800ad60:	080177b4 	.word	0x080177b4

0800ad64 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d107      	bne.n	800ad82 <netif_set_link_up+0x1e>
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <netif_set_link_up+0x64>)
 800ad74:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ad78:	4914      	ldr	r1, [pc, #80]	; (800adcc <netif_set_link_up+0x68>)
 800ad7a:	4815      	ldr	r0, [pc, #84]	; (800add0 <netif_set_link_up+0x6c>)
 800ad7c:	f00b f982 	bl	8016084 <iprintf>
 800ad80:	e01e      	b.n	800adc0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d117      	bne.n	800adc0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad96:	f043 0304 	orr.w	r3, r3, #4
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f007 fa28 	bl	80121f8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ada8:	2103      	movs	r1, #3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff ff68 	bl	800ac80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	69db      	ldr	r3, [r3, #28]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d003      	beq.n	800adc0 <netif_set_link_up+0x5c>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800adc0:	3708      	adds	r7, #8
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	08017764 	.word	0x08017764
 800adcc:	0801794c 	.word	0x0801794c
 800add0:	080177b4 	.word	0x080177b4

0800add4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d107      	bne.n	800adf2 <netif_set_link_down+0x1e>
 800ade2:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <netif_set_link_down+0x54>)
 800ade4:	f240 4206 	movw	r2, #1030	; 0x406
 800ade8:	4910      	ldr	r1, [pc, #64]	; (800ae2c <netif_set_link_down+0x58>)
 800adea:	4811      	ldr	r0, [pc, #68]	; (800ae30 <netif_set_link_down+0x5c>)
 800adec:	f00b f94a 	bl	8016084 <iprintf>
 800adf0:	e017      	b.n	800ae22 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d010      	beq.n	800ae22 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae06:	f023 0304 	bic.w	r3, r3, #4
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <netif_set_link_down+0x4e>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	69db      	ldr	r3, [r3, #28]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	08017764 	.word	0x08017764
 800ae2c:	08017970 	.word	0x08017970
 800ae30:	080177b4 	.word	0x080177b4

0800ae34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	61da      	str	r2, [r3, #28]
  }
}
 800ae4a:	bf00      	nop
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b085      	sub	sp, #20
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	60f8      	str	r0, [r7, #12]
 800ae5e:	60b9      	str	r1, [r7, #8]
 800ae60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae62:	f06f 030b 	mvn.w	r3, #11
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
	...

0800ae74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ae7e:	79fb      	ldrb	r3, [r7, #7]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d013      	beq.n	800aeac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ae84:	4b0d      	ldr	r3, [pc, #52]	; (800aebc <netif_get_by_index+0x48>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	60fb      	str	r3, [r7, #12]
 800ae8a:	e00c      	b.n	800aea6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae92:	3301      	adds	r3, #1
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	79fa      	ldrb	r2, [r7, #7]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d101      	bne.n	800aea0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	e006      	b.n	800aeae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1ef      	bne.n	800ae8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	2000b908 	.word	0x2000b908

0800aec0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aec6:	f00b f877 	bl	8015fb8 <sys_arch_protect>
 800aeca:	6038      	str	r0, [r7, #0]
 800aecc:	4b0d      	ldr	r3, [pc, #52]	; (800af04 <pbuf_free_ooseq+0x44>)
 800aece:	2200      	movs	r2, #0
 800aed0:	701a      	strb	r2, [r3, #0]
 800aed2:	6838      	ldr	r0, [r7, #0]
 800aed4:	f00b f87e 	bl	8015fd4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aed8:	4b0b      	ldr	r3, [pc, #44]	; (800af08 <pbuf_free_ooseq+0x48>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	607b      	str	r3, [r7, #4]
 800aede:	e00a      	b.n	800aef6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f002 f981 	bl	800d1f0 <tcp_free_ooseq>
      return;
 800aeee:	e005      	b.n	800aefc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	68db      	ldr	r3, [r3, #12]
 800aef4:	607b      	str	r3, [r7, #4]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1f1      	bne.n	800aee0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	2000b910 	.word	0x2000b910
 800af08:	2000b918 	.word	0x2000b918

0800af0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800af14:	f7ff ffd4 	bl	800aec0 <pbuf_free_ooseq>
}
 800af18:	bf00      	nop
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800af26:	f00b f847 	bl	8015fb8 <sys_arch_protect>
 800af2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800af2c:	4b0f      	ldr	r3, [pc, #60]	; (800af6c <pbuf_pool_is_empty+0x4c>)
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800af32:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <pbuf_pool_is_empty+0x4c>)
 800af34:	2201      	movs	r2, #1
 800af36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f00b f84b 	bl	8015fd4 <sys_arch_unprotect>

  if (!queued) {
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10f      	bne.n	800af64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800af44:	2100      	movs	r1, #0
 800af46:	480a      	ldr	r0, [pc, #40]	; (800af70 <pbuf_pool_is_empty+0x50>)
 800af48:	f7fe fee0 	bl	8009d0c <tcpip_try_callback>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d008      	beq.n	800af64 <pbuf_pool_is_empty+0x44>
 800af52:	f00b f831 	bl	8015fb8 <sys_arch_protect>
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	4b04      	ldr	r3, [pc, #16]	; (800af6c <pbuf_pool_is_empty+0x4c>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	701a      	strb	r2, [r3, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f00b f838 	bl	8015fd4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af64:	bf00      	nop
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	2000b910 	.word	0x2000b910
 800af70:	0800af0d 	.word	0x0800af0d

0800af74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	4611      	mov	r1, r2
 800af80:	461a      	mov	r2, r3
 800af82:	460b      	mov	r3, r1
 800af84:	80fb      	strh	r3, [r7, #6]
 800af86:	4613      	mov	r3, r2
 800af88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	88fa      	ldrh	r2, [r7, #6]
 800af9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	88ba      	ldrh	r2, [r7, #4]
 800afa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800afa2:	8b3b      	ldrh	r3, [r7, #24]
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	7f3a      	ldrb	r2, [r7, #28]
 800afae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2201      	movs	r2, #1
 800afb4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	73da      	strb	r2, [r3, #15]
}
 800afbc:	bf00      	nop
 800afbe:	3714      	adds	r7, #20
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08c      	sub	sp, #48	; 0x30
 800afcc:	af02      	add	r7, sp, #8
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
 800afd2:	460b      	mov	r3, r1
 800afd4:	80bb      	strh	r3, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800afda:	79fb      	ldrb	r3, [r7, #7]
 800afdc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800afde:	887b      	ldrh	r3, [r7, #2]
 800afe0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800afe4:	d07f      	beq.n	800b0e6 <pbuf_alloc+0x11e>
 800afe6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800afea:	f300 80c8 	bgt.w	800b17e <pbuf_alloc+0x1b6>
 800afee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aff2:	d010      	beq.n	800b016 <pbuf_alloc+0x4e>
 800aff4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800aff8:	f300 80c1 	bgt.w	800b17e <pbuf_alloc+0x1b6>
 800affc:	2b01      	cmp	r3, #1
 800affe:	d002      	beq.n	800b006 <pbuf_alloc+0x3e>
 800b000:	2b41      	cmp	r3, #65	; 0x41
 800b002:	f040 80bc 	bne.w	800b17e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b006:	887a      	ldrh	r2, [r7, #2]
 800b008:	88bb      	ldrh	r3, [r7, #4]
 800b00a:	4619      	mov	r1, r3
 800b00c:	2000      	movs	r0, #0
 800b00e:	f000 f8d1 	bl	800b1b4 <pbuf_alloc_reference>
 800b012:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b014:	e0bd      	b.n	800b192 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b01e:	88bb      	ldrh	r3, [r7, #4]
 800b020:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b022:	200c      	movs	r0, #12
 800b024:	f7ff fbb2 	bl	800a78c <memp_malloc>
 800b028:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d109      	bne.n	800b044 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b030:	f7ff ff76 	bl	800af20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	2b00      	cmp	r3, #0
 800b038:	d002      	beq.n	800b040 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b03a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b03c:	f000 faa8 	bl	800b590 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b040:	2300      	movs	r3, #0
 800b042:	e0a7      	b.n	800b194 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b046:	3303      	adds	r3, #3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	b29b      	uxth	r3, r3
 800b050:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b054:	b29b      	uxth	r3, r3
 800b056:	8b7a      	ldrh	r2, [r7, #26]
 800b058:	4293      	cmp	r3, r2
 800b05a:	bf28      	it	cs
 800b05c:	4613      	movcs	r3, r2
 800b05e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b062:	3310      	adds	r3, #16
 800b064:	693a      	ldr	r2, [r7, #16]
 800b066:	4413      	add	r3, r2
 800b068:	3303      	adds	r3, #3
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	4618      	mov	r0, r3
 800b070:	89f9      	ldrh	r1, [r7, #14]
 800b072:	8b7a      	ldrh	r2, [r7, #26]
 800b074:	2300      	movs	r3, #0
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	887b      	ldrh	r3, [r7, #2]
 800b07a:	9300      	str	r3, [sp, #0]
 800b07c:	460b      	mov	r3, r1
 800b07e:	4601      	mov	r1, r0
 800b080:	6938      	ldr	r0, [r7, #16]
 800b082:	f7ff ff77 	bl	800af74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	f003 0303 	and.w	r3, r3, #3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d006      	beq.n	800b0a0 <pbuf_alloc+0xd8>
 800b092:	4b42      	ldr	r3, [pc, #264]	; (800b19c <pbuf_alloc+0x1d4>)
 800b094:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b098:	4941      	ldr	r1, [pc, #260]	; (800b1a0 <pbuf_alloc+0x1d8>)
 800b09a:	4842      	ldr	r0, [pc, #264]	; (800b1a4 <pbuf_alloc+0x1dc>)
 800b09c:	f00a fff2 	bl	8016084 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b0a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0a2:	3303      	adds	r3, #3
 800b0a4:	f023 0303 	bic.w	r3, r3, #3
 800b0a8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b0ac:	d106      	bne.n	800b0bc <pbuf_alloc+0xf4>
 800b0ae:	4b3b      	ldr	r3, [pc, #236]	; (800b19c <pbuf_alloc+0x1d4>)
 800b0b0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b0b4:	493c      	ldr	r1, [pc, #240]	; (800b1a8 <pbuf_alloc+0x1e0>)
 800b0b6:	483b      	ldr	r0, [pc, #236]	; (800b1a4 <pbuf_alloc+0x1dc>)
 800b0b8:	f00a ffe4 	bl	8016084 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d102      	bne.n	800b0c8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c6:	e002      	b.n	800b0ce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b0d2:	8b7a      	ldrh	r2, [r7, #26]
 800b0d4:	89fb      	ldrh	r3, [r7, #14]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b0de:	8b7b      	ldrh	r3, [r7, #26]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d19e      	bne.n	800b022 <pbuf_alloc+0x5a>
      break;
 800b0e4:	e055      	b.n	800b192 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b0e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0e8:	3303      	adds	r3, #3
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	f023 0303 	bic.w	r3, r3, #3
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	88bb      	ldrh	r3, [r7, #4]
 800b0f4:	3303      	adds	r3, #3
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	4413      	add	r3, r2
 800b100:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b102:	8b3b      	ldrh	r3, [r7, #24]
 800b104:	3310      	adds	r3, #16
 800b106:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b108:	8b3a      	ldrh	r2, [r7, #24]
 800b10a:	88bb      	ldrh	r3, [r7, #4]
 800b10c:	3303      	adds	r3, #3
 800b10e:	f023 0303 	bic.w	r3, r3, #3
 800b112:	429a      	cmp	r2, r3
 800b114:	d306      	bcc.n	800b124 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b116:	8afa      	ldrh	r2, [r7, #22]
 800b118:	88bb      	ldrh	r3, [r7, #4]
 800b11a:	3303      	adds	r3, #3
 800b11c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d201      	bcs.n	800b128 <pbuf_alloc+0x160>
        return NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	e035      	b.n	800b194 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b128:	8afb      	ldrh	r3, [r7, #22]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff f9ac 	bl	800a488 <mem_malloc>
 800b130:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <pbuf_alloc+0x174>
        return NULL;
 800b138:	2300      	movs	r3, #0
 800b13a:	e02b      	b.n	800b194 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b13c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b13e:	3310      	adds	r3, #16
 800b140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b142:	4413      	add	r3, r2
 800b144:	3303      	adds	r3, #3
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	4618      	mov	r0, r3
 800b14c:	88b9      	ldrh	r1, [r7, #4]
 800b14e:	88ba      	ldrh	r2, [r7, #4]
 800b150:	2300      	movs	r3, #0
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	887b      	ldrh	r3, [r7, #2]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	460b      	mov	r3, r1
 800b15a:	4601      	mov	r1, r0
 800b15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b15e:	f7ff ff09 	bl	800af74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d010      	beq.n	800b190 <pbuf_alloc+0x1c8>
 800b16e:	4b0b      	ldr	r3, [pc, #44]	; (800b19c <pbuf_alloc+0x1d4>)
 800b170:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b174:	490d      	ldr	r1, [pc, #52]	; (800b1ac <pbuf_alloc+0x1e4>)
 800b176:	480b      	ldr	r0, [pc, #44]	; (800b1a4 <pbuf_alloc+0x1dc>)
 800b178:	f00a ff84 	bl	8016084 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b17c:	e008      	b.n	800b190 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b17e:	4b07      	ldr	r3, [pc, #28]	; (800b19c <pbuf_alloc+0x1d4>)
 800b180:	f240 1227 	movw	r2, #295	; 0x127
 800b184:	490a      	ldr	r1, [pc, #40]	; (800b1b0 <pbuf_alloc+0x1e8>)
 800b186:	4807      	ldr	r0, [pc, #28]	; (800b1a4 <pbuf_alloc+0x1dc>)
 800b188:	f00a ff7c 	bl	8016084 <iprintf>
      return NULL;
 800b18c:	2300      	movs	r3, #0
 800b18e:	e001      	b.n	800b194 <pbuf_alloc+0x1cc>
      break;
 800b190:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b194:	4618      	mov	r0, r3
 800b196:	3728      	adds	r7, #40	; 0x28
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}
 800b19c:	08017994 	.word	0x08017994
 800b1a0:	080179c4 	.word	0x080179c4
 800b1a4:	080179f4 	.word	0x080179f4
 800b1a8:	08017a1c 	.word	0x08017a1c
 800b1ac:	08017a50 	.word	0x08017a50
 800b1b0:	08017a7c 	.word	0x08017a7c

0800b1b4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	807b      	strh	r3, [r7, #2]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b1c4:	883b      	ldrh	r3, [r7, #0]
 800b1c6:	2b41      	cmp	r3, #65	; 0x41
 800b1c8:	d009      	beq.n	800b1de <pbuf_alloc_reference+0x2a>
 800b1ca:	883b      	ldrh	r3, [r7, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d006      	beq.n	800b1de <pbuf_alloc_reference+0x2a>
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <pbuf_alloc_reference+0x5c>)
 800b1d2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b1d6:	490f      	ldr	r1, [pc, #60]	; (800b214 <pbuf_alloc_reference+0x60>)
 800b1d8:	480f      	ldr	r0, [pc, #60]	; (800b218 <pbuf_alloc_reference+0x64>)
 800b1da:	f00a ff53 	bl	8016084 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b1de:	200b      	movs	r0, #11
 800b1e0:	f7ff fad4 	bl	800a78c <memp_malloc>
 800b1e4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d101      	bne.n	800b1f0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	e00b      	b.n	800b208 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b1f0:	8879      	ldrh	r1, [r7, #2]
 800b1f2:	887a      	ldrh	r2, [r7, #2]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	9301      	str	r3, [sp, #4]
 800b1f8:	883b      	ldrh	r3, [r7, #0]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff feb7 	bl	800af74 <pbuf_init_alloced_pbuf>
  return p;
 800b206:	68fb      	ldr	r3, [r7, #12]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3710      	adds	r7, #16
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	08017994 	.word	0x08017994
 800b214:	08017a98 	.word	0x08017a98
 800b218:	080179f4 	.word	0x080179f4

0800b21c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b088      	sub	sp, #32
 800b220:	af02      	add	r7, sp, #8
 800b222:	607b      	str	r3, [r7, #4]
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]
 800b228:	460b      	mov	r3, r1
 800b22a:	81bb      	strh	r3, [r7, #12]
 800b22c:	4613      	mov	r3, r2
 800b22e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b234:	8a7b      	ldrh	r3, [r7, #18]
 800b236:	3303      	adds	r3, #3
 800b238:	f023 0203 	bic.w	r2, r3, #3
 800b23c:	89bb      	ldrh	r3, [r7, #12]
 800b23e:	441a      	add	r2, r3
 800b240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b242:	429a      	cmp	r2, r3
 800b244:	d901      	bls.n	800b24a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	e018      	b.n	800b27c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d007      	beq.n	800b260 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b250:	8a7b      	ldrh	r3, [r7, #18]
 800b252:	3303      	adds	r3, #3
 800b254:	f023 0303 	bic.w	r3, r3, #3
 800b258:	6a3a      	ldr	r2, [r7, #32]
 800b25a:	4413      	add	r3, r2
 800b25c:	617b      	str	r3, [r7, #20]
 800b25e:	e001      	b.n	800b264 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b260:	2300      	movs	r3, #0
 800b262:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	89b9      	ldrh	r1, [r7, #12]
 800b268:	89ba      	ldrh	r2, [r7, #12]
 800b26a:	2302      	movs	r3, #2
 800b26c:	9301      	str	r3, [sp, #4]
 800b26e:	897b      	ldrh	r3, [r7, #10]
 800b270:	9300      	str	r3, [sp, #0]
 800b272:	460b      	mov	r3, r1
 800b274:	6979      	ldr	r1, [r7, #20]
 800b276:	f7ff fe7d 	bl	800af74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b27a:	687b      	ldr	r3, [r7, #4]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3718      	adds	r7, #24
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d106      	bne.n	800b2a4 <pbuf_realloc+0x20>
 800b296:	4b3a      	ldr	r3, [pc, #232]	; (800b380 <pbuf_realloc+0xfc>)
 800b298:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b29c:	4939      	ldr	r1, [pc, #228]	; (800b384 <pbuf_realloc+0x100>)
 800b29e:	483a      	ldr	r0, [pc, #232]	; (800b388 <pbuf_realloc+0x104>)
 800b2a0:	f00a fef0 	bl	8016084 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	891b      	ldrh	r3, [r3, #8]
 800b2a8:	887a      	ldrh	r2, [r7, #2]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d263      	bcs.n	800b376 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	891a      	ldrh	r2, [r3, #8]
 800b2b2:	887b      	ldrh	r3, [r7, #2]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b2b8:	887b      	ldrh	r3, [r7, #2]
 800b2ba:	817b      	strh	r3, [r7, #10]
  q = p;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b2c0:	e018      	b.n	800b2f4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	895b      	ldrh	r3, [r3, #10]
 800b2c6:	897a      	ldrh	r2, [r7, #10]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	891a      	ldrh	r2, [r3, #8]
 800b2d0:	893b      	ldrh	r3, [r7, #8]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <pbuf_realloc+0x70>
 800b2e6:	4b26      	ldr	r3, [pc, #152]	; (800b380 <pbuf_realloc+0xfc>)
 800b2e8:	f240 12af 	movw	r2, #431	; 0x1af
 800b2ec:	4927      	ldr	r1, [pc, #156]	; (800b38c <pbuf_realloc+0x108>)
 800b2ee:	4826      	ldr	r0, [pc, #152]	; (800b388 <pbuf_realloc+0x104>)
 800b2f0:	f00a fec8 	bl	8016084 <iprintf>
  while (rem_len > q->len) {
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	895b      	ldrh	r3, [r3, #10]
 800b2f8:	897a      	ldrh	r2, [r7, #10]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d8e1      	bhi.n	800b2c2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	7b1b      	ldrb	r3, [r3, #12]
 800b302:	f003 030f 	and.w	r3, r3, #15
 800b306:	2b00      	cmp	r3, #0
 800b308:	d121      	bne.n	800b34e <pbuf_realloc+0xca>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	895b      	ldrh	r3, [r3, #10]
 800b30e:	897a      	ldrh	r2, [r7, #10]
 800b310:	429a      	cmp	r2, r3
 800b312:	d01c      	beq.n	800b34e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	7b5b      	ldrb	r3, [r3, #13]
 800b318:	f003 0302 	and.w	r3, r3, #2
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d116      	bne.n	800b34e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	b29a      	uxth	r2, r3
 800b32a:	897b      	ldrh	r3, [r7, #10]
 800b32c:	4413      	add	r3, r2
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4619      	mov	r1, r3
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f7fe ff9e 	bl	800a274 <mem_trim>
 800b338:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d106      	bne.n	800b34e <pbuf_realloc+0xca>
 800b340:	4b0f      	ldr	r3, [pc, #60]	; (800b380 <pbuf_realloc+0xfc>)
 800b342:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b346:	4912      	ldr	r1, [pc, #72]	; (800b390 <pbuf_realloc+0x10c>)
 800b348:	480f      	ldr	r0, [pc, #60]	; (800b388 <pbuf_realloc+0x104>)
 800b34a:	f00a fe9b 	bl	8016084 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	897a      	ldrh	r2, [r7, #10]
 800b352:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	895a      	ldrh	r2, [r3, #10]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d004      	beq.n	800b36e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4618      	mov	r0, r3
 800b36a:	f000 f911 	bl	800b590 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	e000      	b.n	800b378 <pbuf_realloc+0xf4>
    return;
 800b376:	bf00      	nop

}
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	08017994 	.word	0x08017994
 800b384:	08017aac 	.word	0x08017aac
 800b388:	080179f4 	.word	0x080179f4
 800b38c:	08017ac4 	.word	0x08017ac4
 800b390:	08017adc 	.word	0x08017adc

0800b394 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d106      	bne.n	800b3b6 <pbuf_add_header_impl+0x22>
 800b3a8:	4b2b      	ldr	r3, [pc, #172]	; (800b458 <pbuf_add_header_impl+0xc4>)
 800b3aa:	f240 12df 	movw	r2, #479	; 0x1df
 800b3ae:	492b      	ldr	r1, [pc, #172]	; (800b45c <pbuf_add_header_impl+0xc8>)
 800b3b0:	482b      	ldr	r0, [pc, #172]	; (800b460 <pbuf_add_header_impl+0xcc>)
 800b3b2:	f00a fe67 	bl	8016084 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d003      	beq.n	800b3c4 <pbuf_add_header_impl+0x30>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c2:	d301      	bcc.n	800b3c8 <pbuf_add_header_impl+0x34>
    return 1;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e043      	b.n	800b450 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	e03e      	b.n	800b450 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	891a      	ldrh	r2, [r3, #8]
 800b3da:	8a7b      	ldrh	r3, [r7, #18]
 800b3dc:	4413      	add	r3, r2
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	8a7a      	ldrh	r2, [r7, #18]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d901      	bls.n	800b3ea <pbuf_add_header_impl+0x56>
    return 1;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e032      	b.n	800b450 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	7b1b      	ldrb	r3, [r3, #12]
 800b3ee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b3f0:	8a3b      	ldrh	r3, [r7, #16]
 800b3f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00c      	beq.n	800b414 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	425b      	negs	r3, r3
 800b402:	4413      	add	r3, r2
 800b404:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3310      	adds	r3, #16
 800b40a:	697a      	ldr	r2, [r7, #20]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d20d      	bcs.n	800b42c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b410:	2301      	movs	r3, #1
 800b412:	e01d      	b.n	800b450 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b414:	79fb      	ldrb	r3, [r7, #7]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d006      	beq.n	800b428 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	425b      	negs	r3, r3
 800b422:	4413      	add	r3, r2
 800b424:	617b      	str	r3, [r7, #20]
 800b426:	e001      	b.n	800b42c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b428:	2301      	movs	r3, #1
 800b42a:	e011      	b.n	800b450 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	895a      	ldrh	r2, [r3, #10]
 800b436:	8a7b      	ldrh	r3, [r7, #18]
 800b438:	4413      	add	r3, r2
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	891a      	ldrh	r2, [r3, #8]
 800b444:	8a7b      	ldrh	r3, [r7, #18]
 800b446:	4413      	add	r3, r2
 800b448:	b29a      	uxth	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3718      	adds	r7, #24
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	08017994 	.word	0x08017994
 800b45c:	08017af8 	.word	0x08017af8
 800b460:	080179f4 	.word	0x080179f4

0800b464 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b46e:	2200      	movs	r2, #0
 800b470:	6839      	ldr	r1, [r7, #0]
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f7ff ff8e 	bl	800b394 <pbuf_add_header_impl>
 800b478:	4603      	mov	r3, r0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d106      	bne.n	800b4a2 <pbuf_remove_header+0x1e>
 800b494:	4b20      	ldr	r3, [pc, #128]	; (800b518 <pbuf_remove_header+0x94>)
 800b496:	f240 224b 	movw	r2, #587	; 0x24b
 800b49a:	4920      	ldr	r1, [pc, #128]	; (800b51c <pbuf_remove_header+0x98>)
 800b49c:	4820      	ldr	r0, [pc, #128]	; (800b520 <pbuf_remove_header+0x9c>)
 800b49e:	f00a fdf1 	bl	8016084 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d003      	beq.n	800b4b0 <pbuf_remove_header+0x2c>
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ae:	d301      	bcc.n	800b4b4 <pbuf_remove_header+0x30>
    return 1;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e02c      	b.n	800b50e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <pbuf_remove_header+0x3a>
    return 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	e027      	b.n	800b50e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	895b      	ldrh	r3, [r3, #10]
 800b4c6:	89fa      	ldrh	r2, [r7, #14]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d908      	bls.n	800b4de <pbuf_remove_header+0x5a>
 800b4cc:	4b12      	ldr	r3, [pc, #72]	; (800b518 <pbuf_remove_header+0x94>)
 800b4ce:	f240 2255 	movw	r2, #597	; 0x255
 800b4d2:	4914      	ldr	r1, [pc, #80]	; (800b524 <pbuf_remove_header+0xa0>)
 800b4d4:	4812      	ldr	r0, [pc, #72]	; (800b520 <pbuf_remove_header+0x9c>)
 800b4d6:	f00a fdd5 	bl	8016084 <iprintf>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e017      	b.n	800b50e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	441a      	add	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	895a      	ldrh	r2, [r3, #10]
 800b4f4:	89fb      	ldrh	r3, [r7, #14]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	891a      	ldrh	r2, [r3, #8]
 800b502:	89fb      	ldrh	r3, [r7, #14]
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	b29a      	uxth	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	08017994 	.word	0x08017994
 800b51c:	08017af8 	.word	0x08017af8
 800b520:	080179f4 	.word	0x080179f4
 800b524:	08017b04 	.word	0x08017b04

0800b528 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	460b      	mov	r3, r1
 800b532:	807b      	strh	r3, [r7, #2]
 800b534:	4613      	mov	r3, r2
 800b536:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b538:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	da08      	bge.n	800b552 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b540:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b544:	425b      	negs	r3, r3
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff ff9b 	bl	800b484 <pbuf_remove_header>
 800b54e:	4603      	mov	r3, r0
 800b550:	e007      	b.n	800b562 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b552:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b556:	787a      	ldrb	r2, [r7, #1]
 800b558:	4619      	mov	r1, r3
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7ff ff1a 	bl	800b394 <pbuf_add_header_impl>
 800b560:	4603      	mov	r3, r0
  }
}
 800b562:	4618      	mov	r0, r3
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}

0800b56a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b56a:	b580      	push	{r7, lr}
 800b56c:	b082      	sub	sp, #8
 800b56e:	af00      	add	r7, sp, #0
 800b570:	6078      	str	r0, [r7, #4]
 800b572:	460b      	mov	r3, r1
 800b574:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b57a:	2201      	movs	r2, #1
 800b57c:	4619      	mov	r1, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7ff ffd2 	bl	800b528 <pbuf_header_impl>
 800b584:	4603      	mov	r3, r0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10b      	bne.n	800b5b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d106      	bne.n	800b5b2 <pbuf_free+0x22>
 800b5a4:	4b3b      	ldr	r3, [pc, #236]	; (800b694 <pbuf_free+0x104>)
 800b5a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b5aa:	493b      	ldr	r1, [pc, #236]	; (800b698 <pbuf_free+0x108>)
 800b5ac:	483b      	ldr	r0, [pc, #236]	; (800b69c <pbuf_free+0x10c>)
 800b5ae:	f00a fd69 	bl	8016084 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	e069      	b.n	800b68a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b5ba:	e062      	b.n	800b682 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b5bc:	f00a fcfc 	bl	8015fb8 <sys_arch_protect>
 800b5c0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	7b9b      	ldrb	r3, [r3, #14]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d106      	bne.n	800b5d8 <pbuf_free+0x48>
 800b5ca:	4b32      	ldr	r3, [pc, #200]	; (800b694 <pbuf_free+0x104>)
 800b5cc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b5d0:	4933      	ldr	r1, [pc, #204]	; (800b6a0 <pbuf_free+0x110>)
 800b5d2:	4832      	ldr	r0, [pc, #200]	; (800b69c <pbuf_free+0x10c>)
 800b5d4:	f00a fd56 	bl	8016084 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7b9b      	ldrb	r3, [r3, #14]
 800b5dc:	3b01      	subs	r3, #1
 800b5de:	b2da      	uxtb	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	739a      	strb	r2, [r3, #14]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	7b9b      	ldrb	r3, [r3, #14]
 800b5e8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b5ea:	69b8      	ldr	r0, [r7, #24]
 800b5ec:	f00a fcf2 	bl	8015fd4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b5f0:	7dfb      	ldrb	r3, [r7, #23]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d143      	bne.n	800b67e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	7b1b      	ldrb	r3, [r3, #12]
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	7b5b      	ldrb	r3, [r3, #13]
 800b60a:	f003 0302 	and.w	r3, r3, #2
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d011      	beq.n	800b636 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d106      	bne.n	800b62c <pbuf_free+0x9c>
 800b61e:	4b1d      	ldr	r3, [pc, #116]	; (800b694 <pbuf_free+0x104>)
 800b620:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b624:	491f      	ldr	r1, [pc, #124]	; (800b6a4 <pbuf_free+0x114>)
 800b626:	481d      	ldr	r0, [pc, #116]	; (800b69c <pbuf_free+0x10c>)
 800b628:	f00a fd2c 	bl	8016084 <iprintf>
        pc->custom_free_function(p);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
 800b634:	e01d      	b.n	800b672 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b636:	7bfb      	ldrb	r3, [r7, #15]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d104      	bne.n	800b646 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b63c:	6879      	ldr	r1, [r7, #4]
 800b63e:	200c      	movs	r0, #12
 800b640:	f7ff f8f6 	bl	800a830 <memp_free>
 800b644:	e015      	b.n	800b672 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d104      	bne.n	800b656 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	200b      	movs	r0, #11
 800b650:	f7ff f8ee 	bl	800a830 <memp_free>
 800b654:	e00d      	b.n	800b672 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d103      	bne.n	800b664 <pbuf_free+0xd4>
          mem_free(p);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7fe fd79 	bl	800a154 <mem_free>
 800b662:	e006      	b.n	800b672 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <pbuf_free+0x104>)
 800b666:	f240 320f 	movw	r2, #783	; 0x30f
 800b66a:	490f      	ldr	r1, [pc, #60]	; (800b6a8 <pbuf_free+0x118>)
 800b66c:	480b      	ldr	r0, [pc, #44]	; (800b69c <pbuf_free+0x10c>)
 800b66e:	f00a fd09 	bl	8016084 <iprintf>
        }
      }
      count++;
 800b672:	7ffb      	ldrb	r3, [r7, #31]
 800b674:	3301      	adds	r3, #1
 800b676:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	607b      	str	r3, [r7, #4]
 800b67c:	e001      	b.n	800b682 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b67e:	2300      	movs	r3, #0
 800b680:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d199      	bne.n	800b5bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b688:	7ffb      	ldrb	r3, [r7, #31]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	08017994 	.word	0x08017994
 800b698:	08017af8 	.word	0x08017af8
 800b69c:	080179f4 	.word	0x080179f4
 800b6a0:	08017b24 	.word	0x08017b24
 800b6a4:	08017b3c 	.word	0x08017b3c
 800b6a8:	08017b60 	.word	0x08017b60

0800b6ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b085      	sub	sp, #20
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b6b8:	e005      	b.n	800b6c6 <pbuf_clen+0x1a>
    ++len;
 800b6ba:	89fb      	ldrh	r3, [r7, #14]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1f6      	bne.n	800b6ba <pbuf_clen+0xe>
  }
  return len;
 800b6cc:	89fb      	ldrh	r3, [r7, #14]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
	...

0800b6dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d016      	beq.n	800b718 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b6ea:	f00a fc65 	bl	8015fb8 <sys_arch_protect>
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7b9b      	ldrb	r3, [r3, #14]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	739a      	strb	r2, [r3, #14]
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f00a fc69 	bl	8015fd4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7b9b      	ldrb	r3, [r3, #14]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d106      	bne.n	800b718 <pbuf_ref+0x3c>
 800b70a:	4b05      	ldr	r3, [pc, #20]	; (800b720 <pbuf_ref+0x44>)
 800b70c:	f240 3242 	movw	r2, #834	; 0x342
 800b710:	4904      	ldr	r1, [pc, #16]	; (800b724 <pbuf_ref+0x48>)
 800b712:	4805      	ldr	r0, [pc, #20]	; (800b728 <pbuf_ref+0x4c>)
 800b714:	f00a fcb6 	bl	8016084 <iprintf>
  }
}
 800b718:	bf00      	nop
 800b71a:	3710      	adds	r7, #16
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08017994 	.word	0x08017994
 800b724:	08017b74 	.word	0x08017b74
 800b728:	080179f4 	.word	0x080179f4

0800b72c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <pbuf_cat+0x16>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d107      	bne.n	800b752 <pbuf_cat+0x26>
 800b742:	4b20      	ldr	r3, [pc, #128]	; (800b7c4 <pbuf_cat+0x98>)
 800b744:	f240 3259 	movw	r2, #857	; 0x359
 800b748:	491f      	ldr	r1, [pc, #124]	; (800b7c8 <pbuf_cat+0x9c>)
 800b74a:	4820      	ldr	r0, [pc, #128]	; (800b7cc <pbuf_cat+0xa0>)
 800b74c:	f00a fc9a 	bl	8016084 <iprintf>
 800b750:	e034      	b.n	800b7bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	60fb      	str	r3, [r7, #12]
 800b756:	e00a      	b.n	800b76e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	891a      	ldrh	r2, [r3, #8]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	891b      	ldrh	r3, [r3, #8]
 800b760:	4413      	add	r3, r2
 800b762:	b29a      	uxth	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1f0      	bne.n	800b758 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	891a      	ldrh	r2, [r3, #8]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	895b      	ldrh	r3, [r3, #10]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d006      	beq.n	800b790 <pbuf_cat+0x64>
 800b782:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <pbuf_cat+0x98>)
 800b784:	f240 3262 	movw	r2, #866	; 0x362
 800b788:	4911      	ldr	r1, [pc, #68]	; (800b7d0 <pbuf_cat+0xa4>)
 800b78a:	4810      	ldr	r0, [pc, #64]	; (800b7cc <pbuf_cat+0xa0>)
 800b78c:	f00a fc7a 	bl	8016084 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <pbuf_cat+0x7a>
 800b798:	4b0a      	ldr	r3, [pc, #40]	; (800b7c4 <pbuf_cat+0x98>)
 800b79a:	f240 3263 	movw	r2, #867	; 0x363
 800b79e:	490d      	ldr	r1, [pc, #52]	; (800b7d4 <pbuf_cat+0xa8>)
 800b7a0:	480a      	ldr	r0, [pc, #40]	; (800b7cc <pbuf_cat+0xa0>)
 800b7a2:	f00a fc6f 	bl	8016084 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	891a      	ldrh	r2, [r3, #8]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	891b      	ldrh	r3, [r3, #8]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	08017994 	.word	0x08017994
 800b7c8:	08017b88 	.word	0x08017b88
 800b7cc:	080179f4 	.word	0x080179f4
 800b7d0:	08017bc0 	.word	0x08017bc0
 800b7d4:	08017bf0 	.word	0x08017bf0

0800b7d8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff ffa1 	bl	800b72c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b7ea:	6838      	ldr	r0, [r7, #0]
 800b7ec:	f7ff ff76 	bl	800b6dc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	2300      	movs	r3, #0
 800b808:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <pbuf_copy+0x2a>
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d005      	beq.n	800b822 <pbuf_copy+0x2a>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	891a      	ldrh	r2, [r3, #8]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	891b      	ldrh	r3, [r3, #8]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d209      	bcs.n	800b836 <pbuf_copy+0x3e>
 800b822:	4b57      	ldr	r3, [pc, #348]	; (800b980 <pbuf_copy+0x188>)
 800b824:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b828:	4956      	ldr	r1, [pc, #344]	; (800b984 <pbuf_copy+0x18c>)
 800b82a:	4857      	ldr	r0, [pc, #348]	; (800b988 <pbuf_copy+0x190>)
 800b82c:	f00a fc2a 	bl	8016084 <iprintf>
 800b830:	f06f 030f 	mvn.w	r3, #15
 800b834:	e09f      	b.n	800b976 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	895b      	ldrh	r3, [r3, #10]
 800b83a:	461a      	mov	r2, r3
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	1ad2      	subs	r2, r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	895b      	ldrh	r3, [r3, #10]
 800b844:	4619      	mov	r1, r3
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1acb      	subs	r3, r1, r3
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d306      	bcc.n	800b85c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	895b      	ldrh	r3, [r3, #10]
 800b852:	461a      	mov	r2, r3
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	e005      	b.n	800b868 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	895b      	ldrh	r3, [r3, #10]
 800b860:	461a      	mov	r2, r3
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	1ad3      	subs	r3, r2, r3
 800b866:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685a      	ldr	r2, [r3, #4]
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	18d0      	adds	r0, r2, r3
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	4413      	add	r3, r2
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	4619      	mov	r1, r3
 800b87c:	f00a fbec 	bl	8016058 <memcpy>
    offset_to += len;
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	4413      	add	r3, r2
 800b886:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	895b      	ldrh	r3, [r3, #10]
 800b894:	461a      	mov	r2, r3
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	4293      	cmp	r3, r2
 800b89a:	d906      	bls.n	800b8aa <pbuf_copy+0xb2>
 800b89c:	4b38      	ldr	r3, [pc, #224]	; (800b980 <pbuf_copy+0x188>)
 800b89e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b8a2:	493a      	ldr	r1, [pc, #232]	; (800b98c <pbuf_copy+0x194>)
 800b8a4:	4838      	ldr	r0, [pc, #224]	; (800b988 <pbuf_copy+0x190>)
 800b8a6:	f00a fbed 	bl	8016084 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	895b      	ldrh	r3, [r3, #10]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d906      	bls.n	800b8c4 <pbuf_copy+0xcc>
 800b8b6:	4b32      	ldr	r3, [pc, #200]	; (800b980 <pbuf_copy+0x188>)
 800b8b8:	f240 32da 	movw	r2, #986	; 0x3da
 800b8bc:	4934      	ldr	r1, [pc, #208]	; (800b990 <pbuf_copy+0x198>)
 800b8be:	4832      	ldr	r0, [pc, #200]	; (800b988 <pbuf_copy+0x190>)
 800b8c0:	f00a fbe0 	bl	8016084 <iprintf>
    if (offset_from >= p_from->len) {
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	895b      	ldrh	r3, [r3, #10]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d304      	bcc.n	800b8da <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	895b      	ldrh	r3, [r3, #10]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d114      	bne.n	800b910 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10c      	bne.n	800b910 <pbuf_copy+0x118>
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d009      	beq.n	800b910 <pbuf_copy+0x118>
 800b8fc:	4b20      	ldr	r3, [pc, #128]	; (800b980 <pbuf_copy+0x188>)
 800b8fe:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b902:	4924      	ldr	r1, [pc, #144]	; (800b994 <pbuf_copy+0x19c>)
 800b904:	4820      	ldr	r0, [pc, #128]	; (800b988 <pbuf_copy+0x190>)
 800b906:	f00a fbbd 	bl	8016084 <iprintf>
 800b90a:	f06f 030f 	mvn.w	r3, #15
 800b90e:	e032      	b.n	800b976 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d013      	beq.n	800b93e <pbuf_copy+0x146>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	895a      	ldrh	r2, [r3, #10]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	891b      	ldrh	r3, [r3, #8]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d10d      	bne.n	800b93e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <pbuf_copy+0x146>
 800b92a:	4b15      	ldr	r3, [pc, #84]	; (800b980 <pbuf_copy+0x188>)
 800b92c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b930:	4919      	ldr	r1, [pc, #100]	; (800b998 <pbuf_copy+0x1a0>)
 800b932:	4815      	ldr	r0, [pc, #84]	; (800b988 <pbuf_copy+0x190>)
 800b934:	f00a fba6 	bl	8016084 <iprintf>
 800b938:	f06f 0305 	mvn.w	r3, #5
 800b93c:	e01b      	b.n	800b976 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d013      	beq.n	800b96c <pbuf_copy+0x174>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	895a      	ldrh	r2, [r3, #10]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	891b      	ldrh	r3, [r3, #8]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d10d      	bne.n	800b96c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d009      	beq.n	800b96c <pbuf_copy+0x174>
 800b958:	4b09      	ldr	r3, [pc, #36]	; (800b980 <pbuf_copy+0x188>)
 800b95a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b95e:	490e      	ldr	r1, [pc, #56]	; (800b998 <pbuf_copy+0x1a0>)
 800b960:	4809      	ldr	r0, [pc, #36]	; (800b988 <pbuf_copy+0x190>)
 800b962:	f00a fb8f 	bl	8016084 <iprintf>
 800b966:	f06f 0305 	mvn.w	r3, #5
 800b96a:	e004      	b.n	800b976 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f47f af61 	bne.w	800b836 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3718      	adds	r7, #24
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	08017994 	.word	0x08017994
 800b984:	08017c3c 	.word	0x08017c3c
 800b988:	080179f4 	.word	0x080179f4
 800b98c:	08017c6c 	.word	0x08017c6c
 800b990:	08017c84 	.word	0x08017c84
 800b994:	08017ca0 	.word	0x08017ca0
 800b998:	08017cb0 	.word	0x08017cb0

0800b99c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b088      	sub	sp, #32
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	80fb      	strh	r3, [r7, #6]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d108      	bne.n	800b9d2 <pbuf_copy_partial+0x36>
 800b9c0:	4b2b      	ldr	r3, [pc, #172]	; (800ba70 <pbuf_copy_partial+0xd4>)
 800b9c2:	f240 420a 	movw	r2, #1034	; 0x40a
 800b9c6:	492b      	ldr	r1, [pc, #172]	; (800ba74 <pbuf_copy_partial+0xd8>)
 800b9c8:	482b      	ldr	r0, [pc, #172]	; (800ba78 <pbuf_copy_partial+0xdc>)
 800b9ca:	f00a fb5b 	bl	8016084 <iprintf>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e04a      	b.n	800ba68 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d108      	bne.n	800b9ea <pbuf_copy_partial+0x4e>
 800b9d8:	4b25      	ldr	r3, [pc, #148]	; (800ba70 <pbuf_copy_partial+0xd4>)
 800b9da:	f240 420b 	movw	r2, #1035	; 0x40b
 800b9de:	4927      	ldr	r1, [pc, #156]	; (800ba7c <pbuf_copy_partial+0xe0>)
 800b9e0:	4825      	ldr	r0, [pc, #148]	; (800ba78 <pbuf_copy_partial+0xdc>)
 800b9e2:	f00a fb4f 	bl	8016084 <iprintf>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e03e      	b.n	800ba68 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	e034      	b.n	800ba5a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b9f0:	88bb      	ldrh	r3, [r7, #4]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <pbuf_copy_partial+0x70>
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	895b      	ldrh	r3, [r3, #10]
 800b9fa:	88ba      	ldrh	r2, [r7, #4]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d305      	bcc.n	800ba0c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	895b      	ldrh	r3, [r3, #10]
 800ba04:	88ba      	ldrh	r2, [r7, #4]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	80bb      	strh	r3, [r7, #4]
 800ba0a:	e023      	b.n	800ba54 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	895a      	ldrh	r2, [r3, #10]
 800ba10:	88bb      	ldrh	r3, [r7, #4]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba16:	8b3a      	ldrh	r2, [r7, #24]
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d901      	bls.n	800ba22 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba1e:	88fb      	ldrh	r3, [r7, #6]
 800ba20:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba22:	8b7b      	ldrh	r3, [r7, #26]
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	18d0      	adds	r0, r2, r3
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	88bb      	ldrh	r3, [r7, #4]
 800ba2e:	4413      	add	r3, r2
 800ba30:	8b3a      	ldrh	r2, [r7, #24]
 800ba32:	4619      	mov	r1, r3
 800ba34:	f00a fb10 	bl	8016058 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ba38:	8afa      	ldrh	r2, [r7, #22]
 800ba3a:	8b3b      	ldrh	r3, [r7, #24]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ba40:	8b7a      	ldrh	r2, [r7, #26]
 800ba42:	8b3b      	ldrh	r3, [r7, #24]
 800ba44:	4413      	add	r3, r2
 800ba46:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ba48:	88fa      	ldrh	r2, [r7, #6]
 800ba4a:	8b3b      	ldrh	r3, [r7, #24]
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	61fb      	str	r3, [r7, #28]
 800ba5a:	88fb      	ldrh	r3, [r7, #6]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <pbuf_copy_partial+0xca>
 800ba60:	69fb      	ldr	r3, [r7, #28]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1c4      	bne.n	800b9f0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba66:	8afb      	ldrh	r3, [r7, #22]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3720      	adds	r7, #32
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	08017994 	.word	0x08017994
 800ba74:	08017cdc 	.word	0x08017cdc
 800ba78:	080179f4 	.word	0x080179f4
 800ba7c:	08017cfc 	.word	0x08017cfc

0800ba80 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	603a      	str	r2, [r7, #0]
 800ba8a:	71fb      	strb	r3, [r7, #7]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	8919      	ldrh	r1, [r3, #8]
 800ba94:	88ba      	ldrh	r2, [r7, #4]
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fa95 	bl	800afc8 <pbuf_alloc>
 800ba9e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <pbuf_clone+0x2a>
    return NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	e011      	b.n	800bace <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f7ff fea3 	bl	800b7f8 <pbuf_copy>
 800bab2:	4603      	mov	r3, r0
 800bab4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bab6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d006      	beq.n	800bacc <pbuf_clone+0x4c>
 800babe:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <pbuf_clone+0x58>)
 800bac0:	f240 5224 	movw	r2, #1316	; 0x524
 800bac4:	4905      	ldr	r1, [pc, #20]	; (800badc <pbuf_clone+0x5c>)
 800bac6:	4806      	ldr	r0, [pc, #24]	; (800bae0 <pbuf_clone+0x60>)
 800bac8:	f00a fadc 	bl	8016084 <iprintf>
  return q;
 800bacc:	68fb      	ldr	r3, [r7, #12]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	08017994 	.word	0x08017994
 800badc:	08017e08 	.word	0x08017e08
 800bae0:	080179f4 	.word	0x080179f4

0800bae4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bae8:	f00a fae4 	bl	80160b4 <rand>
 800baec:	4603      	mov	r3, r0
 800baee:	b29b      	uxth	r3, r3
 800baf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	4b01      	ldr	r3, [pc, #4]	; (800bb04 <tcp_init+0x20>)
 800bafe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb00:	bf00      	nop
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	20000010 	.word	0x20000010

0800bb08 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	7d1b      	ldrb	r3, [r3, #20]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d105      	bne.n	800bb24 <tcp_free+0x1c>
 800bb18:	4b06      	ldr	r3, [pc, #24]	; (800bb34 <tcp_free+0x2c>)
 800bb1a:	22d4      	movs	r2, #212	; 0xd4
 800bb1c:	4906      	ldr	r1, [pc, #24]	; (800bb38 <tcp_free+0x30>)
 800bb1e:	4807      	ldr	r0, [pc, #28]	; (800bb3c <tcp_free+0x34>)
 800bb20:	f00a fab0 	bl	8016084 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	2001      	movs	r0, #1
 800bb28:	f7fe fe82 	bl	800a830 <memp_free>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	08017e94 	.word	0x08017e94
 800bb38:	08017ec4 	.word	0x08017ec4
 800bb3c:	08017ed8 	.word	0x08017ed8

0800bb40 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	7d1b      	ldrb	r3, [r3, #20]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d105      	bne.n	800bb5c <tcp_free_listen+0x1c>
 800bb50:	4b06      	ldr	r3, [pc, #24]	; (800bb6c <tcp_free_listen+0x2c>)
 800bb52:	22df      	movs	r2, #223	; 0xdf
 800bb54:	4906      	ldr	r1, [pc, #24]	; (800bb70 <tcp_free_listen+0x30>)
 800bb56:	4807      	ldr	r0, [pc, #28]	; (800bb74 <tcp_free_listen+0x34>)
 800bb58:	f00a fa94 	bl	8016084 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb5c:	6879      	ldr	r1, [r7, #4]
 800bb5e:	2002      	movs	r0, #2
 800bb60:	f7fe fe66 	bl	800a830 <memp_free>
}
 800bb64:	bf00      	nop
 800bb66:	3708      	adds	r7, #8
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	08017e94 	.word	0x08017e94
 800bb70:	08017f00 	.word	0x08017f00
 800bb74:	08017ed8 	.word	0x08017ed8

0800bb78 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb7c:	f000 fea2 	bl	800c8c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <tcp_tmr+0x28>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <tcp_tmr+0x28>)
 800bb8a:	701a      	strb	r2, [r3, #0]
 800bb8c:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <tcp_tmr+0x28>)
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bb98:	f000 fb54 	bl	800c244 <tcp_slowtmr>
  }
}
 800bb9c:	bf00      	nop
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20004a05 	.word	0x20004a05

0800bba4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d105      	bne.n	800bbc0 <tcp_remove_listener+0x1c>
 800bbb4:	4b0d      	ldr	r3, [pc, #52]	; (800bbec <tcp_remove_listener+0x48>)
 800bbb6:	22ff      	movs	r2, #255	; 0xff
 800bbb8:	490d      	ldr	r1, [pc, #52]	; (800bbf0 <tcp_remove_listener+0x4c>)
 800bbba:	480e      	ldr	r0, [pc, #56]	; (800bbf4 <tcp_remove_listener+0x50>)
 800bbbc:	f00a fa62 	bl	8016084 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e00a      	b.n	800bbdc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d102      	bne.n	800bbd6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	60fb      	str	r3, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1f1      	bne.n	800bbc6 <tcp_remove_listener+0x22>
    }
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	bf00      	nop
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}
 800bbec:	08017e94 	.word	0x08017e94
 800bbf0:	08017f1c 	.word	0x08017f1c
 800bbf4:	08017ed8 	.word	0x08017ed8

0800bbf8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d106      	bne.n	800bc14 <tcp_listen_closed+0x1c>
 800bc06:	4b14      	ldr	r3, [pc, #80]	; (800bc58 <tcp_listen_closed+0x60>)
 800bc08:	f240 1211 	movw	r2, #273	; 0x111
 800bc0c:	4913      	ldr	r1, [pc, #76]	; (800bc5c <tcp_listen_closed+0x64>)
 800bc0e:	4814      	ldr	r0, [pc, #80]	; (800bc60 <tcp_listen_closed+0x68>)
 800bc10:	f00a fa38 	bl	8016084 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7d1b      	ldrb	r3, [r3, #20]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d006      	beq.n	800bc2a <tcp_listen_closed+0x32>
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <tcp_listen_closed+0x60>)
 800bc1e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc22:	4910      	ldr	r1, [pc, #64]	; (800bc64 <tcp_listen_closed+0x6c>)
 800bc24:	480e      	ldr	r0, [pc, #56]	; (800bc60 <tcp_listen_closed+0x68>)
 800bc26:	f00a fa2d 	bl	8016084 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	e00b      	b.n	800bc48 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc30:	4a0d      	ldr	r2, [pc, #52]	; (800bc68 <tcp_listen_closed+0x70>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	6879      	ldr	r1, [r7, #4]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7ff ffb1 	bl	800bba4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3301      	adds	r3, #1
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d9f0      	bls.n	800bc30 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	08017e94 	.word	0x08017e94
 800bc5c:	08017f44 	.word	0x08017f44
 800bc60:	08017ed8 	.word	0x08017ed8
 800bc64:	08017f50 	.word	0x08017f50
 800bc68:	0801a26c 	.word	0x0801a26c

0800bc6c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc6c:	b5b0      	push	{r4, r5, r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af04      	add	r7, sp, #16
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d106      	bne.n	800bc8c <tcp_close_shutdown+0x20>
 800bc7e:	4b63      	ldr	r3, [pc, #396]	; (800be0c <tcp_close_shutdown+0x1a0>)
 800bc80:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc84:	4962      	ldr	r1, [pc, #392]	; (800be10 <tcp_close_shutdown+0x1a4>)
 800bc86:	4863      	ldr	r0, [pc, #396]	; (800be14 <tcp_close_shutdown+0x1a8>)
 800bc88:	f00a f9fc 	bl	8016084 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc8c:	78fb      	ldrb	r3, [r7, #3]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d066      	beq.n	800bd60 <tcp_close_shutdown+0xf4>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	7d1b      	ldrb	r3, [r3, #20]
 800bc96:	2b04      	cmp	r3, #4
 800bc98:	d003      	beq.n	800bca2 <tcp_close_shutdown+0x36>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	7d1b      	ldrb	r3, [r3, #20]
 800bc9e:	2b07      	cmp	r3, #7
 800bca0:	d15e      	bne.n	800bd60 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d104      	bne.n	800bcb4 <tcp_close_shutdown+0x48>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcae:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bcb2:	d055      	beq.n	800bd60 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	8b5b      	ldrh	r3, [r3, #26]
 800bcb8:	f003 0310 	and.w	r3, r3, #16
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d106      	bne.n	800bcce <tcp_close_shutdown+0x62>
 800bcc0:	4b52      	ldr	r3, [pc, #328]	; (800be0c <tcp_close_shutdown+0x1a0>)
 800bcc2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bcc6:	4954      	ldr	r1, [pc, #336]	; (800be18 <tcp_close_shutdown+0x1ac>)
 800bcc8:	4852      	ldr	r0, [pc, #328]	; (800be14 <tcp_close_shutdown+0x1a8>)
 800bcca:	f00a f9db 	bl	8016084 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bcd6:	687d      	ldr	r5, [r7, #4]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	8ad2      	ldrh	r2, [r2, #22]
 800bce0:	6879      	ldr	r1, [r7, #4]
 800bce2:	8b09      	ldrh	r1, [r1, #24]
 800bce4:	9102      	str	r1, [sp, #8]
 800bce6:	9201      	str	r2, [sp, #4]
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	462b      	mov	r3, r5
 800bcec:	4622      	mov	r2, r4
 800bcee:	4601      	mov	r1, r0
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f004 fe8d 	bl	8010a10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f001 f8c6 	bl	800ce88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bcfc:	4b47      	ldr	r3, [pc, #284]	; (800be1c <tcp_close_shutdown+0x1b0>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d105      	bne.n	800bd12 <tcp_close_shutdown+0xa6>
 800bd06:	4b45      	ldr	r3, [pc, #276]	; (800be1c <tcp_close_shutdown+0x1b0>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	4a43      	ldr	r2, [pc, #268]	; (800be1c <tcp_close_shutdown+0x1b0>)
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	e013      	b.n	800bd3a <tcp_close_shutdown+0xce>
 800bd12:	4b42      	ldr	r3, [pc, #264]	; (800be1c <tcp_close_shutdown+0x1b0>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60fb      	str	r3, [r7, #12]
 800bd18:	e00c      	b.n	800bd34 <tcp_close_shutdown+0xc8>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d104      	bne.n	800bd2e <tcp_close_shutdown+0xc2>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68da      	ldr	r2, [r3, #12]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	60da      	str	r2, [r3, #12]
 800bd2c:	e005      	b.n	800bd3a <tcp_close_shutdown+0xce>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	60fb      	str	r3, [r7, #12]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1ef      	bne.n	800bd1a <tcp_close_shutdown+0xae>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	60da      	str	r2, [r3, #12]
 800bd40:	4b37      	ldr	r3, [pc, #220]	; (800be20 <tcp_close_shutdown+0x1b4>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bd46:	4b37      	ldr	r3, [pc, #220]	; (800be24 <tcp_close_shutdown+0x1b8>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d102      	bne.n	800bd56 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bd50:	f003 fd5a 	bl	800f808 <tcp_trigger_input_pcb_close>
 800bd54:	e002      	b.n	800bd5c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7ff fed6 	bl	800bb08 <tcp_free>
      }
      return ERR_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	e050      	b.n	800be02 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	7d1b      	ldrb	r3, [r3, #20]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d03b      	beq.n	800bde0 <tcp_close_shutdown+0x174>
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	dc44      	bgt.n	800bdf6 <tcp_close_shutdown+0x18a>
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d002      	beq.n	800bd76 <tcp_close_shutdown+0x10a>
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d02a      	beq.n	800bdca <tcp_close_shutdown+0x15e>
 800bd74:	e03f      	b.n	800bdf6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	8adb      	ldrh	r3, [r3, #22]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d021      	beq.n	800bdc2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd7e:	4b2a      	ldr	r3, [pc, #168]	; (800be28 <tcp_close_shutdown+0x1bc>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d105      	bne.n	800bd94 <tcp_close_shutdown+0x128>
 800bd88:	4b27      	ldr	r3, [pc, #156]	; (800be28 <tcp_close_shutdown+0x1bc>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	4a26      	ldr	r2, [pc, #152]	; (800be28 <tcp_close_shutdown+0x1bc>)
 800bd90:	6013      	str	r3, [r2, #0]
 800bd92:	e013      	b.n	800bdbc <tcp_close_shutdown+0x150>
 800bd94:	4b24      	ldr	r3, [pc, #144]	; (800be28 <tcp_close_shutdown+0x1bc>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	60bb      	str	r3, [r7, #8]
 800bd9a:	e00c      	b.n	800bdb6 <tcp_close_shutdown+0x14a>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d104      	bne.n	800bdb0 <tcp_close_shutdown+0x144>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68da      	ldr	r2, [r3, #12]
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	60da      	str	r2, [r3, #12]
 800bdae:	e005      	b.n	800bdbc <tcp_close_shutdown+0x150>
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	60bb      	str	r3, [r7, #8]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1ef      	bne.n	800bd9c <tcp_close_shutdown+0x130>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7ff fea0 	bl	800bb08 <tcp_free>
      break;
 800bdc8:	e01a      	b.n	800be00 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff ff14 	bl	800bbf8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bdd0:	6879      	ldr	r1, [r7, #4]
 800bdd2:	4816      	ldr	r0, [pc, #88]	; (800be2c <tcp_close_shutdown+0x1c0>)
 800bdd4:	f001 f8a8 	bl	800cf28 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff feb1 	bl	800bb40 <tcp_free_listen>
      break;
 800bdde:	e00f      	b.n	800be00 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	480e      	ldr	r0, [pc, #56]	; (800be1c <tcp_close_shutdown+0x1b0>)
 800bde4:	f001 f8a0 	bl	800cf28 <tcp_pcb_remove>
 800bde8:	4b0d      	ldr	r3, [pc, #52]	; (800be20 <tcp_close_shutdown+0x1b4>)
 800bdea:	2201      	movs	r2, #1
 800bdec:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff fe8a 	bl	800bb08 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bdf4:	e004      	b.n	800be00 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f81a 	bl	800be30 <tcp_close_shutdown_fin>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	e000      	b.n	800be02 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bdb0      	pop	{r4, r5, r7, pc}
 800be0a:	bf00      	nop
 800be0c:	08017e94 	.word	0x08017e94
 800be10:	08017f68 	.word	0x08017f68
 800be14:	08017ed8 	.word	0x08017ed8
 800be18:	08017f88 	.word	0x08017f88
 800be1c:	2000b918 	.word	0x2000b918
 800be20:	2000b914 	.word	0x2000b914
 800be24:	2000b92c 	.word	0x2000b92c
 800be28:	2000b924 	.word	0x2000b924
 800be2c:	2000b920 	.word	0x2000b920

0800be30 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d106      	bne.n	800be4c <tcp_close_shutdown_fin+0x1c>
 800be3e:	4b2e      	ldr	r3, [pc, #184]	; (800bef8 <tcp_close_shutdown_fin+0xc8>)
 800be40:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800be44:	492d      	ldr	r1, [pc, #180]	; (800befc <tcp_close_shutdown_fin+0xcc>)
 800be46:	482e      	ldr	r0, [pc, #184]	; (800bf00 <tcp_close_shutdown_fin+0xd0>)
 800be48:	f00a f91c 	bl	8016084 <iprintf>

  switch (pcb->state) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	7d1b      	ldrb	r3, [r3, #20]
 800be50:	2b07      	cmp	r3, #7
 800be52:	d020      	beq.n	800be96 <tcp_close_shutdown_fin+0x66>
 800be54:	2b07      	cmp	r3, #7
 800be56:	dc2b      	bgt.n	800beb0 <tcp_close_shutdown_fin+0x80>
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d002      	beq.n	800be62 <tcp_close_shutdown_fin+0x32>
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	d00d      	beq.n	800be7c <tcp_close_shutdown_fin+0x4c>
 800be60:	e026      	b.n	800beb0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f003 fee2 	bl	800fc2c <tcp_send_fin>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d11f      	bne.n	800beb4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2205      	movs	r2, #5
 800be78:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be7a:	e01b      	b.n	800beb4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f003 fed5 	bl	800fc2c <tcp_send_fin>
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d114      	bne.n	800beb8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2205      	movs	r2, #5
 800be92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be94:	e010      	b.n	800beb8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f003 fec8 	bl	800fc2c <tcp_send_fin>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d109      	bne.n	800bebc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2209      	movs	r2, #9
 800beac:	751a      	strb	r2, [r3, #20]
      }
      break;
 800beae:	e005      	b.n	800bebc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e01c      	b.n	800beee <tcp_close_shutdown_fin+0xbe>
      break;
 800beb4:	bf00      	nop
 800beb6:	e002      	b.n	800bebe <tcp_close_shutdown_fin+0x8e>
      break;
 800beb8:	bf00      	nop
 800beba:	e000      	b.n	800bebe <tcp_close_shutdown_fin+0x8e>
      break;
 800bebc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d103      	bne.n	800bece <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f003 ffee 	bl	800fea8 <tcp_output>
 800becc:	e00d      	b.n	800beea <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed6:	d108      	bne.n	800beea <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	8b5b      	ldrh	r3, [r3, #26]
 800bedc:	f043 0308 	orr.w	r3, r3, #8
 800bee0:	b29a      	uxth	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e001      	b.n	800beee <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800beea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	08017e94 	.word	0x08017e94
 800befc:	08017f44 	.word	0x08017f44
 800bf00:	08017ed8 	.word	0x08017ed8

0800bf04 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <tcp_close+0x22>
 800bf12:	4b0f      	ldr	r3, [pc, #60]	; (800bf50 <tcp_close+0x4c>)
 800bf14:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf18:	490e      	ldr	r1, [pc, #56]	; (800bf54 <tcp_close+0x50>)
 800bf1a:	480f      	ldr	r0, [pc, #60]	; (800bf58 <tcp_close+0x54>)
 800bf1c:	f00a f8b2 	bl	8016084 <iprintf>
 800bf20:	f06f 030f 	mvn.w	r3, #15
 800bf24:	e00f      	b.n	800bf46 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	7d1b      	ldrb	r3, [r3, #20]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d006      	beq.n	800bf3c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	8b5b      	ldrh	r3, [r3, #26]
 800bf32:	f043 0310 	orr.w	r3, r3, #16
 800bf36:	b29a      	uxth	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf3c:	2101      	movs	r1, #1
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7ff fe94 	bl	800bc6c <tcp_close_shutdown>
 800bf44:	4603      	mov	r3, r0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3708      	adds	r7, #8
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	08017e94 	.word	0x08017e94
 800bf54:	08017fa4 	.word	0x08017fa4
 800bf58:	08017ed8 	.word	0x08017ed8

0800bf5c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b08e      	sub	sp, #56	; 0x38
 800bf60:	af04      	add	r7, sp, #16
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d107      	bne.n	800bf7c <tcp_abandon+0x20>
 800bf6c:	4b52      	ldr	r3, [pc, #328]	; (800c0b8 <tcp_abandon+0x15c>)
 800bf6e:	f240 223d 	movw	r2, #573	; 0x23d
 800bf72:	4952      	ldr	r1, [pc, #328]	; (800c0bc <tcp_abandon+0x160>)
 800bf74:	4852      	ldr	r0, [pc, #328]	; (800c0c0 <tcp_abandon+0x164>)
 800bf76:	f00a f885 	bl	8016084 <iprintf>
 800bf7a:	e099      	b.n	800c0b0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	7d1b      	ldrb	r3, [r3, #20]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d106      	bne.n	800bf92 <tcp_abandon+0x36>
 800bf84:	4b4c      	ldr	r3, [pc, #304]	; (800c0b8 <tcp_abandon+0x15c>)
 800bf86:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bf8a:	494e      	ldr	r1, [pc, #312]	; (800c0c4 <tcp_abandon+0x168>)
 800bf8c:	484c      	ldr	r0, [pc, #304]	; (800c0c0 <tcp_abandon+0x164>)
 800bf8e:	f00a f879 	bl	8016084 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7d1b      	ldrb	r3, [r3, #20]
 800bf96:	2b0a      	cmp	r3, #10
 800bf98:	d107      	bne.n	800bfaa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	484a      	ldr	r0, [pc, #296]	; (800c0c8 <tcp_abandon+0x16c>)
 800bf9e:	f000 ffc3 	bl	800cf28 <tcp_pcb_remove>
    tcp_free(pcb);
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7ff fdb0 	bl	800bb08 <tcp_free>
 800bfa8:	e082      	b.n	800c0b0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfbc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfc4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	7d1b      	ldrb	r3, [r3, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d126      	bne.n	800c022 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	8adb      	ldrh	r3, [r3, #22]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d02e      	beq.n	800c03a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfdc:	4b3b      	ldr	r3, [pc, #236]	; (800c0cc <tcp_abandon+0x170>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d105      	bne.n	800bff2 <tcp_abandon+0x96>
 800bfe6:	4b39      	ldr	r3, [pc, #228]	; (800c0cc <tcp_abandon+0x170>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	4a37      	ldr	r2, [pc, #220]	; (800c0cc <tcp_abandon+0x170>)
 800bfee:	6013      	str	r3, [r2, #0]
 800bff0:	e013      	b.n	800c01a <tcp_abandon+0xbe>
 800bff2:	4b36      	ldr	r3, [pc, #216]	; (800c0cc <tcp_abandon+0x170>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	61fb      	str	r3, [r7, #28]
 800bff8:	e00c      	b.n	800c014 <tcp_abandon+0xb8>
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	429a      	cmp	r2, r3
 800c002:	d104      	bne.n	800c00e <tcp_abandon+0xb2>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68da      	ldr	r2, [r3, #12]
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	60da      	str	r2, [r3, #12]
 800c00c:	e005      	b.n	800c01a <tcp_abandon+0xbe>
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	61fb      	str	r3, [r7, #28]
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1ef      	bne.n	800bffa <tcp_abandon+0x9e>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	60da      	str	r2, [r3, #12]
 800c020:	e00b      	b.n	800c03a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8adb      	ldrh	r3, [r3, #22]
 800c02a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4828      	ldr	r0, [pc, #160]	; (800c0d0 <tcp_abandon+0x174>)
 800c030:	f000 ff7a 	bl	800cf28 <tcp_pcb_remove>
 800c034:	4b27      	ldr	r3, [pc, #156]	; (800c0d4 <tcp_abandon+0x178>)
 800c036:	2201      	movs	r2, #1
 800c038:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d004      	beq.n	800c04c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fd1c 	bl	800ca84 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c050:	2b00      	cmp	r3, #0
 800c052:	d004      	beq.n	800c05e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c058:	4618      	mov	r0, r3
 800c05a:	f000 fd13 	bl	800ca84 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c062:	2b00      	cmp	r3, #0
 800c064:	d004      	beq.n	800c070 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06a:	4618      	mov	r0, r3
 800c06c:	f000 fd0a 	bl	800ca84 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	3304      	adds	r3, #4
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	8b12      	ldrh	r2, [r2, #24]
 800c080:	9202      	str	r2, [sp, #8]
 800c082:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c084:	9201      	str	r2, [sp, #4]
 800c086:	9300      	str	r3, [sp, #0]
 800c088:	460b      	mov	r3, r1
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	69b9      	ldr	r1, [r7, #24]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f004 fcbe 	bl	8010a10 <tcp_rst>
    }
    last_state = pcb->state;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	7d1b      	ldrb	r3, [r3, #20]
 800c098:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f7ff fd34 	bl	800bb08 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d004      	beq.n	800c0b0 <tcp_abandon+0x154>
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	f06f 010c 	mvn.w	r1, #12
 800c0ac:	68f8      	ldr	r0, [r7, #12]
 800c0ae:	4798      	blx	r3
  }
}
 800c0b0:	3728      	adds	r7, #40	; 0x28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	08017e94 	.word	0x08017e94
 800c0bc:	08017fd8 	.word	0x08017fd8
 800c0c0:	08017ed8 	.word	0x08017ed8
 800c0c4:	08017ff4 	.word	0x08017ff4
 800c0c8:	2000b928 	.word	0x2000b928
 800c0cc:	2000b924 	.word	0x2000b924
 800c0d0:	2000b918 	.word	0x2000b918
 800c0d4:	2000b914 	.word	0x2000b914

0800c0d8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7ff ff3a 	bl	800bf5c <tcp_abandon>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d106      	bne.n	800c10c <tcp_update_rcv_ann_wnd+0x1c>
 800c0fe:	4b25      	ldr	r3, [pc, #148]	; (800c194 <tcp_update_rcv_ann_wnd+0xa4>)
 800c100:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c104:	4924      	ldr	r1, [pc, #144]	; (800c198 <tcp_update_rcv_ann_wnd+0xa8>)
 800c106:	4825      	ldr	r0, [pc, #148]	; (800c19c <tcp_update_rcv_ann_wnd+0xac>)
 800c108:	f009 ffbc 	bl	8016084 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	687a      	ldr	r2, [r7, #4]
 800c112:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c114:	4413      	add	r3, r2
 800c116:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c120:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c124:	bf28      	it	cs
 800c126:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c12a:	b292      	uxth	r2, r2
 800c12c:	4413      	add	r3, r2
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	2b00      	cmp	r3, #0
 800c134:	db08      	blt.n	800c148 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	e020      	b.n	800c18a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	2b00      	cmp	r3, #0
 800c154:	dd03      	ble.n	800c15e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c15c:	e014      	b.n	800c188 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c170:	d306      	bcc.n	800c180 <tcp_update_rcv_ann_wnd+0x90>
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <tcp_update_rcv_ann_wnd+0xa4>)
 800c174:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c178:	4909      	ldr	r1, [pc, #36]	; (800c1a0 <tcp_update_rcv_ann_wnd+0xb0>)
 800c17a:	4808      	ldr	r0, [pc, #32]	; (800c19c <tcp_update_rcv_ann_wnd+0xac>)
 800c17c:	f009 ff82 	bl	8016084 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c188:	2300      	movs	r3, #0
  }
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	08017e94 	.word	0x08017e94
 800c198:	080180f0 	.word	0x080180f0
 800c19c:	08017ed8 	.word	0x08017ed8
 800c1a0:	08018114 	.word	0x08018114

0800c1a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d107      	bne.n	800c1c6 <tcp_recved+0x22>
 800c1b6:	4b1f      	ldr	r3, [pc, #124]	; (800c234 <tcp_recved+0x90>)
 800c1b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c1bc:	491e      	ldr	r1, [pc, #120]	; (800c238 <tcp_recved+0x94>)
 800c1be:	481f      	ldr	r0, [pc, #124]	; (800c23c <tcp_recved+0x98>)
 800c1c0:	f009 ff60 	bl	8016084 <iprintf>
 800c1c4:	e032      	b.n	800c22c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	7d1b      	ldrb	r3, [r3, #20]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d106      	bne.n	800c1dc <tcp_recved+0x38>
 800c1ce:	4b19      	ldr	r3, [pc, #100]	; (800c234 <tcp_recved+0x90>)
 800c1d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c1d4:	491a      	ldr	r1, [pc, #104]	; (800c240 <tcp_recved+0x9c>)
 800c1d6:	4819      	ldr	r0, [pc, #100]	; (800c23c <tcp_recved+0x98>)
 800c1d8:	f009 ff54 	bl	8016084 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c1e0:	887b      	ldrh	r3, [r7, #2]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c1e6:	89fb      	ldrh	r3, [r7, #14]
 800c1e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c1ec:	d804      	bhi.n	800c1f8 <tcp_recved+0x54>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1f2:	89fa      	ldrh	r2, [r7, #14]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d204      	bcs.n	800c202 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c1fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800c200:	e002      	b.n	800c208 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	89fa      	ldrh	r2, [r7, #14]
 800c206:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff71 	bl	800c0f0 <tcp_update_rcv_ann_wnd>
 800c20e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c216:	d309      	bcc.n	800c22c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	8b5b      	ldrh	r3, [r3, #26]
 800c21c:	f043 0302 	orr.w	r3, r3, #2
 800c220:	b29a      	uxth	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f003 fe3e 	bl	800fea8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c22c:	3710      	adds	r7, #16
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	08017e94 	.word	0x08017e94
 800c238:	08018130 	.word	0x08018130
 800c23c:	08017ed8 	.word	0x08017ed8
 800c240:	08018148 	.word	0x08018148

0800c244 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c244:	b5b0      	push	{r4, r5, r7, lr}
 800c246:	b090      	sub	sp, #64	; 0x40
 800c248:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c250:	4b94      	ldr	r3, [pc, #592]	; (800c4a4 <tcp_slowtmr+0x260>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a93      	ldr	r2, [pc, #588]	; (800c4a4 <tcp_slowtmr+0x260>)
 800c258:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c25a:	4b93      	ldr	r3, [pc, #588]	; (800c4a8 <tcp_slowtmr+0x264>)
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	3301      	adds	r3, #1
 800c260:	b2da      	uxtb	r2, r3
 800c262:	4b91      	ldr	r3, [pc, #580]	; (800c4a8 <tcp_slowtmr+0x264>)
 800c264:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c266:	2300      	movs	r3, #0
 800c268:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c26a:	4b90      	ldr	r3, [pc, #576]	; (800c4ac <tcp_slowtmr+0x268>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c270:	e29d      	b.n	800c7ae <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	7d1b      	ldrb	r3, [r3, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <tcp_slowtmr+0x44>
 800c27a:	4b8d      	ldr	r3, [pc, #564]	; (800c4b0 <tcp_slowtmr+0x26c>)
 800c27c:	f240 42be 	movw	r2, #1214	; 0x4be
 800c280:	498c      	ldr	r1, [pc, #560]	; (800c4b4 <tcp_slowtmr+0x270>)
 800c282:	488d      	ldr	r0, [pc, #564]	; (800c4b8 <tcp_slowtmr+0x274>)
 800c284:	f009 fefe 	bl	8016084 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d106      	bne.n	800c29e <tcp_slowtmr+0x5a>
 800c290:	4b87      	ldr	r3, [pc, #540]	; (800c4b0 <tcp_slowtmr+0x26c>)
 800c292:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c296:	4989      	ldr	r1, [pc, #548]	; (800c4bc <tcp_slowtmr+0x278>)
 800c298:	4887      	ldr	r0, [pc, #540]	; (800c4b8 <tcp_slowtmr+0x274>)
 800c29a:	f009 fef3 	bl	8016084 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	7d1b      	ldrb	r3, [r3, #20]
 800c2a2:	2b0a      	cmp	r3, #10
 800c2a4:	d106      	bne.n	800c2b4 <tcp_slowtmr+0x70>
 800c2a6:	4b82      	ldr	r3, [pc, #520]	; (800c4b0 <tcp_slowtmr+0x26c>)
 800c2a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c2ac:	4984      	ldr	r1, [pc, #528]	; (800c4c0 <tcp_slowtmr+0x27c>)
 800c2ae:	4882      	ldr	r0, [pc, #520]	; (800c4b8 <tcp_slowtmr+0x274>)
 800c2b0:	f009 fee8 	bl	8016084 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	7f9a      	ldrb	r2, [r3, #30]
 800c2b8:	4b7b      	ldr	r3, [pc, #492]	; (800c4a8 <tcp_slowtmr+0x264>)
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d105      	bne.n	800c2cc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c2ca:	e270      	b.n	800c7ae <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c2cc:	4b76      	ldr	r3, [pc, #472]	; (800c4a8 <tcp_slowtmr+0x264>)
 800c2ce:	781a      	ldrb	r2, [r3, #0]
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	7d1b      	ldrb	r3, [r3, #20]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d10a      	bne.n	800c2fe <tcp_slowtmr+0xba>
 800c2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2ee:	2b05      	cmp	r3, #5
 800c2f0:	d905      	bls.n	800c2fe <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c2f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2fc:	e11e      	b.n	800c53c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c304:	2b0b      	cmp	r3, #11
 800c306:	d905      	bls.n	800c314 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c30c:	3301      	adds	r3, #1
 800c30e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c312:	e113      	b.n	800c53c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c316:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d075      	beq.n	800c40a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c322:	2b00      	cmp	r3, #0
 800c324:	d006      	beq.n	800c334 <tcp_slowtmr+0xf0>
 800c326:	4b62      	ldr	r3, [pc, #392]	; (800c4b0 <tcp_slowtmr+0x26c>)
 800c328:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c32c:	4965      	ldr	r1, [pc, #404]	; (800c4c4 <tcp_slowtmr+0x280>)
 800c32e:	4862      	ldr	r0, [pc, #392]	; (800c4b8 <tcp_slowtmr+0x274>)
 800c330:	f009 fea8 	bl	8016084 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d106      	bne.n	800c34a <tcp_slowtmr+0x106>
 800c33c:	4b5c      	ldr	r3, [pc, #368]	; (800c4b0 <tcp_slowtmr+0x26c>)
 800c33e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c342:	4961      	ldr	r1, [pc, #388]	; (800c4c8 <tcp_slowtmr+0x284>)
 800c344:	485c      	ldr	r0, [pc, #368]	; (800c4b8 <tcp_slowtmr+0x274>)
 800c346:	f009 fe9d 	bl	8016084 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c350:	2b0b      	cmp	r3, #11
 800c352:	d905      	bls.n	800c360 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c358:	3301      	adds	r3, #1
 800c35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c35e:	e0ed      	b.n	800c53c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c366:	3b01      	subs	r3, #1
 800c368:	4a58      	ldr	r2, [pc, #352]	; (800c4cc <tcp_slowtmr+0x288>)
 800c36a:	5cd3      	ldrb	r3, [r2, r3]
 800c36c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c374:	7c7a      	ldrb	r2, [r7, #17]
 800c376:	429a      	cmp	r2, r3
 800c378:	d907      	bls.n	800c38a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c380:	3301      	adds	r3, #1
 800c382:	b2da      	uxtb	r2, r3
 800c384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c386:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c390:	7c7a      	ldrb	r2, [r7, #17]
 800c392:	429a      	cmp	r2, r3
 800c394:	f200 80d2 	bhi.w	800c53c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c398:	2301      	movs	r3, #1
 800c39a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d108      	bne.n	800c3b8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3a8:	f004 fc26 	bl	8010bf8 <tcp_zero_window_probe>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d014      	beq.n	800c3dc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	623b      	str	r3, [r7, #32]
 800c3b6:	e011      	b.n	800c3dc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3c2:	f003 faeb 	bl	800f99c <tcp_split_unsent_seg>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d107      	bne.n	800c3dc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c3cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3ce:	f003 fd6b 	bl	800fea8 <tcp_output>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c3dc:	6a3b      	ldr	r3, [r7, #32]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 80ac 	beq.w	800c53c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3f2:	2b06      	cmp	r3, #6
 800c3f4:	f200 80a2 	bhi.w	800c53c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3fe:	3301      	adds	r3, #1
 800c400:	b2da      	uxtb	r2, r3
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c408:	e098      	b.n	800c53c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c410:	2b00      	cmp	r3, #0
 800c412:	db0f      	blt.n	800c434 <tcp_slowtmr+0x1f0>
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c41a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c41e:	4293      	cmp	r3, r2
 800c420:	d008      	beq.n	800c434 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c428:	b29b      	uxth	r3, r3
 800c42a:	3301      	adds	r3, #1
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	b21a      	sxth	r2, r3
 800c430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c432:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c436:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c440:	429a      	cmp	r2, r3
 800c442:	db7b      	blt.n	800c53c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c446:	f004 f821 	bl	801048c <tcp_rexmit_rto_prepare>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <tcp_slowtmr+0x21c>
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c454:	2b00      	cmp	r3, #0
 800c456:	d171      	bne.n	800c53c <tcp_slowtmr+0x2f8>
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d06d      	beq.n	800c53c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	7d1b      	ldrb	r3, [r3, #20]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d03a      	beq.n	800c4de <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c46e:	2b0c      	cmp	r3, #12
 800c470:	bf28      	it	cs
 800c472:	230c      	movcs	r3, #12
 800c474:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c47c:	10db      	asrs	r3, r3, #3
 800c47e:	b21b      	sxth	r3, r3
 800c480:	461a      	mov	r2, r3
 800c482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c484:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c488:	4413      	add	r3, r2
 800c48a:	7efa      	ldrb	r2, [r7, #27]
 800c48c:	4910      	ldr	r1, [pc, #64]	; (800c4d0 <tcp_slowtmr+0x28c>)
 800c48e:	5c8a      	ldrb	r2, [r1, r2]
 800c490:	4093      	lsls	r3, r2
 800c492:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c49a:	4293      	cmp	r3, r2
 800c49c:	dc1a      	bgt.n	800c4d4 <tcp_slowtmr+0x290>
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	b21a      	sxth	r2, r3
 800c4a2:	e019      	b.n	800c4d8 <tcp_slowtmr+0x294>
 800c4a4:	2000b91c 	.word	0x2000b91c
 800c4a8:	20004a06 	.word	0x20004a06
 800c4ac:	2000b918 	.word	0x2000b918
 800c4b0:	08017e94 	.word	0x08017e94
 800c4b4:	080181d8 	.word	0x080181d8
 800c4b8:	08017ed8 	.word	0x08017ed8
 800c4bc:	08018204 	.word	0x08018204
 800c4c0:	08018230 	.word	0x08018230
 800c4c4:	08018260 	.word	0x08018260
 800c4c8:	08018294 	.word	0x08018294
 800c4cc:	0801a264 	.word	0x0801a264
 800c4d0:	0801a254 	.word	0x0801a254
 800c4d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bf28      	it	cs
 800c4f4:	4613      	movcs	r3, r2
 800c4f6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c4f8:	8a7b      	ldrh	r3, [r7, #18]
 800c4fa:	085b      	lsrs	r3, r3, #1
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c506:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c50c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	b29b      	uxth	r3, r3
 800c512:	429a      	cmp	r2, r3
 800c514:	d206      	bcs.n	800c524 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c51a:	005b      	lsls	r3, r3, #1
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c520:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	2200      	movs	r2, #0
 800c532:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c538:	f004 f818 	bl	801056c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53e:	7d1b      	ldrb	r3, [r3, #20]
 800c540:	2b06      	cmp	r3, #6
 800c542:	d111      	bne.n	800c568 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c546:	8b5b      	ldrh	r3, [r3, #26]
 800c548:	f003 0310 	and.w	r3, r3, #16
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00b      	beq.n	800c568 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c550:	4b9c      	ldr	r3, [pc, #624]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	2b28      	cmp	r3, #40	; 0x28
 800c55c:	d904      	bls.n	800c568 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c55e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c562:	3301      	adds	r3, #1
 800c564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56a:	7a5b      	ldrb	r3, [r3, #9]
 800c56c:	f003 0308 	and.w	r3, r3, #8
 800c570:	2b00      	cmp	r3, #0
 800c572:	d04a      	beq.n	800c60a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d003      	beq.n	800c584 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c580:	2b07      	cmp	r3, #7
 800c582:	d142      	bne.n	800c60a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c584:	4b8f      	ldr	r3, [pc, #572]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c590:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c594:	4b8c      	ldr	r3, [pc, #560]	; (800c7c8 <tcp_slowtmr+0x584>)
 800c596:	440b      	add	r3, r1
 800c598:	498c      	ldr	r1, [pc, #560]	; (800c7cc <tcp_slowtmr+0x588>)
 800c59a:	fba1 1303 	umull	r1, r3, r1, r3
 800c59e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d90a      	bls.n	800c5ba <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c5ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c5b8:	e027      	b.n	800c60a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5ba:	4b82      	ldr	r3, [pc, #520]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	4b7f      	ldr	r3, [pc, #508]	; (800c7d0 <tcp_slowtmr+0x58c>)
 800c5d4:	fb03 f300 	mul.w	r3, r3, r0
 800c5d8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c5da:	497c      	ldr	r1, [pc, #496]	; (800c7cc <tcp_slowtmr+0x588>)
 800c5dc:	fba1 1303 	umull	r1, r3, r1, r3
 800c5e0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d911      	bls.n	800c60a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c5e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5e8:	f004 fac6 	bl	8010b78 <tcp_keepalive>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c5f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d107      	bne.n	800c60a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c600:	3301      	adds	r3, #1
 800c602:	b2da      	uxtb	r2, r3
 800c604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c606:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d011      	beq.n	800c636 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c612:	4b6c      	ldr	r3, [pc, #432]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c614:	681a      	ldr	r2, [r3, #0]
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	6a1b      	ldr	r3, [r3, #32]
 800c61a:	1ad2      	subs	r2, r2, r3
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c622:	4619      	mov	r1, r3
 800c624:	460b      	mov	r3, r1
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	440b      	add	r3, r1
 800c62a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d302      	bcc.n	800c636 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c630:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c632:	f000 fddd 	bl	800d1f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c638:	7d1b      	ldrb	r3, [r3, #20]
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d10b      	bne.n	800c656 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c63e:	4b61      	ldr	r3, [pc, #388]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c644:	6a1b      	ldr	r3, [r3, #32]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	2b28      	cmp	r3, #40	; 0x28
 800c64a:	d904      	bls.n	800c656 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c650:	3301      	adds	r3, #1
 800c652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	7d1b      	ldrb	r3, [r3, #20]
 800c65a:	2b09      	cmp	r3, #9
 800c65c:	d10b      	bne.n	800c676 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c65e:	4b59      	ldr	r3, [pc, #356]	; (800c7c4 <tcp_slowtmr+0x580>)
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	1ad3      	subs	r3, r2, r3
 800c668:	2bf0      	cmp	r3, #240	; 0xf0
 800c66a:	d904      	bls.n	800c676 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c66c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c670:	3301      	adds	r3, #1
 800c672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d060      	beq.n	800c740 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c684:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c688:	f000 fbfe 	bl	800ce88 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d010      	beq.n	800c6b4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c692:	4b50      	ldr	r3, [pc, #320]	; (800c7d4 <tcp_slowtmr+0x590>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c698:	429a      	cmp	r2, r3
 800c69a:	d106      	bne.n	800c6aa <tcp_slowtmr+0x466>
 800c69c:	4b4e      	ldr	r3, [pc, #312]	; (800c7d8 <tcp_slowtmr+0x594>)
 800c69e:	f240 526d 	movw	r2, #1389	; 0x56d
 800c6a2:	494e      	ldr	r1, [pc, #312]	; (800c7dc <tcp_slowtmr+0x598>)
 800c6a4:	484e      	ldr	r0, [pc, #312]	; (800c7e0 <tcp_slowtmr+0x59c>)
 800c6a6:	f009 fced 	bl	8016084 <iprintf>
        prev->next = pcb->next;
 800c6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ac:	68da      	ldr	r2, [r3, #12]
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	60da      	str	r2, [r3, #12]
 800c6b2:	e00f      	b.n	800c6d4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c6b4:	4b47      	ldr	r3, [pc, #284]	; (800c7d4 <tcp_slowtmr+0x590>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d006      	beq.n	800c6cc <tcp_slowtmr+0x488>
 800c6be:	4b46      	ldr	r3, [pc, #280]	; (800c7d8 <tcp_slowtmr+0x594>)
 800c6c0:	f240 5271 	movw	r2, #1393	; 0x571
 800c6c4:	4947      	ldr	r1, [pc, #284]	; (800c7e4 <tcp_slowtmr+0x5a0>)
 800c6c6:	4846      	ldr	r0, [pc, #280]	; (800c7e0 <tcp_slowtmr+0x59c>)
 800c6c8:	f009 fcdc 	bl	8016084 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	4a40      	ldr	r2, [pc, #256]	; (800c7d4 <tcp_slowtmr+0x590>)
 800c6d2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c6d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d013      	beq.n	800c704 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c6e4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e8:	3304      	adds	r3, #4
 800c6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6ec:	8ad2      	ldrh	r2, [r2, #22]
 800c6ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6f0:	8b09      	ldrh	r1, [r1, #24]
 800c6f2:	9102      	str	r1, [sp, #8]
 800c6f4:	9201      	str	r2, [sp, #4]
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	4622      	mov	r2, r4
 800c6fc:	4601      	mov	r1, r0
 800c6fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c700:	f004 f986 	bl	8010a10 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70c:	7d1b      	ldrb	r3, [r3, #20]
 800c70e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c712:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c71a:	6838      	ldr	r0, [r7, #0]
 800c71c:	f7ff f9f4 	bl	800bb08 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c720:	4b31      	ldr	r3, [pc, #196]	; (800c7e8 <tcp_slowtmr+0x5a4>)
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d004      	beq.n	800c736 <tcp_slowtmr+0x4f2>
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f06f 010c 	mvn.w	r1, #12
 800c732:	68b8      	ldr	r0, [r7, #8]
 800c734:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c736:	4b2c      	ldr	r3, [pc, #176]	; (800c7e8 <tcp_slowtmr+0x5a4>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d037      	beq.n	800c7ae <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c73e:	e592      	b.n	800c266 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	7f1b      	ldrb	r3, [r3, #28]
 800c74e:	3301      	adds	r3, #1
 800c750:	b2da      	uxtb	r2, r3
 800c752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c754:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	7f1a      	ldrb	r2, [r3, #28]
 800c75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75c:	7f5b      	ldrb	r3, [r3, #29]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d325      	bcc.n	800c7ae <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	2200      	movs	r2, #0
 800c766:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c768:	4b1f      	ldr	r3, [pc, #124]	; (800c7e8 <tcp_slowtmr+0x5a4>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00b      	beq.n	800c790 <tcp_slowtmr+0x54c>
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c780:	6912      	ldr	r2, [r2, #16]
 800c782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
 800c788:	4603      	mov	r3, r0
 800c78a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c78e:	e002      	b.n	800c796 <tcp_slowtmr+0x552>
 800c790:	2300      	movs	r3, #0
 800c792:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c796:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <tcp_slowtmr+0x5a4>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d000      	beq.n	800c7a0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c79e:	e562      	b.n	800c266 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c7a0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c7a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7aa:	f003 fb7d 	bl	800fea8 <tcp_output>
  while (pcb != NULL) {
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f47f ad5e 	bne.w	800c272 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c7ba:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <tcp_slowtmr+0x5a8>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c7c0:	e069      	b.n	800c896 <tcp_slowtmr+0x652>
 800c7c2:	bf00      	nop
 800c7c4:	2000b91c 	.word	0x2000b91c
 800c7c8:	000a4cb8 	.word	0x000a4cb8
 800c7cc:	10624dd3 	.word	0x10624dd3
 800c7d0:	000124f8 	.word	0x000124f8
 800c7d4:	2000b918 	.word	0x2000b918
 800c7d8:	08017e94 	.word	0x08017e94
 800c7dc:	080182cc 	.word	0x080182cc
 800c7e0:	08017ed8 	.word	0x08017ed8
 800c7e4:	080182f8 	.word	0x080182f8
 800c7e8:	2000b914 	.word	0x2000b914
 800c7ec:	2000b928 	.word	0x2000b928
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	7d1b      	ldrb	r3, [r3, #20]
 800c7f4:	2b0a      	cmp	r3, #10
 800c7f6:	d006      	beq.n	800c806 <tcp_slowtmr+0x5c2>
 800c7f8:	4b2b      	ldr	r3, [pc, #172]	; (800c8a8 <tcp_slowtmr+0x664>)
 800c7fa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c7fe:	492b      	ldr	r1, [pc, #172]	; (800c8ac <tcp_slowtmr+0x668>)
 800c800:	482b      	ldr	r0, [pc, #172]	; (800c8b0 <tcp_slowtmr+0x66c>)
 800c802:	f009 fc3f 	bl	8016084 <iprintf>
    pcb_remove = 0;
 800c806:	2300      	movs	r3, #0
 800c808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c80c:	4b29      	ldr	r3, [pc, #164]	; (800c8b4 <tcp_slowtmr+0x670>)
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2bf0      	cmp	r3, #240	; 0xf0
 800c818:	d904      	bls.n	800c824 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c81a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c81e:	3301      	adds	r3, #1
 800c820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d02f      	beq.n	800c88c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c82c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c82e:	f000 fb2b 	bl	800ce88 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	2b00      	cmp	r3, #0
 800c836:	d010      	beq.n	800c85a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c838:	4b1f      	ldr	r3, [pc, #124]	; (800c8b8 <tcp_slowtmr+0x674>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c83e:	429a      	cmp	r2, r3
 800c840:	d106      	bne.n	800c850 <tcp_slowtmr+0x60c>
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <tcp_slowtmr+0x664>)
 800c844:	f240 52af 	movw	r2, #1455	; 0x5af
 800c848:	491c      	ldr	r1, [pc, #112]	; (800c8bc <tcp_slowtmr+0x678>)
 800c84a:	4819      	ldr	r0, [pc, #100]	; (800c8b0 <tcp_slowtmr+0x66c>)
 800c84c:	f009 fc1a 	bl	8016084 <iprintf>
        prev->next = pcb->next;
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	60da      	str	r2, [r3, #12]
 800c858:	e00f      	b.n	800c87a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c85a:	4b17      	ldr	r3, [pc, #92]	; (800c8b8 <tcp_slowtmr+0x674>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c860:	429a      	cmp	r2, r3
 800c862:	d006      	beq.n	800c872 <tcp_slowtmr+0x62e>
 800c864:	4b10      	ldr	r3, [pc, #64]	; (800c8a8 <tcp_slowtmr+0x664>)
 800c866:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c86a:	4915      	ldr	r1, [pc, #84]	; (800c8c0 <tcp_slowtmr+0x67c>)
 800c86c:	4810      	ldr	r0, [pc, #64]	; (800c8b0 <tcp_slowtmr+0x66c>)
 800c86e:	f009 fc09 	bl	8016084 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	4a10      	ldr	r2, [pc, #64]	; (800c8b8 <tcp_slowtmr+0x674>)
 800c878:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c884:	69f8      	ldr	r0, [r7, #28]
 800c886:	f7ff f93f 	bl	800bb08 <tcp_free>
 800c88a:	e004      	b.n	800c896 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1a9      	bne.n	800c7f0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	3730      	adds	r7, #48	; 0x30
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	08017e94 	.word	0x08017e94
 800c8ac:	08018324 	.word	0x08018324
 800c8b0:	08017ed8 	.word	0x08017ed8
 800c8b4:	2000b91c 	.word	0x2000b91c
 800c8b8:	2000b928 	.word	0x2000b928
 800c8bc:	08018354 	.word	0x08018354
 800c8c0:	0801837c 	.word	0x0801837c

0800c8c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c8ca:	4b2d      	ldr	r3, [pc, #180]	; (800c980 <tcp_fasttmr+0xbc>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	3301      	adds	r3, #1
 800c8d0:	b2da      	uxtb	r2, r3
 800c8d2:	4b2b      	ldr	r3, [pc, #172]	; (800c980 <tcp_fasttmr+0xbc>)
 800c8d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c8d6:	4b2b      	ldr	r3, [pc, #172]	; (800c984 <tcp_fasttmr+0xc0>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c8dc:	e048      	b.n	800c970 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	7f9a      	ldrb	r2, [r3, #30]
 800c8e2:	4b27      	ldr	r3, [pc, #156]	; (800c980 <tcp_fasttmr+0xbc>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d03f      	beq.n	800c96a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c8ea:	4b25      	ldr	r3, [pc, #148]	; (800c980 <tcp_fasttmr+0xbc>)
 800c8ec:	781a      	ldrb	r2, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	8b5b      	ldrh	r3, [r3, #26]
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d010      	beq.n	800c920 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	8b5b      	ldrh	r3, [r3, #26]
 800c902:	f043 0302 	orr.w	r3, r3, #2
 800c906:	b29a      	uxth	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f003 facb 	bl	800fea8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8b5b      	ldrh	r3, [r3, #26]
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	8b5b      	ldrh	r3, [r3, #26]
 800c924:	f003 0308 	and.w	r3, r3, #8
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d009      	beq.n	800c940 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	8b5b      	ldrh	r3, [r3, #26]
 800c930:	f023 0308 	bic.w	r3, r3, #8
 800c934:	b29a      	uxth	r2, r3
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff fa78 	bl	800be30 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c94e:	4b0e      	ldr	r3, [pc, #56]	; (800c988 <tcp_fasttmr+0xc4>)
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f819 	bl	800c98c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c95a:	4b0b      	ldr	r3, [pc, #44]	; (800c988 <tcp_fasttmr+0xc4>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d000      	beq.n	800c964 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c962:	e7b8      	b.n	800c8d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	607b      	str	r3, [r7, #4]
 800c968:	e002      	b.n	800c970 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1b3      	bne.n	800c8de <tcp_fasttmr+0x1a>
    }
  }
}
 800c976:	bf00      	nop
 800c978:	bf00      	nop
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20004a06 	.word	0x20004a06
 800c984:	2000b918 	.word	0x2000b918
 800c988:	2000b914 	.word	0x2000b914

0800c98c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c98c:	b590      	push	{r4, r7, lr}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d109      	bne.n	800c9ae <tcp_process_refused_data+0x22>
 800c99a:	4b37      	ldr	r3, [pc, #220]	; (800ca78 <tcp_process_refused_data+0xec>)
 800c99c:	f240 6209 	movw	r2, #1545	; 0x609
 800c9a0:	4936      	ldr	r1, [pc, #216]	; (800ca7c <tcp_process_refused_data+0xf0>)
 800c9a2:	4837      	ldr	r0, [pc, #220]	; (800ca80 <tcp_process_refused_data+0xf4>)
 800c9a4:	f009 fb6e 	bl	8016084 <iprintf>
 800c9a8:	f06f 030f 	mvn.w	r3, #15
 800c9ac:	e060      	b.n	800ca70 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9b2:	7b5b      	ldrb	r3, [r3, #13]
 800c9b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c9ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00b      	beq.n	800c9e4 <tcp_process_refused_data+0x58>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6918      	ldr	r0, [r3, #16]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	47a0      	blx	r4
 800c9de:	4603      	mov	r3, r0
 800c9e0:	73fb      	strb	r3, [r7, #15]
 800c9e2:	e007      	b.n	800c9f4 <tcp_process_refused_data+0x68>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	6879      	ldr	r1, [r7, #4]
 800c9ea:	2000      	movs	r0, #0
 800c9ec:	f000 f8a4 	bl	800cb38 <tcp_recv_null>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d12a      	bne.n	800ca52 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	f003 0320 	and.w	r3, r3, #32
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d033      	beq.n	800ca6e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca0e:	d005      	beq.n	800ca1c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca14:	3301      	adds	r3, #1
 800ca16:	b29a      	uxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <tcp_process_refused_data+0xb2>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6918      	ldr	r0, [r3, #16]
 800ca30:	2300      	movs	r3, #0
 800ca32:	2200      	movs	r2, #0
 800ca34:	6879      	ldr	r1, [r7, #4]
 800ca36:	47a0      	blx	r4
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
 800ca3c:	e001      	b.n	800ca42 <tcp_process_refused_data+0xb6>
 800ca3e:	2300      	movs	r3, #0
 800ca40:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ca42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca46:	f113 0f0d 	cmn.w	r3, #13
 800ca4a:	d110      	bne.n	800ca6e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ca4c:	f06f 030c 	mvn.w	r3, #12
 800ca50:	e00e      	b.n	800ca70 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ca52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca56:	f113 0f0d 	cmn.w	r3, #13
 800ca5a:	d102      	bne.n	800ca62 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ca5c:	f06f 030c 	mvn.w	r3, #12
 800ca60:	e006      	b.n	800ca70 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ca68:	f06f 0304 	mvn.w	r3, #4
 800ca6c:	e000      	b.n	800ca70 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd90      	pop	{r4, r7, pc}
 800ca78:	08017e94 	.word	0x08017e94
 800ca7c:	080183a4 	.word	0x080183a4
 800ca80:	08017ed8 	.word	0x08017ed8

0800ca84 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ca8c:	e007      	b.n	800ca9e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f80a 	bl	800caae <tcp_seg_free>
    seg = next;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d1f4      	bne.n	800ca8e <tcp_segs_free+0xa>
  }
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00c      	beq.n	800cad6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d004      	beq.n	800cace <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fe fd61 	bl	800b590 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cace:	6879      	ldr	r1, [r7, #4]
 800cad0:	2003      	movs	r0, #3
 800cad2:	f7fd fead 	bl	800a830 <memp_free>
  }
}
 800cad6:	bf00      	nop
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
	...

0800cae0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d106      	bne.n	800cafc <tcp_seg_copy+0x1c>
 800caee:	4b0f      	ldr	r3, [pc, #60]	; (800cb2c <tcp_seg_copy+0x4c>)
 800caf0:	f240 6282 	movw	r2, #1666	; 0x682
 800caf4:	490e      	ldr	r1, [pc, #56]	; (800cb30 <tcp_seg_copy+0x50>)
 800caf6:	480f      	ldr	r0, [pc, #60]	; (800cb34 <tcp_seg_copy+0x54>)
 800caf8:	f009 fac4 	bl	8016084 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cafc:	2003      	movs	r0, #3
 800cafe:	f7fd fe45 	bl	800a78c <memp_malloc>
 800cb02:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <tcp_seg_copy+0x2e>
    return NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e00a      	b.n	800cb24 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cb0e:	2210      	movs	r2, #16
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	68f8      	ldr	r0, [r7, #12]
 800cb14:	f009 faa0 	bl	8016058 <memcpy>
  pbuf_ref(cseg->p);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe fddd 	bl	800b6dc <pbuf_ref>
  return cseg;
 800cb22:	68fb      	ldr	r3, [r7, #12]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	08017e94 	.word	0x08017e94
 800cb30:	080183e8 	.word	0x080183e8
 800cb34:	08017ed8 	.word	0x08017ed8

0800cb38 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d109      	bne.n	800cb60 <tcp_recv_null+0x28>
 800cb4c:	4b12      	ldr	r3, [pc, #72]	; (800cb98 <tcp_recv_null+0x60>)
 800cb4e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb52:	4912      	ldr	r1, [pc, #72]	; (800cb9c <tcp_recv_null+0x64>)
 800cb54:	4812      	ldr	r0, [pc, #72]	; (800cba0 <tcp_recv_null+0x68>)
 800cb56:	f009 fa95 	bl	8016084 <iprintf>
 800cb5a:	f06f 030f 	mvn.w	r3, #15
 800cb5e:	e016      	b.n	800cb8e <tcp_recv_null+0x56>

  if (p != NULL) {
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	891b      	ldrh	r3, [r3, #8]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68b8      	ldr	r0, [r7, #8]
 800cb6e:	f7ff fb19 	bl	800c1a4 <tcp_recved>
    pbuf_free(p);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7fe fd0c 	bl	800b590 <pbuf_free>
 800cb78:	e008      	b.n	800cb8c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cb7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d104      	bne.n	800cb8c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cb82:	68b8      	ldr	r0, [r7, #8]
 800cb84:	f7ff f9be 	bl	800bf04 <tcp_close>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	e000      	b.n	800cb8e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	08017e94 	.word	0x08017e94
 800cb9c:	08018404 	.word	0x08018404
 800cba0:	08017ed8 	.word	0x08017ed8

0800cba4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cbae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	db01      	blt.n	800cbba <tcp_kill_prio+0x16>
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	e000      	b.n	800cbbc <tcp_kill_prio+0x18>
 800cbba:	237f      	movs	r3, #127	; 0x7f
 800cbbc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cbbe:	7afb      	ldrb	r3, [r7, #11]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d034      	beq.n	800cc2e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbd2:	4b19      	ldr	r3, [pc, #100]	; (800cc38 <tcp_kill_prio+0x94>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e01f      	b.n	800cc1a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	7d5b      	ldrb	r3, [r3, #21]
 800cbde:	7afa      	ldrb	r2, [r7, #11]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d80c      	bhi.n	800cbfe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cbe8:	7afa      	ldrb	r2, [r7, #11]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d112      	bne.n	800cc14 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbee:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <tcp_kill_prio+0x98>)
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	6a1b      	ldr	r3, [r3, #32]
 800cbf6:	1ad3      	subs	r3, r2, r3
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d80a      	bhi.n	800cc14 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <tcp_kill_prio+0x98>)
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	6a1b      	ldr	r3, [r3, #32]
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	7d5b      	ldrb	r3, [r3, #21]
 800cc12:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1dc      	bne.n	800cbda <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d004      	beq.n	800cc30 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc26:	6938      	ldr	r0, [r7, #16]
 800cc28:	f7ff fa56 	bl	800c0d8 <tcp_abort>
 800cc2c:	e000      	b.n	800cc30 <tcp_kill_prio+0x8c>
    return;
 800cc2e:	bf00      	nop
  }
}
 800cc30:	3718      	adds	r7, #24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	2000b918 	.word	0x2000b918
 800cc3c:	2000b91c 	.word	0x2000b91c

0800cc40 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	4603      	mov	r3, r0
 800cc48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc4a:	79fb      	ldrb	r3, [r7, #7]
 800cc4c:	2b08      	cmp	r3, #8
 800cc4e:	d009      	beq.n	800cc64 <tcp_kill_state+0x24>
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	2b09      	cmp	r3, #9
 800cc54:	d006      	beq.n	800cc64 <tcp_kill_state+0x24>
 800cc56:	4b1a      	ldr	r3, [pc, #104]	; (800ccc0 <tcp_kill_state+0x80>)
 800cc58:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cc5c:	4919      	ldr	r1, [pc, #100]	; (800ccc4 <tcp_kill_state+0x84>)
 800cc5e:	481a      	ldr	r0, [pc, #104]	; (800ccc8 <tcp_kill_state+0x88>)
 800cc60:	f009 fa10 	bl	8016084 <iprintf>

  inactivity = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc6c:	4b17      	ldr	r3, [pc, #92]	; (800cccc <tcp_kill_state+0x8c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	617b      	str	r3, [r7, #20]
 800cc72:	e017      	b.n	800cca4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	7d1b      	ldrb	r3, [r3, #20]
 800cc78:	79fa      	ldrb	r2, [r7, #7]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d10f      	bne.n	800cc9e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc7e:	4b14      	ldr	r3, [pc, #80]	; (800ccd0 <tcp_kill_state+0x90>)
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	6a1b      	ldr	r3, [r3, #32]
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d807      	bhi.n	800cc9e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cc8e:	4b10      	ldr	r3, [pc, #64]	; (800ccd0 <tcp_kill_state+0x90>)
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	6a1b      	ldr	r3, [r3, #32]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	617b      	str	r3, [r7, #20]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d1e4      	bne.n	800cc74 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	6938      	ldr	r0, [r7, #16]
 800ccb4:	f7ff f952 	bl	800bf5c <tcp_abandon>
  }
}
 800ccb8:	bf00      	nop
 800ccba:	3718      	adds	r7, #24
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	08017e94 	.word	0x08017e94
 800ccc4:	08018420 	.word	0x08018420
 800ccc8:	08017ed8 	.word	0x08017ed8
 800cccc:	2000b918 	.word	0x2000b918
 800ccd0:	2000b91c 	.word	0x2000b91c

0800ccd4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ccde:	2300      	movs	r3, #0
 800cce0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cce2:	4b12      	ldr	r3, [pc, #72]	; (800cd2c <tcp_kill_timewait+0x58>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	60fb      	str	r3, [r7, #12]
 800cce8:	e012      	b.n	800cd10 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccea:	4b11      	ldr	r3, [pc, #68]	; (800cd30 <tcp_kill_timewait+0x5c>)
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	1ad3      	subs	r3, r2, r3
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d807      	bhi.n	800cd0a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ccfa:	4b0d      	ldr	r3, [pc, #52]	; (800cd30 <tcp_kill_timewait+0x5c>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6a1b      	ldr	r3, [r3, #32]
 800cd02:	1ad3      	subs	r3, r2, r3
 800cd04:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1e9      	bne.n	800ccea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d002      	beq.n	800cd22 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd1c:	68b8      	ldr	r0, [r7, #8]
 800cd1e:	f7ff f9db 	bl	800c0d8 <tcp_abort>
  }
}
 800cd22:	bf00      	nop
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	2000b928 	.word	0x2000b928
 800cd30:	2000b91c 	.word	0x2000b91c

0800cd34 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cd3a:	4b10      	ldr	r3, [pc, #64]	; (800cd7c <tcp_handle_closepend+0x48>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd40:	e014      	b.n	800cd6c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f003 0308 	and.w	r3, r3, #8
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d009      	beq.n	800cd68 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	8b5b      	ldrh	r3, [r3, #26]
 800cd58:	f023 0308 	bic.w	r3, r3, #8
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff f864 	bl	800be30 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e7      	bne.n	800cd42 <tcp_handle_closepend+0xe>
  }
}
 800cd72:	bf00      	nop
 800cd74:	bf00      	nop
 800cd76:	3708      	adds	r7, #8
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	2000b918 	.word	0x2000b918

0800cd80 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	4603      	mov	r3, r0
 800cd88:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	f7fd fcfe 	bl	800a78c <memp_malloc>
 800cd90:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d126      	bne.n	800cde6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cd98:	f7ff ffcc 	bl	800cd34 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cd9c:	f7ff ff9a 	bl	800ccd4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cda0:	2001      	movs	r0, #1
 800cda2:	f7fd fcf3 	bl	800a78c <memp_malloc>
 800cda6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d11b      	bne.n	800cde6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cdae:	2009      	movs	r0, #9
 800cdb0:	f7ff ff46 	bl	800cc40 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdb4:	2001      	movs	r0, #1
 800cdb6:	f7fd fce9 	bl	800a78c <memp_malloc>
 800cdba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d111      	bne.n	800cde6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cdc2:	2008      	movs	r0, #8
 800cdc4:	f7ff ff3c 	bl	800cc40 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdc8:	2001      	movs	r0, #1
 800cdca:	f7fd fcdf 	bl	800a78c <memp_malloc>
 800cdce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d107      	bne.n	800cde6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fee3 	bl	800cba4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdde:	2001      	movs	r0, #1
 800cde0:	f7fd fcd4 	bl	800a78c <memp_malloc>
 800cde4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d03f      	beq.n	800ce6c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cdec:	229c      	movs	r2, #156	; 0x9c
 800cdee:	2100      	movs	r1, #0
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f009 f93f 	bl	8016074 <memset>
    pcb->prio = prio;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	79fa      	ldrb	r2, [r7, #7]
 800cdfa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce02:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ce0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	22ff      	movs	r2, #255	; 0xff
 800ce1a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce22:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2206      	movs	r2, #6
 800ce28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	2206      	movs	r2, #6
 800ce30:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce38:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ce42:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <tcp_alloc+0xf8>)
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ce4a:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <tcp_alloc+0xfc>)
 800ce4c:	781a      	ldrb	r2, [r3, #0]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	4a08      	ldr	r2, [pc, #32]	; (800ce80 <tcp_alloc+0x100>)
 800ce60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	4a07      	ldr	r2, [pc, #28]	; (800ce84 <tcp_alloc+0x104>)
 800ce68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	2000b91c 	.word	0x2000b91c
 800ce7c:	20004a06 	.word	0x20004a06
 800ce80:	0800cb39 	.word	0x0800cb39
 800ce84:	006ddd00 	.word	0x006ddd00

0800ce88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d107      	bne.n	800cea6 <tcp_pcb_purge+0x1e>
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <tcp_pcb_purge+0x94>)
 800ce98:	f640 0251 	movw	r2, #2129	; 0x851
 800ce9c:	4920      	ldr	r1, [pc, #128]	; (800cf20 <tcp_pcb_purge+0x98>)
 800ce9e:	4821      	ldr	r0, [pc, #132]	; (800cf24 <tcp_pcb_purge+0x9c>)
 800cea0:	f009 f8f0 	bl	8016084 <iprintf>
 800cea4:	e037      	b.n	800cf16 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	7d1b      	ldrb	r3, [r3, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d033      	beq.n	800cf16 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ceb2:	2b0a      	cmp	r3, #10
 800ceb4:	d02f      	beq.n	800cf16 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d02b      	beq.n	800cf16 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d007      	beq.n	800ced6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fe fb60 	bl	800b590 <pbuf_free>
      pcb->refused_data = NULL;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f986 	bl	800d1f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ceea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff fdc7 	bl	800ca84 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7ff fdc2 	bl	800ca84 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	08017e94 	.word	0x08017e94
 800cf20:	080184e0 	.word	0x080184e0
 800cf24:	08017ed8 	.word	0x08017ed8

0800cf28 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d106      	bne.n	800cf46 <tcp_pcb_remove+0x1e>
 800cf38:	4b3e      	ldr	r3, [pc, #248]	; (800d034 <tcp_pcb_remove+0x10c>)
 800cf3a:	f640 0283 	movw	r2, #2179	; 0x883
 800cf3e:	493e      	ldr	r1, [pc, #248]	; (800d038 <tcp_pcb_remove+0x110>)
 800cf40:	483e      	ldr	r0, [pc, #248]	; (800d03c <tcp_pcb_remove+0x114>)
 800cf42:	f009 f89f 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d106      	bne.n	800cf5a <tcp_pcb_remove+0x32>
 800cf4c:	4b39      	ldr	r3, [pc, #228]	; (800d034 <tcp_pcb_remove+0x10c>)
 800cf4e:	f640 0284 	movw	r2, #2180	; 0x884
 800cf52:	493b      	ldr	r1, [pc, #236]	; (800d040 <tcp_pcb_remove+0x118>)
 800cf54:	4839      	ldr	r0, [pc, #228]	; (800d03c <tcp_pcb_remove+0x114>)
 800cf56:	f009 f895 	bl	8016084 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	429a      	cmp	r2, r3
 800cf62:	d105      	bne.n	800cf70 <tcp_pcb_remove+0x48>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	68da      	ldr	r2, [r3, #12]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	e013      	b.n	800cf98 <tcp_pcb_remove+0x70>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	e00c      	b.n	800cf92 <tcp_pcb_remove+0x6a>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d104      	bne.n	800cf8c <tcp_pcb_remove+0x64>
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	68da      	ldr	r2, [r3, #12]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	60da      	str	r2, [r3, #12]
 800cf8a:	e005      	b.n	800cf98 <tcp_pcb_remove+0x70>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1ef      	bne.n	800cf78 <tcp_pcb_remove+0x50>
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cf9e:	6838      	ldr	r0, [r7, #0]
 800cfa0:	f7ff ff72 	bl	800ce88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	7d1b      	ldrb	r3, [r3, #20]
 800cfa8:	2b0a      	cmp	r3, #10
 800cfaa:	d013      	beq.n	800cfd4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d00f      	beq.n	800cfd4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	8b5b      	ldrh	r3, [r3, #26]
 800cfb8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d009      	beq.n	800cfd4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	8b5b      	ldrh	r3, [r3, #26]
 800cfc4:	f043 0302 	orr.w	r3, r3, #2
 800cfc8:	b29a      	uxth	r2, r3
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cfce:	6838      	ldr	r0, [r7, #0]
 800cfd0:	f002 ff6a 	bl	800fea8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	7d1b      	ldrb	r3, [r3, #20]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d020      	beq.n	800d01e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d006      	beq.n	800cff2 <tcp_pcb_remove+0xca>
 800cfe4:	4b13      	ldr	r3, [pc, #76]	; (800d034 <tcp_pcb_remove+0x10c>)
 800cfe6:	f640 0293 	movw	r2, #2195	; 0x893
 800cfea:	4916      	ldr	r1, [pc, #88]	; (800d044 <tcp_pcb_remove+0x11c>)
 800cfec:	4813      	ldr	r0, [pc, #76]	; (800d03c <tcp_pcb_remove+0x114>)
 800cfee:	f009 f849 	bl	8016084 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d006      	beq.n	800d008 <tcp_pcb_remove+0xe0>
 800cffa:	4b0e      	ldr	r3, [pc, #56]	; (800d034 <tcp_pcb_remove+0x10c>)
 800cffc:	f640 0294 	movw	r2, #2196	; 0x894
 800d000:	4911      	ldr	r1, [pc, #68]	; (800d048 <tcp_pcb_remove+0x120>)
 800d002:	480e      	ldr	r0, [pc, #56]	; (800d03c <tcp_pcb_remove+0x114>)
 800d004:	f009 f83e 	bl	8016084 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d006      	beq.n	800d01e <tcp_pcb_remove+0xf6>
 800d010:	4b08      	ldr	r3, [pc, #32]	; (800d034 <tcp_pcb_remove+0x10c>)
 800d012:	f640 0296 	movw	r2, #2198	; 0x896
 800d016:	490d      	ldr	r1, [pc, #52]	; (800d04c <tcp_pcb_remove+0x124>)
 800d018:	4808      	ldr	r0, [pc, #32]	; (800d03c <tcp_pcb_remove+0x114>)
 800d01a:	f009 f833 	bl	8016084 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	2200      	movs	r2, #0
 800d022:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2200      	movs	r2, #0
 800d028:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d02a:	bf00      	nop
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	08017e94 	.word	0x08017e94
 800d038:	080184fc 	.word	0x080184fc
 800d03c:	08017ed8 	.word	0x08017ed8
 800d040:	08018518 	.word	0x08018518
 800d044:	08018538 	.word	0x08018538
 800d048:	08018550 	.word	0x08018550
 800d04c:	0801856c 	.word	0x0801856c

0800d050 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d106      	bne.n	800d06c <tcp_next_iss+0x1c>
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <tcp_next_iss+0x38>)
 800d060:	f640 02af 	movw	r2, #2223	; 0x8af
 800d064:	4909      	ldr	r1, [pc, #36]	; (800d08c <tcp_next_iss+0x3c>)
 800d066:	480a      	ldr	r0, [pc, #40]	; (800d090 <tcp_next_iss+0x40>)
 800d068:	f009 f80c 	bl	8016084 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d06c:	4b09      	ldr	r3, [pc, #36]	; (800d094 <tcp_next_iss+0x44>)
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	4b09      	ldr	r3, [pc, #36]	; (800d098 <tcp_next_iss+0x48>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4413      	add	r3, r2
 800d076:	4a07      	ldr	r2, [pc, #28]	; (800d094 <tcp_next_iss+0x44>)
 800d078:	6013      	str	r3, [r2, #0]
  return iss;
 800d07a:	4b06      	ldr	r3, [pc, #24]	; (800d094 <tcp_next_iss+0x44>)
 800d07c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3708      	adds	r7, #8
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	08017e94 	.word	0x08017e94
 800d08c:	08018584 	.word	0x08018584
 800d090:	08017ed8 	.word	0x08017ed8
 800d094:	20000014 	.word	0x20000014
 800d098:	2000b91c 	.word	0x2000b91c

0800d09c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <tcp_eff_send_mss_netif+0x22>
 800d0b0:	4b14      	ldr	r3, [pc, #80]	; (800d104 <tcp_eff_send_mss_netif+0x68>)
 800d0b2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d0b6:	4914      	ldr	r1, [pc, #80]	; (800d108 <tcp_eff_send_mss_netif+0x6c>)
 800d0b8:	4814      	ldr	r0, [pc, #80]	; (800d10c <tcp_eff_send_mss_netif+0x70>)
 800d0ba:	f008 ffe3 	bl	8016084 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d0c4:	89fb      	ldrh	r3, [r7, #14]
 800d0c6:	e019      	b.n	800d0fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d0ce:	8afb      	ldrh	r3, [r7, #22]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d012      	beq.n	800d0fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d0d4:	2328      	movs	r3, #40	; 0x28
 800d0d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d0d8:	8afa      	ldrh	r2, [r7, #22]
 800d0da:	8abb      	ldrh	r3, [r7, #20]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d904      	bls.n	800d0ea <tcp_eff_send_mss_netif+0x4e>
 800d0e0:	8afa      	ldrh	r2, [r7, #22]
 800d0e2:	8abb      	ldrh	r3, [r7, #20]
 800d0e4:	1ad3      	subs	r3, r2, r3
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	e000      	b.n	800d0ec <tcp_eff_send_mss_netif+0x50>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d0ee:	8a7a      	ldrh	r2, [r7, #18]
 800d0f0:	89fb      	ldrh	r3, [r7, #14]
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	bf28      	it	cs
 800d0f6:	4613      	movcs	r3, r2
 800d0f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d0fa:	89fb      	ldrh	r3, [r7, #14]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3718      	adds	r7, #24
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	08017e94 	.word	0x08017e94
 800d108:	080185a0 	.word	0x080185a0
 800d10c:	08017ed8 	.word	0x08017ed8

0800d110 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d119      	bne.n	800d158 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d124:	4b10      	ldr	r3, [pc, #64]	; (800d168 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d126:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d12a:	4910      	ldr	r1, [pc, #64]	; (800d16c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d12c:	4810      	ldr	r0, [pc, #64]	; (800d170 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d12e:	f008 ffa9 	bl	8016084 <iprintf>

  while (pcb != NULL) {
 800d132:	e011      	b.n	800d158 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d108      	bne.n	800d152 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f7fe ffc6 	bl	800c0d8 <tcp_abort>
      pcb = next;
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e002      	b.n	800d158 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d1ea      	bne.n	800d134 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d15e:	bf00      	nop
 800d160:	bf00      	nop
 800d162:	3710      	adds	r7, #16
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	08017e94 	.word	0x08017e94
 800d16c:	080185c8 	.word	0x080185c8
 800d170:	08017ed8 	.word	0x08017ed8

0800d174 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d02a      	beq.n	800d1da <tcp_netif_ip_addr_changed+0x66>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d026      	beq.n	800d1da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d18c:	4b15      	ldr	r3, [pc, #84]	; (800d1e4 <tcp_netif_ip_addr_changed+0x70>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4619      	mov	r1, r3
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f7ff ffbc 	bl	800d110 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d198:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <tcp_netif_ip_addr_changed+0x74>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7ff ffb6 	bl	800d110 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d017      	beq.n	800d1da <tcp_netif_ip_addr_changed+0x66>
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d013      	beq.n	800d1da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <tcp_netif_ip_addr_changed+0x78>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	e00c      	b.n	800d1d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d103      	bne.n	800d1ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1ef      	bne.n	800d1ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d1da:	bf00      	nop
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	2000b918 	.word	0x2000b918
 800d1e8:	2000b924 	.word	0x2000b924
 800d1ec:	2000b920 	.word	0x2000b920

0800d1f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d007      	beq.n	800d210 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d204:	4618      	mov	r0, r3
 800d206:	f7ff fc3d 	bl	800ca84 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2200      	movs	r2, #0
 800d20e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d218:	b590      	push	{r4, r7, lr}
 800d21a:	b08d      	sub	sp, #52	; 0x34
 800d21c:	af04      	add	r7, sp, #16
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d105      	bne.n	800d234 <tcp_input+0x1c>
 800d228:	4b9b      	ldr	r3, [pc, #620]	; (800d498 <tcp_input+0x280>)
 800d22a:	2283      	movs	r2, #131	; 0x83
 800d22c:	499b      	ldr	r1, [pc, #620]	; (800d49c <tcp_input+0x284>)
 800d22e:	489c      	ldr	r0, [pc, #624]	; (800d4a0 <tcp_input+0x288>)
 800d230:	f008 ff28 	bl	8016084 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4a9a      	ldr	r2, [pc, #616]	; (800d4a4 <tcp_input+0x28c>)
 800d23a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	895b      	ldrh	r3, [r3, #10]
 800d240:	2b13      	cmp	r3, #19
 800d242:	f240 83c4 	bls.w	800d9ce <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d246:	4b98      	ldr	r3, [pc, #608]	; (800d4a8 <tcp_input+0x290>)
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	4a97      	ldr	r2, [pc, #604]	; (800d4a8 <tcp_input+0x290>)
 800d24c:	6812      	ldr	r2, [r2, #0]
 800d24e:	4611      	mov	r1, r2
 800d250:	4618      	mov	r0, r3
 800d252:	f007 fdfb 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f040 83ba 	bne.w	800d9d2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d25e:	4b92      	ldr	r3, [pc, #584]	; (800d4a8 <tcp_input+0x290>)
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d266:	2be0      	cmp	r3, #224	; 0xe0
 800d268:	f000 83b3 	beq.w	800d9d2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d26c:	4b8d      	ldr	r3, [pc, #564]	; (800d4a4 <tcp_input+0x28c>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	899b      	ldrh	r3, [r3, #12]
 800d272:	b29b      	uxth	r3, r3
 800d274:	4618      	mov	r0, r3
 800d276:	f7fc fdd3 	bl	8009e20 <lwip_htons>
 800d27a:	4603      	mov	r3, r0
 800d27c:	0b1b      	lsrs	r3, r3, #12
 800d27e:	b29b      	uxth	r3, r3
 800d280:	b2db      	uxtb	r3, r3
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d286:	7cbb      	ldrb	r3, [r7, #18]
 800d288:	2b13      	cmp	r3, #19
 800d28a:	f240 83a4 	bls.w	800d9d6 <tcp_input+0x7be>
 800d28e:	7cbb      	ldrb	r3, [r7, #18]
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	891b      	ldrh	r3, [r3, #8]
 800d296:	429a      	cmp	r2, r3
 800d298:	f200 839d 	bhi.w	800d9d6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d29c:	7cbb      	ldrb	r3, [r7, #18]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	3b14      	subs	r3, #20
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	4b81      	ldr	r3, [pc, #516]	; (800d4ac <tcp_input+0x294>)
 800d2a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d2a8:	4b81      	ldr	r3, [pc, #516]	; (800d4b0 <tcp_input+0x298>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	895a      	ldrh	r2, [r3, #10]
 800d2b2:	7cbb      	ldrb	r3, [r7, #18]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d309      	bcc.n	800d2ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d2ba:	4b7c      	ldr	r3, [pc, #496]	; (800d4ac <tcp_input+0x294>)
 800d2bc:	881a      	ldrh	r2, [r3, #0]
 800d2be:	4b7d      	ldr	r3, [pc, #500]	; (800d4b4 <tcp_input+0x29c>)
 800d2c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d2c2:	7cbb      	ldrb	r3, [r7, #18]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7fe f8dc 	bl	800b484 <pbuf_remove_header>
 800d2cc:	e04e      	b.n	800d36c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d105      	bne.n	800d2e2 <tcp_input+0xca>
 800d2d6:	4b70      	ldr	r3, [pc, #448]	; (800d498 <tcp_input+0x280>)
 800d2d8:	22c2      	movs	r2, #194	; 0xc2
 800d2da:	4977      	ldr	r1, [pc, #476]	; (800d4b8 <tcp_input+0x2a0>)
 800d2dc:	4870      	ldr	r0, [pc, #448]	; (800d4a0 <tcp_input+0x288>)
 800d2de:	f008 fed1 	bl	8016084 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d2e2:	2114      	movs	r1, #20
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7fe f8cd 	bl	800b484 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	895a      	ldrh	r2, [r3, #10]
 800d2ee:	4b71      	ldr	r3, [pc, #452]	; (800d4b4 <tcp_input+0x29c>)
 800d2f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d2f2:	4b6e      	ldr	r3, [pc, #440]	; (800d4ac <tcp_input+0x294>)
 800d2f4:	881a      	ldrh	r2, [r3, #0]
 800d2f6:	4b6f      	ldr	r3, [pc, #444]	; (800d4b4 <tcp_input+0x29c>)
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d2fe:	4b6d      	ldr	r3, [pc, #436]	; (800d4b4 <tcp_input+0x29c>)
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	4619      	mov	r1, r3
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f7fe f8bd 	bl	800b484 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	895b      	ldrh	r3, [r3, #10]
 800d310:	8a3a      	ldrh	r2, [r7, #16]
 800d312:	429a      	cmp	r2, r3
 800d314:	f200 8361 	bhi.w	800d9da <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	4a64      	ldr	r2, [pc, #400]	; (800d4b0 <tcp_input+0x298>)
 800d320:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	8a3a      	ldrh	r2, [r7, #16]
 800d328:	4611      	mov	r1, r2
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe f8aa 	bl	800b484 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	891a      	ldrh	r2, [r3, #8]
 800d334:	8a3b      	ldrh	r3, [r7, #16]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	b29a      	uxth	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	895b      	ldrh	r3, [r3, #10]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d005      	beq.n	800d352 <tcp_input+0x13a>
 800d346:	4b54      	ldr	r3, [pc, #336]	; (800d498 <tcp_input+0x280>)
 800d348:	22df      	movs	r2, #223	; 0xdf
 800d34a:	495c      	ldr	r1, [pc, #368]	; (800d4bc <tcp_input+0x2a4>)
 800d34c:	4854      	ldr	r0, [pc, #336]	; (800d4a0 <tcp_input+0x288>)
 800d34e:	f008 fe99 	bl	8016084 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	891a      	ldrh	r2, [r3, #8]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	891b      	ldrh	r3, [r3, #8]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d005      	beq.n	800d36c <tcp_input+0x154>
 800d360:	4b4d      	ldr	r3, [pc, #308]	; (800d498 <tcp_input+0x280>)
 800d362:	22e0      	movs	r2, #224	; 0xe0
 800d364:	4956      	ldr	r1, [pc, #344]	; (800d4c0 <tcp_input+0x2a8>)
 800d366:	484e      	ldr	r0, [pc, #312]	; (800d4a0 <tcp_input+0x288>)
 800d368:	f008 fe8c 	bl	8016084 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d36c:	4b4d      	ldr	r3, [pc, #308]	; (800d4a4 <tcp_input+0x28c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	b29b      	uxth	r3, r3
 800d374:	4a4b      	ldr	r2, [pc, #300]	; (800d4a4 <tcp_input+0x28c>)
 800d376:	6814      	ldr	r4, [r2, #0]
 800d378:	4618      	mov	r0, r3
 800d37a:	f7fc fd51 	bl	8009e20 <lwip_htons>
 800d37e:	4603      	mov	r3, r0
 800d380:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d382:	4b48      	ldr	r3, [pc, #288]	; (800d4a4 <tcp_input+0x28c>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	885b      	ldrh	r3, [r3, #2]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	4a46      	ldr	r2, [pc, #280]	; (800d4a4 <tcp_input+0x28c>)
 800d38c:	6814      	ldr	r4, [r2, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fc fd46 	bl	8009e20 <lwip_htons>
 800d394:	4603      	mov	r3, r0
 800d396:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d398:	4b42      	ldr	r3, [pc, #264]	; (800d4a4 <tcp_input+0x28c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	685b      	ldr	r3, [r3, #4]
 800d39e:	4a41      	ldr	r2, [pc, #260]	; (800d4a4 <tcp_input+0x28c>)
 800d3a0:	6814      	ldr	r4, [r2, #0]
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fc fd51 	bl	8009e4a <lwip_htonl>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	6063      	str	r3, [r4, #4]
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	4a45      	ldr	r2, [pc, #276]	; (800d4c4 <tcp_input+0x2ac>)
 800d3b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d3b2:	4b3c      	ldr	r3, [pc, #240]	; (800d4a4 <tcp_input+0x28c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	4a3a      	ldr	r2, [pc, #232]	; (800d4a4 <tcp_input+0x28c>)
 800d3ba:	6814      	ldr	r4, [r2, #0]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fc fd44 	bl	8009e4a <lwip_htonl>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	60a3      	str	r3, [r4, #8]
 800d3c6:	68a3      	ldr	r3, [r4, #8]
 800d3c8:	4a3f      	ldr	r2, [pc, #252]	; (800d4c8 <tcp_input+0x2b0>)
 800d3ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d3cc:	4b35      	ldr	r3, [pc, #212]	; (800d4a4 <tcp_input+0x28c>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	89db      	ldrh	r3, [r3, #14]
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	4a33      	ldr	r2, [pc, #204]	; (800d4a4 <tcp_input+0x28c>)
 800d3d6:	6814      	ldr	r4, [r2, #0]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fc fd21 	bl	8009e20 <lwip_htons>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d3e2:	4b30      	ldr	r3, [pc, #192]	; (800d4a4 <tcp_input+0x28c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	899b      	ldrh	r3, [r3, #12]
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fc fd18 	bl	8009e20 <lwip_htons>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b34      	ldr	r3, [pc, #208]	; (800d4cc <tcp_input+0x2b4>)
 800d3fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	891a      	ldrh	r2, [r3, #8]
 800d402:	4b33      	ldr	r3, [pc, #204]	; (800d4d0 <tcp_input+0x2b8>)
 800d404:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d406:	4b31      	ldr	r3, [pc, #196]	; (800d4cc <tcp_input+0x2b4>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	f003 0303 	and.w	r3, r3, #3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00c      	beq.n	800d42c <tcp_input+0x214>
    tcplen++;
 800d412:	4b2f      	ldr	r3, [pc, #188]	; (800d4d0 <tcp_input+0x2b8>)
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	b29a      	uxth	r2, r3
 800d41a:	4b2d      	ldr	r3, [pc, #180]	; (800d4d0 <tcp_input+0x2b8>)
 800d41c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	891a      	ldrh	r2, [r3, #8]
 800d422:	4b2b      	ldr	r3, [pc, #172]	; (800d4d0 <tcp_input+0x2b8>)
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	429a      	cmp	r2, r3
 800d428:	f200 82d9 	bhi.w	800d9de <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d42c:	2300      	movs	r3, #0
 800d42e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d430:	4b28      	ldr	r3, [pc, #160]	; (800d4d4 <tcp_input+0x2bc>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	61fb      	str	r3, [r7, #28]
 800d436:	e09d      	b.n	800d574 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	7d1b      	ldrb	r3, [r3, #20]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d105      	bne.n	800d44c <tcp_input+0x234>
 800d440:	4b15      	ldr	r3, [pc, #84]	; (800d498 <tcp_input+0x280>)
 800d442:	22fb      	movs	r2, #251	; 0xfb
 800d444:	4924      	ldr	r1, [pc, #144]	; (800d4d8 <tcp_input+0x2c0>)
 800d446:	4816      	ldr	r0, [pc, #88]	; (800d4a0 <tcp_input+0x288>)
 800d448:	f008 fe1c 	bl	8016084 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	2b0a      	cmp	r3, #10
 800d452:	d105      	bne.n	800d460 <tcp_input+0x248>
 800d454:	4b10      	ldr	r3, [pc, #64]	; (800d498 <tcp_input+0x280>)
 800d456:	22fc      	movs	r2, #252	; 0xfc
 800d458:	4920      	ldr	r1, [pc, #128]	; (800d4dc <tcp_input+0x2c4>)
 800d45a:	4811      	ldr	r0, [pc, #68]	; (800d4a0 <tcp_input+0x288>)
 800d45c:	f008 fe12 	bl	8016084 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	7d1b      	ldrb	r3, [r3, #20]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d105      	bne.n	800d474 <tcp_input+0x25c>
 800d468:	4b0b      	ldr	r3, [pc, #44]	; (800d498 <tcp_input+0x280>)
 800d46a:	22fd      	movs	r2, #253	; 0xfd
 800d46c:	491c      	ldr	r1, [pc, #112]	; (800d4e0 <tcp_input+0x2c8>)
 800d46e:	480c      	ldr	r0, [pc, #48]	; (800d4a0 <tcp_input+0x288>)
 800d470:	f008 fe08 	bl	8016084 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	7a1b      	ldrb	r3, [r3, #8]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d033      	beq.n	800d4e4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	7a1a      	ldrb	r2, [r3, #8]
 800d480:	4b09      	ldr	r3, [pc, #36]	; (800d4a8 <tcp_input+0x290>)
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d488:	3301      	adds	r3, #1
 800d48a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d029      	beq.n	800d4e4 <tcp_input+0x2cc>
      prev = pcb;
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	61bb      	str	r3, [r7, #24]
      continue;
 800d494:	e06b      	b.n	800d56e <tcp_input+0x356>
 800d496:	bf00      	nop
 800d498:	080185fc 	.word	0x080185fc
 800d49c:	08018630 	.word	0x08018630
 800d4a0:	08018648 	.word	0x08018648
 800d4a4:	20004a18 	.word	0x20004a18
 800d4a8:	200081e4 	.word	0x200081e4
 800d4ac:	20004a1c 	.word	0x20004a1c
 800d4b0:	20004a20 	.word	0x20004a20
 800d4b4:	20004a1e 	.word	0x20004a1e
 800d4b8:	08018670 	.word	0x08018670
 800d4bc:	08018680 	.word	0x08018680
 800d4c0:	0801868c 	.word	0x0801868c
 800d4c4:	20004a28 	.word	0x20004a28
 800d4c8:	20004a2c 	.word	0x20004a2c
 800d4cc:	20004a34 	.word	0x20004a34
 800d4d0:	20004a32 	.word	0x20004a32
 800d4d4:	2000b918 	.word	0x2000b918
 800d4d8:	080186ac 	.word	0x080186ac
 800d4dc:	080186d4 	.word	0x080186d4
 800d4e0:	08018700 	.word	0x08018700
    }

    if (pcb->remote_port == tcphdr->src &&
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	8b1a      	ldrh	r2, [r3, #24]
 800d4e8:	4b94      	ldr	r3, [pc, #592]	; (800d73c <tcp_input+0x524>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d13a      	bne.n	800d56a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	8ada      	ldrh	r2, [r3, #22]
 800d4f8:	4b90      	ldr	r3, [pc, #576]	; (800d73c <tcp_input+0x524>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	885b      	ldrh	r3, [r3, #2]
 800d4fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d500:	429a      	cmp	r2, r3
 800d502:	d132      	bne.n	800d56a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	685a      	ldr	r2, [r3, #4]
 800d508:	4b8d      	ldr	r3, [pc, #564]	; (800d740 <tcp_input+0x528>)
 800d50a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d12c      	bne.n	800d56a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	4b8a      	ldr	r3, [pc, #552]	; (800d740 <tcp_input+0x528>)
 800d516:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d518:	429a      	cmp	r2, r3
 800d51a:	d126      	bne.n	800d56a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	429a      	cmp	r2, r3
 800d524:	d106      	bne.n	800d534 <tcp_input+0x31c>
 800d526:	4b87      	ldr	r3, [pc, #540]	; (800d744 <tcp_input+0x52c>)
 800d528:	f240 120d 	movw	r2, #269	; 0x10d
 800d52c:	4986      	ldr	r1, [pc, #536]	; (800d748 <tcp_input+0x530>)
 800d52e:	4887      	ldr	r0, [pc, #540]	; (800d74c <tcp_input+0x534>)
 800d530:	f008 fda8 	bl	8016084 <iprintf>
      if (prev != NULL) {
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00a      	beq.n	800d550 <tcp_input+0x338>
        prev->next = pcb->next;
 800d53a:	69fb      	ldr	r3, [r7, #28]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d542:	4b83      	ldr	r3, [pc, #524]	; (800d750 <tcp_input+0x538>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d54a:	4a81      	ldr	r2, [pc, #516]	; (800d750 <tcp_input+0x538>)
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	69fa      	ldr	r2, [r7, #28]
 800d556:	429a      	cmp	r2, r3
 800d558:	d111      	bne.n	800d57e <tcp_input+0x366>
 800d55a:	4b7a      	ldr	r3, [pc, #488]	; (800d744 <tcp_input+0x52c>)
 800d55c:	f240 1215 	movw	r2, #277	; 0x115
 800d560:	497c      	ldr	r1, [pc, #496]	; (800d754 <tcp_input+0x53c>)
 800d562:	487a      	ldr	r0, [pc, #488]	; (800d74c <tcp_input+0x534>)
 800d564:	f008 fd8e 	bl	8016084 <iprintf>
      break;
 800d568:	e009      	b.n	800d57e <tcp_input+0x366>
    }
    prev = pcb;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	f47f af5e 	bne.w	800d438 <tcp_input+0x220>
 800d57c:	e000      	b.n	800d580 <tcp_input+0x368>
      break;
 800d57e:	bf00      	nop
  }

  if (pcb == NULL) {
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2b00      	cmp	r3, #0
 800d584:	f040 8095 	bne.w	800d6b2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d588:	4b73      	ldr	r3, [pc, #460]	; (800d758 <tcp_input+0x540>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	61fb      	str	r3, [r7, #28]
 800d58e:	e03f      	b.n	800d610 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	7d1b      	ldrb	r3, [r3, #20]
 800d594:	2b0a      	cmp	r3, #10
 800d596:	d006      	beq.n	800d5a6 <tcp_input+0x38e>
 800d598:	4b6a      	ldr	r3, [pc, #424]	; (800d744 <tcp_input+0x52c>)
 800d59a:	f240 121f 	movw	r2, #287	; 0x11f
 800d59e:	496f      	ldr	r1, [pc, #444]	; (800d75c <tcp_input+0x544>)
 800d5a0:	486a      	ldr	r0, [pc, #424]	; (800d74c <tcp_input+0x534>)
 800d5a2:	f008 fd6f 	bl	8016084 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	7a1b      	ldrb	r3, [r3, #8]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d009      	beq.n	800d5c2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d5ae:	69fb      	ldr	r3, [r7, #28]
 800d5b0:	7a1a      	ldrb	r2, [r3, #8]
 800d5b2:	4b63      	ldr	r3, [pc, #396]	; (800d740 <tcp_input+0x528>)
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d122      	bne.n	800d608 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	8b1a      	ldrh	r2, [r3, #24]
 800d5c6:	4b5d      	ldr	r3, [pc, #372]	; (800d73c <tcp_input+0x524>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d11b      	bne.n	800d60a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	8ada      	ldrh	r2, [r3, #22]
 800d5d6:	4b59      	ldr	r3, [pc, #356]	; (800d73c <tcp_input+0x524>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	885b      	ldrh	r3, [r3, #2]
 800d5dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d113      	bne.n	800d60a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5e2:	69fb      	ldr	r3, [r7, #28]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	4b56      	ldr	r3, [pc, #344]	; (800d740 <tcp_input+0x528>)
 800d5e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d10d      	bne.n	800d60a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	4b53      	ldr	r3, [pc, #332]	; (800d740 <tcp_input+0x528>)
 800d5f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d107      	bne.n	800d60a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d5fa:	69f8      	ldr	r0, [r7, #28]
 800d5fc:	f000 fb54 	bl	800dca8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f7fd ffc5 	bl	800b590 <pbuf_free>
        return;
 800d606:	e1f0      	b.n	800d9ea <tcp_input+0x7d2>
        continue;
 800d608:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1bc      	bne.n	800d590 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d61a:	4b51      	ldr	r3, [pc, #324]	; (800d760 <tcp_input+0x548>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	617b      	str	r3, [r7, #20]
 800d620:	e02a      	b.n	800d678 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	7a1b      	ldrb	r3, [r3, #8]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00c      	beq.n	800d644 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	7a1a      	ldrb	r2, [r3, #8]
 800d62e:	4b44      	ldr	r3, [pc, #272]	; (800d740 <tcp_input+0x528>)
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d636:	3301      	adds	r3, #1
 800d638:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d002      	beq.n	800d644 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	61bb      	str	r3, [r7, #24]
        continue;
 800d642:	e016      	b.n	800d672 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	8ada      	ldrh	r2, [r3, #22]
 800d648:	4b3c      	ldr	r3, [pc, #240]	; (800d73c <tcp_input+0x524>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	885b      	ldrh	r3, [r3, #2]
 800d64e:	b29b      	uxth	r3, r3
 800d650:	429a      	cmp	r2, r3
 800d652:	d10c      	bne.n	800d66e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	4b39      	ldr	r3, [pc, #228]	; (800d740 <tcp_input+0x528>)
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d00f      	beq.n	800d680 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00d      	beq.n	800d682 <tcp_input+0x46a>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d009      	beq.n	800d682 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	617b      	str	r3, [r7, #20]
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d1d1      	bne.n	800d622 <tcp_input+0x40a>
 800d67e:	e000      	b.n	800d682 <tcp_input+0x46a>
            break;
 800d680:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d014      	beq.n	800d6b2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	68da      	ldr	r2, [r3, #12]
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d696:	4b32      	ldr	r3, [pc, #200]	; (800d760 <tcp_input+0x548>)
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d69e:	4a30      	ldr	r2, [pc, #192]	; (800d760 <tcp_input+0x548>)
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d6a4:	6978      	ldr	r0, [r7, #20]
 800d6a6:	f000 fa01 	bl	800daac <tcp_listen_input>
      }
      pbuf_free(p);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7fd ff70 	bl	800b590 <pbuf_free>
      return;
 800d6b0:	e19b      	b.n	800d9ea <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	f000 8160 	beq.w	800d97a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d6ba:	4b2a      	ldr	r3, [pc, #168]	; (800d764 <tcp_input+0x54c>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	891a      	ldrh	r2, [r3, #8]
 800d6c4:	4b27      	ldr	r3, [pc, #156]	; (800d764 <tcp_input+0x54c>)
 800d6c6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d6c8:	4a26      	ldr	r2, [pc, #152]	; (800d764 <tcp_input+0x54c>)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d6ce:	4b1b      	ldr	r3, [pc, #108]	; (800d73c <tcp_input+0x524>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	4a24      	ldr	r2, [pc, #144]	; (800d764 <tcp_input+0x54c>)
 800d6d4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d6d6:	4b24      	ldr	r3, [pc, #144]	; (800d768 <tcp_input+0x550>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d6dc:	4b23      	ldr	r3, [pc, #140]	; (800d76c <tcp_input+0x554>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d6e2:	4b23      	ldr	r3, [pc, #140]	; (800d770 <tcp_input+0x558>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d6e8:	4b22      	ldr	r3, [pc, #136]	; (800d774 <tcp_input+0x55c>)
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	f003 0308 	and.w	r3, r3, #8
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d006      	beq.n	800d702 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	7b5b      	ldrb	r3, [r3, #13]
 800d6f8:	f043 0301 	orr.w	r3, r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d706:	2b00      	cmp	r3, #0
 800d708:	d038      	beq.n	800d77c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d70a:	69f8      	ldr	r0, [r7, #28]
 800d70c:	f7ff f93e 	bl	800c98c <tcp_process_refused_data>
 800d710:	4603      	mov	r3, r0
 800d712:	f113 0f0d 	cmn.w	r3, #13
 800d716:	d007      	beq.n	800d728 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d02d      	beq.n	800d77c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d720:	4b15      	ldr	r3, [pc, #84]	; (800d778 <tcp_input+0x560>)
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d029      	beq.n	800d77c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d728:	69fb      	ldr	r3, [r7, #28]
 800d72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f040 8104 	bne.w	800d93a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d732:	69f8      	ldr	r0, [r7, #28]
 800d734:	f003 f9be 	bl	8010ab4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d738:	e0ff      	b.n	800d93a <tcp_input+0x722>
 800d73a:	bf00      	nop
 800d73c:	20004a18 	.word	0x20004a18
 800d740:	200081e4 	.word	0x200081e4
 800d744:	080185fc 	.word	0x080185fc
 800d748:	08018728 	.word	0x08018728
 800d74c:	08018648 	.word	0x08018648
 800d750:	2000b918 	.word	0x2000b918
 800d754:	08018754 	.word	0x08018754
 800d758:	2000b928 	.word	0x2000b928
 800d75c:	08018780 	.word	0x08018780
 800d760:	2000b920 	.word	0x2000b920
 800d764:	20004a08 	.word	0x20004a08
 800d768:	20004a38 	.word	0x20004a38
 800d76c:	20004a35 	.word	0x20004a35
 800d770:	20004a30 	.word	0x20004a30
 800d774:	20004a34 	.word	0x20004a34
 800d778:	20004a32 	.word	0x20004a32
      }
    }
    tcp_input_pcb = pcb;
 800d77c:	4a9c      	ldr	r2, [pc, #624]	; (800d9f0 <tcp_input+0x7d8>)
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d782:	69f8      	ldr	r0, [r7, #28]
 800d784:	f000 fb0a 	bl	800dd9c <tcp_process>
 800d788:	4603      	mov	r3, r0
 800d78a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d78c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d790:	f113 0f0d 	cmn.w	r3, #13
 800d794:	f000 80d3 	beq.w	800d93e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d798:	4b96      	ldr	r3, [pc, #600]	; (800d9f4 <tcp_input+0x7dc>)
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	f003 0308 	and.w	r3, r3, #8
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d015      	beq.n	800d7d0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d008      	beq.n	800d7c0 <tcp_input+0x5a8>
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	6912      	ldr	r2, [r2, #16]
 800d7b8:	f06f 010d 	mvn.w	r1, #13
 800d7bc:	4610      	mov	r0, r2
 800d7be:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d7c0:	69f9      	ldr	r1, [r7, #28]
 800d7c2:	488d      	ldr	r0, [pc, #564]	; (800d9f8 <tcp_input+0x7e0>)
 800d7c4:	f7ff fbb0 	bl	800cf28 <tcp_pcb_remove>
        tcp_free(pcb);
 800d7c8:	69f8      	ldr	r0, [r7, #28]
 800d7ca:	f7fe f99d 	bl	800bb08 <tcp_free>
 800d7ce:	e0c1      	b.n	800d954 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d7d4:	4b89      	ldr	r3, [pc, #548]	; (800d9fc <tcp_input+0x7e4>)
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d01d      	beq.n	800d818 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d7dc:	4b87      	ldr	r3, [pc, #540]	; (800d9fc <tcp_input+0x7e4>)
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d00a      	beq.n	800d802 <tcp_input+0x5ea>
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d7f2:	69fa      	ldr	r2, [r7, #28]
 800d7f4:	6910      	ldr	r0, [r2, #16]
 800d7f6:	89fa      	ldrh	r2, [r7, #14]
 800d7f8:	69f9      	ldr	r1, [r7, #28]
 800d7fa:	4798      	blx	r3
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	74fb      	strb	r3, [r7, #19]
 800d800:	e001      	b.n	800d806 <tcp_input+0x5ee>
 800d802:	2300      	movs	r3, #0
 800d804:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d806:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d80a:	f113 0f0d 	cmn.w	r3, #13
 800d80e:	f000 8098 	beq.w	800d942 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d812:	4b7a      	ldr	r3, [pc, #488]	; (800d9fc <tcp_input+0x7e4>)
 800d814:	2200      	movs	r2, #0
 800d816:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d818:	69f8      	ldr	r0, [r7, #28]
 800d81a:	f000 f907 	bl	800da2c <tcp_input_delayed_close>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b00      	cmp	r3, #0
 800d822:	f040 8090 	bne.w	800d946 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d826:	4b76      	ldr	r3, [pc, #472]	; (800da00 <tcp_input+0x7e8>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d041      	beq.n	800d8b2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d832:	2b00      	cmp	r3, #0
 800d834:	d006      	beq.n	800d844 <tcp_input+0x62c>
 800d836:	4b73      	ldr	r3, [pc, #460]	; (800da04 <tcp_input+0x7ec>)
 800d838:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d83c:	4972      	ldr	r1, [pc, #456]	; (800da08 <tcp_input+0x7f0>)
 800d83e:	4873      	ldr	r0, [pc, #460]	; (800da0c <tcp_input+0x7f4>)
 800d840:	f008 fc20 	bl	8016084 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	8b5b      	ldrh	r3, [r3, #26]
 800d848:	f003 0310 	and.w	r3, r3, #16
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d008      	beq.n	800d862 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d850:	4b6b      	ldr	r3, [pc, #428]	; (800da00 <tcp_input+0x7e8>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4618      	mov	r0, r3
 800d856:	f7fd fe9b 	bl	800b590 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d85a:	69f8      	ldr	r0, [r7, #28]
 800d85c:	f7fe fc3c 	bl	800c0d8 <tcp_abort>
            goto aborted;
 800d860:	e078      	b.n	800d954 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00c      	beq.n	800d886 <tcp_input+0x66e>
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	6918      	ldr	r0, [r3, #16]
 800d876:	4b62      	ldr	r3, [pc, #392]	; (800da00 <tcp_input+0x7e8>)
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	2300      	movs	r3, #0
 800d87c:	69f9      	ldr	r1, [r7, #28]
 800d87e:	47a0      	blx	r4
 800d880:	4603      	mov	r3, r0
 800d882:	74fb      	strb	r3, [r7, #19]
 800d884:	e008      	b.n	800d898 <tcp_input+0x680>
 800d886:	4b5e      	ldr	r3, [pc, #376]	; (800da00 <tcp_input+0x7e8>)
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	2300      	movs	r3, #0
 800d88c:	69f9      	ldr	r1, [r7, #28]
 800d88e:	2000      	movs	r0, #0
 800d890:	f7ff f952 	bl	800cb38 <tcp_recv_null>
 800d894:	4603      	mov	r3, r0
 800d896:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d89c:	f113 0f0d 	cmn.w	r3, #13
 800d8a0:	d053      	beq.n	800d94a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d8a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d003      	beq.n	800d8b2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d8aa:	4b55      	ldr	r3, [pc, #340]	; (800da00 <tcp_input+0x7e8>)
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d8b2:	4b50      	ldr	r3, [pc, #320]	; (800d9f4 <tcp_input+0x7dc>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f003 0320 	and.w	r3, r3, #32
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d030      	beq.n	800d920 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d8be:	69fb      	ldr	r3, [r7, #28]
 800d8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d009      	beq.n	800d8da <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ca:	7b5a      	ldrb	r2, [r3, #13]
 800d8cc:	69fb      	ldr	r3, [r7, #28]
 800d8ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8d0:	f042 0220 	orr.w	r2, r2, #32
 800d8d4:	b2d2      	uxtb	r2, r2
 800d8d6:	735a      	strb	r2, [r3, #13]
 800d8d8:	e022      	b.n	800d920 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8e2:	d005      	beq.n	800d8f0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d00b      	beq.n	800d912 <tcp_input+0x6fa>
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	6918      	ldr	r0, [r3, #16]
 800d904:	2300      	movs	r3, #0
 800d906:	2200      	movs	r2, #0
 800d908:	69f9      	ldr	r1, [r7, #28]
 800d90a:	47a0      	blx	r4
 800d90c:	4603      	mov	r3, r0
 800d90e:	74fb      	strb	r3, [r7, #19]
 800d910:	e001      	b.n	800d916 <tcp_input+0x6fe>
 800d912:	2300      	movs	r3, #0
 800d914:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d916:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d91a:	f113 0f0d 	cmn.w	r3, #13
 800d91e:	d016      	beq.n	800d94e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d920:	4b33      	ldr	r3, [pc, #204]	; (800d9f0 <tcp_input+0x7d8>)
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d926:	69f8      	ldr	r0, [r7, #28]
 800d928:	f000 f880 	bl	800da2c <tcp_input_delayed_close>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d10f      	bne.n	800d952 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d932:	69f8      	ldr	r0, [r7, #28]
 800d934:	f002 fab8 	bl	800fea8 <tcp_output>
 800d938:	e00c      	b.n	800d954 <tcp_input+0x73c>
        goto aborted;
 800d93a:	bf00      	nop
 800d93c:	e00a      	b.n	800d954 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d93e:	bf00      	nop
 800d940:	e008      	b.n	800d954 <tcp_input+0x73c>
              goto aborted;
 800d942:	bf00      	nop
 800d944:	e006      	b.n	800d954 <tcp_input+0x73c>
          goto aborted;
 800d946:	bf00      	nop
 800d948:	e004      	b.n	800d954 <tcp_input+0x73c>
            goto aborted;
 800d94a:	bf00      	nop
 800d94c:	e002      	b.n	800d954 <tcp_input+0x73c>
              goto aborted;
 800d94e:	bf00      	nop
 800d950:	e000      	b.n	800d954 <tcp_input+0x73c>
          goto aborted;
 800d952:	bf00      	nop
    tcp_input_pcb = NULL;
 800d954:	4b26      	ldr	r3, [pc, #152]	; (800d9f0 <tcp_input+0x7d8>)
 800d956:	2200      	movs	r2, #0
 800d958:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d95a:	4b29      	ldr	r3, [pc, #164]	; (800da00 <tcp_input+0x7e8>)
 800d95c:	2200      	movs	r2, #0
 800d95e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d960:	4b2b      	ldr	r3, [pc, #172]	; (800da10 <tcp_input+0x7f8>)
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d03f      	beq.n	800d9e8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d968:	4b29      	ldr	r3, [pc, #164]	; (800da10 <tcp_input+0x7f8>)
 800d96a:	685b      	ldr	r3, [r3, #4]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7fd fe0f 	bl	800b590 <pbuf_free>
      inseg.p = NULL;
 800d972:	4b27      	ldr	r3, [pc, #156]	; (800da10 <tcp_input+0x7f8>)
 800d974:	2200      	movs	r2, #0
 800d976:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d978:	e036      	b.n	800d9e8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d97a:	4b26      	ldr	r3, [pc, #152]	; (800da14 <tcp_input+0x7fc>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	899b      	ldrh	r3, [r3, #12]
 800d980:	b29b      	uxth	r3, r3
 800d982:	4618      	mov	r0, r3
 800d984:	f7fc fa4c 	bl	8009e20 <lwip_htons>
 800d988:	4603      	mov	r3, r0
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	f003 0304 	and.w	r3, r3, #4
 800d990:	2b00      	cmp	r3, #0
 800d992:	d118      	bne.n	800d9c6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d994:	4b20      	ldr	r3, [pc, #128]	; (800da18 <tcp_input+0x800>)
 800d996:	6819      	ldr	r1, [r3, #0]
 800d998:	4b20      	ldr	r3, [pc, #128]	; (800da1c <tcp_input+0x804>)
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	461a      	mov	r2, r3
 800d99e:	4b20      	ldr	r3, [pc, #128]	; (800da20 <tcp_input+0x808>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9a4:	4b1b      	ldr	r3, [pc, #108]	; (800da14 <tcp_input+0x7fc>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9a8:	885b      	ldrh	r3, [r3, #2]
 800d9aa:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d9ac:	4a19      	ldr	r2, [pc, #100]	; (800da14 <tcp_input+0x7fc>)
 800d9ae:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9b0:	8812      	ldrh	r2, [r2, #0]
 800d9b2:	b292      	uxth	r2, r2
 800d9b4:	9202      	str	r2, [sp, #8]
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	4b1a      	ldr	r3, [pc, #104]	; (800da24 <tcp_input+0x80c>)
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	4b1a      	ldr	r3, [pc, #104]	; (800da28 <tcp_input+0x810>)
 800d9be:	4602      	mov	r2, r0
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	f003 f825 	bl	8010a10 <tcp_rst>
    pbuf_free(p);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f7fd fde2 	bl	800b590 <pbuf_free>
  return;
 800d9cc:	e00c      	b.n	800d9e8 <tcp_input+0x7d0>
    goto dropped;
 800d9ce:	bf00      	nop
 800d9d0:	e006      	b.n	800d9e0 <tcp_input+0x7c8>
    goto dropped;
 800d9d2:	bf00      	nop
 800d9d4:	e004      	b.n	800d9e0 <tcp_input+0x7c8>
    goto dropped;
 800d9d6:	bf00      	nop
 800d9d8:	e002      	b.n	800d9e0 <tcp_input+0x7c8>
      goto dropped;
 800d9da:	bf00      	nop
 800d9dc:	e000      	b.n	800d9e0 <tcp_input+0x7c8>
      goto dropped;
 800d9de:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f7fd fdd5 	bl	800b590 <pbuf_free>
 800d9e6:	e000      	b.n	800d9ea <tcp_input+0x7d2>
  return;
 800d9e8:	bf00      	nop
}
 800d9ea:	3724      	adds	r7, #36	; 0x24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd90      	pop	{r4, r7, pc}
 800d9f0:	2000b92c 	.word	0x2000b92c
 800d9f4:	20004a35 	.word	0x20004a35
 800d9f8:	2000b918 	.word	0x2000b918
 800d9fc:	20004a30 	.word	0x20004a30
 800da00:	20004a38 	.word	0x20004a38
 800da04:	080185fc 	.word	0x080185fc
 800da08:	080187b0 	.word	0x080187b0
 800da0c:	08018648 	.word	0x08018648
 800da10:	20004a08 	.word	0x20004a08
 800da14:	20004a18 	.word	0x20004a18
 800da18:	20004a2c 	.word	0x20004a2c
 800da1c:	20004a32 	.word	0x20004a32
 800da20:	20004a28 	.word	0x20004a28
 800da24:	200081f4 	.word	0x200081f4
 800da28:	200081f8 	.word	0x200081f8

0800da2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d106      	bne.n	800da48 <tcp_input_delayed_close+0x1c>
 800da3a:	4b17      	ldr	r3, [pc, #92]	; (800da98 <tcp_input_delayed_close+0x6c>)
 800da3c:	f240 225a 	movw	r2, #602	; 0x25a
 800da40:	4916      	ldr	r1, [pc, #88]	; (800da9c <tcp_input_delayed_close+0x70>)
 800da42:	4817      	ldr	r0, [pc, #92]	; (800daa0 <tcp_input_delayed_close+0x74>)
 800da44:	f008 fb1e 	bl	8016084 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800da48:	4b16      	ldr	r3, [pc, #88]	; (800daa4 <tcp_input_delayed_close+0x78>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	f003 0310 	and.w	r3, r3, #16
 800da50:	2b00      	cmp	r3, #0
 800da52:	d01c      	beq.n	800da8e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	8b5b      	ldrh	r3, [r3, #26]
 800da58:	f003 0310 	and.w	r3, r3, #16
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10d      	bne.n	800da7c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da66:	2b00      	cmp	r3, #0
 800da68:	d008      	beq.n	800da7c <tcp_input_delayed_close+0x50>
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	6912      	ldr	r2, [r2, #16]
 800da74:	f06f 010e 	mvn.w	r1, #14
 800da78:	4610      	mov	r0, r2
 800da7a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da7c:	6879      	ldr	r1, [r7, #4]
 800da7e:	480a      	ldr	r0, [pc, #40]	; (800daa8 <tcp_input_delayed_close+0x7c>)
 800da80:	f7ff fa52 	bl	800cf28 <tcp_pcb_remove>
    tcp_free(pcb);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7fe f83f 	bl	800bb08 <tcp_free>
    return 1;
 800da8a:	2301      	movs	r3, #1
 800da8c:	e000      	b.n	800da90 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3708      	adds	r7, #8
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	080185fc 	.word	0x080185fc
 800da9c:	080187cc 	.word	0x080187cc
 800daa0:	08018648 	.word	0x08018648
 800daa4:	20004a35 	.word	0x20004a35
 800daa8:	2000b918 	.word	0x2000b918

0800daac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800daac:	b590      	push	{r4, r7, lr}
 800daae:	b08b      	sub	sp, #44	; 0x2c
 800dab0:	af04      	add	r7, sp, #16
 800dab2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800dab4:	4b6f      	ldr	r3, [pc, #444]	; (800dc74 <tcp_listen_input+0x1c8>)
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	f003 0304 	and.w	r3, r3, #4
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f040 80d2 	bne.w	800dc66 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d106      	bne.n	800dad6 <tcp_listen_input+0x2a>
 800dac8:	4b6b      	ldr	r3, [pc, #428]	; (800dc78 <tcp_listen_input+0x1cc>)
 800daca:	f240 2281 	movw	r2, #641	; 0x281
 800dace:	496b      	ldr	r1, [pc, #428]	; (800dc7c <tcp_listen_input+0x1d0>)
 800dad0:	486b      	ldr	r0, [pc, #428]	; (800dc80 <tcp_listen_input+0x1d4>)
 800dad2:	f008 fad7 	bl	8016084 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800dad6:	4b67      	ldr	r3, [pc, #412]	; (800dc74 <tcp_listen_input+0x1c8>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	f003 0310 	and.w	r3, r3, #16
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d019      	beq.n	800db16 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dae2:	4b68      	ldr	r3, [pc, #416]	; (800dc84 <tcp_listen_input+0x1d8>)
 800dae4:	6819      	ldr	r1, [r3, #0]
 800dae6:	4b68      	ldr	r3, [pc, #416]	; (800dc88 <tcp_listen_input+0x1dc>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	4b67      	ldr	r3, [pc, #412]	; (800dc8c <tcp_listen_input+0x1e0>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800daf2:	4b67      	ldr	r3, [pc, #412]	; (800dc90 <tcp_listen_input+0x1e4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800daf6:	885b      	ldrh	r3, [r3, #2]
 800daf8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dafa:	4a65      	ldr	r2, [pc, #404]	; (800dc90 <tcp_listen_input+0x1e4>)
 800dafc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dafe:	8812      	ldrh	r2, [r2, #0]
 800db00:	b292      	uxth	r2, r2
 800db02:	9202      	str	r2, [sp, #8]
 800db04:	9301      	str	r3, [sp, #4]
 800db06:	4b63      	ldr	r3, [pc, #396]	; (800dc94 <tcp_listen_input+0x1e8>)
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4b63      	ldr	r3, [pc, #396]	; (800dc98 <tcp_listen_input+0x1ec>)
 800db0c:	4602      	mov	r2, r0
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f002 ff7e 	bl	8010a10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800db14:	e0a9      	b.n	800dc6a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800db16:	4b57      	ldr	r3, [pc, #348]	; (800dc74 <tcp_listen_input+0x1c8>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	f003 0302 	and.w	r3, r3, #2
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 80a3 	beq.w	800dc6a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7d5b      	ldrb	r3, [r3, #21]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff f929 	bl	800cd80 <tcp_alloc>
 800db2e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d111      	bne.n	800db5a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00a      	beq.n	800db54 <tcp_listen_input+0xa8>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	699b      	ldr	r3, [r3, #24]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6910      	ldr	r0, [r2, #16]
 800db46:	f04f 32ff 	mov.w	r2, #4294967295
 800db4a:	2100      	movs	r1, #0
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	73bb      	strb	r3, [r7, #14]
      return;
 800db52:	e08b      	b.n	800dc6c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db54:	23f0      	movs	r3, #240	; 0xf0
 800db56:	73bb      	strb	r3, [r7, #14]
      return;
 800db58:	e088      	b.n	800dc6c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800db5a:	4b50      	ldr	r3, [pc, #320]	; (800dc9c <tcp_listen_input+0x1f0>)
 800db5c:	695a      	ldr	r2, [r3, #20]
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800db62:	4b4e      	ldr	r3, [pc, #312]	; (800dc9c <tcp_listen_input+0x1f0>)
 800db64:	691a      	ldr	r2, [r3, #16]
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8ada      	ldrh	r2, [r3, #22]
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800db72:	4b47      	ldr	r3, [pc, #284]	; (800dc90 <tcp_listen_input+0x1e4>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	b29a      	uxth	r2, r3
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	2203      	movs	r2, #3
 800db82:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800db84:	4b41      	ldr	r3, [pc, #260]	; (800dc8c <tcp_listen_input+0x1e0>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800db96:	6978      	ldr	r0, [r7, #20]
 800db98:	f7ff fa5a 	bl	800d050 <tcp_next_iss>
 800db9c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	693a      	ldr	r2, [r7, #16]
 800dba2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	693a      	ldr	r2, [r7, #16]
 800dbae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dbb6:	4b35      	ldr	r3, [pc, #212]	; (800dc8c <tcp_listen_input+0x1e0>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	1e5a      	subs	r2, r3, #1
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	691a      	ldr	r2, [r3, #16]
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	7a5b      	ldrb	r3, [r3, #9]
 800dbd2:	f003 030c 	and.w	r3, r3, #12
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	7a1a      	ldrb	r2, [r3, #8]
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dbe4:	4b2e      	ldr	r3, [pc, #184]	; (800dca0 <tcp_listen_input+0x1f4>)
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	60da      	str	r2, [r3, #12]
 800dbec:	4a2c      	ldr	r2, [pc, #176]	; (800dca0 <tcp_listen_input+0x1f4>)
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	6013      	str	r3, [r2, #0]
 800dbf2:	f003 f8cf 	bl	8010d94 <tcp_timer_needed>
 800dbf6:	4b2b      	ldr	r3, [pc, #172]	; (800dca4 <tcp_listen_input+0x1f8>)
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dbfc:	6978      	ldr	r0, [r7, #20]
 800dbfe:	f001 fd8d 	bl	800f71c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dc02:	4b23      	ldr	r3, [pc, #140]	; (800dc90 <tcp_listen_input+0x1e4>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	89db      	ldrh	r3, [r3, #14]
 800dc08:	b29a      	uxth	r2, r3
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	3304      	adds	r3, #4
 800dc24:	4618      	mov	r0, r3
 800dc26:	f006 fe5d 	bl	80148e4 <ip4_route>
 800dc2a:	4601      	mov	r1, r0
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	3304      	adds	r3, #4
 800dc30:	461a      	mov	r2, r3
 800dc32:	4620      	mov	r0, r4
 800dc34:	f7ff fa32 	bl	800d09c <tcp_eff_send_mss_netif>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dc40:	2112      	movs	r1, #18
 800dc42:	6978      	ldr	r0, [r7, #20]
 800dc44:	f002 f842 	bl	800fccc <tcp_enqueue_flags>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dc4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d004      	beq.n	800dc5e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dc54:	2100      	movs	r1, #0
 800dc56:	6978      	ldr	r0, [r7, #20]
 800dc58:	f7fe f980 	bl	800bf5c <tcp_abandon>
      return;
 800dc5c:	e006      	b.n	800dc6c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800dc5e:	6978      	ldr	r0, [r7, #20]
 800dc60:	f002 f922 	bl	800fea8 <tcp_output>
  return;
 800dc64:	e001      	b.n	800dc6a <tcp_listen_input+0x1be>
    return;
 800dc66:	bf00      	nop
 800dc68:	e000      	b.n	800dc6c <tcp_listen_input+0x1c0>
  return;
 800dc6a:	bf00      	nop
}
 800dc6c:	371c      	adds	r7, #28
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd90      	pop	{r4, r7, pc}
 800dc72:	bf00      	nop
 800dc74:	20004a34 	.word	0x20004a34
 800dc78:	080185fc 	.word	0x080185fc
 800dc7c:	080187f4 	.word	0x080187f4
 800dc80:	08018648 	.word	0x08018648
 800dc84:	20004a2c 	.word	0x20004a2c
 800dc88:	20004a32 	.word	0x20004a32
 800dc8c:	20004a28 	.word	0x20004a28
 800dc90:	20004a18 	.word	0x20004a18
 800dc94:	200081f4 	.word	0x200081f4
 800dc98:	200081f8 	.word	0x200081f8
 800dc9c:	200081e4 	.word	0x200081e4
 800dca0:	2000b918 	.word	0x2000b918
 800dca4:	2000b914 	.word	0x2000b914

0800dca8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af04      	add	r7, sp, #16
 800dcae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dcb0:	4b2f      	ldr	r3, [pc, #188]	; (800dd70 <tcp_timewait_input+0xc8>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	f003 0304 	and.w	r3, r3, #4
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d153      	bne.n	800dd64 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d106      	bne.n	800dcd0 <tcp_timewait_input+0x28>
 800dcc2:	4b2c      	ldr	r3, [pc, #176]	; (800dd74 <tcp_timewait_input+0xcc>)
 800dcc4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dcc8:	492b      	ldr	r1, [pc, #172]	; (800dd78 <tcp_timewait_input+0xd0>)
 800dcca:	482c      	ldr	r0, [pc, #176]	; (800dd7c <tcp_timewait_input+0xd4>)
 800dccc:	f008 f9da 	bl	8016084 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dcd0:	4b27      	ldr	r3, [pc, #156]	; (800dd70 <tcp_timewait_input+0xc8>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	f003 0302 	and.w	r3, r3, #2
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d02a      	beq.n	800dd32 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dcdc:	4b28      	ldr	r3, [pc, #160]	; (800dd80 <tcp_timewait_input+0xd8>)
 800dcde:	681a      	ldr	r2, [r3, #0]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	db2d      	blt.n	800dd46 <tcp_timewait_input+0x9e>
 800dcea:	4b25      	ldr	r3, [pc, #148]	; (800dd80 <tcp_timewait_input+0xd8>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf2:	6879      	ldr	r1, [r7, #4]
 800dcf4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dcf6:	440b      	add	r3, r1
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	dc23      	bgt.n	800dd46 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcfe:	4b21      	ldr	r3, [pc, #132]	; (800dd84 <tcp_timewait_input+0xdc>)
 800dd00:	6819      	ldr	r1, [r3, #0]
 800dd02:	4b21      	ldr	r3, [pc, #132]	; (800dd88 <tcp_timewait_input+0xe0>)
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	461a      	mov	r2, r3
 800dd08:	4b1d      	ldr	r3, [pc, #116]	; (800dd80 <tcp_timewait_input+0xd8>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd0e:	4b1f      	ldr	r3, [pc, #124]	; (800dd8c <tcp_timewait_input+0xe4>)
 800dd10:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd12:	885b      	ldrh	r3, [r3, #2]
 800dd14:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd16:	4a1d      	ldr	r2, [pc, #116]	; (800dd8c <tcp_timewait_input+0xe4>)
 800dd18:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd1a:	8812      	ldrh	r2, [r2, #0]
 800dd1c:	b292      	uxth	r2, r2
 800dd1e:	9202      	str	r2, [sp, #8]
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	4b1b      	ldr	r3, [pc, #108]	; (800dd90 <tcp_timewait_input+0xe8>)
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	4b1b      	ldr	r3, [pc, #108]	; (800dd94 <tcp_timewait_input+0xec>)
 800dd28:	4602      	mov	r2, r0
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f002 fe70 	bl	8010a10 <tcp_rst>
      return;
 800dd30:	e01b      	b.n	800dd6a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dd32:	4b0f      	ldr	r3, [pc, #60]	; (800dd70 <tcp_timewait_input+0xc8>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	f003 0301 	and.w	r3, r3, #1
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d003      	beq.n	800dd46 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dd3e:	4b16      	ldr	r3, [pc, #88]	; (800dd98 <tcp_timewait_input+0xf0>)
 800dd40:	681a      	ldr	r2, [r3, #0]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dd46:	4b10      	ldr	r3, [pc, #64]	; (800dd88 <tcp_timewait_input+0xe0>)
 800dd48:	881b      	ldrh	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00c      	beq.n	800dd68 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	8b5b      	ldrh	r3, [r3, #26]
 800dd52:	f043 0302 	orr.w	r3, r3, #2
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	f002 f8a3 	bl	800fea8 <tcp_output>
  }
  return;
 800dd62:	e001      	b.n	800dd68 <tcp_timewait_input+0xc0>
    return;
 800dd64:	bf00      	nop
 800dd66:	e000      	b.n	800dd6a <tcp_timewait_input+0xc2>
  return;
 800dd68:	bf00      	nop
}
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	20004a34 	.word	0x20004a34
 800dd74:	080185fc 	.word	0x080185fc
 800dd78:	08018814 	.word	0x08018814
 800dd7c:	08018648 	.word	0x08018648
 800dd80:	20004a28 	.word	0x20004a28
 800dd84:	20004a2c 	.word	0x20004a2c
 800dd88:	20004a32 	.word	0x20004a32
 800dd8c:	20004a18 	.word	0x20004a18
 800dd90:	200081f4 	.word	0x200081f4
 800dd94:	200081f8 	.word	0x200081f8
 800dd98:	2000b91c 	.word	0x2000b91c

0800dd9c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dd9c:	b590      	push	{r4, r7, lr}
 800dd9e:	b08d      	sub	sp, #52	; 0x34
 800dda0:	af04      	add	r7, sp, #16
 800dda2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d106      	bne.n	800ddc0 <tcp_process+0x24>
 800ddb2:	4ba5      	ldr	r3, [pc, #660]	; (800e048 <tcp_process+0x2ac>)
 800ddb4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ddb8:	49a4      	ldr	r1, [pc, #656]	; (800e04c <tcp_process+0x2b0>)
 800ddba:	48a5      	ldr	r0, [pc, #660]	; (800e050 <tcp_process+0x2b4>)
 800ddbc:	f008 f962 	bl	8016084 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ddc0:	4ba4      	ldr	r3, [pc, #656]	; (800e054 <tcp_process+0x2b8>)
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d04e      	beq.n	800de6a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	7d1b      	ldrb	r3, [r3, #20]
 800ddd0:	2b02      	cmp	r3, #2
 800ddd2:	d108      	bne.n	800dde6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddd8:	4b9f      	ldr	r3, [pc, #636]	; (800e058 <tcp_process+0x2bc>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d123      	bne.n	800de28 <tcp_process+0x8c>
        acceptable = 1;
 800dde0:	2301      	movs	r3, #1
 800dde2:	76fb      	strb	r3, [r7, #27]
 800dde4:	e020      	b.n	800de28 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddea:	4b9c      	ldr	r3, [pc, #624]	; (800e05c <tcp_process+0x2c0>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d102      	bne.n	800ddf8 <tcp_process+0x5c>
        acceptable = 1;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	76fb      	strb	r3, [r7, #27]
 800ddf6:	e017      	b.n	800de28 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ddf8:	4b98      	ldr	r3, [pc, #608]	; (800e05c <tcp_process+0x2c0>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	2b00      	cmp	r3, #0
 800de04:	db10      	blt.n	800de28 <tcp_process+0x8c>
 800de06:	4b95      	ldr	r3, [pc, #596]	; (800e05c <tcp_process+0x2c0>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de0e:	6879      	ldr	r1, [r7, #4]
 800de10:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de12:	440b      	add	r3, r1
 800de14:	1ad3      	subs	r3, r2, r3
 800de16:	2b00      	cmp	r3, #0
 800de18:	dc06      	bgt.n	800de28 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	8b5b      	ldrh	r3, [r3, #26]
 800de1e:	f043 0302 	orr.w	r3, r3, #2
 800de22:	b29a      	uxth	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800de28:	7efb      	ldrb	r3, [r7, #27]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d01b      	beq.n	800de66 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	7d1b      	ldrb	r3, [r3, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_process+0xa8>
 800de36:	4b84      	ldr	r3, [pc, #528]	; (800e048 <tcp_process+0x2ac>)
 800de38:	f44f 724e 	mov.w	r2, #824	; 0x338
 800de3c:	4988      	ldr	r1, [pc, #544]	; (800e060 <tcp_process+0x2c4>)
 800de3e:	4884      	ldr	r0, [pc, #528]	; (800e050 <tcp_process+0x2b4>)
 800de40:	f008 f920 	bl	8016084 <iprintf>
      recv_flags |= TF_RESET;
 800de44:	4b87      	ldr	r3, [pc, #540]	; (800e064 <tcp_process+0x2c8>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	f043 0308 	orr.w	r3, r3, #8
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	4b85      	ldr	r3, [pc, #532]	; (800e064 <tcp_process+0x2c8>)
 800de50:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	8b5b      	ldrh	r3, [r3, #26]
 800de56:	f023 0301 	bic.w	r3, r3, #1
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800de60:	f06f 030d 	mvn.w	r3, #13
 800de64:	e37a      	b.n	800e55c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	e378      	b.n	800e55c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800de6a:	4b7a      	ldr	r3, [pc, #488]	; (800e054 <tcp_process+0x2b8>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	f003 0302 	and.w	r3, r3, #2
 800de72:	2b00      	cmp	r3, #0
 800de74:	d010      	beq.n	800de98 <tcp_process+0xfc>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	7d1b      	ldrb	r3, [r3, #20]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d00c      	beq.n	800de98 <tcp_process+0xfc>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	2b03      	cmp	r3, #3
 800de84:	d008      	beq.n	800de98 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	8b5b      	ldrh	r3, [r3, #26]
 800de8a:	f043 0302 	orr.w	r3, r3, #2
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	e361      	b.n	800e55c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	8b5b      	ldrh	r3, [r3, #26]
 800de9c:	f003 0310 	and.w	r3, r3, #16
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d103      	bne.n	800deac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dea4:	4b70      	ldr	r3, [pc, #448]	; (800e068 <tcp_process+0x2cc>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 fc2d 	bl	800f71c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	7d1b      	ldrb	r3, [r3, #20]
 800dec6:	3b02      	subs	r3, #2
 800dec8:	2b07      	cmp	r3, #7
 800deca:	f200 8337 	bhi.w	800e53c <tcp_process+0x7a0>
 800dece:	a201      	add	r2, pc, #4	; (adr r2, 800ded4 <tcp_process+0x138>)
 800ded0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded4:	0800def5 	.word	0x0800def5
 800ded8:	0800e125 	.word	0x0800e125
 800dedc:	0800e29d 	.word	0x0800e29d
 800dee0:	0800e2c7 	.word	0x0800e2c7
 800dee4:	0800e3eb 	.word	0x0800e3eb
 800dee8:	0800e29d 	.word	0x0800e29d
 800deec:	0800e477 	.word	0x0800e477
 800def0:	0800e507 	.word	0x0800e507
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800def4:	4b57      	ldr	r3, [pc, #348]	; (800e054 <tcp_process+0x2b8>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 0310 	and.w	r3, r3, #16
 800defc:	2b00      	cmp	r3, #0
 800defe:	f000 80e4 	beq.w	800e0ca <tcp_process+0x32e>
 800df02:	4b54      	ldr	r3, [pc, #336]	; (800e054 <tcp_process+0x2b8>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	f003 0302 	and.w	r3, r3, #2
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 80dd 	beq.w	800e0ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df14:	1c5a      	adds	r2, r3, #1
 800df16:	4b50      	ldr	r3, [pc, #320]	; (800e058 <tcp_process+0x2bc>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	f040 80d5 	bne.w	800e0ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800df20:	4b4e      	ldr	r3, [pc, #312]	; (800e05c <tcp_process+0x2c0>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	1c5a      	adds	r2, r3, #1
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800df32:	4b49      	ldr	r3, [pc, #292]	; (800e058 <tcp_process+0x2bc>)
 800df34:	681a      	ldr	r2, [r3, #0]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800df3a:	4b4c      	ldr	r3, [pc, #304]	; (800e06c <tcp_process+0x2d0>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	89db      	ldrh	r3, [r3, #14]
 800df40:	b29a      	uxth	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800df54:	4b41      	ldr	r3, [pc, #260]	; (800e05c <tcp_process+0x2c0>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	1e5a      	subs	r2, r3, #1
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2204      	movs	r2, #4
 800df62:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4618      	mov	r0, r3
 800df6e:	f006 fcb9 	bl	80148e4 <ip4_route>
 800df72:	4601      	mov	r1, r0
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3304      	adds	r3, #4
 800df78:	461a      	mov	r2, r3
 800df7a:	4620      	mov	r0, r4
 800df7c:	f7ff f88e 	bl	800d09c <tcp_eff_send_mss_netif>
 800df80:	4603      	mov	r3, r0
 800df82:	461a      	mov	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df8c:	009a      	lsls	r2, r3, #2
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df92:	005b      	lsls	r3, r3, #1
 800df94:	f241 111c 	movw	r1, #4380	; 0x111c
 800df98:	428b      	cmp	r3, r1
 800df9a:	bf38      	it	cc
 800df9c:	460b      	movcc	r3, r1
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d204      	bcs.n	800dfac <tcp_process+0x210>
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	e00d      	b.n	800dfc8 <tcp_process+0x22c>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfb0:	005b      	lsls	r3, r3, #1
 800dfb2:	f241 121c 	movw	r2, #4380	; 0x111c
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d904      	bls.n	800dfc4 <tcp_process+0x228>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dfbe:	005b      	lsls	r3, r3, #1
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	e001      	b.n	800dfc8 <tcp_process+0x22c>
 800dfc4:	f241 131c 	movw	r3, #4380	; 0x111c
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d106      	bne.n	800dfe6 <tcp_process+0x24a>
 800dfd8:	4b1b      	ldr	r3, [pc, #108]	; (800e048 <tcp_process+0x2ac>)
 800dfda:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dfde:	4924      	ldr	r1, [pc, #144]	; (800e070 <tcp_process+0x2d4>)
 800dfe0:	481b      	ldr	r0, [pc, #108]	; (800e050 <tcp_process+0x2b4>)
 800dfe2:	f008 f84f 	bl	8016084 <iprintf>
        --pcb->snd_queuelen;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dfec:	3b01      	subs	r3, #1
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dffa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d111      	bne.n	800e026 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e006:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <tcp_process+0x280>
 800e00e:	4b0e      	ldr	r3, [pc, #56]	; (800e048 <tcp_process+0x2ac>)
 800e010:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e014:	4917      	ldr	r1, [pc, #92]	; (800e074 <tcp_process+0x2d8>)
 800e016:	480e      	ldr	r0, [pc, #56]	; (800e050 <tcp_process+0x2b4>)
 800e018:	f008 f834 	bl	8016084 <iprintf>
          pcb->unsent = rseg->next;
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	66da      	str	r2, [r3, #108]	; 0x6c
 800e024:	e003      	b.n	800e02e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e026:	69fb      	ldr	r3, [r7, #28]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e02e:	69f8      	ldr	r0, [r7, #28]
 800e030:	f7fe fd3d 	bl	800caae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11d      	bne.n	800e078 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e042:	861a      	strh	r2, [r3, #48]	; 0x30
 800e044:	e01f      	b.n	800e086 <tcp_process+0x2ea>
 800e046:	bf00      	nop
 800e048:	080185fc 	.word	0x080185fc
 800e04c:	08018834 	.word	0x08018834
 800e050:	08018648 	.word	0x08018648
 800e054:	20004a34 	.word	0x20004a34
 800e058:	20004a2c 	.word	0x20004a2c
 800e05c:	20004a28 	.word	0x20004a28
 800e060:	08018850 	.word	0x08018850
 800e064:	20004a35 	.word	0x20004a35
 800e068:	2000b91c 	.word	0x2000b91c
 800e06c:	20004a18 	.word	0x20004a18
 800e070:	08018870 	.word	0x08018870
 800e074:	08018888 	.word	0x08018888
        } else {
          pcb->rtime = 0;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2200      	movs	r2, #0
 800e07c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00a      	beq.n	800e0a6 <tcp_process+0x30a>
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	6910      	ldr	r0, [r2, #16]
 800e09a:	2200      	movs	r2, #0
 800e09c:	6879      	ldr	r1, [r7, #4]
 800e09e:	4798      	blx	r3
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	76bb      	strb	r3, [r7, #26]
 800e0a4:	e001      	b.n	800e0aa <tcp_process+0x30e>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e0aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e0ae:	f113 0f0d 	cmn.w	r3, #13
 800e0b2:	d102      	bne.n	800e0ba <tcp_process+0x31e>
          return ERR_ABRT;
 800e0b4:	f06f 030c 	mvn.w	r3, #12
 800e0b8:	e250      	b.n	800e55c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	8b5b      	ldrh	r3, [r3, #26]
 800e0be:	f043 0302 	orr.w	r3, r3, #2
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e0c8:	e23a      	b.n	800e540 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e0ca:	4b9d      	ldr	r3, [pc, #628]	; (800e340 <tcp_process+0x5a4>)
 800e0cc:	781b      	ldrb	r3, [r3, #0]
 800e0ce:	f003 0310 	and.w	r3, r3, #16
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 8234 	beq.w	800e540 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0d8:	4b9a      	ldr	r3, [pc, #616]	; (800e344 <tcp_process+0x5a8>)
 800e0da:	6819      	ldr	r1, [r3, #0]
 800e0dc:	4b9a      	ldr	r3, [pc, #616]	; (800e348 <tcp_process+0x5ac>)
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	4b9a      	ldr	r3, [pc, #616]	; (800e34c <tcp_process+0x5b0>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0e8:	4b99      	ldr	r3, [pc, #612]	; (800e350 <tcp_process+0x5b4>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0ec:	885b      	ldrh	r3, [r3, #2]
 800e0ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0f0:	4a97      	ldr	r2, [pc, #604]	; (800e350 <tcp_process+0x5b4>)
 800e0f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0f4:	8812      	ldrh	r2, [r2, #0]
 800e0f6:	b292      	uxth	r2, r2
 800e0f8:	9202      	str	r2, [sp, #8]
 800e0fa:	9301      	str	r3, [sp, #4]
 800e0fc:	4b95      	ldr	r3, [pc, #596]	; (800e354 <tcp_process+0x5b8>)
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	4b95      	ldr	r3, [pc, #596]	; (800e358 <tcp_process+0x5bc>)
 800e102:	4602      	mov	r2, r0
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f002 fc83 	bl	8010a10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e110:	2b05      	cmp	r3, #5
 800e112:	f200 8215 	bhi.w	800e540 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f002 fa4d 	bl	80105bc <tcp_rexmit_rto>
      break;
 800e122:	e20d      	b.n	800e540 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e124:	4b86      	ldr	r3, [pc, #536]	; (800e340 <tcp_process+0x5a4>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 80a1 	beq.w	800e274 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e132:	4b84      	ldr	r3, [pc, #528]	; (800e344 <tcp_process+0x5a8>)
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	3b01      	subs	r3, #1
 800e13e:	2b00      	cmp	r3, #0
 800e140:	db7e      	blt.n	800e240 <tcp_process+0x4a4>
 800e142:	4b80      	ldr	r3, [pc, #512]	; (800e344 <tcp_process+0x5a8>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	dc77      	bgt.n	800e240 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2204      	movs	r2, #4
 800e154:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d102      	bne.n	800e164 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e15e:	23fa      	movs	r3, #250	; 0xfa
 800e160:	76bb      	strb	r3, [r7, #26]
 800e162:	e01d      	b.n	800e1a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e168:	699b      	ldr	r3, [r3, #24]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d106      	bne.n	800e17c <tcp_process+0x3e0>
 800e16e:	4b7b      	ldr	r3, [pc, #492]	; (800e35c <tcp_process+0x5c0>)
 800e170:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e174:	497a      	ldr	r1, [pc, #488]	; (800e360 <tcp_process+0x5c4>)
 800e176:	487b      	ldr	r0, [pc, #492]	; (800e364 <tcp_process+0x5c8>)
 800e178:	f007 ff84 	bl	8016084 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e180:	699b      	ldr	r3, [r3, #24]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <tcp_process+0x400>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e18a:	699b      	ldr	r3, [r3, #24]
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	6910      	ldr	r0, [r2, #16]
 800e190:	2200      	movs	r2, #0
 800e192:	6879      	ldr	r1, [r7, #4]
 800e194:	4798      	blx	r3
 800e196:	4603      	mov	r3, r0
 800e198:	76bb      	strb	r3, [r7, #26]
 800e19a:	e001      	b.n	800e1a0 <tcp_process+0x404>
 800e19c:	23f0      	movs	r3, #240	; 0xf0
 800e19e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e1a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d00a      	beq.n	800e1be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e1a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e1ac:	f113 0f0d 	cmn.w	r3, #13
 800e1b0:	d002      	beq.n	800e1b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7fd ff90 	bl	800c0d8 <tcp_abort>
            }
            return ERR_ABRT;
 800e1b8:	f06f 030c 	mvn.w	r3, #12
 800e1bc:	e1ce      	b.n	800e55c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 fae0 	bl	800e784 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e1c4:	4b68      	ldr	r3, [pc, #416]	; (800e368 <tcp_process+0x5cc>)
 800e1c6:	881b      	ldrh	r3, [r3, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d005      	beq.n	800e1d8 <tcp_process+0x43c>
            recv_acked--;
 800e1cc:	4b66      	ldr	r3, [pc, #408]	; (800e368 <tcp_process+0x5cc>)
 800e1ce:	881b      	ldrh	r3, [r3, #0]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	b29a      	uxth	r2, r3
 800e1d4:	4b64      	ldr	r3, [pc, #400]	; (800e368 <tcp_process+0x5cc>)
 800e1d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1dc:	009a      	lsls	r2, r3, #2
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1e2:	005b      	lsls	r3, r3, #1
 800e1e4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf38      	it	cc
 800e1ec:	460b      	movcc	r3, r1
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	d204      	bcs.n	800e1fc <tcp_process+0x460>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	e00d      	b.n	800e218 <tcp_process+0x47c>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	f241 121c 	movw	r2, #4380	; 0x111c
 800e206:	4293      	cmp	r3, r2
 800e208:	d904      	bls.n	800e214 <tcp_process+0x478>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e20e:	005b      	lsls	r3, r3, #1
 800e210:	b29b      	uxth	r3, r3
 800e212:	e001      	b.n	800e218 <tcp_process+0x47c>
 800e214:	f241 131c 	movw	r3, #4380	; 0x111c
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e21e:	4b53      	ldr	r3, [pc, #332]	; (800e36c <tcp_process+0x5d0>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	f003 0320 	and.w	r3, r3, #32
 800e226:	2b00      	cmp	r3, #0
 800e228:	d037      	beq.n	800e29a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	8b5b      	ldrh	r3, [r3, #26]
 800e22e:	f043 0302 	orr.w	r3, r3, #2
 800e232:	b29a      	uxth	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2207      	movs	r2, #7
 800e23c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e23e:	e02c      	b.n	800e29a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e240:	4b40      	ldr	r3, [pc, #256]	; (800e344 <tcp_process+0x5a8>)
 800e242:	6819      	ldr	r1, [r3, #0]
 800e244:	4b40      	ldr	r3, [pc, #256]	; (800e348 <tcp_process+0x5ac>)
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	461a      	mov	r2, r3
 800e24a:	4b40      	ldr	r3, [pc, #256]	; (800e34c <tcp_process+0x5b0>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e250:	4b3f      	ldr	r3, [pc, #252]	; (800e350 <tcp_process+0x5b4>)
 800e252:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e254:	885b      	ldrh	r3, [r3, #2]
 800e256:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e258:	4a3d      	ldr	r2, [pc, #244]	; (800e350 <tcp_process+0x5b4>)
 800e25a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e25c:	8812      	ldrh	r2, [r2, #0]
 800e25e:	b292      	uxth	r2, r2
 800e260:	9202      	str	r2, [sp, #8]
 800e262:	9301      	str	r3, [sp, #4]
 800e264:	4b3b      	ldr	r3, [pc, #236]	; (800e354 <tcp_process+0x5b8>)
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4b3b      	ldr	r3, [pc, #236]	; (800e358 <tcp_process+0x5bc>)
 800e26a:	4602      	mov	r2, r0
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f002 fbcf 	bl	8010a10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e272:	e167      	b.n	800e544 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e274:	4b32      	ldr	r3, [pc, #200]	; (800e340 <tcp_process+0x5a4>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	f003 0302 	and.w	r3, r3, #2
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	f000 8161 	beq.w	800e544 <tcp_process+0x7a8>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e286:	1e5a      	subs	r2, r3, #1
 800e288:	4b30      	ldr	r3, [pc, #192]	; (800e34c <tcp_process+0x5b0>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	f040 8159 	bne.w	800e544 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f002 f9b4 	bl	8010600 <tcp_rexmit>
      break;
 800e298:	e154      	b.n	800e544 <tcp_process+0x7a8>
 800e29a:	e153      	b.n	800e544 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fa71 	bl	800e784 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e2a2:	4b32      	ldr	r3, [pc, #200]	; (800e36c <tcp_process+0x5d0>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	f003 0320 	and.w	r3, r3, #32
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f000 814c 	beq.w	800e548 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	8b5b      	ldrh	r3, [r3, #26]
 800e2b4:	f043 0302 	orr.w	r3, r3, #2
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2207      	movs	r2, #7
 800e2c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e2c4:	e140      	b.n	800e548 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fa5c 	bl	800e784 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e2cc:	4b27      	ldr	r3, [pc, #156]	; (800e36c <tcp_process+0x5d0>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 0320 	and.w	r3, r3, #32
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d071      	beq.n	800e3bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e2d8:	4b19      	ldr	r3, [pc, #100]	; (800e340 <tcp_process+0x5a4>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f003 0310 	and.w	r3, r3, #16
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d060      	beq.n	800e3a6 <tcp_process+0x60a>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2e8:	4b16      	ldr	r3, [pc, #88]	; (800e344 <tcp_process+0x5a8>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d15a      	bne.n	800e3a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d156      	bne.n	800e3a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8b5b      	ldrh	r3, [r3, #26]
 800e2fc:	f043 0302 	orr.w	r3, r3, #2
 800e300:	b29a      	uxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7fe fdbe 	bl	800ce88 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e30c:	4b18      	ldr	r3, [pc, #96]	; (800e370 <tcp_process+0x5d4>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	429a      	cmp	r2, r3
 800e314:	d105      	bne.n	800e322 <tcp_process+0x586>
 800e316:	4b16      	ldr	r3, [pc, #88]	; (800e370 <tcp_process+0x5d4>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	4a14      	ldr	r2, [pc, #80]	; (800e370 <tcp_process+0x5d4>)
 800e31e:	6013      	str	r3, [r2, #0]
 800e320:	e02e      	b.n	800e380 <tcp_process+0x5e4>
 800e322:	4b13      	ldr	r3, [pc, #76]	; (800e370 <tcp_process+0x5d4>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	e027      	b.n	800e37a <tcp_process+0x5de>
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	429a      	cmp	r2, r3
 800e332:	d11f      	bne.n	800e374 <tcp_process+0x5d8>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	68da      	ldr	r2, [r3, #12]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	60da      	str	r2, [r3, #12]
 800e33c:	e020      	b.n	800e380 <tcp_process+0x5e4>
 800e33e:	bf00      	nop
 800e340:	20004a34 	.word	0x20004a34
 800e344:	20004a2c 	.word	0x20004a2c
 800e348:	20004a32 	.word	0x20004a32
 800e34c:	20004a28 	.word	0x20004a28
 800e350:	20004a18 	.word	0x20004a18
 800e354:	200081f4 	.word	0x200081f4
 800e358:	200081f8 	.word	0x200081f8
 800e35c:	080185fc 	.word	0x080185fc
 800e360:	0801889c 	.word	0x0801889c
 800e364:	08018648 	.word	0x08018648
 800e368:	20004a30 	.word	0x20004a30
 800e36c:	20004a35 	.word	0x20004a35
 800e370:	2000b918 	.word	0x2000b918
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	617b      	str	r3, [r7, #20]
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1d4      	bne.n	800e32a <tcp_process+0x58e>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	60da      	str	r2, [r3, #12]
 800e386:	4b77      	ldr	r3, [pc, #476]	; (800e564 <tcp_process+0x7c8>)
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	220a      	movs	r2, #10
 800e390:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e392:	4b75      	ldr	r3, [pc, #468]	; (800e568 <tcp_process+0x7cc>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60da      	str	r2, [r3, #12]
 800e39a:	4a73      	ldr	r2, [pc, #460]	; (800e568 <tcp_process+0x7cc>)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	f002 fcf8 	bl	8010d94 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e3a4:	e0d2      	b.n	800e54c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	8b5b      	ldrh	r3, [r3, #26]
 800e3aa:	f043 0302 	orr.w	r3, r3, #2
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2208      	movs	r2, #8
 800e3b8:	751a      	strb	r2, [r3, #20]
      break;
 800e3ba:	e0c7      	b.n	800e54c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e3bc:	4b6b      	ldr	r3, [pc, #428]	; (800e56c <tcp_process+0x7d0>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	f000 80c1 	beq.w	800e54c <tcp_process+0x7b0>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e3ce:	4b68      	ldr	r3, [pc, #416]	; (800e570 <tcp_process+0x7d4>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	f040 80ba 	bne.w	800e54c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f040 80b5 	bne.w	800e54c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2206      	movs	r2, #6
 800e3e6:	751a      	strb	r2, [r3, #20]
      break;
 800e3e8:	e0b0      	b.n	800e54c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f9ca 	bl	800e784 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e3f0:	4b60      	ldr	r3, [pc, #384]	; (800e574 <tcp_process+0x7d8>)
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 80a9 	beq.w	800e550 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f043 0302 	orr.w	r3, r3, #2
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f7fe fd3b 	bl	800ce88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e412:	4b59      	ldr	r3, [pc, #356]	; (800e578 <tcp_process+0x7dc>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	687a      	ldr	r2, [r7, #4]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d105      	bne.n	800e428 <tcp_process+0x68c>
 800e41c:	4b56      	ldr	r3, [pc, #344]	; (800e578 <tcp_process+0x7dc>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	4a55      	ldr	r2, [pc, #340]	; (800e578 <tcp_process+0x7dc>)
 800e424:	6013      	str	r3, [r2, #0]
 800e426:	e013      	b.n	800e450 <tcp_process+0x6b4>
 800e428:	4b53      	ldr	r3, [pc, #332]	; (800e578 <tcp_process+0x7dc>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	613b      	str	r3, [r7, #16]
 800e42e:	e00c      	b.n	800e44a <tcp_process+0x6ae>
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	68db      	ldr	r3, [r3, #12]
 800e434:	687a      	ldr	r2, [r7, #4]
 800e436:	429a      	cmp	r2, r3
 800e438:	d104      	bne.n	800e444 <tcp_process+0x6a8>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	68da      	ldr	r2, [r3, #12]
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	60da      	str	r2, [r3, #12]
 800e442:	e005      	b.n	800e450 <tcp_process+0x6b4>
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	613b      	str	r3, [r7, #16]
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1ef      	bne.n	800e430 <tcp_process+0x694>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	60da      	str	r2, [r3, #12]
 800e456:	4b43      	ldr	r3, [pc, #268]	; (800e564 <tcp_process+0x7c8>)
 800e458:	2201      	movs	r2, #1
 800e45a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	220a      	movs	r2, #10
 800e460:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e462:	4b41      	ldr	r3, [pc, #260]	; (800e568 <tcp_process+0x7cc>)
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	60da      	str	r2, [r3, #12]
 800e46a:	4a3f      	ldr	r2, [pc, #252]	; (800e568 <tcp_process+0x7cc>)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6013      	str	r3, [r2, #0]
 800e470:	f002 fc90 	bl	8010d94 <tcp_timer_needed>
      }
      break;
 800e474:	e06c      	b.n	800e550 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f984 	bl	800e784 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e47c:	4b3b      	ldr	r3, [pc, #236]	; (800e56c <tcp_process+0x7d0>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 0310 	and.w	r3, r3, #16
 800e484:	2b00      	cmp	r3, #0
 800e486:	d065      	beq.n	800e554 <tcp_process+0x7b8>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e48c:	4b38      	ldr	r3, [pc, #224]	; (800e570 <tcp_process+0x7d4>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	429a      	cmp	r2, r3
 800e492:	d15f      	bne.n	800e554 <tcp_process+0x7b8>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d15b      	bne.n	800e554 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f7fe fcf3 	bl	800ce88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e4a2:	4b35      	ldr	r3, [pc, #212]	; (800e578 <tcp_process+0x7dc>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	429a      	cmp	r2, r3
 800e4aa:	d105      	bne.n	800e4b8 <tcp_process+0x71c>
 800e4ac:	4b32      	ldr	r3, [pc, #200]	; (800e578 <tcp_process+0x7dc>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68db      	ldr	r3, [r3, #12]
 800e4b2:	4a31      	ldr	r2, [pc, #196]	; (800e578 <tcp_process+0x7dc>)
 800e4b4:	6013      	str	r3, [r2, #0]
 800e4b6:	e013      	b.n	800e4e0 <tcp_process+0x744>
 800e4b8:	4b2f      	ldr	r3, [pc, #188]	; (800e578 <tcp_process+0x7dc>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	e00c      	b.n	800e4da <tcp_process+0x73e>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	68db      	ldr	r3, [r3, #12]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d104      	bne.n	800e4d4 <tcp_process+0x738>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	60da      	str	r2, [r3, #12]
 800e4d2:	e005      	b.n	800e4e0 <tcp_process+0x744>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	68db      	ldr	r3, [r3, #12]
 800e4d8:	60fb      	str	r3, [r7, #12]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1ef      	bne.n	800e4c0 <tcp_process+0x724>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	60da      	str	r2, [r3, #12]
 800e4e6:	4b1f      	ldr	r3, [pc, #124]	; (800e564 <tcp_process+0x7c8>)
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	220a      	movs	r2, #10
 800e4f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e4f2:	4b1d      	ldr	r3, [pc, #116]	; (800e568 <tcp_process+0x7cc>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	60da      	str	r2, [r3, #12]
 800e4fa:	4a1b      	ldr	r2, [pc, #108]	; (800e568 <tcp_process+0x7cc>)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6013      	str	r3, [r2, #0]
 800e500:	f002 fc48 	bl	8010d94 <tcp_timer_needed>
      }
      break;
 800e504:	e026      	b.n	800e554 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 f93c 	bl	800e784 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e50c:	4b17      	ldr	r3, [pc, #92]	; (800e56c <tcp_process+0x7d0>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 0310 	and.w	r3, r3, #16
 800e514:	2b00      	cmp	r3, #0
 800e516:	d01f      	beq.n	800e558 <tcp_process+0x7bc>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e51c:	4b14      	ldr	r3, [pc, #80]	; (800e570 <tcp_process+0x7d4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	429a      	cmp	r2, r3
 800e522:	d119      	bne.n	800e558 <tcp_process+0x7bc>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d115      	bne.n	800e558 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e52c:	4b11      	ldr	r3, [pc, #68]	; (800e574 <tcp_process+0x7d8>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	f043 0310 	orr.w	r3, r3, #16
 800e534:	b2da      	uxtb	r2, r3
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <tcp_process+0x7d8>)
 800e538:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e53a:	e00d      	b.n	800e558 <tcp_process+0x7bc>
    default:
      break;
 800e53c:	bf00      	nop
 800e53e:	e00c      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e540:	bf00      	nop
 800e542:	e00a      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e544:	bf00      	nop
 800e546:	e008      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e548:	bf00      	nop
 800e54a:	e006      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e54c:	bf00      	nop
 800e54e:	e004      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e550:	bf00      	nop
 800e552:	e002      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e554:	bf00      	nop
 800e556:	e000      	b.n	800e55a <tcp_process+0x7be>
      break;
 800e558:	bf00      	nop
  }
  return ERR_OK;
 800e55a:	2300      	movs	r3, #0
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3724      	adds	r7, #36	; 0x24
 800e560:	46bd      	mov	sp, r7
 800e562:	bd90      	pop	{r4, r7, pc}
 800e564:	2000b914 	.word	0x2000b914
 800e568:	2000b928 	.word	0x2000b928
 800e56c:	20004a34 	.word	0x20004a34
 800e570:	20004a2c 	.word	0x20004a2c
 800e574:	20004a35 	.word	0x20004a35
 800e578:	2000b918 	.word	0x2000b918

0800e57c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d106      	bne.n	800e59a <tcp_oos_insert_segment+0x1e>
 800e58c:	4b3b      	ldr	r3, [pc, #236]	; (800e67c <tcp_oos_insert_segment+0x100>)
 800e58e:	f240 421f 	movw	r2, #1055	; 0x41f
 800e592:	493b      	ldr	r1, [pc, #236]	; (800e680 <tcp_oos_insert_segment+0x104>)
 800e594:	483b      	ldr	r0, [pc, #236]	; (800e684 <tcp_oos_insert_segment+0x108>)
 800e596:	f007 fd75 	bl	8016084 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	899b      	ldrh	r3, [r3, #12]
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7fb fc3c 	bl	8009e20 <lwip_htons>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	f003 0301 	and.w	r3, r3, #1
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d028      	beq.n	800e606 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e5b4:	6838      	ldr	r0, [r7, #0]
 800e5b6:	f7fe fa65 	bl	800ca84 <tcp_segs_free>
    next = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	603b      	str	r3, [r7, #0]
 800e5be:	e056      	b.n	800e66e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	899b      	ldrh	r3, [r3, #12]
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fb fc29 	bl	8009e20 <lwip_htons>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	f003 0301 	and.w	r3, r3, #1
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00d      	beq.n	800e5f6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	899b      	ldrh	r3, [r3, #12]
 800e5e0:	b29c      	uxth	r4, r3
 800e5e2:	2001      	movs	r0, #1
 800e5e4:	f7fb fc1c 	bl	8009e20 <lwip_htons>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	4322      	orrs	r2, r4
 800e5f2:	b292      	uxth	r2, r2
 800e5f4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f7fe fa54 	bl	800caae <tcp_seg_free>
    while (next &&
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d00e      	beq.n	800e62a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	891b      	ldrh	r3, [r3, #8]
 800e610:	461a      	mov	r2, r3
 800e612:	4b1d      	ldr	r3, [pc, #116]	; (800e688 <tcp_oos_insert_segment+0x10c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	441a      	add	r2, r3
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	8909      	ldrh	r1, [r1, #8]
 800e622:	440b      	add	r3, r1
 800e624:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e626:	2b00      	cmp	r3, #0
 800e628:	daca      	bge.n	800e5c0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d01e      	beq.n	800e66e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	891b      	ldrh	r3, [r3, #8]
 800e634:	461a      	mov	r2, r3
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <tcp_oos_insert_segment+0x10c>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	441a      	add	r2, r3
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e644:	2b00      	cmp	r3, #0
 800e646:	dd12      	ble.n	800e66e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	b29a      	uxth	r2, r3
 800e650:	4b0d      	ldr	r3, [pc, #52]	; (800e688 <tcp_oos_insert_segment+0x10c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	b29b      	uxth	r3, r3
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	685a      	ldr	r2, [r3, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	891b      	ldrh	r3, [r3, #8]
 800e666:	4619      	mov	r1, r3
 800e668:	4610      	mov	r0, r2
 800e66a:	f7fc fe0b 	bl	800b284 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	601a      	str	r2, [r3, #0]
}
 800e674:	bf00      	nop
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd90      	pop	{r4, r7, pc}
 800e67c:	080185fc 	.word	0x080185fc
 800e680:	080188bc 	.word	0x080188bc
 800e684:	08018648 	.word	0x08018648
 800e688:	20004a28 	.word	0x20004a28

0800e68c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e68c:	b5b0      	push	{r4, r5, r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e69a:	e03e      	b.n	800e71a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e6a6:	697b      	ldr	r3, [r7, #20]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fc fffe 	bl	800b6ac <pbuf_clen>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6ba:	8a7a      	ldrh	r2, [r7, #18]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d906      	bls.n	800e6ce <tcp_free_acked_segments+0x42>
 800e6c0:	4b2a      	ldr	r3, [pc, #168]	; (800e76c <tcp_free_acked_segments+0xe0>)
 800e6c2:	f240 4257 	movw	r2, #1111	; 0x457
 800e6c6:	492a      	ldr	r1, [pc, #168]	; (800e770 <tcp_free_acked_segments+0xe4>)
 800e6c8:	482a      	ldr	r0, [pc, #168]	; (800e774 <tcp_free_acked_segments+0xe8>)
 800e6ca:	f007 fcdb 	bl	8016084 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e6d4:	8a7b      	ldrh	r3, [r7, #18]
 800e6d6:	1ad3      	subs	r3, r2, r3
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	891a      	ldrh	r2, [r3, #8]
 800e6e4:	4b24      	ldr	r3, [pc, #144]	; (800e778 <tcp_free_acked_segments+0xec>)
 800e6e6:	881b      	ldrh	r3, [r3, #0]
 800e6e8:	4413      	add	r3, r2
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	4b22      	ldr	r3, [pc, #136]	; (800e778 <tcp_free_acked_segments+0xec>)
 800e6ee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e6f0:	6978      	ldr	r0, [r7, #20]
 800e6f2:	f7fe f9dc 	bl	800caae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d00c      	beq.n	800e71a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d109      	bne.n	800e71a <tcp_free_acked_segments+0x8e>
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d106      	bne.n	800e71a <tcp_free_acked_segments+0x8e>
 800e70c:	4b17      	ldr	r3, [pc, #92]	; (800e76c <tcp_free_acked_segments+0xe0>)
 800e70e:	f240 4261 	movw	r2, #1121	; 0x461
 800e712:	491a      	ldr	r1, [pc, #104]	; (800e77c <tcp_free_acked_segments+0xf0>)
 800e714:	4817      	ldr	r0, [pc, #92]	; (800e774 <tcp_free_acked_segments+0xe8>)
 800e716:	f007 fcb5 	bl	8016084 <iprintf>
  while (seg_list != NULL &&
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d020      	beq.n	800e762 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	68db      	ldr	r3, [r3, #12]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	4618      	mov	r0, r3
 800e728:	f7fb fb8f 	bl	8009e4a <lwip_htonl>
 800e72c:	4604      	mov	r4, r0
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	891b      	ldrh	r3, [r3, #8]
 800e732:	461d      	mov	r5, r3
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	899b      	ldrh	r3, [r3, #12]
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fb fb6f 	bl	8009e20 <lwip_htons>
 800e742:	4603      	mov	r3, r0
 800e744:	b2db      	uxtb	r3, r3
 800e746:	f003 0303 	and.w	r3, r3, #3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <tcp_free_acked_segments+0xc6>
 800e74e:	2301      	movs	r3, #1
 800e750:	e000      	b.n	800e754 <tcp_free_acked_segments+0xc8>
 800e752:	2300      	movs	r3, #0
 800e754:	442b      	add	r3, r5
 800e756:	18e2      	adds	r2, r4, r3
 800e758:	4b09      	ldr	r3, [pc, #36]	; (800e780 <tcp_free_acked_segments+0xf4>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dd9c      	ble.n	800e69c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e762:	68bb      	ldr	r3, [r7, #8]
}
 800e764:	4618      	mov	r0, r3
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bdb0      	pop	{r4, r5, r7, pc}
 800e76c:	080185fc 	.word	0x080185fc
 800e770:	080188e4 	.word	0x080188e4
 800e774:	08018648 	.word	0x08018648
 800e778:	20004a30 	.word	0x20004a30
 800e77c:	0801890c 	.word	0x0801890c
 800e780:	20004a2c 	.word	0x20004a2c

0800e784 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e784:	b5b0      	push	{r4, r5, r7, lr}
 800e786:	b094      	sub	sp, #80	; 0x50
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e78c:	2300      	movs	r3, #0
 800e78e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d106      	bne.n	800e7a4 <tcp_receive+0x20>
 800e796:	4ba6      	ldr	r3, [pc, #664]	; (800ea30 <tcp_receive+0x2ac>)
 800e798:	f240 427b 	movw	r2, #1147	; 0x47b
 800e79c:	49a5      	ldr	r1, [pc, #660]	; (800ea34 <tcp_receive+0x2b0>)
 800e79e:	48a6      	ldr	r0, [pc, #664]	; (800ea38 <tcp_receive+0x2b4>)
 800e7a0:	f007 fc70 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	7d1b      	ldrb	r3, [r3, #20]
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d806      	bhi.n	800e7ba <tcp_receive+0x36>
 800e7ac:	4ba0      	ldr	r3, [pc, #640]	; (800ea30 <tcp_receive+0x2ac>)
 800e7ae:	f240 427c 	movw	r2, #1148	; 0x47c
 800e7b2:	49a2      	ldr	r1, [pc, #648]	; (800ea3c <tcp_receive+0x2b8>)
 800e7b4:	48a0      	ldr	r0, [pc, #640]	; (800ea38 <tcp_receive+0x2b4>)
 800e7b6:	f007 fc65 	bl	8016084 <iprintf>

  if (flags & TCP_ACK) {
 800e7ba:	4ba1      	ldr	r3, [pc, #644]	; (800ea40 <tcp_receive+0x2bc>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	f003 0310 	and.w	r3, r3, #16
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f000 8263 	beq.w	800ec8e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7d4:	4413      	add	r3, r2
 800e7d6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e7dc:	4b99      	ldr	r3, [pc, #612]	; (800ea44 <tcp_receive+0x2c0>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	db1b      	blt.n	800e81e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e7ea:	4b96      	ldr	r3, [pc, #600]	; (800ea44 <tcp_receive+0x2c0>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d106      	bne.n	800e800 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7f6:	4b94      	ldr	r3, [pc, #592]	; (800ea48 <tcp_receive+0x2c4>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	1ad3      	subs	r3, r2, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	db0e      	blt.n	800e81e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e804:	4b90      	ldr	r3, [pc, #576]	; (800ea48 <tcp_receive+0x2c4>)
 800e806:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e808:	429a      	cmp	r2, r3
 800e80a:	d125      	bne.n	800e858 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e80c:	4b8f      	ldr	r3, [pc, #572]	; (800ea4c <tcp_receive+0x2c8>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	89db      	ldrh	r3, [r3, #14]
 800e812:	b29a      	uxth	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d91c      	bls.n	800e858 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e81e:	4b8b      	ldr	r3, [pc, #556]	; (800ea4c <tcp_receive+0x2c8>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	89db      	ldrh	r3, [r3, #14]
 800e824:	b29a      	uxth	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e838:	429a      	cmp	r2, r3
 800e83a:	d205      	bcs.n	800e848 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e848:	4b7e      	ldr	r3, [pc, #504]	; (800ea44 <tcp_receive+0x2c0>)
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e850:	4b7d      	ldr	r3, [pc, #500]	; (800ea48 <tcp_receive+0x2c4>)
 800e852:	681a      	ldr	r2, [r3, #0]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e858:	4b7b      	ldr	r3, [pc, #492]	; (800ea48 <tcp_receive+0x2c4>)
 800e85a:	681a      	ldr	r2, [r3, #0]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e860:	1ad3      	subs	r3, r2, r3
 800e862:	2b00      	cmp	r3, #0
 800e864:	dc58      	bgt.n	800e918 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e866:	4b7a      	ldr	r3, [pc, #488]	; (800ea50 <tcp_receive+0x2cc>)
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d14b      	bne.n	800e906 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e878:	4413      	add	r3, r2
 800e87a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d142      	bne.n	800e906 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e886:	2b00      	cmp	r3, #0
 800e888:	db3d      	blt.n	800e906 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e88e:	4b6e      	ldr	r3, [pc, #440]	; (800ea48 <tcp_receive+0x2c4>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d137      	bne.n	800e906 <tcp_receive+0x182>
              found_dupack = 1;
 800e896:	2301      	movs	r3, #1
 800e898:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8a0:	2bff      	cmp	r3, #255	; 0xff
 800e8a2:	d007      	beq.n	800e8b4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	d91b      	bls.n	800e8f6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8c8:	4413      	add	r3, r2
 800e8ca:	b29a      	uxth	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d30a      	bcc.n	800e8ec <tcp_receive+0x168>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8e0:	4413      	add	r3, r2
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e8ea:	e004      	b.n	800e8f6 <tcp_receive+0x172>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d902      	bls.n	800e906 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f001 fee9 	bl	80106d8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e908:	2b00      	cmp	r3, #0
 800e90a:	f040 8160 	bne.w	800ebce <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e916:	e15a      	b.n	800ebce <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e918:	4b4b      	ldr	r3, [pc, #300]	; (800ea48 <tcp_receive+0x2c4>)
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	3b01      	subs	r3, #1
 800e924:	2b00      	cmp	r3, #0
 800e926:	f2c0 814d 	blt.w	800ebc4 <tcp_receive+0x440>
 800e92a:	4b47      	ldr	r3, [pc, #284]	; (800ea48 <tcp_receive+0x2c4>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	2b00      	cmp	r3, #0
 800e936:	f300 8145 	bgt.w	800ebc4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	8b5b      	ldrh	r3, [r3, #26]
 800e93e:	f003 0304 	and.w	r3, r3, #4
 800e942:	2b00      	cmp	r3, #0
 800e944:	d010      	beq.n	800e968 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	8b5b      	ldrh	r3, [r3, #26]
 800e94a:	f023 0304 	bic.w	r3, r3, #4
 800e94e:	b29a      	uxth	r2, r3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2200      	movs	r2, #0
 800e964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e976:	10db      	asrs	r3, r3, #3
 800e978:	b21b      	sxth	r3, r3
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e982:	b29b      	uxth	r3, r3
 800e984:	4413      	add	r3, r2
 800e986:	b29b      	uxth	r3, r3
 800e988:	b21a      	sxth	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e990:	4b2d      	ldr	r3, [pc, #180]	; (800ea48 <tcp_receive+0x2c4>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	b29a      	uxth	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e9a8:	4b27      	ldr	r3, [pc, #156]	; (800ea48 <tcp_receive+0x2c4>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	7d1b      	ldrb	r3, [r3, #20]
 800e9b4:	2b03      	cmp	r3, #3
 800e9b6:	f240 8096 	bls.w	800eae6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d244      	bcs.n	800ea54 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	8b5b      	ldrh	r3, [r3, #26]
 800e9ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d001      	beq.n	800e9da <tcp_receive+0x256>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e000      	b.n	800e9dc <tcp_receive+0x258>
 800e9da:	2302      	movs	r3, #2
 800e9dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e9e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9ea:	fb12 f303 	smulbb	r3, r2, r3
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	bf28      	it	cs
 800e9f6:	4613      	movcs	r3, r2
 800e9f8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea02:	4413      	add	r3, r2
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	d309      	bcc.n	800ea24 <tcp_receive+0x2a0>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea18:	4413      	add	r3, r2
 800ea1a:	b29a      	uxth	r2, r3
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea22:	e060      	b.n	800eae6 <tcp_receive+0x362>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea2e:	e05a      	b.n	800eae6 <tcp_receive+0x362>
 800ea30:	080185fc 	.word	0x080185fc
 800ea34:	0801892c 	.word	0x0801892c
 800ea38:	08018648 	.word	0x08018648
 800ea3c:	08018948 	.word	0x08018948
 800ea40:	20004a34 	.word	0x20004a34
 800ea44:	20004a28 	.word	0x20004a28
 800ea48:	20004a2c 	.word	0x20004a2c
 800ea4c:	20004a18 	.word	0x20004a18
 800ea50:	20004a32 	.word	0x20004a32
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea5c:	4413      	add	r3, r2
 800ea5e:	b29a      	uxth	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d309      	bcc.n	800ea7e <tcp_receive+0x2fa>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea72:	4413      	add	r3, r2
 800ea74:	b29a      	uxth	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea7c:	e004      	b.n	800ea88 <tcp_receive+0x304>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d326      	bcc.n	800eae6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eab8:	4413      	add	r3, r2
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d30a      	bcc.n	800eadc <tcp_receive+0x358>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ead0:	4413      	add	r3, r2
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eada:	e004      	b.n	800eae6 <tcp_receive+0x362>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eae2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaee:	4a98      	ldr	r2, [pc, #608]	; (800ed50 <tcp_receive+0x5cc>)
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7ff fdcb 	bl	800e68c <tcp_free_acked_segments>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb04:	4a93      	ldr	r2, [pc, #588]	; (800ed54 <tcp_receive+0x5d0>)
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7ff fdc0 	bl	800e68c <tcp_free_acked_segments>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d104      	bne.n	800eb24 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb20:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb22:	e002      	b.n	800eb2a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d103      	bne.n	800eb40 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800eb46:	4b84      	ldr	r3, [pc, #528]	; (800ed58 <tcp_receive+0x5d4>)
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	8b5b      	ldrh	r3, [r3, #26]
 800eb58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d035      	beq.n	800ebcc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d118      	bne.n	800eb9a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00c      	beq.n	800eb8a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fb f964 	bl	8009e4a <lwip_htonl>
 800eb82:	4603      	mov	r3, r0
 800eb84:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	dc20      	bgt.n	800ebcc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	8b5b      	ldrh	r3, [r3, #26]
 800eb8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eb98:	e018      	b.n	800ebcc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fb f94f 	bl	8009e4a <lwip_htonl>
 800ebac:	4603      	mov	r3, r0
 800ebae:	1ae3      	subs	r3, r4, r3
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	dc0b      	bgt.n	800ebcc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	8b5b      	ldrh	r3, [r3, #26]
 800ebb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebc2:	e003      	b.n	800ebcc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f001 ff75 	bl	8010ab4 <tcp_send_empty_ack>
 800ebca:	e000      	b.n	800ebce <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebcc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d05b      	beq.n	800ec8e <tcp_receive+0x50a>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebda:	4b60      	ldr	r3, [pc, #384]	; (800ed5c <tcp_receive+0x5d8>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da54      	bge.n	800ec8e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ebe4:	4b5e      	ldr	r3, [pc, #376]	; (800ed60 <tcp_receive+0x5dc>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	1ad3      	subs	r3, r2, r3
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ebf8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec02:	10db      	asrs	r3, r3, #3
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec1c:	4413      	add	r3, r2
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	b21a      	sxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ec26:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	da05      	bge.n	800ec3a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ec2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec32:	425b      	negs	r3, r3
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ec3a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec44:	109b      	asrs	r3, r3, #2
 800ec46:	b21b      	sxth	r3, r3
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	1ad3      	subs	r3, r2, r3
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec58:	b29a      	uxth	r2, r3
 800ec5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec5e:	4413      	add	r3, r2
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	b21a      	sxth	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec6e:	10db      	asrs	r3, r3, #3
 800ec70:	b21b      	sxth	r3, r3
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	4413      	add	r3, r2
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	b21a      	sxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ec8e:	4b35      	ldr	r3, [pc, #212]	; (800ed64 <tcp_receive+0x5e0>)
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	f000 84e1 	beq.w	800f65a <tcp_receive+0xed6>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	7d1b      	ldrb	r3, [r3, #20]
 800ec9c:	2b06      	cmp	r3, #6
 800ec9e:	f200 84dc 	bhi.w	800f65a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eca6:	4b30      	ldr	r3, [pc, #192]	; (800ed68 <tcp_receive+0x5e4>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	3b01      	subs	r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f2c0 808e 	blt.w	800edd0 <tcp_receive+0x64c>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecb8:	4b2a      	ldr	r3, [pc, #168]	; (800ed64 <tcp_receive+0x5e0>)
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	4b2a      	ldr	r3, [pc, #168]	; (800ed68 <tcp_receive+0x5e4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	440b      	add	r3, r1
 800ecc4:	1ad3      	subs	r3, r2, r3
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f300 8081 	bgt.w	800edd0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ecce:	4b27      	ldr	r3, [pc, #156]	; (800ed6c <tcp_receive+0x5e8>)
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecd8:	4b23      	ldr	r3, [pc, #140]	; (800ed68 <tcp_receive+0x5e4>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	1ad3      	subs	r3, r2, r3
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ece0:	4b22      	ldr	r3, [pc, #136]	; (800ed6c <tcp_receive+0x5e8>)
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d106      	bne.n	800ecf6 <tcp_receive+0x572>
 800ece8:	4b21      	ldr	r3, [pc, #132]	; (800ed70 <tcp_receive+0x5ec>)
 800ecea:	f240 5294 	movw	r2, #1428	; 0x594
 800ecee:	4921      	ldr	r1, [pc, #132]	; (800ed74 <tcp_receive+0x5f0>)
 800ecf0:	4821      	ldr	r0, [pc, #132]	; (800ed78 <tcp_receive+0x5f4>)
 800ecf2:	f007 f9c7 	bl	8016084 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ecf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d906      	bls.n	800ed0e <tcp_receive+0x58a>
 800ed00:	4b1b      	ldr	r3, [pc, #108]	; (800ed70 <tcp_receive+0x5ec>)
 800ed02:	f240 5295 	movw	r2, #1429	; 0x595
 800ed06:	491d      	ldr	r1, [pc, #116]	; (800ed7c <tcp_receive+0x5f8>)
 800ed08:	481b      	ldr	r0, [pc, #108]	; (800ed78 <tcp_receive+0x5f4>)
 800ed0a:	f007 f9bb 	bl	8016084 <iprintf>
      off = (u16_t)off32;
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ed14:	4b15      	ldr	r3, [pc, #84]	; (800ed6c <tcp_receive+0x5e8>)
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	891b      	ldrh	r3, [r3, #8]
 800ed1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d906      	bls.n	800ed30 <tcp_receive+0x5ac>
 800ed22:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <tcp_receive+0x5ec>)
 800ed24:	f240 5297 	movw	r2, #1431	; 0x597
 800ed28:	4915      	ldr	r1, [pc, #84]	; (800ed80 <tcp_receive+0x5fc>)
 800ed2a:	4813      	ldr	r0, [pc, #76]	; (800ed78 <tcp_receive+0x5f4>)
 800ed2c:	f007 f9aa 	bl	8016084 <iprintf>
      inseg.len -= off;
 800ed30:	4b0e      	ldr	r3, [pc, #56]	; (800ed6c <tcp_receive+0x5e8>)
 800ed32:	891a      	ldrh	r2, [r3, #8]
 800ed34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	b29a      	uxth	r2, r3
 800ed3c:	4b0b      	ldr	r3, [pc, #44]	; (800ed6c <tcp_receive+0x5e8>)
 800ed3e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ed40:	4b0a      	ldr	r3, [pc, #40]	; (800ed6c <tcp_receive+0x5e8>)
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	891a      	ldrh	r2, [r3, #8]
 800ed46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ed4e:	e029      	b.n	800eda4 <tcp_receive+0x620>
 800ed50:	08018964 	.word	0x08018964
 800ed54:	0801896c 	.word	0x0801896c
 800ed58:	20004a30 	.word	0x20004a30
 800ed5c:	20004a2c 	.word	0x20004a2c
 800ed60:	2000b91c 	.word	0x2000b91c
 800ed64:	20004a32 	.word	0x20004a32
 800ed68:	20004a28 	.word	0x20004a28
 800ed6c:	20004a08 	.word	0x20004a08
 800ed70:	080185fc 	.word	0x080185fc
 800ed74:	08018974 	.word	0x08018974
 800ed78:	08018648 	.word	0x08018648
 800ed7c:	08018984 	.word	0x08018984
 800ed80:	08018994 	.word	0x08018994
        off -= p->len;
 800ed84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed86:	895b      	ldrh	r3, [r3, #10]
 800ed88:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ed92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed94:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ed96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ed98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ed9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800eda4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda6:	895b      	ldrh	r3, [r3, #10]
 800eda8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edac:	429a      	cmp	r2, r3
 800edae:	d8e9      	bhi.n	800ed84 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800edb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edb4:	4619      	mov	r1, r3
 800edb6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800edb8:	f7fc fb64 	bl	800b484 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc0:	4a91      	ldr	r2, [pc, #580]	; (800f008 <tcp_receive+0x884>)
 800edc2:	6013      	str	r3, [r2, #0]
 800edc4:	4b91      	ldr	r3, [pc, #580]	; (800f00c <tcp_receive+0x888>)
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	4a8f      	ldr	r2, [pc, #572]	; (800f008 <tcp_receive+0x884>)
 800edca:	6812      	ldr	r2, [r2, #0]
 800edcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800edce:	e00d      	b.n	800edec <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800edd0:	4b8d      	ldr	r3, [pc, #564]	; (800f008 <tcp_receive+0x884>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edd8:	1ad3      	subs	r3, r2, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da06      	bge.n	800edec <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	8b5b      	ldrh	r3, [r3, #26]
 800ede2:	f043 0302 	orr.w	r3, r3, #2
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800edec:	4b86      	ldr	r3, [pc, #536]	; (800f008 <tcp_receive+0x884>)
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f2c0 842a 	blt.w	800f650 <tcp_receive+0xecc>
 800edfc:	4b82      	ldr	r3, [pc, #520]	; (800f008 <tcp_receive+0x884>)
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee08:	440b      	add	r3, r1
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f300 841e 	bgt.w	800f650 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee18:	4b7b      	ldr	r3, [pc, #492]	; (800f008 <tcp_receive+0x884>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	f040 829a 	bne.w	800f356 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ee22:	4b7a      	ldr	r3, [pc, #488]	; (800f00c <tcp_receive+0x888>)
 800ee24:	891c      	ldrh	r4, [r3, #8]
 800ee26:	4b79      	ldr	r3, [pc, #484]	; (800f00c <tcp_receive+0x888>)
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	899b      	ldrh	r3, [r3, #12]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fa fff6 	bl	8009e20 <lwip_htons>
 800ee34:	4603      	mov	r3, r0
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	f003 0303 	and.w	r3, r3, #3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d001      	beq.n	800ee44 <tcp_receive+0x6c0>
 800ee40:	2301      	movs	r3, #1
 800ee42:	e000      	b.n	800ee46 <tcp_receive+0x6c2>
 800ee44:	2300      	movs	r3, #0
 800ee46:	4423      	add	r3, r4
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	4b71      	ldr	r3, [pc, #452]	; (800f010 <tcp_receive+0x88c>)
 800ee4c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee52:	4b6f      	ldr	r3, [pc, #444]	; (800f010 <tcp_receive+0x88c>)
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d275      	bcs.n	800ef46 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee5a:	4b6c      	ldr	r3, [pc, #432]	; (800f00c <tcp_receive+0x888>)
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	899b      	ldrh	r3, [r3, #12]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fa ffdc 	bl	8009e20 <lwip_htons>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d01f      	beq.n	800eeb4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ee74:	4b65      	ldr	r3, [pc, #404]	; (800f00c <tcp_receive+0x888>)
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	899b      	ldrh	r3, [r3, #12]
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	b21b      	sxth	r3, r3
 800ee7e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ee82:	b21c      	sxth	r4, r3
 800ee84:	4b61      	ldr	r3, [pc, #388]	; (800f00c <tcp_receive+0x888>)
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	899b      	ldrh	r3, [r3, #12]
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fa ffc7 	bl	8009e20 <lwip_htons>
 800ee92:	4603      	mov	r3, r0
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7fa ffbe 	bl	8009e20 <lwip_htons>
 800eea4:	4603      	mov	r3, r0
 800eea6:	b21b      	sxth	r3, r3
 800eea8:	4323      	orrs	r3, r4
 800eeaa:	b21a      	sxth	r2, r3
 800eeac:	4b57      	ldr	r3, [pc, #348]	; (800f00c <tcp_receive+0x888>)
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	b292      	uxth	r2, r2
 800eeb2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eeb8:	4b54      	ldr	r3, [pc, #336]	; (800f00c <tcp_receive+0x888>)
 800eeba:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eebc:	4b53      	ldr	r3, [pc, #332]	; (800f00c <tcp_receive+0x888>)
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	899b      	ldrh	r3, [r3, #12]
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fa ffab 	bl	8009e20 <lwip_htons>
 800eeca:	4603      	mov	r3, r0
 800eecc:	b2db      	uxtb	r3, r3
 800eece:	f003 0302 	and.w	r3, r3, #2
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d005      	beq.n	800eee2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800eed6:	4b4d      	ldr	r3, [pc, #308]	; (800f00c <tcp_receive+0x888>)
 800eed8:	891b      	ldrh	r3, [r3, #8]
 800eeda:	3b01      	subs	r3, #1
 800eedc:	b29a      	uxth	r2, r3
 800eede:	4b4b      	ldr	r3, [pc, #300]	; (800f00c <tcp_receive+0x888>)
 800eee0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eee2:	4b4a      	ldr	r3, [pc, #296]	; (800f00c <tcp_receive+0x888>)
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	4a49      	ldr	r2, [pc, #292]	; (800f00c <tcp_receive+0x888>)
 800eee8:	8912      	ldrh	r2, [r2, #8]
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fc f9c9 	bl	800b284 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eef2:	4b46      	ldr	r3, [pc, #280]	; (800f00c <tcp_receive+0x888>)
 800eef4:	891c      	ldrh	r4, [r3, #8]
 800eef6:	4b45      	ldr	r3, [pc, #276]	; (800f00c <tcp_receive+0x888>)
 800eef8:	68db      	ldr	r3, [r3, #12]
 800eefa:	899b      	ldrh	r3, [r3, #12]
 800eefc:	b29b      	uxth	r3, r3
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fa ff8e 	bl	8009e20 <lwip_htons>
 800ef04:	4603      	mov	r3, r0
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	f003 0303 	and.w	r3, r3, #3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <tcp_receive+0x790>
 800ef10:	2301      	movs	r3, #1
 800ef12:	e000      	b.n	800ef16 <tcp_receive+0x792>
 800ef14:	2300      	movs	r3, #0
 800ef16:	4423      	add	r3, r4
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	4b3d      	ldr	r3, [pc, #244]	; (800f010 <tcp_receive+0x88c>)
 800ef1c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef1e:	4b3c      	ldr	r3, [pc, #240]	; (800f010 <tcp_receive+0x88c>)
 800ef20:	881b      	ldrh	r3, [r3, #0]
 800ef22:	461a      	mov	r2, r3
 800ef24:	4b38      	ldr	r3, [pc, #224]	; (800f008 <tcp_receive+0x884>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	441a      	add	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef2e:	6879      	ldr	r1, [r7, #4]
 800ef30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef32:	440b      	add	r3, r1
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d006      	beq.n	800ef46 <tcp_receive+0x7c2>
 800ef38:	4b36      	ldr	r3, [pc, #216]	; (800f014 <tcp_receive+0x890>)
 800ef3a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800ef3e:	4936      	ldr	r1, [pc, #216]	; (800f018 <tcp_receive+0x894>)
 800ef40:	4836      	ldr	r0, [pc, #216]	; (800f01c <tcp_receive+0x898>)
 800ef42:	f007 f89f 	bl	8016084 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	f000 80e7 	beq.w	800f11e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ef50:	4b2e      	ldr	r3, [pc, #184]	; (800f00c <tcp_receive+0x888>)
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	899b      	ldrh	r3, [r3, #12]
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7fa ff61 	bl	8009e20 <lwip_htons>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d010      	beq.n	800ef8c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ef6a:	e00a      	b.n	800ef82 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef70:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ef7c:	68f8      	ldr	r0, [r7, #12]
 800ef7e:	f7fd fd96 	bl	800caae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d1f0      	bne.n	800ef6c <tcp_receive+0x7e8>
 800ef8a:	e0c8      	b.n	800f11e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef90:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ef92:	e052      	b.n	800f03a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ef94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	899b      	ldrh	r3, [r3, #12]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fa ff3f 	bl	8009e20 <lwip_htons>
 800efa2:	4603      	mov	r3, r0
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d03d      	beq.n	800f02a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800efae:	4b17      	ldr	r3, [pc, #92]	; (800f00c <tcp_receive+0x888>)
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	899b      	ldrh	r3, [r3, #12]
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fa ff32 	bl	8009e20 <lwip_htons>
 800efbc:	4603      	mov	r3, r0
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d130      	bne.n	800f02a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800efc8:	4b10      	ldr	r3, [pc, #64]	; (800f00c <tcp_receive+0x888>)
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	899b      	ldrh	r3, [r3, #12]
 800efce:	b29c      	uxth	r4, r3
 800efd0:	2001      	movs	r0, #1
 800efd2:	f7fa ff25 	bl	8009e20 <lwip_htons>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461a      	mov	r2, r3
 800efda:	4b0c      	ldr	r3, [pc, #48]	; (800f00c <tcp_receive+0x888>)
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	4322      	orrs	r2, r4
 800efe0:	b292      	uxth	r2, r2
 800efe2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800efe4:	4b09      	ldr	r3, [pc, #36]	; (800f00c <tcp_receive+0x888>)
 800efe6:	891c      	ldrh	r4, [r3, #8]
 800efe8:	4b08      	ldr	r3, [pc, #32]	; (800f00c <tcp_receive+0x888>)
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	899b      	ldrh	r3, [r3, #12]
 800efee:	b29b      	uxth	r3, r3
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7fa ff15 	bl	8009e20 <lwip_htons>
 800eff6:	4603      	mov	r3, r0
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	f003 0303 	and.w	r3, r3, #3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00e      	beq.n	800f020 <tcp_receive+0x89c>
 800f002:	2301      	movs	r3, #1
 800f004:	e00d      	b.n	800f022 <tcp_receive+0x89e>
 800f006:	bf00      	nop
 800f008:	20004a28 	.word	0x20004a28
 800f00c:	20004a08 	.word	0x20004a08
 800f010:	20004a32 	.word	0x20004a32
 800f014:	080185fc 	.word	0x080185fc
 800f018:	080189a4 	.word	0x080189a4
 800f01c:	08018648 	.word	0x08018648
 800f020:	2300      	movs	r3, #0
 800f022:	4423      	add	r3, r4
 800f024:	b29a      	uxth	r2, r3
 800f026:	4b98      	ldr	r3, [pc, #608]	; (800f288 <tcp_receive+0xb04>)
 800f028:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f034:	6938      	ldr	r0, [r7, #16]
 800f036:	f7fd fd3a 	bl	800caae <tcp_seg_free>
            while (next &&
 800f03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00e      	beq.n	800f05e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f040:	4b91      	ldr	r3, [pc, #580]	; (800f288 <tcp_receive+0xb04>)
 800f042:	881b      	ldrh	r3, [r3, #0]
 800f044:	461a      	mov	r2, r3
 800f046:	4b91      	ldr	r3, [pc, #580]	; (800f28c <tcp_receive+0xb08>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	441a      	add	r2, r3
 800f04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f054:	8909      	ldrh	r1, [r1, #8]
 800f056:	440b      	add	r3, r1
 800f058:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	da9a      	bge.n	800ef94 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f060:	2b00      	cmp	r3, #0
 800f062:	d059      	beq.n	800f118 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f064:	4b88      	ldr	r3, [pc, #544]	; (800f288 <tcp_receive+0xb04>)
 800f066:	881b      	ldrh	r3, [r3, #0]
 800f068:	461a      	mov	r2, r3
 800f06a:	4b88      	ldr	r3, [pc, #544]	; (800f28c <tcp_receive+0xb08>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	441a      	add	r2, r3
 800f070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f072:	68db      	ldr	r3, [r3, #12]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f078:	2b00      	cmp	r3, #0
 800f07a:	dd4d      	ble.n	800f118 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f07e:	68db      	ldr	r3, [r3, #12]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	b29a      	uxth	r2, r3
 800f084:	4b81      	ldr	r3, [pc, #516]	; (800f28c <tcp_receive+0xb08>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	b29b      	uxth	r3, r3
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	b29a      	uxth	r2, r3
 800f08e:	4b80      	ldr	r3, [pc, #512]	; (800f290 <tcp_receive+0xb0c>)
 800f090:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f092:	4b7f      	ldr	r3, [pc, #508]	; (800f290 <tcp_receive+0xb0c>)
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	899b      	ldrh	r3, [r3, #12]
 800f098:	b29b      	uxth	r3, r3
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fa fec0 	bl	8009e20 <lwip_htons>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	f003 0302 	and.w	r3, r3, #2
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d005      	beq.n	800f0b8 <tcp_receive+0x934>
                inseg.len -= 1;
 800f0ac:	4b78      	ldr	r3, [pc, #480]	; (800f290 <tcp_receive+0xb0c>)
 800f0ae:	891b      	ldrh	r3, [r3, #8]
 800f0b0:	3b01      	subs	r3, #1
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	4b76      	ldr	r3, [pc, #472]	; (800f290 <tcp_receive+0xb0c>)
 800f0b6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f0b8:	4b75      	ldr	r3, [pc, #468]	; (800f290 <tcp_receive+0xb0c>)
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	4a74      	ldr	r2, [pc, #464]	; (800f290 <tcp_receive+0xb0c>)
 800f0be:	8912      	ldrh	r2, [r2, #8]
 800f0c0:	4611      	mov	r1, r2
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fc f8de 	bl	800b284 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f0c8:	4b71      	ldr	r3, [pc, #452]	; (800f290 <tcp_receive+0xb0c>)
 800f0ca:	891c      	ldrh	r4, [r3, #8]
 800f0cc:	4b70      	ldr	r3, [pc, #448]	; (800f290 <tcp_receive+0xb0c>)
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	899b      	ldrh	r3, [r3, #12]
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fa fea3 	bl	8009e20 <lwip_htons>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	f003 0303 	and.w	r3, r3, #3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d001      	beq.n	800f0ea <tcp_receive+0x966>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	e000      	b.n	800f0ec <tcp_receive+0x968>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	4423      	add	r3, r4
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	4b65      	ldr	r3, [pc, #404]	; (800f288 <tcp_receive+0xb04>)
 800f0f2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f0f4:	4b64      	ldr	r3, [pc, #400]	; (800f288 <tcp_receive+0xb04>)
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4b64      	ldr	r3, [pc, #400]	; (800f28c <tcp_receive+0xb08>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	441a      	add	r2, r3
 800f100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d006      	beq.n	800f118 <tcp_receive+0x994>
 800f10a:	4b62      	ldr	r3, [pc, #392]	; (800f294 <tcp_receive+0xb10>)
 800f10c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f110:	4961      	ldr	r1, [pc, #388]	; (800f298 <tcp_receive+0xb14>)
 800f112:	4862      	ldr	r0, [pc, #392]	; (800f29c <tcp_receive+0xb18>)
 800f114:	f006 ffb6 	bl	8016084 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f11c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f11e:	4b5a      	ldr	r3, [pc, #360]	; (800f288 <tcp_receive+0xb04>)
 800f120:	881b      	ldrh	r3, [r3, #0]
 800f122:	461a      	mov	r2, r3
 800f124:	4b59      	ldr	r3, [pc, #356]	; (800f28c <tcp_receive+0xb08>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	441a      	add	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f132:	4b55      	ldr	r3, [pc, #340]	; (800f288 <tcp_receive+0xb04>)
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d206      	bcs.n	800f148 <tcp_receive+0x9c4>
 800f13a:	4b56      	ldr	r3, [pc, #344]	; (800f294 <tcp_receive+0xb10>)
 800f13c:	f240 6207 	movw	r2, #1543	; 0x607
 800f140:	4957      	ldr	r1, [pc, #348]	; (800f2a0 <tcp_receive+0xb1c>)
 800f142:	4856      	ldr	r0, [pc, #344]	; (800f29c <tcp_receive+0xb18>)
 800f144:	f006 ff9e 	bl	8016084 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f14c:	4b4e      	ldr	r3, [pc, #312]	; (800f288 <tcp_receive+0xb04>)
 800f14e:	881b      	ldrh	r3, [r3, #0]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	b29a      	uxth	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f7fc ffc9 	bl	800c0f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f15e:	4b4c      	ldr	r3, [pc, #304]	; (800f290 <tcp_receive+0xb0c>)
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	891b      	ldrh	r3, [r3, #8]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d006      	beq.n	800f176 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f168:	4b49      	ldr	r3, [pc, #292]	; (800f290 <tcp_receive+0xb0c>)
 800f16a:	685b      	ldr	r3, [r3, #4]
 800f16c:	4a4d      	ldr	r2, [pc, #308]	; (800f2a4 <tcp_receive+0xb20>)
 800f16e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f170:	4b47      	ldr	r3, [pc, #284]	; (800f290 <tcp_receive+0xb0c>)
 800f172:	2200      	movs	r2, #0
 800f174:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f176:	4b46      	ldr	r3, [pc, #280]	; (800f290 <tcp_receive+0xb0c>)
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	899b      	ldrh	r3, [r3, #12]
 800f17c:	b29b      	uxth	r3, r3
 800f17e:	4618      	mov	r0, r3
 800f180:	f7fa fe4e 	bl	8009e20 <lwip_htons>
 800f184:	4603      	mov	r3, r0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	f003 0301 	and.w	r3, r3, #1
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f000 80b8 	beq.w	800f302 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f192:	4b45      	ldr	r3, [pc, #276]	; (800f2a8 <tcp_receive+0xb24>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	f043 0320 	orr.w	r3, r3, #32
 800f19a:	b2da      	uxtb	r2, r3
 800f19c:	4b42      	ldr	r3, [pc, #264]	; (800f2a8 <tcp_receive+0xb24>)
 800f19e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f1a0:	e0af      	b.n	800f302 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1a6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1ac:	68db      	ldr	r3, [r3, #12]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	4a36      	ldr	r2, [pc, #216]	; (800f28c <tcp_receive+0xb08>)
 800f1b2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	891b      	ldrh	r3, [r3, #8]
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	68db      	ldr	r3, [r3, #12]
 800f1be:	899b      	ldrh	r3, [r3, #12]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f7fa fe2c 	bl	8009e20 <lwip_htons>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	f003 0303 	and.w	r3, r3, #3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <tcp_receive+0xa54>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e000      	b.n	800f1da <tcp_receive+0xa56>
 800f1d8:	2300      	movs	r3, #0
 800f1da:	191a      	adds	r2, r3, r4
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e0:	441a      	add	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1ea:	461c      	mov	r4, r3
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	891b      	ldrh	r3, [r3, #8]
 800f1f0:	461d      	mov	r5, r3
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	899b      	ldrh	r3, [r3, #12]
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fa fe10 	bl	8009e20 <lwip_htons>
 800f200:	4603      	mov	r3, r0
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <tcp_receive+0xa8c>
 800f20c:	2301      	movs	r3, #1
 800f20e:	e000      	b.n	800f212 <tcp_receive+0xa8e>
 800f210:	2300      	movs	r3, #0
 800f212:	442b      	add	r3, r5
 800f214:	429c      	cmp	r4, r3
 800f216:	d206      	bcs.n	800f226 <tcp_receive+0xaa2>
 800f218:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <tcp_receive+0xb10>)
 800f21a:	f240 622b 	movw	r2, #1579	; 0x62b
 800f21e:	4923      	ldr	r1, [pc, #140]	; (800f2ac <tcp_receive+0xb28>)
 800f220:	481e      	ldr	r0, [pc, #120]	; (800f29c <tcp_receive+0xb18>)
 800f222:	f006 ff2f 	bl	8016084 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	891b      	ldrh	r3, [r3, #8]
 800f22a:	461c      	mov	r4, r3
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	899b      	ldrh	r3, [r3, #12]
 800f232:	b29b      	uxth	r3, r3
 800f234:	4618      	mov	r0, r3
 800f236:	f7fa fdf3 	bl	8009e20 <lwip_htons>
 800f23a:	4603      	mov	r3, r0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	f003 0303 	and.w	r3, r3, #3
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <tcp_receive+0xac6>
 800f246:	2301      	movs	r3, #1
 800f248:	e000      	b.n	800f24c <tcp_receive+0xac8>
 800f24a:	2300      	movs	r3, #0
 800f24c:	1919      	adds	r1, r3, r4
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f252:	b28b      	uxth	r3, r1
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	b29a      	uxth	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f7fc ff47 	bl	800c0f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	891b      	ldrh	r3, [r3, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d028      	beq.n	800f2be <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f26c:	4b0d      	ldr	r3, [pc, #52]	; (800f2a4 <tcp_receive+0xb20>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d01d      	beq.n	800f2b0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f274:	4b0b      	ldr	r3, [pc, #44]	; (800f2a4 <tcp_receive+0xb20>)
 800f276:	681a      	ldr	r2, [r3, #0]
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	685b      	ldr	r3, [r3, #4]
 800f27c:	4619      	mov	r1, r3
 800f27e:	4610      	mov	r0, r2
 800f280:	f7fc fa54 	bl	800b72c <pbuf_cat>
 800f284:	e018      	b.n	800f2b8 <tcp_receive+0xb34>
 800f286:	bf00      	nop
 800f288:	20004a32 	.word	0x20004a32
 800f28c:	20004a28 	.word	0x20004a28
 800f290:	20004a08 	.word	0x20004a08
 800f294:	080185fc 	.word	0x080185fc
 800f298:	080189dc 	.word	0x080189dc
 800f29c:	08018648 	.word	0x08018648
 800f2a0:	08018a18 	.word	0x08018a18
 800f2a4:	20004a38 	.word	0x20004a38
 800f2a8:	20004a35 	.word	0x20004a35
 800f2ac:	08018a38 	.word	0x08018a38
            } else {
              recv_data = cseg->p;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	4a70      	ldr	r2, [pc, #448]	; (800f478 <tcp_receive+0xcf4>)
 800f2b6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	899b      	ldrh	r3, [r3, #12]
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fa fdaa 	bl	8009e20 <lwip_htons>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00d      	beq.n	800f2f4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f2d8:	4b68      	ldr	r3, [pc, #416]	; (800f47c <tcp_receive+0xcf8>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f043 0320 	orr.w	r3, r3, #32
 800f2e0:	b2da      	uxtb	r2, r3
 800f2e2:	4b66      	ldr	r3, [pc, #408]	; (800f47c <tcp_receive+0xcf8>)
 800f2e4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	7d1b      	ldrb	r3, [r3, #20]
 800f2ea:	2b04      	cmp	r3, #4
 800f2ec:	d102      	bne.n	800f2f4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2207      	movs	r2, #7
 800f2f2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f2fc:	68b8      	ldr	r0, [r7, #8]
 800f2fe:	f7fd fbd6 	bl	800caae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f306:	2b00      	cmp	r3, #0
 800f308:	d008      	beq.n	800f31c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f30e:	68db      	ldr	r3, [r3, #12]
 800f310:	685a      	ldr	r2, [r3, #4]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f316:	429a      	cmp	r2, r3
 800f318:	f43f af43 	beq.w	800f1a2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8b5b      	ldrh	r3, [r3, #26]
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00e      	beq.n	800f346 <tcp_receive+0xbc2>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	8b5b      	ldrh	r3, [r3, #26]
 800f32c:	f023 0301 	bic.w	r3, r3, #1
 800f330:	b29a      	uxth	r2, r3
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	835a      	strh	r2, [r3, #26]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	8b5b      	ldrh	r3, [r3, #26]
 800f33a:	f043 0302 	orr.w	r3, r3, #2
 800f33e:	b29a      	uxth	r2, r3
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f344:	e188      	b.n	800f658 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8b5b      	ldrh	r3, [r3, #26]
 800f34a:	f043 0301 	orr.w	r3, r3, #1
 800f34e:	b29a      	uxth	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f354:	e180      	b.n	800f658 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f35e:	4848      	ldr	r0, [pc, #288]	; (800f480 <tcp_receive+0xcfc>)
 800f360:	f7fd fbbe 	bl	800cae0 <tcp_seg_copy>
 800f364:	4602      	mov	r2, r0
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	675a      	str	r2, [r3, #116]	; 0x74
 800f36a:	e16d      	b.n	800f648 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f36c:	2300      	movs	r3, #0
 800f36e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f374:	63bb      	str	r3, [r7, #56]	; 0x38
 800f376:	e157      	b.n	800f628 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	685a      	ldr	r2, [r3, #4]
 800f37e:	4b41      	ldr	r3, [pc, #260]	; (800f484 <tcp_receive+0xd00>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d11d      	bne.n	800f3c2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f386:	4b3e      	ldr	r3, [pc, #248]	; (800f480 <tcp_receive+0xcfc>)
 800f388:	891a      	ldrh	r2, [r3, #8]
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	891b      	ldrh	r3, [r3, #8]
 800f38e:	429a      	cmp	r2, r3
 800f390:	f240 814f 	bls.w	800f632 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f394:	483a      	ldr	r0, [pc, #232]	; (800f480 <tcp_receive+0xcfc>)
 800f396:	f7fd fba3 	bl	800cae0 <tcp_seg_copy>
 800f39a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 8149 	beq.w	800f636 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d003      	beq.n	800f3b2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ac:	697a      	ldr	r2, [r7, #20]
 800f3ae:	601a      	str	r2, [r3, #0]
 800f3b0:	e002      	b.n	800f3b8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	697a      	ldr	r2, [r7, #20]
 800f3b6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f3b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3ba:	6978      	ldr	r0, [r7, #20]
 800f3bc:	f7ff f8de 	bl	800e57c <tcp_oos_insert_segment>
                }
                break;
 800f3c0:	e139      	b.n	800f636 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d117      	bne.n	800f3f8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f3c8:	4b2e      	ldr	r3, [pc, #184]	; (800f484 <tcp_receive+0xd00>)
 800f3ca:	681a      	ldr	r2, [r3, #0]
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	1ad3      	subs	r3, r2, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	da57      	bge.n	800f488 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f3d8:	4829      	ldr	r0, [pc, #164]	; (800f480 <tcp_receive+0xcfc>)
 800f3da:	f7fd fb81 	bl	800cae0 <tcp_seg_copy>
 800f3de:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 8129 	beq.w	800f63a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	69ba      	ldr	r2, [r7, #24]
 800f3ec:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f3ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f3f0:	69b8      	ldr	r0, [r7, #24]
 800f3f2:	f7ff f8c3 	bl	800e57c <tcp_oos_insert_segment>
                  }
                  break;
 800f3f6:	e120      	b.n	800f63a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f3f8:	4b22      	ldr	r3, [pc, #136]	; (800f484 <tcp_receive+0xd00>)
 800f3fa:	681a      	ldr	r2, [r3, #0]
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fe:	68db      	ldr	r3, [r3, #12]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	3b01      	subs	r3, #1
 800f406:	2b00      	cmp	r3, #0
 800f408:	db3e      	blt.n	800f488 <tcp_receive+0xd04>
 800f40a:	4b1e      	ldr	r3, [pc, #120]	; (800f484 <tcp_receive+0xd00>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	1ad3      	subs	r3, r2, r3
 800f416:	3301      	adds	r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc35      	bgt.n	800f488 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f41c:	4818      	ldr	r0, [pc, #96]	; (800f480 <tcp_receive+0xcfc>)
 800f41e:	f7fd fb5f 	bl	800cae0 <tcp_seg_copy>
 800f422:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	2b00      	cmp	r3, #0
 800f428:	f000 8109 	beq.w	800f63e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f42e:	68db      	ldr	r3, [r3, #12]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f434:	8912      	ldrh	r2, [r2, #8]
 800f436:	441a      	add	r2, r3
 800f438:	4b12      	ldr	r3, [pc, #72]	; (800f484 <tcp_receive+0xd00>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	dd12      	ble.n	800f468 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f442:	4b10      	ldr	r3, [pc, #64]	; (800f484 <tcp_receive+0xd00>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	b29a      	uxth	r2, r3
 800f448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	b29b      	uxth	r3, r3
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	b29a      	uxth	r2, r3
 800f454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f456:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f45e:	891b      	ldrh	r3, [r3, #8]
 800f460:	4619      	mov	r1, r3
 800f462:	4610      	mov	r0, r2
 800f464:	f7fb ff0e 	bl	800b284 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46a:	69fa      	ldr	r2, [r7, #28]
 800f46c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f46e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f470:	69f8      	ldr	r0, [r7, #28]
 800f472:	f7ff f883 	bl	800e57c <tcp_oos_insert_segment>
                  }
                  break;
 800f476:	e0e2      	b.n	800f63e <tcp_receive+0xeba>
 800f478:	20004a38 	.word	0x20004a38
 800f47c:	20004a35 	.word	0x20004a35
 800f480:	20004a08 	.word	0x20004a08
 800f484:	20004a28 	.word	0x20004a28
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f040 80c6 	bne.w	800f622 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f496:	4b80      	ldr	r3, [pc, #512]	; (800f698 <tcp_receive+0xf14>)
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49c:	68db      	ldr	r3, [r3, #12]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f340 80bd 	ble.w	800f622 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	899b      	ldrh	r3, [r3, #12]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	f7fa fcb5 	bl	8009e20 <lwip_htons>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	f003 0301 	and.w	r3, r3, #1
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f040 80bf 	bne.w	800f642 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f4c4:	4875      	ldr	r0, [pc, #468]	; (800f69c <tcp_receive+0xf18>)
 800f4c6:	f7fd fb0b 	bl	800cae0 <tcp_seg_copy>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ce:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	f000 80b6 	beq.w	800f646 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4e2:	8912      	ldrh	r2, [r2, #8]
 800f4e4:	441a      	add	r2, r3
 800f4e6:	4b6c      	ldr	r3, [pc, #432]	; (800f698 <tcp_receive+0xf14>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	dd12      	ble.n	800f516 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f4f0:	4b69      	ldr	r3, [pc, #420]	; (800f698 <tcp_receive+0xf14>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	685b      	ldr	r3, [r3, #4]
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	b29a      	uxth	r2, r3
 800f502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f504:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f508:	685a      	ldr	r2, [r3, #4]
 800f50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50c:	891b      	ldrh	r3, [r3, #8]
 800f50e:	4619      	mov	r1, r3
 800f510:	4610      	mov	r0, r2
 800f512:	f7fb feb7 	bl	800b284 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f516:	4b62      	ldr	r3, [pc, #392]	; (800f6a0 <tcp_receive+0xf1c>)
 800f518:	881b      	ldrh	r3, [r3, #0]
 800f51a:	461a      	mov	r2, r3
 800f51c:	4b5e      	ldr	r3, [pc, #376]	; (800f698 <tcp_receive+0xf14>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	441a      	add	r2, r3
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f526:	6879      	ldr	r1, [r7, #4]
 800f528:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f52a:	440b      	add	r3, r1
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	f340 8089 	ble.w	800f646 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	899b      	ldrh	r3, [r3, #12]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fa fc6e 	bl	8009e20 <lwip_htons>
 800f544:	4603      	mov	r3, r0
 800f546:	b2db      	uxtb	r3, r3
 800f548:	f003 0301 	and.w	r3, r3, #1
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d022      	beq.n	800f596 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	899b      	ldrh	r3, [r3, #12]
 800f558:	b29b      	uxth	r3, r3
 800f55a:	b21b      	sxth	r3, r3
 800f55c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f560:	b21c      	sxth	r4, r3
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	899b      	ldrh	r3, [r3, #12]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fa fc57 	bl	8009e20 <lwip_htons>
 800f572:	4603      	mov	r3, r0
 800f574:	b2db      	uxtb	r3, r3
 800f576:	b29b      	uxth	r3, r3
 800f578:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	4618      	mov	r0, r3
 800f580:	f7fa fc4e 	bl	8009e20 <lwip_htons>
 800f584:	4603      	mov	r3, r0
 800f586:	b21b      	sxth	r3, r3
 800f588:	4323      	orrs	r3, r4
 800f58a:	b21a      	sxth	r2, r3
 800f58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	b292      	uxth	r2, r2
 800f594:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5a0:	4413      	add	r3, r2
 800f5a2:	b299      	uxth	r1, r3
 800f5a4:	4b3c      	ldr	r3, [pc, #240]	; (800f698 <tcp_receive+0xf14>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	b29a      	uxth	r2, r3
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	1a8a      	subs	r2, r1, r2
 800f5b0:	b292      	uxth	r2, r2
 800f5b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	685a      	ldr	r2, [r3, #4]
 800f5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	891b      	ldrh	r3, [r3, #8]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	4610      	mov	r0, r2
 800f5c4:	f7fb fe5e 	bl	800b284 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	891c      	ldrh	r4, [r3, #8]
 800f5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	899b      	ldrh	r3, [r3, #12]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fa fc21 	bl	8009e20 <lwip_htons>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	f003 0303 	and.w	r3, r3, #3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d001      	beq.n	800f5ee <tcp_receive+0xe6a>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	e000      	b.n	800f5f0 <tcp_receive+0xe6c>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	4423      	add	r3, r4
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	4b2a      	ldr	r3, [pc, #168]	; (800f6a0 <tcp_receive+0xf1c>)
 800f5f6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f5f8:	4b29      	ldr	r3, [pc, #164]	; (800f6a0 <tcp_receive+0xf1c>)
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	4b26      	ldr	r3, [pc, #152]	; (800f698 <tcp_receive+0xf14>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	441a      	add	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f608:	6879      	ldr	r1, [r7, #4]
 800f60a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f60c:	440b      	add	r3, r1
 800f60e:	429a      	cmp	r2, r3
 800f610:	d019      	beq.n	800f646 <tcp_receive+0xec2>
 800f612:	4b24      	ldr	r3, [pc, #144]	; (800f6a4 <tcp_receive+0xf20>)
 800f614:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f618:	4923      	ldr	r1, [pc, #140]	; (800f6a8 <tcp_receive+0xf24>)
 800f61a:	4824      	ldr	r0, [pc, #144]	; (800f6ac <tcp_receive+0xf28>)
 800f61c:	f006 fd32 	bl	8016084 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f620:	e011      	b.n	800f646 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	63bb      	str	r3, [r7, #56]	; 0x38
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f47f aea4 	bne.w	800f378 <tcp_receive+0xbf4>
 800f630:	e00a      	b.n	800f648 <tcp_receive+0xec4>
                break;
 800f632:	bf00      	nop
 800f634:	e008      	b.n	800f648 <tcp_receive+0xec4>
                break;
 800f636:	bf00      	nop
 800f638:	e006      	b.n	800f648 <tcp_receive+0xec4>
                  break;
 800f63a:	bf00      	nop
 800f63c:	e004      	b.n	800f648 <tcp_receive+0xec4>
                  break;
 800f63e:	bf00      	nop
 800f640:	e002      	b.n	800f648 <tcp_receive+0xec4>
                  break;
 800f642:	bf00      	nop
 800f644:	e000      	b.n	800f648 <tcp_receive+0xec4>
                break;
 800f646:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f001 fa33 	bl	8010ab4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f64e:	e003      	b.n	800f658 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f001 fa2f 	bl	8010ab4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f656:	e01a      	b.n	800f68e <tcp_receive+0xf0a>
 800f658:	e019      	b.n	800f68e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f65a:	4b0f      	ldr	r3, [pc, #60]	; (800f698 <tcp_receive+0xf14>)
 800f65c:	681a      	ldr	r2, [r3, #0]
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f662:	1ad3      	subs	r3, r2, r3
 800f664:	2b00      	cmp	r3, #0
 800f666:	db0a      	blt.n	800f67e <tcp_receive+0xefa>
 800f668:	4b0b      	ldr	r3, [pc, #44]	; (800f698 <tcp_receive+0xf14>)
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f674:	440b      	add	r3, r1
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	3301      	adds	r3, #1
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	dd07      	ble.n	800f68e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	8b5b      	ldrh	r3, [r3, #26]
 800f682:	f043 0302 	orr.w	r3, r3, #2
 800f686:	b29a      	uxth	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f68c:	e7ff      	b.n	800f68e <tcp_receive+0xf0a>
 800f68e:	bf00      	nop
 800f690:	3750      	adds	r7, #80	; 0x50
 800f692:	46bd      	mov	sp, r7
 800f694:	bdb0      	pop	{r4, r5, r7, pc}
 800f696:	bf00      	nop
 800f698:	20004a28 	.word	0x20004a28
 800f69c:	20004a08 	.word	0x20004a08
 800f6a0:	20004a32 	.word	0x20004a32
 800f6a4:	080185fc 	.word	0x080185fc
 800f6a8:	080189a4 	.word	0x080189a4
 800f6ac:	08018648 	.word	0x08018648

0800f6b0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b083      	sub	sp, #12
 800f6b4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f6b6:	4b15      	ldr	r3, [pc, #84]	; (800f70c <tcp_get_next_optbyte+0x5c>)
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	1c5a      	adds	r2, r3, #1
 800f6bc:	b291      	uxth	r1, r2
 800f6be:	4a13      	ldr	r2, [pc, #76]	; (800f70c <tcp_get_next_optbyte+0x5c>)
 800f6c0:	8011      	strh	r1, [r2, #0]
 800f6c2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f6c4:	4b12      	ldr	r3, [pc, #72]	; (800f710 <tcp_get_next_optbyte+0x60>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d004      	beq.n	800f6d6 <tcp_get_next_optbyte+0x26>
 800f6cc:	4b11      	ldr	r3, [pc, #68]	; (800f714 <tcp_get_next_optbyte+0x64>)
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	88fa      	ldrh	r2, [r7, #6]
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d208      	bcs.n	800f6e8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f6d6:	4b10      	ldr	r3, [pc, #64]	; (800f718 <tcp_get_next_optbyte+0x68>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	3314      	adds	r3, #20
 800f6dc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f6de:	88fb      	ldrh	r3, [r7, #6]
 800f6e0:	683a      	ldr	r2, [r7, #0]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	e00b      	b.n	800f700 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f6e8:	88fb      	ldrh	r3, [r7, #6]
 800f6ea:	b2da      	uxtb	r2, r3
 800f6ec:	4b09      	ldr	r3, [pc, #36]	; (800f714 <tcp_get_next_optbyte+0x64>)
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f6f6:	4b06      	ldr	r3, [pc, #24]	; (800f710 <tcp_get_next_optbyte+0x60>)
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	797b      	ldrb	r3, [r7, #5]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f700:	4618      	mov	r0, r3
 800f702:	370c      	adds	r7, #12
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	20004a24 	.word	0x20004a24
 800f710:	20004a20 	.word	0x20004a20
 800f714:	20004a1e 	.word	0x20004a1e
 800f718:	20004a18 	.word	0x20004a18

0800f71c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d106      	bne.n	800f738 <tcp_parseopt+0x1c>
 800f72a:	4b32      	ldr	r3, [pc, #200]	; (800f7f4 <tcp_parseopt+0xd8>)
 800f72c:	f240 727d 	movw	r2, #1917	; 0x77d
 800f730:	4931      	ldr	r1, [pc, #196]	; (800f7f8 <tcp_parseopt+0xdc>)
 800f732:	4832      	ldr	r0, [pc, #200]	; (800f7fc <tcp_parseopt+0xe0>)
 800f734:	f006 fca6 	bl	8016084 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f738:	4b31      	ldr	r3, [pc, #196]	; (800f800 <tcp_parseopt+0xe4>)
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d055      	beq.n	800f7ec <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f740:	4b30      	ldr	r3, [pc, #192]	; (800f804 <tcp_parseopt+0xe8>)
 800f742:	2200      	movs	r2, #0
 800f744:	801a      	strh	r2, [r3, #0]
 800f746:	e045      	b.n	800f7d4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f748:	f7ff ffb2 	bl	800f6b0 <tcp_get_next_optbyte>
 800f74c:	4603      	mov	r3, r0
 800f74e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f750:	7bfb      	ldrb	r3, [r7, #15]
 800f752:	2b02      	cmp	r3, #2
 800f754:	d006      	beq.n	800f764 <tcp_parseopt+0x48>
 800f756:	2b02      	cmp	r3, #2
 800f758:	dc2b      	bgt.n	800f7b2 <tcp_parseopt+0x96>
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d041      	beq.n	800f7e2 <tcp_parseopt+0xc6>
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d127      	bne.n	800f7b2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f762:	e037      	b.n	800f7d4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f764:	f7ff ffa4 	bl	800f6b0 <tcp_get_next_optbyte>
 800f768:	4603      	mov	r3, r0
 800f76a:	2b04      	cmp	r3, #4
 800f76c:	d13b      	bne.n	800f7e6 <tcp_parseopt+0xca>
 800f76e:	4b25      	ldr	r3, [pc, #148]	; (800f804 <tcp_parseopt+0xe8>)
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	3301      	adds	r3, #1
 800f774:	4a22      	ldr	r2, [pc, #136]	; (800f800 <tcp_parseopt+0xe4>)
 800f776:	8812      	ldrh	r2, [r2, #0]
 800f778:	4293      	cmp	r3, r2
 800f77a:	da34      	bge.n	800f7e6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f77c:	f7ff ff98 	bl	800f6b0 <tcp_get_next_optbyte>
 800f780:	4603      	mov	r3, r0
 800f782:	b29b      	uxth	r3, r3
 800f784:	021b      	lsls	r3, r3, #8
 800f786:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f788:	f7ff ff92 	bl	800f6b0 <tcp_get_next_optbyte>
 800f78c:	4603      	mov	r3, r0
 800f78e:	b29a      	uxth	r2, r3
 800f790:	89bb      	ldrh	r3, [r7, #12]
 800f792:	4313      	orrs	r3, r2
 800f794:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f796:	89bb      	ldrh	r3, [r7, #12]
 800f798:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f79c:	d804      	bhi.n	800f7a8 <tcp_parseopt+0x8c>
 800f79e:	89bb      	ldrh	r3, [r7, #12]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <tcp_parseopt+0x8c>
 800f7a4:	89ba      	ldrh	r2, [r7, #12]
 800f7a6:	e001      	b.n	800f7ac <tcp_parseopt+0x90>
 800f7a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f7b0:	e010      	b.n	800f7d4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f7b2:	f7ff ff7d 	bl	800f6b0 <tcp_get_next_optbyte>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f7ba:	7afb      	ldrb	r3, [r7, #11]
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	d914      	bls.n	800f7ea <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f7c0:	7afb      	ldrb	r3, [r7, #11]
 800f7c2:	b29a      	uxth	r2, r3
 800f7c4:	4b0f      	ldr	r3, [pc, #60]	; (800f804 <tcp_parseopt+0xe8>)
 800f7c6:	881b      	ldrh	r3, [r3, #0]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	3b02      	subs	r3, #2
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	4b0c      	ldr	r3, [pc, #48]	; (800f804 <tcp_parseopt+0xe8>)
 800f7d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f7d4:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <tcp_parseopt+0xe8>)
 800f7d6:	881a      	ldrh	r2, [r3, #0]
 800f7d8:	4b09      	ldr	r3, [pc, #36]	; (800f800 <tcp_parseopt+0xe4>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d3b3      	bcc.n	800f748 <tcp_parseopt+0x2c>
 800f7e0:	e004      	b.n	800f7ec <tcp_parseopt+0xd0>
          return;
 800f7e2:	bf00      	nop
 800f7e4:	e002      	b.n	800f7ec <tcp_parseopt+0xd0>
            return;
 800f7e6:	bf00      	nop
 800f7e8:	e000      	b.n	800f7ec <tcp_parseopt+0xd0>
            return;
 800f7ea:	bf00      	nop
      }
    }
  }
}
 800f7ec:	3710      	adds	r7, #16
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd80      	pop	{r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	080185fc 	.word	0x080185fc
 800f7f8:	08018a60 	.word	0x08018a60
 800f7fc:	08018648 	.word	0x08018648
 800f800:	20004a1c 	.word	0x20004a1c
 800f804:	20004a24 	.word	0x20004a24

0800f808 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f808:	b480      	push	{r7}
 800f80a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f80c:	4b05      	ldr	r3, [pc, #20]	; (800f824 <tcp_trigger_input_pcb_close+0x1c>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	f043 0310 	orr.w	r3, r3, #16
 800f814:	b2da      	uxtb	r2, r3
 800f816:	4b03      	ldr	r3, [pc, #12]	; (800f824 <tcp_trigger_input_pcb_close+0x1c>)
 800f818:	701a      	strb	r2, [r3, #0]
}
 800f81a:	bf00      	nop
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	20004a35 	.word	0x20004a35

0800f828 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b084      	sub	sp, #16
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <tcp_route+0x28>
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	7a1b      	ldrb	r3, [r3, #8]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d006      	beq.n	800f850 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	7a1b      	ldrb	r3, [r3, #8]
 800f846:	4618      	mov	r0, r3
 800f848:	f7fb fb14 	bl	800ae74 <netif_get_by_index>
 800f84c:	4603      	mov	r3, r0
 800f84e:	e003      	b.n	800f858 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f005 f847 	bl	80148e4 <ip4_route>
 800f856:	4603      	mov	r3, r0
  }
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f860:	b590      	push	{r4, r7, lr}
 800f862:	b087      	sub	sp, #28
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	603b      	str	r3, [r7, #0]
 800f86c:	4613      	mov	r3, r2
 800f86e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d105      	bne.n	800f882 <tcp_create_segment+0x22>
 800f876:	4b44      	ldr	r3, [pc, #272]	; (800f988 <tcp_create_segment+0x128>)
 800f878:	22a3      	movs	r2, #163	; 0xa3
 800f87a:	4944      	ldr	r1, [pc, #272]	; (800f98c <tcp_create_segment+0x12c>)
 800f87c:	4844      	ldr	r0, [pc, #272]	; (800f990 <tcp_create_segment+0x130>)
 800f87e:	f006 fc01 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f882:	68bb      	ldr	r3, [r7, #8]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d105      	bne.n	800f894 <tcp_create_segment+0x34>
 800f888:	4b3f      	ldr	r3, [pc, #252]	; (800f988 <tcp_create_segment+0x128>)
 800f88a:	22a4      	movs	r2, #164	; 0xa4
 800f88c:	4941      	ldr	r1, [pc, #260]	; (800f994 <tcp_create_segment+0x134>)
 800f88e:	4840      	ldr	r0, [pc, #256]	; (800f990 <tcp_create_segment+0x130>)
 800f890:	f006 fbf8 	bl	8016084 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f894:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f898:	009b      	lsls	r3, r3, #2
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	f003 0304 	and.w	r3, r3, #4
 800f8a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f8a2:	2003      	movs	r0, #3
 800f8a4:	f7fa ff72 	bl	800a78c <memp_malloc>
 800f8a8:	6138      	str	r0, [r7, #16]
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d104      	bne.n	800f8ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f8b0:	68b8      	ldr	r0, [r7, #8]
 800f8b2:	f7fb fe6d 	bl	800b590 <pbuf_free>
    return NULL;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	e061      	b.n	800f97e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f8c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	891a      	ldrh	r2, [r3, #8]
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d205      	bcs.n	800f8e6 <tcp_create_segment+0x86>
 800f8da:	4b2b      	ldr	r3, [pc, #172]	; (800f988 <tcp_create_segment+0x128>)
 800f8dc:	22b0      	movs	r2, #176	; 0xb0
 800f8de:	492e      	ldr	r1, [pc, #184]	; (800f998 <tcp_create_segment+0x138>)
 800f8e0:	482b      	ldr	r0, [pc, #172]	; (800f990 <tcp_create_segment+0x130>)
 800f8e2:	f006 fbcf 	bl	8016084 <iprintf>
  seg->len = p->tot_len - optlen;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	891a      	ldrh	r2, [r3, #8]
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f8f6:	2114      	movs	r1, #20
 800f8f8:	68b8      	ldr	r0, [r7, #8]
 800f8fa:	f7fb fdb3 	bl	800b464 <pbuf_add_header>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	d004      	beq.n	800f90e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f904:	6938      	ldr	r0, [r7, #16]
 800f906:	f7fd f8d2 	bl	800caae <tcp_seg_free>
    return NULL;
 800f90a:	2300      	movs	r3, #0
 800f90c:	e037      	b.n	800f97e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f90e:	693b      	ldr	r3, [r7, #16]
 800f910:	685b      	ldr	r3, [r3, #4]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	693b      	ldr	r3, [r7, #16]
 800f916:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	8ada      	ldrh	r2, [r3, #22]
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	68dc      	ldr	r4, [r3, #12]
 800f920:	4610      	mov	r0, r2
 800f922:	f7fa fa7d 	bl	8009e20 <lwip_htons>
 800f926:	4603      	mov	r3, r0
 800f928:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	8b1a      	ldrh	r2, [r3, #24]
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	68dc      	ldr	r4, [r3, #12]
 800f932:	4610      	mov	r0, r2
 800f934:	f7fa fa74 	bl	8009e20 <lwip_htons>
 800f938:	4603      	mov	r3, r0
 800f93a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	68dc      	ldr	r4, [r3, #12]
 800f940:	6838      	ldr	r0, [r7, #0]
 800f942:	f7fa fa82 	bl	8009e4a <lwip_htonl>
 800f946:	4603      	mov	r3, r0
 800f948:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	089b      	lsrs	r3, r3, #2
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	b29b      	uxth	r3, r3
 800f952:	3305      	adds	r3, #5
 800f954:	b29b      	uxth	r3, r3
 800f956:	031b      	lsls	r3, r3, #12
 800f958:	b29a      	uxth	r2, r3
 800f95a:	79fb      	ldrb	r3, [r7, #7]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4313      	orrs	r3, r2
 800f960:	b29a      	uxth	r2, r3
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	68dc      	ldr	r4, [r3, #12]
 800f966:	4610      	mov	r0, r2
 800f968:	f7fa fa5a 	bl	8009e20 <lwip_htons>
 800f96c:	4603      	mov	r3, r0
 800f96e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	2200      	movs	r2, #0
 800f976:	749a      	strb	r2, [r3, #18]
 800f978:	2200      	movs	r2, #0
 800f97a:	74da      	strb	r2, [r3, #19]
  return seg;
 800f97c:	693b      	ldr	r3, [r7, #16]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	371c      	adds	r7, #28
 800f982:	46bd      	mov	sp, r7
 800f984:	bd90      	pop	{r4, r7, pc}
 800f986:	bf00      	nop
 800f988:	08018a7c 	.word	0x08018a7c
 800f98c:	08018ab0 	.word	0x08018ab0
 800f990:	08018ad0 	.word	0x08018ad0
 800f994:	08018af8 	.word	0x08018af8
 800f998:	08018b1c 	.word	0x08018b1c

0800f99c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f99c:	b590      	push	{r4, r7, lr}
 800f99e:	b08b      	sub	sp, #44	; 0x2c
 800f9a0:	af02      	add	r7, sp, #8
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	61fb      	str	r3, [r7, #28]
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d106      	bne.n	800f9c8 <tcp_split_unsent_seg+0x2c>
 800f9ba:	4b95      	ldr	r3, [pc, #596]	; (800fc10 <tcp_split_unsent_seg+0x274>)
 800f9bc:	f240 324b 	movw	r2, #843	; 0x34b
 800f9c0:	4994      	ldr	r1, [pc, #592]	; (800fc14 <tcp_split_unsent_seg+0x278>)
 800f9c2:	4895      	ldr	r0, [pc, #596]	; (800fc18 <tcp_split_unsent_seg+0x27c>)
 800f9c4:	f006 fb5e 	bl	8016084 <iprintf>

  useg = pcb->unsent;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d102      	bne.n	800f9da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d8:	e116      	b.n	800fc08 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f9da:	887b      	ldrh	r3, [r7, #2]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d109      	bne.n	800f9f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f9e0:	4b8b      	ldr	r3, [pc, #556]	; (800fc10 <tcp_split_unsent_seg+0x274>)
 800f9e2:	f240 3253 	movw	r2, #851	; 0x353
 800f9e6:	498d      	ldr	r1, [pc, #564]	; (800fc1c <tcp_split_unsent_seg+0x280>)
 800f9e8:	488b      	ldr	r0, [pc, #556]	; (800fc18 <tcp_split_unsent_seg+0x27c>)
 800f9ea:	f006 fb4b 	bl	8016084 <iprintf>
    return ERR_VAL;
 800f9ee:	f06f 0305 	mvn.w	r3, #5
 800f9f2:	e109      	b.n	800fc08 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	891b      	ldrh	r3, [r3, #8]
 800f9f8:	887a      	ldrh	r2, [r7, #2]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d301      	bcc.n	800fa02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	e102      	b.n	800fc08 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa06:	887a      	ldrh	r2, [r7, #2]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d906      	bls.n	800fa1a <tcp_split_unsent_seg+0x7e>
 800fa0c:	4b80      	ldr	r3, [pc, #512]	; (800fc10 <tcp_split_unsent_seg+0x274>)
 800fa0e:	f240 325b 	movw	r2, #859	; 0x35b
 800fa12:	4983      	ldr	r1, [pc, #524]	; (800fc20 <tcp_split_unsent_seg+0x284>)
 800fa14:	4880      	ldr	r0, [pc, #512]	; (800fc18 <tcp_split_unsent_seg+0x27c>)
 800fa16:	f006 fb35 	bl	8016084 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	891b      	ldrh	r3, [r3, #8]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d106      	bne.n	800fa30 <tcp_split_unsent_seg+0x94>
 800fa22:	4b7b      	ldr	r3, [pc, #492]	; (800fc10 <tcp_split_unsent_seg+0x274>)
 800fa24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fa28:	497e      	ldr	r1, [pc, #504]	; (800fc24 <tcp_split_unsent_seg+0x288>)
 800fa2a:	487b      	ldr	r0, [pc, #492]	; (800fc18 <tcp_split_unsent_seg+0x27c>)
 800fa2c:	f006 fb2a 	bl	8016084 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	7a9b      	ldrb	r3, [r3, #10]
 800fa34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fa36:	7bfb      	ldrb	r3, [r7, #15]
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	f003 0304 	and.w	r3, r3, #4
 800fa40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	891a      	ldrh	r2, [r3, #8]
 800fa46:	887b      	ldrh	r3, [r7, #2]
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	b29a      	uxth	r2, r3
 800fa50:	89bb      	ldrh	r3, [r7, #12]
 800fa52:	4413      	add	r3, r2
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	2036      	movs	r0, #54	; 0x36
 800fa5e:	f7fb fab3 	bl	800afc8 <pbuf_alloc>
 800fa62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f000 80b7 	beq.w	800fbda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	891a      	ldrh	r2, [r3, #8]
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	891b      	ldrh	r3, [r3, #8]
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	887b      	ldrh	r3, [r7, #2]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	6858      	ldr	r0, [r3, #4]
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	685a      	ldr	r2, [r3, #4]
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
 800fa8a:	18d1      	adds	r1, r2, r3
 800fa8c:	897b      	ldrh	r3, [r7, #10]
 800fa8e:	89ba      	ldrh	r2, [r7, #12]
 800fa90:	f7fb ff84 	bl	800b99c <pbuf_copy_partial>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	89bb      	ldrh	r3, [r7, #12]
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	f040 809f 	bne.w	800fbde <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	899b      	ldrh	r3, [r3, #12]
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fa f9b9 	bl	8009e20 <lwip_htons>
 800faae:	4603      	mov	r3, r0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fab6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fab8:	2300      	movs	r3, #0
 800faba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fabc:	7efb      	ldrb	r3, [r7, #27]
 800fabe:	f003 0308 	and.w	r3, r3, #8
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d007      	beq.n	800fad6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fac6:	7efb      	ldrb	r3, [r7, #27]
 800fac8:	f023 0308 	bic.w	r3, r3, #8
 800facc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800face:	7ebb      	ldrb	r3, [r7, #26]
 800fad0:	f043 0308 	orr.w	r3, r3, #8
 800fad4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fad6:	7efb      	ldrb	r3, [r7, #27]
 800fad8:	f003 0301 	and.w	r3, r3, #1
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d007      	beq.n	800faf0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fae0:	7efb      	ldrb	r3, [r7, #27]
 800fae2:	f023 0301 	bic.w	r3, r3, #1
 800fae6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fae8:	7ebb      	ldrb	r3, [r7, #26]
 800faea:	f043 0301 	orr.w	r3, r3, #1
 800faee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	685b      	ldr	r3, [r3, #4]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fa f9a7 	bl	8009e4a <lwip_htonl>
 800fafc:	4602      	mov	r2, r0
 800fafe:	887b      	ldrh	r3, [r7, #2]
 800fb00:	18d1      	adds	r1, r2, r3
 800fb02:	7eba      	ldrb	r2, [r7, #26]
 800fb04:	7bfb      	ldrb	r3, [r7, #15]
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	460b      	mov	r3, r1
 800fb0a:	6939      	ldr	r1, [r7, #16]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7ff fea7 	bl	800f860 <tcp_create_segment>
 800fb12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fb14:	69fb      	ldr	r3, [r7, #28]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d063      	beq.n	800fbe2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fb fdc4 	bl	800b6ac <pbuf_clen>
 800fb24:	4603      	mov	r3, r0
 800fb26:	461a      	mov	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb2e:	1a9b      	subs	r3, r3, r2
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	6858      	ldr	r0, [r3, #4]
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	891a      	ldrh	r2, [r3, #8]
 800fb42:	89bb      	ldrh	r3, [r7, #12]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4619      	mov	r1, r3
 800fb4a:	f7fb fb9b 	bl	800b284 <pbuf_realloc>
  useg->len -= remainder;
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	891a      	ldrh	r2, [r3, #8]
 800fb52:	89bb      	ldrh	r3, [r7, #12]
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	68db      	ldr	r3, [r3, #12]
 800fb60:	899b      	ldrh	r3, [r3, #12]
 800fb62:	b29c      	uxth	r4, r3
 800fb64:	7efb      	ldrb	r3, [r7, #27]
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fa f959 	bl	8009e20 <lwip_htons>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	461a      	mov	r2, r3
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	4322      	orrs	r2, r4
 800fb78:	b292      	uxth	r2, r2
 800fb7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fb fd93 	bl	800b6ac <pbuf_clen>
 800fb86:	4603      	mov	r3, r0
 800fb88:	461a      	mov	r2, r3
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb90:	4413      	add	r3, r2
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	685b      	ldr	r3, [r3, #4]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fb fd84 	bl	800b6ac <pbuf_clen>
 800fba4:	4603      	mov	r3, r0
 800fba6:	461a      	mov	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbae:	4413      	add	r3, r2
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	681a      	ldr	r2, [r3, #0]
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	69fa      	ldr	r2, [r7, #28]
 800fbc4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d103      	bne.n	800fbd6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e016      	b.n	800fc08 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fbda:	bf00      	nop
 800fbdc:	e002      	b.n	800fbe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fbde:	bf00      	nop
 800fbe0:	e000      	b.n	800fbe4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fbe2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d006      	beq.n	800fbf8 <tcp_split_unsent_seg+0x25c>
 800fbea:	4b09      	ldr	r3, [pc, #36]	; (800fc10 <tcp_split_unsent_seg+0x274>)
 800fbec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fbf0:	490d      	ldr	r1, [pc, #52]	; (800fc28 <tcp_split_unsent_seg+0x28c>)
 800fbf2:	4809      	ldr	r0, [pc, #36]	; (800fc18 <tcp_split_unsent_seg+0x27c>)
 800fbf4:	f006 fa46 	bl	8016084 <iprintf>
  if (p != NULL) {
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d002      	beq.n	800fc04 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fbfe:	6938      	ldr	r0, [r7, #16]
 800fc00:	f7fb fcc6 	bl	800b590 <pbuf_free>
  }

  return ERR_MEM;
 800fc04:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3724      	adds	r7, #36	; 0x24
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd90      	pop	{r4, r7, pc}
 800fc10:	08018a7c 	.word	0x08018a7c
 800fc14:	08018e10 	.word	0x08018e10
 800fc18:	08018ad0 	.word	0x08018ad0
 800fc1c:	08018e34 	.word	0x08018e34
 800fc20:	08018e58 	.word	0x08018e58
 800fc24:	08018e68 	.word	0x08018e68
 800fc28:	08018e78 	.word	0x08018e78

0800fc2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fc2c:	b590      	push	{r4, r7, lr}
 800fc2e:	b085      	sub	sp, #20
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <tcp_send_fin+0x1c>
 800fc3a:	4b21      	ldr	r3, [pc, #132]	; (800fcc0 <tcp_send_fin+0x94>)
 800fc3c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fc40:	4920      	ldr	r1, [pc, #128]	; (800fcc4 <tcp_send_fin+0x98>)
 800fc42:	4821      	ldr	r0, [pc, #132]	; (800fcc8 <tcp_send_fin+0x9c>)
 800fc44:	f006 fa1e 	bl	8016084 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d02e      	beq.n	800fcae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc54:	60fb      	str	r3, [r7, #12]
 800fc56:	e002      	b.n	800fc5e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1f8      	bne.n	800fc58 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fa f8d6 	bl	8009e20 <lwip_htons>
 800fc74:	4603      	mov	r3, r0
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f003 0307 	and.w	r3, r3, #7
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d116      	bne.n	800fcae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	899b      	ldrh	r3, [r3, #12]
 800fc86:	b29c      	uxth	r4, r3
 800fc88:	2001      	movs	r0, #1
 800fc8a:	f7fa f8c9 	bl	8009e20 <lwip_htons>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	461a      	mov	r2, r3
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	4322      	orrs	r2, r4
 800fc98:	b292      	uxth	r2, r2
 800fc9a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	8b5b      	ldrh	r3, [r3, #26]
 800fca0:	f043 0320 	orr.w	r3, r3, #32
 800fca4:	b29a      	uxth	r2, r3
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	e004      	b.n	800fcb8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fcae:	2101      	movs	r1, #1
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 f80b 	bl	800fccc <tcp_enqueue_flags>
 800fcb6:	4603      	mov	r3, r0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd90      	pop	{r4, r7, pc}
 800fcc0:	08018a7c 	.word	0x08018a7c
 800fcc4:	08018e84 	.word	0x08018e84
 800fcc8:	08018ad0 	.word	0x08018ad0

0800fccc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b08a      	sub	sp, #40	; 0x28
 800fcd0:	af02      	add	r7, sp, #8
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fce0:	78fb      	ldrb	r3, [r7, #3]
 800fce2:	f003 0303 	and.w	r3, r3, #3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <tcp_enqueue_flags+0x2c>
 800fcea:	4b67      	ldr	r3, [pc, #412]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fcec:	f240 4211 	movw	r2, #1041	; 0x411
 800fcf0:	4966      	ldr	r1, [pc, #408]	; (800fe8c <tcp_enqueue_flags+0x1c0>)
 800fcf2:	4867      	ldr	r0, [pc, #412]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fcf4:	f006 f9c6 	bl	8016084 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d106      	bne.n	800fd0c <tcp_enqueue_flags+0x40>
 800fcfe:	4b62      	ldr	r3, [pc, #392]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fd00:	f240 4213 	movw	r2, #1043	; 0x413
 800fd04:	4963      	ldr	r1, [pc, #396]	; (800fe94 <tcp_enqueue_flags+0x1c8>)
 800fd06:	4862      	ldr	r0, [pc, #392]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fd08:	f006 f9bc 	bl	8016084 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fd0c:	78fb      	ldrb	r3, [r7, #3]
 800fd0e:	f003 0302 	and.w	r3, r3, #2
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fd16:	2301      	movs	r3, #1
 800fd18:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fd1a:	7ffb      	ldrb	r3, [r7, #31]
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	f003 0304 	and.w	r3, r3, #4
 800fd24:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fd26:	7dfb      	ldrb	r3, [r7, #23]
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd2e:	4619      	mov	r1, r3
 800fd30:	2036      	movs	r0, #54	; 0x36
 800fd32:	f7fb f949 	bl	800afc8 <pbuf_alloc>
 800fd36:	6138      	str	r0, [r7, #16]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d109      	bne.n	800fd52 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	8b5b      	ldrh	r3, [r3, #26]
 800fd42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	e095      	b.n	800fe7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fd52:	693b      	ldr	r3, [r7, #16]
 800fd54:	895a      	ldrh	r2, [r3, #10]
 800fd56:	7dfb      	ldrb	r3, [r7, #23]
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d206      	bcs.n	800fd6c <tcp_enqueue_flags+0xa0>
 800fd5e:	4b4a      	ldr	r3, [pc, #296]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fd60:	f240 4239 	movw	r2, #1081	; 0x439
 800fd64:	494c      	ldr	r1, [pc, #304]	; (800fe98 <tcp_enqueue_flags+0x1cc>)
 800fd66:	484a      	ldr	r0, [pc, #296]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fd68:	f006 f98c 	bl	8016084 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fd70:	78fa      	ldrb	r2, [r7, #3]
 800fd72:	7ffb      	ldrb	r3, [r7, #31]
 800fd74:	9300      	str	r3, [sp, #0]
 800fd76:	460b      	mov	r3, r1
 800fd78:	6939      	ldr	r1, [r7, #16]
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7ff fd70 	bl	800f860 <tcp_create_segment>
 800fd80:	60f8      	str	r0, [r7, #12]
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	8b5b      	ldrh	r3, [r3, #26]
 800fd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fd96:	f04f 33ff 	mov.w	r3, #4294967295
 800fd9a:	e070      	b.n	800fe7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	f003 0303 	and.w	r3, r3, #3
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d006      	beq.n	800fdb6 <tcp_enqueue_flags+0xea>
 800fda8:	4b37      	ldr	r3, [pc, #220]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fdaa:	f240 4242 	movw	r2, #1090	; 0x442
 800fdae:	493b      	ldr	r1, [pc, #236]	; (800fe9c <tcp_enqueue_flags+0x1d0>)
 800fdb0:	4837      	ldr	r0, [pc, #220]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fdb2:	f006 f967 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	891b      	ldrh	r3, [r3, #8]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d006      	beq.n	800fdcc <tcp_enqueue_flags+0x100>
 800fdbe:	4b32      	ldr	r3, [pc, #200]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fdc0:	f240 4243 	movw	r2, #1091	; 0x443
 800fdc4:	4936      	ldr	r1, [pc, #216]	; (800fea0 <tcp_enqueue_flags+0x1d4>)
 800fdc6:	4832      	ldr	r0, [pc, #200]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fdc8:	f006 f95c 	bl	8016084 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d103      	bne.n	800fddc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	66da      	str	r2, [r3, #108]	; 0x6c
 800fdda:	e00d      	b.n	800fdf8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fde0:	61bb      	str	r3, [r7, #24]
 800fde2:	e002      	b.n	800fdea <tcp_enqueue_flags+0x11e>
 800fde4:	69bb      	ldr	r3, [r7, #24]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	61bb      	str	r3, [r7, #24]
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1f8      	bne.n	800fde4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fe00:	78fb      	ldrb	r3, [r7, #3]
 800fe02:	f003 0302 	and.w	r3, r3, #2
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d104      	bne.n	800fe14 <tcp_enqueue_flags+0x148>
 800fe0a:	78fb      	ldrb	r3, [r7, #3]
 800fe0c:	f003 0301 	and.w	r3, r3, #1
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d004      	beq.n	800fe1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe18:	1c5a      	adds	r2, r3, #1
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fe1e:	78fb      	ldrb	r3, [r7, #3]
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d006      	beq.n	800fe36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	8b5b      	ldrh	r3, [r3, #26]
 800fe2c:	f043 0320 	orr.w	r3, r3, #32
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fb fc36 	bl	800b6ac <pbuf_clen>
 800fe40:	4603      	mov	r3, r0
 800fe42:	461a      	mov	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe4a:	4413      	add	r3, r2
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00e      	beq.n	800fe7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d10a      	bne.n	800fe7c <tcp_enqueue_flags+0x1b0>
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d106      	bne.n	800fe7c <tcp_enqueue_flags+0x1b0>
 800fe6e:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <tcp_enqueue_flags+0x1bc>)
 800fe70:	f240 4265 	movw	r2, #1125	; 0x465
 800fe74:	490b      	ldr	r1, [pc, #44]	; (800fea4 <tcp_enqueue_flags+0x1d8>)
 800fe76:	4806      	ldr	r0, [pc, #24]	; (800fe90 <tcp_enqueue_flags+0x1c4>)
 800fe78:	f006 f904 	bl	8016084 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fe7c:	2300      	movs	r3, #0
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3720      	adds	r7, #32
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	08018a7c 	.word	0x08018a7c
 800fe8c:	08018ea0 	.word	0x08018ea0
 800fe90:	08018ad0 	.word	0x08018ad0
 800fe94:	08018ef8 	.word	0x08018ef8
 800fe98:	08018f18 	.word	0x08018f18
 800fe9c:	08018f54 	.word	0x08018f54
 800fea0:	08018f6c 	.word	0x08018f6c
 800fea4:	08018f98 	.word	0x08018f98

0800fea8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fea8:	b5b0      	push	{r4, r5, r7, lr}
 800feaa:	b08a      	sub	sp, #40	; 0x28
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d106      	bne.n	800fec4 <tcp_output+0x1c>
 800feb6:	4b9e      	ldr	r3, [pc, #632]	; (8010130 <tcp_output+0x288>)
 800feb8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800febc:	499d      	ldr	r1, [pc, #628]	; (8010134 <tcp_output+0x28c>)
 800febe:	489e      	ldr	r0, [pc, #632]	; (8010138 <tcp_output+0x290>)
 800fec0:	f006 f8e0 	bl	8016084 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7d1b      	ldrb	r3, [r3, #20]
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d106      	bne.n	800feda <tcp_output+0x32>
 800fecc:	4b98      	ldr	r3, [pc, #608]	; (8010130 <tcp_output+0x288>)
 800fece:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fed2:	499a      	ldr	r1, [pc, #616]	; (801013c <tcp_output+0x294>)
 800fed4:	4898      	ldr	r0, [pc, #608]	; (8010138 <tcp_output+0x290>)
 800fed6:	f006 f8d5 	bl	8016084 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800feda:	4b99      	ldr	r3, [pc, #612]	; (8010140 <tcp_output+0x298>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d101      	bne.n	800fee8 <tcp_output+0x40>
    return ERR_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	e1ce      	b.n	8010286 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fef4:	4293      	cmp	r3, r2
 800fef6:	bf28      	it	cs
 800fef8:	4613      	movcs	r3, r2
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff02:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ff04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d10b      	bne.n	800ff22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8b5b      	ldrh	r3, [r3, #26]
 800ff0e:	f003 0302 	and.w	r3, r3, #2
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	f000 81aa 	beq.w	801026c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 fdcb 	bl	8010ab4 <tcp_send_empty_ack>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	e1b1      	b.n	8010286 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	3304      	adds	r3, #4
 800ff28:	461a      	mov	r2, r3
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff fc7c 	bl	800f828 <tcp_route>
 800ff30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d102      	bne.n	800ff3e <tcp_output+0x96>
    return ERR_RTE;
 800ff38:	f06f 0303 	mvn.w	r3, #3
 800ff3c:	e1a3      	b.n	8010286 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d003      	beq.n	800ff4c <tcp_output+0xa4>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d111      	bne.n	800ff70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d002      	beq.n	800ff58 <tcp_output+0xb0>
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	3304      	adds	r3, #4
 800ff56:	e000      	b.n	800ff5a <tcp_output+0xb2>
 800ff58:	2300      	movs	r3, #0
 800ff5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d102      	bne.n	800ff68 <tcp_output+0xc0>
      return ERR_RTE;
 800ff62:	f06f 0303 	mvn.w	r3, #3
 800ff66:	e18e      	b.n	8010286 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7f9 ff67 	bl	8009e4a <lwip_htonl>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff86:	8912      	ldrh	r2, [r2, #8]
 800ff88:	4413      	add	r3, r2
 800ff8a:	69ba      	ldr	r2, [r7, #24]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d227      	bcs.n	800ffe0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff96:	461a      	mov	r2, r3
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	4293      	cmp	r3, r2
 800ff9c:	d114      	bne.n	800ffc8 <tcp_output+0x120>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d110      	bne.n	800ffc8 <tcp_output+0x120>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10b      	bne.n	800ffc8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8b5b      	ldrh	r3, [r3, #26]
 800ffcc:	f003 0302 	and.w	r3, r3, #2
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f000 814d 	beq.w	8010270 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fd6c 	bl	8010ab4 <tcp_send_empty_ack>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	e152      	b.n	8010286 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ffee:	6a3b      	ldr	r3, [r7, #32]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	f000 811c 	beq.w	801022e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fff6:	e002      	b.n	800fffe <tcp_output+0x156>
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	623b      	str	r3, [r7, #32]
 800fffe:	6a3b      	ldr	r3, [r7, #32]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d1f8      	bne.n	800fff8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010006:	e112      	b.n	801022e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000a:	68db      	ldr	r3, [r3, #12]
 801000c:	899b      	ldrh	r3, [r3, #12]
 801000e:	b29b      	uxth	r3, r3
 8010010:	4618      	mov	r0, r3
 8010012:	f7f9 ff05 	bl	8009e20 <lwip_htons>
 8010016:	4603      	mov	r3, r0
 8010018:	b2db      	uxtb	r3, r3
 801001a:	f003 0304 	and.w	r3, r3, #4
 801001e:	2b00      	cmp	r3, #0
 8010020:	d006      	beq.n	8010030 <tcp_output+0x188>
 8010022:	4b43      	ldr	r3, [pc, #268]	; (8010130 <tcp_output+0x288>)
 8010024:	f240 5236 	movw	r2, #1334	; 0x536
 8010028:	4946      	ldr	r1, [pc, #280]	; (8010144 <tcp_output+0x29c>)
 801002a:	4843      	ldr	r0, [pc, #268]	; (8010138 <tcp_output+0x290>)
 801002c:	f006 f82a 	bl	8016084 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010034:	2b00      	cmp	r3, #0
 8010036:	d01f      	beq.n	8010078 <tcp_output+0x1d0>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	8b5b      	ldrh	r3, [r3, #26]
 801003c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010040:	2b00      	cmp	r3, #0
 8010042:	d119      	bne.n	8010078 <tcp_output+0x1d0>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00b      	beq.n	8010064 <tcp_output+0x1bc>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d110      	bne.n	8010078 <tcp_output+0x1d0>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801005a:	891a      	ldrh	r2, [r3, #8]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010060:	429a      	cmp	r2, r3
 8010062:	d209      	bcs.n	8010078 <tcp_output+0x1d0>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801006a:	2b00      	cmp	r3, #0
 801006c:	d004      	beq.n	8010078 <tcp_output+0x1d0>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010074:	2b08      	cmp	r3, #8
 8010076:	d901      	bls.n	801007c <tcp_output+0x1d4>
 8010078:	2301      	movs	r3, #1
 801007a:	e000      	b.n	801007e <tcp_output+0x1d6>
 801007c:	2300      	movs	r3, #0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d106      	bne.n	8010090 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	8b5b      	ldrh	r3, [r3, #26]
 8010086:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 80e4 	beq.w	8010258 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	7d1b      	ldrb	r3, [r3, #20]
 8010094:	2b02      	cmp	r3, #2
 8010096:	d00d      	beq.n	80100b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	899b      	ldrh	r3, [r3, #12]
 801009e:	b29c      	uxth	r4, r3
 80100a0:	2010      	movs	r0, #16
 80100a2:	f7f9 febd 	bl	8009e20 <lwip_htons>
 80100a6:	4603      	mov	r3, r0
 80100a8:	461a      	mov	r2, r3
 80100aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	4322      	orrs	r2, r4
 80100b0:	b292      	uxth	r2, r2
 80100b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80100b4:	697a      	ldr	r2, [r7, #20]
 80100b6:	6879      	ldr	r1, [r7, #4]
 80100b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100ba:	f000 f909 	bl	80102d0 <tcp_output_segment>
 80100be:	4603      	mov	r3, r0
 80100c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80100c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d009      	beq.n	80100de <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	8b5b      	ldrh	r3, [r3, #26]
 80100ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100d2:	b29a      	uxth	r2, r3
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	835a      	strh	r2, [r3, #26]
      return err;
 80100d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100dc:	e0d3      	b.n	8010286 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80100de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d006      	beq.n	80100fc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	8b5b      	ldrh	r3, [r3, #26]
 80100f2:	f023 0303 	bic.w	r3, r3, #3
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	68db      	ldr	r3, [r3, #12]
 8010100:	685b      	ldr	r3, [r3, #4]
 8010102:	4618      	mov	r0, r3
 8010104:	f7f9 fea1 	bl	8009e4a <lwip_htonl>
 8010108:	4604      	mov	r4, r0
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	891b      	ldrh	r3, [r3, #8]
 801010e:	461d      	mov	r5, r3
 8010110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	899b      	ldrh	r3, [r3, #12]
 8010116:	b29b      	uxth	r3, r3
 8010118:	4618      	mov	r0, r3
 801011a:	f7f9 fe81 	bl	8009e20 <lwip_htons>
 801011e:	4603      	mov	r3, r0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	f003 0303 	and.w	r3, r3, #3
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00e      	beq.n	8010148 <tcp_output+0x2a0>
 801012a:	2301      	movs	r3, #1
 801012c:	e00d      	b.n	801014a <tcp_output+0x2a2>
 801012e:	bf00      	nop
 8010130:	08018a7c 	.word	0x08018a7c
 8010134:	08018fc0 	.word	0x08018fc0
 8010138:	08018ad0 	.word	0x08018ad0
 801013c:	08018fd8 	.word	0x08018fd8
 8010140:	2000b92c 	.word	0x2000b92c
 8010144:	08019000 	.word	0x08019000
 8010148:	2300      	movs	r3, #0
 801014a:	442b      	add	r3, r5
 801014c:	4423      	add	r3, r4
 801014e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	2b00      	cmp	r3, #0
 801015a:	da02      	bge.n	8010162 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010164:	891b      	ldrh	r3, [r3, #8]
 8010166:	461c      	mov	r4, r3
 8010168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	899b      	ldrh	r3, [r3, #12]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4618      	mov	r0, r3
 8010172:	f7f9 fe55 	bl	8009e20 <lwip_htons>
 8010176:	4603      	mov	r3, r0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	f003 0303 	and.w	r3, r3, #3
 801017e:	2b00      	cmp	r3, #0
 8010180:	d001      	beq.n	8010186 <tcp_output+0x2de>
 8010182:	2301      	movs	r3, #1
 8010184:	e000      	b.n	8010188 <tcp_output+0x2e0>
 8010186:	2300      	movs	r3, #0
 8010188:	4423      	add	r3, r4
 801018a:	2b00      	cmp	r3, #0
 801018c:	d049      	beq.n	8010222 <tcp_output+0x37a>
      seg->next = NULL;
 801018e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010190:	2200      	movs	r2, #0
 8010192:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010198:	2b00      	cmp	r3, #0
 801019a:	d105      	bne.n	80101a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	623b      	str	r3, [r7, #32]
 80101a6:	e03f      	b.n	8010228 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7f9 fe4b 	bl	8009e4a <lwip_htonl>
 80101b4:	4604      	mov	r4, r0
 80101b6:	6a3b      	ldr	r3, [r7, #32]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	4618      	mov	r0, r3
 80101be:	f7f9 fe44 	bl	8009e4a <lwip_htonl>
 80101c2:	4603      	mov	r3, r0
 80101c4:	1ae3      	subs	r3, r4, r3
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	da24      	bge.n	8010214 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	3370      	adds	r3, #112	; 0x70
 80101ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80101d0:	e002      	b.n	80101d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d011      	beq.n	8010204 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	685b      	ldr	r3, [r3, #4]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f9 fe2e 	bl	8009e4a <lwip_htonl>
 80101ee:	4604      	mov	r4, r0
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7f9 fe27 	bl	8009e4a <lwip_htonl>
 80101fc:	4603      	mov	r3, r0
 80101fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010200:	2b00      	cmp	r3, #0
 8010202:	dbe6      	blt.n	80101d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	e009      	b.n	8010228 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010218:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	623b      	str	r3, [r7, #32]
 8010220:	e002      	b.n	8010228 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010224:	f7fc fc43 	bl	800caae <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801022c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801022e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010230:	2b00      	cmp	r3, #0
 8010232:	d012      	beq.n	801025a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	f7f9 fe05 	bl	8009e4a <lwip_htonl>
 8010240:	4602      	mov	r2, r0
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010246:	1ad3      	subs	r3, r2, r3
 8010248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801024a:	8912      	ldrh	r2, [r2, #8]
 801024c:	4413      	add	r3, r2
  while (seg != NULL &&
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	429a      	cmp	r2, r3
 8010252:	f4bf aed9 	bcs.w	8010008 <tcp_output+0x160>
 8010256:	e000      	b.n	801025a <tcp_output+0x3b2>
      break;
 8010258:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801025e:	2b00      	cmp	r3, #0
 8010260:	d108      	bne.n	8010274 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2200      	movs	r2, #0
 8010266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801026a:	e004      	b.n	8010276 <tcp_output+0x3ce>
    goto output_done;
 801026c:	bf00      	nop
 801026e:	e002      	b.n	8010276 <tcp_output+0x3ce>
    goto output_done;
 8010270:	bf00      	nop
 8010272:	e000      	b.n	8010276 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010274:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	8b5b      	ldrh	r3, [r3, #26]
 801027a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010284:	2300      	movs	r3, #0
}
 8010286:	4618      	mov	r0, r3
 8010288:	3728      	adds	r7, #40	; 0x28
 801028a:	46bd      	mov	sp, r7
 801028c:	bdb0      	pop	{r4, r5, r7, pc}
 801028e:	bf00      	nop

08010290 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d106      	bne.n	80102ac <tcp_output_segment_busy+0x1c>
 801029e:	4b09      	ldr	r3, [pc, #36]	; (80102c4 <tcp_output_segment_busy+0x34>)
 80102a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80102a4:	4908      	ldr	r1, [pc, #32]	; (80102c8 <tcp_output_segment_busy+0x38>)
 80102a6:	4809      	ldr	r0, [pc, #36]	; (80102cc <tcp_output_segment_busy+0x3c>)
 80102a8:	f005 feec 	bl	8016084 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	7b9b      	ldrb	r3, [r3, #14]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d001      	beq.n	80102ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e000      	b.n	80102bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80102ba:	2300      	movs	r3, #0
}
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	08018a7c 	.word	0x08018a7c
 80102c8:	08019018 	.word	0x08019018
 80102cc:	08018ad0 	.word	0x08018ad0

080102d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80102d0:	b5b0      	push	{r4, r5, r7, lr}
 80102d2:	b08c      	sub	sp, #48	; 0x30
 80102d4:	af04      	add	r7, sp, #16
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <tcp_output_segment+0x20>
 80102e2:	4b63      	ldr	r3, [pc, #396]	; (8010470 <tcp_output_segment+0x1a0>)
 80102e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80102e8:	4962      	ldr	r1, [pc, #392]	; (8010474 <tcp_output_segment+0x1a4>)
 80102ea:	4863      	ldr	r0, [pc, #396]	; (8010478 <tcp_output_segment+0x1a8>)
 80102ec:	f005 feca 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d106      	bne.n	8010304 <tcp_output_segment+0x34>
 80102f6:	4b5e      	ldr	r3, [pc, #376]	; (8010470 <tcp_output_segment+0x1a0>)
 80102f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80102fc:	495f      	ldr	r1, [pc, #380]	; (801047c <tcp_output_segment+0x1ac>)
 80102fe:	485e      	ldr	r0, [pc, #376]	; (8010478 <tcp_output_segment+0x1a8>)
 8010300:	f005 fec0 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d106      	bne.n	8010318 <tcp_output_segment+0x48>
 801030a:	4b59      	ldr	r3, [pc, #356]	; (8010470 <tcp_output_segment+0x1a0>)
 801030c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010310:	495b      	ldr	r1, [pc, #364]	; (8010480 <tcp_output_segment+0x1b0>)
 8010312:	4859      	ldr	r0, [pc, #356]	; (8010478 <tcp_output_segment+0x1a8>)
 8010314:	f005 feb6 	bl	8016084 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010318:	68f8      	ldr	r0, [r7, #12]
 801031a:	f7ff ffb9 	bl	8010290 <tcp_output_segment_busy>
 801031e:	4603      	mov	r3, r0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d001      	beq.n	8010328 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010324:	2300      	movs	r3, #0
 8010326:	e09f      	b.n	8010468 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	68dc      	ldr	r4, [r3, #12]
 8010330:	4610      	mov	r0, r2
 8010332:	f7f9 fd8a 	bl	8009e4a <lwip_htonl>
 8010336:	4603      	mov	r3, r0
 8010338:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	68dc      	ldr	r4, [r3, #12]
 8010342:	4610      	mov	r0, r2
 8010344:	f7f9 fd6c 	bl	8009e20 <lwip_htons>
 8010348:	4603      	mov	r3, r0
 801034a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010350:	68ba      	ldr	r2, [r7, #8]
 8010352:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010354:	441a      	add	r2, r3
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	3314      	adds	r3, #20
 8010360:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	7a9b      	ldrb	r3, [r3, #10]
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	2b00      	cmp	r3, #0
 801036c:	d015      	beq.n	801039a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3304      	adds	r3, #4
 8010372:	461a      	mov	r2, r3
 8010374:	6879      	ldr	r1, [r7, #4]
 8010376:	f44f 7006 	mov.w	r0, #536	; 0x218
 801037a:	f7fc fe8f 	bl	800d09c <tcp_eff_send_mss_netif>
 801037e:	4603      	mov	r3, r0
 8010380:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010382:	8b7b      	ldrh	r3, [r7, #26]
 8010384:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010388:	4618      	mov	r0, r3
 801038a:	f7f9 fd5e 	bl	8009e4a <lwip_htonl>
 801038e:	4602      	mov	r2, r0
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	3304      	adds	r3, #4
 8010398:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	da02      	bge.n	80103aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	2200      	movs	r2, #0
 80103a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d10c      	bne.n	80103cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80103b2:	4b34      	ldr	r3, [pc, #208]	; (8010484 <tcp_output_segment+0x1b4>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	68db      	ldr	r3, [r3, #12]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	4618      	mov	r0, r3
 80103c2:	f7f9 fd42 	bl	8009e4a <lwip_htonl>
 80103c6:	4602      	mov	r2, r0
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	68da      	ldr	r2, [r3, #12]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	8959      	ldrh	r1, [r3, #10]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	8b3a      	ldrh	r2, [r7, #24]
 80103e6:	1a8a      	subs	r2, r1, r2
 80103e8:	b292      	uxth	r2, r2
 80103ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	8919      	ldrh	r1, [r3, #8]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	8b3a      	ldrh	r2, [r7, #24]
 80103f8:	1a8a      	subs	r2, r1, r2
 80103fa:	b292      	uxth	r2, r2
 80103fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	68fa      	ldr	r2, [r7, #12]
 8010404:	68d2      	ldr	r2, [r2, #12]
 8010406:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	2200      	movs	r2, #0
 801040e:	741a      	strb	r2, [r3, #16]
 8010410:	2200      	movs	r2, #0
 8010412:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	f103 0214 	add.w	r2, r3, #20
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	7a9b      	ldrb	r3, [r3, #10]
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	f003 0304 	and.w	r3, r3, #4
 8010426:	4413      	add	r3, r2
 8010428:	69fa      	ldr	r2, [r7, #28]
 801042a:	429a      	cmp	r2, r3
 801042c:	d006      	beq.n	801043c <tcp_output_segment+0x16c>
 801042e:	4b10      	ldr	r3, [pc, #64]	; (8010470 <tcp_output_segment+0x1a0>)
 8010430:	f240 621c 	movw	r2, #1564	; 0x61c
 8010434:	4914      	ldr	r1, [pc, #80]	; (8010488 <tcp_output_segment+0x1b8>)
 8010436:	4810      	ldr	r0, [pc, #64]	; (8010478 <tcp_output_segment+0x1a8>)
 8010438:	f005 fe24 	bl	8016084 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6858      	ldr	r0, [r3, #4]
 8010440:	68b9      	ldr	r1, [r7, #8]
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	1d1c      	adds	r4, r3, #4
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	7add      	ldrb	r5, [r3, #11]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	7a9b      	ldrb	r3, [r3, #10]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	9202      	str	r2, [sp, #8]
 8010452:	2206      	movs	r2, #6
 8010454:	9201      	str	r2, [sp, #4]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	462b      	mov	r3, r5
 801045a:	4622      	mov	r2, r4
 801045c:	f004 fc1e 	bl	8014c9c <ip4_output_if>
 8010460:	4603      	mov	r3, r0
 8010462:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3720      	adds	r7, #32
 801046c:	46bd      	mov	sp, r7
 801046e:	bdb0      	pop	{r4, r5, r7, pc}
 8010470:	08018a7c 	.word	0x08018a7c
 8010474:	08019040 	.word	0x08019040
 8010478:	08018ad0 	.word	0x08018ad0
 801047c:	08019060 	.word	0x08019060
 8010480:	08019080 	.word	0x08019080
 8010484:	2000b91c 	.word	0x2000b91c
 8010488:	080190a4 	.word	0x080190a4

0801048c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801048c:	b5b0      	push	{r4, r5, r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d106      	bne.n	80104a8 <tcp_rexmit_rto_prepare+0x1c>
 801049a:	4b31      	ldr	r3, [pc, #196]	; (8010560 <tcp_rexmit_rto_prepare+0xd4>)
 801049c:	f240 6263 	movw	r2, #1635	; 0x663
 80104a0:	4930      	ldr	r1, [pc, #192]	; (8010564 <tcp_rexmit_rto_prepare+0xd8>)
 80104a2:	4831      	ldr	r0, [pc, #196]	; (8010568 <tcp_rexmit_rto_prepare+0xdc>)
 80104a4:	f005 fdee 	bl	8016084 <iprintf>

  if (pcb->unacked == NULL) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d102      	bne.n	80104b6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80104b0:	f06f 0305 	mvn.w	r3, #5
 80104b4:	e050      	b.n	8010558 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ba:	60fb      	str	r3, [r7, #12]
 80104bc:	e00b      	b.n	80104d6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80104be:	68f8      	ldr	r0, [r7, #12]
 80104c0:	f7ff fee6 	bl	8010290 <tcp_output_segment_busy>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d002      	beq.n	80104d0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80104ca:	f06f 0305 	mvn.w	r3, #5
 80104ce:	e043      	b.n	8010558 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	60fb      	str	r3, [r7, #12]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d1ef      	bne.n	80104be <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7ff fed6 	bl	8010290 <tcp_output_segment_busy>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80104ea:	f06f 0305 	mvn.w	r3, #5
 80104ee:	e033      	b.n	8010558 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	8b5b      	ldrh	r3, [r3, #26]
 801050a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801050e:	b29a      	uxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	685b      	ldr	r3, [r3, #4]
 801051a:	4618      	mov	r0, r3
 801051c:	f7f9 fc95 	bl	8009e4a <lwip_htonl>
 8010520:	4604      	mov	r4, r0
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	891b      	ldrh	r3, [r3, #8]
 8010526:	461d      	mov	r5, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	899b      	ldrh	r3, [r3, #12]
 801052e:	b29b      	uxth	r3, r3
 8010530:	4618      	mov	r0, r3
 8010532:	f7f9 fc75 	bl	8009e20 <lwip_htons>
 8010536:	4603      	mov	r3, r0
 8010538:	b2db      	uxtb	r3, r3
 801053a:	f003 0303 	and.w	r3, r3, #3
 801053e:	2b00      	cmp	r3, #0
 8010540:	d001      	beq.n	8010546 <tcp_rexmit_rto_prepare+0xba>
 8010542:	2301      	movs	r3, #1
 8010544:	e000      	b.n	8010548 <tcp_rexmit_rto_prepare+0xbc>
 8010546:	2300      	movs	r3, #0
 8010548:	442b      	add	r3, r5
 801054a:	18e2      	adds	r2, r4, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010556:	2300      	movs	r3, #0
}
 8010558:	4618      	mov	r0, r3
 801055a:	3710      	adds	r7, #16
 801055c:	46bd      	mov	sp, r7
 801055e:	bdb0      	pop	{r4, r5, r7, pc}
 8010560:	08018a7c 	.word	0x08018a7c
 8010564:	080190b8 	.word	0x080190b8
 8010568:	08018ad0 	.word	0x08018ad0

0801056c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d106      	bne.n	8010588 <tcp_rexmit_rto_commit+0x1c>
 801057a:	4b0d      	ldr	r3, [pc, #52]	; (80105b0 <tcp_rexmit_rto_commit+0x44>)
 801057c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010580:	490c      	ldr	r1, [pc, #48]	; (80105b4 <tcp_rexmit_rto_commit+0x48>)
 8010582:	480d      	ldr	r0, [pc, #52]	; (80105b8 <tcp_rexmit_rto_commit+0x4c>)
 8010584:	f005 fd7e 	bl	8016084 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801058e:	2bff      	cmp	r3, #255	; 0xff
 8010590:	d007      	beq.n	80105a2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010598:	3301      	adds	r3, #1
 801059a:	b2da      	uxtb	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7ff fc80 	bl	800fea8 <tcp_output>
}
 80105a8:	bf00      	nop
 80105aa:	3708      	adds	r7, #8
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	08018a7c 	.word	0x08018a7c
 80105b4:	080190dc 	.word	0x080190dc
 80105b8:	08018ad0 	.word	0x08018ad0

080105bc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d106      	bne.n	80105d8 <tcp_rexmit_rto+0x1c>
 80105ca:	4b0a      	ldr	r3, [pc, #40]	; (80105f4 <tcp_rexmit_rto+0x38>)
 80105cc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80105d0:	4909      	ldr	r1, [pc, #36]	; (80105f8 <tcp_rexmit_rto+0x3c>)
 80105d2:	480a      	ldr	r0, [pc, #40]	; (80105fc <tcp_rexmit_rto+0x40>)
 80105d4:	f005 fd56 	bl	8016084 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f7ff ff57 	bl	801048c <tcp_rexmit_rto_prepare>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d102      	bne.n	80105ea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff ffc1 	bl	801056c <tcp_rexmit_rto_commit>
  }
}
 80105ea:	bf00      	nop
 80105ec:	3708      	adds	r7, #8
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
 80105f2:	bf00      	nop
 80105f4:	08018a7c 	.word	0x08018a7c
 80105f8:	08019100 	.word	0x08019100
 80105fc:	08018ad0 	.word	0x08018ad0

08010600 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010600:	b590      	push	{r4, r7, lr}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d106      	bne.n	801061c <tcp_rexmit+0x1c>
 801060e:	4b2f      	ldr	r3, [pc, #188]	; (80106cc <tcp_rexmit+0xcc>)
 8010610:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010614:	492e      	ldr	r1, [pc, #184]	; (80106d0 <tcp_rexmit+0xd0>)
 8010616:	482f      	ldr	r0, [pc, #188]	; (80106d4 <tcp_rexmit+0xd4>)
 8010618:	f005 fd34 	bl	8016084 <iprintf>

  if (pcb->unacked == NULL) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010620:	2b00      	cmp	r3, #0
 8010622:	d102      	bne.n	801062a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010624:	f06f 0305 	mvn.w	r3, #5
 8010628:	e04c      	b.n	80106c4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801062e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010630:	68b8      	ldr	r0, [r7, #8]
 8010632:	f7ff fe2d 	bl	8010290 <tcp_output_segment_busy>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d002      	beq.n	8010642 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801063c:	f06f 0305 	mvn.w	r3, #5
 8010640:	e040      	b.n	80106c4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	336c      	adds	r3, #108	; 0x6c
 801064e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010650:	e002      	b.n	8010658 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d011      	beq.n	8010684 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7f9 fbee 	bl	8009e4a <lwip_htonl>
 801066e:	4604      	mov	r4, r0
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	f7f9 fbe7 	bl	8009e4a <lwip_htonl>
 801067c:	4603      	mov	r3, r0
 801067e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010680:	2b00      	cmp	r3, #0
 8010682:	dbe6      	blt.n	8010652 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68ba      	ldr	r2, [r7, #8]
 8010690:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d103      	bne.n	80106a2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2200      	movs	r2, #0
 801069e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106a8:	2bff      	cmp	r3, #255	; 0xff
 80106aa:	d007      	beq.n	80106bc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80106b2:	3301      	adds	r3, #1
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd90      	pop	{r4, r7, pc}
 80106cc:	08018a7c 	.word	0x08018a7c
 80106d0:	0801911c 	.word	0x0801911c
 80106d4:	08018ad0 	.word	0x08018ad0

080106d8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_rexmit_fast+0x1c>
 80106e6:	4b2a      	ldr	r3, [pc, #168]	; (8010790 <tcp_rexmit_fast+0xb8>)
 80106e8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80106ec:	4929      	ldr	r1, [pc, #164]	; (8010794 <tcp_rexmit_fast+0xbc>)
 80106ee:	482a      	ldr	r0, [pc, #168]	; (8010798 <tcp_rexmit_fast+0xc0>)
 80106f0:	f005 fcc8 	bl	8016084 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d045      	beq.n	8010788 <tcp_rexmit_fast+0xb0>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8b5b      	ldrh	r3, [r3, #26]
 8010700:	f003 0304 	and.w	r3, r3, #4
 8010704:	2b00      	cmp	r3, #0
 8010706:	d13f      	bne.n	8010788 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff ff79 	bl	8010600 <tcp_rexmit>
 801070e:	4603      	mov	r3, r0
 8010710:	2b00      	cmp	r3, #0
 8010712:	d139      	bne.n	8010788 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010720:	4293      	cmp	r3, r2
 8010722:	bf28      	it	cs
 8010724:	4613      	movcs	r3, r2
 8010726:	b29b      	uxth	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	da00      	bge.n	801072e <tcp_rexmit_fast+0x56>
 801072c:	3301      	adds	r3, #1
 801072e:	105b      	asrs	r3, r3, #1
 8010730:	b29a      	uxth	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801073e:	461a      	mov	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	429a      	cmp	r2, r3
 8010748:	d206      	bcs.n	8010758 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	b29a      	uxth	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010762:	4619      	mov	r1, r3
 8010764:	0049      	lsls	r1, r1, #1
 8010766:	440b      	add	r3, r1
 8010768:	b29b      	uxth	r3, r3
 801076a:	4413      	add	r3, r2
 801076c:	b29a      	uxth	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	8b5b      	ldrh	r3, [r3, #26]
 8010778:	f043 0304 	orr.w	r3, r3, #4
 801077c:	b29a      	uxth	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2200      	movs	r2, #0
 8010786:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010788:	bf00      	nop
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	08018a7c 	.word	0x08018a7c
 8010794:	08019134 	.word	0x08019134
 8010798:	08018ad0 	.word	0x08018ad0

0801079c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b086      	sub	sp, #24
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	607b      	str	r3, [r7, #4]
 80107a6:	460b      	mov	r3, r1
 80107a8:	817b      	strh	r3, [r7, #10]
 80107aa:	4613      	mov	r3, r2
 80107ac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80107ae:	897a      	ldrh	r2, [r7, #10]
 80107b0:	893b      	ldrh	r3, [r7, #8]
 80107b2:	4413      	add	r3, r2
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	3314      	adds	r3, #20
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80107be:	4619      	mov	r1, r3
 80107c0:	2022      	movs	r0, #34	; 0x22
 80107c2:	f7fa fc01 	bl	800afc8 <pbuf_alloc>
 80107c6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d04d      	beq.n	801086a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80107ce:	897b      	ldrh	r3, [r7, #10]
 80107d0:	3313      	adds	r3, #19
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	8952      	ldrh	r2, [r2, #10]
 80107d6:	4293      	cmp	r3, r2
 80107d8:	db06      	blt.n	80107e8 <tcp_output_alloc_header_common+0x4c>
 80107da:	4b26      	ldr	r3, [pc, #152]	; (8010874 <tcp_output_alloc_header_common+0xd8>)
 80107dc:	f240 7223 	movw	r2, #1827	; 0x723
 80107e0:	4925      	ldr	r1, [pc, #148]	; (8010878 <tcp_output_alloc_header_common+0xdc>)
 80107e2:	4826      	ldr	r0, [pc, #152]	; (801087c <tcp_output_alloc_header_common+0xe0>)
 80107e4:	f005 fc4e 	bl	8016084 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80107ee:	8c3b      	ldrh	r3, [r7, #32]
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f9 fb15 	bl	8009e20 <lwip_htons>
 80107f6:	4603      	mov	r3, r0
 80107f8:	461a      	mov	r2, r3
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80107fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010800:	4618      	mov	r0, r3
 8010802:	f7f9 fb0d 	bl	8009e20 <lwip_htons>
 8010806:	4603      	mov	r3, r0
 8010808:	461a      	mov	r2, r3
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f7f9 fb18 	bl	8009e4a <lwip_htonl>
 801081a:	4602      	mov	r2, r0
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010820:	897b      	ldrh	r3, [r7, #10]
 8010822:	089b      	lsrs	r3, r3, #2
 8010824:	b29b      	uxth	r3, r3
 8010826:	3305      	adds	r3, #5
 8010828:	b29b      	uxth	r3, r3
 801082a:	031b      	lsls	r3, r3, #12
 801082c:	b29a      	uxth	r2, r3
 801082e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010832:	b29b      	uxth	r3, r3
 8010834:	4313      	orrs	r3, r2
 8010836:	b29b      	uxth	r3, r3
 8010838:	4618      	mov	r0, r3
 801083a:	f7f9 faf1 	bl	8009e20 <lwip_htons>
 801083e:	4603      	mov	r3, r0
 8010840:	461a      	mov	r2, r3
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010846:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010848:	4618      	mov	r0, r3
 801084a:	f7f9 fae9 	bl	8009e20 <lwip_htons>
 801084e:	4603      	mov	r3, r0
 8010850:	461a      	mov	r2, r3
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	2200      	movs	r2, #0
 801085a:	741a      	strb	r2, [r3, #16]
 801085c:	2200      	movs	r2, #0
 801085e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010860:	693b      	ldr	r3, [r7, #16]
 8010862:	2200      	movs	r2, #0
 8010864:	749a      	strb	r2, [r3, #18]
 8010866:	2200      	movs	r2, #0
 8010868:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801086a:	697b      	ldr	r3, [r7, #20]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3718      	adds	r7, #24
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	08018a7c 	.word	0x08018a7c
 8010878:	08019154 	.word	0x08019154
 801087c:	08018ad0 	.word	0x08018ad0

08010880 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010880:	b5b0      	push	{r4, r5, r7, lr}
 8010882:	b08a      	sub	sp, #40	; 0x28
 8010884:	af04      	add	r7, sp, #16
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	607b      	str	r3, [r7, #4]
 801088a:	460b      	mov	r3, r1
 801088c:	817b      	strh	r3, [r7, #10]
 801088e:	4613      	mov	r3, r2
 8010890:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <tcp_output_alloc_header+0x26>
 8010898:	4b15      	ldr	r3, [pc, #84]	; (80108f0 <tcp_output_alloc_header+0x70>)
 801089a:	f240 7242 	movw	r2, #1858	; 0x742
 801089e:	4915      	ldr	r1, [pc, #84]	; (80108f4 <tcp_output_alloc_header+0x74>)
 80108a0:	4815      	ldr	r0, [pc, #84]	; (80108f8 <tcp_output_alloc_header+0x78>)
 80108a2:	f005 fbef 	bl	8016084 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	8adb      	ldrh	r3, [r3, #22]
 80108ae:	68fa      	ldr	r2, [r7, #12]
 80108b0:	8b12      	ldrh	r2, [r2, #24]
 80108b2:	68f9      	ldr	r1, [r7, #12]
 80108b4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80108b6:	893d      	ldrh	r5, [r7, #8]
 80108b8:	897c      	ldrh	r4, [r7, #10]
 80108ba:	9103      	str	r1, [sp, #12]
 80108bc:	2110      	movs	r1, #16
 80108be:	9102      	str	r1, [sp, #8]
 80108c0:	9201      	str	r2, [sp, #4]
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	462a      	mov	r2, r5
 80108c8:	4621      	mov	r1, r4
 80108ca:	f7ff ff67 	bl	801079c <tcp_output_alloc_header_common>
 80108ce:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80108d0:	697b      	ldr	r3, [r7, #20]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d006      	beq.n	80108e4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108da:	68fa      	ldr	r2, [r7, #12]
 80108dc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80108de:	441a      	add	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80108e4:	697b      	ldr	r3, [r7, #20]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3718      	adds	r7, #24
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bdb0      	pop	{r4, r5, r7, pc}
 80108ee:	bf00      	nop
 80108f0:	08018a7c 	.word	0x08018a7c
 80108f4:	08019184 	.word	0x08019184
 80108f8:	08018ad0 	.word	0x08018ad0

080108fc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	4611      	mov	r1, r2
 8010908:	461a      	mov	r2, r3
 801090a:	460b      	mov	r3, r1
 801090c:	71fb      	strb	r3, [r7, #7]
 801090e:	4613      	mov	r3, r2
 8010910:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010912:	2300      	movs	r3, #0
 8010914:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d106      	bne.n	801092a <tcp_output_fill_options+0x2e>
 801091c:	4b13      	ldr	r3, [pc, #76]	; (801096c <tcp_output_fill_options+0x70>)
 801091e:	f240 7256 	movw	r2, #1878	; 0x756
 8010922:	4913      	ldr	r1, [pc, #76]	; (8010970 <tcp_output_fill_options+0x74>)
 8010924:	4813      	ldr	r0, [pc, #76]	; (8010974 <tcp_output_fill_options+0x78>)
 8010926:	f005 fbad 	bl	8016084 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	3314      	adds	r3, #20
 8010934:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010936:	69bb      	ldr	r3, [r7, #24]
 8010938:	f103 0214 	add.w	r2, r3, #20
 801093c:	8bfb      	ldrh	r3, [r7, #30]
 801093e:	009b      	lsls	r3, r3, #2
 8010940:	4619      	mov	r1, r3
 8010942:	79fb      	ldrb	r3, [r7, #7]
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	f003 0304 	and.w	r3, r3, #4
 801094a:	440b      	add	r3, r1
 801094c:	4413      	add	r3, r2
 801094e:	697a      	ldr	r2, [r7, #20]
 8010950:	429a      	cmp	r2, r3
 8010952:	d006      	beq.n	8010962 <tcp_output_fill_options+0x66>
 8010954:	4b05      	ldr	r3, [pc, #20]	; (801096c <tcp_output_fill_options+0x70>)
 8010956:	f240 7275 	movw	r2, #1909	; 0x775
 801095a:	4907      	ldr	r1, [pc, #28]	; (8010978 <tcp_output_fill_options+0x7c>)
 801095c:	4805      	ldr	r0, [pc, #20]	; (8010974 <tcp_output_fill_options+0x78>)
 801095e:	f005 fb91 	bl	8016084 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010962:	bf00      	nop
 8010964:	3720      	adds	r7, #32
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	08018a7c 	.word	0x08018a7c
 8010970:	080191ac 	.word	0x080191ac
 8010974:	08018ad0 	.word	0x08018ad0
 8010978:	080190a4 	.word	0x080190a4

0801097c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b08a      	sub	sp, #40	; 0x28
 8010980:	af04      	add	r7, sp, #16
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d106      	bne.n	801099e <tcp_output_control_segment+0x22>
 8010990:	4b1c      	ldr	r3, [pc, #112]	; (8010a04 <tcp_output_control_segment+0x88>)
 8010992:	f240 7287 	movw	r2, #1927	; 0x787
 8010996:	491c      	ldr	r1, [pc, #112]	; (8010a08 <tcp_output_control_segment+0x8c>)
 8010998:	481c      	ldr	r0, [pc, #112]	; (8010a0c <tcp_output_control_segment+0x90>)
 801099a:	f005 fb73 	bl	8016084 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	6879      	ldr	r1, [r7, #4]
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7fe ff40 	bl	800f828 <tcp_route>
 80109a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80109b0:	23fc      	movs	r3, #252	; 0xfc
 80109b2:	75fb      	strb	r3, [r7, #23]
 80109b4:	e01c      	b.n	80109f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d006      	beq.n	80109ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	7adb      	ldrb	r3, [r3, #11]
 80109c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	7a9b      	ldrb	r3, [r3, #10]
 80109c6:	757b      	strb	r3, [r7, #21]
 80109c8:	e003      	b.n	80109d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80109ca:	23ff      	movs	r3, #255	; 0xff
 80109cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80109ce:	2300      	movs	r3, #0
 80109d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80109d2:	7dba      	ldrb	r2, [r7, #22]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	9302      	str	r3, [sp, #8]
 80109d8:	2306      	movs	r3, #6
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	7d7b      	ldrb	r3, [r7, #21]
 80109de:	9300      	str	r3, [sp, #0]
 80109e0:	4613      	mov	r3, r2
 80109e2:	683a      	ldr	r2, [r7, #0]
 80109e4:	6879      	ldr	r1, [r7, #4]
 80109e6:	68b8      	ldr	r0, [r7, #8]
 80109e8:	f004 f958 	bl	8014c9c <ip4_output_if>
 80109ec:	4603      	mov	r3, r0
 80109ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7fa fdcd 	bl	800b590 <pbuf_free>
  return err;
 80109f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	08018a7c 	.word	0x08018a7c
 8010a08:	080191d4 	.word	0x080191d4
 8010a0c:	08018ad0 	.word	0x08018ad0

08010a10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010a10:	b590      	push	{r4, r7, lr}
 8010a12:	b08b      	sub	sp, #44	; 0x2c
 8010a14:	af04      	add	r7, sp, #16
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010a1e:	683b      	ldr	r3, [r7, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d106      	bne.n	8010a32 <tcp_rst+0x22>
 8010a24:	4b1f      	ldr	r3, [pc, #124]	; (8010aa4 <tcp_rst+0x94>)
 8010a26:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010a2a:	491f      	ldr	r1, [pc, #124]	; (8010aa8 <tcp_rst+0x98>)
 8010a2c:	481f      	ldr	r0, [pc, #124]	; (8010aac <tcp_rst+0x9c>)
 8010a2e:	f005 fb29 	bl	8016084 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d106      	bne.n	8010a46 <tcp_rst+0x36>
 8010a38:	4b1a      	ldr	r3, [pc, #104]	; (8010aa4 <tcp_rst+0x94>)
 8010a3a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010a3e:	491c      	ldr	r1, [pc, #112]	; (8010ab0 <tcp_rst+0xa0>)
 8010a40:	481a      	ldr	r0, [pc, #104]	; (8010aac <tcp_rst+0x9c>)
 8010a42:	f005 fb1f 	bl	8016084 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010a46:	2300      	movs	r3, #0
 8010a48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010a4a:	f246 0308 	movw	r3, #24584	; 0x6008
 8010a4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010a50:	7dfb      	ldrb	r3, [r7, #23]
 8010a52:	b29c      	uxth	r4, r3
 8010a54:	68b8      	ldr	r0, [r7, #8]
 8010a56:	f7f9 f9f8 	bl	8009e4a <lwip_htonl>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	8abb      	ldrh	r3, [r7, #20]
 8010a5e:	9303      	str	r3, [sp, #12]
 8010a60:	2314      	movs	r3, #20
 8010a62:	9302      	str	r3, [sp, #8]
 8010a64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010a66:	9301      	str	r3, [sp, #4]
 8010a68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	4613      	mov	r3, r2
 8010a6e:	2200      	movs	r2, #0
 8010a70:	4621      	mov	r1, r4
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7ff fe92 	bl	801079c <tcp_output_alloc_header_common>
 8010a78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00c      	beq.n	8010a9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010a80:	7dfb      	ldrb	r3, [r7, #23]
 8010a82:	2200      	movs	r2, #0
 8010a84:	6939      	ldr	r1, [r7, #16]
 8010a86:	68f8      	ldr	r0, [r7, #12]
 8010a88:	f7ff ff38 	bl	80108fc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	6939      	ldr	r1, [r7, #16]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f7ff ff72 	bl	801097c <tcp_output_control_segment>
 8010a98:	e000      	b.n	8010a9c <tcp_rst+0x8c>
    return;
 8010a9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010a9c:	371c      	adds	r7, #28
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd90      	pop	{r4, r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	08018a7c 	.word	0x08018a7c
 8010aa8:	08019200 	.word	0x08019200
 8010aac:	08018ad0 	.word	0x08018ad0
 8010ab0:	0801921c 	.word	0x0801921c

08010ab4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010ab4:	b590      	push	{r4, r7, lr}
 8010ab6:	b087      	sub	sp, #28
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010abc:	2300      	movs	r3, #0
 8010abe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <tcp_send_empty_ack+0x24>
 8010aca:	4b28      	ldr	r3, [pc, #160]	; (8010b6c <tcp_send_empty_ack+0xb8>)
 8010acc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010ad0:	4927      	ldr	r1, [pc, #156]	; (8010b70 <tcp_send_empty_ack+0xbc>)
 8010ad2:	4828      	ldr	r0, [pc, #160]	; (8010b74 <tcp_send_empty_ack+0xc0>)
 8010ad4:	f005 fad6 	bl	8016084 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010ad8:	7dfb      	ldrb	r3, [r7, #23]
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	f003 0304 	and.w	r3, r3, #4
 8010ae2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010ae4:	7d7b      	ldrb	r3, [r7, #21]
 8010ae6:	b29c      	uxth	r4, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f9 f9ac 	bl	8009e4a <lwip_htonl>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2200      	movs	r2, #0
 8010af6:	4621      	mov	r1, r4
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7ff fec1 	bl	8010880 <tcp_output_alloc_header>
 8010afe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b00:	693b      	ldr	r3, [r7, #16]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d109      	bne.n	8010b1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8b5b      	ldrh	r3, [r3, #26]
 8010b0a:	f043 0303 	orr.w	r3, r3, #3
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010b14:	f06f 0301 	mvn.w	r3, #1
 8010b18:	e023      	b.n	8010b62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010b1a:	7dbb      	ldrb	r3, [r7, #22]
 8010b1c:	7dfa      	ldrb	r2, [r7, #23]
 8010b1e:	6939      	ldr	r1, [r7, #16]
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f7ff feeb 	bl	80108fc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	3304      	adds	r3, #4
 8010b2c:	6939      	ldr	r1, [r7, #16]
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7ff ff24 	bl	801097c <tcp_output_control_segment>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d007      	beq.n	8010b50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	8b5b      	ldrh	r3, [r3, #26]
 8010b44:	f043 0303 	orr.w	r3, r3, #3
 8010b48:	b29a      	uxth	r2, r3
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	835a      	strh	r2, [r3, #26]
 8010b4e:	e006      	b.n	8010b5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	8b5b      	ldrh	r3, [r3, #26]
 8010b54:	f023 0303 	bic.w	r3, r3, #3
 8010b58:	b29a      	uxth	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	371c      	adds	r7, #28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	08018a7c 	.word	0x08018a7c
 8010b70:	08019238 	.word	0x08019238
 8010b74:	08018ad0 	.word	0x08018ad0

08010b78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010b80:	2300      	movs	r3, #0
 8010b82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <tcp_keepalive+0x20>
 8010b8a:	4b18      	ldr	r3, [pc, #96]	; (8010bec <tcp_keepalive+0x74>)
 8010b8c:	f640 0224 	movw	r2, #2084	; 0x824
 8010b90:	4917      	ldr	r1, [pc, #92]	; (8010bf0 <tcp_keepalive+0x78>)
 8010b92:	4818      	ldr	r0, [pc, #96]	; (8010bf4 <tcp_keepalive+0x7c>)
 8010b94:	f005 fa76 	bl	8016084 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010b98:	7dfb      	ldrb	r3, [r7, #23]
 8010b9a:	b29c      	uxth	r4, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ba0:	3b01      	subs	r3, #1
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7f9 f951 	bl	8009e4a <lwip_htonl>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2200      	movs	r2, #0
 8010bac:	4621      	mov	r1, r4
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7ff fe66 	bl	8010880 <tcp_output_alloc_header>
 8010bb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d102      	bne.n	8010bc2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc0:	e010      	b.n	8010be4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010bc2:	7dfb      	ldrb	r3, [r7, #23]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	6939      	ldr	r1, [r7, #16]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f7ff fe97 	bl	80108fc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	3304      	adds	r3, #4
 8010bd4:	6939      	ldr	r1, [r7, #16]
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7ff fed0 	bl	801097c <tcp_output_control_segment>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	371c      	adds	r7, #28
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd90      	pop	{r4, r7, pc}
 8010bec:	08018a7c 	.word	0x08018a7c
 8010bf0:	08019258 	.word	0x08019258
 8010bf4:	08018ad0 	.word	0x08018ad0

08010bf8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010bf8:	b590      	push	{r4, r7, lr}
 8010bfa:	b08b      	sub	sp, #44	; 0x2c
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010c00:	2300      	movs	r3, #0
 8010c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d106      	bne.n	8010c1a <tcp_zero_window_probe+0x22>
 8010c0c:	4b4c      	ldr	r3, [pc, #304]	; (8010d40 <tcp_zero_window_probe+0x148>)
 8010c0e:	f640 024f 	movw	r2, #2127	; 0x84f
 8010c12:	494c      	ldr	r1, [pc, #304]	; (8010d44 <tcp_zero_window_probe+0x14c>)
 8010c14:	484c      	ldr	r0, [pc, #304]	; (8010d48 <tcp_zero_window_probe+0x150>)
 8010c16:	f005 fa35 	bl	8016084 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c1e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010c20:	6a3b      	ldr	r3, [r7, #32]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d101      	bne.n	8010c2a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	e086      	b.n	8010d38 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010c30:	2bff      	cmp	r3, #255	; 0xff
 8010c32:	d007      	beq.n	8010c44 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	b2da      	uxtb	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010c44:	6a3b      	ldr	r3, [r7, #32]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	899b      	ldrh	r3, [r3, #12]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7f9 f8e7 	bl	8009e20 <lwip_htons>
 8010c52:	4603      	mov	r3, r0
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	f003 0301 	and.w	r3, r3, #1
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d005      	beq.n	8010c6a <tcp_zero_window_probe+0x72>
 8010c5e:	6a3b      	ldr	r3, [r7, #32]
 8010c60:	891b      	ldrh	r3, [r3, #8]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d101      	bne.n	8010c6a <tcp_zero_window_probe+0x72>
 8010c66:	2301      	movs	r3, #1
 8010c68:	e000      	b.n	8010c6c <tcp_zero_window_probe+0x74>
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010c6e:	7ffb      	ldrb	r3, [r7, #31]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	bf0c      	ite	eq
 8010c74:	2301      	moveq	r3, #1
 8010c76:	2300      	movne	r3, #0
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c80:	b299      	uxth	r1, r3
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	68db      	ldr	r3, [r3, #12]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	8bba      	ldrh	r2, [r7, #28]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff fdf8 	bl	8010880 <tcp_output_alloc_header>
 8010c90:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010c92:	69bb      	ldr	r3, [r7, #24]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d102      	bne.n	8010c9e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010c98:	f04f 33ff 	mov.w	r3, #4294967295
 8010c9c:	e04c      	b.n	8010d38 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010c9e:	69bb      	ldr	r3, [r7, #24]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010ca4:	7ffb      	ldrb	r3, [r7, #31]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d011      	beq.n	8010cce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	899b      	ldrh	r3, [r3, #12]
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	b21b      	sxth	r3, r3
 8010cb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010cb6:	b21c      	sxth	r4, r3
 8010cb8:	2011      	movs	r0, #17
 8010cba:	f7f9 f8b1 	bl	8009e20 <lwip_htons>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	b21b      	sxth	r3, r3
 8010cc2:	4323      	orrs	r3, r4
 8010cc4:	b21b      	sxth	r3, r3
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	819a      	strh	r2, [r3, #12]
 8010ccc:	e010      	b.n	8010cf0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010cce:	69bb      	ldr	r3, [r7, #24]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	3314      	adds	r3, #20
 8010cd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	6858      	ldr	r0, [r3, #4]
 8010cda:	6a3b      	ldr	r3, [r7, #32]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	891a      	ldrh	r2, [r3, #8]
 8010ce0:	6a3b      	ldr	r3, [r7, #32]
 8010ce2:	891b      	ldrh	r3, [r3, #8]
 8010ce4:	1ad3      	subs	r3, r2, r3
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	2201      	movs	r2, #1
 8010cea:	6939      	ldr	r1, [r7, #16]
 8010cec:	f7fa fe56 	bl	800b99c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010cf0:	6a3b      	ldr	r3, [r7, #32]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7f9 f8a7 	bl	8009e4a <lwip_htonl>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	3301      	adds	r3, #1
 8010d00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	da02      	bge.n	8010d14 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	68fa      	ldr	r2, [r7, #12]
 8010d12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d18:	2200      	movs	r2, #0
 8010d1a:	69b9      	ldr	r1, [r7, #24]
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f7ff fded 	bl	80108fc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010d22:	687a      	ldr	r2, [r7, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	3304      	adds	r3, #4
 8010d28:	69b9      	ldr	r1, [r7, #24]
 8010d2a:	6878      	ldr	r0, [r7, #4]
 8010d2c:	f7ff fe26 	bl	801097c <tcp_output_control_segment>
 8010d30:	4603      	mov	r3, r0
 8010d32:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	372c      	adds	r7, #44	; 0x2c
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd90      	pop	{r4, r7, pc}
 8010d40:	08018a7c 	.word	0x08018a7c
 8010d44:	08019274 	.word	0x08019274
 8010d48:	08018ad0 	.word	0x08018ad0

08010d4c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010d54:	f7fa ff10 	bl	800bb78 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010d58:	4b0a      	ldr	r3, [pc, #40]	; (8010d84 <tcpip_tcp_timer+0x38>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d103      	bne.n	8010d68 <tcpip_tcp_timer+0x1c>
 8010d60:	4b09      	ldr	r3, [pc, #36]	; (8010d88 <tcpip_tcp_timer+0x3c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d005      	beq.n	8010d74 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010d68:	2200      	movs	r2, #0
 8010d6a:	4908      	ldr	r1, [pc, #32]	; (8010d8c <tcpip_tcp_timer+0x40>)
 8010d6c:	20fa      	movs	r0, #250	; 0xfa
 8010d6e:	f000 f8f3 	bl	8010f58 <sys_timeout>
 8010d72:	e003      	b.n	8010d7c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010d74:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <tcpip_tcp_timer+0x44>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
  }
}
 8010d7a:	bf00      	nop
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	2000b918 	.word	0x2000b918
 8010d88:	2000b928 	.word	0x2000b928
 8010d8c:	08010d4d 	.word	0x08010d4d
 8010d90:	20004a44 	.word	0x20004a44

08010d94 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <tcp_timer_needed+0x30>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10f      	bne.n	8010dc0 <tcp_timer_needed+0x2c>
 8010da0:	4b09      	ldr	r3, [pc, #36]	; (8010dc8 <tcp_timer_needed+0x34>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d103      	bne.n	8010db0 <tcp_timer_needed+0x1c>
 8010da8:	4b08      	ldr	r3, [pc, #32]	; (8010dcc <tcp_timer_needed+0x38>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d007      	beq.n	8010dc0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010db0:	4b04      	ldr	r3, [pc, #16]	; (8010dc4 <tcp_timer_needed+0x30>)
 8010db2:	2201      	movs	r2, #1
 8010db4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010db6:	2200      	movs	r2, #0
 8010db8:	4905      	ldr	r1, [pc, #20]	; (8010dd0 <tcp_timer_needed+0x3c>)
 8010dba:	20fa      	movs	r0, #250	; 0xfa
 8010dbc:	f000 f8cc 	bl	8010f58 <sys_timeout>
  }
}
 8010dc0:	bf00      	nop
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	20004a44 	.word	0x20004a44
 8010dc8:	2000b918 	.word	0x2000b918
 8010dcc:	2000b928 	.word	0x2000b928
 8010dd0:	08010d4d 	.word	0x08010d4d

08010dd4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b086      	sub	sp, #24
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010de0:	200a      	movs	r0, #10
 8010de2:	f7f9 fcd3 	bl	800a78c <memp_malloc>
 8010de6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d109      	bne.n	8010e02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d151      	bne.n	8010e98 <sys_timeout_abs+0xc4>
 8010df4:	4b2a      	ldr	r3, [pc, #168]	; (8010ea0 <sys_timeout_abs+0xcc>)
 8010df6:	22be      	movs	r2, #190	; 0xbe
 8010df8:	492a      	ldr	r1, [pc, #168]	; (8010ea4 <sys_timeout_abs+0xd0>)
 8010dfa:	482b      	ldr	r0, [pc, #172]	; (8010ea8 <sys_timeout_abs+0xd4>)
 8010dfc:	f005 f942 	bl	8016084 <iprintf>
    return;
 8010e00:	e04a      	b.n	8010e98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010e02:	693b      	ldr	r3, [r7, #16]
 8010e04:	2200      	movs	r2, #0
 8010e06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	68fa      	ldr	r2, [r7, #12]
 8010e18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010e1a:	4b24      	ldr	r3, [pc, #144]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d103      	bne.n	8010e2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010e22:	4a22      	ldr	r2, [pc, #136]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	6013      	str	r3, [r2, #0]
    return;
 8010e28:	e037      	b.n	8010e9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	685a      	ldr	r2, [r3, #4]
 8010e2e:	4b1f      	ldr	r3, [pc, #124]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	1ad3      	subs	r3, r2, r3
 8010e36:	0fdb      	lsrs	r3, r3, #31
 8010e38:	f003 0301 	and.w	r3, r3, #1
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d007      	beq.n	8010e52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010e42:	4b1a      	ldr	r3, [pc, #104]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e44:	681a      	ldr	r2, [r3, #0]
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010e4a:	4a18      	ldr	r2, [pc, #96]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	e023      	b.n	8010e9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010e52:	4b16      	ldr	r3, [pc, #88]	; (8010eac <sys_timeout_abs+0xd8>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	617b      	str	r3, [r7, #20]
 8010e58:	e01a      	b.n	8010e90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00b      	beq.n	8010e7a <sys_timeout_abs+0xa6>
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	685a      	ldr	r2, [r3, #4]
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	1ad3      	subs	r3, r2, r3
 8010e6e:	0fdb      	lsrs	r3, r3, #31
 8010e70:	f003 0301 	and.w	r3, r3, #1
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d007      	beq.n	8010e8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	681a      	ldr	r2, [r3, #0]
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	693a      	ldr	r2, [r7, #16]
 8010e86:	601a      	str	r2, [r3, #0]
        break;
 8010e88:	e007      	b.n	8010e9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	617b      	str	r3, [r7, #20]
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1e1      	bne.n	8010e5a <sys_timeout_abs+0x86>
 8010e96:	e000      	b.n	8010e9a <sys_timeout_abs+0xc6>
    return;
 8010e98:	bf00      	nop
      }
    }
  }
}
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	08019298 	.word	0x08019298
 8010ea4:	080192cc 	.word	0x080192cc
 8010ea8:	0801930c 	.word	0x0801930c
 8010eac:	20004a3c 	.word	0x20004a3c

08010eb0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b086      	sub	sp, #24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	4798      	blx	r3

  now = sys_now();
 8010ec2:	f7f4 fe0b 	bl	8005adc <sys_now>
 8010ec6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010ec8:	697b      	ldr	r3, [r7, #20]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	4b0f      	ldr	r3, [pc, #60]	; (8010f0c <lwip_cyclic_timer+0x5c>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4413      	add	r3, r2
 8010ed2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	0fdb      	lsrs	r3, r3, #31
 8010edc:	f003 0301 	and.w	r3, r3, #1
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d009      	beq.n	8010efa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	681a      	ldr	r2, [r3, #0]
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	4413      	add	r3, r2
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	4907      	ldr	r1, [pc, #28]	; (8010f10 <lwip_cyclic_timer+0x60>)
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff ff6e 	bl	8010dd4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010ef8:	e004      	b.n	8010f04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	4904      	ldr	r1, [pc, #16]	; (8010f10 <lwip_cyclic_timer+0x60>)
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f7ff ff68 	bl	8010dd4 <sys_timeout_abs>
}
 8010f04:	bf00      	nop
 8010f06:	3718      	adds	r7, #24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	20004a40 	.word	0x20004a40
 8010f10:	08010eb1 	.word	0x08010eb1

08010f14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	607b      	str	r3, [r7, #4]
 8010f1e:	e00e      	b.n	8010f3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010f20:	4a0b      	ldr	r2, [pc, #44]	; (8010f50 <sys_timeouts_init+0x3c>)
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	00db      	lsls	r3, r3, #3
 8010f2c:	4a08      	ldr	r2, [pc, #32]	; (8010f50 <sys_timeouts_init+0x3c>)
 8010f2e:	4413      	add	r3, r2
 8010f30:	461a      	mov	r2, r3
 8010f32:	4908      	ldr	r1, [pc, #32]	; (8010f54 <sys_timeouts_init+0x40>)
 8010f34:	f000 f810 	bl	8010f58 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	3301      	adds	r3, #1
 8010f3c:	607b      	str	r3, [r7, #4]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b04      	cmp	r3, #4
 8010f42:	d9ed      	bls.n	8010f20 <sys_timeouts_init+0xc>
  }
}
 8010f44:	bf00      	nop
 8010f46:	bf00      	nop
 8010f48:	3708      	adds	r7, #8
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd80      	pop	{r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	0801a27c 	.word	0x0801a27c
 8010f54:	08010eb1 	.word	0x08010eb1

08010f58 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b086      	sub	sp, #24
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f6a:	d306      	bcc.n	8010f7a <sys_timeout+0x22>
 8010f6c:	4b0a      	ldr	r3, [pc, #40]	; (8010f98 <sys_timeout+0x40>)
 8010f6e:	f240 1229 	movw	r2, #297	; 0x129
 8010f72:	490a      	ldr	r1, [pc, #40]	; (8010f9c <sys_timeout+0x44>)
 8010f74:	480a      	ldr	r0, [pc, #40]	; (8010fa0 <sys_timeout+0x48>)
 8010f76:	f005 f885 	bl	8016084 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010f7a:	f7f4 fdaf 	bl	8005adc <sys_now>
 8010f7e:	4602      	mov	r2, r0
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	4413      	add	r3, r2
 8010f84:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	68b9      	ldr	r1, [r7, #8]
 8010f8a:	6978      	ldr	r0, [r7, #20]
 8010f8c:	f7ff ff22 	bl	8010dd4 <sys_timeout_abs>
#endif
}
 8010f90:	bf00      	nop
 8010f92:	3718      	adds	r7, #24
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	08019298 	.word	0x08019298
 8010f9c:	08019334 	.word	0x08019334
 8010fa0:	0801930c 	.word	0x0801930c

08010fa4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010faa:	f7f4 fd97 	bl	8005adc <sys_now>
 8010fae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8010fb0:	4b17      	ldr	r3, [pc, #92]	; (8011010 <sys_check_timeouts+0x6c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d022      	beq.n	8011002 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	68fa      	ldr	r2, [r7, #12]
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	0fdb      	lsrs	r3, r3, #31
 8010fc6:	f003 0301 	and.w	r3, r3, #1
 8010fca:	b2db      	uxtb	r3, r3
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d11a      	bne.n	8011006 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4a0e      	ldr	r2, [pc, #56]	; (8011010 <sys_check_timeouts+0x6c>)
 8010fd6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	689b      	ldr	r3, [r3, #8]
 8010fdc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	4a0a      	ldr	r2, [pc, #40]	; (8011014 <sys_check_timeouts+0x70>)
 8010fea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010fec:	68b9      	ldr	r1, [r7, #8]
 8010fee:	200a      	movs	r0, #10
 8010ff0:	f7f9 fc1e 	bl	800a830 <memp_free>
    if (handler != NULL) {
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d0da      	beq.n	8010fb0 <sys_check_timeouts+0xc>
      handler(arg);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6838      	ldr	r0, [r7, #0]
 8010ffe:	4798      	blx	r3
  do {
 8011000:	e7d6      	b.n	8010fb0 <sys_check_timeouts+0xc>
      return;
 8011002:	bf00      	nop
 8011004:	e000      	b.n	8011008 <sys_check_timeouts+0x64>
      return;
 8011006:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011008:	3710      	adds	r7, #16
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20004a3c 	.word	0x20004a3c
 8011014:	20004a40 	.word	0x20004a40

08011018 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801101e:	4b16      	ldr	r3, [pc, #88]	; (8011078 <sys_timeouts_sleeptime+0x60>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011026:	f04f 33ff 	mov.w	r3, #4294967295
 801102a:	e020      	b.n	801106e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801102c:	f7f4 fd56 	bl	8005adc <sys_now>
 8011030:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011032:	4b11      	ldr	r3, [pc, #68]	; (8011078 <sys_timeouts_sleeptime+0x60>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	685a      	ldr	r2, [r3, #4]
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	0fdb      	lsrs	r3, r3, #31
 801103e:	f003 0301 	and.w	r3, r3, #1
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d001      	beq.n	801104c <sys_timeouts_sleeptime+0x34>
    return 0;
 8011048:	2300      	movs	r3, #0
 801104a:	e010      	b.n	801106e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801104c:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <sys_timeouts_sleeptime+0x60>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	da06      	bge.n	801106c <sys_timeouts_sleeptime+0x54>
 801105e:	4b07      	ldr	r3, [pc, #28]	; (801107c <sys_timeouts_sleeptime+0x64>)
 8011060:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011064:	4906      	ldr	r1, [pc, #24]	; (8011080 <sys_timeouts_sleeptime+0x68>)
 8011066:	4807      	ldr	r0, [pc, #28]	; (8011084 <sys_timeouts_sleeptime+0x6c>)
 8011068:	f005 f80c 	bl	8016084 <iprintf>
    return ret;
 801106c:	683b      	ldr	r3, [r7, #0]
  }
}
 801106e:	4618      	mov	r0, r3
 8011070:	3708      	adds	r7, #8
 8011072:	46bd      	mov	sp, r7
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	20004a3c 	.word	0x20004a3c
 801107c:	08019298 	.word	0x08019298
 8011080:	0801936c 	.word	0x0801936c
 8011084:	0801930c 	.word	0x0801930c

08011088 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801108c:	f005 f812 	bl	80160b4 <rand>
 8011090:	4603      	mov	r3, r0
 8011092:	b29b      	uxth	r3, r3
 8011094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011098:	b29b      	uxth	r3, r3
 801109a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801109e:	b29a      	uxth	r2, r3
 80110a0:	4b01      	ldr	r3, [pc, #4]	; (80110a8 <udp_init+0x20>)
 80110a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80110a4:	bf00      	nop
 80110a6:	bd80      	pop	{r7, pc}
 80110a8:	20000018 	.word	0x20000018

080110ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80110b2:	2300      	movs	r3, #0
 80110b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80110b6:	4b17      	ldr	r3, [pc, #92]	; (8011114 <udp_new_port+0x68>)
 80110b8:	881b      	ldrh	r3, [r3, #0]
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	b291      	uxth	r1, r2
 80110be:	4a15      	ldr	r2, [pc, #84]	; (8011114 <udp_new_port+0x68>)
 80110c0:	8011      	strh	r1, [r2, #0]
 80110c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110c6:	4293      	cmp	r3, r2
 80110c8:	d103      	bne.n	80110d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80110ca:	4b12      	ldr	r3, [pc, #72]	; (8011114 <udp_new_port+0x68>)
 80110cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80110d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80110d2:	4b11      	ldr	r3, [pc, #68]	; (8011118 <udp_new_port+0x6c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	e011      	b.n	80110fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	8a5a      	ldrh	r2, [r3, #18]
 80110de:	4b0d      	ldr	r3, [pc, #52]	; (8011114 <udp_new_port+0x68>)
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d108      	bne.n	80110f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80110e6:	88fb      	ldrh	r3, [r7, #6]
 80110e8:	3301      	adds	r3, #1
 80110ea:	80fb      	strh	r3, [r7, #6]
 80110ec:	88fb      	ldrh	r3, [r7, #6]
 80110ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80110f2:	d3e0      	bcc.n	80110b6 <udp_new_port+0xa>
        return 0;
 80110f4:	2300      	movs	r3, #0
 80110f6:	e007      	b.n	8011108 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	603b      	str	r3, [r7, #0]
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ea      	bne.n	80110da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011104:	4b03      	ldr	r3, [pc, #12]	; (8011114 <udp_new_port+0x68>)
 8011106:	881b      	ldrh	r3, [r3, #0]
}
 8011108:	4618      	mov	r0, r3
 801110a:	370c      	adds	r7, #12
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	20000018 	.word	0x20000018
 8011118:	2000b930 	.word	0x2000b930

0801111c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4613      	mov	r3, r2
 8011128:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d105      	bne.n	801113c <udp_input_local_match+0x20>
 8011130:	4b27      	ldr	r3, [pc, #156]	; (80111d0 <udp_input_local_match+0xb4>)
 8011132:	2287      	movs	r2, #135	; 0x87
 8011134:	4927      	ldr	r1, [pc, #156]	; (80111d4 <udp_input_local_match+0xb8>)
 8011136:	4828      	ldr	r0, [pc, #160]	; (80111d8 <udp_input_local_match+0xbc>)
 8011138:	f004 ffa4 	bl	8016084 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d105      	bne.n	801114e <udp_input_local_match+0x32>
 8011142:	4b23      	ldr	r3, [pc, #140]	; (80111d0 <udp_input_local_match+0xb4>)
 8011144:	2288      	movs	r2, #136	; 0x88
 8011146:	4925      	ldr	r1, [pc, #148]	; (80111dc <udp_input_local_match+0xc0>)
 8011148:	4823      	ldr	r0, [pc, #140]	; (80111d8 <udp_input_local_match+0xbc>)
 801114a:	f004 ff9b 	bl	8016084 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	7a1b      	ldrb	r3, [r3, #8]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d00b      	beq.n	801116e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	7a1a      	ldrb	r2, [r3, #8]
 801115a:	4b21      	ldr	r3, [pc, #132]	; (80111e0 <udp_input_local_match+0xc4>)
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011162:	3301      	adds	r3, #1
 8011164:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011166:	429a      	cmp	r2, r3
 8011168:	d001      	beq.n	801116e <udp_input_local_match+0x52>
    return 0;
 801116a:	2300      	movs	r3, #0
 801116c:	e02b      	b.n	80111c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801116e:	79fb      	ldrb	r3, [r7, #7]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d018      	beq.n	80111a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d013      	beq.n	80111a2 <udp_input_local_match+0x86>
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d00f      	beq.n	80111a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011182:	4b17      	ldr	r3, [pc, #92]	; (80111e0 <udp_input_local_match+0xc4>)
 8011184:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801118a:	d00a      	beq.n	80111a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <udp_input_local_match+0xc4>)
 8011192:	695b      	ldr	r3, [r3, #20]
 8011194:	405a      	eors	r2, r3
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	3308      	adds	r3, #8
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d110      	bne.n	80111c4 <udp_input_local_match+0xa8>
          return 1;
 80111a2:	2301      	movs	r3, #1
 80111a4:	e00f      	b.n	80111c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d009      	beq.n	80111c0 <udp_input_local_match+0xa4>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d005      	beq.n	80111c0 <udp_input_local_match+0xa4>
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b09      	ldr	r3, [pc, #36]	; (80111e0 <udp_input_local_match+0xc4>)
 80111ba:	695b      	ldr	r3, [r3, #20]
 80111bc:	429a      	cmp	r2, r3
 80111be:	d101      	bne.n	80111c4 <udp_input_local_match+0xa8>
        return 1;
 80111c0:	2301      	movs	r3, #1
 80111c2:	e000      	b.n	80111c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80111c4:	2300      	movs	r3, #0
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3710      	adds	r7, #16
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	08019380 	.word	0x08019380
 80111d4:	080193b0 	.word	0x080193b0
 80111d8:	080193d4 	.word	0x080193d4
 80111dc:	080193fc 	.word	0x080193fc
 80111e0:	200081e4 	.word	0x200081e4

080111e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80111e4:	b590      	push	{r4, r7, lr}
 80111e6:	b08d      	sub	sp, #52	; 0x34
 80111e8:	af02      	add	r7, sp, #8
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80111ee:	2300      	movs	r3, #0
 80111f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d105      	bne.n	8011204 <udp_input+0x20>
 80111f8:	4b7c      	ldr	r3, [pc, #496]	; (80113ec <udp_input+0x208>)
 80111fa:	22cf      	movs	r2, #207	; 0xcf
 80111fc:	497c      	ldr	r1, [pc, #496]	; (80113f0 <udp_input+0x20c>)
 80111fe:	487d      	ldr	r0, [pc, #500]	; (80113f4 <udp_input+0x210>)
 8011200:	f004 ff40 	bl	8016084 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d105      	bne.n	8011216 <udp_input+0x32>
 801120a:	4b78      	ldr	r3, [pc, #480]	; (80113ec <udp_input+0x208>)
 801120c:	22d0      	movs	r2, #208	; 0xd0
 801120e:	497a      	ldr	r1, [pc, #488]	; (80113f8 <udp_input+0x214>)
 8011210:	4878      	ldr	r0, [pc, #480]	; (80113f4 <udp_input+0x210>)
 8011212:	f004 ff37 	bl	8016084 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	895b      	ldrh	r3, [r3, #10]
 801121a:	2b07      	cmp	r3, #7
 801121c:	d803      	bhi.n	8011226 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7fa f9b6 	bl	800b590 <pbuf_free>
    goto end;
 8011224:	e0de      	b.n	80113e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801122c:	4b73      	ldr	r3, [pc, #460]	; (80113fc <udp_input+0x218>)
 801122e:	695b      	ldr	r3, [r3, #20]
 8011230:	4a72      	ldr	r2, [pc, #456]	; (80113fc <udp_input+0x218>)
 8011232:	6812      	ldr	r2, [r2, #0]
 8011234:	4611      	mov	r1, r2
 8011236:	4618      	mov	r0, r3
 8011238:	f003 fe08 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 801123c:	4603      	mov	r3, r0
 801123e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011240:	697b      	ldr	r3, [r7, #20]
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	b29b      	uxth	r3, r3
 8011246:	4618      	mov	r0, r3
 8011248:	f7f8 fdea 	bl	8009e20 <lwip_htons>
 801124c:	4603      	mov	r3, r0
 801124e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	885b      	ldrh	r3, [r3, #2]
 8011254:	b29b      	uxth	r3, r3
 8011256:	4618      	mov	r0, r3
 8011258:	f7f8 fde2 	bl	8009e20 <lwip_htons>
 801125c:	4603      	mov	r3, r0
 801125e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011264:	2300      	movs	r3, #0
 8011266:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011268:	2300      	movs	r3, #0
 801126a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801126c:	4b64      	ldr	r3, [pc, #400]	; (8011400 <udp_input+0x21c>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	627b      	str	r3, [r7, #36]	; 0x24
 8011272:	e054      	b.n	801131e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011276:	8a5b      	ldrh	r3, [r3, #18]
 8011278:	89fa      	ldrh	r2, [r7, #14]
 801127a:	429a      	cmp	r2, r3
 801127c:	d14a      	bne.n	8011314 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801127e:	7cfb      	ldrb	r3, [r7, #19]
 8011280:	461a      	mov	r2, r3
 8011282:	6839      	ldr	r1, [r7, #0]
 8011284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011286:	f7ff ff49 	bl	801111c <udp_input_local_match>
 801128a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801128c:	2b00      	cmp	r3, #0
 801128e:	d041      	beq.n	8011314 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011292:	7c1b      	ldrb	r3, [r3, #16]
 8011294:	f003 0304 	and.w	r3, r3, #4
 8011298:	2b00      	cmp	r3, #0
 801129a:	d11d      	bne.n	80112d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d102      	bne.n	80112a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	61fb      	str	r3, [r7, #28]
 80112a6:	e017      	b.n	80112d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80112a8:	7cfb      	ldrb	r3, [r7, #19]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d014      	beq.n	80112d8 <udp_input+0xf4>
 80112ae:	4b53      	ldr	r3, [pc, #332]	; (80113fc <udp_input+0x218>)
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112b6:	d10f      	bne.n	80112d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80112b8:	69fb      	ldr	r3, [r7, #28]
 80112ba:	681a      	ldr	r2, [r3, #0]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	3304      	adds	r3, #4
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	429a      	cmp	r2, r3
 80112c4:	d008      	beq.n	80112d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	681a      	ldr	r2, [r3, #0]
 80112ca:	683b      	ldr	r3, [r7, #0]
 80112cc:	3304      	adds	r3, #4
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d101      	bne.n	80112d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	8a9b      	ldrh	r3, [r3, #20]
 80112dc:	8a3a      	ldrh	r2, [r7, #16]
 80112de:	429a      	cmp	r2, r3
 80112e0:	d118      	bne.n	8011314 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d005      	beq.n	80112f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80112ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ec:	685a      	ldr	r2, [r3, #4]
 80112ee:	4b43      	ldr	r3, [pc, #268]	; (80113fc <udp_input+0x218>)
 80112f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d10e      	bne.n	8011314 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d014      	beq.n	8011326 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	68da      	ldr	r2, [r3, #12]
 8011300:	6a3b      	ldr	r3, [r7, #32]
 8011302:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011304:	4b3e      	ldr	r3, [pc, #248]	; (8011400 <udp_input+0x21c>)
 8011306:	681a      	ldr	r2, [r3, #0]
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801130c:	4a3c      	ldr	r2, [pc, #240]	; (8011400 <udp_input+0x21c>)
 801130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011310:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011312:	e008      	b.n	8011326 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011316:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	627b      	str	r3, [r7, #36]	; 0x24
 801131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1a7      	bne.n	8011274 <udp_input+0x90>
 8011324:	e000      	b.n	8011328 <udp_input+0x144>
        break;
 8011326:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132a:	2b00      	cmp	r3, #0
 801132c:	d101      	bne.n	8011332 <udp_input+0x14e>
    pcb = uncon_pcb;
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <udp_input+0x15a>
    for_us = 1;
 8011338:	2301      	movs	r3, #1
 801133a:	76fb      	strb	r3, [r7, #27]
 801133c:	e00a      	b.n	8011354 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	3304      	adds	r3, #4
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	4b2d      	ldr	r3, [pc, #180]	; (80113fc <udp_input+0x218>)
 8011346:	695b      	ldr	r3, [r3, #20]
 8011348:	429a      	cmp	r2, r3
 801134a:	bf0c      	ite	eq
 801134c:	2301      	moveq	r3, #1
 801134e:	2300      	movne	r3, #0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011354:	7efb      	ldrb	r3, [r7, #27]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d041      	beq.n	80113de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801135a:	2108      	movs	r1, #8
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7fa f891 	bl	800b484 <pbuf_remove_header>
 8011362:	4603      	mov	r3, r0
 8011364:	2b00      	cmp	r3, #0
 8011366:	d00a      	beq.n	801137e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011368:	4b20      	ldr	r3, [pc, #128]	; (80113ec <udp_input+0x208>)
 801136a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801136e:	4925      	ldr	r1, [pc, #148]	; (8011404 <udp_input+0x220>)
 8011370:	4820      	ldr	r0, [pc, #128]	; (80113f4 <udp_input+0x210>)
 8011372:	f004 fe87 	bl	8016084 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f7fa f90a 	bl	800b590 <pbuf_free>
      goto end;
 801137c:	e032      	b.n	80113e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	2b00      	cmp	r3, #0
 8011382:	d012      	beq.n	80113aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d00a      	beq.n	80113a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801138e:	699c      	ldr	r4, [r3, #24]
 8011390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011392:	69d8      	ldr	r0, [r3, #28]
 8011394:	8a3b      	ldrh	r3, [r7, #16]
 8011396:	9300      	str	r3, [sp, #0]
 8011398:	4b1b      	ldr	r3, [pc, #108]	; (8011408 <udp_input+0x224>)
 801139a:	687a      	ldr	r2, [r7, #4]
 801139c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801139e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80113a0:	e021      	b.n	80113e6 <udp_input+0x202>
        pbuf_free(p);
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7fa f8f4 	bl	800b590 <pbuf_free>
        goto end;
 80113a8:	e01c      	b.n	80113e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80113aa:	7cfb      	ldrb	r3, [r7, #19]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d112      	bne.n	80113d6 <udp_input+0x1f2>
 80113b0:	4b12      	ldr	r3, [pc, #72]	; (80113fc <udp_input+0x218>)
 80113b2:	695b      	ldr	r3, [r3, #20]
 80113b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113b8:	2be0      	cmp	r3, #224	; 0xe0
 80113ba:	d00c      	beq.n	80113d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80113bc:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <udp_input+0x218>)
 80113be:	899b      	ldrh	r3, [r3, #12]
 80113c0:	3308      	adds	r3, #8
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	b21b      	sxth	r3, r3
 80113c6:	4619      	mov	r1, r3
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7fa f8ce 	bl	800b56a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80113ce:	2103      	movs	r1, #3
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f003 f9fd 	bl	80147d0 <icmp_dest_unreach>
      pbuf_free(p);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7fa f8da 	bl	800b590 <pbuf_free>
  return;
 80113dc:	e003      	b.n	80113e6 <udp_input+0x202>
    pbuf_free(p);
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f7fa f8d6 	bl	800b590 <pbuf_free>
  return;
 80113e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80113e6:	372c      	adds	r7, #44	; 0x2c
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd90      	pop	{r4, r7, pc}
 80113ec:	08019380 	.word	0x08019380
 80113f0:	08019424 	.word	0x08019424
 80113f4:	080193d4 	.word	0x080193d4
 80113f8:	0801943c 	.word	0x0801943c
 80113fc:	200081e4 	.word	0x200081e4
 8011400:	2000b930 	.word	0x2000b930
 8011404:	08019458 	.word	0x08019458
 8011408:	200081f4 	.word	0x200081f4

0801140c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b088      	sub	sp, #32
 8011410:	af02      	add	r7, sp, #8
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	607a      	str	r2, [r7, #4]
 8011418:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d109      	bne.n	8011434 <udp_sendto_if+0x28>
 8011420:	4b2e      	ldr	r3, [pc, #184]	; (80114dc <udp_sendto_if+0xd0>)
 8011422:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011426:	492e      	ldr	r1, [pc, #184]	; (80114e0 <udp_sendto_if+0xd4>)
 8011428:	482e      	ldr	r0, [pc, #184]	; (80114e4 <udp_sendto_if+0xd8>)
 801142a:	f004 fe2b 	bl	8016084 <iprintf>
 801142e:	f06f 030f 	mvn.w	r3, #15
 8011432:	e04f      	b.n	80114d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d109      	bne.n	801144e <udp_sendto_if+0x42>
 801143a:	4b28      	ldr	r3, [pc, #160]	; (80114dc <udp_sendto_if+0xd0>)
 801143c:	f240 2281 	movw	r2, #641	; 0x281
 8011440:	4929      	ldr	r1, [pc, #164]	; (80114e8 <udp_sendto_if+0xdc>)
 8011442:	4828      	ldr	r0, [pc, #160]	; (80114e4 <udp_sendto_if+0xd8>)
 8011444:	f004 fe1e 	bl	8016084 <iprintf>
 8011448:	f06f 030f 	mvn.w	r3, #15
 801144c:	e042      	b.n	80114d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d109      	bne.n	8011468 <udp_sendto_if+0x5c>
 8011454:	4b21      	ldr	r3, [pc, #132]	; (80114dc <udp_sendto_if+0xd0>)
 8011456:	f240 2282 	movw	r2, #642	; 0x282
 801145a:	4924      	ldr	r1, [pc, #144]	; (80114ec <udp_sendto_if+0xe0>)
 801145c:	4821      	ldr	r0, [pc, #132]	; (80114e4 <udp_sendto_if+0xd8>)
 801145e:	f004 fe11 	bl	8016084 <iprintf>
 8011462:	f06f 030f 	mvn.w	r3, #15
 8011466:	e035      	b.n	80114d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d109      	bne.n	8011482 <udp_sendto_if+0x76>
 801146e:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <udp_sendto_if+0xd0>)
 8011470:	f240 2283 	movw	r2, #643	; 0x283
 8011474:	491e      	ldr	r1, [pc, #120]	; (80114f0 <udp_sendto_if+0xe4>)
 8011476:	481b      	ldr	r0, [pc, #108]	; (80114e4 <udp_sendto_if+0xd8>)
 8011478:	f004 fe04 	bl	8016084 <iprintf>
 801147c:	f06f 030f 	mvn.w	r3, #15
 8011480:	e028      	b.n	80114d4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d009      	beq.n	801149c <udp_sendto_if+0x90>
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d005      	beq.n	801149c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011498:	2be0      	cmp	r3, #224	; 0xe0
 801149a:	d103      	bne.n	80114a4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801149c:	6a3b      	ldr	r3, [r7, #32]
 801149e:	3304      	adds	r3, #4
 80114a0:	617b      	str	r3, [r7, #20]
 80114a2:	e00b      	b.n	80114bc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	6a3b      	ldr	r3, [r7, #32]
 80114aa:	3304      	adds	r3, #4
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d002      	beq.n	80114b8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80114b2:	f06f 0303 	mvn.w	r3, #3
 80114b6:	e00d      	b.n	80114d4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80114bc:	887a      	ldrh	r2, [r7, #2]
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	4613      	mov	r3, r2
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	68b9      	ldr	r1, [r7, #8]
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	f000 f811 	bl	80114f4 <udp_sendto_if_src>
 80114d2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3718      	adds	r7, #24
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	08019380 	.word	0x08019380
 80114e0:	080194f4 	.word	0x080194f4
 80114e4:	080193d4 	.word	0x080193d4
 80114e8:	08019510 	.word	0x08019510
 80114ec:	0801952c 	.word	0x0801952c
 80114f0:	0801954c 	.word	0x0801954c

080114f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b08c      	sub	sp, #48	; 0x30
 80114f8:	af04      	add	r7, sp, #16
 80114fa:	60f8      	str	r0, [r7, #12]
 80114fc:	60b9      	str	r1, [r7, #8]
 80114fe:	607a      	str	r2, [r7, #4]
 8011500:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d109      	bne.n	801151c <udp_sendto_if_src+0x28>
 8011508:	4b65      	ldr	r3, [pc, #404]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 801150a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801150e:	4965      	ldr	r1, [pc, #404]	; (80116a4 <udp_sendto_if_src+0x1b0>)
 8011510:	4865      	ldr	r0, [pc, #404]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 8011512:	f004 fdb7 	bl	8016084 <iprintf>
 8011516:	f06f 030f 	mvn.w	r3, #15
 801151a:	e0bc      	b.n	8011696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d109      	bne.n	8011536 <udp_sendto_if_src+0x42>
 8011522:	4b5f      	ldr	r3, [pc, #380]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 8011524:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011528:	4960      	ldr	r1, [pc, #384]	; (80116ac <udp_sendto_if_src+0x1b8>)
 801152a:	485f      	ldr	r0, [pc, #380]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 801152c:	f004 fdaa 	bl	8016084 <iprintf>
 8011530:	f06f 030f 	mvn.w	r3, #15
 8011534:	e0af      	b.n	8011696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d109      	bne.n	8011550 <udp_sendto_if_src+0x5c>
 801153c:	4b58      	ldr	r3, [pc, #352]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 801153e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011542:	495b      	ldr	r1, [pc, #364]	; (80116b0 <udp_sendto_if_src+0x1bc>)
 8011544:	4858      	ldr	r0, [pc, #352]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 8011546:	f004 fd9d 	bl	8016084 <iprintf>
 801154a:	f06f 030f 	mvn.w	r3, #15
 801154e:	e0a2      	b.n	8011696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	2b00      	cmp	r3, #0
 8011554:	d109      	bne.n	801156a <udp_sendto_if_src+0x76>
 8011556:	4b52      	ldr	r3, [pc, #328]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 8011558:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801155c:	4955      	ldr	r1, [pc, #340]	; (80116b4 <udp_sendto_if_src+0x1c0>)
 801155e:	4852      	ldr	r0, [pc, #328]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 8011560:	f004 fd90 	bl	8016084 <iprintf>
 8011564:	f06f 030f 	mvn.w	r3, #15
 8011568:	e095      	b.n	8011696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801156a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156c:	2b00      	cmp	r3, #0
 801156e:	d109      	bne.n	8011584 <udp_sendto_if_src+0x90>
 8011570:	4b4b      	ldr	r3, [pc, #300]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 8011572:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011576:	4950      	ldr	r1, [pc, #320]	; (80116b8 <udp_sendto_if_src+0x1c4>)
 8011578:	484b      	ldr	r0, [pc, #300]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 801157a:	f004 fd83 	bl	8016084 <iprintf>
 801157e:	f06f 030f 	mvn.w	r3, #15
 8011582:	e088      	b.n	8011696 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	8a5b      	ldrh	r3, [r3, #18]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10f      	bne.n	80115ac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801158c:	68f9      	ldr	r1, [r7, #12]
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	8a5b      	ldrh	r3, [r3, #18]
 8011592:	461a      	mov	r2, r3
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f000 f893 	bl	80116c0 <udp_bind>
 801159a:	4603      	mov	r3, r0
 801159c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801159e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d002      	beq.n	80115ac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80115a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80115aa:	e074      	b.n	8011696 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	891b      	ldrh	r3, [r3, #8]
 80115b0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d902      	bls.n	80115be <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80115b8:	f04f 33ff 	mov.w	r3, #4294967295
 80115bc:	e06b      	b.n	8011696 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80115be:	2108      	movs	r1, #8
 80115c0:	68b8      	ldr	r0, [r7, #8]
 80115c2:	f7f9 ff4f 	bl	800b464 <pbuf_add_header>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d015      	beq.n	80115f8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80115cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115d0:	2108      	movs	r1, #8
 80115d2:	2022      	movs	r0, #34	; 0x22
 80115d4:	f7f9 fcf8 	bl	800afc8 <pbuf_alloc>
 80115d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d102      	bne.n	80115e6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80115e0:	f04f 33ff 	mov.w	r3, #4294967295
 80115e4:	e057      	b.n	8011696 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	891b      	ldrh	r3, [r3, #8]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d006      	beq.n	80115fc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80115ee:	68b9      	ldr	r1, [r7, #8]
 80115f0:	69f8      	ldr	r0, [r7, #28]
 80115f2:	f7fa f8f1 	bl	800b7d8 <pbuf_chain>
 80115f6:	e001      	b.n	80115fc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	895b      	ldrh	r3, [r3, #10]
 8011600:	2b07      	cmp	r3, #7
 8011602:	d806      	bhi.n	8011612 <udp_sendto_if_src+0x11e>
 8011604:	4b26      	ldr	r3, [pc, #152]	; (80116a0 <udp_sendto_if_src+0x1ac>)
 8011606:	f240 320d 	movw	r2, #781	; 0x30d
 801160a:	492c      	ldr	r1, [pc, #176]	; (80116bc <udp_sendto_if_src+0x1c8>)
 801160c:	4826      	ldr	r0, [pc, #152]	; (80116a8 <udp_sendto_if_src+0x1b4>)
 801160e:	f004 fd39 	bl	8016084 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	8a5b      	ldrh	r3, [r3, #18]
 801161c:	4618      	mov	r0, r3
 801161e:	f7f8 fbff 	bl	8009e20 <lwip_htons>
 8011622:	4603      	mov	r3, r0
 8011624:	461a      	mov	r2, r3
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801162a:	887b      	ldrh	r3, [r7, #2]
 801162c:	4618      	mov	r0, r3
 801162e:	f7f8 fbf7 	bl	8009e20 <lwip_htons>
 8011632:	4603      	mov	r3, r0
 8011634:	461a      	mov	r2, r3
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	2200      	movs	r2, #0
 801163e:	719a      	strb	r2, [r3, #6]
 8011640:	2200      	movs	r2, #0
 8011642:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	891b      	ldrh	r3, [r3, #8]
 8011648:	4618      	mov	r0, r3
 801164a:	f7f8 fbe9 	bl	8009e20 <lwip_htons>
 801164e:	4603      	mov	r3, r0
 8011650:	461a      	mov	r2, r3
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011656:	2311      	movs	r3, #17
 8011658:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	7adb      	ldrb	r3, [r3, #11]
 801165e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	7a9b      	ldrb	r3, [r3, #10]
 8011664:	7cb9      	ldrb	r1, [r7, #18]
 8011666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011668:	9202      	str	r2, [sp, #8]
 801166a:	7cfa      	ldrb	r2, [r7, #19]
 801166c:	9201      	str	r2, [sp, #4]
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	460b      	mov	r3, r1
 8011672:	687a      	ldr	r2, [r7, #4]
 8011674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011676:	69f8      	ldr	r0, [r7, #28]
 8011678:	f003 fb3a 	bl	8014cf0 <ip4_output_if_src>
 801167c:	4603      	mov	r3, r0
 801167e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011680:	69fa      	ldr	r2, [r7, #28]
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	429a      	cmp	r2, r3
 8011686:	d004      	beq.n	8011692 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011688:	69f8      	ldr	r0, [r7, #28]
 801168a:	f7f9 ff81 	bl	800b590 <pbuf_free>
    q = NULL;
 801168e:	2300      	movs	r3, #0
 8011690:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011692:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011696:	4618      	mov	r0, r3
 8011698:	3720      	adds	r7, #32
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}
 801169e:	bf00      	nop
 80116a0:	08019380 	.word	0x08019380
 80116a4:	0801956c 	.word	0x0801956c
 80116a8:	080193d4 	.word	0x080193d4
 80116ac:	0801958c 	.word	0x0801958c
 80116b0:	080195ac 	.word	0x080195ac
 80116b4:	080195d0 	.word	0x080195d0
 80116b8:	080195f4 	.word	0x080195f4
 80116bc:	08019618 	.word	0x08019618

080116c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b086      	sub	sp, #24
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	4613      	mov	r3, r2
 80116cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d101      	bne.n	80116d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80116d4:	4b39      	ldr	r3, [pc, #228]	; (80117bc <udp_bind+0xfc>)
 80116d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d109      	bne.n	80116f2 <udp_bind+0x32>
 80116de:	4b38      	ldr	r3, [pc, #224]	; (80117c0 <udp_bind+0x100>)
 80116e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80116e4:	4937      	ldr	r1, [pc, #220]	; (80117c4 <udp_bind+0x104>)
 80116e6:	4838      	ldr	r0, [pc, #224]	; (80117c8 <udp_bind+0x108>)
 80116e8:	f004 fccc 	bl	8016084 <iprintf>
 80116ec:	f06f 030f 	mvn.w	r3, #15
 80116f0:	e060      	b.n	80117b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80116f2:	2300      	movs	r3, #0
 80116f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80116f6:	4b35      	ldr	r3, [pc, #212]	; (80117cc <udp_bind+0x10c>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	617b      	str	r3, [r7, #20]
 80116fc:	e009      	b.n	8011712 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	429a      	cmp	r2, r3
 8011704:	d102      	bne.n	801170c <udp_bind+0x4c>
      rebind = 1;
 8011706:	2301      	movs	r3, #1
 8011708:	74fb      	strb	r3, [r7, #19]
      break;
 801170a:	e005      	b.n	8011718 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	617b      	str	r3, [r7, #20]
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1f2      	bne.n	80116fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011718:	88fb      	ldrh	r3, [r7, #6]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d109      	bne.n	8011732 <udp_bind+0x72>
    port = udp_new_port();
 801171e:	f7ff fcc5 	bl	80110ac <udp_new_port>
 8011722:	4603      	mov	r3, r0
 8011724:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011726:	88fb      	ldrh	r3, [r7, #6]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d12c      	bne.n	8011786 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801172c:	f06f 0307 	mvn.w	r3, #7
 8011730:	e040      	b.n	80117b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011732:	4b26      	ldr	r3, [pc, #152]	; (80117cc <udp_bind+0x10c>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	617b      	str	r3, [r7, #20]
 8011738:	e022      	b.n	8011780 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801173a:	68fa      	ldr	r2, [r7, #12]
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	429a      	cmp	r2, r3
 8011740:	d01b      	beq.n	801177a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	8a5b      	ldrh	r3, [r3, #18]
 8011746:	88fa      	ldrh	r2, [r7, #6]
 8011748:	429a      	cmp	r2, r3
 801174a:	d116      	bne.n	801177a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011754:	429a      	cmp	r2, r3
 8011756:	d00d      	beq.n	8011774 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00a      	beq.n	8011774 <udp_bind+0xb4>
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d006      	beq.n	8011774 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011766:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011774:	f06f 0307 	mvn.w	r3, #7
 8011778:	e01c      	b.n	80117b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	617b      	str	r3, [r7, #20]
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d1d9      	bne.n	801173a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d002      	beq.n	8011792 <udp_bind+0xd2>
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	e000      	b.n	8011794 <udp_bind+0xd4>
 8011792:	2300      	movs	r3, #0
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	88fa      	ldrh	r2, [r7, #6]
 801179c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801179e:	7cfb      	ldrb	r3, [r7, #19]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d106      	bne.n	80117b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80117a4:	4b09      	ldr	r3, [pc, #36]	; (80117cc <udp_bind+0x10c>)
 80117a6:	681a      	ldr	r2, [r3, #0]
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80117ac:	4a07      	ldr	r2, [pc, #28]	; (80117cc <udp_bind+0x10c>)
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80117b2:	2300      	movs	r3, #0
}
 80117b4:	4618      	mov	r0, r3
 80117b6:	3718      	adds	r7, #24
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	0801a2a4 	.word	0x0801a2a4
 80117c0:	08019380 	.word	0x08019380
 80117c4:	08019648 	.word	0x08019648
 80117c8:	080193d4 	.word	0x080193d4
 80117cc:	2000b930 	.word	0x2000b930

080117d0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	4613      	mov	r3, r2
 80117dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d109      	bne.n	80117f8 <udp_connect+0x28>
 80117e4:	4b2c      	ldr	r3, [pc, #176]	; (8011898 <udp_connect+0xc8>)
 80117e6:	f240 4235 	movw	r2, #1077	; 0x435
 80117ea:	492c      	ldr	r1, [pc, #176]	; (801189c <udp_connect+0xcc>)
 80117ec:	482c      	ldr	r0, [pc, #176]	; (80118a0 <udp_connect+0xd0>)
 80117ee:	f004 fc49 	bl	8016084 <iprintf>
 80117f2:	f06f 030f 	mvn.w	r3, #15
 80117f6:	e04b      	b.n	8011890 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d109      	bne.n	8011812 <udp_connect+0x42>
 80117fe:	4b26      	ldr	r3, [pc, #152]	; (8011898 <udp_connect+0xc8>)
 8011800:	f240 4236 	movw	r2, #1078	; 0x436
 8011804:	4927      	ldr	r1, [pc, #156]	; (80118a4 <udp_connect+0xd4>)
 8011806:	4826      	ldr	r0, [pc, #152]	; (80118a0 <udp_connect+0xd0>)
 8011808:	f004 fc3c 	bl	8016084 <iprintf>
 801180c:	f06f 030f 	mvn.w	r3, #15
 8011810:	e03e      	b.n	8011890 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	8a5b      	ldrh	r3, [r3, #18]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10f      	bne.n	801183a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801181a:	68f9      	ldr	r1, [r7, #12]
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	8a5b      	ldrh	r3, [r3, #18]
 8011820:	461a      	mov	r2, r3
 8011822:	68f8      	ldr	r0, [r7, #12]
 8011824:	f7ff ff4c 	bl	80116c0 <udp_bind>
 8011828:	4603      	mov	r3, r0
 801182a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801182c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <udp_connect+0x6a>
      return err;
 8011834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011838:	e02a      	b.n	8011890 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801183a:	68bb      	ldr	r3, [r7, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <udp_connect+0x76>
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	e000      	b.n	8011848 <udp_connect+0x78>
 8011846:	2300      	movs	r3, #0
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	88fa      	ldrh	r2, [r7, #6]
 8011850:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	7c1b      	ldrb	r3, [r3, #16]
 8011856:	f043 0304 	orr.w	r3, r3, #4
 801185a:	b2da      	uxtb	r2, r3
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011860:	4b11      	ldr	r3, [pc, #68]	; (80118a8 <udp_connect+0xd8>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	617b      	str	r3, [r7, #20]
 8011866:	e008      	b.n	801187a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011868:	68fa      	ldr	r2, [r7, #12]
 801186a:	697b      	ldr	r3, [r7, #20]
 801186c:	429a      	cmp	r2, r3
 801186e:	d101      	bne.n	8011874 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011870:	2300      	movs	r3, #0
 8011872:	e00d      	b.n	8011890 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	68db      	ldr	r3, [r3, #12]
 8011878:	617b      	str	r3, [r7, #20]
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1f3      	bne.n	8011868 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011880:	4b09      	ldr	r3, [pc, #36]	; (80118a8 <udp_connect+0xd8>)
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011888:	4a07      	ldr	r2, [pc, #28]	; (80118a8 <udp_connect+0xd8>)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	3718      	adds	r7, #24
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	08019380 	.word	0x08019380
 801189c:	08019660 	.word	0x08019660
 80118a0:	080193d4 	.word	0x080193d4
 80118a4:	0801967c 	.word	0x0801967c
 80118a8:	2000b930 	.word	0x2000b930

080118ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b084      	sub	sp, #16
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d107      	bne.n	80118ce <udp_recv+0x22>
 80118be:	4b08      	ldr	r3, [pc, #32]	; (80118e0 <udp_recv+0x34>)
 80118c0:	f240 428a 	movw	r2, #1162	; 0x48a
 80118c4:	4907      	ldr	r1, [pc, #28]	; (80118e4 <udp_recv+0x38>)
 80118c6:	4808      	ldr	r0, [pc, #32]	; (80118e8 <udp_recv+0x3c>)
 80118c8:	f004 fbdc 	bl	8016084 <iprintf>
 80118cc:	e005      	b.n	80118da <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	68ba      	ldr	r2, [r7, #8]
 80118d2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	61da      	str	r2, [r3, #28]
}
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	08019380 	.word	0x08019380
 80118e4:	080196b4 	.word	0x080196b4
 80118e8:	080193d4 	.word	0x080193d4

080118ec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b084      	sub	sp, #16
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d107      	bne.n	801190a <udp_remove+0x1e>
 80118fa:	4b19      	ldr	r3, [pc, #100]	; (8011960 <udp_remove+0x74>)
 80118fc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011900:	4918      	ldr	r1, [pc, #96]	; (8011964 <udp_remove+0x78>)
 8011902:	4819      	ldr	r0, [pc, #100]	; (8011968 <udp_remove+0x7c>)
 8011904:	f004 fbbe 	bl	8016084 <iprintf>
 8011908:	e026      	b.n	8011958 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801190a:	4b18      	ldr	r3, [pc, #96]	; (801196c <udp_remove+0x80>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	429a      	cmp	r2, r3
 8011912:	d105      	bne.n	8011920 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011914:	4b15      	ldr	r3, [pc, #84]	; (801196c <udp_remove+0x80>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	4a14      	ldr	r2, [pc, #80]	; (801196c <udp_remove+0x80>)
 801191c:	6013      	str	r3, [r2, #0]
 801191e:	e017      	b.n	8011950 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011920:	4b12      	ldr	r3, [pc, #72]	; (801196c <udp_remove+0x80>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	60fb      	str	r3, [r7, #12]
 8011926:	e010      	b.n	801194a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d009      	beq.n	8011944 <udp_remove+0x58>
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	68db      	ldr	r3, [r3, #12]
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	429a      	cmp	r2, r3
 8011938:	d104      	bne.n	8011944 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	68da      	ldr	r2, [r3, #12]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	60da      	str	r2, [r3, #12]
        break;
 8011942:	e005      	b.n	8011950 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	60fb      	str	r3, [r7, #12]
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1eb      	bne.n	8011928 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011950:	6879      	ldr	r1, [r7, #4]
 8011952:	2000      	movs	r0, #0
 8011954:	f7f8 ff6c 	bl	800a830 <memp_free>
}
 8011958:	3710      	adds	r7, #16
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	08019380 	.word	0x08019380
 8011964:	080196cc 	.word	0x080196cc
 8011968:	080193d4 	.word	0x080193d4
 801196c:	2000b930 	.word	0x2000b930

08011970 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011976:	2000      	movs	r0, #0
 8011978:	f7f8 ff08 	bl	800a78c <memp_malloc>
 801197c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d007      	beq.n	8011994 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011984:	2220      	movs	r2, #32
 8011986:	2100      	movs	r1, #0
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f004 fb73 	bl	8016074 <memset>
    pcb->ttl = UDP_TTL;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	22ff      	movs	r2, #255	; 0xff
 8011992:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011994:	687b      	ldr	r3, [r7, #4]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3708      	adds	r7, #8
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
	...

080119a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01e      	beq.n	80119ee <udp_netif_ip_addr_changed+0x4e>
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d01a      	beq.n	80119ee <udp_netif_ip_addr_changed+0x4e>
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d017      	beq.n	80119ee <udp_netif_ip_addr_changed+0x4e>
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d013      	beq.n	80119ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119c6:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <udp_netif_ip_addr_changed+0x5c>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	60fb      	str	r3, [r7, #12]
 80119cc:	e00c      	b.n	80119e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d103      	bne.n	80119e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	68db      	ldr	r3, [r3, #12]
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d1ef      	bne.n	80119ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80119ee:	bf00      	nop
 80119f0:	3714      	adds	r7, #20
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr
 80119fa:	bf00      	nop
 80119fc:	2000b930 	.word	0x2000b930

08011a00 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011a04:	4b20      	ldr	r3, [pc, #128]	; (8011a88 <dhcp_inc_pcb_refcount+0x88>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d133      	bne.n	8011a74 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011a0c:	4b1f      	ldr	r3, [pc, #124]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d005      	beq.n	8011a20 <dhcp_inc_pcb_refcount+0x20>
 8011a14:	4b1e      	ldr	r3, [pc, #120]	; (8011a90 <dhcp_inc_pcb_refcount+0x90>)
 8011a16:	22e5      	movs	r2, #229	; 0xe5
 8011a18:	491e      	ldr	r1, [pc, #120]	; (8011a94 <dhcp_inc_pcb_refcount+0x94>)
 8011a1a:	481f      	ldr	r0, [pc, #124]	; (8011a98 <dhcp_inc_pcb_refcount+0x98>)
 8011a1c:	f004 fb32 	bl	8016084 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011a20:	f7ff ffa6 	bl	8011970 <udp_new>
 8011a24:	4603      	mov	r3, r0
 8011a26:	4a19      	ldr	r2, [pc, #100]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a28:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011a2a:	4b18      	ldr	r3, [pc, #96]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011a32:	f04f 33ff 	mov.w	r3, #4294967295
 8011a36:	e024      	b.n	8011a82 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011a38:	4b14      	ldr	r3, [pc, #80]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	7a5a      	ldrb	r2, [r3, #9]
 8011a3e:	4b13      	ldr	r3, [pc, #76]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	f042 0220 	orr.w	r2, r2, #32
 8011a46:	b2d2      	uxtb	r2, r2
 8011a48:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011a4a:	4b10      	ldr	r3, [pc, #64]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	2244      	movs	r2, #68	; 0x44
 8011a50:	4912      	ldr	r1, [pc, #72]	; (8011a9c <dhcp_inc_pcb_refcount+0x9c>)
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ff fe34 	bl	80116c0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011a58:	4b0c      	ldr	r3, [pc, #48]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	2243      	movs	r2, #67	; 0x43
 8011a5e:	490f      	ldr	r1, [pc, #60]	; (8011a9c <dhcp_inc_pcb_refcount+0x9c>)
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7ff feb5 	bl	80117d0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <dhcp_inc_pcb_refcount+0x8c>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	490c      	ldr	r1, [pc, #48]	; (8011aa0 <dhcp_inc_pcb_refcount+0xa0>)
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7ff ff1c 	bl	80118ac <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011a74:	4b04      	ldr	r3, [pc, #16]	; (8011a88 <dhcp_inc_pcb_refcount+0x88>)
 8011a76:	781b      	ldrb	r3, [r3, #0]
 8011a78:	3301      	adds	r3, #1
 8011a7a:	b2da      	uxtb	r2, r3
 8011a7c:	4b02      	ldr	r3, [pc, #8]	; (8011a88 <dhcp_inc_pcb_refcount+0x88>)
 8011a7e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011a80:	2300      	movs	r3, #0
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	20004a4c 	.word	0x20004a4c
 8011a8c:	20004a48 	.word	0x20004a48
 8011a90:	080196e4 	.word	0x080196e4
 8011a94:	0801971c 	.word	0x0801971c
 8011a98:	08019744 	.word	0x08019744
 8011a9c:	0801a2a4 	.word	0x0801a2a4
 8011aa0:	08013339 	.word	0x08013339

08011aa4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011aa8:	4b0e      	ldr	r3, [pc, #56]	; (8011ae4 <dhcp_dec_pcb_refcount+0x40>)
 8011aaa:	781b      	ldrb	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d105      	bne.n	8011abc <dhcp_dec_pcb_refcount+0x18>
 8011ab0:	4b0d      	ldr	r3, [pc, #52]	; (8011ae8 <dhcp_dec_pcb_refcount+0x44>)
 8011ab2:	22ff      	movs	r2, #255	; 0xff
 8011ab4:	490d      	ldr	r1, [pc, #52]	; (8011aec <dhcp_dec_pcb_refcount+0x48>)
 8011ab6:	480e      	ldr	r0, [pc, #56]	; (8011af0 <dhcp_dec_pcb_refcount+0x4c>)
 8011ab8:	f004 fae4 	bl	8016084 <iprintf>
  dhcp_pcb_refcount--;
 8011abc:	4b09      	ldr	r3, [pc, #36]	; (8011ae4 <dhcp_dec_pcb_refcount+0x40>)
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	4b07      	ldr	r3, [pc, #28]	; (8011ae4 <dhcp_dec_pcb_refcount+0x40>)
 8011ac6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011ac8:	4b06      	ldr	r3, [pc, #24]	; (8011ae4 <dhcp_dec_pcb_refcount+0x40>)
 8011aca:	781b      	ldrb	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d107      	bne.n	8011ae0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011ad0:	4b08      	ldr	r3, [pc, #32]	; (8011af4 <dhcp_dec_pcb_refcount+0x50>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7ff ff09 	bl	80118ec <udp_remove>
    dhcp_pcb = NULL;
 8011ada:	4b06      	ldr	r3, [pc, #24]	; (8011af4 <dhcp_dec_pcb_refcount+0x50>)
 8011adc:	2200      	movs	r2, #0
 8011ade:	601a      	str	r2, [r3, #0]
  }
}
 8011ae0:	bf00      	nop
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	20004a4c 	.word	0x20004a4c
 8011ae8:	080196e4 	.word	0x080196e4
 8011aec:	0801976c 	.word	0x0801976c
 8011af0:	08019744 	.word	0x08019744
 8011af4:	20004a48 	.word	0x20004a48

08011af8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b084      	sub	sp, #16
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011b06:	210c      	movs	r1, #12
 8011b08:	68f8      	ldr	r0, [r7, #12]
 8011b0a:	f001 f857 	bl	8012bbc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011b0e:	4b06      	ldr	r3, [pc, #24]	; (8011b28 <dhcp_handle_nak+0x30>)
 8011b10:	4a05      	ldr	r2, [pc, #20]	; (8011b28 <dhcp_handle_nak+0x30>)
 8011b12:	4905      	ldr	r1, [pc, #20]	; (8011b28 <dhcp_handle_nak+0x30>)
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f7f9 f82d 	bl	800ab74 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f000 fc4a 	bl	80123b4 <dhcp_discover>
}
 8011b20:	bf00      	nop
 8011b22:	3710      	adds	r7, #16
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	0801a2a4 	.word	0x0801a2a4

08011b2c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b38:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011b3a:	2108      	movs	r1, #8
 8011b3c:	68f8      	ldr	r0, [r7, #12]
 8011b3e:	f001 f83d 	bl	8012bbc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	331c      	adds	r3, #28
 8011b46:	2200      	movs	r2, #0
 8011b48:	4619      	mov	r1, r3
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f002 fb3e 	bl	80141cc <etharp_query>
 8011b50:	4603      	mov	r3, r0
 8011b52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	799b      	ldrb	r3, [r3, #6]
 8011b58:	2bff      	cmp	r3, #255	; 0xff
 8011b5a:	d005      	beq.n	8011b68 <dhcp_check+0x3c>
    dhcp->tries++;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	799b      	ldrb	r3, [r3, #6]
 8011b60:	3301      	adds	r3, #1
 8011b62:	b2da      	uxtb	r2, r3
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011b6c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b6e:	893b      	ldrh	r3, [r7, #8]
 8011b70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011b74:	4a06      	ldr	r2, [pc, #24]	; (8011b90 <dhcp_check+0x64>)
 8011b76:	fb82 1203 	smull	r1, r2, r2, r3
 8011b7a:	1152      	asrs	r2, r2, #5
 8011b7c:	17db      	asrs	r3, r3, #31
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	b29a      	uxth	r2, r3
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8011b86:	bf00      	nop
 8011b88:	3710      	adds	r7, #16
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	10624dd3 	.word	0x10624dd3

08011b94 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b084      	sub	sp, #16
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
 8011b9c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011ba4:	4b0c      	ldr	r3, [pc, #48]	; (8011bd8 <dhcp_handle_offer+0x44>)
 8011ba6:	789b      	ldrb	r3, [r3, #2]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d011      	beq.n	8011bd0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8011bb2:	4b0a      	ldr	r3, [pc, #40]	; (8011bdc <dhcp_handle_offer+0x48>)
 8011bb4:	689b      	ldr	r3, [r3, #8]
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7f8 f947 	bl	8009e4a <lwip_htonl>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	691a      	ldr	r2, [r3, #16]
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 f808 	bl	8011be0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8011bd0:	bf00      	nop
 8011bd2:	3710      	adds	r7, #16
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	bd80      	pop	{r7, pc}
 8011bd8:	2000b934 	.word	0x2000b934
 8011bdc:	2000b93c 	.word	0x2000b93c

08011be0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8011be0:	b5b0      	push	{r4, r5, r7, lr}
 8011be2:	b08a      	sub	sp, #40	; 0x28
 8011be4:	af02      	add	r7, sp, #8
 8011be6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d109      	bne.n	8011c02 <dhcp_select+0x22>
 8011bee:	4b71      	ldr	r3, [pc, #452]	; (8011db4 <dhcp_select+0x1d4>)
 8011bf0:	f240 1277 	movw	r2, #375	; 0x177
 8011bf4:	4970      	ldr	r1, [pc, #448]	; (8011db8 <dhcp_select+0x1d8>)
 8011bf6:	4871      	ldr	r0, [pc, #452]	; (8011dbc <dhcp_select+0x1dc>)
 8011bf8:	f004 fa44 	bl	8016084 <iprintf>
 8011bfc:	f06f 030f 	mvn.w	r3, #15
 8011c00:	e0d3      	b.n	8011daa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c06:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011c08:	69bb      	ldr	r3, [r7, #24]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d109      	bne.n	8011c22 <dhcp_select+0x42>
 8011c0e:	4b69      	ldr	r3, [pc, #420]	; (8011db4 <dhcp_select+0x1d4>)
 8011c10:	f240 1279 	movw	r2, #377	; 0x179
 8011c14:	496a      	ldr	r1, [pc, #424]	; (8011dc0 <dhcp_select+0x1e0>)
 8011c16:	4869      	ldr	r0, [pc, #420]	; (8011dbc <dhcp_select+0x1dc>)
 8011c18:	f004 fa34 	bl	8016084 <iprintf>
 8011c1c:	f06f 0305 	mvn.w	r3, #5
 8011c20:	e0c3      	b.n	8011daa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011c22:	2101      	movs	r1, #1
 8011c24:	69b8      	ldr	r0, [r7, #24]
 8011c26:	f000 ffc9 	bl	8012bbc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011c2a:	f107 030c 	add.w	r3, r7, #12
 8011c2e:	2203      	movs	r2, #3
 8011c30:	69b9      	ldr	r1, [r7, #24]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f001 fc4e 	bl	80134d4 <dhcp_create_msg>
 8011c38:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011c3a:	697b      	ldr	r3, [r7, #20]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f000 8085 	beq.w	8011d4c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011c42:	697b      	ldr	r3, [r7, #20]
 8011c44:	685b      	ldr	r3, [r3, #4]
 8011c46:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011c48:	89b8      	ldrh	r0, [r7, #12]
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c50:	2302      	movs	r3, #2
 8011c52:	2239      	movs	r2, #57	; 0x39
 8011c54:	f000 ffcc 	bl	8012bf0 <dhcp_option>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011c5c:	89b8      	ldrh	r0, [r7, #12]
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c68:	461a      	mov	r2, r3
 8011c6a:	f001 f81b 	bl	8012ca4 <dhcp_option_short>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011c72:	89b8      	ldrh	r0, [r7, #12]
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c7a:	2304      	movs	r3, #4
 8011c7c:	2232      	movs	r2, #50	; 0x32
 8011c7e:	f000 ffb7 	bl	8012bf0 <dhcp_option>
 8011c82:	4603      	mov	r3, r0
 8011c84:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011c86:	89bc      	ldrh	r4, [r7, #12]
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011c8e:	69bb      	ldr	r3, [r7, #24]
 8011c90:	69db      	ldr	r3, [r3, #28]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f8 f8d9 	bl	8009e4a <lwip_htonl>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	461a      	mov	r2, r3
 8011c9c:	4629      	mov	r1, r5
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f001 f832 	bl	8012d08 <dhcp_option_long>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011ca8:	89b8      	ldrh	r0, [r7, #12]
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cb0:	2304      	movs	r3, #4
 8011cb2:	2236      	movs	r2, #54	; 0x36
 8011cb4:	f000 ff9c 	bl	8012bf0 <dhcp_option>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011cbc:	89bc      	ldrh	r4, [r7, #12]
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011cc4:	69bb      	ldr	r3, [r7, #24]
 8011cc6:	699b      	ldr	r3, [r3, #24]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7f8 f8be 	bl	8009e4a <lwip_htonl>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	4629      	mov	r1, r5
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	f001 f817 	bl	8012d08 <dhcp_option_long>
 8011cda:	4603      	mov	r3, r0
 8011cdc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011cde:	89b8      	ldrh	r0, [r7, #12]
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	2237      	movs	r2, #55	; 0x37
 8011cea:	f000 ff81 	bl	8012bf0 <dhcp_option>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	77bb      	strb	r3, [r7, #30]
 8011cf6:	e00e      	b.n	8011d16 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011cf8:	89b8      	ldrh	r0, [r7, #12]
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d00:	7fbb      	ldrb	r3, [r7, #30]
 8011d02:	4a30      	ldr	r2, [pc, #192]	; (8011dc4 <dhcp_select+0x1e4>)
 8011d04:	5cd3      	ldrb	r3, [r2, r3]
 8011d06:	461a      	mov	r2, r3
 8011d08:	f000 ffa6 	bl	8012c58 <dhcp_option_byte>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d10:	7fbb      	ldrb	r3, [r7, #30]
 8011d12:	3301      	adds	r3, #1
 8011d14:	77bb      	strb	r3, [r7, #30]
 8011d16:	7fbb      	ldrb	r3, [r7, #30]
 8011d18:	2b02      	cmp	r3, #2
 8011d1a:	d9ed      	bls.n	8011cf8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d1c:	89b8      	ldrh	r0, [r7, #12]
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	33f0      	adds	r3, #240	; 0xf0
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	4619      	mov	r1, r3
 8011d26:	f001 fcab 	bl	8013680 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011d2a:	4b27      	ldr	r3, [pc, #156]	; (8011dc8 <dhcp_select+0x1e8>)
 8011d2c:	6818      	ldr	r0, [r3, #0]
 8011d2e:	4b27      	ldr	r3, [pc, #156]	; (8011dcc <dhcp_select+0x1ec>)
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	9300      	str	r3, [sp, #0]
 8011d36:	2343      	movs	r3, #67	; 0x43
 8011d38:	4a25      	ldr	r2, [pc, #148]	; (8011dd0 <dhcp_select+0x1f0>)
 8011d3a:	6979      	ldr	r1, [r7, #20]
 8011d3c:	f7ff fbda 	bl	80114f4 <udp_sendto_if_src>
 8011d40:	4603      	mov	r3, r0
 8011d42:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011d44:	6978      	ldr	r0, [r7, #20]
 8011d46:	f7f9 fc23 	bl	800b590 <pbuf_free>
 8011d4a:	e001      	b.n	8011d50 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011d4c:	23ff      	movs	r3, #255	; 0xff
 8011d4e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	799b      	ldrb	r3, [r3, #6]
 8011d54:	2bff      	cmp	r3, #255	; 0xff
 8011d56:	d005      	beq.n	8011d64 <dhcp_select+0x184>
    dhcp->tries++;
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	799b      	ldrb	r3, [r3, #6]
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	69bb      	ldr	r3, [r7, #24]
 8011d62:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	799b      	ldrb	r3, [r3, #6]
 8011d68:	2b05      	cmp	r3, #5
 8011d6a:	d80d      	bhi.n	8011d88 <dhcp_select+0x1a8>
 8011d6c:	69bb      	ldr	r3, [r7, #24]
 8011d6e:	799b      	ldrb	r3, [r3, #6]
 8011d70:	461a      	mov	r2, r3
 8011d72:	2301      	movs	r3, #1
 8011d74:	4093      	lsls	r3, r2
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	461a      	mov	r2, r3
 8011d7a:	0152      	lsls	r2, r2, #5
 8011d7c:	1ad2      	subs	r2, r2, r3
 8011d7e:	0092      	lsls	r2, r2, #2
 8011d80:	4413      	add	r3, r2
 8011d82:	00db      	lsls	r3, r3, #3
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	e001      	b.n	8011d8c <dhcp_select+0x1ac>
 8011d88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011d8c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011d8e:	89fb      	ldrh	r3, [r7, #14]
 8011d90:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011d94:	4a0f      	ldr	r2, [pc, #60]	; (8011dd4 <dhcp_select+0x1f4>)
 8011d96:	fb82 1203 	smull	r1, r2, r2, r3
 8011d9a:	1152      	asrs	r2, r2, #5
 8011d9c:	17db      	asrs	r3, r3, #31
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011da6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3720      	adds	r7, #32
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bdb0      	pop	{r4, r5, r7, pc}
 8011db2:	bf00      	nop
 8011db4:	080196e4 	.word	0x080196e4
 8011db8:	08019790 	.word	0x08019790
 8011dbc:	08019744 	.word	0x08019744
 8011dc0:	080197ac 	.word	0x080197ac
 8011dc4:	2000001c 	.word	0x2000001c
 8011dc8:	20004a48 	.word	0x20004a48
 8011dcc:	0801a2a4 	.word	0x0801a2a4
 8011dd0:	0801a2a8 	.word	0x0801a2a8
 8011dd4:	10624dd3 	.word	0x10624dd3

08011dd8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b082      	sub	sp, #8
 8011ddc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8011dde:	4b27      	ldr	r3, [pc, #156]	; (8011e7c <dhcp_coarse_tmr+0xa4>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	607b      	str	r3, [r7, #4]
 8011de4:	e042      	b.n	8011e6c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dea:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d039      	beq.n	8011e66 <dhcp_coarse_tmr+0x8e>
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	795b      	ldrb	r3, [r3, #5]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d035      	beq.n	8011e66 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	8a9b      	ldrh	r3, [r3, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d012      	beq.n	8011e28 <dhcp_coarse_tmr+0x50>
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	8a5b      	ldrh	r3, [r3, #18]
 8011e06:	3301      	adds	r3, #1
 8011e08:	b29a      	uxth	r2, r3
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	825a      	strh	r2, [r3, #18]
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	8a5a      	ldrh	r2, [r3, #18]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	8a9b      	ldrh	r3, [r3, #20]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d106      	bne.n	8011e28 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 fe34 	bl	8012a88 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f000 f96b 	bl	80120fc <dhcp_start>
 8011e26:	e01e      	b.n	8011e66 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	8a1b      	ldrh	r3, [r3, #16]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00b      	beq.n	8011e48 <dhcp_coarse_tmr+0x70>
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	8a1b      	ldrh	r3, [r3, #16]
 8011e34:	1e5a      	subs	r2, r3, #1
 8011e36:	b291      	uxth	r1, r2
 8011e38:	683a      	ldr	r2, [r7, #0]
 8011e3a:	8211      	strh	r1, [r2, #16]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d103      	bne.n	8011e48 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f000 f8c7 	bl	8011fd4 <dhcp_t2_timeout>
 8011e46:	e00e      	b.n	8011e66 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	89db      	ldrh	r3, [r3, #14]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d00a      	beq.n	8011e66 <dhcp_coarse_tmr+0x8e>
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	89db      	ldrh	r3, [r3, #14]
 8011e54:	1e5a      	subs	r2, r3, #1
 8011e56:	b291      	uxth	r1, r2
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	81d1      	strh	r1, [r2, #14]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	d102      	bne.n	8011e66 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f000 f888 	bl	8011f76 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	607b      	str	r3, [r7, #4]
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d1b9      	bne.n	8011de6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011e72:	bf00      	nop
 8011e74:	bf00      	nop
 8011e76:	3708      	adds	r7, #8
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	2000b908 	.word	0x2000b908

08011e80 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011e86:	4b16      	ldr	r3, [pc, #88]	; (8011ee0 <dhcp_fine_tmr+0x60>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	607b      	str	r3, [r7, #4]
 8011e8c:	e020      	b.n	8011ed0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e92:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d017      	beq.n	8011eca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	891b      	ldrh	r3, [r3, #8]
 8011e9e:	2b01      	cmp	r3, #1
 8011ea0:	d906      	bls.n	8011eb0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	891b      	ldrh	r3, [r3, #8]
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	811a      	strh	r2, [r3, #8]
 8011eae:	e00c      	b.n	8011eca <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	891b      	ldrh	r3, [r3, #8]
 8011eb4:	2b01      	cmp	r3, #1
 8011eb6:	d108      	bne.n	8011eca <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	891b      	ldrh	r3, [r3, #8]
 8011ebc:	3b01      	subs	r3, #1
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 f80d 	bl	8011ee4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	607b      	str	r3, [r7, #4]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1db      	bne.n	8011e8e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011ed6:	bf00      	nop
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	2000b908 	.word	0x2000b908

08011ee4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ef0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	795b      	ldrb	r3, [r3, #5]
 8011ef6:	2b0c      	cmp	r3, #12
 8011ef8:	d003      	beq.n	8011f02 <dhcp_timeout+0x1e>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	795b      	ldrb	r3, [r3, #5]
 8011efe:	2b06      	cmp	r3, #6
 8011f00:	d103      	bne.n	8011f0a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	f000 fa56 	bl	80123b4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011f08:	e031      	b.n	8011f6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	795b      	ldrb	r3, [r3, #5]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d10e      	bne.n	8011f30 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	799b      	ldrb	r3, [r3, #6]
 8011f16:	2b05      	cmp	r3, #5
 8011f18:	d803      	bhi.n	8011f22 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f7ff fe60 	bl	8011be0 <dhcp_select>
}
 8011f20:	e025      	b.n	8011f6e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 fdb0 	bl	8012a88 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 f8e7 	bl	80120fc <dhcp_start>
}
 8011f2e:	e01e      	b.n	8011f6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	795b      	ldrb	r3, [r3, #5]
 8011f34:	2b08      	cmp	r3, #8
 8011f36:	d10b      	bne.n	8011f50 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	799b      	ldrb	r3, [r3, #6]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d803      	bhi.n	8011f48 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff fdf3 	bl	8011b2c <dhcp_check>
}
 8011f46:	e012      	b.n	8011f6e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fad5 	bl	80124f8 <dhcp_bind>
}
 8011f4e:	e00e      	b.n	8011f6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	795b      	ldrb	r3, [r3, #5]
 8011f54:	2b03      	cmp	r3, #3
 8011f56:	d10a      	bne.n	8011f6e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	799b      	ldrb	r3, [r3, #6]
 8011f5c:	2b01      	cmp	r3, #1
 8011f5e:	d803      	bhi.n	8011f68 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f000 fcdb 	bl	801291c <dhcp_reboot>
}
 8011f66:	e002      	b.n	8011f6e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fa23 	bl	80123b4 <dhcp_discover>
}
 8011f6e:	bf00      	nop
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b084      	sub	sp, #16
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	795b      	ldrb	r3, [r3, #5]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d007      	beq.n	8011f9c <dhcp_t1_timeout+0x26>
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	795b      	ldrb	r3, [r3, #5]
 8011f90:	2b0a      	cmp	r3, #10
 8011f92:	d003      	beq.n	8011f9c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011f98:	2b05      	cmp	r3, #5
 8011f9a:	d117      	bne.n	8011fcc <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f000 fb85 	bl	80126ac <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	899b      	ldrh	r3, [r3, #12]
 8011fa6:	461a      	mov	r2, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	8a5b      	ldrh	r3, [r3, #18]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	dd0c      	ble.n	8011fcc <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	899b      	ldrh	r3, [r3, #12]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	8a5b      	ldrh	r3, [r3, #18]
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	da00      	bge.n	8011fc4 <dhcp_t1_timeout+0x4e>
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	105b      	asrs	r3, r3, #1
 8011fc6:	b29a      	uxth	r2, r3
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011fcc:	bf00      	nop
 8011fce:	3710      	adds	r7, #16
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b084      	sub	sp, #16
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fe0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	795b      	ldrb	r3, [r3, #5]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d00b      	beq.n	8012002 <dhcp_t2_timeout+0x2e>
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	795b      	ldrb	r3, [r3, #5]
 8011fee:	2b0a      	cmp	r3, #10
 8011ff0:	d007      	beq.n	8012002 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011ff6:	2b05      	cmp	r3, #5
 8011ff8:	d003      	beq.n	8012002 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	795b      	ldrb	r3, [r3, #5]
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	d117      	bne.n	8012032 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 fbee 	bl	80127e4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	8a9b      	ldrh	r3, [r3, #20]
 801200c:	461a      	mov	r2, r3
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	8a5b      	ldrh	r3, [r3, #18]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	2b01      	cmp	r3, #1
 8012016:	dd0c      	ble.n	8012032 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	8a9b      	ldrh	r3, [r3, #20]
 801201c:	461a      	mov	r2, r3
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	8a5b      	ldrh	r3, [r3, #18]
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	2b00      	cmp	r3, #0
 8012026:	da00      	bge.n	801202a <dhcp_t2_timeout+0x56>
 8012028:	3301      	adds	r3, #1
 801202a:	105b      	asrs	r3, r3, #1
 801202c:	b29a      	uxth	r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012032:	bf00      	nop
 8012034:	3710      	adds	r7, #16
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801204a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2200      	movs	r2, #0
 8012050:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2200      	movs	r2, #0
 8012056:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012058:	4b26      	ldr	r3, [pc, #152]	; (80120f4 <dhcp_handle_ack+0xb8>)
 801205a:	78db      	ldrb	r3, [r3, #3]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d003      	beq.n	8012068 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012060:	4b25      	ldr	r3, [pc, #148]	; (80120f8 <dhcp_handle_ack+0xbc>)
 8012062:	68da      	ldr	r2, [r3, #12]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012068:	4b22      	ldr	r3, [pc, #136]	; (80120f4 <dhcp_handle_ack+0xb8>)
 801206a:	791b      	ldrb	r3, [r3, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d004      	beq.n	801207a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012070:	4b21      	ldr	r3, [pc, #132]	; (80120f8 <dhcp_handle_ack+0xbc>)
 8012072:	691a      	ldr	r2, [r3, #16]
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	62da      	str	r2, [r3, #44]	; 0x2c
 8012078:	e004      	b.n	8012084 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801207e:	085a      	lsrs	r2, r3, #1
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012084:	4b1b      	ldr	r3, [pc, #108]	; (80120f4 <dhcp_handle_ack+0xb8>)
 8012086:	795b      	ldrb	r3, [r3, #5]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d004      	beq.n	8012096 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801208c:	4b1a      	ldr	r3, [pc, #104]	; (80120f8 <dhcp_handle_ack+0xbc>)
 801208e:	695a      	ldr	r2, [r3, #20]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	631a      	str	r2, [r3, #48]	; 0x30
 8012094:	e007      	b.n	80120a6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801209a:	4613      	mov	r3, r2
 801209c:	00db      	lsls	r3, r3, #3
 801209e:	1a9b      	subs	r3, r3, r2
 80120a0:	08da      	lsrs	r2, r3, #3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	691a      	ldr	r2, [r3, #16]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80120ae:	4b11      	ldr	r3, [pc, #68]	; (80120f4 <dhcp_handle_ack+0xb8>)
 80120b0:	799b      	ldrb	r3, [r3, #6]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00b      	beq.n	80120ce <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80120b6:	4b10      	ldr	r3, [pc, #64]	; (80120f8 <dhcp_handle_ack+0xbc>)
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7f7 fec5 	bl	8009e4a <lwip_htonl>
 80120c0:	4602      	mov	r2, r0
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2201      	movs	r2, #1
 80120ca:	71da      	strb	r2, [r3, #7]
 80120cc:	e002      	b.n	80120d4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80120d4:	4b07      	ldr	r3, [pc, #28]	; (80120f4 <dhcp_handle_ack+0xb8>)
 80120d6:	79db      	ldrb	r3, [r3, #7]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d007      	beq.n	80120ec <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80120dc:	4b06      	ldr	r3, [pc, #24]	; (80120f8 <dhcp_handle_ack+0xbc>)
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	4618      	mov	r0, r3
 80120e2:	f7f7 feb2 	bl	8009e4a <lwip_htonl>
 80120e6:	4602      	mov	r2, r0
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80120ec:	bf00      	nop
 80120ee:	3710      	adds	r7, #16
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	2000b934 	.word	0x2000b934
 80120f8:	2000b93c 	.word	0x2000b93c

080120fc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b084      	sub	sp, #16
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d109      	bne.n	801211e <dhcp_start+0x22>
 801210a:	4b37      	ldr	r3, [pc, #220]	; (80121e8 <dhcp_start+0xec>)
 801210c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012110:	4936      	ldr	r1, [pc, #216]	; (80121ec <dhcp_start+0xf0>)
 8012112:	4837      	ldr	r0, [pc, #220]	; (80121f0 <dhcp_start+0xf4>)
 8012114:	f003 ffb6 	bl	8016084 <iprintf>
 8012118:	f06f 030f 	mvn.w	r3, #15
 801211c:	e060      	b.n	80121e0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012124:	f003 0301 	and.w	r3, r3, #1
 8012128:	2b00      	cmp	r3, #0
 801212a:	d109      	bne.n	8012140 <dhcp_start+0x44>
 801212c:	4b2e      	ldr	r3, [pc, #184]	; (80121e8 <dhcp_start+0xec>)
 801212e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012132:	4930      	ldr	r1, [pc, #192]	; (80121f4 <dhcp_start+0xf8>)
 8012134:	482e      	ldr	r0, [pc, #184]	; (80121f0 <dhcp_start+0xf4>)
 8012136:	f003 ffa5 	bl	8016084 <iprintf>
 801213a:	f06f 030f 	mvn.w	r3, #15
 801213e:	e04f      	b.n	80121e0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012144:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801214a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801214e:	d202      	bcs.n	8012156 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012150:	f04f 33ff 	mov.w	r3, #4294967295
 8012154:	e044      	b.n	80121e0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d10d      	bne.n	8012178 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801215c:	2034      	movs	r0, #52	; 0x34
 801215e:	f7f8 f993 	bl	800a488 <mem_malloc>
 8012162:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d102      	bne.n	8012170 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801216a:	f04f 33ff 	mov.w	r3, #4294967295
 801216e:	e037      	b.n	80121e0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	625a      	str	r2, [r3, #36]	; 0x24
 8012176:	e005      	b.n	8012184 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	791b      	ldrb	r3, [r3, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012180:	f7ff fc90 	bl	8011aa4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012184:	2234      	movs	r2, #52	; 0x34
 8012186:	2100      	movs	r1, #0
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f003 ff73 	bl	8016074 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801218e:	f7ff fc37 	bl	8011a00 <dhcp_inc_pcb_refcount>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d002      	beq.n	801219e <dhcp_start+0xa2>
    return ERR_MEM;
 8012198:	f04f 33ff 	mov.w	r3, #4294967295
 801219c:	e020      	b.n	80121e0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2201      	movs	r2, #1
 80121a2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80121aa:	f003 0304 	and.w	r3, r3, #4
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d105      	bne.n	80121be <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80121b2:	2102      	movs	r1, #2
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f000 fd01 	bl	8012bbc <dhcp_set_state>
    return ERR_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e010      	b.n	80121e0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 f8f8 	bl	80123b4 <dhcp_discover>
 80121c4:	4603      	mov	r3, r0
 80121c6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80121c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d005      	beq.n	80121dc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 fc59 	bl	8012a88 <dhcp_release_and_stop>
    return ERR_MEM;
 80121d6:	f04f 33ff 	mov.w	r3, #4294967295
 80121da:	e001      	b.n	80121e0 <dhcp_start+0xe4>
  }
  return result;
 80121dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80121e0:	4618      	mov	r0, r3
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	080196e4 	.word	0x080196e4
 80121ec:	080197c8 	.word	0x080197c8
 80121f0:	08019744 	.word	0x08019744
 80121f4:	0801980c 	.word	0x0801980c

080121f8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b084      	sub	sp, #16
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012204:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d025      	beq.n	8012258 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	795b      	ldrb	r3, [r3, #5]
 8012210:	2b0a      	cmp	r3, #10
 8012212:	d008      	beq.n	8012226 <dhcp_network_changed+0x2e>
 8012214:	2b0a      	cmp	r3, #10
 8012216:	dc0d      	bgt.n	8012234 <dhcp_network_changed+0x3c>
 8012218:	2b00      	cmp	r3, #0
 801221a:	d01f      	beq.n	801225c <dhcp_network_changed+0x64>
 801221c:	2b00      	cmp	r3, #0
 801221e:	db09      	blt.n	8012234 <dhcp_network_changed+0x3c>
 8012220:	3b03      	subs	r3, #3
 8012222:	2b02      	cmp	r3, #2
 8012224:	d806      	bhi.n	8012234 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2200      	movs	r2, #0
 801222a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 fb75 	bl	801291c <dhcp_reboot>
      break;
 8012232:	e014      	b.n	801225e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	795b      	ldrb	r3, [r3, #5]
 8012238:	2b0c      	cmp	r3, #12
 801223a:	d906      	bls.n	801224a <dhcp_network_changed+0x52>
 801223c:	4b09      	ldr	r3, [pc, #36]	; (8012264 <dhcp_network_changed+0x6c>)
 801223e:	f240 326d 	movw	r2, #877	; 0x36d
 8012242:	4909      	ldr	r1, [pc, #36]	; (8012268 <dhcp_network_changed+0x70>)
 8012244:	4809      	ldr	r0, [pc, #36]	; (801226c <dhcp_network_changed+0x74>)
 8012246:	f003 ff1d 	bl	8016084 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2200      	movs	r2, #0
 801224e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f000 f8af 	bl	80123b4 <dhcp_discover>
      break;
 8012256:	e002      	b.n	801225e <dhcp_network_changed+0x66>
    return;
 8012258:	bf00      	nop
 801225a:	e000      	b.n	801225e <dhcp_network_changed+0x66>
      break;
 801225c:	bf00      	nop
  }
}
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}
 8012264:	080196e4 	.word	0x080196e4
 8012268:	08019830 	.word	0x08019830
 801226c:	08019744 	.word	0x08019744

08012270 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d107      	bne.n	8012290 <dhcp_arp_reply+0x20>
 8012280:	4b0e      	ldr	r3, [pc, #56]	; (80122bc <dhcp_arp_reply+0x4c>)
 8012282:	f240 328b 	movw	r2, #907	; 0x38b
 8012286:	490e      	ldr	r1, [pc, #56]	; (80122c0 <dhcp_arp_reply+0x50>)
 8012288:	480e      	ldr	r0, [pc, #56]	; (80122c4 <dhcp_arp_reply+0x54>)
 801228a:	f003 fefb 	bl	8016084 <iprintf>
 801228e:	e012      	b.n	80122b6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012294:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d00c      	beq.n	80122b6 <dhcp_arp_reply+0x46>
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	795b      	ldrb	r3, [r3, #5]
 80122a0:	2b08      	cmp	r3, #8
 80122a2:	d108      	bne.n	80122b6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	69db      	ldr	r3, [r3, #28]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d102      	bne.n	80122b6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f809 	bl	80122c8 <dhcp_decline>
    }
  }
}
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	080196e4 	.word	0x080196e4
 80122c0:	080197c8 	.word	0x080197c8
 80122c4:	08019744 	.word	0x08019744

080122c8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80122c8:	b5b0      	push	{r4, r5, r7, lr}
 80122ca:	b08a      	sub	sp, #40	; 0x28
 80122cc:	af02      	add	r7, sp, #8
 80122ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80122d6:	210c      	movs	r1, #12
 80122d8:	69b8      	ldr	r0, [r7, #24]
 80122da:	f000 fc6f 	bl	8012bbc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80122de:	f107 030c 	add.w	r3, r7, #12
 80122e2:	2204      	movs	r2, #4
 80122e4:	69b9      	ldr	r1, [r7, #24]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f001 f8f4 	bl	80134d4 <dhcp_create_msg>
 80122ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d035      	beq.n	8012360 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80122fa:	89b8      	ldrh	r0, [r7, #12]
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012302:	2304      	movs	r3, #4
 8012304:	2232      	movs	r2, #50	; 0x32
 8012306:	f000 fc73 	bl	8012bf0 <dhcp_option>
 801230a:	4603      	mov	r3, r0
 801230c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801230e:	89bc      	ldrh	r4, [r7, #12]
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012316:	69bb      	ldr	r3, [r7, #24]
 8012318:	69db      	ldr	r3, [r3, #28]
 801231a:	4618      	mov	r0, r3
 801231c:	f7f7 fd95 	bl	8009e4a <lwip_htonl>
 8012320:	4603      	mov	r3, r0
 8012322:	461a      	mov	r2, r3
 8012324:	4629      	mov	r1, r5
 8012326:	4620      	mov	r0, r4
 8012328:	f000 fcee 	bl	8012d08 <dhcp_option_long>
 801232c:	4603      	mov	r3, r0
 801232e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012330:	89b8      	ldrh	r0, [r7, #12]
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	33f0      	adds	r3, #240	; 0xf0
 8012336:	697a      	ldr	r2, [r7, #20]
 8012338:	4619      	mov	r1, r3
 801233a:	f001 f9a1 	bl	8013680 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801233e:	4b19      	ldr	r3, [pc, #100]	; (80123a4 <dhcp_decline+0xdc>)
 8012340:	6818      	ldr	r0, [r3, #0]
 8012342:	4b19      	ldr	r3, [pc, #100]	; (80123a8 <dhcp_decline+0xe0>)
 8012344:	9301      	str	r3, [sp, #4]
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	2343      	movs	r3, #67	; 0x43
 801234c:	4a17      	ldr	r2, [pc, #92]	; (80123ac <dhcp_decline+0xe4>)
 801234e:	6979      	ldr	r1, [r7, #20]
 8012350:	f7ff f8d0 	bl	80114f4 <udp_sendto_if_src>
 8012354:	4603      	mov	r3, r0
 8012356:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012358:	6978      	ldr	r0, [r7, #20]
 801235a:	f7f9 f919 	bl	800b590 <pbuf_free>
 801235e:	e001      	b.n	8012364 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012360:	23ff      	movs	r3, #255	; 0xff
 8012362:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	799b      	ldrb	r3, [r3, #6]
 8012368:	2bff      	cmp	r3, #255	; 0xff
 801236a:	d005      	beq.n	8012378 <dhcp_decline+0xb0>
    dhcp->tries++;
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	799b      	ldrb	r3, [r3, #6]
 8012370:	3301      	adds	r3, #1
 8012372:	b2da      	uxtb	r2, r3
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012378:	f242 7310 	movw	r3, #10000	; 0x2710
 801237c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801237e:	89fb      	ldrh	r3, [r7, #14]
 8012380:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012384:	4a0a      	ldr	r2, [pc, #40]	; (80123b0 <dhcp_decline+0xe8>)
 8012386:	fb82 1203 	smull	r1, r2, r2, r3
 801238a:	1152      	asrs	r2, r2, #5
 801238c:	17db      	asrs	r3, r3, #31
 801238e:	1ad3      	subs	r3, r2, r3
 8012390:	b29a      	uxth	r2, r3
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012396:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801239a:	4618      	mov	r0, r3
 801239c:	3720      	adds	r7, #32
 801239e:	46bd      	mov	sp, r7
 80123a0:	bdb0      	pop	{r4, r5, r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20004a48 	.word	0x20004a48
 80123a8:	0801a2a4 	.word	0x0801a2a4
 80123ac:	0801a2a8 	.word	0x0801a2a8
 80123b0:	10624dd3 	.word	0x10624dd3

080123b4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b08a      	sub	sp, #40	; 0x28
 80123b8:	af02      	add	r7, sp, #8
 80123ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80123c2:	2300      	movs	r3, #0
 80123c4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80123c6:	69bb      	ldr	r3, [r7, #24]
 80123c8:	2200      	movs	r2, #0
 80123ca:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80123cc:	2106      	movs	r1, #6
 80123ce:	69b8      	ldr	r0, [r7, #24]
 80123d0:	f000 fbf4 	bl	8012bbc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80123d4:	f107 0308 	add.w	r3, r7, #8
 80123d8:	2201      	movs	r2, #1
 80123da:	69b9      	ldr	r1, [r7, #24]
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f001 f879 	bl	80134d4 <dhcp_create_msg>
 80123e2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d04b      	beq.n	8012482 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80123f0:	8938      	ldrh	r0, [r7, #8]
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123f8:	2302      	movs	r3, #2
 80123fa:	2239      	movs	r2, #57	; 0x39
 80123fc:	f000 fbf8 	bl	8012bf0 <dhcp_option>
 8012400:	4603      	mov	r3, r0
 8012402:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012404:	8938      	ldrh	r0, [r7, #8]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012410:	461a      	mov	r2, r3
 8012412:	f000 fc47 	bl	8012ca4 <dhcp_option_short>
 8012416:	4603      	mov	r3, r0
 8012418:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801241a:	8938      	ldrh	r0, [r7, #8]
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012422:	2303      	movs	r3, #3
 8012424:	2237      	movs	r2, #55	; 0x37
 8012426:	f000 fbe3 	bl	8012bf0 <dhcp_option>
 801242a:	4603      	mov	r3, r0
 801242c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801242e:	2300      	movs	r3, #0
 8012430:	77fb      	strb	r3, [r7, #31]
 8012432:	e00e      	b.n	8012452 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012434:	8938      	ldrh	r0, [r7, #8]
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801243c:	7ffb      	ldrb	r3, [r7, #31]
 801243e:	4a29      	ldr	r2, [pc, #164]	; (80124e4 <dhcp_discover+0x130>)
 8012440:	5cd3      	ldrb	r3, [r2, r3]
 8012442:	461a      	mov	r2, r3
 8012444:	f000 fc08 	bl	8012c58 <dhcp_option_byte>
 8012448:	4603      	mov	r3, r0
 801244a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801244c:	7ffb      	ldrb	r3, [r7, #31]
 801244e:	3301      	adds	r3, #1
 8012450:	77fb      	strb	r3, [r7, #31]
 8012452:	7ffb      	ldrb	r3, [r7, #31]
 8012454:	2b02      	cmp	r3, #2
 8012456:	d9ed      	bls.n	8012434 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012458:	8938      	ldrh	r0, [r7, #8]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	33f0      	adds	r3, #240	; 0xf0
 801245e:	693a      	ldr	r2, [r7, #16]
 8012460:	4619      	mov	r1, r3
 8012462:	f001 f90d 	bl	8013680 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012466:	4b20      	ldr	r3, [pc, #128]	; (80124e8 <dhcp_discover+0x134>)
 8012468:	6818      	ldr	r0, [r3, #0]
 801246a:	4b20      	ldr	r3, [pc, #128]	; (80124ec <dhcp_discover+0x138>)
 801246c:	9301      	str	r3, [sp, #4]
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	9300      	str	r3, [sp, #0]
 8012472:	2343      	movs	r3, #67	; 0x43
 8012474:	4a1e      	ldr	r2, [pc, #120]	; (80124f0 <dhcp_discover+0x13c>)
 8012476:	6939      	ldr	r1, [r7, #16]
 8012478:	f7ff f83c 	bl	80114f4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801247c:	6938      	ldr	r0, [r7, #16]
 801247e:	f7f9 f887 	bl	800b590 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012482:	69bb      	ldr	r3, [r7, #24]
 8012484:	799b      	ldrb	r3, [r3, #6]
 8012486:	2bff      	cmp	r3, #255	; 0xff
 8012488:	d005      	beq.n	8012496 <dhcp_discover+0xe2>
    dhcp->tries++;
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	799b      	ldrb	r3, [r3, #6]
 801248e:	3301      	adds	r3, #1
 8012490:	b2da      	uxtb	r2, r3
 8012492:	69bb      	ldr	r3, [r7, #24]
 8012494:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	799b      	ldrb	r3, [r3, #6]
 801249a:	2b05      	cmp	r3, #5
 801249c:	d80d      	bhi.n	80124ba <dhcp_discover+0x106>
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	799b      	ldrb	r3, [r3, #6]
 80124a2:	461a      	mov	r2, r3
 80124a4:	2301      	movs	r3, #1
 80124a6:	4093      	lsls	r3, r2
 80124a8:	b29b      	uxth	r3, r3
 80124aa:	461a      	mov	r2, r3
 80124ac:	0152      	lsls	r2, r2, #5
 80124ae:	1ad2      	subs	r2, r2, r3
 80124b0:	0092      	lsls	r2, r2, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	00db      	lsls	r3, r3, #3
 80124b6:	b29b      	uxth	r3, r3
 80124b8:	e001      	b.n	80124be <dhcp_discover+0x10a>
 80124ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80124be:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80124c0:	897b      	ldrh	r3, [r7, #10]
 80124c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80124c6:	4a0b      	ldr	r2, [pc, #44]	; (80124f4 <dhcp_discover+0x140>)
 80124c8:	fb82 1203 	smull	r1, r2, r2, r3
 80124cc:	1152      	asrs	r2, r2, #5
 80124ce:	17db      	asrs	r3, r3, #31
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80124d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3720      	adds	r7, #32
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}
 80124e4:	2000001c 	.word	0x2000001c
 80124e8:	20004a48 	.word	0x20004a48
 80124ec:	0801a2a4 	.word	0x0801a2a4
 80124f0:	0801a2a8 	.word	0x0801a2a8
 80124f4:	10624dd3 	.word	0x10624dd3

080124f8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b088      	sub	sp, #32
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d107      	bne.n	8012516 <dhcp_bind+0x1e>
 8012506:	4b64      	ldr	r3, [pc, #400]	; (8012698 <dhcp_bind+0x1a0>)
 8012508:	f240 4215 	movw	r2, #1045	; 0x415
 801250c:	4963      	ldr	r1, [pc, #396]	; (801269c <dhcp_bind+0x1a4>)
 801250e:	4864      	ldr	r0, [pc, #400]	; (80126a0 <dhcp_bind+0x1a8>)
 8012510:	f003 fdb8 	bl	8016084 <iprintf>
 8012514:	e0bc      	b.n	8012690 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801251a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801251c:	69bb      	ldr	r3, [r7, #24]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d107      	bne.n	8012532 <dhcp_bind+0x3a>
 8012522:	4b5d      	ldr	r3, [pc, #372]	; (8012698 <dhcp_bind+0x1a0>)
 8012524:	f240 4217 	movw	r2, #1047	; 0x417
 8012528:	495e      	ldr	r1, [pc, #376]	; (80126a4 <dhcp_bind+0x1ac>)
 801252a:	485d      	ldr	r0, [pc, #372]	; (80126a0 <dhcp_bind+0x1a8>)
 801252c:	f003 fdaa 	bl	8016084 <iprintf>
 8012530:	e0ae      	b.n	8012690 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	2200      	movs	r2, #0
 8012536:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012540:	d019      	beq.n	8012576 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012546:	331e      	adds	r3, #30
 8012548:	4a57      	ldr	r2, [pc, #348]	; (80126a8 <dhcp_bind+0x1b0>)
 801254a:	fba2 2303 	umull	r2, r3, r2, r3
 801254e:	095b      	lsrs	r3, r3, #5
 8012550:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012552:	69fb      	ldr	r3, [r7, #28]
 8012554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012558:	d302      	bcc.n	8012560 <dhcp_bind+0x68>
      timeout = 0xffff;
 801255a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801255e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	b29a      	uxth	r2, r3
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	8a9b      	ldrh	r3, [r3, #20]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d102      	bne.n	8012576 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	2201      	movs	r2, #1
 8012574:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012576:	69bb      	ldr	r3, [r7, #24]
 8012578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801257a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257e:	d01d      	beq.n	80125bc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012584:	331e      	adds	r3, #30
 8012586:	4a48      	ldr	r2, [pc, #288]	; (80126a8 <dhcp_bind+0x1b0>)
 8012588:	fba2 2303 	umull	r2, r3, r2, r3
 801258c:	095b      	lsrs	r3, r3, #5
 801258e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012596:	d302      	bcc.n	801259e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801259c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	69bb      	ldr	r3, [r7, #24]
 80125a4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80125a6:	69bb      	ldr	r3, [r7, #24]
 80125a8:	895b      	ldrh	r3, [r3, #10]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d102      	bne.n	80125b4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	2201      	movs	r2, #1
 80125b2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80125b4:	69bb      	ldr	r3, [r7, #24]
 80125b6:	895a      	ldrh	r2, [r3, #10]
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c4:	d01d      	beq.n	8012602 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125ca:	331e      	adds	r3, #30
 80125cc:	4a36      	ldr	r2, [pc, #216]	; (80126a8 <dhcp_bind+0x1b0>)
 80125ce:	fba2 2303 	umull	r2, r3, r2, r3
 80125d2:	095b      	lsrs	r3, r3, #5
 80125d4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80125d6:	69fb      	ldr	r3, [r7, #28]
 80125d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80125dc:	d302      	bcc.n	80125e4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80125de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80125e2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	899b      	ldrh	r3, [r3, #12]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d102      	bne.n	80125fa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	2201      	movs	r2, #1
 80125f8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80125fa:	69bb      	ldr	r3, [r7, #24]
 80125fc:	899a      	ldrh	r2, [r3, #12]
 80125fe:	69bb      	ldr	r3, [r7, #24]
 8012600:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	895a      	ldrh	r2, [r3, #10]
 8012606:	69bb      	ldr	r3, [r7, #24]
 8012608:	899b      	ldrh	r3, [r3, #12]
 801260a:	429a      	cmp	r2, r3
 801260c:	d306      	bcc.n	801261c <dhcp_bind+0x124>
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d002      	beq.n	801261c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012616:	69bb      	ldr	r3, [r7, #24]
 8012618:	2200      	movs	r2, #0
 801261a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	79db      	ldrb	r3, [r3, #7]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d003      	beq.n	801262c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012624:	69bb      	ldr	r3, [r7, #24]
 8012626:	6a1b      	ldr	r3, [r3, #32]
 8012628:	613b      	str	r3, [r7, #16]
 801262a:	e014      	b.n	8012656 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801262c:	69bb      	ldr	r3, [r7, #24]
 801262e:	331c      	adds	r3, #28
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012634:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012638:	2b00      	cmp	r3, #0
 801263a:	db02      	blt.n	8012642 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801263c:	23ff      	movs	r3, #255	; 0xff
 801263e:	613b      	str	r3, [r7, #16]
 8012640:	e009      	b.n	8012656 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012642:	7dfb      	ldrb	r3, [r7, #23]
 8012644:	2bbf      	cmp	r3, #191	; 0xbf
 8012646:	d903      	bls.n	8012650 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012648:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801264c:	613b      	str	r3, [r7, #16]
 801264e:	e002      	b.n	8012656 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012654:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012656:	69bb      	ldr	r3, [r7, #24]
 8012658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801265a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d108      	bne.n	8012674 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	69da      	ldr	r2, [r3, #28]
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	4013      	ands	r3, r2
 801266a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012672:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012674:	210a      	movs	r1, #10
 8012676:	69b8      	ldr	r0, [r7, #24]
 8012678:	f000 faa0 	bl	8012bbc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801267c:	69bb      	ldr	r3, [r7, #24]
 801267e:	f103 011c 	add.w	r1, r3, #28
 8012682:	f107 030c 	add.w	r3, r7, #12
 8012686:	f107 0210 	add.w	r2, r7, #16
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7f8 fa72 	bl	800ab74 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012690:	3720      	adds	r7, #32
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	080196e4 	.word	0x080196e4
 801269c:	08019844 	.word	0x08019844
 80126a0:	08019744 	.word	0x08019744
 80126a4:	08019860 	.word	0x08019860
 80126a8:	88888889 	.word	0x88888889

080126ac <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08a      	sub	sp, #40	; 0x28
 80126b0:	af02      	add	r7, sp, #8
 80126b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80126ba:	2105      	movs	r1, #5
 80126bc:	69b8      	ldr	r0, [r7, #24]
 80126be:	f000 fa7d 	bl	8012bbc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80126c2:	f107 030c 	add.w	r3, r7, #12
 80126c6:	2203      	movs	r2, #3
 80126c8:	69b9      	ldr	r1, [r7, #24]
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 ff02 	bl	80134d4 <dhcp_create_msg>
 80126d0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d04e      	beq.n	8012776 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	685b      	ldr	r3, [r3, #4]
 80126dc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80126de:	89b8      	ldrh	r0, [r7, #12]
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126e6:	2302      	movs	r3, #2
 80126e8:	2239      	movs	r2, #57	; 0x39
 80126ea:	f000 fa81 	bl	8012bf0 <dhcp_option>
 80126ee:	4603      	mov	r3, r0
 80126f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80126f2:	89b8      	ldrh	r0, [r7, #12]
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126fe:	461a      	mov	r2, r3
 8012700:	f000 fad0 	bl	8012ca4 <dhcp_option_short>
 8012704:	4603      	mov	r3, r0
 8012706:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012708:	89b8      	ldrh	r0, [r7, #12]
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012710:	2303      	movs	r3, #3
 8012712:	2237      	movs	r2, #55	; 0x37
 8012714:	f000 fa6c 	bl	8012bf0 <dhcp_option>
 8012718:	4603      	mov	r3, r0
 801271a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801271c:	2300      	movs	r3, #0
 801271e:	77bb      	strb	r3, [r7, #30]
 8012720:	e00e      	b.n	8012740 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012722:	89b8      	ldrh	r0, [r7, #12]
 8012724:	693b      	ldr	r3, [r7, #16]
 8012726:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801272a:	7fbb      	ldrb	r3, [r7, #30]
 801272c:	4a2a      	ldr	r2, [pc, #168]	; (80127d8 <dhcp_renew+0x12c>)
 801272e:	5cd3      	ldrb	r3, [r2, r3]
 8012730:	461a      	mov	r2, r3
 8012732:	f000 fa91 	bl	8012c58 <dhcp_option_byte>
 8012736:	4603      	mov	r3, r0
 8012738:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801273a:	7fbb      	ldrb	r3, [r7, #30]
 801273c:	3301      	adds	r3, #1
 801273e:	77bb      	strb	r3, [r7, #30]
 8012740:	7fbb      	ldrb	r3, [r7, #30]
 8012742:	2b02      	cmp	r3, #2
 8012744:	d9ed      	bls.n	8012722 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012746:	89b8      	ldrh	r0, [r7, #12]
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	33f0      	adds	r3, #240	; 0xf0
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	4619      	mov	r1, r3
 8012750:	f000 ff96 	bl	8013680 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012754:	4b21      	ldr	r3, [pc, #132]	; (80127dc <dhcp_renew+0x130>)
 8012756:	6818      	ldr	r0, [r3, #0]
 8012758:	69bb      	ldr	r3, [r7, #24]
 801275a:	f103 0218 	add.w	r2, r3, #24
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	9300      	str	r3, [sp, #0]
 8012762:	2343      	movs	r3, #67	; 0x43
 8012764:	6979      	ldr	r1, [r7, #20]
 8012766:	f7fe fe51 	bl	801140c <udp_sendto_if>
 801276a:	4603      	mov	r3, r0
 801276c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801276e:	6978      	ldr	r0, [r7, #20]
 8012770:	f7f8 ff0e 	bl	800b590 <pbuf_free>
 8012774:	e001      	b.n	801277a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012776:	23ff      	movs	r3, #255	; 0xff
 8012778:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801277a:	69bb      	ldr	r3, [r7, #24]
 801277c:	799b      	ldrb	r3, [r3, #6]
 801277e:	2bff      	cmp	r3, #255	; 0xff
 8012780:	d005      	beq.n	801278e <dhcp_renew+0xe2>
    dhcp->tries++;
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	799b      	ldrb	r3, [r3, #6]
 8012786:	3301      	adds	r3, #1
 8012788:	b2da      	uxtb	r2, r3
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	799b      	ldrb	r3, [r3, #6]
 8012792:	2b09      	cmp	r3, #9
 8012794:	d80a      	bhi.n	80127ac <dhcp_renew+0x100>
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	799b      	ldrb	r3, [r3, #6]
 801279a:	b29b      	uxth	r3, r3
 801279c:	461a      	mov	r2, r3
 801279e:	0152      	lsls	r2, r2, #5
 80127a0:	1ad2      	subs	r2, r2, r3
 80127a2:	0092      	lsls	r2, r2, #2
 80127a4:	4413      	add	r3, r2
 80127a6:	011b      	lsls	r3, r3, #4
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	e001      	b.n	80127b0 <dhcp_renew+0x104>
 80127ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 80127b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127b2:	89fb      	ldrh	r3, [r7, #14]
 80127b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80127b8:	4a09      	ldr	r2, [pc, #36]	; (80127e0 <dhcp_renew+0x134>)
 80127ba:	fb82 1203 	smull	r1, r2, r2, r3
 80127be:	1152      	asrs	r2, r2, #5
 80127c0:	17db      	asrs	r3, r3, #31
 80127c2:	1ad3      	subs	r3, r2, r3
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	69bb      	ldr	r3, [r7, #24]
 80127c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80127ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3720      	adds	r7, #32
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
 80127d6:	bf00      	nop
 80127d8:	2000001c 	.word	0x2000001c
 80127dc:	20004a48 	.word	0x20004a48
 80127e0:	10624dd3 	.word	0x10624dd3

080127e4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b08a      	sub	sp, #40	; 0x28
 80127e8:	af02      	add	r7, sp, #8
 80127ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80127f2:	2104      	movs	r1, #4
 80127f4:	69b8      	ldr	r0, [r7, #24]
 80127f6:	f000 f9e1 	bl	8012bbc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80127fa:	f107 030c 	add.w	r3, r7, #12
 80127fe:	2203      	movs	r2, #3
 8012800:	69b9      	ldr	r1, [r7, #24]
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f000 fe66 	bl	80134d4 <dhcp_create_msg>
 8012808:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d04c      	beq.n	80128aa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012816:	89b8      	ldrh	r0, [r7, #12]
 8012818:	693b      	ldr	r3, [r7, #16]
 801281a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801281e:	2302      	movs	r3, #2
 8012820:	2239      	movs	r2, #57	; 0x39
 8012822:	f000 f9e5 	bl	8012bf0 <dhcp_option>
 8012826:	4603      	mov	r3, r0
 8012828:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801282a:	89b8      	ldrh	r0, [r7, #12]
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012836:	461a      	mov	r2, r3
 8012838:	f000 fa34 	bl	8012ca4 <dhcp_option_short>
 801283c:	4603      	mov	r3, r0
 801283e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012840:	89b8      	ldrh	r0, [r7, #12]
 8012842:	693b      	ldr	r3, [r7, #16]
 8012844:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012848:	2303      	movs	r3, #3
 801284a:	2237      	movs	r2, #55	; 0x37
 801284c:	f000 f9d0 	bl	8012bf0 <dhcp_option>
 8012850:	4603      	mov	r3, r0
 8012852:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012854:	2300      	movs	r3, #0
 8012856:	77bb      	strb	r3, [r7, #30]
 8012858:	e00e      	b.n	8012878 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801285a:	89b8      	ldrh	r0, [r7, #12]
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012862:	7fbb      	ldrb	r3, [r7, #30]
 8012864:	4a29      	ldr	r2, [pc, #164]	; (801290c <dhcp_rebind+0x128>)
 8012866:	5cd3      	ldrb	r3, [r2, r3]
 8012868:	461a      	mov	r2, r3
 801286a:	f000 f9f5 	bl	8012c58 <dhcp_option_byte>
 801286e:	4603      	mov	r3, r0
 8012870:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012872:	7fbb      	ldrb	r3, [r7, #30]
 8012874:	3301      	adds	r3, #1
 8012876:	77bb      	strb	r3, [r7, #30]
 8012878:	7fbb      	ldrb	r3, [r7, #30]
 801287a:	2b02      	cmp	r3, #2
 801287c:	d9ed      	bls.n	801285a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801287e:	89b8      	ldrh	r0, [r7, #12]
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	33f0      	adds	r3, #240	; 0xf0
 8012884:	697a      	ldr	r2, [r7, #20]
 8012886:	4619      	mov	r1, r3
 8012888:	f000 fefa 	bl	8013680 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801288c:	4b20      	ldr	r3, [pc, #128]	; (8012910 <dhcp_rebind+0x12c>)
 801288e:	6818      	ldr	r0, [r3, #0]
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	2343      	movs	r3, #67	; 0x43
 8012896:	4a1f      	ldr	r2, [pc, #124]	; (8012914 <dhcp_rebind+0x130>)
 8012898:	6979      	ldr	r1, [r7, #20]
 801289a:	f7fe fdb7 	bl	801140c <udp_sendto_if>
 801289e:	4603      	mov	r3, r0
 80128a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80128a2:	6978      	ldr	r0, [r7, #20]
 80128a4:	f7f8 fe74 	bl	800b590 <pbuf_free>
 80128a8:	e001      	b.n	80128ae <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80128aa:	23ff      	movs	r3, #255	; 0xff
 80128ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	799b      	ldrb	r3, [r3, #6]
 80128b2:	2bff      	cmp	r3, #255	; 0xff
 80128b4:	d005      	beq.n	80128c2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	799b      	ldrb	r3, [r3, #6]
 80128ba:	3301      	adds	r3, #1
 80128bc:	b2da      	uxtb	r2, r3
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	799b      	ldrb	r3, [r3, #6]
 80128c6:	2b09      	cmp	r3, #9
 80128c8:	d80a      	bhi.n	80128e0 <dhcp_rebind+0xfc>
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	799b      	ldrb	r3, [r3, #6]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	461a      	mov	r2, r3
 80128d2:	0152      	lsls	r2, r2, #5
 80128d4:	1ad2      	subs	r2, r2, r3
 80128d6:	0092      	lsls	r2, r2, #2
 80128d8:	4413      	add	r3, r2
 80128da:	00db      	lsls	r3, r3, #3
 80128dc:	b29b      	uxth	r3, r3
 80128de:	e001      	b.n	80128e4 <dhcp_rebind+0x100>
 80128e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80128e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80128ec:	4a0a      	ldr	r2, [pc, #40]	; (8012918 <dhcp_rebind+0x134>)
 80128ee:	fb82 1203 	smull	r1, r2, r2, r3
 80128f2:	1152      	asrs	r2, r2, #5
 80128f4:	17db      	asrs	r3, r3, #31
 80128f6:	1ad3      	subs	r3, r2, r3
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80128fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3720      	adds	r7, #32
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	2000001c 	.word	0x2000001c
 8012910:	20004a48 	.word	0x20004a48
 8012914:	0801a2a8 	.word	0x0801a2a8
 8012918:	10624dd3 	.word	0x10624dd3

0801291c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801291c:	b5b0      	push	{r4, r5, r7, lr}
 801291e:	b08a      	sub	sp, #40	; 0x28
 8012920:	af02      	add	r7, sp, #8
 8012922:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012928:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801292a:	2103      	movs	r1, #3
 801292c:	69b8      	ldr	r0, [r7, #24]
 801292e:	f000 f945 	bl	8012bbc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012932:	f107 030c 	add.w	r3, r7, #12
 8012936:	2203      	movs	r2, #3
 8012938:	69b9      	ldr	r1, [r7, #24]
 801293a:	6878      	ldr	r0, [r7, #4]
 801293c:	f000 fdca 	bl	80134d4 <dhcp_create_msg>
 8012940:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d066      	beq.n	8012a16 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	685b      	ldr	r3, [r3, #4]
 801294c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801294e:	89b8      	ldrh	r0, [r7, #12]
 8012950:	693b      	ldr	r3, [r7, #16]
 8012952:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012956:	2302      	movs	r3, #2
 8012958:	2239      	movs	r2, #57	; 0x39
 801295a:	f000 f949 	bl	8012bf0 <dhcp_option>
 801295e:	4603      	mov	r3, r0
 8012960:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012962:	89b8      	ldrh	r0, [r7, #12]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	33f0      	adds	r3, #240	; 0xf0
 8012968:	f44f 7210 	mov.w	r2, #576	; 0x240
 801296c:	4619      	mov	r1, r3
 801296e:	f000 f999 	bl	8012ca4 <dhcp_option_short>
 8012972:	4603      	mov	r3, r0
 8012974:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012976:	89b8      	ldrh	r0, [r7, #12]
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801297e:	2304      	movs	r3, #4
 8012980:	2232      	movs	r2, #50	; 0x32
 8012982:	f000 f935 	bl	8012bf0 <dhcp_option>
 8012986:	4603      	mov	r3, r0
 8012988:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801298a:	89bc      	ldrh	r4, [r7, #12]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	69db      	ldr	r3, [r3, #28]
 8012996:	4618      	mov	r0, r3
 8012998:	f7f7 fa57 	bl	8009e4a <lwip_htonl>
 801299c:	4603      	mov	r3, r0
 801299e:	461a      	mov	r2, r3
 80129a0:	4629      	mov	r1, r5
 80129a2:	4620      	mov	r0, r4
 80129a4:	f000 f9b0 	bl	8012d08 <dhcp_option_long>
 80129a8:	4603      	mov	r3, r0
 80129aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80129ac:	89b8      	ldrh	r0, [r7, #12]
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129b4:	2303      	movs	r3, #3
 80129b6:	2237      	movs	r2, #55	; 0x37
 80129b8:	f000 f91a 	bl	8012bf0 <dhcp_option>
 80129bc:	4603      	mov	r3, r0
 80129be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80129c0:	2300      	movs	r3, #0
 80129c2:	77bb      	strb	r3, [r7, #30]
 80129c4:	e00e      	b.n	80129e4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80129c6:	89b8      	ldrh	r0, [r7, #12]
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129ce:	7fbb      	ldrb	r3, [r7, #30]
 80129d0:	4a29      	ldr	r2, [pc, #164]	; (8012a78 <dhcp_reboot+0x15c>)
 80129d2:	5cd3      	ldrb	r3, [r2, r3]
 80129d4:	461a      	mov	r2, r3
 80129d6:	f000 f93f 	bl	8012c58 <dhcp_option_byte>
 80129da:	4603      	mov	r3, r0
 80129dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80129de:	7fbb      	ldrb	r3, [r7, #30]
 80129e0:	3301      	adds	r3, #1
 80129e2:	77bb      	strb	r3, [r7, #30]
 80129e4:	7fbb      	ldrb	r3, [r7, #30]
 80129e6:	2b02      	cmp	r3, #2
 80129e8:	d9ed      	bls.n	80129c6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80129ea:	89b8      	ldrh	r0, [r7, #12]
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	33f0      	adds	r3, #240	; 0xf0
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	4619      	mov	r1, r3
 80129f4:	f000 fe44 	bl	8013680 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80129f8:	4b20      	ldr	r3, [pc, #128]	; (8012a7c <dhcp_reboot+0x160>)
 80129fa:	6818      	ldr	r0, [r3, #0]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	2343      	movs	r3, #67	; 0x43
 8012a02:	4a1f      	ldr	r2, [pc, #124]	; (8012a80 <dhcp_reboot+0x164>)
 8012a04:	6979      	ldr	r1, [r7, #20]
 8012a06:	f7fe fd01 	bl	801140c <udp_sendto_if>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012a0e:	6978      	ldr	r0, [r7, #20]
 8012a10:	f7f8 fdbe 	bl	800b590 <pbuf_free>
 8012a14:	e001      	b.n	8012a1a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012a16:	23ff      	movs	r3, #255	; 0xff
 8012a18:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	799b      	ldrb	r3, [r3, #6]
 8012a1e:	2bff      	cmp	r3, #255	; 0xff
 8012a20:	d005      	beq.n	8012a2e <dhcp_reboot+0x112>
    dhcp->tries++;
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	799b      	ldrb	r3, [r3, #6]
 8012a26:	3301      	adds	r3, #1
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	799b      	ldrb	r3, [r3, #6]
 8012a32:	2b09      	cmp	r3, #9
 8012a34:	d80a      	bhi.n	8012a4c <dhcp_reboot+0x130>
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	799b      	ldrb	r3, [r3, #6]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	0152      	lsls	r2, r2, #5
 8012a40:	1ad2      	subs	r2, r2, r3
 8012a42:	0092      	lsls	r2, r2, #2
 8012a44:	4413      	add	r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	e001      	b.n	8012a50 <dhcp_reboot+0x134>
 8012a4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012a50:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012a52:	89fb      	ldrh	r3, [r7, #14]
 8012a54:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012a58:	4a0a      	ldr	r2, [pc, #40]	; (8012a84 <dhcp_reboot+0x168>)
 8012a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8012a5e:	1152      	asrs	r2, r2, #5
 8012a60:	17db      	asrs	r3, r3, #31
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012a6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3720      	adds	r7, #32
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bdb0      	pop	{r4, r5, r7, pc}
 8012a76:	bf00      	nop
 8012a78:	2000001c 	.word	0x2000001c
 8012a7c:	20004a48 	.word	0x20004a48
 8012a80:	0801a2a8 	.word	0x0801a2a8
 8012a84:	10624dd3 	.word	0x10624dd3

08012a88 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012a88:	b5b0      	push	{r4, r5, r7, lr}
 8012a8a:	b08a      	sub	sp, #40	; 0x28
 8012a8c:	af02      	add	r7, sp, #8
 8012a8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a94:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 8084 	beq.w	8012ba6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	795b      	ldrb	r3, [r3, #5]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f000 8081 	beq.w	8012baa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	699b      	ldr	r3, [r3, #24]
 8012aac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8012aae:	69fb      	ldr	r3, [r7, #28]
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	2200      	movs	r2, #0
 8012abe:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012ac0:	69fb      	ldr	r3, [r7, #28]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012ac6:	69fb      	ldr	r3, [r7, #28]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	631a      	str	r2, [r3, #48]	; 0x30
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	62da      	str	r2, [r3, #44]	; 0x2c
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	2200      	movs	r2, #0
 8012ae0:	829a      	strh	r2, [r3, #20]
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	8a9a      	ldrh	r2, [r3, #20]
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	825a      	strh	r2, [r3, #18]
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	8a5a      	ldrh	r2, [r3, #18]
 8012aee:	69fb      	ldr	r3, [r7, #28]
 8012af0:	821a      	strh	r2, [r3, #16]
 8012af2:	69fb      	ldr	r3, [r7, #28]
 8012af4:	8a1a      	ldrh	r2, [r3, #16]
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 fdee 	bl	80136dc <dhcp_supplied_address>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d03b      	beq.n	8012b7e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012b06:	f107 030e 	add.w	r3, r7, #14
 8012b0a:	2207      	movs	r2, #7
 8012b0c:	69f9      	ldr	r1, [r7, #28]
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fce0 	bl	80134d4 <dhcp_create_msg>
 8012b14:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012b16:	69bb      	ldr	r3, [r7, #24]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d030      	beq.n	8012b7e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012b22:	89f8      	ldrh	r0, [r7, #14]
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b2a:	2304      	movs	r3, #4
 8012b2c:	2236      	movs	r2, #54	; 0x36
 8012b2e:	f000 f85f 	bl	8012bf0 <dhcp_option>
 8012b32:	4603      	mov	r3, r0
 8012b34:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012b36:	89fc      	ldrh	r4, [r7, #14]
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012b3e:	693b      	ldr	r3, [r7, #16]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7f7 f982 	bl	8009e4a <lwip_htonl>
 8012b46:	4603      	mov	r3, r0
 8012b48:	461a      	mov	r2, r3
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	f000 f8db 	bl	8012d08 <dhcp_option_long>
 8012b52:	4603      	mov	r3, r0
 8012b54:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b56:	89f8      	ldrh	r0, [r7, #14]
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	33f0      	adds	r3, #240	; 0xf0
 8012b5c:	69ba      	ldr	r2, [r7, #24]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	f000 fd8e 	bl	8013680 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012b64:	4b13      	ldr	r3, [pc, #76]	; (8012bb4 <dhcp_release_and_stop+0x12c>)
 8012b66:	6818      	ldr	r0, [r3, #0]
 8012b68:	f107 0210 	add.w	r2, r7, #16
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	2343      	movs	r3, #67	; 0x43
 8012b72:	69b9      	ldr	r1, [r7, #24]
 8012b74:	f7fe fc4a 	bl	801140c <udp_sendto_if>
      pbuf_free(p_out);
 8012b78:	69b8      	ldr	r0, [r7, #24]
 8012b7a:	f7f8 fd09 	bl	800b590 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012b7e:	4b0e      	ldr	r3, [pc, #56]	; (8012bb8 <dhcp_release_and_stop+0x130>)
 8012b80:	4a0d      	ldr	r2, [pc, #52]	; (8012bb8 <dhcp_release_and_stop+0x130>)
 8012b82:	490d      	ldr	r1, [pc, #52]	; (8012bb8 <dhcp_release_and_stop+0x130>)
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7f7 fff5 	bl	800ab74 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012b8a:	2100      	movs	r1, #0
 8012b8c:	69f8      	ldr	r0, [r7, #28]
 8012b8e:	f000 f815 	bl	8012bbc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	791b      	ldrb	r3, [r3, #4]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d008      	beq.n	8012bac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012b9a:	f7fe ff83 	bl	8011aa4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	711a      	strb	r2, [r3, #4]
 8012ba4:	e002      	b.n	8012bac <dhcp_release_and_stop+0x124>
    return;
 8012ba6:	bf00      	nop
 8012ba8:	e000      	b.n	8012bac <dhcp_release_and_stop+0x124>
    return;
 8012baa:	bf00      	nop
  }
}
 8012bac:	3720      	adds	r7, #32
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	20004a48 	.word	0x20004a48
 8012bb8:	0801a2a4 	.word	0x0801a2a4

08012bbc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	795b      	ldrb	r3, [r3, #5]
 8012bcc:	78fa      	ldrb	r2, [r7, #3]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d008      	beq.n	8012be4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	78fa      	ldrb	r2, [r7, #3]
 8012bd6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	2200      	movs	r2, #0
 8012bdc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	2200      	movs	r2, #0
 8012be2:	811a      	strh	r2, [r3, #8]
  }
}
 8012be4:	bf00      	nop
 8012be6:	370c      	adds	r7, #12
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr

08012bf0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b082      	sub	sp, #8
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6039      	str	r1, [r7, #0]
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	461a      	mov	r2, r3
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	80fb      	strh	r3, [r7, #6]
 8012c00:	460b      	mov	r3, r1
 8012c02:	717b      	strb	r3, [r7, #5]
 8012c04:	4613      	mov	r3, r2
 8012c06:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012c08:	88fa      	ldrh	r2, [r7, #6]
 8012c0a:	793b      	ldrb	r3, [r7, #4]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	3302      	adds	r3, #2
 8012c10:	2b44      	cmp	r3, #68	; 0x44
 8012c12:	d906      	bls.n	8012c22 <dhcp_option+0x32>
 8012c14:	4b0d      	ldr	r3, [pc, #52]	; (8012c4c <dhcp_option+0x5c>)
 8012c16:	f240 529a 	movw	r2, #1434	; 0x59a
 8012c1a:	490d      	ldr	r1, [pc, #52]	; (8012c50 <dhcp_option+0x60>)
 8012c1c:	480d      	ldr	r0, [pc, #52]	; (8012c54 <dhcp_option+0x64>)
 8012c1e:	f003 fa31 	bl	8016084 <iprintf>
  options[options_out_len++] = option_type;
 8012c22:	88fb      	ldrh	r3, [r7, #6]
 8012c24:	1c5a      	adds	r2, r3, #1
 8012c26:	80fa      	strh	r2, [r7, #6]
 8012c28:	461a      	mov	r2, r3
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	797a      	ldrb	r2, [r7, #5]
 8012c30:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012c32:	88fb      	ldrh	r3, [r7, #6]
 8012c34:	1c5a      	adds	r2, r3, #1
 8012c36:	80fa      	strh	r2, [r7, #6]
 8012c38:	461a      	mov	r2, r3
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	793a      	ldrb	r2, [r7, #4]
 8012c40:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012c42:	88fb      	ldrh	r3, [r7, #6]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3708      	adds	r7, #8
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bd80      	pop	{r7, pc}
 8012c4c:	080196e4 	.word	0x080196e4
 8012c50:	08019878 	.word	0x08019878
 8012c54:	08019744 	.word	0x08019744

08012c58 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	4603      	mov	r3, r0
 8012c60:	6039      	str	r1, [r7, #0]
 8012c62:	80fb      	strh	r3, [r7, #6]
 8012c64:	4613      	mov	r3, r2
 8012c66:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012c68:	88fb      	ldrh	r3, [r7, #6]
 8012c6a:	2b43      	cmp	r3, #67	; 0x43
 8012c6c:	d906      	bls.n	8012c7c <dhcp_option_byte+0x24>
 8012c6e:	4b0a      	ldr	r3, [pc, #40]	; (8012c98 <dhcp_option_byte+0x40>)
 8012c70:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8012c74:	4909      	ldr	r1, [pc, #36]	; (8012c9c <dhcp_option_byte+0x44>)
 8012c76:	480a      	ldr	r0, [pc, #40]	; (8012ca0 <dhcp_option_byte+0x48>)
 8012c78:	f003 fa04 	bl	8016084 <iprintf>
  options[options_out_len++] = value;
 8012c7c:	88fb      	ldrh	r3, [r7, #6]
 8012c7e:	1c5a      	adds	r2, r3, #1
 8012c80:	80fa      	strh	r2, [r7, #6]
 8012c82:	461a      	mov	r2, r3
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	4413      	add	r3, r2
 8012c88:	797a      	ldrb	r2, [r7, #5]
 8012c8a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012c8c:	88fb      	ldrh	r3, [r7, #6]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
 8012c96:	bf00      	nop
 8012c98:	080196e4 	.word	0x080196e4
 8012c9c:	080198bc 	.word	0x080198bc
 8012ca0:	08019744 	.word	0x08019744

08012ca4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	4603      	mov	r3, r0
 8012cac:	6039      	str	r1, [r7, #0]
 8012cae:	80fb      	strh	r3, [r7, #6]
 8012cb0:	4613      	mov	r3, r2
 8012cb2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012cb4:	88fb      	ldrh	r3, [r7, #6]
 8012cb6:	3302      	adds	r3, #2
 8012cb8:	2b44      	cmp	r3, #68	; 0x44
 8012cba:	d906      	bls.n	8012cca <dhcp_option_short+0x26>
 8012cbc:	4b0f      	ldr	r3, [pc, #60]	; (8012cfc <dhcp_option_short+0x58>)
 8012cbe:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012cc2:	490f      	ldr	r1, [pc, #60]	; (8012d00 <dhcp_option_short+0x5c>)
 8012cc4:	480f      	ldr	r0, [pc, #60]	; (8012d04 <dhcp_option_short+0x60>)
 8012cc6:	f003 f9dd 	bl	8016084 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012cca:	88bb      	ldrh	r3, [r7, #4]
 8012ccc:	0a1b      	lsrs	r3, r3, #8
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	88fb      	ldrh	r3, [r7, #6]
 8012cd2:	1c59      	adds	r1, r3, #1
 8012cd4:	80f9      	strh	r1, [r7, #6]
 8012cd6:	4619      	mov	r1, r3
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	440b      	add	r3, r1
 8012cdc:	b2d2      	uxtb	r2, r2
 8012cde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012ce0:	88fb      	ldrh	r3, [r7, #6]
 8012ce2:	1c5a      	adds	r2, r3, #1
 8012ce4:	80fa      	strh	r2, [r7, #6]
 8012ce6:	461a      	mov	r2, r3
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	4413      	add	r3, r2
 8012cec:	88ba      	ldrh	r2, [r7, #4]
 8012cee:	b2d2      	uxtb	r2, r2
 8012cf0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	080196e4 	.word	0x080196e4
 8012d00:	080198f4 	.word	0x080198f4
 8012d04:	08019744 	.word	0x08019744

08012d08 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	4603      	mov	r3, r0
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
 8012d14:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012d16:	89fb      	ldrh	r3, [r7, #14]
 8012d18:	3304      	adds	r3, #4
 8012d1a:	2b44      	cmp	r3, #68	; 0x44
 8012d1c:	d906      	bls.n	8012d2c <dhcp_option_long+0x24>
 8012d1e:	4b19      	ldr	r3, [pc, #100]	; (8012d84 <dhcp_option_long+0x7c>)
 8012d20:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012d24:	4918      	ldr	r1, [pc, #96]	; (8012d88 <dhcp_option_long+0x80>)
 8012d26:	4819      	ldr	r0, [pc, #100]	; (8012d8c <dhcp_option_long+0x84>)
 8012d28:	f003 f9ac 	bl	8016084 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	0e1a      	lsrs	r2, r3, #24
 8012d30:	89fb      	ldrh	r3, [r7, #14]
 8012d32:	1c59      	adds	r1, r3, #1
 8012d34:	81f9      	strh	r1, [r7, #14]
 8012d36:	4619      	mov	r1, r3
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	440b      	add	r3, r1
 8012d3c:	b2d2      	uxtb	r2, r2
 8012d3e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	0c1a      	lsrs	r2, r3, #16
 8012d44:	89fb      	ldrh	r3, [r7, #14]
 8012d46:	1c59      	adds	r1, r3, #1
 8012d48:	81f9      	strh	r1, [r7, #14]
 8012d4a:	4619      	mov	r1, r3
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	440b      	add	r3, r1
 8012d50:	b2d2      	uxtb	r2, r2
 8012d52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	0a1a      	lsrs	r2, r3, #8
 8012d58:	89fb      	ldrh	r3, [r7, #14]
 8012d5a:	1c59      	adds	r1, r3, #1
 8012d5c:	81f9      	strh	r1, [r7, #14]
 8012d5e:	4619      	mov	r1, r3
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	440b      	add	r3, r1
 8012d64:	b2d2      	uxtb	r2, r2
 8012d66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012d68:	89fb      	ldrh	r3, [r7, #14]
 8012d6a:	1c5a      	adds	r2, r3, #1
 8012d6c:	81fa      	strh	r2, [r7, #14]
 8012d6e:	461a      	mov	r2, r3
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	4413      	add	r3, r2
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	b2d2      	uxtb	r2, r2
 8012d78:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012d7a:	89fb      	ldrh	r3, [r7, #14]
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	3710      	adds	r7, #16
 8012d80:	46bd      	mov	sp, r7
 8012d82:	bd80      	pop	{r7, pc}
 8012d84:	080196e4 	.word	0x080196e4
 8012d88:	08019930 	.word	0x08019930
 8012d8c:	08019744 	.word	0x08019744

08012d90 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b090      	sub	sp, #64	; 0x40
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
 8012d98:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8012d9e:	2300      	movs	r3, #0
 8012da0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012da2:	2208      	movs	r2, #8
 8012da4:	2100      	movs	r1, #0
 8012da6:	48be      	ldr	r0, [pc, #760]	; (80130a0 <dhcp_parse_reply+0x310>)
 8012da8:	f003 f964 	bl	8016074 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	895b      	ldrh	r3, [r3, #10]
 8012db0:	2b2b      	cmp	r3, #43	; 0x2b
 8012db2:	d802      	bhi.n	8012dba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012db4:	f06f 0301 	mvn.w	r3, #1
 8012db8:	e2a8      	b.n	801330c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012dc0:	23f0      	movs	r3, #240	; 0xf0
 8012dc2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	891b      	ldrh	r3, [r3, #8]
 8012dc8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012dce:	e00c      	b.n	8012dea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dd2:	895b      	ldrh	r3, [r3, #10]
 8012dd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012dd6:	1ad3      	subs	r3, r2, r3
 8012dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8012dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ddc:	895b      	ldrh	r3, [r3, #10]
 8012dde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d004      	beq.n	8012dfa <dhcp_parse_reply+0x6a>
 8012df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df2:	895b      	ldrh	r3, [r3, #10]
 8012df4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d2ea      	bcs.n	8012dd0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d102      	bne.n	8012e06 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012e00:	f06f 0301 	mvn.w	r3, #1
 8012e04:	e282      	b.n	801330c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8012e06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012e08:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8012e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e0c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012e14:	e23a      	b.n	801328c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8012e16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e1a:	4413      	add	r3, r2
 8012e1c:	781b      	ldrb	r3, [r3, #0]
 8012e1e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012e20:	2300      	movs	r3, #0
 8012e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8012e26:	f04f 33ff 	mov.w	r3, #4294967295
 8012e2a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012e2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e2e:	3302      	adds	r3, #2
 8012e30:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012e32:	8bfa      	ldrh	r2, [r7, #30]
 8012e34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d202      	bcs.n	8012e40 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8012e3a:	f06f 0301 	mvn.w	r3, #1
 8012e3e:	e265      	b.n	801330c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012e40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e42:	3301      	adds	r3, #1
 8012e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e46:	8952      	ldrh	r2, [r2, #10]
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	da07      	bge.n	8012e5c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e4e:	3301      	adds	r3, #1
 8012e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e52:	4413      	add	r3, r2
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e5a:	e00b      	b.n	8012e74 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d004      	beq.n	8012e6e <dhcp_parse_reply+0xde>
 8012e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	e000      	b.n	8012e70 <dhcp_parse_reply+0xe0>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
 8012e7e:	2b3b      	cmp	r3, #59	; 0x3b
 8012e80:	f200 812d 	bhi.w	80130de <dhcp_parse_reply+0x34e>
 8012e84:	a201      	add	r2, pc, #4	; (adr r2, 8012e8c <dhcp_parse_reply+0xfc>)
 8012e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e8a:	bf00      	nop
 8012e8c:	08012f7d 	.word	0x08012f7d
 8012e90:	08012f8d 	.word	0x08012f8d
 8012e94:	080130df 	.word	0x080130df
 8012e98:	08012faf 	.word	0x08012faf
 8012e9c:	080130df 	.word	0x080130df
 8012ea0:	080130df 	.word	0x080130df
 8012ea4:	080130df 	.word	0x080130df
 8012ea8:	080130df 	.word	0x080130df
 8012eac:	080130df 	.word	0x080130df
 8012eb0:	080130df 	.word	0x080130df
 8012eb4:	080130df 	.word	0x080130df
 8012eb8:	080130df 	.word	0x080130df
 8012ebc:	080130df 	.word	0x080130df
 8012ec0:	080130df 	.word	0x080130df
 8012ec4:	080130df 	.word	0x080130df
 8012ec8:	080130df 	.word	0x080130df
 8012ecc:	080130df 	.word	0x080130df
 8012ed0:	080130df 	.word	0x080130df
 8012ed4:	080130df 	.word	0x080130df
 8012ed8:	080130df 	.word	0x080130df
 8012edc:	080130df 	.word	0x080130df
 8012ee0:	080130df 	.word	0x080130df
 8012ee4:	080130df 	.word	0x080130df
 8012ee8:	080130df 	.word	0x080130df
 8012eec:	080130df 	.word	0x080130df
 8012ef0:	080130df 	.word	0x080130df
 8012ef4:	080130df 	.word	0x080130df
 8012ef8:	080130df 	.word	0x080130df
 8012efc:	080130df 	.word	0x080130df
 8012f00:	080130df 	.word	0x080130df
 8012f04:	080130df 	.word	0x080130df
 8012f08:	080130df 	.word	0x080130df
 8012f0c:	080130df 	.word	0x080130df
 8012f10:	080130df 	.word	0x080130df
 8012f14:	080130df 	.word	0x080130df
 8012f18:	080130df 	.word	0x080130df
 8012f1c:	080130df 	.word	0x080130df
 8012f20:	080130df 	.word	0x080130df
 8012f24:	080130df 	.word	0x080130df
 8012f28:	080130df 	.word	0x080130df
 8012f2c:	080130df 	.word	0x080130df
 8012f30:	080130df 	.word	0x080130df
 8012f34:	080130df 	.word	0x080130df
 8012f38:	080130df 	.word	0x080130df
 8012f3c:	080130df 	.word	0x080130df
 8012f40:	080130df 	.word	0x080130df
 8012f44:	080130df 	.word	0x080130df
 8012f48:	080130df 	.word	0x080130df
 8012f4c:	080130df 	.word	0x080130df
 8012f50:	080130df 	.word	0x080130df
 8012f54:	080130df 	.word	0x080130df
 8012f58:	08012fdb 	.word	0x08012fdb
 8012f5c:	08012ffd 	.word	0x08012ffd
 8012f60:	08013039 	.word	0x08013039
 8012f64:	0801305b 	.word	0x0801305b
 8012f68:	080130df 	.word	0x080130df
 8012f6c:	080130df 	.word	0x080130df
 8012f70:	080130df 	.word	0x080130df
 8012f74:	0801307d 	.word	0x0801307d
 8012f78:	080130bd 	.word	0x080130bd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012f8a:	e0ac      	b.n	80130e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f90:	2b04      	cmp	r3, #4
 8012f92:	d009      	beq.n	8012fa8 <dhcp_parse_reply+0x218>
 8012f94:	4b43      	ldr	r3, [pc, #268]	; (80130a4 <dhcp_parse_reply+0x314>)
 8012f96:	f240 622e 	movw	r2, #1582	; 0x62e
 8012f9a:	4943      	ldr	r1, [pc, #268]	; (80130a8 <dhcp_parse_reply+0x318>)
 8012f9c:	4843      	ldr	r0, [pc, #268]	; (80130ac <dhcp_parse_reply+0x31c>)
 8012f9e:	f003 f871 	bl	8016084 <iprintf>
 8012fa2:	f06f 0305 	mvn.w	r3, #5
 8012fa6:	e1b1      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012fa8:	2306      	movs	r3, #6
 8012faa:	623b      	str	r3, [r7, #32]
        break;
 8012fac:	e09b      	b.n	80130e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012fae:	2304      	movs	r3, #4
 8012fb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012fb4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d209      	bcs.n	8012fd4 <dhcp_parse_reply+0x244>
 8012fc0:	4b38      	ldr	r3, [pc, #224]	; (80130a4 <dhcp_parse_reply+0x314>)
 8012fc2:	f240 6233 	movw	r2, #1587	; 0x633
 8012fc6:	493a      	ldr	r1, [pc, #232]	; (80130b0 <dhcp_parse_reply+0x320>)
 8012fc8:	4838      	ldr	r0, [pc, #224]	; (80130ac <dhcp_parse_reply+0x31c>)
 8012fca:	f003 f85b 	bl	8016084 <iprintf>
 8012fce:	f06f 0305 	mvn.w	r3, #5
 8012fd2:	e19b      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012fd4:	2307      	movs	r3, #7
 8012fd6:	623b      	str	r3, [r7, #32]
        break;
 8012fd8:	e085      	b.n	80130e6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fde:	2b04      	cmp	r3, #4
 8012fe0:	d009      	beq.n	8012ff6 <dhcp_parse_reply+0x266>
 8012fe2:	4b30      	ldr	r3, [pc, #192]	; (80130a4 <dhcp_parse_reply+0x314>)
 8012fe4:	f240 6241 	movw	r2, #1601	; 0x641
 8012fe8:	492f      	ldr	r1, [pc, #188]	; (80130a8 <dhcp_parse_reply+0x318>)
 8012fea:	4830      	ldr	r0, [pc, #192]	; (80130ac <dhcp_parse_reply+0x31c>)
 8012fec:	f003 f84a 	bl	8016084 <iprintf>
 8012ff0:	f06f 0305 	mvn.w	r3, #5
 8012ff4:	e18a      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012ff6:	2303      	movs	r3, #3
 8012ff8:	623b      	str	r3, [r7, #32]
        break;
 8012ffa:	e074      	b.n	80130e6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013000:	2b01      	cmp	r3, #1
 8013002:	d009      	beq.n	8013018 <dhcp_parse_reply+0x288>
 8013004:	4b27      	ldr	r3, [pc, #156]	; (80130a4 <dhcp_parse_reply+0x314>)
 8013006:	f240 624f 	movw	r2, #1615	; 0x64f
 801300a:	492a      	ldr	r1, [pc, #168]	; (80130b4 <dhcp_parse_reply+0x324>)
 801300c:	4827      	ldr	r0, [pc, #156]	; (80130ac <dhcp_parse_reply+0x31c>)
 801300e:	f003 f839 	bl	8016084 <iprintf>
 8013012:	f06f 0305 	mvn.w	r3, #5
 8013016:	e179      	b.n	801330c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013018:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801301a:	2bf0      	cmp	r3, #240	; 0xf0
 801301c:	d009      	beq.n	8013032 <dhcp_parse_reply+0x2a2>
 801301e:	4b21      	ldr	r3, [pc, #132]	; (80130a4 <dhcp_parse_reply+0x314>)
 8013020:	f240 6251 	movw	r2, #1617	; 0x651
 8013024:	4924      	ldr	r1, [pc, #144]	; (80130b8 <dhcp_parse_reply+0x328>)
 8013026:	4821      	ldr	r0, [pc, #132]	; (80130ac <dhcp_parse_reply+0x31c>)
 8013028:	f003 f82c 	bl	8016084 <iprintf>
 801302c:	f06f 0305 	mvn.w	r3, #5
 8013030:	e16c      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013032:	2300      	movs	r3, #0
 8013034:	623b      	str	r3, [r7, #32]
        break;
 8013036:	e056      	b.n	80130e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801303c:	2b01      	cmp	r3, #1
 801303e:	d009      	beq.n	8013054 <dhcp_parse_reply+0x2c4>
 8013040:	4b18      	ldr	r3, [pc, #96]	; (80130a4 <dhcp_parse_reply+0x314>)
 8013042:	f240 6255 	movw	r2, #1621	; 0x655
 8013046:	491b      	ldr	r1, [pc, #108]	; (80130b4 <dhcp_parse_reply+0x324>)
 8013048:	4818      	ldr	r0, [pc, #96]	; (80130ac <dhcp_parse_reply+0x31c>)
 801304a:	f003 f81b 	bl	8016084 <iprintf>
 801304e:	f06f 0305 	mvn.w	r3, #5
 8013052:	e15b      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013054:	2301      	movs	r3, #1
 8013056:	623b      	str	r3, [r7, #32]
        break;
 8013058:	e045      	b.n	80130e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801305a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801305e:	2b04      	cmp	r3, #4
 8013060:	d009      	beq.n	8013076 <dhcp_parse_reply+0x2e6>
 8013062:	4b10      	ldr	r3, [pc, #64]	; (80130a4 <dhcp_parse_reply+0x314>)
 8013064:	f240 6259 	movw	r2, #1625	; 0x659
 8013068:	490f      	ldr	r1, [pc, #60]	; (80130a8 <dhcp_parse_reply+0x318>)
 801306a:	4810      	ldr	r0, [pc, #64]	; (80130ac <dhcp_parse_reply+0x31c>)
 801306c:	f003 f80a 	bl	8016084 <iprintf>
 8013070:	f06f 0305 	mvn.w	r3, #5
 8013074:	e14a      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013076:	2302      	movs	r3, #2
 8013078:	623b      	str	r3, [r7, #32]
        break;
 801307a:	e034      	b.n	80130e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801307c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013080:	2b04      	cmp	r3, #4
 8013082:	d009      	beq.n	8013098 <dhcp_parse_reply+0x308>
 8013084:	4b07      	ldr	r3, [pc, #28]	; (80130a4 <dhcp_parse_reply+0x314>)
 8013086:	f240 625d 	movw	r2, #1629	; 0x65d
 801308a:	4907      	ldr	r1, [pc, #28]	; (80130a8 <dhcp_parse_reply+0x318>)
 801308c:	4807      	ldr	r0, [pc, #28]	; (80130ac <dhcp_parse_reply+0x31c>)
 801308e:	f002 fff9 	bl	8016084 <iprintf>
 8013092:	f06f 0305 	mvn.w	r3, #5
 8013096:	e139      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013098:	2304      	movs	r3, #4
 801309a:	623b      	str	r3, [r7, #32]
        break;
 801309c:	e023      	b.n	80130e6 <dhcp_parse_reply+0x356>
 801309e:	bf00      	nop
 80130a0:	2000b934 	.word	0x2000b934
 80130a4:	080196e4 	.word	0x080196e4
 80130a8:	0801996c 	.word	0x0801996c
 80130ac:	08019744 	.word	0x08019744
 80130b0:	08019978 	.word	0x08019978
 80130b4:	0801998c 	.word	0x0801998c
 80130b8:	08019998 	.word	0x08019998
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80130bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130c0:	2b04      	cmp	r3, #4
 80130c2:	d009      	beq.n	80130d8 <dhcp_parse_reply+0x348>
 80130c4:	4b93      	ldr	r3, [pc, #588]	; (8013314 <dhcp_parse_reply+0x584>)
 80130c6:	f240 6261 	movw	r2, #1633	; 0x661
 80130ca:	4993      	ldr	r1, [pc, #588]	; (8013318 <dhcp_parse_reply+0x588>)
 80130cc:	4893      	ldr	r0, [pc, #588]	; (801331c <dhcp_parse_reply+0x58c>)
 80130ce:	f002 ffd9 	bl	8016084 <iprintf>
 80130d2:	f06f 0305 	mvn.w	r3, #5
 80130d6:	e119      	b.n	801330c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80130d8:	2305      	movs	r3, #5
 80130da:	623b      	str	r3, [r7, #32]
        break;
 80130dc:	e003      	b.n	80130e6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80130de:	2300      	movs	r3, #0
 80130e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80130e4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80130e6:	7dfb      	ldrb	r3, [r7, #23]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d103      	bne.n	80130f4 <dhcp_parse_reply+0x364>
      offset++;
 80130ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130ee:	3301      	adds	r3, #1
 80130f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80130f2:	e0a1      	b.n	8013238 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80130f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80130f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130fa:	4413      	add	r3, r2
 80130fc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013100:	4293      	cmp	r3, r2
 8013102:	dd02      	ble.n	801310a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013104:	f06f 0301 	mvn.w	r3, #1
 8013108:	e100      	b.n	801330c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801310a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801310e:	b29a      	uxth	r2, r3
 8013110:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013112:	4413      	add	r3, r2
 8013114:	b29b      	uxth	r3, r3
 8013116:	3302      	adds	r3, #2
 8013118:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801311a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801311e:	2b00      	cmp	r3, #0
 8013120:	f000 808a 	beq.w	8013238 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013124:	2300      	movs	r3, #0
 8013126:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	2b00      	cmp	r3, #0
 801312c:	db02      	blt.n	8013134 <dhcp_parse_reply+0x3a4>
 801312e:	6a3b      	ldr	r3, [r7, #32]
 8013130:	2b07      	cmp	r3, #7
 8013132:	dd06      	ble.n	8013142 <dhcp_parse_reply+0x3b2>
 8013134:	4b77      	ldr	r3, [pc, #476]	; (8013314 <dhcp_parse_reply+0x584>)
 8013136:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801313a:	4979      	ldr	r1, [pc, #484]	; (8013320 <dhcp_parse_reply+0x590>)
 801313c:	4877      	ldr	r0, [pc, #476]	; (801331c <dhcp_parse_reply+0x58c>)
 801313e:	f002 ffa1 	bl	8016084 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013142:	4a78      	ldr	r2, [pc, #480]	; (8013324 <dhcp_parse_reply+0x594>)
 8013144:	6a3b      	ldr	r3, [r7, #32]
 8013146:	4413      	add	r3, r2
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d174      	bne.n	8013238 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801314e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013152:	2b04      	cmp	r3, #4
 8013154:	bf28      	it	cs
 8013156:	2304      	movcs	r3, #4
 8013158:	b2db      	uxtb	r3, r3
 801315a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801315c:	8bfb      	ldrh	r3, [r7, #30]
 801315e:	8aba      	ldrh	r2, [r7, #20]
 8013160:	f107 0108 	add.w	r1, r7, #8
 8013164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013166:	f7f8 fc19 	bl	800b99c <pbuf_copy_partial>
 801316a:	4603      	mov	r3, r0
 801316c:	461a      	mov	r2, r3
 801316e:	8abb      	ldrh	r3, [r7, #20]
 8013170:	4293      	cmp	r3, r2
 8013172:	d002      	beq.n	801317a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013174:	f06f 0301 	mvn.w	r3, #1
 8013178:	e0c8      	b.n	801330c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801317a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801317e:	2b04      	cmp	r3, #4
 8013180:	d933      	bls.n	80131ea <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013182:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b00      	cmp	r3, #0
 801318e:	d009      	beq.n	80131a4 <dhcp_parse_reply+0x414>
 8013190:	4b60      	ldr	r3, [pc, #384]	; (8013314 <dhcp_parse_reply+0x584>)
 8013192:	f240 6281 	movw	r2, #1665	; 0x681
 8013196:	4964      	ldr	r1, [pc, #400]	; (8013328 <dhcp_parse_reply+0x598>)
 8013198:	4860      	ldr	r0, [pc, #384]	; (801331c <dhcp_parse_reply+0x58c>)
 801319a:	f002 ff73 	bl	8016084 <iprintf>
 801319e:	f06f 0305 	mvn.w	r3, #5
 80131a2:	e0b3      	b.n	801330c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80131a4:	4a5f      	ldr	r2, [pc, #380]	; (8013324 <dhcp_parse_reply+0x594>)
 80131a6:	6a3b      	ldr	r3, [r7, #32]
 80131a8:	4413      	add	r3, r2
 80131aa:	2201      	movs	r2, #1
 80131ac:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7f6 fe4a 	bl	8009e4a <lwip_htonl>
 80131b6:	4602      	mov	r2, r0
 80131b8:	495c      	ldr	r1, [pc, #368]	; (801332c <dhcp_parse_reply+0x59c>)
 80131ba:	6a3b      	ldr	r3, [r7, #32]
 80131bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80131c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80131c4:	3b04      	subs	r3, #4
 80131c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80131ca:	8bfb      	ldrh	r3, [r7, #30]
 80131cc:	3304      	adds	r3, #4
 80131ce:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80131d0:	8a7a      	ldrh	r2, [r7, #18]
 80131d2:	8bfb      	ldrh	r3, [r7, #30]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d202      	bcs.n	80131de <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80131d8:	f06f 0301 	mvn.w	r3, #1
 80131dc:	e096      	b.n	801330c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80131de:	8a7b      	ldrh	r3, [r7, #18]
 80131e0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80131e2:	6a3b      	ldr	r3, [r7, #32]
 80131e4:	3301      	adds	r3, #1
 80131e6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80131e8:	e79e      	b.n	8013128 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80131ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80131ee:	2b04      	cmp	r3, #4
 80131f0:	d106      	bne.n	8013200 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7f6 fe28 	bl	8009e4a <lwip_htonl>
 80131fa:	4603      	mov	r3, r0
 80131fc:	60bb      	str	r3, [r7, #8]
 80131fe:	e011      	b.n	8013224 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013204:	2b01      	cmp	r3, #1
 8013206:	d009      	beq.n	801321c <dhcp_parse_reply+0x48c>
 8013208:	4b42      	ldr	r3, [pc, #264]	; (8013314 <dhcp_parse_reply+0x584>)
 801320a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801320e:	4948      	ldr	r1, [pc, #288]	; (8013330 <dhcp_parse_reply+0x5a0>)
 8013210:	4842      	ldr	r0, [pc, #264]	; (801331c <dhcp_parse_reply+0x58c>)
 8013212:	f002 ff37 	bl	8016084 <iprintf>
 8013216:	f06f 0305 	mvn.w	r3, #5
 801321a:	e077      	b.n	801330c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801321c:	f107 0308 	add.w	r3, r7, #8
 8013220:	781b      	ldrb	r3, [r3, #0]
 8013222:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013224:	4a3f      	ldr	r2, [pc, #252]	; (8013324 <dhcp_parse_reply+0x594>)
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	4413      	add	r3, r2
 801322a:	2201      	movs	r2, #1
 801322c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801322e:	68ba      	ldr	r2, [r7, #8]
 8013230:	493e      	ldr	r1, [pc, #248]	; (801332c <dhcp_parse_reply+0x59c>)
 8013232:	6a3b      	ldr	r3, [r7, #32]
 8013234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323a:	895b      	ldrh	r3, [r3, #10]
 801323c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801323e:	429a      	cmp	r2, r3
 8013240:	d324      	bcc.n	801328c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	895b      	ldrh	r3, [r3, #10]
 8013246:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324e:	895b      	ldrh	r3, [r3, #10]
 8013250:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013256:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013258:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801325a:	429a      	cmp	r2, r3
 801325c:	d213      	bcs.n	8013286 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013266:	2b00      	cmp	r3, #0
 8013268:	d109      	bne.n	801327e <dhcp_parse_reply+0x4ee>
 801326a:	4b2a      	ldr	r3, [pc, #168]	; (8013314 <dhcp_parse_reply+0x584>)
 801326c:	f240 629d 	movw	r2, #1693	; 0x69d
 8013270:	4930      	ldr	r1, [pc, #192]	; (8013334 <dhcp_parse_reply+0x5a4>)
 8013272:	482a      	ldr	r0, [pc, #168]	; (801331c <dhcp_parse_reply+0x58c>)
 8013274:	f002 ff06 	bl	8016084 <iprintf>
 8013278:	f06f 0305 	mvn.w	r3, #5
 801327c:	e046      	b.n	801330c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013284:	e002      	b.n	801328c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013286:	f06f 0301 	mvn.w	r3, #1
 801328a:	e03f      	b.n	801330c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328e:	2b00      	cmp	r3, #0
 8013290:	d00a      	beq.n	80132a8 <dhcp_parse_reply+0x518>
 8013292:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013294:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013296:	429a      	cmp	r2, r3
 8013298:	d206      	bcs.n	80132a8 <dhcp_parse_reply+0x518>
 801329a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801329c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801329e:	4413      	add	r3, r2
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	2bff      	cmp	r3, #255	; 0xff
 80132a4:	f47f adb7 	bne.w	8012e16 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80132a8:	4b1e      	ldr	r3, [pc, #120]	; (8013324 <dhcp_parse_reply+0x594>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d018      	beq.n	80132e2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80132b0:	4b1e      	ldr	r3, [pc, #120]	; (801332c <dhcp_parse_reply+0x59c>)
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80132b6:	4b1b      	ldr	r3, [pc, #108]	; (8013324 <dhcp_parse_reply+0x594>)
 80132b8:	2200      	movs	r2, #0
 80132ba:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b01      	cmp	r3, #1
 80132c0:	d102      	bne.n	80132c8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80132c2:	2301      	movs	r3, #1
 80132c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80132c6:	e00c      	b.n	80132e2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2b02      	cmp	r3, #2
 80132cc:	d102      	bne.n	80132d4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80132ce:	2301      	movs	r3, #1
 80132d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80132d2:	e006      	b.n	80132e2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2b03      	cmp	r3, #3
 80132d8:	d103      	bne.n	80132e2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80132da:	2301      	movs	r3, #1
 80132dc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80132de:	2301      	movs	r3, #1
 80132e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80132e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d006      	beq.n	80132f6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80132ec:	236c      	movs	r3, #108	; 0x6c
 80132ee:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80132f0:	23ec      	movs	r3, #236	; 0xec
 80132f2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80132f4:	e569      	b.n	8012dca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80132f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d006      	beq.n	801330a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80132fc:	2300      	movs	r3, #0
 80132fe:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013300:	232c      	movs	r3, #44	; 0x2c
 8013302:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013304:	236c      	movs	r3, #108	; 0x6c
 8013306:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013308:	e55f      	b.n	8012dca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3740      	adds	r7, #64	; 0x40
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	080196e4 	.word	0x080196e4
 8013318:	0801996c 	.word	0x0801996c
 801331c:	08019744 	.word	0x08019744
 8013320:	080199b0 	.word	0x080199b0
 8013324:	2000b934 	.word	0x2000b934
 8013328:	080199c4 	.word	0x080199c4
 801332c:	2000b93c 	.word	0x2000b93c
 8013330:	080199dc 	.word	0x080199dc
 8013334:	080199f0 	.word	0x080199f0

08013338 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b08a      	sub	sp, #40	; 0x28
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
 8013344:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013346:	4b60      	ldr	r3, [pc, #384]	; (80134c8 <dhcp_recv+0x190>)
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801334c:	6a3b      	ldr	r3, [r7, #32]
 801334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013350:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013358:	69fb      	ldr	r3, [r7, #28]
 801335a:	2b00      	cmp	r3, #0
 801335c:	f000 809d 	beq.w	801349a <dhcp_recv+0x162>
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	791b      	ldrb	r3, [r3, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	f000 8098 	beq.w	801349a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	895b      	ldrh	r3, [r3, #10]
 801336e:	2b2b      	cmp	r3, #43	; 0x2b
 8013370:	f240 8095 	bls.w	801349e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	781b      	ldrb	r3, [r3, #0]
 8013378:	2b02      	cmp	r3, #2
 801337a:	f040 8092 	bne.w	80134a2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801337e:	2300      	movs	r3, #0
 8013380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013384:	e012      	b.n	80133ac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801338a:	6a3a      	ldr	r2, [r7, #32]
 801338c:	4413      	add	r3, r2
 801338e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013396:	69b9      	ldr	r1, [r7, #24]
 8013398:	440b      	add	r3, r1
 801339a:	7f1b      	ldrb	r3, [r3, #28]
 801339c:	429a      	cmp	r2, r3
 801339e:	f040 8082 	bne.w	80134a6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80133a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133a6:	3301      	adds	r3, #1
 80133a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133ac:	6a3b      	ldr	r3, [r7, #32]
 80133ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80133b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d203      	bcs.n	80133c2 <dhcp_recv+0x8a>
 80133ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133be:	2b05      	cmp	r3, #5
 80133c0:	d9e1      	bls.n	8013386 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7f6 fd3f 	bl	8009e4a <lwip_htonl>
 80133cc:	4602      	mov	r2, r0
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d169      	bne.n	80134aa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80133d6:	69f9      	ldr	r1, [r7, #28]
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7ff fcd9 	bl	8012d90 <dhcp_parse_reply>
 80133de:	4603      	mov	r3, r0
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d164      	bne.n	80134ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80133e4:	4b39      	ldr	r3, [pc, #228]	; (80134cc <dhcp_recv+0x194>)
 80133e6:	785b      	ldrb	r3, [r3, #1]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d062      	beq.n	80134b2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80133f2:	4b37      	ldr	r3, [pc, #220]	; (80134d0 <dhcp_recv+0x198>)
 80133f4:	685b      	ldr	r3, [r3, #4]
 80133f6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80133f8:	7cfb      	ldrb	r3, [r7, #19]
 80133fa:	2b05      	cmp	r3, #5
 80133fc:	d12a      	bne.n	8013454 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	795b      	ldrb	r3, [r3, #5]
 8013402:	2b01      	cmp	r3, #1
 8013404:	d112      	bne.n	801342c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013406:	6979      	ldr	r1, [r7, #20]
 8013408:	6a38      	ldr	r0, [r7, #32]
 801340a:	f7fe fe17 	bl	801203c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801340e:	6a3b      	ldr	r3, [r7, #32]
 8013410:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013414:	f003 0308 	and.w	r3, r3, #8
 8013418:	2b00      	cmp	r3, #0
 801341a:	d003      	beq.n	8013424 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801341c:	6a38      	ldr	r0, [r7, #32]
 801341e:	f7fe fb85 	bl	8011b2c <dhcp_check>
 8013422:	e049      	b.n	80134b8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013424:	6a38      	ldr	r0, [r7, #32]
 8013426:	f7ff f867 	bl	80124f8 <dhcp_bind>
 801342a:	e045      	b.n	80134b8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	795b      	ldrb	r3, [r3, #5]
 8013430:	2b03      	cmp	r3, #3
 8013432:	d007      	beq.n	8013444 <dhcp_recv+0x10c>
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	795b      	ldrb	r3, [r3, #5]
 8013438:	2b04      	cmp	r3, #4
 801343a:	d003      	beq.n	8013444 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013440:	2b05      	cmp	r3, #5
 8013442:	d139      	bne.n	80134b8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013444:	6979      	ldr	r1, [r7, #20]
 8013446:	6a38      	ldr	r0, [r7, #32]
 8013448:	f7fe fdf8 	bl	801203c <dhcp_handle_ack>
      dhcp_bind(netif);
 801344c:	6a38      	ldr	r0, [r7, #32]
 801344e:	f7ff f853 	bl	80124f8 <dhcp_bind>
 8013452:	e031      	b.n	80134b8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013454:	7cfb      	ldrb	r3, [r7, #19]
 8013456:	2b06      	cmp	r3, #6
 8013458:	d113      	bne.n	8013482 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801345e:	2b03      	cmp	r3, #3
 8013460:	d00b      	beq.n	801347a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	795b      	ldrb	r3, [r3, #5]
 8013466:	2b01      	cmp	r3, #1
 8013468:	d007      	beq.n	801347a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801346a:	69fb      	ldr	r3, [r7, #28]
 801346c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801346e:	2b04      	cmp	r3, #4
 8013470:	d003      	beq.n	801347a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013472:	69fb      	ldr	r3, [r7, #28]
 8013474:	795b      	ldrb	r3, [r3, #5]
 8013476:	2b05      	cmp	r3, #5
 8013478:	d103      	bne.n	8013482 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801347a:	6a38      	ldr	r0, [r7, #32]
 801347c:	f7fe fb3c 	bl	8011af8 <dhcp_handle_nak>
 8013480:	e01a      	b.n	80134b8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013482:	7cfb      	ldrb	r3, [r7, #19]
 8013484:	2b02      	cmp	r3, #2
 8013486:	d116      	bne.n	80134b6 <dhcp_recv+0x17e>
 8013488:	69fb      	ldr	r3, [r7, #28]
 801348a:	795b      	ldrb	r3, [r3, #5]
 801348c:	2b06      	cmp	r3, #6
 801348e:	d112      	bne.n	80134b6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013490:	6979      	ldr	r1, [r7, #20]
 8013492:	6a38      	ldr	r0, [r7, #32]
 8013494:	f7fe fb7e 	bl	8011b94 <dhcp_handle_offer>
 8013498:	e00e      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801349a:	bf00      	nop
 801349c:	e00c      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801349e:	bf00      	nop
 80134a0:	e00a      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80134a2:	bf00      	nop
 80134a4:	e008      	b.n	80134b8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80134a6:	bf00      	nop
 80134a8:	e006      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80134aa:	bf00      	nop
 80134ac:	e004      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80134ae:	bf00      	nop
 80134b0:	e002      	b.n	80134b8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80134b2:	bf00      	nop
 80134b4:	e000      	b.n	80134b8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80134b6:	bf00      	nop
  pbuf_free(p);
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7f8 f869 	bl	800b590 <pbuf_free>
}
 80134be:	bf00      	nop
 80134c0:	3728      	adds	r7, #40	; 0x28
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
 80134c6:	bf00      	nop
 80134c8:	200081e4 	.word	0x200081e4
 80134cc:	2000b934 	.word	0x2000b934
 80134d0:	2000b93c 	.word	0x2000b93c

080134d4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b088      	sub	sp, #32
 80134d8:	af00      	add	r7, sp, #0
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	60b9      	str	r1, [r7, #8]
 80134de:	603b      	str	r3, [r7, #0]
 80134e0:	4613      	mov	r3, r2
 80134e2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d108      	bne.n	80134fc <dhcp_create_msg+0x28>
 80134ea:	4b5f      	ldr	r3, [pc, #380]	; (8013668 <dhcp_create_msg+0x194>)
 80134ec:	f240 7269 	movw	r2, #1897	; 0x769
 80134f0:	495e      	ldr	r1, [pc, #376]	; (801366c <dhcp_create_msg+0x198>)
 80134f2:	485f      	ldr	r0, [pc, #380]	; (8013670 <dhcp_create_msg+0x19c>)
 80134f4:	f002 fdc6 	bl	8016084 <iprintf>
 80134f8:	2300      	movs	r3, #0
 80134fa:	e0b1      	b.n	8013660 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80134fc:	68bb      	ldr	r3, [r7, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d108      	bne.n	8013514 <dhcp_create_msg+0x40>
 8013502:	4b59      	ldr	r3, [pc, #356]	; (8013668 <dhcp_create_msg+0x194>)
 8013504:	f240 726a 	movw	r2, #1898	; 0x76a
 8013508:	495a      	ldr	r1, [pc, #360]	; (8013674 <dhcp_create_msg+0x1a0>)
 801350a:	4859      	ldr	r0, [pc, #356]	; (8013670 <dhcp_create_msg+0x19c>)
 801350c:	f002 fdba 	bl	8016084 <iprintf>
 8013510:	2300      	movs	r3, #0
 8013512:	e0a5      	b.n	8013660 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013514:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013518:	f44f 719a 	mov.w	r1, #308	; 0x134
 801351c:	2036      	movs	r0, #54	; 0x36
 801351e:	f7f7 fd53 	bl	800afc8 <pbuf_alloc>
 8013522:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013524:	69bb      	ldr	r3, [r7, #24]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d101      	bne.n	801352e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801352a:	2300      	movs	r3, #0
 801352c:	e098      	b.n	8013660 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	895b      	ldrh	r3, [r3, #10]
 8013532:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013536:	d206      	bcs.n	8013546 <dhcp_create_msg+0x72>
 8013538:	4b4b      	ldr	r3, [pc, #300]	; (8013668 <dhcp_create_msg+0x194>)
 801353a:	f240 7271 	movw	r2, #1905	; 0x771
 801353e:	494e      	ldr	r1, [pc, #312]	; (8013678 <dhcp_create_msg+0x1a4>)
 8013540:	484b      	ldr	r0, [pc, #300]	; (8013670 <dhcp_create_msg+0x19c>)
 8013542:	f002 fd9f 	bl	8016084 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013546:	79fb      	ldrb	r3, [r7, #7]
 8013548:	2b03      	cmp	r3, #3
 801354a:	d103      	bne.n	8013554 <dhcp_create_msg+0x80>
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	795b      	ldrb	r3, [r3, #5]
 8013550:	2b03      	cmp	r3, #3
 8013552:	d10d      	bne.n	8013570 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	799b      	ldrb	r3, [r3, #6]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d105      	bne.n	8013568 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801355c:	f002 fdaa 	bl	80160b4 <rand>
 8013560:	4603      	mov	r3, r0
 8013562:	461a      	mov	r2, r3
 8013564:	4b45      	ldr	r3, [pc, #276]	; (801367c <dhcp_create_msg+0x1a8>)
 8013566:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013568:	4b44      	ldr	r3, [pc, #272]	; (801367c <dhcp_create_msg+0x1a8>)
 801356a:	681a      	ldr	r2, [r3, #0]
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013570:	69bb      	ldr	r3, [r7, #24]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013576:	f44f 729a 	mov.w	r2, #308	; 0x134
 801357a:	2100      	movs	r1, #0
 801357c:	6978      	ldr	r0, [r7, #20]
 801357e:	f002 fd79 	bl	8016074 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013582:	697b      	ldr	r3, [r7, #20]
 8013584:	2201      	movs	r2, #1
 8013586:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	2201      	movs	r2, #1
 801358c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4618      	mov	r0, r3
 801359e:	f7f6 fc54 	bl	8009e4a <lwip_htonl>
 80135a2:	4602      	mov	r2, r0
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80135a8:	79fb      	ldrb	r3, [r7, #7]
 80135aa:	2b08      	cmp	r3, #8
 80135ac:	d010      	beq.n	80135d0 <dhcp_create_msg+0xfc>
 80135ae:	79fb      	ldrb	r3, [r7, #7]
 80135b0:	2b04      	cmp	r3, #4
 80135b2:	d00d      	beq.n	80135d0 <dhcp_create_msg+0xfc>
 80135b4:	79fb      	ldrb	r3, [r7, #7]
 80135b6:	2b07      	cmp	r3, #7
 80135b8:	d00a      	beq.n	80135d0 <dhcp_create_msg+0xfc>
 80135ba:	79fb      	ldrb	r3, [r7, #7]
 80135bc:	2b03      	cmp	r3, #3
 80135be:	d10c      	bne.n	80135da <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80135c4:	2b05      	cmp	r3, #5
 80135c6:	d003      	beq.n	80135d0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	795b      	ldrb	r3, [r3, #5]
 80135cc:	2b04      	cmp	r3, #4
 80135ce:	d104      	bne.n	80135da <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	3304      	adds	r3, #4
 80135d4:	681a      	ldr	r2, [r3, #0]
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80135da:	2300      	movs	r3, #0
 80135dc:	83fb      	strh	r3, [r7, #30]
 80135de:	e00c      	b.n	80135fa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80135e0:	8bfa      	ldrh	r2, [r7, #30]
 80135e2:	8bfb      	ldrh	r3, [r7, #30]
 80135e4:	68f9      	ldr	r1, [r7, #12]
 80135e6:	440a      	add	r2, r1
 80135e8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80135ec:	697a      	ldr	r2, [r7, #20]
 80135ee:	4413      	add	r3, r2
 80135f0:	460a      	mov	r2, r1
 80135f2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80135f4:	8bfb      	ldrh	r3, [r7, #30]
 80135f6:	3301      	adds	r3, #1
 80135f8:	83fb      	strh	r3, [r7, #30]
 80135fa:	8bfb      	ldrh	r3, [r7, #30]
 80135fc:	2b05      	cmp	r3, #5
 80135fe:	d9ef      	bls.n	80135e0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	2200      	movs	r2, #0
 8013604:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013608:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801360c:	2200      	movs	r2, #0
 801360e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013612:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013616:	2200      	movs	r2, #0
 8013618:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801361c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013620:	2200      	movs	r2, #0
 8013622:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013626:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013630:	2301      	movs	r3, #1
 8013632:	2235      	movs	r2, #53	; 0x35
 8013634:	2000      	movs	r0, #0
 8013636:	f7ff fadb 	bl	8012bf0 <dhcp_option>
 801363a:	4603      	mov	r3, r0
 801363c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013644:	79fa      	ldrb	r2, [r7, #7]
 8013646:	8a7b      	ldrh	r3, [r7, #18]
 8013648:	4618      	mov	r0, r3
 801364a:	f7ff fb05 	bl	8012c58 <dhcp_option_byte>
 801364e:	4603      	mov	r3, r0
 8013650:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d002      	beq.n	801365e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	8a7a      	ldrh	r2, [r7, #18]
 801365c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801365e:	69bb      	ldr	r3, [r7, #24]
}
 8013660:	4618      	mov	r0, r3
 8013662:	3720      	adds	r7, #32
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}
 8013668:	080196e4 	.word	0x080196e4
 801366c:	08019a04 	.word	0x08019a04
 8013670:	08019744 	.word	0x08019744
 8013674:	08019a24 	.word	0x08019a24
 8013678:	08019a44 	.word	0x08019a44
 801367c:	20004a50 	.word	0x20004a50

08013680 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	4603      	mov	r3, r0
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801368e:	89fb      	ldrh	r3, [r7, #14]
 8013690:	1c5a      	adds	r2, r3, #1
 8013692:	81fa      	strh	r2, [r7, #14]
 8013694:	461a      	mov	r2, r3
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	4413      	add	r3, r2
 801369a:	22ff      	movs	r2, #255	; 0xff
 801369c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801369e:	e007      	b.n	80136b0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80136a0:	89fb      	ldrh	r3, [r7, #14]
 80136a2:	1c5a      	adds	r2, r3, #1
 80136a4:	81fa      	strh	r2, [r7, #14]
 80136a6:	461a      	mov	r2, r3
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	4413      	add	r3, r2
 80136ac:	2200      	movs	r2, #0
 80136ae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80136b0:	89fb      	ldrh	r3, [r7, #14]
 80136b2:	2b43      	cmp	r3, #67	; 0x43
 80136b4:	d904      	bls.n	80136c0 <dhcp_option_trailer+0x40>
 80136b6:	89fb      	ldrh	r3, [r7, #14]
 80136b8:	f003 0303 	and.w	r3, r3, #3
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d002      	beq.n	80136c6 <dhcp_option_trailer+0x46>
 80136c0:	89fb      	ldrh	r3, [r7, #14]
 80136c2:	2b43      	cmp	r3, #67	; 0x43
 80136c4:	d9ec      	bls.n	80136a0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80136c6:	89fb      	ldrh	r3, [r7, #14]
 80136c8:	33f0      	adds	r3, #240	; 0xf0
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	4619      	mov	r1, r3
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f7f7 fdd8 	bl	800b284 <pbuf_realloc>
}
 80136d4:	bf00      	nop
 80136d6:	3710      	adds	r7, #16
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d017      	beq.n	801371a <dhcp_supplied_address+0x3e>
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d013      	beq.n	801371a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136f6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	795b      	ldrb	r3, [r3, #5]
 80136fc:	2b0a      	cmp	r3, #10
 80136fe:	d007      	beq.n	8013710 <dhcp_supplied_address+0x34>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	795b      	ldrb	r3, [r3, #5]
 8013704:	2b05      	cmp	r3, #5
 8013706:	d003      	beq.n	8013710 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801370c:	2b04      	cmp	r3, #4
 801370e:	d101      	bne.n	8013714 <dhcp_supplied_address+0x38>
 8013710:	2301      	movs	r3, #1
 8013712:	e000      	b.n	8013716 <dhcp_supplied_address+0x3a>
 8013714:	2300      	movs	r3, #0
 8013716:	b2db      	uxtb	r3, r3
 8013718:	e000      	b.n	801371c <dhcp_supplied_address+0x40>
  }
  return 0;
 801371a:	2300      	movs	r3, #0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3714      	adds	r7, #20
 8013720:	46bd      	mov	sp, r7
 8013722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013726:	4770      	bx	lr

08013728 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b082      	sub	sp, #8
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013730:	4915      	ldr	r1, [pc, #84]	; (8013788 <etharp_free_entry+0x60>)
 8013732:	687a      	ldr	r2, [r7, #4]
 8013734:	4613      	mov	r3, r2
 8013736:	005b      	lsls	r3, r3, #1
 8013738:	4413      	add	r3, r2
 801373a:	00db      	lsls	r3, r3, #3
 801373c:	440b      	add	r3, r1
 801373e:	681b      	ldr	r3, [r3, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d013      	beq.n	801376c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013744:	4910      	ldr	r1, [pc, #64]	; (8013788 <etharp_free_entry+0x60>)
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	4613      	mov	r3, r2
 801374a:	005b      	lsls	r3, r3, #1
 801374c:	4413      	add	r3, r2
 801374e:	00db      	lsls	r3, r3, #3
 8013750:	440b      	add	r3, r1
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	4618      	mov	r0, r3
 8013756:	f7f7 ff1b 	bl	800b590 <pbuf_free>
    arp_table[i].q = NULL;
 801375a:	490b      	ldr	r1, [pc, #44]	; (8013788 <etharp_free_entry+0x60>)
 801375c:	687a      	ldr	r2, [r7, #4]
 801375e:	4613      	mov	r3, r2
 8013760:	005b      	lsls	r3, r3, #1
 8013762:	4413      	add	r3, r2
 8013764:	00db      	lsls	r3, r3, #3
 8013766:	440b      	add	r3, r1
 8013768:	2200      	movs	r2, #0
 801376a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801376c:	4906      	ldr	r1, [pc, #24]	; (8013788 <etharp_free_entry+0x60>)
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	4613      	mov	r3, r2
 8013772:	005b      	lsls	r3, r3, #1
 8013774:	4413      	add	r3, r2
 8013776:	00db      	lsls	r3, r3, #3
 8013778:	440b      	add	r3, r1
 801377a:	3314      	adds	r3, #20
 801377c:	2200      	movs	r2, #0
 801377e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013780:	bf00      	nop
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	20004a54 	.word	0x20004a54

0801378c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013792:	2300      	movs	r3, #0
 8013794:	607b      	str	r3, [r7, #4]
 8013796:	e096      	b.n	80138c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013798:	494f      	ldr	r1, [pc, #316]	; (80138d8 <etharp_tmr+0x14c>)
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	4613      	mov	r3, r2
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	4413      	add	r3, r2
 80137a2:	00db      	lsls	r3, r3, #3
 80137a4:	440b      	add	r3, r1
 80137a6:	3314      	adds	r3, #20
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80137ac:	78fb      	ldrb	r3, [r7, #3]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 8086 	beq.w	80138c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80137b4:	4948      	ldr	r1, [pc, #288]	; (80138d8 <etharp_tmr+0x14c>)
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	4613      	mov	r3, r2
 80137ba:	005b      	lsls	r3, r3, #1
 80137bc:	4413      	add	r3, r2
 80137be:	00db      	lsls	r3, r3, #3
 80137c0:	440b      	add	r3, r1
 80137c2:	3312      	adds	r3, #18
 80137c4:	881b      	ldrh	r3, [r3, #0]
 80137c6:	3301      	adds	r3, #1
 80137c8:	b298      	uxth	r0, r3
 80137ca:	4943      	ldr	r1, [pc, #268]	; (80138d8 <etharp_tmr+0x14c>)
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	4613      	mov	r3, r2
 80137d0:	005b      	lsls	r3, r3, #1
 80137d2:	4413      	add	r3, r2
 80137d4:	00db      	lsls	r3, r3, #3
 80137d6:	440b      	add	r3, r1
 80137d8:	3312      	adds	r3, #18
 80137da:	4602      	mov	r2, r0
 80137dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80137de:	493e      	ldr	r1, [pc, #248]	; (80138d8 <etharp_tmr+0x14c>)
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	4613      	mov	r3, r2
 80137e4:	005b      	lsls	r3, r3, #1
 80137e6:	4413      	add	r3, r2
 80137e8:	00db      	lsls	r3, r3, #3
 80137ea:	440b      	add	r3, r1
 80137ec:	3312      	adds	r3, #18
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80137f4:	d215      	bcs.n	8013822 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80137f6:	4938      	ldr	r1, [pc, #224]	; (80138d8 <etharp_tmr+0x14c>)
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	4613      	mov	r3, r2
 80137fc:	005b      	lsls	r3, r3, #1
 80137fe:	4413      	add	r3, r2
 8013800:	00db      	lsls	r3, r3, #3
 8013802:	440b      	add	r3, r1
 8013804:	3314      	adds	r3, #20
 8013806:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013808:	2b01      	cmp	r3, #1
 801380a:	d10e      	bne.n	801382a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801380c:	4932      	ldr	r1, [pc, #200]	; (80138d8 <etharp_tmr+0x14c>)
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	4613      	mov	r3, r2
 8013812:	005b      	lsls	r3, r3, #1
 8013814:	4413      	add	r3, r2
 8013816:	00db      	lsls	r3, r3, #3
 8013818:	440b      	add	r3, r1
 801381a:	3312      	adds	r3, #18
 801381c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801381e:	2b04      	cmp	r3, #4
 8013820:	d903      	bls.n	801382a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f7ff ff80 	bl	8013728 <etharp_free_entry>
 8013828:	e04a      	b.n	80138c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801382a:	492b      	ldr	r1, [pc, #172]	; (80138d8 <etharp_tmr+0x14c>)
 801382c:	687a      	ldr	r2, [r7, #4]
 801382e:	4613      	mov	r3, r2
 8013830:	005b      	lsls	r3, r3, #1
 8013832:	4413      	add	r3, r2
 8013834:	00db      	lsls	r3, r3, #3
 8013836:	440b      	add	r3, r1
 8013838:	3314      	adds	r3, #20
 801383a:	781b      	ldrb	r3, [r3, #0]
 801383c:	2b03      	cmp	r3, #3
 801383e:	d10a      	bne.n	8013856 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013840:	4925      	ldr	r1, [pc, #148]	; (80138d8 <etharp_tmr+0x14c>)
 8013842:	687a      	ldr	r2, [r7, #4]
 8013844:	4613      	mov	r3, r2
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	4413      	add	r3, r2
 801384a:	00db      	lsls	r3, r3, #3
 801384c:	440b      	add	r3, r1
 801384e:	3314      	adds	r3, #20
 8013850:	2204      	movs	r2, #4
 8013852:	701a      	strb	r2, [r3, #0]
 8013854:	e034      	b.n	80138c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013856:	4920      	ldr	r1, [pc, #128]	; (80138d8 <etharp_tmr+0x14c>)
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	4613      	mov	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	4413      	add	r3, r2
 8013860:	00db      	lsls	r3, r3, #3
 8013862:	440b      	add	r3, r1
 8013864:	3314      	adds	r3, #20
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	2b04      	cmp	r3, #4
 801386a:	d10a      	bne.n	8013882 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801386c:	491a      	ldr	r1, [pc, #104]	; (80138d8 <etharp_tmr+0x14c>)
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	4613      	mov	r3, r2
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	4413      	add	r3, r2
 8013876:	00db      	lsls	r3, r3, #3
 8013878:	440b      	add	r3, r1
 801387a:	3314      	adds	r3, #20
 801387c:	2202      	movs	r2, #2
 801387e:	701a      	strb	r2, [r3, #0]
 8013880:	e01e      	b.n	80138c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013882:	4915      	ldr	r1, [pc, #84]	; (80138d8 <etharp_tmr+0x14c>)
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	4613      	mov	r3, r2
 8013888:	005b      	lsls	r3, r3, #1
 801388a:	4413      	add	r3, r2
 801388c:	00db      	lsls	r3, r3, #3
 801388e:	440b      	add	r3, r1
 8013890:	3314      	adds	r3, #20
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	2b01      	cmp	r3, #1
 8013896:	d113      	bne.n	80138c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013898:	490f      	ldr	r1, [pc, #60]	; (80138d8 <etharp_tmr+0x14c>)
 801389a:	687a      	ldr	r2, [r7, #4]
 801389c:	4613      	mov	r3, r2
 801389e:	005b      	lsls	r3, r3, #1
 80138a0:	4413      	add	r3, r2
 80138a2:	00db      	lsls	r3, r3, #3
 80138a4:	440b      	add	r3, r1
 80138a6:	3308      	adds	r3, #8
 80138a8:	6818      	ldr	r0, [r3, #0]
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	4613      	mov	r3, r2
 80138ae:	005b      	lsls	r3, r3, #1
 80138b0:	4413      	add	r3, r2
 80138b2:	00db      	lsls	r3, r3, #3
 80138b4:	4a08      	ldr	r2, [pc, #32]	; (80138d8 <etharp_tmr+0x14c>)
 80138b6:	4413      	add	r3, r2
 80138b8:	3304      	adds	r3, #4
 80138ba:	4619      	mov	r1, r3
 80138bc:	f000 fe72 	bl	80145a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	3301      	adds	r3, #1
 80138c4:	607b      	str	r3, [r7, #4]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	2b09      	cmp	r3, #9
 80138ca:	f77f af65 	ble.w	8013798 <etharp_tmr+0xc>
      }
    }
  }
}
 80138ce:	bf00      	nop
 80138d0:	bf00      	nop
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	20004a54 	.word	0x20004a54

080138dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b08a      	sub	sp, #40	; 0x28
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	460b      	mov	r3, r1
 80138e6:	607a      	str	r2, [r7, #4]
 80138e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80138ea:	230a      	movs	r3, #10
 80138ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80138ee:	230a      	movs	r3, #10
 80138f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80138f2:	230a      	movs	r3, #10
 80138f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80138f6:	2300      	movs	r3, #0
 80138f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80138fa:	230a      	movs	r3, #10
 80138fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80138fe:	2300      	movs	r3, #0
 8013900:	83bb      	strh	r3, [r7, #28]
 8013902:	2300      	movs	r3, #0
 8013904:	837b      	strh	r3, [r7, #26]
 8013906:	2300      	movs	r3, #0
 8013908:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801390a:	2300      	movs	r3, #0
 801390c:	843b      	strh	r3, [r7, #32]
 801390e:	e0ae      	b.n	8013a6e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013914:	49a6      	ldr	r1, [pc, #664]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013916:	4613      	mov	r3, r2
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	4413      	add	r3, r2
 801391c:	00db      	lsls	r3, r3, #3
 801391e:	440b      	add	r3, r1
 8013920:	3314      	adds	r3, #20
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013926:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801392a:	2b0a      	cmp	r3, #10
 801392c:	d105      	bne.n	801393a <etharp_find_entry+0x5e>
 801392e:	7dfb      	ldrb	r3, [r7, #23]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d102      	bne.n	801393a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013934:	8c3b      	ldrh	r3, [r7, #32]
 8013936:	847b      	strh	r3, [r7, #34]	; 0x22
 8013938:	e095      	b.n	8013a66 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801393a:	7dfb      	ldrb	r3, [r7, #23]
 801393c:	2b00      	cmp	r3, #0
 801393e:	f000 8092 	beq.w	8013a66 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013942:	7dfb      	ldrb	r3, [r7, #23]
 8013944:	2b01      	cmp	r3, #1
 8013946:	d009      	beq.n	801395c <etharp_find_entry+0x80>
 8013948:	7dfb      	ldrb	r3, [r7, #23]
 801394a:	2b01      	cmp	r3, #1
 801394c:	d806      	bhi.n	801395c <etharp_find_entry+0x80>
 801394e:	4b99      	ldr	r3, [pc, #612]	; (8013bb4 <etharp_find_entry+0x2d8>)
 8013950:	f240 1223 	movw	r2, #291	; 0x123
 8013954:	4998      	ldr	r1, [pc, #608]	; (8013bb8 <etharp_find_entry+0x2dc>)
 8013956:	4899      	ldr	r0, [pc, #612]	; (8013bbc <etharp_find_entry+0x2e0>)
 8013958:	f002 fb94 	bl	8016084 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d020      	beq.n	80139a4 <etharp_find_entry+0xc8>
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	6819      	ldr	r1, [r3, #0]
 8013966:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801396a:	4891      	ldr	r0, [pc, #580]	; (8013bb0 <etharp_find_entry+0x2d4>)
 801396c:	4613      	mov	r3, r2
 801396e:	005b      	lsls	r3, r3, #1
 8013970:	4413      	add	r3, r2
 8013972:	00db      	lsls	r3, r3, #3
 8013974:	4403      	add	r3, r0
 8013976:	3304      	adds	r3, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	4299      	cmp	r1, r3
 801397c:	d112      	bne.n	80139a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00c      	beq.n	801399e <etharp_find_entry+0xc2>
 8013984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013988:	4989      	ldr	r1, [pc, #548]	; (8013bb0 <etharp_find_entry+0x2d4>)
 801398a:	4613      	mov	r3, r2
 801398c:	005b      	lsls	r3, r3, #1
 801398e:	4413      	add	r3, r2
 8013990:	00db      	lsls	r3, r3, #3
 8013992:	440b      	add	r3, r1
 8013994:	3308      	adds	r3, #8
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	429a      	cmp	r2, r3
 801399c:	d102      	bne.n	80139a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801399e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139a2:	e100      	b.n	8013ba6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80139a4:	7dfb      	ldrb	r3, [r7, #23]
 80139a6:	2b01      	cmp	r3, #1
 80139a8:	d140      	bne.n	8013a2c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80139aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ae:	4980      	ldr	r1, [pc, #512]	; (8013bb0 <etharp_find_entry+0x2d4>)
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	00db      	lsls	r3, r3, #3
 80139b8:	440b      	add	r3, r1
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d01a      	beq.n	80139f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80139c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139c4:	497a      	ldr	r1, [pc, #488]	; (8013bb0 <etharp_find_entry+0x2d4>)
 80139c6:	4613      	mov	r3, r2
 80139c8:	005b      	lsls	r3, r3, #1
 80139ca:	4413      	add	r3, r2
 80139cc:	00db      	lsls	r3, r3, #3
 80139ce:	440b      	add	r3, r1
 80139d0:	3312      	adds	r3, #18
 80139d2:	881b      	ldrh	r3, [r3, #0]
 80139d4:	8bba      	ldrh	r2, [r7, #28]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d845      	bhi.n	8013a66 <etharp_find_entry+0x18a>
            old_queue = i;
 80139da:	8c3b      	ldrh	r3, [r7, #32]
 80139dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80139de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139e2:	4973      	ldr	r1, [pc, #460]	; (8013bb0 <etharp_find_entry+0x2d4>)
 80139e4:	4613      	mov	r3, r2
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	4413      	add	r3, r2
 80139ea:	00db      	lsls	r3, r3, #3
 80139ec:	440b      	add	r3, r1
 80139ee:	3312      	adds	r3, #18
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	83bb      	strh	r3, [r7, #28]
 80139f4:	e037      	b.n	8013a66 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80139f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139fa:	496d      	ldr	r1, [pc, #436]	; (8013bb0 <etharp_find_entry+0x2d4>)
 80139fc:	4613      	mov	r3, r2
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	4413      	add	r3, r2
 8013a02:	00db      	lsls	r3, r3, #3
 8013a04:	440b      	add	r3, r1
 8013a06:	3312      	adds	r3, #18
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	8b7a      	ldrh	r2, [r7, #26]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d82a      	bhi.n	8013a66 <etharp_find_entry+0x18a>
            old_pending = i;
 8013a10:	8c3b      	ldrh	r3, [r7, #32]
 8013a12:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a18:	4965      	ldr	r1, [pc, #404]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013a1a:	4613      	mov	r3, r2
 8013a1c:	005b      	lsls	r3, r3, #1
 8013a1e:	4413      	add	r3, r2
 8013a20:	00db      	lsls	r3, r3, #3
 8013a22:	440b      	add	r3, r1
 8013a24:	3312      	adds	r3, #18
 8013a26:	881b      	ldrh	r3, [r3, #0]
 8013a28:	837b      	strh	r3, [r7, #26]
 8013a2a:	e01c      	b.n	8013a66 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013a2c:	7dfb      	ldrb	r3, [r7, #23]
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d919      	bls.n	8013a66 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013a32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a36:	495e      	ldr	r1, [pc, #376]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013a38:	4613      	mov	r3, r2
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	4413      	add	r3, r2
 8013a3e:	00db      	lsls	r3, r3, #3
 8013a40:	440b      	add	r3, r1
 8013a42:	3312      	adds	r3, #18
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	8b3a      	ldrh	r2, [r7, #24]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d80c      	bhi.n	8013a66 <etharp_find_entry+0x18a>
            old_stable = i;
 8013a4c:	8c3b      	ldrh	r3, [r7, #32]
 8013a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a54:	4956      	ldr	r1, [pc, #344]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013a56:	4613      	mov	r3, r2
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	4413      	add	r3, r2
 8013a5c:	00db      	lsls	r3, r3, #3
 8013a5e:	440b      	add	r3, r1
 8013a60:	3312      	adds	r3, #18
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a66:	8c3b      	ldrh	r3, [r7, #32]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	843b      	strh	r3, [r7, #32]
 8013a6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a72:	2b09      	cmp	r3, #9
 8013a74:	f77f af4c 	ble.w	8013910 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013a78:	7afb      	ldrb	r3, [r7, #11]
 8013a7a:	f003 0302 	and.w	r3, r3, #2
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d108      	bne.n	8013a94 <etharp_find_entry+0x1b8>
 8013a82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013a86:	2b0a      	cmp	r3, #10
 8013a88:	d107      	bne.n	8013a9a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013a8a:	7afb      	ldrb	r3, [r7, #11]
 8013a8c:	f003 0301 	and.w	r3, r3, #1
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d102      	bne.n	8013a9a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013a94:	f04f 33ff 	mov.w	r3, #4294967295
 8013a98:	e085      	b.n	8013ba6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013a9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013a9e:	2b09      	cmp	r3, #9
 8013aa0:	dc02      	bgt.n	8013aa8 <etharp_find_entry+0x1cc>
    i = empty;
 8013aa2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013aa4:	843b      	strh	r3, [r7, #32]
 8013aa6:	e039      	b.n	8013b1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013aa8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013aac:	2b09      	cmp	r3, #9
 8013aae:	dc14      	bgt.n	8013ada <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013ab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ab2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013ab4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ab8:	493d      	ldr	r1, [pc, #244]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013aba:	4613      	mov	r3, r2
 8013abc:	005b      	lsls	r3, r3, #1
 8013abe:	4413      	add	r3, r2
 8013ac0:	00db      	lsls	r3, r3, #3
 8013ac2:	440b      	add	r3, r1
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d018      	beq.n	8013afc <etharp_find_entry+0x220>
 8013aca:	4b3a      	ldr	r3, [pc, #232]	; (8013bb4 <etharp_find_entry+0x2d8>)
 8013acc:	f240 126d 	movw	r2, #365	; 0x16d
 8013ad0:	493b      	ldr	r1, [pc, #236]	; (8013bc0 <etharp_find_entry+0x2e4>)
 8013ad2:	483a      	ldr	r0, [pc, #232]	; (8013bbc <etharp_find_entry+0x2e0>)
 8013ad4:	f002 fad6 	bl	8016084 <iprintf>
 8013ad8:	e010      	b.n	8013afc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013ada:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013ade:	2b09      	cmp	r3, #9
 8013ae0:	dc02      	bgt.n	8013ae8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013ae4:	843b      	strh	r3, [r7, #32]
 8013ae6:	e009      	b.n	8013afc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013ae8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013aec:	2b09      	cmp	r3, #9
 8013aee:	dc02      	bgt.n	8013af6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013af0:	8bfb      	ldrh	r3, [r7, #30]
 8013af2:	843b      	strh	r3, [r7, #32]
 8013af4:	e002      	b.n	8013afc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013af6:	f04f 33ff 	mov.w	r3, #4294967295
 8013afa:	e054      	b.n	8013ba6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013afc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b00:	2b09      	cmp	r3, #9
 8013b02:	dd06      	ble.n	8013b12 <etharp_find_entry+0x236>
 8013b04:	4b2b      	ldr	r3, [pc, #172]	; (8013bb4 <etharp_find_entry+0x2d8>)
 8013b06:	f240 127f 	movw	r2, #383	; 0x17f
 8013b0a:	492e      	ldr	r1, [pc, #184]	; (8013bc4 <etharp_find_entry+0x2e8>)
 8013b0c:	482b      	ldr	r0, [pc, #172]	; (8013bbc <etharp_find_entry+0x2e0>)
 8013b0e:	f002 fab9 	bl	8016084 <iprintf>
    etharp_free_entry(i);
 8013b12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff fe06 	bl	8013728 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b20:	2b09      	cmp	r3, #9
 8013b22:	dd06      	ble.n	8013b32 <etharp_find_entry+0x256>
 8013b24:	4b23      	ldr	r3, [pc, #140]	; (8013bb4 <etharp_find_entry+0x2d8>)
 8013b26:	f240 1283 	movw	r2, #387	; 0x183
 8013b2a:	4926      	ldr	r1, [pc, #152]	; (8013bc4 <etharp_find_entry+0x2e8>)
 8013b2c:	4823      	ldr	r0, [pc, #140]	; (8013bbc <etharp_find_entry+0x2e0>)
 8013b2e:	f002 faa9 	bl	8016084 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013b32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b36:	491e      	ldr	r1, [pc, #120]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013b38:	4613      	mov	r3, r2
 8013b3a:	005b      	lsls	r3, r3, #1
 8013b3c:	4413      	add	r3, r2
 8013b3e:	00db      	lsls	r3, r3, #3
 8013b40:	440b      	add	r3, r1
 8013b42:	3314      	adds	r3, #20
 8013b44:	781b      	ldrb	r3, [r3, #0]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d006      	beq.n	8013b58 <etharp_find_entry+0x27c>
 8013b4a:	4b1a      	ldr	r3, [pc, #104]	; (8013bb4 <etharp_find_entry+0x2d8>)
 8013b4c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013b50:	491d      	ldr	r1, [pc, #116]	; (8013bc8 <etharp_find_entry+0x2ec>)
 8013b52:	481a      	ldr	r0, [pc, #104]	; (8013bbc <etharp_find_entry+0x2e0>)
 8013b54:	f002 fa96 	bl	8016084 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00b      	beq.n	8013b76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013b5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6819      	ldr	r1, [r3, #0]
 8013b66:	4812      	ldr	r0, [pc, #72]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013b68:	4613      	mov	r3, r2
 8013b6a:	005b      	lsls	r3, r3, #1
 8013b6c:	4413      	add	r3, r2
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	4403      	add	r3, r0
 8013b72:	3304      	adds	r3, #4
 8013b74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013b76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b7a:	490d      	ldr	r1, [pc, #52]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	005b      	lsls	r3, r3, #1
 8013b80:	4413      	add	r3, r2
 8013b82:	00db      	lsls	r3, r3, #3
 8013b84:	440b      	add	r3, r1
 8013b86:	3312      	adds	r3, #18
 8013b88:	2200      	movs	r2, #0
 8013b8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013b8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b90:	4907      	ldr	r1, [pc, #28]	; (8013bb0 <etharp_find_entry+0x2d4>)
 8013b92:	4613      	mov	r3, r2
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	4413      	add	r3, r2
 8013b98:	00db      	lsls	r3, r3, #3
 8013b9a:	440b      	add	r3, r1
 8013b9c:	3308      	adds	r3, #8
 8013b9e:	687a      	ldr	r2, [r7, #4]
 8013ba0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013ba2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3728      	adds	r7, #40	; 0x28
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	20004a54 	.word	0x20004a54
 8013bb4:	08019a84 	.word	0x08019a84
 8013bb8:	08019abc 	.word	0x08019abc
 8013bbc:	08019afc 	.word	0x08019afc
 8013bc0:	08019b24 	.word	0x08019b24
 8013bc4:	08019b3c 	.word	0x08019b3c
 8013bc8:	08019b50 	.word	0x08019b50

08013bcc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b088      	sub	sp, #32
 8013bd0:	af02      	add	r7, sp, #8
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]
 8013bd8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013be0:	2b06      	cmp	r3, #6
 8013be2:	d006      	beq.n	8013bf2 <etharp_update_arp_entry+0x26>
 8013be4:	4b48      	ldr	r3, [pc, #288]	; (8013d08 <etharp_update_arp_entry+0x13c>)
 8013be6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013bea:	4948      	ldr	r1, [pc, #288]	; (8013d0c <etharp_update_arp_entry+0x140>)
 8013bec:	4848      	ldr	r0, [pc, #288]	; (8013d10 <etharp_update_arp_entry+0x144>)
 8013bee:	f002 fa49 	bl	8016084 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d012      	beq.n	8013c1e <etharp_update_arp_entry+0x52>
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d00e      	beq.n	8013c1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c00:	68bb      	ldr	r3, [r7, #8]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	68f9      	ldr	r1, [r7, #12]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f001 f920 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8013c0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d105      	bne.n	8013c1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013c12:	68bb      	ldr	r3, [r7, #8]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c1a:	2be0      	cmp	r3, #224	; 0xe0
 8013c1c:	d102      	bne.n	8013c24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013c1e:	f06f 030f 	mvn.w	r3, #15
 8013c22:	e06c      	b.n	8013cfe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013c24:	78fb      	ldrb	r3, [r7, #3]
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	4619      	mov	r1, r3
 8013c2a:	68b8      	ldr	r0, [r7, #8]
 8013c2c:	f7ff fe56 	bl	80138dc <etharp_find_entry>
 8013c30:	4603      	mov	r3, r0
 8013c32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013c34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	da02      	bge.n	8013c42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013c3c:	8afb      	ldrh	r3, [r7, #22]
 8013c3e:	b25b      	sxtb	r3, r3
 8013c40:	e05d      	b.n	8013cfe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013c42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c46:	4933      	ldr	r1, [pc, #204]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013c48:	4613      	mov	r3, r2
 8013c4a:	005b      	lsls	r3, r3, #1
 8013c4c:	4413      	add	r3, r2
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	440b      	add	r3, r1
 8013c52:	3314      	adds	r3, #20
 8013c54:	2202      	movs	r2, #2
 8013c56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013c58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c5c:	492d      	ldr	r1, [pc, #180]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013c5e:	4613      	mov	r3, r2
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	4413      	add	r3, r2
 8013c64:	00db      	lsls	r3, r3, #3
 8013c66:	440b      	add	r3, r1
 8013c68:	3308      	adds	r3, #8
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013c6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c72:	4613      	mov	r3, r2
 8013c74:	005b      	lsls	r3, r3, #1
 8013c76:	4413      	add	r3, r2
 8013c78:	00db      	lsls	r3, r3, #3
 8013c7a:	3308      	adds	r3, #8
 8013c7c:	4a25      	ldr	r2, [pc, #148]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013c7e:	4413      	add	r3, r2
 8013c80:	3304      	adds	r3, #4
 8013c82:	2206      	movs	r2, #6
 8013c84:	6879      	ldr	r1, [r7, #4]
 8013c86:	4618      	mov	r0, r3
 8013c88:	f002 f9e6 	bl	8016058 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013c8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013c90:	4920      	ldr	r1, [pc, #128]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013c92:	4613      	mov	r3, r2
 8013c94:	005b      	lsls	r3, r3, #1
 8013c96:	4413      	add	r3, r2
 8013c98:	00db      	lsls	r3, r3, #3
 8013c9a:	440b      	add	r3, r1
 8013c9c:	3312      	adds	r3, #18
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013ca2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ca6:	491b      	ldr	r1, [pc, #108]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013ca8:	4613      	mov	r3, r2
 8013caa:	005b      	lsls	r3, r3, #1
 8013cac:	4413      	add	r3, r2
 8013cae:	00db      	lsls	r3, r3, #3
 8013cb0:	440b      	add	r3, r1
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d021      	beq.n	8013cfc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cbc:	4915      	ldr	r1, [pc, #84]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	005b      	lsls	r3, r3, #1
 8013cc2:	4413      	add	r3, r2
 8013cc4:	00db      	lsls	r3, r3, #3
 8013cc6:	440b      	add	r3, r1
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cd0:	4910      	ldr	r1, [pc, #64]	; (8013d14 <etharp_update_arp_entry+0x148>)
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4413      	add	r3, r2
 8013cd8:	00db      	lsls	r3, r3, #3
 8013cda:	440b      	add	r3, r1
 8013cdc:	2200      	movs	r2, #0
 8013cde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6939      	ldr	r1, [r7, #16]
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	f002 f845 	bl	8015d80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013cf6:	6938      	ldr	r0, [r7, #16]
 8013cf8:	f7f7 fc4a 	bl	800b590 <pbuf_free>
  }
  return ERR_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3718      	adds	r7, #24
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}
 8013d06:	bf00      	nop
 8013d08:	08019a84 	.word	0x08019a84
 8013d0c:	08019b7c 	.word	0x08019b7c
 8013d10:	08019afc 	.word	0x08019afc
 8013d14:	20004a54 	.word	0x20004a54

08013d18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b084      	sub	sp, #16
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d20:	2300      	movs	r3, #0
 8013d22:	60fb      	str	r3, [r7, #12]
 8013d24:	e01e      	b.n	8013d64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013d26:	4913      	ldr	r1, [pc, #76]	; (8013d74 <etharp_cleanup_netif+0x5c>)
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	005b      	lsls	r3, r3, #1
 8013d2e:	4413      	add	r3, r2
 8013d30:	00db      	lsls	r3, r3, #3
 8013d32:	440b      	add	r3, r1
 8013d34:	3314      	adds	r3, #20
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013d3a:	7afb      	ldrb	r3, [r7, #11]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00e      	beq.n	8013d5e <etharp_cleanup_netif+0x46>
 8013d40:	490c      	ldr	r1, [pc, #48]	; (8013d74 <etharp_cleanup_netif+0x5c>)
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	4613      	mov	r3, r2
 8013d46:	005b      	lsls	r3, r3, #1
 8013d48:	4413      	add	r3, r2
 8013d4a:	00db      	lsls	r3, r3, #3
 8013d4c:	440b      	add	r3, r1
 8013d4e:	3308      	adds	r3, #8
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	687a      	ldr	r2, [r7, #4]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d102      	bne.n	8013d5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013d58:	68f8      	ldr	r0, [r7, #12]
 8013d5a:	f7ff fce5 	bl	8013728 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	3301      	adds	r3, #1
 8013d62:	60fb      	str	r3, [r7, #12]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2b09      	cmp	r3, #9
 8013d68:	dddd      	ble.n	8013d26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013d6a:	bf00      	nop
 8013d6c:	bf00      	nop
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	20004a54 	.word	0x20004a54

08013d78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013d78:	b5b0      	push	{r4, r5, r7, lr}
 8013d7a:	b08a      	sub	sp, #40	; 0x28
 8013d7c:	af04      	add	r7, sp, #16
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d107      	bne.n	8013d98 <etharp_input+0x20>
 8013d88:	4b3f      	ldr	r3, [pc, #252]	; (8013e88 <etharp_input+0x110>)
 8013d8a:	f240 228a 	movw	r2, #650	; 0x28a
 8013d8e:	493f      	ldr	r1, [pc, #252]	; (8013e8c <etharp_input+0x114>)
 8013d90:	483f      	ldr	r0, [pc, #252]	; (8013e90 <etharp_input+0x118>)
 8013d92:	f002 f977 	bl	8016084 <iprintf>
 8013d96:	e074      	b.n	8013e82 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	685b      	ldr	r3, [r3, #4]
 8013d9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013d9e:	693b      	ldr	r3, [r7, #16]
 8013da0:	881b      	ldrh	r3, [r3, #0]
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013da8:	d10c      	bne.n	8013dc4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013dae:	2b06      	cmp	r3, #6
 8013db0:	d108      	bne.n	8013dc4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013db6:	2b04      	cmp	r3, #4
 8013db8:	d104      	bne.n	8013dc4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	885b      	ldrh	r3, [r3, #2]
 8013dbe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013dc0:	2b08      	cmp	r3, #8
 8013dc2:	d003      	beq.n	8013dcc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7f7 fbe3 	bl	800b590 <pbuf_free>
    return;
 8013dca:	e05a      	b.n	8013e82 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	330e      	adds	r3, #14
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	3318      	adds	r3, #24
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	3304      	adds	r3, #4
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d102      	bne.n	8013dec <etharp_input+0x74>
    for_us = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	75fb      	strb	r3, [r7, #23]
 8013dea:	e009      	b.n	8013e00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	3304      	adds	r3, #4
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	429a      	cmp	r2, r3
 8013df6:	bf0c      	ite	eq
 8013df8:	2301      	moveq	r3, #1
 8013dfa:	2300      	movne	r3, #0
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	f103 0208 	add.w	r2, r3, #8
 8013e06:	7dfb      	ldrb	r3, [r7, #23]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <etharp_input+0x98>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e000      	b.n	8013e12 <etharp_input+0x9a>
 8013e10:	2302      	movs	r3, #2
 8013e12:	f107 010c 	add.w	r1, r7, #12
 8013e16:	6838      	ldr	r0, [r7, #0]
 8013e18:	f7ff fed8 	bl	8013bcc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013e1c:	693b      	ldr	r3, [r7, #16]
 8013e1e:	88db      	ldrh	r3, [r3, #6]
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e26:	d003      	beq.n	8013e30 <etharp_input+0xb8>
 8013e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e2c:	d01e      	beq.n	8013e6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013e2e:	e025      	b.n	8013e7c <etharp_input+0x104>
      if (for_us) {
 8013e30:	7dfb      	ldrb	r3, [r7, #23]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d021      	beq.n	8013e7a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013e4c:	693a      	ldr	r2, [r7, #16]
 8013e4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013e50:	2102      	movs	r1, #2
 8013e52:	9103      	str	r1, [sp, #12]
 8013e54:	f107 010c 	add.w	r1, r7, #12
 8013e58:	9102      	str	r1, [sp, #8]
 8013e5a:	9201      	str	r2, [sp, #4]
 8013e5c:	9300      	str	r3, [sp, #0]
 8013e5e:	462b      	mov	r3, r5
 8013e60:	4622      	mov	r2, r4
 8013e62:	4601      	mov	r1, r0
 8013e64:	6838      	ldr	r0, [r7, #0]
 8013e66:	f000 faef 	bl	8014448 <etharp_raw>
      break;
 8013e6a:	e006      	b.n	8013e7a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013e6c:	f107 030c 	add.w	r3, r7, #12
 8013e70:	4619      	mov	r1, r3
 8013e72:	6838      	ldr	r0, [r7, #0]
 8013e74:	f7fe f9fc 	bl	8012270 <dhcp_arp_reply>
      break;
 8013e78:	e000      	b.n	8013e7c <etharp_input+0x104>
      break;
 8013e7a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7f7 fb87 	bl	800b590 <pbuf_free>
}
 8013e82:	3718      	adds	r7, #24
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bdb0      	pop	{r4, r5, r7, pc}
 8013e88:	08019a84 	.word	0x08019a84
 8013e8c:	08019bd4 	.word	0x08019bd4
 8013e90:	08019afc 	.word	0x08019afc

08013e94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b086      	sub	sp, #24
 8013e98:	af02      	add	r7, sp, #8
 8013e9a:	60f8      	str	r0, [r7, #12]
 8013e9c:	60b9      	str	r1, [r7, #8]
 8013e9e:	4613      	mov	r3, r2
 8013ea0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013ea2:	79fa      	ldrb	r2, [r7, #7]
 8013ea4:	4944      	ldr	r1, [pc, #272]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	005b      	lsls	r3, r3, #1
 8013eaa:	4413      	add	r3, r2
 8013eac:	00db      	lsls	r3, r3, #3
 8013eae:	440b      	add	r3, r1
 8013eb0:	3314      	adds	r3, #20
 8013eb2:	781b      	ldrb	r3, [r3, #0]
 8013eb4:	2b01      	cmp	r3, #1
 8013eb6:	d806      	bhi.n	8013ec6 <etharp_output_to_arp_index+0x32>
 8013eb8:	4b40      	ldr	r3, [pc, #256]	; (8013fbc <etharp_output_to_arp_index+0x128>)
 8013eba:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013ebe:	4940      	ldr	r1, [pc, #256]	; (8013fc0 <etharp_output_to_arp_index+0x12c>)
 8013ec0:	4840      	ldr	r0, [pc, #256]	; (8013fc4 <etharp_output_to_arp_index+0x130>)
 8013ec2:	f002 f8df 	bl	8016084 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013ec6:	79fa      	ldrb	r2, [r7, #7]
 8013ec8:	493b      	ldr	r1, [pc, #236]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013eca:	4613      	mov	r3, r2
 8013ecc:	005b      	lsls	r3, r3, #1
 8013ece:	4413      	add	r3, r2
 8013ed0:	00db      	lsls	r3, r3, #3
 8013ed2:	440b      	add	r3, r1
 8013ed4:	3314      	adds	r3, #20
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	2b02      	cmp	r3, #2
 8013eda:	d153      	bne.n	8013f84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013edc:	79fa      	ldrb	r2, [r7, #7]
 8013ede:	4936      	ldr	r1, [pc, #216]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013ee0:	4613      	mov	r3, r2
 8013ee2:	005b      	lsls	r3, r3, #1
 8013ee4:	4413      	add	r3, r2
 8013ee6:	00db      	lsls	r3, r3, #3
 8013ee8:	440b      	add	r3, r1
 8013eea:	3312      	adds	r3, #18
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013ef2:	d919      	bls.n	8013f28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013ef4:	79fa      	ldrb	r2, [r7, #7]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	005b      	lsls	r3, r3, #1
 8013efa:	4413      	add	r3, r2
 8013efc:	00db      	lsls	r3, r3, #3
 8013efe:	4a2e      	ldr	r2, [pc, #184]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f00:	4413      	add	r3, r2
 8013f02:	3304      	adds	r3, #4
 8013f04:	4619      	mov	r1, r3
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f000 fb4c 	bl	80145a4 <etharp_request>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d138      	bne.n	8013f84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f12:	79fa      	ldrb	r2, [r7, #7]
 8013f14:	4928      	ldr	r1, [pc, #160]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3314      	adds	r3, #20
 8013f22:	2203      	movs	r2, #3
 8013f24:	701a      	strb	r2, [r3, #0]
 8013f26:	e02d      	b.n	8013f84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013f28:	79fa      	ldrb	r2, [r7, #7]
 8013f2a:	4923      	ldr	r1, [pc, #140]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	440b      	add	r3, r1
 8013f36:	3312      	adds	r3, #18
 8013f38:	881b      	ldrh	r3, [r3, #0]
 8013f3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013f3e:	d321      	bcc.n	8013f84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013f40:	79fa      	ldrb	r2, [r7, #7]
 8013f42:	4613      	mov	r3, r2
 8013f44:	005b      	lsls	r3, r3, #1
 8013f46:	4413      	add	r3, r2
 8013f48:	00db      	lsls	r3, r3, #3
 8013f4a:	4a1b      	ldr	r2, [pc, #108]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f4c:	4413      	add	r3, r2
 8013f4e:	1d19      	adds	r1, r3, #4
 8013f50:	79fa      	ldrb	r2, [r7, #7]
 8013f52:	4613      	mov	r3, r2
 8013f54:	005b      	lsls	r3, r3, #1
 8013f56:	4413      	add	r3, r2
 8013f58:	00db      	lsls	r3, r3, #3
 8013f5a:	3308      	adds	r3, #8
 8013f5c:	4a16      	ldr	r2, [pc, #88]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f5e:	4413      	add	r3, r2
 8013f60:	3304      	adds	r3, #4
 8013f62:	461a      	mov	r2, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 fafb 	bl	8014560 <etharp_request_dst>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d109      	bne.n	8013f84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f70:	79fa      	ldrb	r2, [r7, #7]
 8013f72:	4911      	ldr	r1, [pc, #68]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f74:	4613      	mov	r3, r2
 8013f76:	005b      	lsls	r3, r3, #1
 8013f78:	4413      	add	r3, r2
 8013f7a:	00db      	lsls	r3, r3, #3
 8013f7c:	440b      	add	r3, r1
 8013f7e:	3314      	adds	r3, #20
 8013f80:	2203      	movs	r2, #3
 8013f82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8013f8a:	79fa      	ldrb	r2, [r7, #7]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	3308      	adds	r3, #8
 8013f96:	4a08      	ldr	r2, [pc, #32]	; (8013fb8 <etharp_output_to_arp_index+0x124>)
 8013f98:	4413      	add	r3, r2
 8013f9a:	3304      	adds	r3, #4
 8013f9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013fa0:	9200      	str	r2, [sp, #0]
 8013fa2:	460a      	mov	r2, r1
 8013fa4:	68b9      	ldr	r1, [r7, #8]
 8013fa6:	68f8      	ldr	r0, [r7, #12]
 8013fa8:	f001 feea 	bl	8015d80 <ethernet_output>
 8013fac:	4603      	mov	r3, r0
}
 8013fae:	4618      	mov	r0, r3
 8013fb0:	3710      	adds	r7, #16
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}
 8013fb6:	bf00      	nop
 8013fb8:	20004a54 	.word	0x20004a54
 8013fbc:	08019a84 	.word	0x08019a84
 8013fc0:	08019bf4 	.word	0x08019bf4
 8013fc4:	08019afc 	.word	0x08019afc

08013fc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b08a      	sub	sp, #40	; 0x28
 8013fcc:	af02      	add	r7, sp, #8
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d106      	bne.n	8013fec <etharp_output+0x24>
 8013fde:	4b73      	ldr	r3, [pc, #460]	; (80141ac <etharp_output+0x1e4>)
 8013fe0:	f240 321e 	movw	r2, #798	; 0x31e
 8013fe4:	4972      	ldr	r1, [pc, #456]	; (80141b0 <etharp_output+0x1e8>)
 8013fe6:	4873      	ldr	r0, [pc, #460]	; (80141b4 <etharp_output+0x1ec>)
 8013fe8:	f002 f84c 	bl	8016084 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d106      	bne.n	8014000 <etharp_output+0x38>
 8013ff2:	4b6e      	ldr	r3, [pc, #440]	; (80141ac <etharp_output+0x1e4>)
 8013ff4:	f240 321f 	movw	r2, #799	; 0x31f
 8013ff8:	496f      	ldr	r1, [pc, #444]	; (80141b8 <etharp_output+0x1f0>)
 8013ffa:	486e      	ldr	r0, [pc, #440]	; (80141b4 <etharp_output+0x1ec>)
 8013ffc:	f002 f842 	bl	8016084 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d106      	bne.n	8014014 <etharp_output+0x4c>
 8014006:	4b69      	ldr	r3, [pc, #420]	; (80141ac <etharp_output+0x1e4>)
 8014008:	f44f 7248 	mov.w	r2, #800	; 0x320
 801400c:	496b      	ldr	r1, [pc, #428]	; (80141bc <etharp_output+0x1f4>)
 801400e:	4869      	ldr	r0, [pc, #420]	; (80141b4 <etharp_output+0x1ec>)
 8014010:	f002 f838 	bl	8016084 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	68f9      	ldr	r1, [r7, #12]
 801401a:	4618      	mov	r0, r3
 801401c:	f000 ff16 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8014020:	4603      	mov	r3, r0
 8014022:	2b00      	cmp	r3, #0
 8014024:	d002      	beq.n	801402c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014026:	4b66      	ldr	r3, [pc, #408]	; (80141c0 <etharp_output+0x1f8>)
 8014028:	61fb      	str	r3, [r7, #28]
 801402a:	e0af      	b.n	801418c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014034:	2be0      	cmp	r3, #224	; 0xe0
 8014036:	d118      	bne.n	801406a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014038:	2301      	movs	r3, #1
 801403a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801403c:	2300      	movs	r3, #0
 801403e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014040:	235e      	movs	r3, #94	; 0x5e
 8014042:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	3301      	adds	r3, #1
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801404e:	b2db      	uxtb	r3, r3
 8014050:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	3302      	adds	r3, #2
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	3303      	adds	r3, #3
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014062:	f107 0310 	add.w	r3, r7, #16
 8014066:	61fb      	str	r3, [r7, #28]
 8014068:	e090      	b.n	801418c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681a      	ldr	r2, [r3, #0]
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	3304      	adds	r3, #4
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	405a      	eors	r2, r3
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	3308      	adds	r3, #8
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	4013      	ands	r3, r2
 801407e:	2b00      	cmp	r3, #0
 8014080:	d012      	beq.n	80140a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014088:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801408c:	4293      	cmp	r3, r2
 801408e:	d00b      	beq.n	80140a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	330c      	adds	r3, #12
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d003      	beq.n	80140a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	330c      	adds	r3, #12
 801409e:	61bb      	str	r3, [r7, #24]
 80140a0:	e002      	b.n	80140a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80140a2:	f06f 0303 	mvn.w	r3, #3
 80140a6:	e07d      	b.n	80141a4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140a8:	4b46      	ldr	r3, [pc, #280]	; (80141c4 <etharp_output+0x1fc>)
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	4619      	mov	r1, r3
 80140ae:	4a46      	ldr	r2, [pc, #280]	; (80141c8 <etharp_output+0x200>)
 80140b0:	460b      	mov	r3, r1
 80140b2:	005b      	lsls	r3, r3, #1
 80140b4:	440b      	add	r3, r1
 80140b6:	00db      	lsls	r3, r3, #3
 80140b8:	4413      	add	r3, r2
 80140ba:	3314      	adds	r3, #20
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	2b01      	cmp	r3, #1
 80140c0:	d925      	bls.n	801410e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80140c2:	4b40      	ldr	r3, [pc, #256]	; (80141c4 <etharp_output+0x1fc>)
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	4619      	mov	r1, r3
 80140c8:	4a3f      	ldr	r2, [pc, #252]	; (80141c8 <etharp_output+0x200>)
 80140ca:	460b      	mov	r3, r1
 80140cc:	005b      	lsls	r3, r3, #1
 80140ce:	440b      	add	r3, r1
 80140d0:	00db      	lsls	r3, r3, #3
 80140d2:	4413      	add	r3, r2
 80140d4:	3308      	adds	r3, #8
 80140d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80140d8:	68fa      	ldr	r2, [r7, #12]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d117      	bne.n	801410e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80140de:	69bb      	ldr	r3, [r7, #24]
 80140e0:	681a      	ldr	r2, [r3, #0]
 80140e2:	4b38      	ldr	r3, [pc, #224]	; (80141c4 <etharp_output+0x1fc>)
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	4618      	mov	r0, r3
 80140e8:	4937      	ldr	r1, [pc, #220]	; (80141c8 <etharp_output+0x200>)
 80140ea:	4603      	mov	r3, r0
 80140ec:	005b      	lsls	r3, r3, #1
 80140ee:	4403      	add	r3, r0
 80140f0:	00db      	lsls	r3, r3, #3
 80140f2:	440b      	add	r3, r1
 80140f4:	3304      	adds	r3, #4
 80140f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d108      	bne.n	801410e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80140fc:	4b31      	ldr	r3, [pc, #196]	; (80141c4 <etharp_output+0x1fc>)
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	461a      	mov	r2, r3
 8014102:	68b9      	ldr	r1, [r7, #8]
 8014104:	68f8      	ldr	r0, [r7, #12]
 8014106:	f7ff fec5 	bl	8013e94 <etharp_output_to_arp_index>
 801410a:	4603      	mov	r3, r0
 801410c:	e04a      	b.n	80141a4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801410e:	2300      	movs	r3, #0
 8014110:	75fb      	strb	r3, [r7, #23]
 8014112:	e031      	b.n	8014178 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014114:	7dfa      	ldrb	r2, [r7, #23]
 8014116:	492c      	ldr	r1, [pc, #176]	; (80141c8 <etharp_output+0x200>)
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3314      	adds	r3, #20
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	2b01      	cmp	r3, #1
 8014128:	d923      	bls.n	8014172 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801412a:	7dfa      	ldrb	r2, [r7, #23]
 801412c:	4926      	ldr	r1, [pc, #152]	; (80141c8 <etharp_output+0x200>)
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	440b      	add	r3, r1
 8014138:	3308      	adds	r3, #8
 801413a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	429a      	cmp	r2, r3
 8014140:	d117      	bne.n	8014172 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	6819      	ldr	r1, [r3, #0]
 8014146:	7dfa      	ldrb	r2, [r7, #23]
 8014148:	481f      	ldr	r0, [pc, #124]	; (80141c8 <etharp_output+0x200>)
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	4403      	add	r3, r0
 8014154:	3304      	adds	r3, #4
 8014156:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014158:	4299      	cmp	r1, r3
 801415a:	d10a      	bne.n	8014172 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801415c:	4a19      	ldr	r2, [pc, #100]	; (80141c4 <etharp_output+0x1fc>)
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014162:	7dfb      	ldrb	r3, [r7, #23]
 8014164:	461a      	mov	r2, r3
 8014166:	68b9      	ldr	r1, [r7, #8]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f7ff fe93 	bl	8013e94 <etharp_output_to_arp_index>
 801416e:	4603      	mov	r3, r0
 8014170:	e018      	b.n	80141a4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	3301      	adds	r3, #1
 8014176:	75fb      	strb	r3, [r7, #23]
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	2b09      	cmp	r3, #9
 801417c:	d9ca      	bls.n	8014114 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801417e:	68ba      	ldr	r2, [r7, #8]
 8014180:	69b9      	ldr	r1, [r7, #24]
 8014182:	68f8      	ldr	r0, [r7, #12]
 8014184:	f000 f822 	bl	80141cc <etharp_query>
 8014188:	4603      	mov	r3, r0
 801418a:	e00b      	b.n	80141a4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014196:	9300      	str	r3, [sp, #0]
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	68b9      	ldr	r1, [r7, #8]
 801419c:	68f8      	ldr	r0, [r7, #12]
 801419e:	f001 fdef 	bl	8015d80 <ethernet_output>
 80141a2:	4603      	mov	r3, r0
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3720      	adds	r7, #32
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}
 80141ac:	08019a84 	.word	0x08019a84
 80141b0:	08019bd4 	.word	0x08019bd4
 80141b4:	08019afc 	.word	0x08019afc
 80141b8:	08019c24 	.word	0x08019c24
 80141bc:	08019bc4 	.word	0x08019bc4
 80141c0:	0801a2ac 	.word	0x0801a2ac
 80141c4:	20004b44 	.word	0x20004b44
 80141c8:	20004a54 	.word	0x20004a54

080141cc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08c      	sub	sp, #48	; 0x30
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	60f8      	str	r0, [r7, #12]
 80141d4:	60b9      	str	r1, [r7, #8]
 80141d6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	332a      	adds	r3, #42	; 0x2a
 80141dc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80141de:	23ff      	movs	r3, #255	; 0xff
 80141e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	68f9      	ldr	r1, [r7, #12]
 80141ee:	4618      	mov	r0, r3
 80141f0:	f000 fe2c 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10c      	bne.n	8014214 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014202:	2be0      	cmp	r3, #224	; 0xe0
 8014204:	d006      	beq.n	8014214 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d003      	beq.n	8014214 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d102      	bne.n	801421a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014214:	f06f 030f 	mvn.w	r3, #15
 8014218:	e101      	b.n	801441e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801421a:	68fa      	ldr	r2, [r7, #12]
 801421c:	2101      	movs	r1, #1
 801421e:	68b8      	ldr	r0, [r7, #8]
 8014220:	f7ff fb5c 	bl	80138dc <etharp_find_entry>
 8014224:	4603      	mov	r3, r0
 8014226:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801422c:	2b00      	cmp	r3, #0
 801422e:	da02      	bge.n	8014236 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014230:	8a7b      	ldrh	r3, [r7, #18]
 8014232:	b25b      	sxtb	r3, r3
 8014234:	e0f3      	b.n	801441e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014236:	8a7b      	ldrh	r3, [r7, #18]
 8014238:	2b7e      	cmp	r3, #126	; 0x7e
 801423a:	d906      	bls.n	801424a <etharp_query+0x7e>
 801423c:	4b7a      	ldr	r3, [pc, #488]	; (8014428 <etharp_query+0x25c>)
 801423e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014242:	497a      	ldr	r1, [pc, #488]	; (801442c <etharp_query+0x260>)
 8014244:	487a      	ldr	r0, [pc, #488]	; (8014430 <etharp_query+0x264>)
 8014246:	f001 ff1d 	bl	8016084 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801424a:	8a7b      	ldrh	r3, [r7, #18]
 801424c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801424e:	7c7a      	ldrb	r2, [r7, #17]
 8014250:	4978      	ldr	r1, [pc, #480]	; (8014434 <etharp_query+0x268>)
 8014252:	4613      	mov	r3, r2
 8014254:	005b      	lsls	r3, r3, #1
 8014256:	4413      	add	r3, r2
 8014258:	00db      	lsls	r3, r3, #3
 801425a:	440b      	add	r3, r1
 801425c:	3314      	adds	r3, #20
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d115      	bne.n	8014290 <etharp_query+0xc4>
    is_new_entry = 1;
 8014264:	2301      	movs	r3, #1
 8014266:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014268:	7c7a      	ldrb	r2, [r7, #17]
 801426a:	4972      	ldr	r1, [pc, #456]	; (8014434 <etharp_query+0x268>)
 801426c:	4613      	mov	r3, r2
 801426e:	005b      	lsls	r3, r3, #1
 8014270:	4413      	add	r3, r2
 8014272:	00db      	lsls	r3, r3, #3
 8014274:	440b      	add	r3, r1
 8014276:	3314      	adds	r3, #20
 8014278:	2201      	movs	r2, #1
 801427a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801427c:	7c7a      	ldrb	r2, [r7, #17]
 801427e:	496d      	ldr	r1, [pc, #436]	; (8014434 <etharp_query+0x268>)
 8014280:	4613      	mov	r3, r2
 8014282:	005b      	lsls	r3, r3, #1
 8014284:	4413      	add	r3, r2
 8014286:	00db      	lsls	r3, r3, #3
 8014288:	440b      	add	r3, r1
 801428a:	3308      	adds	r3, #8
 801428c:	68fa      	ldr	r2, [r7, #12]
 801428e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014290:	7c7a      	ldrb	r2, [r7, #17]
 8014292:	4968      	ldr	r1, [pc, #416]	; (8014434 <etharp_query+0x268>)
 8014294:	4613      	mov	r3, r2
 8014296:	005b      	lsls	r3, r3, #1
 8014298:	4413      	add	r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	440b      	add	r3, r1
 801429e:	3314      	adds	r3, #20
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d011      	beq.n	80142ca <etharp_query+0xfe>
 80142a6:	7c7a      	ldrb	r2, [r7, #17]
 80142a8:	4962      	ldr	r1, [pc, #392]	; (8014434 <etharp_query+0x268>)
 80142aa:	4613      	mov	r3, r2
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	4413      	add	r3, r2
 80142b0:	00db      	lsls	r3, r3, #3
 80142b2:	440b      	add	r3, r1
 80142b4:	3314      	adds	r3, #20
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d806      	bhi.n	80142ca <etharp_query+0xfe>
 80142bc:	4b5a      	ldr	r3, [pc, #360]	; (8014428 <etharp_query+0x25c>)
 80142be:	f240 32cd 	movw	r2, #973	; 0x3cd
 80142c2:	495d      	ldr	r1, [pc, #372]	; (8014438 <etharp_query+0x26c>)
 80142c4:	485a      	ldr	r0, [pc, #360]	; (8014430 <etharp_query+0x264>)
 80142c6:	f001 fedd 	bl	8016084 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80142ca:	6a3b      	ldr	r3, [r7, #32]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d102      	bne.n	80142d6 <etharp_query+0x10a>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d10c      	bne.n	80142f0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80142d6:	68b9      	ldr	r1, [r7, #8]
 80142d8:	68f8      	ldr	r0, [r7, #12]
 80142da:	f000 f963 	bl	80145a4 <etharp_request>
 80142de:	4603      	mov	r3, r0
 80142e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d102      	bne.n	80142f0 <etharp_query+0x124>
      return result;
 80142ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80142ee:	e096      	b.n	801441e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d106      	bne.n	8014304 <etharp_query+0x138>
 80142f6:	4b4c      	ldr	r3, [pc, #304]	; (8014428 <etharp_query+0x25c>)
 80142f8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80142fc:	494f      	ldr	r1, [pc, #316]	; (801443c <etharp_query+0x270>)
 80142fe:	484c      	ldr	r0, [pc, #304]	; (8014430 <etharp_query+0x264>)
 8014300:	f001 fec0 	bl	8016084 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014304:	7c7a      	ldrb	r2, [r7, #17]
 8014306:	494b      	ldr	r1, [pc, #300]	; (8014434 <etharp_query+0x268>)
 8014308:	4613      	mov	r3, r2
 801430a:	005b      	lsls	r3, r3, #1
 801430c:	4413      	add	r3, r2
 801430e:	00db      	lsls	r3, r3, #3
 8014310:	440b      	add	r3, r1
 8014312:	3314      	adds	r3, #20
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d917      	bls.n	801434a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801431a:	4a49      	ldr	r2, [pc, #292]	; (8014440 <etharp_query+0x274>)
 801431c:	7c7b      	ldrb	r3, [r7, #17]
 801431e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014320:	7c7a      	ldrb	r2, [r7, #17]
 8014322:	4613      	mov	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	4413      	add	r3, r2
 8014328:	00db      	lsls	r3, r3, #3
 801432a:	3308      	adds	r3, #8
 801432c:	4a41      	ldr	r2, [pc, #260]	; (8014434 <etharp_query+0x268>)
 801432e:	4413      	add	r3, r2
 8014330:	3304      	adds	r3, #4
 8014332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014336:	9200      	str	r2, [sp, #0]
 8014338:	697a      	ldr	r2, [r7, #20]
 801433a:	6879      	ldr	r1, [r7, #4]
 801433c:	68f8      	ldr	r0, [r7, #12]
 801433e:	f001 fd1f 	bl	8015d80 <ethernet_output>
 8014342:	4603      	mov	r3, r0
 8014344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014348:	e067      	b.n	801441a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801434a:	7c7a      	ldrb	r2, [r7, #17]
 801434c:	4939      	ldr	r1, [pc, #228]	; (8014434 <etharp_query+0x268>)
 801434e:	4613      	mov	r3, r2
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	4413      	add	r3, r2
 8014354:	00db      	lsls	r3, r3, #3
 8014356:	440b      	add	r3, r1
 8014358:	3314      	adds	r3, #20
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d15c      	bne.n	801441a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014360:	2300      	movs	r3, #0
 8014362:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014368:	e01c      	b.n	80143a4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	895a      	ldrh	r2, [r3, #10]
 801436e:	69fb      	ldr	r3, [r7, #28]
 8014370:	891b      	ldrh	r3, [r3, #8]
 8014372:	429a      	cmp	r2, r3
 8014374:	d10a      	bne.n	801438c <etharp_query+0x1c0>
 8014376:	69fb      	ldr	r3, [r7, #28]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d006      	beq.n	801438c <etharp_query+0x1c0>
 801437e:	4b2a      	ldr	r3, [pc, #168]	; (8014428 <etharp_query+0x25c>)
 8014380:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014384:	492f      	ldr	r1, [pc, #188]	; (8014444 <etharp_query+0x278>)
 8014386:	482a      	ldr	r0, [pc, #168]	; (8014430 <etharp_query+0x264>)
 8014388:	f001 fe7c 	bl	8016084 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	7b1b      	ldrb	r3, [r3, #12]
 8014390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014394:	2b00      	cmp	r3, #0
 8014396:	d002      	beq.n	801439e <etharp_query+0x1d2>
        copy_needed = 1;
 8014398:	2301      	movs	r3, #1
 801439a:	61bb      	str	r3, [r7, #24]
        break;
 801439c:	e005      	b.n	80143aa <etharp_query+0x1de>
      }
      p = p->next;
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d1df      	bne.n	801436a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d007      	beq.n	80143c0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80143b6:	200e      	movs	r0, #14
 80143b8:	f7f7 fb62 	bl	800ba80 <pbuf_clone>
 80143bc:	61f8      	str	r0, [r7, #28]
 80143be:	e004      	b.n	80143ca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80143c4:	69f8      	ldr	r0, [r7, #28]
 80143c6:	f7f7 f989 	bl	800b6dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d021      	beq.n	8014414 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80143d0:	7c7a      	ldrb	r2, [r7, #17]
 80143d2:	4918      	ldr	r1, [pc, #96]	; (8014434 <etharp_query+0x268>)
 80143d4:	4613      	mov	r3, r2
 80143d6:	005b      	lsls	r3, r3, #1
 80143d8:	4413      	add	r3, r2
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	440b      	add	r3, r1
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d00a      	beq.n	80143fa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80143e4:	7c7a      	ldrb	r2, [r7, #17]
 80143e6:	4913      	ldr	r1, [pc, #76]	; (8014434 <etharp_query+0x268>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	440b      	add	r3, r1
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4618      	mov	r0, r3
 80143f6:	f7f7 f8cb 	bl	800b590 <pbuf_free>
      }
      arp_table[i].q = p;
 80143fa:	7c7a      	ldrb	r2, [r7, #17]
 80143fc:	490d      	ldr	r1, [pc, #52]	; (8014434 <etharp_query+0x268>)
 80143fe:	4613      	mov	r3, r2
 8014400:	005b      	lsls	r3, r3, #1
 8014402:	4413      	add	r3, r2
 8014404:	00db      	lsls	r3, r3, #3
 8014406:	440b      	add	r3, r1
 8014408:	69fa      	ldr	r2, [r7, #28]
 801440a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014412:	e002      	b.n	801441a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014414:	23ff      	movs	r3, #255	; 0xff
 8014416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801441a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801441e:	4618      	mov	r0, r3
 8014420:	3728      	adds	r7, #40	; 0x28
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	08019a84 	.word	0x08019a84
 801442c:	08019c30 	.word	0x08019c30
 8014430:	08019afc 	.word	0x08019afc
 8014434:	20004a54 	.word	0x20004a54
 8014438:	08019c40 	.word	0x08019c40
 801443c:	08019c24 	.word	0x08019c24
 8014440:	20004b44 	.word	0x20004b44
 8014444:	08019c68 	.word	0x08019c68

08014448 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b08a      	sub	sp, #40	; 0x28
 801444c:	af02      	add	r7, sp, #8
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014456:	2300      	movs	r3, #0
 8014458:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d106      	bne.n	801446e <etharp_raw+0x26>
 8014460:	4b3a      	ldr	r3, [pc, #232]	; (801454c <etharp_raw+0x104>)
 8014462:	f240 4257 	movw	r2, #1111	; 0x457
 8014466:	493a      	ldr	r1, [pc, #232]	; (8014550 <etharp_raw+0x108>)
 8014468:	483a      	ldr	r0, [pc, #232]	; (8014554 <etharp_raw+0x10c>)
 801446a:	f001 fe0b 	bl	8016084 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801446e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014472:	211c      	movs	r1, #28
 8014474:	200e      	movs	r0, #14
 8014476:	f7f6 fda7 	bl	800afc8 <pbuf_alloc>
 801447a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d102      	bne.n	8014488 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014482:	f04f 33ff 	mov.w	r3, #4294967295
 8014486:	e05d      	b.n	8014544 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014488:	69bb      	ldr	r3, [r7, #24]
 801448a:	895b      	ldrh	r3, [r3, #10]
 801448c:	2b1b      	cmp	r3, #27
 801448e:	d806      	bhi.n	801449e <etharp_raw+0x56>
 8014490:	4b2e      	ldr	r3, [pc, #184]	; (801454c <etharp_raw+0x104>)
 8014492:	f240 4262 	movw	r2, #1122	; 0x462
 8014496:	4930      	ldr	r1, [pc, #192]	; (8014558 <etharp_raw+0x110>)
 8014498:	482e      	ldr	r0, [pc, #184]	; (8014554 <etharp_raw+0x10c>)
 801449a:	f001 fdf3 	bl	8016084 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	685b      	ldr	r3, [r3, #4]
 80144a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80144a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7f5 fcba 	bl	8009e20 <lwip_htons>
 80144ac:	4603      	mov	r3, r0
 80144ae:	461a      	mov	r2, r3
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144ba:	2b06      	cmp	r3, #6
 80144bc:	d006      	beq.n	80144cc <etharp_raw+0x84>
 80144be:	4b23      	ldr	r3, [pc, #140]	; (801454c <etharp_raw+0x104>)
 80144c0:	f240 4269 	movw	r2, #1129	; 0x469
 80144c4:	4925      	ldr	r1, [pc, #148]	; (801455c <etharp_raw+0x114>)
 80144c6:	4823      	ldr	r0, [pc, #140]	; (8014554 <etharp_raw+0x10c>)
 80144c8:	f001 fddc 	bl	8016084 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80144cc:	697b      	ldr	r3, [r7, #20]
 80144ce:	3308      	adds	r3, #8
 80144d0:	2206      	movs	r2, #6
 80144d2:	6839      	ldr	r1, [r7, #0]
 80144d4:	4618      	mov	r0, r3
 80144d6:	f001 fdbf 	bl	8016058 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	3312      	adds	r3, #18
 80144de:	2206      	movs	r2, #6
 80144e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80144e2:	4618      	mov	r0, r3
 80144e4:	f001 fdb8 	bl	8016058 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	330e      	adds	r3, #14
 80144ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	3318      	adds	r3, #24
 80144f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80144f8:	6812      	ldr	r2, [r2, #0]
 80144fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	2200      	movs	r2, #0
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	2200      	movs	r2, #0
 8014504:	f042 0201 	orr.w	r2, r2, #1
 8014508:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	2200      	movs	r2, #0
 801450e:	f042 0208 	orr.w	r2, r2, #8
 8014512:	709a      	strb	r2, [r3, #2]
 8014514:	2200      	movs	r2, #0
 8014516:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014518:	697b      	ldr	r3, [r7, #20]
 801451a:	2206      	movs	r2, #6
 801451c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	2204      	movs	r2, #4
 8014522:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014524:	f640 0306 	movw	r3, #2054	; 0x806
 8014528:	9300      	str	r3, [sp, #0]
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	68ba      	ldr	r2, [r7, #8]
 801452e:	69b9      	ldr	r1, [r7, #24]
 8014530:	68f8      	ldr	r0, [r7, #12]
 8014532:	f001 fc25 	bl	8015d80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014536:	69b8      	ldr	r0, [r7, #24]
 8014538:	f7f7 f82a 	bl	800b590 <pbuf_free>
  p = NULL;
 801453c:	2300      	movs	r3, #0
 801453e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014540:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014544:	4618      	mov	r0, r3
 8014546:	3720      	adds	r7, #32
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}
 801454c:	08019a84 	.word	0x08019a84
 8014550:	08019bd4 	.word	0x08019bd4
 8014554:	08019afc 	.word	0x08019afc
 8014558:	08019c84 	.word	0x08019c84
 801455c:	08019cb8 	.word	0x08019cb8

08014560 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b088      	sub	sp, #32
 8014564:	af04      	add	r7, sp, #16
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801457c:	2201      	movs	r2, #1
 801457e:	9203      	str	r2, [sp, #12]
 8014580:	68ba      	ldr	r2, [r7, #8]
 8014582:	9202      	str	r2, [sp, #8]
 8014584:	4a06      	ldr	r2, [pc, #24]	; (80145a0 <etharp_request_dst+0x40>)
 8014586:	9201      	str	r2, [sp, #4]
 8014588:	9300      	str	r3, [sp, #0]
 801458a:	4603      	mov	r3, r0
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f7ff ff5a 	bl	8014448 <etharp_raw>
 8014594:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014596:	4618      	mov	r0, r3
 8014598:	3710      	adds	r7, #16
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	0801a2b4 	.word	0x0801a2b4

080145a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80145ae:	4a05      	ldr	r2, [pc, #20]	; (80145c4 <etharp_request+0x20>)
 80145b0:	6839      	ldr	r1, [r7, #0]
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7ff ffd4 	bl	8014560 <etharp_request_dst>
 80145b8:	4603      	mov	r3, r0
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3708      	adds	r7, #8
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}
 80145c2:	bf00      	nop
 80145c4:	0801a2ac 	.word	0x0801a2ac

080145c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b08e      	sub	sp, #56	; 0x38
 80145cc:	af04      	add	r7, sp, #16
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80145d2:	4b79      	ldr	r3, [pc, #484]	; (80147b8 <icmp_input+0x1f0>)
 80145d4:	689b      	ldr	r3, [r3, #8]
 80145d6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80145d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	f003 030f 	and.w	r3, r3, #15
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	009b      	lsls	r3, r3, #2
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80145e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145ea:	2b13      	cmp	r3, #19
 80145ec:	f240 80cd 	bls.w	801478a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	895b      	ldrh	r3, [r3, #10]
 80145f4:	2b03      	cmp	r3, #3
 80145f6:	f240 80ca 	bls.w	801478e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014604:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014608:	2b00      	cmp	r3, #0
 801460a:	f000 80b7 	beq.w	801477c <icmp_input+0x1b4>
 801460e:	2b08      	cmp	r3, #8
 8014610:	f040 80b7 	bne.w	8014782 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014614:	4b69      	ldr	r3, [pc, #420]	; (80147bc <icmp_input+0x1f4>)
 8014616:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014618:	4b67      	ldr	r3, [pc, #412]	; (80147b8 <icmp_input+0x1f0>)
 801461a:	695b      	ldr	r3, [r3, #20]
 801461c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014620:	2be0      	cmp	r3, #224	; 0xe0
 8014622:	f000 80bb 	beq.w	801479c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014626:	4b64      	ldr	r3, [pc, #400]	; (80147b8 <icmp_input+0x1f0>)
 8014628:	695b      	ldr	r3, [r3, #20]
 801462a:	4a63      	ldr	r2, [pc, #396]	; (80147b8 <icmp_input+0x1f0>)
 801462c:	6812      	ldr	r2, [r2, #0]
 801462e:	4611      	mov	r1, r2
 8014630:	4618      	mov	r0, r3
 8014632:	f000 fc0b 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8014636:	4603      	mov	r3, r0
 8014638:	2b00      	cmp	r3, #0
 801463a:	f040 80b1 	bne.w	80147a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	891b      	ldrh	r3, [r3, #8]
 8014642:	2b07      	cmp	r3, #7
 8014644:	f240 80a5 	bls.w	8014792 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801464a:	330e      	adds	r3, #14
 801464c:	4619      	mov	r1, r3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7f6 ff08 	bl	800b464 <pbuf_add_header>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d04b      	beq.n	80146f2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	891a      	ldrh	r2, [r3, #8]
 801465e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014660:	4413      	add	r3, r2
 8014662:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	891b      	ldrh	r3, [r3, #8]
 8014668:	8b7a      	ldrh	r2, [r7, #26]
 801466a:	429a      	cmp	r2, r3
 801466c:	f0c0 809a 	bcc.w	80147a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014670:	8b7b      	ldrh	r3, [r7, #26]
 8014672:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014676:	4619      	mov	r1, r3
 8014678:	200e      	movs	r0, #14
 801467a:	f7f6 fca5 	bl	800afc8 <pbuf_alloc>
 801467e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	2b00      	cmp	r3, #0
 8014684:	f000 8090 	beq.w	80147a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	895b      	ldrh	r3, [r3, #10]
 801468c:	461a      	mov	r2, r3
 801468e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014690:	3308      	adds	r3, #8
 8014692:	429a      	cmp	r2, r3
 8014694:	d203      	bcs.n	801469e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014696:	6978      	ldr	r0, [r7, #20]
 8014698:	f7f6 ff7a 	bl	800b590 <pbuf_free>
          goto icmperr;
 801469c:	e085      	b.n	80147aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801469e:	697b      	ldr	r3, [r7, #20]
 80146a0:	685b      	ldr	r3, [r3, #4]
 80146a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80146a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80146a6:	4618      	mov	r0, r3
 80146a8:	f001 fcd6 	bl	8016058 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80146ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146ae:	4619      	mov	r1, r3
 80146b0:	6978      	ldr	r0, [r7, #20]
 80146b2:	f7f6 fee7 	bl	800b484 <pbuf_remove_header>
 80146b6:	4603      	mov	r3, r0
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d009      	beq.n	80146d0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80146bc:	4b40      	ldr	r3, [pc, #256]	; (80147c0 <icmp_input+0x1f8>)
 80146be:	22b6      	movs	r2, #182	; 0xb6
 80146c0:	4940      	ldr	r1, [pc, #256]	; (80147c4 <icmp_input+0x1fc>)
 80146c2:	4841      	ldr	r0, [pc, #260]	; (80147c8 <icmp_input+0x200>)
 80146c4:	f001 fcde 	bl	8016084 <iprintf>
          pbuf_free(r);
 80146c8:	6978      	ldr	r0, [r7, #20]
 80146ca:	f7f6 ff61 	bl	800b590 <pbuf_free>
          goto icmperr;
 80146ce:	e06c      	b.n	80147aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80146d0:	6879      	ldr	r1, [r7, #4]
 80146d2:	6978      	ldr	r0, [r7, #20]
 80146d4:	f7f7 f890 	bl	800b7f8 <pbuf_copy>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d003      	beq.n	80146e6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80146de:	6978      	ldr	r0, [r7, #20]
 80146e0:	f7f6 ff56 	bl	800b590 <pbuf_free>
          goto icmperr;
 80146e4:	e061      	b.n	80147aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7f6 ff52 	bl	800b590 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	607b      	str	r3, [r7, #4]
 80146f0:	e00f      	b.n	8014712 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80146f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146f4:	330e      	adds	r3, #14
 80146f6:	4619      	mov	r1, r3
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7f6 fec3 	bl	800b484 <pbuf_remove_header>
 80146fe:	4603      	mov	r3, r0
 8014700:	2b00      	cmp	r3, #0
 8014702:	d006      	beq.n	8014712 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014704:	4b2e      	ldr	r3, [pc, #184]	; (80147c0 <icmp_input+0x1f8>)
 8014706:	22c7      	movs	r2, #199	; 0xc7
 8014708:	4930      	ldr	r1, [pc, #192]	; (80147cc <icmp_input+0x204>)
 801470a:	482f      	ldr	r0, [pc, #188]	; (80147c8 <icmp_input+0x200>)
 801470c:	f001 fcba 	bl	8016084 <iprintf>
          goto icmperr;
 8014710:	e04b      	b.n	80147aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	685b      	ldr	r3, [r3, #4]
 8014716:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801471a:	4619      	mov	r1, r3
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7f6 fea1 	bl	800b464 <pbuf_add_header>
 8014722:	4603      	mov	r3, r0
 8014724:	2b00      	cmp	r3, #0
 8014726:	d12b      	bne.n	8014780 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	685b      	ldr	r3, [r3, #4]
 801472c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	681a      	ldr	r2, [r3, #0]
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014736:	4b20      	ldr	r3, [pc, #128]	; (80147b8 <icmp_input+0x1f0>)
 8014738:	691a      	ldr	r2, [r3, #16]
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	2200      	movs	r2, #0
 8014742:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	2200      	movs	r2, #0
 8014748:	709a      	strb	r2, [r3, #2]
 801474a:	2200      	movs	r2, #0
 801474c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	22ff      	movs	r2, #255	; 0xff
 8014752:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2200      	movs	r2, #0
 8014758:	729a      	strb	r2, [r3, #10]
 801475a:	2200      	movs	r2, #0
 801475c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801475e:	683b      	ldr	r3, [r7, #0]
 8014760:	9302      	str	r3, [sp, #8]
 8014762:	2301      	movs	r3, #1
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	2300      	movs	r3, #0
 8014768:	9300      	str	r3, [sp, #0]
 801476a:	23ff      	movs	r3, #255	; 0xff
 801476c:	2200      	movs	r2, #0
 801476e:	69f9      	ldr	r1, [r7, #28]
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f000 fa93 	bl	8014c9c <ip4_output_if>
 8014776:	4603      	mov	r3, r0
 8014778:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801477a:	e001      	b.n	8014780 <icmp_input+0x1b8>
      break;
 801477c:	bf00      	nop
 801477e:	e000      	b.n	8014782 <icmp_input+0x1ba>
      break;
 8014780:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7f6 ff04 	bl	800b590 <pbuf_free>
  return;
 8014788:	e013      	b.n	80147b2 <icmp_input+0x1ea>
    goto lenerr;
 801478a:	bf00      	nop
 801478c:	e002      	b.n	8014794 <icmp_input+0x1cc>
    goto lenerr;
 801478e:	bf00      	nop
 8014790:	e000      	b.n	8014794 <icmp_input+0x1cc>
        goto lenerr;
 8014792:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7f6 fefb 	bl	800b590 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801479a:	e00a      	b.n	80147b2 <icmp_input+0x1ea>
        goto icmperr;
 801479c:	bf00      	nop
 801479e:	e004      	b.n	80147aa <icmp_input+0x1e2>
        goto icmperr;
 80147a0:	bf00      	nop
 80147a2:	e002      	b.n	80147aa <icmp_input+0x1e2>
          goto icmperr;
 80147a4:	bf00      	nop
 80147a6:	e000      	b.n	80147aa <icmp_input+0x1e2>
          goto icmperr;
 80147a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7f6 fef0 	bl	800b590 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80147b2:	3728      	adds	r7, #40	; 0x28
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	200081e4 	.word	0x200081e4
 80147bc:	200081f8 	.word	0x200081f8
 80147c0:	08019cfc 	.word	0x08019cfc
 80147c4:	08019d34 	.word	0x08019d34
 80147c8:	08019d6c 	.word	0x08019d6c
 80147cc:	08019d94 	.word	0x08019d94

080147d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
 80147d8:	460b      	mov	r3, r1
 80147da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80147dc:	78fb      	ldrb	r3, [r7, #3]
 80147de:	461a      	mov	r2, r3
 80147e0:	2103      	movs	r1, #3
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f000 f814 	bl	8014810 <icmp_send_response>
}
 80147e8:	bf00      	nop
 80147ea:	3708      	adds	r7, #8
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	460b      	mov	r3, r1
 80147fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80147fc:	78fb      	ldrb	r3, [r7, #3]
 80147fe:	461a      	mov	r2, r3
 8014800:	210b      	movs	r1, #11
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f000 f804 	bl	8014810 <icmp_send_response>
}
 8014808:	bf00      	nop
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}

08014810 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b08c      	sub	sp, #48	; 0x30
 8014814:	af04      	add	r7, sp, #16
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	460b      	mov	r3, r1
 801481a:	70fb      	strb	r3, [r7, #3]
 801481c:	4613      	mov	r3, r2
 801481e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014820:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014824:	2124      	movs	r1, #36	; 0x24
 8014826:	2022      	movs	r0, #34	; 0x22
 8014828:	f7f6 fbce 	bl	800afc8 <pbuf_alloc>
 801482c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801482e:	69fb      	ldr	r3, [r7, #28]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d04c      	beq.n	80148ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014834:	69fb      	ldr	r3, [r7, #28]
 8014836:	895b      	ldrh	r3, [r3, #10]
 8014838:	2b23      	cmp	r3, #35	; 0x23
 801483a:	d806      	bhi.n	801484a <icmp_send_response+0x3a>
 801483c:	4b26      	ldr	r3, [pc, #152]	; (80148d8 <icmp_send_response+0xc8>)
 801483e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014842:	4926      	ldr	r1, [pc, #152]	; (80148dc <icmp_send_response+0xcc>)
 8014844:	4826      	ldr	r0, [pc, #152]	; (80148e0 <icmp_send_response+0xd0>)
 8014846:	f001 fc1d 	bl	8016084 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014850:	69fb      	ldr	r3, [r7, #28]
 8014852:	685b      	ldr	r3, [r3, #4]
 8014854:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	78fa      	ldrb	r2, [r7, #3]
 801485a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	78ba      	ldrb	r2, [r7, #2]
 8014860:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014862:	697b      	ldr	r3, [r7, #20]
 8014864:	2200      	movs	r2, #0
 8014866:	711a      	strb	r2, [r3, #4]
 8014868:	2200      	movs	r2, #0
 801486a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	2200      	movs	r2, #0
 8014870:	719a      	strb	r2, [r3, #6]
 8014872:	2200      	movs	r2, #0
 8014874:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014876:	69fb      	ldr	r3, [r7, #28]
 8014878:	685b      	ldr	r3, [r3, #4]
 801487a:	f103 0008 	add.w	r0, r3, #8
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	685b      	ldr	r3, [r3, #4]
 8014882:	221c      	movs	r2, #28
 8014884:	4619      	mov	r1, r3
 8014886:	f001 fbe7 	bl	8016058 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	68db      	ldr	r3, [r3, #12]
 801488e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014890:	f107 030c 	add.w	r3, r7, #12
 8014894:	4618      	mov	r0, r3
 8014896:	f000 f825 	bl	80148e4 <ip4_route>
 801489a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801489c:	693b      	ldr	r3, [r7, #16]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d011      	beq.n	80148c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	2200      	movs	r2, #0
 80148a6:	709a      	strb	r2, [r3, #2]
 80148a8:	2200      	movs	r2, #0
 80148aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80148ac:	f107 020c 	add.w	r2, r7, #12
 80148b0:	693b      	ldr	r3, [r7, #16]
 80148b2:	9302      	str	r3, [sp, #8]
 80148b4:	2301      	movs	r3, #1
 80148b6:	9301      	str	r3, [sp, #4]
 80148b8:	2300      	movs	r3, #0
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	23ff      	movs	r3, #255	; 0xff
 80148be:	2100      	movs	r1, #0
 80148c0:	69f8      	ldr	r0, [r7, #28]
 80148c2:	f000 f9eb 	bl	8014c9c <ip4_output_if>
  }
  pbuf_free(q);
 80148c6:	69f8      	ldr	r0, [r7, #28]
 80148c8:	f7f6 fe62 	bl	800b590 <pbuf_free>
 80148cc:	e000      	b.n	80148d0 <icmp_send_response+0xc0>
    return;
 80148ce:	bf00      	nop
}
 80148d0:	3720      	adds	r7, #32
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bd80      	pop	{r7, pc}
 80148d6:	bf00      	nop
 80148d8:	08019cfc 	.word	0x08019cfc
 80148dc:	08019dc8 	.word	0x08019dc8
 80148e0:	08019d6c 	.word	0x08019d6c

080148e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80148e4:	b480      	push	{r7}
 80148e6:	b085      	sub	sp, #20
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80148ec:	4b33      	ldr	r3, [pc, #204]	; (80149bc <ip4_route+0xd8>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	60fb      	str	r3, [r7, #12]
 80148f2:	e036      	b.n	8014962 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148fa:	f003 0301 	and.w	r3, r3, #1
 80148fe:	b2db      	uxtb	r3, r3
 8014900:	2b00      	cmp	r3, #0
 8014902:	d02b      	beq.n	801495c <ip4_route+0x78>
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801490a:	089b      	lsrs	r3, r3, #2
 801490c:	f003 0301 	and.w	r3, r3, #1
 8014910:	b2db      	uxtb	r3, r3
 8014912:	2b00      	cmp	r3, #0
 8014914:	d022      	beq.n	801495c <ip4_route+0x78>
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	3304      	adds	r3, #4
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d01d      	beq.n	801495c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	681a      	ldr	r2, [r3, #0]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	3304      	adds	r3, #4
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	405a      	eors	r2, r3
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	3308      	adds	r3, #8
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	4013      	ands	r3, r2
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	e038      	b.n	80149ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014942:	f003 0302 	and.w	r3, r3, #2
 8014946:	2b00      	cmp	r3, #0
 8014948:	d108      	bne.n	801495c <ip4_route+0x78>
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	330c      	adds	r3, #12
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	429a      	cmp	r2, r3
 8014956:	d101      	bne.n	801495c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	e028      	b.n	80149ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	60fb      	str	r3, [r7, #12]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d1c5      	bne.n	80148f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014968:	4b15      	ldr	r3, [pc, #84]	; (80149c0 <ip4_route+0xdc>)
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d01a      	beq.n	80149a6 <ip4_route+0xc2>
 8014970:	4b13      	ldr	r3, [pc, #76]	; (80149c0 <ip4_route+0xdc>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014978:	f003 0301 	and.w	r3, r3, #1
 801497c:	2b00      	cmp	r3, #0
 801497e:	d012      	beq.n	80149a6 <ip4_route+0xc2>
 8014980:	4b0f      	ldr	r3, [pc, #60]	; (80149c0 <ip4_route+0xdc>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00a      	beq.n	80149a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014990:	4b0b      	ldr	r3, [pc, #44]	; (80149c0 <ip4_route+0xdc>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	3304      	adds	r3, #4
 8014996:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014998:	2b00      	cmp	r3, #0
 801499a:	d004      	beq.n	80149a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	b2db      	uxtb	r3, r3
 80149a2:	2b7f      	cmp	r3, #127	; 0x7f
 80149a4:	d101      	bne.n	80149aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80149a6:	2300      	movs	r3, #0
 80149a8:	e001      	b.n	80149ae <ip4_route+0xca>
  }

  return netif_default;
 80149aa:	4b05      	ldr	r3, [pc, #20]	; (80149c0 <ip4_route+0xdc>)
 80149ac:	681b      	ldr	r3, [r3, #0]
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3714      	adds	r7, #20
 80149b2:	46bd      	mov	sp, r7
 80149b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop
 80149bc:	2000b908 	.word	0x2000b908
 80149c0:	2000b90c 	.word	0x2000b90c

080149c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b082      	sub	sp, #8
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80149d2:	f003 0301 	and.w	r3, r3, #1
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d016      	beq.n	8014a0a <ip4_input_accept+0x46>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	3304      	adds	r3, #4
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d011      	beq.n	8014a0a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80149e6:	4b0b      	ldr	r3, [pc, #44]	; (8014a14 <ip4_input_accept+0x50>)
 80149e8:	695a      	ldr	r2, [r3, #20]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	3304      	adds	r3, #4
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d008      	beq.n	8014a06 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80149f4:	4b07      	ldr	r3, [pc, #28]	; (8014a14 <ip4_input_accept+0x50>)
 80149f6:	695b      	ldr	r3, [r3, #20]
 80149f8:	6879      	ldr	r1, [r7, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f000 fa26 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8014a00:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d001      	beq.n	8014a0a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a06:	2301      	movs	r3, #1
 8014a08:	e000      	b.n	8014a0c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a0a:	2300      	movs	r3, #0
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	3708      	adds	r7, #8
 8014a10:	46bd      	mov	sp, r7
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	200081e4 	.word	0x200081e4

08014a18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b088      	sub	sp, #32
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014a22:	2301      	movs	r3, #1
 8014a24:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	685b      	ldr	r3, [r3, #4]
 8014a2a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	091b      	lsrs	r3, r3, #4
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	2b04      	cmp	r3, #4
 8014a36:	d004      	beq.n	8014a42 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7f6 fda9 	bl	800b590 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e123      	b.n	8014c8a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014a42:	69fb      	ldr	r3, [r7, #28]
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	f003 030f 	and.w	r3, r3, #15
 8014a4a:	b2db      	uxtb	r3, r3
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	b2db      	uxtb	r3, r3
 8014a50:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014a52:	69fb      	ldr	r3, [r7, #28]
 8014a54:	885b      	ldrh	r3, [r3, #2]
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7f5 f9e1 	bl	8009e20 <lwip_htons>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	891b      	ldrh	r3, [r3, #8]
 8014a66:	8a3a      	ldrh	r2, [r7, #16]
 8014a68:	429a      	cmp	r2, r3
 8014a6a:	d204      	bcs.n	8014a76 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8014a6c:	8a3b      	ldrh	r3, [r7, #16]
 8014a6e:	4619      	mov	r1, r3
 8014a70:	6878      	ldr	r0, [r7, #4]
 8014a72:	f7f6 fc07 	bl	800b284 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	895b      	ldrh	r3, [r3, #10]
 8014a7a:	8a7a      	ldrh	r2, [r7, #18]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d807      	bhi.n	8014a90 <ip4_input+0x78>
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	891b      	ldrh	r3, [r3, #8]
 8014a84:	8a3a      	ldrh	r2, [r7, #16]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d802      	bhi.n	8014a90 <ip4_input+0x78>
 8014a8a:	8a7b      	ldrh	r3, [r7, #18]
 8014a8c:	2b13      	cmp	r3, #19
 8014a8e:	d804      	bhi.n	8014a9a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f7f6 fd7d 	bl	800b590 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e0f7      	b.n	8014c8a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	691b      	ldr	r3, [r3, #16]
 8014a9e:	4a7d      	ldr	r2, [pc, #500]	; (8014c94 <ip4_input+0x27c>)
 8014aa0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	4a7b      	ldr	r2, [pc, #492]	; (8014c94 <ip4_input+0x27c>)
 8014aa8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014aaa:	4b7a      	ldr	r3, [pc, #488]	; (8014c94 <ip4_input+0x27c>)
 8014aac:	695b      	ldr	r3, [r3, #20]
 8014aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ab2:	2be0      	cmp	r3, #224	; 0xe0
 8014ab4:	d112      	bne.n	8014adc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d007      	beq.n	8014ad6 <ip4_input+0xbe>
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	3304      	adds	r3, #4
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d002      	beq.n	8014ad6 <ip4_input+0xbe>
      netif = inp;
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	61bb      	str	r3, [r7, #24]
 8014ad4:	e02a      	b.n	8014b2c <ip4_input+0x114>
    } else {
      netif = NULL;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	61bb      	str	r3, [r7, #24]
 8014ada:	e027      	b.n	8014b2c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014adc:	6838      	ldr	r0, [r7, #0]
 8014ade:	f7ff ff71 	bl	80149c4 <ip4_input_accept>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d002      	beq.n	8014aee <ip4_input+0xd6>
      netif = inp;
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	61bb      	str	r3, [r7, #24]
 8014aec:	e01e      	b.n	8014b2c <ip4_input+0x114>
    } else {
      netif = NULL;
 8014aee:	2300      	movs	r3, #0
 8014af0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014af2:	4b68      	ldr	r3, [pc, #416]	; (8014c94 <ip4_input+0x27c>)
 8014af4:	695b      	ldr	r3, [r3, #20]
 8014af6:	b2db      	uxtb	r3, r3
 8014af8:	2b7f      	cmp	r3, #127	; 0x7f
 8014afa:	d017      	beq.n	8014b2c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014afc:	4b66      	ldr	r3, [pc, #408]	; (8014c98 <ip4_input+0x280>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	61bb      	str	r3, [r7, #24]
 8014b02:	e00e      	b.n	8014b22 <ip4_input+0x10a>
          if (netif == inp) {
 8014b04:	69ba      	ldr	r2, [r7, #24]
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d006      	beq.n	8014b1a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b0c:	69b8      	ldr	r0, [r7, #24]
 8014b0e:	f7ff ff59 	bl	80149c4 <ip4_input_accept>
 8014b12:	4603      	mov	r3, r0
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d108      	bne.n	8014b2a <ip4_input+0x112>
 8014b18:	e000      	b.n	8014b1c <ip4_input+0x104>
            continue;
 8014b1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	69bb      	ldr	r3, [r7, #24]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d1ed      	bne.n	8014b04 <ip4_input+0xec>
 8014b28:	e000      	b.n	8014b2c <ip4_input+0x114>
            break;
 8014b2a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8014b2c:	69bb      	ldr	r3, [r7, #24]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d111      	bne.n	8014b56 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	7a5b      	ldrb	r3, [r3, #9]
 8014b36:	2b11      	cmp	r3, #17
 8014b38:	d10d      	bne.n	8014b56 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8014b3a:	8a7b      	ldrh	r3, [r7, #18]
 8014b3c:	69fa      	ldr	r2, [r7, #28]
 8014b3e:	4413      	add	r3, r2
 8014b40:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	885b      	ldrh	r3, [r3, #2]
 8014b46:	b29b      	uxth	r3, r3
 8014b48:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8014b4c:	d103      	bne.n	8014b56 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014b52:	2300      	movs	r3, #0
 8014b54:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d017      	beq.n	8014b8c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8014b5c:	4b4d      	ldr	r3, [pc, #308]	; (8014c94 <ip4_input+0x27c>)
 8014b5e:	691b      	ldr	r3, [r3, #16]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d013      	beq.n	8014b8c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b64:	4b4b      	ldr	r3, [pc, #300]	; (8014c94 <ip4_input+0x27c>)
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	6839      	ldr	r1, [r7, #0]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f000 f96e 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8014b70:	4603      	mov	r3, r0
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d105      	bne.n	8014b82 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b76:	4b47      	ldr	r3, [pc, #284]	; (8014c94 <ip4_input+0x27c>)
 8014b78:	691b      	ldr	r3, [r3, #16]
 8014b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b7e:	2be0      	cmp	r3, #224	; 0xe0
 8014b80:	d104      	bne.n	8014b8c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f7f6 fd04 	bl	800b590 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	e07e      	b.n	8014c8a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d104      	bne.n	8014b9c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f7f6 fcfc 	bl	800b590 <pbuf_free>
    return ERR_OK;
 8014b98:	2300      	movs	r3, #0
 8014b9a:	e076      	b.n	8014c8a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	88db      	ldrh	r3, [r3, #6]
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014ba8:	4013      	ands	r3, r2
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00b      	beq.n	8014bc6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 fd24 	bl	80155fc <ip4_reass>
 8014bb4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d101      	bne.n	8014bc0 <ip4_input+0x1a8>
      return ERR_OK;
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	e064      	b.n	8014c8a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	685b      	ldr	r3, [r3, #4]
 8014bc4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014bc6:	4a33      	ldr	r2, [pc, #204]	; (8014c94 <ip4_input+0x27c>)
 8014bc8:	69bb      	ldr	r3, [r7, #24]
 8014bca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014bcc:	4a31      	ldr	r2, [pc, #196]	; (8014c94 <ip4_input+0x27c>)
 8014bce:	683b      	ldr	r3, [r7, #0]
 8014bd0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014bd2:	4a30      	ldr	r2, [pc, #192]	; (8014c94 <ip4_input+0x27c>)
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	f003 030f 	and.w	r3, r3, #15
 8014be0:	b2db      	uxtb	r3, r3
 8014be2:	009b      	lsls	r3, r3, #2
 8014be4:	b2db      	uxtb	r3, r3
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	4b2a      	ldr	r3, [pc, #168]	; (8014c94 <ip4_input+0x27c>)
 8014bea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014bec:	8a7b      	ldrh	r3, [r7, #18]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7f6 fc47 	bl	800b484 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	7a5b      	ldrb	r3, [r3, #9]
 8014bfa:	2b11      	cmp	r3, #17
 8014bfc:	d006      	beq.n	8014c0c <ip4_input+0x1f4>
 8014bfe:	2b11      	cmp	r3, #17
 8014c00:	dc13      	bgt.n	8014c2a <ip4_input+0x212>
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d00c      	beq.n	8014c20 <ip4_input+0x208>
 8014c06:	2b06      	cmp	r3, #6
 8014c08:	d005      	beq.n	8014c16 <ip4_input+0x1fe>
 8014c0a:	e00e      	b.n	8014c2a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014c0c:	6839      	ldr	r1, [r7, #0]
 8014c0e:	6878      	ldr	r0, [r7, #4]
 8014c10:	f7fc fae8 	bl	80111e4 <udp_input>
        break;
 8014c14:	e026      	b.n	8014c64 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014c16:	6839      	ldr	r1, [r7, #0]
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f7f8 fafd 	bl	800d218 <tcp_input>
        break;
 8014c1e:	e021      	b.n	8014c64 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014c20:	6839      	ldr	r1, [r7, #0]
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f7ff fcd0 	bl	80145c8 <icmp_input>
        break;
 8014c28:	e01c      	b.n	8014c64 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c2a:	4b1a      	ldr	r3, [pc, #104]	; (8014c94 <ip4_input+0x27c>)
 8014c2c:	695b      	ldr	r3, [r3, #20]
 8014c2e:	69b9      	ldr	r1, [r7, #24]
 8014c30:	4618      	mov	r0, r3
 8014c32:	f000 f90b 	bl	8014e4c <ip4_addr_isbroadcast_u32>
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d10f      	bne.n	8014c5c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c3c:	4b15      	ldr	r3, [pc, #84]	; (8014c94 <ip4_input+0x27c>)
 8014c3e:	695b      	ldr	r3, [r3, #20]
 8014c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c44:	2be0      	cmp	r3, #224	; 0xe0
 8014c46:	d009      	beq.n	8014c5c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c4c:	4619      	mov	r1, r3
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7f6 fc8b 	bl	800b56a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c54:	2102      	movs	r1, #2
 8014c56:	6878      	ldr	r0, [r7, #4]
 8014c58:	f7ff fdba 	bl	80147d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f7f6 fc97 	bl	800b590 <pbuf_free>
        break;
 8014c62:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c64:	4b0b      	ldr	r3, [pc, #44]	; (8014c94 <ip4_input+0x27c>)
 8014c66:	2200      	movs	r2, #0
 8014c68:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c6a:	4b0a      	ldr	r3, [pc, #40]	; (8014c94 <ip4_input+0x27c>)
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c70:	4b08      	ldr	r3, [pc, #32]	; (8014c94 <ip4_input+0x27c>)
 8014c72:	2200      	movs	r2, #0
 8014c74:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c76:	4b07      	ldr	r3, [pc, #28]	; (8014c94 <ip4_input+0x27c>)
 8014c78:	2200      	movs	r2, #0
 8014c7a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014c7c:	4b05      	ldr	r3, [pc, #20]	; (8014c94 <ip4_input+0x27c>)
 8014c7e:	2200      	movs	r2, #0
 8014c80:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014c82:	4b04      	ldr	r3, [pc, #16]	; (8014c94 <ip4_input+0x27c>)
 8014c84:	2200      	movs	r2, #0
 8014c86:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014c88:	2300      	movs	r3, #0
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3720      	adds	r7, #32
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	200081e4 	.word	0x200081e4
 8014c98:	2000b908 	.word	0x2000b908

08014c9c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b08a      	sub	sp, #40	; 0x28
 8014ca0:	af04      	add	r7, sp, #16
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
 8014ca8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d009      	beq.n	8014cc8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d003      	beq.n	8014cc2 <ip4_output_if+0x26>
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d102      	bne.n	8014cc8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc4:	3304      	adds	r3, #4
 8014cc6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014cc8:	78fa      	ldrb	r2, [r7, #3]
 8014cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ccc:	9302      	str	r3, [sp, #8]
 8014cce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014cd2:	9301      	str	r3, [sp, #4]
 8014cd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	4613      	mov	r3, r2
 8014cdc:	687a      	ldr	r2, [r7, #4]
 8014cde:	6979      	ldr	r1, [r7, #20]
 8014ce0:	68f8      	ldr	r0, [r7, #12]
 8014ce2:	f000 f805 	bl	8014cf0 <ip4_output_if_src>
 8014ce6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3718      	adds	r7, #24
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b088      	sub	sp, #32
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	60f8      	str	r0, [r7, #12]
 8014cf8:	60b9      	str	r1, [r7, #8]
 8014cfa:	607a      	str	r2, [r7, #4]
 8014cfc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	7b9b      	ldrb	r3, [r3, #14]
 8014d02:	2b01      	cmp	r3, #1
 8014d04:	d006      	beq.n	8014d14 <ip4_output_if_src+0x24>
 8014d06:	4b4b      	ldr	r3, [pc, #300]	; (8014e34 <ip4_output_if_src+0x144>)
 8014d08:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014d0c:	494a      	ldr	r1, [pc, #296]	; (8014e38 <ip4_output_if_src+0x148>)
 8014d0e:	484b      	ldr	r0, [pc, #300]	; (8014e3c <ip4_output_if_src+0x14c>)
 8014d10:	f001 f9b8 	bl	8016084 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d060      	beq.n	8014ddc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014d1a:	2314      	movs	r3, #20
 8014d1c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014d1e:	2114      	movs	r1, #20
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f7f6 fb9f 	bl	800b464 <pbuf_add_header>
 8014d26:	4603      	mov	r3, r0
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d2c:	f06f 0301 	mvn.w	r3, #1
 8014d30:	e07c      	b.n	8014e2c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	895b      	ldrh	r3, [r3, #10]
 8014d3c:	2b13      	cmp	r3, #19
 8014d3e:	d806      	bhi.n	8014d4e <ip4_output_if_src+0x5e>
 8014d40:	4b3c      	ldr	r3, [pc, #240]	; (8014e34 <ip4_output_if_src+0x144>)
 8014d42:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014d46:	493e      	ldr	r1, [pc, #248]	; (8014e40 <ip4_output_if_src+0x150>)
 8014d48:	483c      	ldr	r0, [pc, #240]	; (8014e3c <ip4_output_if_src+0x14c>)
 8014d4a:	f001 f99b 	bl	8016084 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	78fa      	ldrb	r2, [r7, #3]
 8014d52:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d54:	69fb      	ldr	r3, [r7, #28]
 8014d56:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014d5a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681a      	ldr	r2, [r3, #0]
 8014d60:	69fb      	ldr	r3, [r7, #28]
 8014d62:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d64:	8b7b      	ldrh	r3, [r7, #26]
 8014d66:	089b      	lsrs	r3, r3, #2
 8014d68:	b29b      	uxth	r3, r3
 8014d6a:	b2db      	uxtb	r3, r3
 8014d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	69fb      	ldr	r3, [r7, #28]
 8014d74:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014d7c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	891b      	ldrh	r3, [r3, #8]
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7f5 f84c 	bl	8009e20 <lwip_htons>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	69fb      	ldr	r3, [r7, #28]
 8014d8e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	2200      	movs	r2, #0
 8014d94:	719a      	strb	r2, [r3, #6]
 8014d96:	2200      	movs	r2, #0
 8014d98:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014d9a:	4b2a      	ldr	r3, [pc, #168]	; (8014e44 <ip4_output_if_src+0x154>)
 8014d9c:	881b      	ldrh	r3, [r3, #0]
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f7f5 f83e 	bl	8009e20 <lwip_htons>
 8014da4:	4603      	mov	r3, r0
 8014da6:	461a      	mov	r2, r3
 8014da8:	69fb      	ldr	r3, [r7, #28]
 8014daa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014dac:	4b25      	ldr	r3, [pc, #148]	; (8014e44 <ip4_output_if_src+0x154>)
 8014dae:	881b      	ldrh	r3, [r3, #0]
 8014db0:	3301      	adds	r3, #1
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	4b23      	ldr	r3, [pc, #140]	; (8014e44 <ip4_output_if_src+0x154>)
 8014db6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d104      	bne.n	8014dc8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014dbe:	4b22      	ldr	r3, [pc, #136]	; (8014e48 <ip4_output_if_src+0x158>)
 8014dc0:	681a      	ldr	r2, [r3, #0]
 8014dc2:	69fb      	ldr	r3, [r7, #28]
 8014dc4:	60da      	str	r2, [r3, #12]
 8014dc6:	e003      	b.n	8014dd0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	729a      	strb	r2, [r3, #10]
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	72da      	strb	r2, [r3, #11]
 8014dda:	e00f      	b.n	8014dfc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	895b      	ldrh	r3, [r3, #10]
 8014de0:	2b13      	cmp	r3, #19
 8014de2:	d802      	bhi.n	8014dea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014de4:	f06f 0301 	mvn.w	r3, #1
 8014de8:	e020      	b.n	8014e2c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014df0:	69fb      	ldr	r3, [r7, #28]
 8014df2:	691b      	ldr	r3, [r3, #16]
 8014df4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014df6:	f107 0314 	add.w	r3, r7, #20
 8014dfa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00c      	beq.n	8014e1e <ip4_output_if_src+0x12e>
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	891a      	ldrh	r2, [r3, #8]
 8014e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d906      	bls.n	8014e1e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	f000 fddf 	bl	80159d8 <ip4_frag>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	e006      	b.n	8014e2c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e20:	695b      	ldr	r3, [r3, #20]
 8014e22:	687a      	ldr	r2, [r7, #4]
 8014e24:	68f9      	ldr	r1, [r7, #12]
 8014e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e28:	4798      	blx	r3
 8014e2a:	4603      	mov	r3, r0
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3720      	adds	r7, #32
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}
 8014e34:	08019df4 	.word	0x08019df4
 8014e38:	08019e28 	.word	0x08019e28
 8014e3c:	08019e34 	.word	0x08019e34
 8014e40:	08019e5c 	.word	0x08019e5c
 8014e44:	20004b46 	.word	0x20004b46
 8014e48:	0801a2a4 	.word	0x0801a2a4

08014e4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	b085      	sub	sp, #20
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e60:	d002      	beq.n	8014e68 <ip4_addr_isbroadcast_u32+0x1c>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d101      	bne.n	8014e6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	e02a      	b.n	8014ec2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e72:	f003 0302 	and.w	r3, r3, #2
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e021      	b.n	8014ec2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	3304      	adds	r3, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	429a      	cmp	r2, r3
 8014e88:	d101      	bne.n	8014e8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	e019      	b.n	8014ec2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014e8e:	68fa      	ldr	r2, [r7, #12]
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	3304      	adds	r3, #4
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	405a      	eors	r2, r3
 8014e98:	683b      	ldr	r3, [r7, #0]
 8014e9a:	3308      	adds	r3, #8
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	4013      	ands	r3, r2
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d10d      	bne.n	8014ec0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	3308      	adds	r3, #8
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	43da      	mvns	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	3308      	adds	r3, #8
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d101      	bne.n	8014ec0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e000      	b.n	8014ec2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014ec0:	2300      	movs	r3, #0
  }
}
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	3714      	adds	r7, #20
 8014ec6:	46bd      	mov	sp, r7
 8014ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ecc:	4770      	bx	lr
	...

08014ed0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8014ed8:	2210      	movs	r2, #16
 8014eda:	4904      	ldr	r1, [pc, #16]	; (8014eec <ip4addr_ntoa+0x1c>)
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f000 f807 	bl	8014ef0 <ip4addr_ntoa_r>
 8014ee2:	4603      	mov	r3, r0
}
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	20004b48 	.word	0x20004b48

08014ef0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b08d      	sub	sp, #52	; 0x34
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8014efc:	2300      	movs	r3, #0
 8014efe:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8014f0a:	f107 0318 	add.w	r3, r7, #24
 8014f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014f10:	2300      	movs	r3, #0
 8014f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f16:	e059      	b.n	8014fcc <ip4addr_ntoa_r+0xdc>
    i = 0;
 8014f18:	2300      	movs	r3, #0
 8014f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8014f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f20:	781a      	ldrb	r2, [r3, #0]
 8014f22:	4b33      	ldr	r3, [pc, #204]	; (8014ff0 <ip4addr_ntoa_r+0x100>)
 8014f24:	fba3 1302 	umull	r1, r3, r3, r2
 8014f28:	08d9      	lsrs	r1, r3, #3
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	009b      	lsls	r3, r3, #2
 8014f2e:	440b      	add	r3, r1
 8014f30:	005b      	lsls	r3, r3, #1
 8014f32:	1ad3      	subs	r3, r2, r3
 8014f34:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8014f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	4a2d      	ldr	r2, [pc, #180]	; (8014ff0 <ip4addr_ntoa_r+0x100>)
 8014f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8014f40:	08db      	lsrs	r3, r3, #3
 8014f42:	b2da      	uxtb	r2, r3
 8014f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f46:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8014f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f4c:	1c5a      	adds	r2, r3, #1
 8014f4e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014f52:	4619      	mov	r1, r3
 8014f54:	7ffb      	ldrb	r3, [r7, #31]
 8014f56:	3330      	adds	r3, #48	; 0x30
 8014f58:	b2da      	uxtb	r2, r3
 8014f5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014f5e:	440b      	add	r3, r1
 8014f60:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8014f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f66:	781b      	ldrb	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d1d8      	bne.n	8014f1e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8014f6c:	e012      	b.n	8014f94 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8014f6e:	6a3b      	ldr	r3, [r7, #32]
 8014f70:	1c5a      	adds	r2, r3, #1
 8014f72:	623a      	str	r2, [r7, #32]
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	dc01      	bgt.n	8014f7e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	e031      	b.n	8014fe2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8014f7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8014f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f84:	1c59      	adds	r1, r3, #1
 8014f86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8014f88:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014f8c:	440a      	add	r2, r1
 8014f8e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8014f92:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8014f94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014f98:	1e5a      	subs	r2, r3, #1
 8014f9a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d1e5      	bne.n	8014f6e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8014fa2:	6a3b      	ldr	r3, [r7, #32]
 8014fa4:	1c5a      	adds	r2, r3, #1
 8014fa6:	623a      	str	r2, [r7, #32]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	dc01      	bgt.n	8014fb2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8014fae:	2300      	movs	r3, #0
 8014fb0:	e017      	b.n	8014fe2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8014fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb4:	1c5a      	adds	r2, r3, #1
 8014fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014fb8:	222e      	movs	r2, #46	; 0x2e
 8014fba:	701a      	strb	r2, [r3, #0]
    ap++;
 8014fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fbe:	3301      	adds	r3, #1
 8014fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8014fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014fd0:	2b03      	cmp	r3, #3
 8014fd2:	d9a1      	bls.n	8014f18 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	3b01      	subs	r3, #1
 8014fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fdc:	2200      	movs	r2, #0
 8014fde:	701a      	strb	r2, [r3, #0]
  return buf;
 8014fe0:	68bb      	ldr	r3, [r7, #8]
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	3734      	adds	r7, #52	; 0x34
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr
 8014fee:	bf00      	nop
 8014ff0:	cccccccd 	.word	0xcccccccd

08014ff4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014ffe:	4b12      	ldr	r3, [pc, #72]	; (8015048 <ip_reass_tmr+0x54>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015004:	e018      	b.n	8015038 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	7fdb      	ldrb	r3, [r3, #31]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d00b      	beq.n	8015026 <ip_reass_tmr+0x32>
      r->timer--;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	7fdb      	ldrb	r3, [r3, #31]
 8015012:	3b01      	subs	r3, #1
 8015014:	b2da      	uxtb	r2, r3
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	60fb      	str	r3, [r7, #12]
 8015024:	e008      	b.n	8015038 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015030:	68b9      	ldr	r1, [r7, #8]
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f80a 	bl	801504c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d1e3      	bne.n	8015006 <ip_reass_tmr+0x12>
    }
  }
}
 801503e:	bf00      	nop
 8015040:	bf00      	nop
 8015042:	3710      	adds	r7, #16
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}
 8015048:	20004b58 	.word	0x20004b58

0801504c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b088      	sub	sp, #32
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	429a      	cmp	r2, r3
 8015060:	d105      	bne.n	801506e <ip_reass_free_complete_datagram+0x22>
 8015062:	4b45      	ldr	r3, [pc, #276]	; (8015178 <ip_reass_free_complete_datagram+0x12c>)
 8015064:	22ab      	movs	r2, #171	; 0xab
 8015066:	4945      	ldr	r1, [pc, #276]	; (801517c <ip_reass_free_complete_datagram+0x130>)
 8015068:	4845      	ldr	r0, [pc, #276]	; (8015180 <ip_reass_free_complete_datagram+0x134>)
 801506a:	f001 f80b 	bl	8016084 <iprintf>
  if (prev != NULL) {
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d00a      	beq.n	801508a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015074:	683b      	ldr	r3, [r7, #0]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	687a      	ldr	r2, [r7, #4]
 801507a:	429a      	cmp	r2, r3
 801507c:	d005      	beq.n	801508a <ip_reass_free_complete_datagram+0x3e>
 801507e:	4b3e      	ldr	r3, [pc, #248]	; (8015178 <ip_reass_free_complete_datagram+0x12c>)
 8015080:	22ad      	movs	r2, #173	; 0xad
 8015082:	4940      	ldr	r1, [pc, #256]	; (8015184 <ip_reass_free_complete_datagram+0x138>)
 8015084:	483e      	ldr	r0, [pc, #248]	; (8015180 <ip_reass_free_complete_datagram+0x134>)
 8015086:	f000 fffd 	bl	8016084 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	889b      	ldrh	r3, [r3, #4]
 8015096:	b29b      	uxth	r3, r3
 8015098:	2b00      	cmp	r3, #0
 801509a:	d12a      	bne.n	80150f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80150a2:	697b      	ldr	r3, [r7, #20]
 80150a4:	681a      	ldr	r2, [r3, #0]
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80150aa:	69bb      	ldr	r3, [r7, #24]
 80150ac:	6858      	ldr	r0, [r3, #4]
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	3308      	adds	r3, #8
 80150b2:	2214      	movs	r2, #20
 80150b4:	4619      	mov	r1, r3
 80150b6:	f000 ffcf 	bl	8016058 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80150ba:	2101      	movs	r1, #1
 80150bc:	69b8      	ldr	r0, [r7, #24]
 80150be:	f7ff fb97 	bl	80147f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80150c2:	69b8      	ldr	r0, [r7, #24]
 80150c4:	f7f6 faf2 	bl	800b6ac <pbuf_clen>
 80150c8:	4603      	mov	r3, r0
 80150ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80150cc:	8bfa      	ldrh	r2, [r7, #30]
 80150ce:	8a7b      	ldrh	r3, [r7, #18]
 80150d0:	4413      	add	r3, r2
 80150d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150d6:	db05      	blt.n	80150e4 <ip_reass_free_complete_datagram+0x98>
 80150d8:	4b27      	ldr	r3, [pc, #156]	; (8015178 <ip_reass_free_complete_datagram+0x12c>)
 80150da:	22bc      	movs	r2, #188	; 0xbc
 80150dc:	492a      	ldr	r1, [pc, #168]	; (8015188 <ip_reass_free_complete_datagram+0x13c>)
 80150de:	4828      	ldr	r0, [pc, #160]	; (8015180 <ip_reass_free_complete_datagram+0x134>)
 80150e0:	f000 ffd0 	bl	8016084 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80150e4:	8bfa      	ldrh	r2, [r7, #30]
 80150e6:	8a7b      	ldrh	r3, [r7, #18]
 80150e8:	4413      	add	r3, r2
 80150ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80150ec:	69b8      	ldr	r0, [r7, #24]
 80150ee:	f7f6 fa4f 	bl	800b590 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80150f8:	e01f      	b.n	801513a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80150fa:	69bb      	ldr	r3, [r7, #24]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	f7f6 face 	bl	800b6ac <pbuf_clen>
 8015110:	4603      	mov	r3, r0
 8015112:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015114:	8bfa      	ldrh	r2, [r7, #30]
 8015116:	8a7b      	ldrh	r3, [r7, #18]
 8015118:	4413      	add	r3, r2
 801511a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801511e:	db05      	blt.n	801512c <ip_reass_free_complete_datagram+0xe0>
 8015120:	4b15      	ldr	r3, [pc, #84]	; (8015178 <ip_reass_free_complete_datagram+0x12c>)
 8015122:	22cc      	movs	r2, #204	; 0xcc
 8015124:	4918      	ldr	r1, [pc, #96]	; (8015188 <ip_reass_free_complete_datagram+0x13c>)
 8015126:	4816      	ldr	r0, [pc, #88]	; (8015180 <ip_reass_free_complete_datagram+0x134>)
 8015128:	f000 ffac 	bl	8016084 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801512c:	8bfa      	ldrh	r2, [r7, #30]
 801512e:	8a7b      	ldrh	r3, [r7, #18]
 8015130:	4413      	add	r3, r2
 8015132:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015134:	68f8      	ldr	r0, [r7, #12]
 8015136:	f7f6 fa2b 	bl	800b590 <pbuf_free>
  while (p != NULL) {
 801513a:	69bb      	ldr	r3, [r7, #24]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d1dc      	bne.n	80150fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015140:	6839      	ldr	r1, [r7, #0]
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f000 f8c2 	bl	80152cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015148:	4b10      	ldr	r3, [pc, #64]	; (801518c <ip_reass_free_complete_datagram+0x140>)
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	8bfa      	ldrh	r2, [r7, #30]
 801514e:	429a      	cmp	r2, r3
 8015150:	d905      	bls.n	801515e <ip_reass_free_complete_datagram+0x112>
 8015152:	4b09      	ldr	r3, [pc, #36]	; (8015178 <ip_reass_free_complete_datagram+0x12c>)
 8015154:	22d2      	movs	r2, #210	; 0xd2
 8015156:	490e      	ldr	r1, [pc, #56]	; (8015190 <ip_reass_free_complete_datagram+0x144>)
 8015158:	4809      	ldr	r0, [pc, #36]	; (8015180 <ip_reass_free_complete_datagram+0x134>)
 801515a:	f000 ff93 	bl	8016084 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801515e:	4b0b      	ldr	r3, [pc, #44]	; (801518c <ip_reass_free_complete_datagram+0x140>)
 8015160:	881a      	ldrh	r2, [r3, #0]
 8015162:	8bfb      	ldrh	r3, [r7, #30]
 8015164:	1ad3      	subs	r3, r2, r3
 8015166:	b29a      	uxth	r2, r3
 8015168:	4b08      	ldr	r3, [pc, #32]	; (801518c <ip_reass_free_complete_datagram+0x140>)
 801516a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801516c:	8bfb      	ldrh	r3, [r7, #30]
}
 801516e:	4618      	mov	r0, r3
 8015170:	3720      	adds	r7, #32
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}
 8015176:	bf00      	nop
 8015178:	08019e8c 	.word	0x08019e8c
 801517c:	08019ec8 	.word	0x08019ec8
 8015180:	08019ed4 	.word	0x08019ed4
 8015184:	08019efc 	.word	0x08019efc
 8015188:	08019f10 	.word	0x08019f10
 801518c:	20004b5c 	.word	0x20004b5c
 8015190:	08019f30 	.word	0x08019f30

08015194 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b08a      	sub	sp, #40	; 0x28
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801519e:	2300      	movs	r3, #0
 80151a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80151a2:	2300      	movs	r3, #0
 80151a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80151a6:	2300      	movs	r3, #0
 80151a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80151aa:	2300      	movs	r3, #0
 80151ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80151b2:	4b28      	ldr	r3, [pc, #160]	; (8015254 <ip_reass_remove_oldest_datagram+0xc0>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80151b8:	e030      	b.n	801521c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	695a      	ldr	r2, [r3, #20]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	68db      	ldr	r3, [r3, #12]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d10c      	bne.n	80151e0 <ip_reass_remove_oldest_datagram+0x4c>
 80151c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c8:	699a      	ldr	r2, [r3, #24]
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	691b      	ldr	r3, [r3, #16]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	d106      	bne.n	80151e0 <ip_reass_remove_oldest_datagram+0x4c>
 80151d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d4:	899a      	ldrh	r2, [r3, #12]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	889b      	ldrh	r3, [r3, #4]
 80151da:	b29b      	uxth	r3, r3
 80151dc:	429a      	cmp	r2, r3
 80151de:	d014      	beq.n	801520a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	3301      	adds	r3, #1
 80151e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d104      	bne.n	80151f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80151ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	61bb      	str	r3, [r7, #24]
 80151f4:	e009      	b.n	801520a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80151f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f8:	7fda      	ldrb	r2, [r3, #31]
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	7fdb      	ldrb	r3, [r3, #31]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d803      	bhi.n	801520a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015204:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015206:	69fb      	ldr	r3, [r7, #28]
 8015208:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d001      	beq.n	8015216 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015214:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1cb      	bne.n	80151ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015222:	6a3b      	ldr	r3, [r7, #32]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d008      	beq.n	801523a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015228:	69b9      	ldr	r1, [r7, #24]
 801522a:	6a38      	ldr	r0, [r7, #32]
 801522c:	f7ff ff0e 	bl	801504c <ip_reass_free_complete_datagram>
 8015230:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015232:	697a      	ldr	r2, [r7, #20]
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	4413      	add	r3, r2
 8015238:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801523a:	697a      	ldr	r2, [r7, #20]
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	429a      	cmp	r2, r3
 8015240:	da02      	bge.n	8015248 <ip_reass_remove_oldest_datagram+0xb4>
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	2b01      	cmp	r3, #1
 8015246:	dcac      	bgt.n	80151a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015248:	697b      	ldr	r3, [r7, #20]
}
 801524a:	4618      	mov	r0, r3
 801524c:	3728      	adds	r7, #40	; 0x28
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	20004b58 	.word	0x20004b58

08015258 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015258:	b580      	push	{r7, lr}
 801525a:	b084      	sub	sp, #16
 801525c:	af00      	add	r7, sp, #0
 801525e:	6078      	str	r0, [r7, #4]
 8015260:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015262:	2004      	movs	r0, #4
 8015264:	f7f5 fa92 	bl	800a78c <memp_malloc>
 8015268:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d110      	bne.n	8015292 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015270:	6839      	ldr	r1, [r7, #0]
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f7ff ff8e 	bl	8015194 <ip_reass_remove_oldest_datagram>
 8015278:	4602      	mov	r2, r0
 801527a:	683b      	ldr	r3, [r7, #0]
 801527c:	4293      	cmp	r3, r2
 801527e:	dc03      	bgt.n	8015288 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015280:	2004      	movs	r0, #4
 8015282:	f7f5 fa83 	bl	800a78c <memp_malloc>
 8015286:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d101      	bne.n	8015292 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801528e:	2300      	movs	r3, #0
 8015290:	e016      	b.n	80152c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015292:	2220      	movs	r2, #32
 8015294:	2100      	movs	r1, #0
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f000 feec 	bl	8016074 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	220f      	movs	r2, #15
 80152a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80152a2:	4b09      	ldr	r3, [pc, #36]	; (80152c8 <ip_reass_enqueue_new_datagram+0x70>)
 80152a4:	681a      	ldr	r2, [r3, #0]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80152aa:	4a07      	ldr	r2, [pc, #28]	; (80152c8 <ip_reass_enqueue_new_datagram+0x70>)
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	3308      	adds	r3, #8
 80152b4:	2214      	movs	r2, #20
 80152b6:	6879      	ldr	r1, [r7, #4]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f000 fecd 	bl	8016058 <memcpy>
  return ipr;
 80152be:	68fb      	ldr	r3, [r7, #12]
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3710      	adds	r7, #16
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bd80      	pop	{r7, pc}
 80152c8:	20004b58 	.word	0x20004b58

080152cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80152d6:	4b10      	ldr	r3, [pc, #64]	; (8015318 <ip_reass_dequeue_datagram+0x4c>)
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	687a      	ldr	r2, [r7, #4]
 80152dc:	429a      	cmp	r2, r3
 80152de:	d104      	bne.n	80152ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	4a0c      	ldr	r2, [pc, #48]	; (8015318 <ip_reass_dequeue_datagram+0x4c>)
 80152e6:	6013      	str	r3, [r2, #0]
 80152e8:	e00d      	b.n	8015306 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d106      	bne.n	80152fe <ip_reass_dequeue_datagram+0x32>
 80152f0:	4b0a      	ldr	r3, [pc, #40]	; (801531c <ip_reass_dequeue_datagram+0x50>)
 80152f2:	f240 1245 	movw	r2, #325	; 0x145
 80152f6:	490a      	ldr	r1, [pc, #40]	; (8015320 <ip_reass_dequeue_datagram+0x54>)
 80152f8:	480a      	ldr	r0, [pc, #40]	; (8015324 <ip_reass_dequeue_datagram+0x58>)
 80152fa:	f000 fec3 	bl	8016084 <iprintf>
    prev->next = ipr->next;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015306:	6879      	ldr	r1, [r7, #4]
 8015308:	2004      	movs	r0, #4
 801530a:	f7f5 fa91 	bl	800a830 <memp_free>
}
 801530e:	bf00      	nop
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	20004b58 	.word	0x20004b58
 801531c:	08019e8c 	.word	0x08019e8c
 8015320:	08019f54 	.word	0x08019f54
 8015324:	08019ed4 	.word	0x08019ed4

08015328 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08c      	sub	sp, #48	; 0x30
 801532c:	af00      	add	r7, sp, #0
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015334:	2300      	movs	r3, #0
 8015336:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015338:	2301      	movs	r3, #1
 801533a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015342:	69fb      	ldr	r3, [r7, #28]
 8015344:	885b      	ldrh	r3, [r3, #2]
 8015346:	b29b      	uxth	r3, r3
 8015348:	4618      	mov	r0, r3
 801534a:	f7f4 fd69 	bl	8009e20 <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	f003 030f 	and.w	r3, r3, #15
 801535a:	b2db      	uxtb	r3, r3
 801535c:	009b      	lsls	r3, r3, #2
 801535e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015360:	7e7b      	ldrb	r3, [r7, #25]
 8015362:	b29b      	uxth	r3, r3
 8015364:	8b7a      	ldrh	r2, [r7, #26]
 8015366:	429a      	cmp	r2, r3
 8015368:	d202      	bcs.n	8015370 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801536a:	f04f 33ff 	mov.w	r3, #4294967295
 801536e:	e135      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015370:	7e7b      	ldrb	r3, [r7, #25]
 8015372:	b29b      	uxth	r3, r3
 8015374:	8b7a      	ldrh	r2, [r7, #26]
 8015376:	1ad3      	subs	r3, r2, r3
 8015378:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	88db      	ldrh	r3, [r3, #6]
 801537e:	b29b      	uxth	r3, r3
 8015380:	4618      	mov	r0, r3
 8015382:	f7f4 fd4d 	bl	8009e20 <lwip_htons>
 8015386:	4603      	mov	r3, r0
 8015388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801538c:	b29b      	uxth	r3, r3
 801538e:	00db      	lsls	r3, r3, #3
 8015390:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	685b      	ldr	r3, [r3, #4]
 8015396:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539a:	2200      	movs	r2, #0
 801539c:	701a      	strb	r2, [r3, #0]
 801539e:	2200      	movs	r2, #0
 80153a0:	705a      	strb	r2, [r3, #1]
 80153a2:	2200      	movs	r2, #0
 80153a4:	709a      	strb	r2, [r3, #2]
 80153a6:	2200      	movs	r2, #0
 80153a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80153aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ac:	8afa      	ldrh	r2, [r7, #22]
 80153ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80153b0:	8afa      	ldrh	r2, [r7, #22]
 80153b2:	8b7b      	ldrh	r3, [r7, #26]
 80153b4:	4413      	add	r3, r2
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80153bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153be:	88db      	ldrh	r3, [r3, #6]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	8afa      	ldrh	r2, [r7, #22]
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d902      	bls.n	80153ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80153c8:	f04f 33ff 	mov.w	r3, #4294967295
 80153cc:	e106      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	627b      	str	r3, [r7, #36]	; 0x24
 80153d4:	e068      	b.n	80154a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80153dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153de:	889b      	ldrh	r3, [r3, #4]
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	889b      	ldrh	r3, [r3, #4]
 80153e6:	b29b      	uxth	r3, r3
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d235      	bcs.n	8015458 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80153ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80153f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d020      	beq.n	801543a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80153f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fa:	889b      	ldrh	r3, [r3, #4]
 80153fc:	b29a      	uxth	r2, r3
 80153fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015400:	88db      	ldrh	r3, [r3, #6]
 8015402:	b29b      	uxth	r3, r3
 8015404:	429a      	cmp	r2, r3
 8015406:	d307      	bcc.n	8015418 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540a:	88db      	ldrh	r3, [r3, #6]
 801540c:	b29a      	uxth	r2, r3
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	889b      	ldrh	r3, [r3, #4]
 8015412:	b29b      	uxth	r3, r3
 8015414:	429a      	cmp	r2, r3
 8015416:	d902      	bls.n	801541e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015418:	f04f 33ff 	mov.w	r3, #4294967295
 801541c:	e0de      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015420:	68ba      	ldr	r2, [r7, #8]
 8015422:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015426:	88db      	ldrh	r3, [r3, #6]
 8015428:	b29a      	uxth	r2, r3
 801542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801542c:	889b      	ldrh	r3, [r3, #4]
 801542e:	b29b      	uxth	r3, r3
 8015430:	429a      	cmp	r2, r3
 8015432:	d03d      	beq.n	80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015434:	2300      	movs	r3, #0
 8015436:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015438:	e03a      	b.n	80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543c:	88db      	ldrh	r3, [r3, #6]
 801543e:	b29a      	uxth	r2, r3
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	889b      	ldrh	r3, [r3, #4]
 8015444:	b29b      	uxth	r3, r3
 8015446:	429a      	cmp	r2, r3
 8015448:	d902      	bls.n	8015450 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801544a:	f04f 33ff 	mov.w	r3, #4294967295
 801544e:	e0c5      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	68ba      	ldr	r2, [r7, #8]
 8015454:	605a      	str	r2, [r3, #4]
      break;
 8015456:	e02b      	b.n	80154b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545a:	889b      	ldrh	r3, [r3, #4]
 801545c:	b29a      	uxth	r2, r3
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	889b      	ldrh	r3, [r3, #4]
 8015462:	b29b      	uxth	r3, r3
 8015464:	429a      	cmp	r2, r3
 8015466:	d102      	bne.n	801546e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015468:	f04f 33ff 	mov.w	r3, #4294967295
 801546c:	e0b6      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015470:	889b      	ldrh	r3, [r3, #4]
 8015472:	b29a      	uxth	r2, r3
 8015474:	693b      	ldr	r3, [r7, #16]
 8015476:	88db      	ldrh	r3, [r3, #6]
 8015478:	b29b      	uxth	r3, r3
 801547a:	429a      	cmp	r2, r3
 801547c:	d202      	bcs.n	8015484 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801547e:	f04f 33ff 	mov.w	r3, #4294967295
 8015482:	e0ab      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015486:	2b00      	cmp	r3, #0
 8015488:	d009      	beq.n	801549e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801548c:	88db      	ldrh	r3, [r3, #6]
 801548e:	b29a      	uxth	r2, r3
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	889b      	ldrh	r3, [r3, #4]
 8015494:	b29b      	uxth	r3, r3
 8015496:	429a      	cmp	r2, r3
 8015498:	d001      	beq.n	801549e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801549a:	2300      	movs	r3, #0
 801549c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801549e:	693b      	ldr	r3, [r7, #16]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80154a4:	693b      	ldr	r3, [r7, #16]
 80154a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80154a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d193      	bne.n	80153d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80154ae:	e000      	b.n	80154b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80154b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80154b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d12d      	bne.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80154b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d01c      	beq.n	80154f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80154be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154c0:	88db      	ldrh	r3, [r3, #6]
 80154c2:	b29a      	uxth	r2, r3
 80154c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154c6:	889b      	ldrh	r3, [r3, #4]
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d906      	bls.n	80154dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80154ce:	4b45      	ldr	r3, [pc, #276]	; (80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80154d0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80154d4:	4944      	ldr	r1, [pc, #272]	; (80155e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80154d6:	4845      	ldr	r0, [pc, #276]	; (80155ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80154d8:	f000 fdd4 	bl	8016084 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80154dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80154e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154e4:	88db      	ldrh	r3, [r3, #6]
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ea:	889b      	ldrh	r3, [r3, #4]
 80154ec:	b29b      	uxth	r3, r3
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d010      	beq.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80154f2:	2300      	movs	r3, #0
 80154f4:	623b      	str	r3, [r7, #32]
 80154f6:	e00d      	b.n	8015514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d006      	beq.n	801550e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015500:	4b38      	ldr	r3, [pc, #224]	; (80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015502:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015506:	493a      	ldr	r1, [pc, #232]	; (80155f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015508:	4838      	ldr	r0, [pc, #224]	; (80155ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801550a:	f000 fdbb 	bl	8016084 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	68ba      	ldr	r2, [r7, #8]
 8015512:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d105      	bne.n	8015526 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	7f9b      	ldrb	r3, [r3, #30]
 801551e:	f003 0301 	and.w	r3, r3, #1
 8015522:	2b00      	cmp	r3, #0
 8015524:	d059      	beq.n	80155da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015526:	6a3b      	ldr	r3, [r7, #32]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d04f      	beq.n	80155cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d006      	beq.n	8015542 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	685b      	ldr	r3, [r3, #4]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	889b      	ldrh	r3, [r3, #4]
 801553c:	b29b      	uxth	r3, r3
 801553e:	2b00      	cmp	r3, #0
 8015540:	d002      	beq.n	8015548 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015542:	2300      	movs	r3, #0
 8015544:	623b      	str	r3, [r7, #32]
 8015546:	e041      	b.n	80155cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015552:	e012      	b.n	801557a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801555c:	88db      	ldrh	r3, [r3, #6]
 801555e:	b29a      	uxth	r2, r3
 8015560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015562:	889b      	ldrh	r3, [r3, #4]
 8015564:	b29b      	uxth	r3, r3
 8015566:	429a      	cmp	r2, r3
 8015568:	d002      	beq.n	8015570 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801556a:	2300      	movs	r3, #0
 801556c:	623b      	str	r3, [r7, #32]
            break;
 801556e:	e007      	b.n	8015580 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015572:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557c:	2b00      	cmp	r3, #0
 801557e:	d1e9      	bne.n	8015554 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015580:	6a3b      	ldr	r3, [r7, #32]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d022      	beq.n	80155cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	685b      	ldr	r3, [r3, #4]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d106      	bne.n	801559c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801558e:	4b15      	ldr	r3, [pc, #84]	; (80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015590:	f240 12df 	movw	r2, #479	; 0x1df
 8015594:	4917      	ldr	r1, [pc, #92]	; (80155f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015596:	4815      	ldr	r0, [pc, #84]	; (80155ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015598:	f000 fd74 	bl	8016084 <iprintf>
          LWIP_ASSERT("sanity check",
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d106      	bne.n	80155b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80155a8:	4b0e      	ldr	r3, [pc, #56]	; (80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80155aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80155ae:	4911      	ldr	r1, [pc, #68]	; (80155f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80155b0:	480e      	ldr	r0, [pc, #56]	; (80155ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80155b2:	f000 fd67 	bl	8016084 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80155b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d006      	beq.n	80155cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80155be:	4b09      	ldr	r3, [pc, #36]	; (80155e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80155c0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80155c4:	490c      	ldr	r1, [pc, #48]	; (80155f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80155c6:	4809      	ldr	r0, [pc, #36]	; (80155ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80155c8:	f000 fd5c 	bl	8016084 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80155cc:	6a3b      	ldr	r3, [r7, #32]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	bf14      	ite	ne
 80155d2:	2301      	movne	r3, #1
 80155d4:	2300      	moveq	r3, #0
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	e000      	b.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80155da:	2300      	movs	r3, #0
}
 80155dc:	4618      	mov	r0, r3
 80155de:	3730      	adds	r7, #48	; 0x30
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	08019e8c 	.word	0x08019e8c
 80155e8:	08019f70 	.word	0x08019f70
 80155ec:	08019ed4 	.word	0x08019ed4
 80155f0:	08019f90 	.word	0x08019f90
 80155f4:	08019fc8 	.word	0x08019fc8
 80155f8:	08019fd8 	.word	0x08019fd8

080155fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b08e      	sub	sp, #56	; 0x38
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	f003 030f 	and.w	r3, r3, #15
 8015612:	b2db      	uxtb	r3, r3
 8015614:	009b      	lsls	r3, r3, #2
 8015616:	b2db      	uxtb	r3, r3
 8015618:	2b14      	cmp	r3, #20
 801561a:	f040 8167 	bne.w	80158ec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015620:	88db      	ldrh	r3, [r3, #6]
 8015622:	b29b      	uxth	r3, r3
 8015624:	4618      	mov	r0, r3
 8015626:	f7f4 fbfb 	bl	8009e20 <lwip_htons>
 801562a:	4603      	mov	r3, r0
 801562c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015630:	b29b      	uxth	r3, r3
 8015632:	00db      	lsls	r3, r3, #3
 8015634:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015638:	885b      	ldrh	r3, [r3, #2]
 801563a:	b29b      	uxth	r3, r3
 801563c:	4618      	mov	r0, r3
 801563e:	f7f4 fbef 	bl	8009e20 <lwip_htons>
 8015642:	4603      	mov	r3, r0
 8015644:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f003 030f 	and.w	r3, r3, #15
 801564e:	b2db      	uxtb	r3, r3
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801565a:	b29b      	uxth	r3, r3
 801565c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801565e:	429a      	cmp	r2, r3
 8015660:	f0c0 8146 	bcc.w	80158f0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015668:	b29b      	uxth	r3, r3
 801566a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801566c:	1ad3      	subs	r3, r2, r3
 801566e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f7f6 f81b 	bl	800b6ac <pbuf_clen>
 8015676:	4603      	mov	r3, r0
 8015678:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801567a:	4b9f      	ldr	r3, [pc, #636]	; (80158f8 <ip4_reass+0x2fc>)
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	461a      	mov	r2, r3
 8015680:	8c3b      	ldrh	r3, [r7, #32]
 8015682:	4413      	add	r3, r2
 8015684:	2b0a      	cmp	r3, #10
 8015686:	dd10      	ble.n	80156aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015688:	8c3b      	ldrh	r3, [r7, #32]
 801568a:	4619      	mov	r1, r3
 801568c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801568e:	f7ff fd81 	bl	8015194 <ip_reass_remove_oldest_datagram>
 8015692:	4603      	mov	r3, r0
 8015694:	2b00      	cmp	r3, #0
 8015696:	f000 812d 	beq.w	80158f4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801569a:	4b97      	ldr	r3, [pc, #604]	; (80158f8 <ip4_reass+0x2fc>)
 801569c:	881b      	ldrh	r3, [r3, #0]
 801569e:	461a      	mov	r2, r3
 80156a0:	8c3b      	ldrh	r3, [r7, #32]
 80156a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80156a4:	2b0a      	cmp	r3, #10
 80156a6:	f300 8125 	bgt.w	80158f4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80156aa:	4b94      	ldr	r3, [pc, #592]	; (80158fc <ip4_reass+0x300>)
 80156ac:	681b      	ldr	r3, [r3, #0]
 80156ae:	633b      	str	r3, [r7, #48]	; 0x30
 80156b0:	e015      	b.n	80156de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80156b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b4:	695a      	ldr	r2, [r3, #20]
 80156b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b8:	68db      	ldr	r3, [r3, #12]
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d10c      	bne.n	80156d8 <ip4_reass+0xdc>
 80156be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c0:	699a      	ldr	r2, [r3, #24]
 80156c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c4:	691b      	ldr	r3, [r3, #16]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d106      	bne.n	80156d8 <ip4_reass+0xdc>
 80156ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156cc:	899a      	ldrh	r2, [r3, #12]
 80156ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d0:	889b      	ldrh	r3, [r3, #4]
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d006      	beq.n	80156e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80156d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	633b      	str	r3, [r7, #48]	; 0x30
 80156de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d1e6      	bne.n	80156b2 <ip4_reass+0xb6>
 80156e4:	e000      	b.n	80156e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80156e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80156e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d109      	bne.n	8015702 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80156ee:	8c3b      	ldrh	r3, [r7, #32]
 80156f0:	4619      	mov	r1, r3
 80156f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156f4:	f7ff fdb0 	bl	8015258 <ip_reass_enqueue_new_datagram>
 80156f8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80156fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d11c      	bne.n	801573a <ip4_reass+0x13e>
      goto nullreturn;
 8015700:	e109      	b.n	8015916 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015704:	88db      	ldrh	r3, [r3, #6]
 8015706:	b29b      	uxth	r3, r3
 8015708:	4618      	mov	r0, r3
 801570a:	f7f4 fb89 	bl	8009e20 <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015714:	2b00      	cmp	r3, #0
 8015716:	d110      	bne.n	801573a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571a:	89db      	ldrh	r3, [r3, #14]
 801571c:	4618      	mov	r0, r3
 801571e:	f7f4 fb7f 	bl	8009e20 <lwip_htons>
 8015722:	4603      	mov	r3, r0
 8015724:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015728:	2b00      	cmp	r3, #0
 801572a:	d006      	beq.n	801573a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572e:	3308      	adds	r3, #8
 8015730:	2214      	movs	r2, #20
 8015732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015734:	4618      	mov	r0, r3
 8015736:	f000 fc8f 	bl	8016058 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573c:	88db      	ldrh	r3, [r3, #6]
 801573e:	b29b      	uxth	r3, r3
 8015740:	f003 0320 	and.w	r3, r3, #32
 8015744:	2b00      	cmp	r3, #0
 8015746:	bf0c      	ite	eq
 8015748:	2301      	moveq	r3, #1
 801574a:	2300      	movne	r3, #0
 801574c:	b2db      	uxtb	r3, r3
 801574e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d00e      	beq.n	8015774 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015756:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801575a:	4413      	add	r3, r2
 801575c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801575e:	8b7a      	ldrh	r2, [r7, #26]
 8015760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015762:	429a      	cmp	r2, r3
 8015764:	f0c0 80a0 	bcc.w	80158a8 <ip4_reass+0x2ac>
 8015768:	8b7b      	ldrh	r3, [r7, #26]
 801576a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801576e:	4293      	cmp	r3, r2
 8015770:	f200 809a 	bhi.w	80158a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015774:	69fa      	ldr	r2, [r7, #28]
 8015776:	6879      	ldr	r1, [r7, #4]
 8015778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801577a:	f7ff fdd5 	bl	8015328 <ip_reass_chain_frag_into_datagram_and_validate>
 801577e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015786:	f000 8091 	beq.w	80158ac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801578a:	4b5b      	ldr	r3, [pc, #364]	; (80158f8 <ip4_reass+0x2fc>)
 801578c:	881a      	ldrh	r2, [r3, #0]
 801578e:	8c3b      	ldrh	r3, [r7, #32]
 8015790:	4413      	add	r3, r2
 8015792:	b29a      	uxth	r2, r3
 8015794:	4b58      	ldr	r3, [pc, #352]	; (80158f8 <ip4_reass+0x2fc>)
 8015796:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d00d      	beq.n	80157ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801579e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80157a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80157a2:	4413      	add	r3, r2
 80157a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80157a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157a8:	8a7a      	ldrh	r2, [r7, #18]
 80157aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80157ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ae:	7f9b      	ldrb	r3, [r3, #30]
 80157b0:	f043 0301 	orr.w	r3, r3, #1
 80157b4:	b2da      	uxtb	r2, r3
 80157b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80157ba:	697b      	ldr	r3, [r7, #20]
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d171      	bne.n	80158a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80157c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157c2:	8b9b      	ldrh	r3, [r3, #28]
 80157c4:	3314      	adds	r3, #20
 80157c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80157c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80157d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	685b      	ldr	r3, [r3, #4]
 80157d8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80157da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157dc:	3308      	adds	r3, #8
 80157de:	2214      	movs	r2, #20
 80157e0:	4619      	mov	r1, r3
 80157e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157e4:	f000 fc38 	bl	8016058 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80157e8:	8a3b      	ldrh	r3, [r7, #16]
 80157ea:	4618      	mov	r0, r3
 80157ec:	f7f4 fb18 	bl	8009e20 <lwip_htons>
 80157f0:	4603      	mov	r3, r0
 80157f2:	461a      	mov	r2, r3
 80157f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80157f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fa:	2200      	movs	r2, #0
 80157fc:	719a      	strb	r2, [r3, #6]
 80157fe:	2200      	movs	r2, #0
 8015800:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015804:	2200      	movs	r2, #0
 8015806:	729a      	strb	r2, [r3, #10]
 8015808:	2200      	movs	r2, #0
 801580a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580e:	685b      	ldr	r3, [r3, #4]
 8015810:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015812:	e00d      	b.n	8015830 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801581a:	2114      	movs	r1, #20
 801581c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801581e:	f7f5 fe31 	bl	800b484 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015822:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015824:	6878      	ldr	r0, [r7, #4]
 8015826:	f7f5 ff81 	bl	800b72c <pbuf_cat>
      r = iprh->next_pbuf;
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015832:	2b00      	cmp	r3, #0
 8015834:	d1ee      	bne.n	8015814 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015836:	4b31      	ldr	r3, [pc, #196]	; (80158fc <ip4_reass+0x300>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801583c:	429a      	cmp	r2, r3
 801583e:	d102      	bne.n	8015846 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015840:	2300      	movs	r3, #0
 8015842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015844:	e010      	b.n	8015868 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015846:	4b2d      	ldr	r3, [pc, #180]	; (80158fc <ip4_reass+0x300>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801584c:	e007      	b.n	801585e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015854:	429a      	cmp	r2, r3
 8015856:	d006      	beq.n	8015866 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015860:	2b00      	cmp	r3, #0
 8015862:	d1f4      	bne.n	801584e <ip4_reass+0x252>
 8015864:	e000      	b.n	8015868 <ip4_reass+0x26c>
          break;
 8015866:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015868:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801586a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801586c:	f7ff fd2e 	bl	80152cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f7f5 ff1b 	bl	800b6ac <pbuf_clen>
 8015876:	4603      	mov	r3, r0
 8015878:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801587a:	4b1f      	ldr	r3, [pc, #124]	; (80158f8 <ip4_reass+0x2fc>)
 801587c:	881b      	ldrh	r3, [r3, #0]
 801587e:	8c3a      	ldrh	r2, [r7, #32]
 8015880:	429a      	cmp	r2, r3
 8015882:	d906      	bls.n	8015892 <ip4_reass+0x296>
 8015884:	4b1e      	ldr	r3, [pc, #120]	; (8015900 <ip4_reass+0x304>)
 8015886:	f240 229b 	movw	r2, #667	; 0x29b
 801588a:	491e      	ldr	r1, [pc, #120]	; (8015904 <ip4_reass+0x308>)
 801588c:	481e      	ldr	r0, [pc, #120]	; (8015908 <ip4_reass+0x30c>)
 801588e:	f000 fbf9 	bl	8016084 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015892:	4b19      	ldr	r3, [pc, #100]	; (80158f8 <ip4_reass+0x2fc>)
 8015894:	881a      	ldrh	r2, [r3, #0]
 8015896:	8c3b      	ldrh	r3, [r7, #32]
 8015898:	1ad3      	subs	r3, r2, r3
 801589a:	b29a      	uxth	r2, r3
 801589c:	4b16      	ldr	r3, [pc, #88]	; (80158f8 <ip4_reass+0x2fc>)
 801589e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	e03c      	b.n	801591e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80158a4:	2300      	movs	r3, #0
 80158a6:	e03a      	b.n	801591e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80158a8:	bf00      	nop
 80158aa:	e000      	b.n	80158ae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80158ac:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80158ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d106      	bne.n	80158c2 <ip4_reass+0x2c6>
 80158b4:	4b12      	ldr	r3, [pc, #72]	; (8015900 <ip4_reass+0x304>)
 80158b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80158ba:	4914      	ldr	r1, [pc, #80]	; (801590c <ip4_reass+0x310>)
 80158bc:	4812      	ldr	r0, [pc, #72]	; (8015908 <ip4_reass+0x30c>)
 80158be:	f000 fbe1 	bl	8016084 <iprintf>
  if (ipr->p == NULL) {
 80158c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d124      	bne.n	8015914 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80158ca:	4b0c      	ldr	r3, [pc, #48]	; (80158fc <ip4_reass+0x300>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d006      	beq.n	80158e2 <ip4_reass+0x2e6>
 80158d4:	4b0a      	ldr	r3, [pc, #40]	; (8015900 <ip4_reass+0x304>)
 80158d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80158da:	490d      	ldr	r1, [pc, #52]	; (8015910 <ip4_reass+0x314>)
 80158dc:	480a      	ldr	r0, [pc, #40]	; (8015908 <ip4_reass+0x30c>)
 80158de:	f000 fbd1 	bl	8016084 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80158e2:	2100      	movs	r1, #0
 80158e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158e6:	f7ff fcf1 	bl	80152cc <ip_reass_dequeue_datagram>
 80158ea:	e014      	b.n	8015916 <ip4_reass+0x31a>
    goto nullreturn;
 80158ec:	bf00      	nop
 80158ee:	e012      	b.n	8015916 <ip4_reass+0x31a>
    goto nullreturn;
 80158f0:	bf00      	nop
 80158f2:	e010      	b.n	8015916 <ip4_reass+0x31a>
      goto nullreturn;
 80158f4:	bf00      	nop
 80158f6:	e00e      	b.n	8015916 <ip4_reass+0x31a>
 80158f8:	20004b5c 	.word	0x20004b5c
 80158fc:	20004b58 	.word	0x20004b58
 8015900:	08019e8c 	.word	0x08019e8c
 8015904:	08019ffc 	.word	0x08019ffc
 8015908:	08019ed4 	.word	0x08019ed4
 801590c:	0801a018 	.word	0x0801a018
 8015910:	0801a024 	.word	0x0801a024
  }

nullreturn:
 8015914:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7f5 fe3a 	bl	800b590 <pbuf_free>
  return NULL;
 801591c:	2300      	movs	r3, #0
}
 801591e:	4618      	mov	r0, r3
 8015920:	3738      	adds	r7, #56	; 0x38
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop

08015928 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801592c:	2005      	movs	r0, #5
 801592e:	f7f4 ff2d 	bl	800a78c <memp_malloc>
 8015932:	4603      	mov	r3, r0
}
 8015934:	4618      	mov	r0, r3
 8015936:	bd80      	pop	{r7, pc}

08015938 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d106      	bne.n	8015954 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015946:	4b07      	ldr	r3, [pc, #28]	; (8015964 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015948:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801594c:	4906      	ldr	r1, [pc, #24]	; (8015968 <ip_frag_free_pbuf_custom_ref+0x30>)
 801594e:	4807      	ldr	r0, [pc, #28]	; (801596c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015950:	f000 fb98 	bl	8016084 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015954:	6879      	ldr	r1, [r7, #4]
 8015956:	2005      	movs	r0, #5
 8015958:	f7f4 ff6a 	bl	800a830 <memp_free>
}
 801595c:	bf00      	nop
 801595e:	3708      	adds	r7, #8
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	08019e8c 	.word	0x08019e8c
 8015968:	0801a044 	.word	0x0801a044
 801596c:	08019ed4 	.word	0x08019ed4

08015970 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b084      	sub	sp, #16
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d106      	bne.n	8015990 <ipfrag_free_pbuf_custom+0x20>
 8015982:	4b11      	ldr	r3, [pc, #68]	; (80159c8 <ipfrag_free_pbuf_custom+0x58>)
 8015984:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015988:	4910      	ldr	r1, [pc, #64]	; (80159cc <ipfrag_free_pbuf_custom+0x5c>)
 801598a:	4811      	ldr	r0, [pc, #68]	; (80159d0 <ipfrag_free_pbuf_custom+0x60>)
 801598c:	f000 fb7a 	bl	8016084 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015990:	68fa      	ldr	r2, [r7, #12]
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	429a      	cmp	r2, r3
 8015996:	d006      	beq.n	80159a6 <ipfrag_free_pbuf_custom+0x36>
 8015998:	4b0b      	ldr	r3, [pc, #44]	; (80159c8 <ipfrag_free_pbuf_custom+0x58>)
 801599a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801599e:	490d      	ldr	r1, [pc, #52]	; (80159d4 <ipfrag_free_pbuf_custom+0x64>)
 80159a0:	480b      	ldr	r0, [pc, #44]	; (80159d0 <ipfrag_free_pbuf_custom+0x60>)
 80159a2:	f000 fb6f 	bl	8016084 <iprintf>
  if (pcr->original != NULL) {
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	695b      	ldr	r3, [r3, #20]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d004      	beq.n	80159b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	695b      	ldr	r3, [r3, #20]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7f5 fdec 	bl	800b590 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f7ff ffbd 	bl	8015938 <ip_frag_free_pbuf_custom_ref>
}
 80159be:	bf00      	nop
 80159c0:	3710      	adds	r7, #16
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	08019e8c 	.word	0x08019e8c
 80159cc:	0801a050 	.word	0x0801a050
 80159d0:	08019ed4 	.word	0x08019ed4
 80159d4:	0801a05c 	.word	0x0801a05c

080159d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b094      	sub	sp, #80	; 0x50
 80159dc:	af02      	add	r7, sp, #8
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80159e4:	2300      	movs	r3, #0
 80159e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80159ee:	3b14      	subs	r3, #20
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	da00      	bge.n	80159f6 <ip4_frag+0x1e>
 80159f4:	3307      	adds	r3, #7
 80159f6:	10db      	asrs	r3, r3, #3
 80159f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80159fa:	2314      	movs	r3, #20
 80159fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	685b      	ldr	r3, [r3, #4]
 8015a02:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a06:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	f003 030f 	and.w	r3, r3, #15
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	009b      	lsls	r3, r3, #2
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	2b14      	cmp	r3, #20
 8015a18:	d002      	beq.n	8015a20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015a1a:	f06f 0305 	mvn.w	r3, #5
 8015a1e:	e110      	b.n	8015c42 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	895b      	ldrh	r3, [r3, #10]
 8015a24:	2b13      	cmp	r3, #19
 8015a26:	d809      	bhi.n	8015a3c <ip4_frag+0x64>
 8015a28:	4b88      	ldr	r3, [pc, #544]	; (8015c4c <ip4_frag+0x274>)
 8015a2a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015a2e:	4988      	ldr	r1, [pc, #544]	; (8015c50 <ip4_frag+0x278>)
 8015a30:	4888      	ldr	r0, [pc, #544]	; (8015c54 <ip4_frag+0x27c>)
 8015a32:	f000 fb27 	bl	8016084 <iprintf>
 8015a36:	f06f 0305 	mvn.w	r3, #5
 8015a3a:	e102      	b.n	8015c42 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a3e:	88db      	ldrh	r3, [r3, #6]
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f4 f9ec 	bl	8009e20 <lwip_htons>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015a4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015a56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	891b      	ldrh	r3, [r3, #8]
 8015a62:	3b14      	subs	r3, #20
 8015a64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015a68:	e0e1      	b.n	8015c2e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015a6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a6c:	00db      	lsls	r3, r3, #3
 8015a6e:	b29b      	uxth	r3, r3
 8015a70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015a74:	4293      	cmp	r3, r2
 8015a76:	bf28      	it	cs
 8015a78:	4613      	movcs	r3, r2
 8015a7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015a7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a80:	2114      	movs	r1, #20
 8015a82:	200e      	movs	r0, #14
 8015a84:	f7f5 faa0 	bl	800afc8 <pbuf_alloc>
 8015a88:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f000 80d5 	beq.w	8015c3c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a94:	895b      	ldrh	r3, [r3, #10]
 8015a96:	2b13      	cmp	r3, #19
 8015a98:	d806      	bhi.n	8015aa8 <ip4_frag+0xd0>
 8015a9a:	4b6c      	ldr	r3, [pc, #432]	; (8015c4c <ip4_frag+0x274>)
 8015a9c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015aa0:	496d      	ldr	r1, [pc, #436]	; (8015c58 <ip4_frag+0x280>)
 8015aa2:	486c      	ldr	r0, [pc, #432]	; (8015c54 <ip4_frag+0x27c>)
 8015aa4:	f000 faee 	bl	8016084 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	2214      	movs	r2, #20
 8015aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f000 fad1 	bl	8016058 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab8:	685b      	ldr	r3, [r3, #4]
 8015aba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015abc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015abe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015ac2:	e064      	b.n	8015b8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	895a      	ldrh	r2, [r3, #10]
 8015ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015aca:	1ad3      	subs	r3, r2, r3
 8015acc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	895b      	ldrh	r3, [r3, #10]
 8015ad2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d906      	bls.n	8015ae6 <ip4_frag+0x10e>
 8015ad8:	4b5c      	ldr	r3, [pc, #368]	; (8015c4c <ip4_frag+0x274>)
 8015ada:	f240 322d 	movw	r2, #813	; 0x32d
 8015ade:	495f      	ldr	r1, [pc, #380]	; (8015c5c <ip4_frag+0x284>)
 8015ae0:	485c      	ldr	r0, [pc, #368]	; (8015c54 <ip4_frag+0x27c>)
 8015ae2:	f000 facf 	bl	8016084 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015ae6:	8bfa      	ldrh	r2, [r7, #30]
 8015ae8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015aec:	4293      	cmp	r3, r2
 8015aee:	bf28      	it	cs
 8015af0:	4613      	movcs	r3, r2
 8015af2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015af6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d105      	bne.n	8015b0a <ip4_frag+0x132>
        poff = 0;
 8015afe:	2300      	movs	r3, #0
 8015b00:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	60fb      	str	r3, [r7, #12]
        continue;
 8015b08:	e041      	b.n	8015b8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015b0a:	f7ff ff0d 	bl	8015928 <ip_frag_alloc_pbuf_custom_ref>
 8015b0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d103      	bne.n	8015b1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b18:	f7f5 fd3a 	bl	800b590 <pbuf_free>
        goto memerr;
 8015b1c:	e08f      	b.n	8015c3e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015b1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015b24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015b26:	4413      	add	r3, r2
 8015b28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015b2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015b30:	9201      	str	r2, [sp, #4]
 8015b32:	9300      	str	r3, [sp, #0]
 8015b34:	4603      	mov	r3, r0
 8015b36:	2241      	movs	r2, #65	; 0x41
 8015b38:	2000      	movs	r0, #0
 8015b3a:	f7f5 fb6f 	bl	800b21c <pbuf_alloced_custom>
 8015b3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d106      	bne.n	8015b54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015b46:	69b8      	ldr	r0, [r7, #24]
 8015b48:	f7ff fef6 	bl	8015938 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b4e:	f7f5 fd1f 	bl	800b590 <pbuf_free>
        goto memerr;
 8015b52:	e074      	b.n	8015c3e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f7f5 fdc1 	bl	800b6dc <pbuf_ref>
      pcr->original = p;
 8015b5a:	69bb      	ldr	r3, [r7, #24]
 8015b5c:	68fa      	ldr	r2, [r7, #12]
 8015b5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015b60:	69bb      	ldr	r3, [r7, #24]
 8015b62:	4a3f      	ldr	r2, [pc, #252]	; (8015c60 <ip4_frag+0x288>)
 8015b64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015b66:	6979      	ldr	r1, [r7, #20]
 8015b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b6a:	f7f5 fddf 	bl	800b72c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015b6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015b72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015b76:	1ad3      	subs	r3, r2, r3
 8015b78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015b7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d004      	beq.n	8015b8e <ip4_frag+0x1b6>
        poff = 0;
 8015b84:	2300      	movs	r3, #0
 8015b86:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015b8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d196      	bne.n	8015ac4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015b96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015b98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015b9c:	4413      	add	r3, r2
 8015b9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ba4:	f1a3 0213 	sub.w	r2, r3, #19
 8015ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bac:	429a      	cmp	r2, r3
 8015bae:	bfcc      	ite	gt
 8015bb0:	2301      	movgt	r3, #1
 8015bb2:	2300      	movle	r3, #0
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015bb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bc0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015bc2:	6a3b      	ldr	r3, [r7, #32]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d002      	beq.n	8015bce <ip4_frag+0x1f6>
 8015bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d003      	beq.n	8015bd6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015bd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015bd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7f4 f921 	bl	8009e20 <lwip_htons>
 8015bde:	4603      	mov	r3, r0
 8015be0:	461a      	mov	r2, r3
 8015be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015be8:	3314      	adds	r3, #20
 8015bea:	b29b      	uxth	r3, r3
 8015bec:	4618      	mov	r0, r3
 8015bee:	f7f4 f917 	bl	8009e20 <lwip_htons>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	461a      	mov	r2, r3
 8015bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bf8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	729a      	strb	r2, [r3, #10]
 8015c00:	2200      	movs	r2, #0
 8015c02:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	695b      	ldr	r3, [r3, #20]
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015c0c:	68b8      	ldr	r0, [r7, #8]
 8015c0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015c10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c12:	f7f5 fcbd 	bl	800b590 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015c16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015c22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015c26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015c28:	4413      	add	r3, r2
 8015c2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015c2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f47f af19 	bne.w	8015a6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015c38:	2300      	movs	r3, #0
 8015c3a:	e002      	b.n	8015c42 <ip4_frag+0x26a>
      goto memerr;
 8015c3c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015c42:	4618      	mov	r0, r3
 8015c44:	3748      	adds	r7, #72	; 0x48
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	08019e8c 	.word	0x08019e8c
 8015c50:	0801a068 	.word	0x0801a068
 8015c54:	08019ed4 	.word	0x08019ed4
 8015c58:	0801a084 	.word	0x0801a084
 8015c5c:	0801a0a4 	.word	0x0801a0a4
 8015c60:	08015971 	.word	0x08015971

08015c64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b086      	sub	sp, #24
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015c6e:	230e      	movs	r3, #14
 8015c70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	895b      	ldrh	r3, [r3, #10]
 8015c76:	2b0e      	cmp	r3, #14
 8015c78:	d96e      	bls.n	8015d58 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	7bdb      	ldrb	r3, [r3, #15]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d106      	bne.n	8015c90 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015c88:	3301      	adds	r3, #1
 8015c8a:	b2da      	uxtb	r2, r3
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	7b1a      	ldrb	r2, [r3, #12]
 8015c9a:	7b5b      	ldrb	r3, [r3, #13]
 8015c9c:	021b      	lsls	r3, r3, #8
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	781b      	ldrb	r3, [r3, #0]
 8015ca6:	f003 0301 	and.w	r3, r3, #1
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d023      	beq.n	8015cf6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d10f      	bne.n	8015cd6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	785b      	ldrb	r3, [r3, #1]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d11b      	bne.n	8015cf6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015cc2:	2b5e      	cmp	r3, #94	; 0x5e
 8015cc4:	d117      	bne.n	8015cf6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	7b5b      	ldrb	r3, [r3, #13]
 8015cca:	f043 0310 	orr.w	r3, r3, #16
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	735a      	strb	r2, [r3, #13]
 8015cd4:	e00f      	b.n	8015cf6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	2206      	movs	r2, #6
 8015cda:	4928      	ldr	r1, [pc, #160]	; (8015d7c <ethernet_input+0x118>)
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f000 f9ad 	bl	801603c <memcmp>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d106      	bne.n	8015cf6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	7b5b      	ldrb	r3, [r3, #13]
 8015cec:	f043 0308 	orr.w	r3, r3, #8
 8015cf0:	b2da      	uxtb	r2, r3
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015cf6:	89fb      	ldrh	r3, [r7, #14]
 8015cf8:	2b08      	cmp	r3, #8
 8015cfa:	d003      	beq.n	8015d04 <ethernet_input+0xa0>
 8015cfc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015d00:	d014      	beq.n	8015d2c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015d02:	e032      	b.n	8015d6a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d0a:	f003 0308 	and.w	r3, r3, #8
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d024      	beq.n	8015d5c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015d12:	8afb      	ldrh	r3, [r7, #22]
 8015d14:	4619      	mov	r1, r3
 8015d16:	6878      	ldr	r0, [r7, #4]
 8015d18:	f7f5 fbb4 	bl	800b484 <pbuf_remove_header>
 8015d1c:	4603      	mov	r3, r0
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d11e      	bne.n	8015d60 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015d22:	6839      	ldr	r1, [r7, #0]
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f7fe fe77 	bl	8014a18 <ip4_input>
      break;
 8015d2a:	e013      	b.n	8015d54 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d32:	f003 0308 	and.w	r3, r3, #8
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d014      	beq.n	8015d64 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015d3a:	8afb      	ldrh	r3, [r7, #22]
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f7f5 fba0 	bl	800b484 <pbuf_remove_header>
 8015d44:	4603      	mov	r3, r0
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d10e      	bne.n	8015d68 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015d4a:	6839      	ldr	r1, [r7, #0]
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f7fe f813 	bl	8013d78 <etharp_input>
      break;
 8015d52:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015d54:	2300      	movs	r3, #0
 8015d56:	e00c      	b.n	8015d72 <ethernet_input+0x10e>
    goto free_and_return;
 8015d58:	bf00      	nop
 8015d5a:	e006      	b.n	8015d6a <ethernet_input+0x106>
        goto free_and_return;
 8015d5c:	bf00      	nop
 8015d5e:	e004      	b.n	8015d6a <ethernet_input+0x106>
        goto free_and_return;
 8015d60:	bf00      	nop
 8015d62:	e002      	b.n	8015d6a <ethernet_input+0x106>
        goto free_and_return;
 8015d64:	bf00      	nop
 8015d66:	e000      	b.n	8015d6a <ethernet_input+0x106>
        goto free_and_return;
 8015d68:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015d6a:	6878      	ldr	r0, [r7, #4]
 8015d6c:	f7f5 fc10 	bl	800b590 <pbuf_free>
  return ERR_OK;
 8015d70:	2300      	movs	r3, #0
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3718      	adds	r7, #24
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	0801a2ac 	.word	0x0801a2ac

08015d80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b086      	sub	sp, #24
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	607a      	str	r2, [r7, #4]
 8015d8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015d8e:	8c3b      	ldrh	r3, [r7, #32]
 8015d90:	4618      	mov	r0, r3
 8015d92:	f7f4 f845 	bl	8009e20 <lwip_htons>
 8015d96:	4603      	mov	r3, r0
 8015d98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015d9a:	210e      	movs	r1, #14
 8015d9c:	68b8      	ldr	r0, [r7, #8]
 8015d9e:	f7f5 fb61 	bl	800b464 <pbuf_add_header>
 8015da2:	4603      	mov	r3, r0
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d125      	bne.n	8015df4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015da8:	68bb      	ldr	r3, [r7, #8]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	8afa      	ldrh	r2, [r7, #22]
 8015db2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	2206      	movs	r2, #6
 8015db8:	6839      	ldr	r1, [r7, #0]
 8015dba:	4618      	mov	r0, r3
 8015dbc:	f000 f94c 	bl	8016058 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	3306      	adds	r3, #6
 8015dc4:	2206      	movs	r2, #6
 8015dc6:	6879      	ldr	r1, [r7, #4]
 8015dc8:	4618      	mov	r0, r3
 8015dca:	f000 f945 	bl	8016058 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dd4:	2b06      	cmp	r3, #6
 8015dd6:	d006      	beq.n	8015de6 <ethernet_output+0x66>
 8015dd8:	4b0a      	ldr	r3, [pc, #40]	; (8015e04 <ethernet_output+0x84>)
 8015dda:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015dde:	490a      	ldr	r1, [pc, #40]	; (8015e08 <ethernet_output+0x88>)
 8015de0:	480a      	ldr	r0, [pc, #40]	; (8015e0c <ethernet_output+0x8c>)
 8015de2:	f000 f94f 	bl	8016084 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	699b      	ldr	r3, [r3, #24]
 8015dea:	68b9      	ldr	r1, [r7, #8]
 8015dec:	68f8      	ldr	r0, [r7, #12]
 8015dee:	4798      	blx	r3
 8015df0:	4603      	mov	r3, r0
 8015df2:	e002      	b.n	8015dfa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015df4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015df6:	f06f 0301 	mvn.w	r3, #1
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3718      	adds	r7, #24
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	0801a0b4 	.word	0x0801a0b4
 8015e08:	0801a0ec 	.word	0x0801a0ec
 8015e0c:	0801a120 	.word	0x0801a120

08015e10 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015e10:	b580      	push	{r7, lr}
 8015e12:	b082      	sub	sp, #8
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	2104      	movs	r1, #4
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7f0 fb35 	bl	8006490 <osMessageQueueNew>
 8015e26:	4602      	mov	r2, r0
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d102      	bne.n	8015e3a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8015e34:	f04f 33ff 	mov.w	r3, #4294967295
 8015e38:	e000      	b.n	8015e3c <sys_mbox_new+0x2c>

  return ERR_OK;
 8015e3a:	2300      	movs	r3, #0
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3708      	adds	r7, #8
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}

08015e44 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]
 8015e4c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6818      	ldr	r0, [r3, #0]
 8015e52:	4639      	mov	r1, r7
 8015e54:	2300      	movs	r3, #0
 8015e56:	2200      	movs	r2, #0
 8015e58:	f7f0 fba0 	bl	800659c <osMessageQueuePut>
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d102      	bne.n	8015e68 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8015e62:	2300      	movs	r3, #0
 8015e64:	73fb      	strb	r3, [r7, #15]
 8015e66:	e001      	b.n	8015e6c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015e68:	23ff      	movs	r3, #255	; 0xff
 8015e6a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3710      	adds	r7, #16
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b086      	sub	sp, #24
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8015e84:	f7ef ff66 	bl	8005d54 <osKernelGetTickCount>
 8015e88:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d013      	beq.n	8015eb8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	6818      	ldr	r0, [r3, #0]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2200      	movs	r2, #0
 8015e98:	68b9      	ldr	r1, [r7, #8]
 8015e9a:	f7f0 fbf3 	bl	8006684 <osMessageQueueGet>
 8015e9e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d105      	bne.n	8015eb2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8015ea6:	f7ef ff55 	bl	8005d54 <osKernelGetTickCount>
 8015eaa:	4602      	mov	r2, r0
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	1ad3      	subs	r3, r2, r3
 8015eb0:	e00f      	b.n	8015ed2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb6:	e00c      	b.n	8015ed2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	6818      	ldr	r0, [r3, #0]
 8015ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	68b9      	ldr	r1, [r7, #8]
 8015ec4:	f7f0 fbde 	bl	8006684 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8015ec8:	f7ef ff44 	bl	8005d54 <osKernelGetTickCount>
 8015ecc:	4602      	mov	r2, r0
 8015ece:	697b      	ldr	r3, [r7, #20]
 8015ed0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	3718      	adds	r7, #24
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}

08015eda <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015eda:	b480      	push	{r7}
 8015edc:	b083      	sub	sp, #12
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d101      	bne.n	8015eee <sys_mbox_valid+0x14>
    return 0;
 8015eea:	2300      	movs	r3, #0
 8015eec:	e000      	b.n	8015ef0 <sys_mbox_valid+0x16>
  else
    return 1;
 8015eee:	2301      	movs	r3, #1
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	370c      	adds	r7, #12
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8015f00:	2000      	movs	r0, #0
 8015f02:	f7f0 f823 	bl	8005f4c <osMutexNew>
 8015f06:	4603      	mov	r3, r0
 8015f08:	4a01      	ldr	r2, [pc, #4]	; (8015f10 <sys_init+0x14>)
 8015f0a:	6013      	str	r3, [r2, #0]
#endif
}
 8015f0c:	bf00      	nop
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	2000b960 	.word	0x2000b960

08015f14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015f14:	b580      	push	{r7, lr}
 8015f16:	b082      	sub	sp, #8
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8015f1c:	2000      	movs	r0, #0
 8015f1e:	f7f0 f815 	bl	8005f4c <osMutexNew>
 8015f22:	4602      	mov	r2, r0
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d102      	bne.n	8015f36 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015f30:	f04f 33ff 	mov.w	r3, #4294967295
 8015f34:	e000      	b.n	8015f38 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015f36:	2300      	movs	r3, #0
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	3708      	adds	r7, #8
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	bd80      	pop	{r7, pc}

08015f40 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	b082      	sub	sp, #8
 8015f44:	af00      	add	r7, sp, #0
 8015f46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7f0 f895 	bl	8006080 <osMutexAcquire>
#endif
}
 8015f56:	bf00      	nop
 8015f58:	3708      	adds	r7, #8
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}

08015f5e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015f5e:	b580      	push	{r7, lr}
 8015f60:	b082      	sub	sp, #8
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7f0 f8e6 	bl	800613c <osMutexRelease>
}
 8015f70:	bf00      	nop
 8015f72:	3708      	adds	r7, #8
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}

08015f78 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b08e      	sub	sp, #56	; 0x38
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
 8015f84:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8015f86:	f107 0314 	add.w	r3, r7, #20
 8015f8a:	2224      	movs	r2, #36	; 0x24
 8015f8c:	2100      	movs	r1, #0
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f000 f870 	bl	8016074 <memset>
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	617b      	str	r3, [r7, #20]
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015fa0:	f107 0314 	add.w	r3, r7, #20
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	6879      	ldr	r1, [r7, #4]
 8015fa8:	68b8      	ldr	r0, [r7, #8]
 8015faa:	f7ef fefb 	bl	8005da4 <osThreadNew>
 8015fae:	4603      	mov	r3, r0
#endif
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3738      	adds	r7, #56	; 0x38
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015fbc:	4b04      	ldr	r3, [pc, #16]	; (8015fd0 <sys_arch_protect+0x18>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7f0 f85b 	bl	8006080 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8015fca:	2301      	movs	r3, #1
}
 8015fcc:	4618      	mov	r0, r3
 8015fce:	bd80      	pop	{r7, pc}
 8015fd0:	2000b960 	.word	0x2000b960

08015fd4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015fdc:	4b04      	ldr	r3, [pc, #16]	; (8015ff0 <sys_arch_unprotect+0x1c>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7f0 f8ab 	bl	800613c <osMutexRelease>
}
 8015fe6:	bf00      	nop
 8015fe8:	3708      	adds	r7, #8
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}
 8015fee:	bf00      	nop
 8015ff0:	2000b960 	.word	0x2000b960

08015ff4 <__libc_init_array>:
 8015ff4:	b570      	push	{r4, r5, r6, lr}
 8015ff6:	4d0d      	ldr	r5, [pc, #52]	; (801602c <__libc_init_array+0x38>)
 8015ff8:	4c0d      	ldr	r4, [pc, #52]	; (8016030 <__libc_init_array+0x3c>)
 8015ffa:	1b64      	subs	r4, r4, r5
 8015ffc:	10a4      	asrs	r4, r4, #2
 8015ffe:	2600      	movs	r6, #0
 8016000:	42a6      	cmp	r6, r4
 8016002:	d109      	bne.n	8016018 <__libc_init_array+0x24>
 8016004:	4d0b      	ldr	r5, [pc, #44]	; (8016034 <__libc_init_array+0x40>)
 8016006:	4c0c      	ldr	r4, [pc, #48]	; (8016038 <__libc_init_array+0x44>)
 8016008:	f001 f92e 	bl	8017268 <_init>
 801600c:	1b64      	subs	r4, r4, r5
 801600e:	10a4      	asrs	r4, r4, #2
 8016010:	2600      	movs	r6, #0
 8016012:	42a6      	cmp	r6, r4
 8016014:	d105      	bne.n	8016022 <__libc_init_array+0x2e>
 8016016:	bd70      	pop	{r4, r5, r6, pc}
 8016018:	f855 3b04 	ldr.w	r3, [r5], #4
 801601c:	4798      	blx	r3
 801601e:	3601      	adds	r6, #1
 8016020:	e7ee      	b.n	8016000 <__libc_init_array+0xc>
 8016022:	f855 3b04 	ldr.w	r3, [r5], #4
 8016026:	4798      	blx	r3
 8016028:	3601      	adds	r6, #1
 801602a:	e7f2      	b.n	8016012 <__libc_init_array+0x1e>
 801602c:	0801a410 	.word	0x0801a410
 8016030:	0801a410 	.word	0x0801a410
 8016034:	0801a410 	.word	0x0801a410
 8016038:	0801a414 	.word	0x0801a414

0801603c <memcmp>:
 801603c:	b530      	push	{r4, r5, lr}
 801603e:	3901      	subs	r1, #1
 8016040:	2400      	movs	r4, #0
 8016042:	42a2      	cmp	r2, r4
 8016044:	d101      	bne.n	801604a <memcmp+0xe>
 8016046:	2000      	movs	r0, #0
 8016048:	e005      	b.n	8016056 <memcmp+0x1a>
 801604a:	5d03      	ldrb	r3, [r0, r4]
 801604c:	3401      	adds	r4, #1
 801604e:	5d0d      	ldrb	r5, [r1, r4]
 8016050:	42ab      	cmp	r3, r5
 8016052:	d0f6      	beq.n	8016042 <memcmp+0x6>
 8016054:	1b58      	subs	r0, r3, r5
 8016056:	bd30      	pop	{r4, r5, pc}

08016058 <memcpy>:
 8016058:	440a      	add	r2, r1
 801605a:	4291      	cmp	r1, r2
 801605c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016060:	d100      	bne.n	8016064 <memcpy+0xc>
 8016062:	4770      	bx	lr
 8016064:	b510      	push	{r4, lr}
 8016066:	f811 4b01 	ldrb.w	r4, [r1], #1
 801606a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801606e:	4291      	cmp	r1, r2
 8016070:	d1f9      	bne.n	8016066 <memcpy+0xe>
 8016072:	bd10      	pop	{r4, pc}

08016074 <memset>:
 8016074:	4402      	add	r2, r0
 8016076:	4603      	mov	r3, r0
 8016078:	4293      	cmp	r3, r2
 801607a:	d100      	bne.n	801607e <memset+0xa>
 801607c:	4770      	bx	lr
 801607e:	f803 1b01 	strb.w	r1, [r3], #1
 8016082:	e7f9      	b.n	8016078 <memset+0x4>

08016084 <iprintf>:
 8016084:	b40f      	push	{r0, r1, r2, r3}
 8016086:	4b0a      	ldr	r3, [pc, #40]	; (80160b0 <iprintf+0x2c>)
 8016088:	b513      	push	{r0, r1, r4, lr}
 801608a:	681c      	ldr	r4, [r3, #0]
 801608c:	b124      	cbz	r4, 8016098 <iprintf+0x14>
 801608e:	69a3      	ldr	r3, [r4, #24]
 8016090:	b913      	cbnz	r3, 8016098 <iprintf+0x14>
 8016092:	4620      	mov	r0, r4
 8016094:	f000 fa4c 	bl	8016530 <__sinit>
 8016098:	ab05      	add	r3, sp, #20
 801609a:	9a04      	ldr	r2, [sp, #16]
 801609c:	68a1      	ldr	r1, [r4, #8]
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	4620      	mov	r0, r4
 80160a2:	f000 fc37 	bl	8016914 <_vfiprintf_r>
 80160a6:	b002      	add	sp, #8
 80160a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160ac:	b004      	add	sp, #16
 80160ae:	4770      	bx	lr
 80160b0:	20000020 	.word	0x20000020

080160b4 <rand>:
 80160b4:	4b17      	ldr	r3, [pc, #92]	; (8016114 <rand+0x60>)
 80160b6:	b510      	push	{r4, lr}
 80160b8:	681c      	ldr	r4, [r3, #0]
 80160ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160bc:	b9b3      	cbnz	r3, 80160ec <rand+0x38>
 80160be:	2018      	movs	r0, #24
 80160c0:	f000 fb4c 	bl	801675c <malloc>
 80160c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80160c6:	b928      	cbnz	r0, 80160d4 <rand+0x20>
 80160c8:	4602      	mov	r2, r0
 80160ca:	4b13      	ldr	r3, [pc, #76]	; (8016118 <rand+0x64>)
 80160cc:	4813      	ldr	r0, [pc, #76]	; (801611c <rand+0x68>)
 80160ce:	214e      	movs	r1, #78	; 0x4e
 80160d0:	f000 f8f6 	bl	80162c0 <__assert_func>
 80160d4:	4a12      	ldr	r2, [pc, #72]	; (8016120 <rand+0x6c>)
 80160d6:	4b13      	ldr	r3, [pc, #76]	; (8016124 <rand+0x70>)
 80160d8:	e9c0 2300 	strd	r2, r3, [r0]
 80160dc:	4b12      	ldr	r3, [pc, #72]	; (8016128 <rand+0x74>)
 80160de:	6083      	str	r3, [r0, #8]
 80160e0:	230b      	movs	r3, #11
 80160e2:	8183      	strh	r3, [r0, #12]
 80160e4:	2201      	movs	r2, #1
 80160e6:	2300      	movs	r3, #0
 80160e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80160ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80160ee:	480f      	ldr	r0, [pc, #60]	; (801612c <rand+0x78>)
 80160f0:	690a      	ldr	r2, [r1, #16]
 80160f2:	694b      	ldr	r3, [r1, #20]
 80160f4:	4c0e      	ldr	r4, [pc, #56]	; (8016130 <rand+0x7c>)
 80160f6:	4350      	muls	r0, r2
 80160f8:	fb04 0003 	mla	r0, r4, r3, r0
 80160fc:	fba2 3404 	umull	r3, r4, r2, r4
 8016100:	1c5a      	adds	r2, r3, #1
 8016102:	4404      	add	r4, r0
 8016104:	f144 0000 	adc.w	r0, r4, #0
 8016108:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801610c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016110:	bd10      	pop	{r4, pc}
 8016112:	bf00      	nop
 8016114:	20000020 	.word	0x20000020
 8016118:	0801a2c0 	.word	0x0801a2c0
 801611c:	0801a2d7 	.word	0x0801a2d7
 8016120:	abcd330e 	.word	0xabcd330e
 8016124:	e66d1234 	.word	0xe66d1234
 8016128:	0005deec 	.word	0x0005deec
 801612c:	5851f42d 	.word	0x5851f42d
 8016130:	4c957f2d 	.word	0x4c957f2d

08016134 <setvbuf>:
 8016134:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016138:	461d      	mov	r5, r3
 801613a:	4b5d      	ldr	r3, [pc, #372]	; (80162b0 <setvbuf+0x17c>)
 801613c:	681f      	ldr	r7, [r3, #0]
 801613e:	4604      	mov	r4, r0
 8016140:	460e      	mov	r6, r1
 8016142:	4690      	mov	r8, r2
 8016144:	b127      	cbz	r7, 8016150 <setvbuf+0x1c>
 8016146:	69bb      	ldr	r3, [r7, #24]
 8016148:	b913      	cbnz	r3, 8016150 <setvbuf+0x1c>
 801614a:	4638      	mov	r0, r7
 801614c:	f000 f9f0 	bl	8016530 <__sinit>
 8016150:	4b58      	ldr	r3, [pc, #352]	; (80162b4 <setvbuf+0x180>)
 8016152:	429c      	cmp	r4, r3
 8016154:	d167      	bne.n	8016226 <setvbuf+0xf2>
 8016156:	687c      	ldr	r4, [r7, #4]
 8016158:	f1b8 0f02 	cmp.w	r8, #2
 801615c:	d006      	beq.n	801616c <setvbuf+0x38>
 801615e:	f1b8 0f01 	cmp.w	r8, #1
 8016162:	f200 809f 	bhi.w	80162a4 <setvbuf+0x170>
 8016166:	2d00      	cmp	r5, #0
 8016168:	f2c0 809c 	blt.w	80162a4 <setvbuf+0x170>
 801616c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801616e:	07db      	lsls	r3, r3, #31
 8016170:	d405      	bmi.n	801617e <setvbuf+0x4a>
 8016172:	89a3      	ldrh	r3, [r4, #12]
 8016174:	0598      	lsls	r0, r3, #22
 8016176:	d402      	bmi.n	801617e <setvbuf+0x4a>
 8016178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801617a:	f000 fa89 	bl	8016690 <__retarget_lock_acquire_recursive>
 801617e:	4621      	mov	r1, r4
 8016180:	4638      	mov	r0, r7
 8016182:	f000 f941 	bl	8016408 <_fflush_r>
 8016186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016188:	b141      	cbz	r1, 801619c <setvbuf+0x68>
 801618a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801618e:	4299      	cmp	r1, r3
 8016190:	d002      	beq.n	8016198 <setvbuf+0x64>
 8016192:	4638      	mov	r0, r7
 8016194:	f000 faea 	bl	801676c <_free_r>
 8016198:	2300      	movs	r3, #0
 801619a:	6363      	str	r3, [r4, #52]	; 0x34
 801619c:	2300      	movs	r3, #0
 801619e:	61a3      	str	r3, [r4, #24]
 80161a0:	6063      	str	r3, [r4, #4]
 80161a2:	89a3      	ldrh	r3, [r4, #12]
 80161a4:	0619      	lsls	r1, r3, #24
 80161a6:	d503      	bpl.n	80161b0 <setvbuf+0x7c>
 80161a8:	6921      	ldr	r1, [r4, #16]
 80161aa:	4638      	mov	r0, r7
 80161ac:	f000 fade 	bl	801676c <_free_r>
 80161b0:	89a3      	ldrh	r3, [r4, #12]
 80161b2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80161b6:	f023 0303 	bic.w	r3, r3, #3
 80161ba:	f1b8 0f02 	cmp.w	r8, #2
 80161be:	81a3      	strh	r3, [r4, #12]
 80161c0:	d06c      	beq.n	801629c <setvbuf+0x168>
 80161c2:	ab01      	add	r3, sp, #4
 80161c4:	466a      	mov	r2, sp
 80161c6:	4621      	mov	r1, r4
 80161c8:	4638      	mov	r0, r7
 80161ca:	f000 fa63 	bl	8016694 <__swhatbuf_r>
 80161ce:	89a3      	ldrh	r3, [r4, #12]
 80161d0:	4318      	orrs	r0, r3
 80161d2:	81a0      	strh	r0, [r4, #12]
 80161d4:	2d00      	cmp	r5, #0
 80161d6:	d130      	bne.n	801623a <setvbuf+0x106>
 80161d8:	9d00      	ldr	r5, [sp, #0]
 80161da:	4628      	mov	r0, r5
 80161dc:	f000 fabe 	bl	801675c <malloc>
 80161e0:	4606      	mov	r6, r0
 80161e2:	2800      	cmp	r0, #0
 80161e4:	d155      	bne.n	8016292 <setvbuf+0x15e>
 80161e6:	f8dd 9000 	ldr.w	r9, [sp]
 80161ea:	45a9      	cmp	r9, r5
 80161ec:	d14a      	bne.n	8016284 <setvbuf+0x150>
 80161ee:	f04f 35ff 	mov.w	r5, #4294967295
 80161f2:	2200      	movs	r2, #0
 80161f4:	60a2      	str	r2, [r4, #8]
 80161f6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80161fa:	6022      	str	r2, [r4, #0]
 80161fc:	6122      	str	r2, [r4, #16]
 80161fe:	2201      	movs	r2, #1
 8016200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016204:	6162      	str	r2, [r4, #20]
 8016206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016208:	f043 0302 	orr.w	r3, r3, #2
 801620c:	07d2      	lsls	r2, r2, #31
 801620e:	81a3      	strh	r3, [r4, #12]
 8016210:	d405      	bmi.n	801621e <setvbuf+0xea>
 8016212:	f413 7f00 	tst.w	r3, #512	; 0x200
 8016216:	d102      	bne.n	801621e <setvbuf+0xea>
 8016218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801621a:	f000 fa3a 	bl	8016692 <__retarget_lock_release_recursive>
 801621e:	4628      	mov	r0, r5
 8016220:	b003      	add	sp, #12
 8016222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016226:	4b24      	ldr	r3, [pc, #144]	; (80162b8 <setvbuf+0x184>)
 8016228:	429c      	cmp	r4, r3
 801622a:	d101      	bne.n	8016230 <setvbuf+0xfc>
 801622c:	68bc      	ldr	r4, [r7, #8]
 801622e:	e793      	b.n	8016158 <setvbuf+0x24>
 8016230:	4b22      	ldr	r3, [pc, #136]	; (80162bc <setvbuf+0x188>)
 8016232:	429c      	cmp	r4, r3
 8016234:	bf08      	it	eq
 8016236:	68fc      	ldreq	r4, [r7, #12]
 8016238:	e78e      	b.n	8016158 <setvbuf+0x24>
 801623a:	2e00      	cmp	r6, #0
 801623c:	d0cd      	beq.n	80161da <setvbuf+0xa6>
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	b913      	cbnz	r3, 8016248 <setvbuf+0x114>
 8016242:	4638      	mov	r0, r7
 8016244:	f000 f974 	bl	8016530 <__sinit>
 8016248:	f1b8 0f01 	cmp.w	r8, #1
 801624c:	bf08      	it	eq
 801624e:	89a3      	ldrheq	r3, [r4, #12]
 8016250:	6026      	str	r6, [r4, #0]
 8016252:	bf04      	itt	eq
 8016254:	f043 0301 	orreq.w	r3, r3, #1
 8016258:	81a3      	strheq	r3, [r4, #12]
 801625a:	89a2      	ldrh	r2, [r4, #12]
 801625c:	f012 0308 	ands.w	r3, r2, #8
 8016260:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8016264:	d01c      	beq.n	80162a0 <setvbuf+0x16c>
 8016266:	07d3      	lsls	r3, r2, #31
 8016268:	bf41      	itttt	mi
 801626a:	2300      	movmi	r3, #0
 801626c:	426d      	negmi	r5, r5
 801626e:	60a3      	strmi	r3, [r4, #8]
 8016270:	61a5      	strmi	r5, [r4, #24]
 8016272:	bf58      	it	pl
 8016274:	60a5      	strpl	r5, [r4, #8]
 8016276:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8016278:	f015 0501 	ands.w	r5, r5, #1
 801627c:	d115      	bne.n	80162aa <setvbuf+0x176>
 801627e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8016282:	e7c8      	b.n	8016216 <setvbuf+0xe2>
 8016284:	4648      	mov	r0, r9
 8016286:	f000 fa69 	bl	801675c <malloc>
 801628a:	4606      	mov	r6, r0
 801628c:	2800      	cmp	r0, #0
 801628e:	d0ae      	beq.n	80161ee <setvbuf+0xba>
 8016290:	464d      	mov	r5, r9
 8016292:	89a3      	ldrh	r3, [r4, #12]
 8016294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016298:	81a3      	strh	r3, [r4, #12]
 801629a:	e7d0      	b.n	801623e <setvbuf+0x10a>
 801629c:	2500      	movs	r5, #0
 801629e:	e7a8      	b.n	80161f2 <setvbuf+0xbe>
 80162a0:	60a3      	str	r3, [r4, #8]
 80162a2:	e7e8      	b.n	8016276 <setvbuf+0x142>
 80162a4:	f04f 35ff 	mov.w	r5, #4294967295
 80162a8:	e7b9      	b.n	801621e <setvbuf+0xea>
 80162aa:	2500      	movs	r5, #0
 80162ac:	e7b7      	b.n	801621e <setvbuf+0xea>
 80162ae:	bf00      	nop
 80162b0:	20000020 	.word	0x20000020
 80162b4:	0801a394 	.word	0x0801a394
 80162b8:	0801a3b4 	.word	0x0801a3b4
 80162bc:	0801a374 	.word	0x0801a374

080162c0 <__assert_func>:
 80162c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80162c2:	4614      	mov	r4, r2
 80162c4:	461a      	mov	r2, r3
 80162c6:	4b09      	ldr	r3, [pc, #36]	; (80162ec <__assert_func+0x2c>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	4605      	mov	r5, r0
 80162cc:	68d8      	ldr	r0, [r3, #12]
 80162ce:	b14c      	cbz	r4, 80162e4 <__assert_func+0x24>
 80162d0:	4b07      	ldr	r3, [pc, #28]	; (80162f0 <__assert_func+0x30>)
 80162d2:	9100      	str	r1, [sp, #0]
 80162d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80162d8:	4906      	ldr	r1, [pc, #24]	; (80162f4 <__assert_func+0x34>)
 80162da:	462b      	mov	r3, r5
 80162dc:	f000 f9a6 	bl	801662c <fiprintf>
 80162e0:	f000 ff02 	bl	80170e8 <abort>
 80162e4:	4b04      	ldr	r3, [pc, #16]	; (80162f8 <__assert_func+0x38>)
 80162e6:	461c      	mov	r4, r3
 80162e8:	e7f3      	b.n	80162d2 <__assert_func+0x12>
 80162ea:	bf00      	nop
 80162ec:	20000020 	.word	0x20000020
 80162f0:	0801a336 	.word	0x0801a336
 80162f4:	0801a343 	.word	0x0801a343
 80162f8:	0801a371 	.word	0x0801a371

080162fc <__sflush_r>:
 80162fc:	898a      	ldrh	r2, [r1, #12]
 80162fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016302:	4605      	mov	r5, r0
 8016304:	0710      	lsls	r0, r2, #28
 8016306:	460c      	mov	r4, r1
 8016308:	d458      	bmi.n	80163bc <__sflush_r+0xc0>
 801630a:	684b      	ldr	r3, [r1, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	dc05      	bgt.n	801631c <__sflush_r+0x20>
 8016310:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016312:	2b00      	cmp	r3, #0
 8016314:	dc02      	bgt.n	801631c <__sflush_r+0x20>
 8016316:	2000      	movs	r0, #0
 8016318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801631c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801631e:	2e00      	cmp	r6, #0
 8016320:	d0f9      	beq.n	8016316 <__sflush_r+0x1a>
 8016322:	2300      	movs	r3, #0
 8016324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016328:	682f      	ldr	r7, [r5, #0]
 801632a:	602b      	str	r3, [r5, #0]
 801632c:	d032      	beq.n	8016394 <__sflush_r+0x98>
 801632e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016330:	89a3      	ldrh	r3, [r4, #12]
 8016332:	075a      	lsls	r2, r3, #29
 8016334:	d505      	bpl.n	8016342 <__sflush_r+0x46>
 8016336:	6863      	ldr	r3, [r4, #4]
 8016338:	1ac0      	subs	r0, r0, r3
 801633a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801633c:	b10b      	cbz	r3, 8016342 <__sflush_r+0x46>
 801633e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016340:	1ac0      	subs	r0, r0, r3
 8016342:	2300      	movs	r3, #0
 8016344:	4602      	mov	r2, r0
 8016346:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016348:	6a21      	ldr	r1, [r4, #32]
 801634a:	4628      	mov	r0, r5
 801634c:	47b0      	blx	r6
 801634e:	1c43      	adds	r3, r0, #1
 8016350:	89a3      	ldrh	r3, [r4, #12]
 8016352:	d106      	bne.n	8016362 <__sflush_r+0x66>
 8016354:	6829      	ldr	r1, [r5, #0]
 8016356:	291d      	cmp	r1, #29
 8016358:	d82c      	bhi.n	80163b4 <__sflush_r+0xb8>
 801635a:	4a2a      	ldr	r2, [pc, #168]	; (8016404 <__sflush_r+0x108>)
 801635c:	40ca      	lsrs	r2, r1
 801635e:	07d6      	lsls	r6, r2, #31
 8016360:	d528      	bpl.n	80163b4 <__sflush_r+0xb8>
 8016362:	2200      	movs	r2, #0
 8016364:	6062      	str	r2, [r4, #4]
 8016366:	04d9      	lsls	r1, r3, #19
 8016368:	6922      	ldr	r2, [r4, #16]
 801636a:	6022      	str	r2, [r4, #0]
 801636c:	d504      	bpl.n	8016378 <__sflush_r+0x7c>
 801636e:	1c42      	adds	r2, r0, #1
 8016370:	d101      	bne.n	8016376 <__sflush_r+0x7a>
 8016372:	682b      	ldr	r3, [r5, #0]
 8016374:	b903      	cbnz	r3, 8016378 <__sflush_r+0x7c>
 8016376:	6560      	str	r0, [r4, #84]	; 0x54
 8016378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801637a:	602f      	str	r7, [r5, #0]
 801637c:	2900      	cmp	r1, #0
 801637e:	d0ca      	beq.n	8016316 <__sflush_r+0x1a>
 8016380:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016384:	4299      	cmp	r1, r3
 8016386:	d002      	beq.n	801638e <__sflush_r+0x92>
 8016388:	4628      	mov	r0, r5
 801638a:	f000 f9ef 	bl	801676c <_free_r>
 801638e:	2000      	movs	r0, #0
 8016390:	6360      	str	r0, [r4, #52]	; 0x34
 8016392:	e7c1      	b.n	8016318 <__sflush_r+0x1c>
 8016394:	6a21      	ldr	r1, [r4, #32]
 8016396:	2301      	movs	r3, #1
 8016398:	4628      	mov	r0, r5
 801639a:	47b0      	blx	r6
 801639c:	1c41      	adds	r1, r0, #1
 801639e:	d1c7      	bne.n	8016330 <__sflush_r+0x34>
 80163a0:	682b      	ldr	r3, [r5, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d0c4      	beq.n	8016330 <__sflush_r+0x34>
 80163a6:	2b1d      	cmp	r3, #29
 80163a8:	d001      	beq.n	80163ae <__sflush_r+0xb2>
 80163aa:	2b16      	cmp	r3, #22
 80163ac:	d101      	bne.n	80163b2 <__sflush_r+0xb6>
 80163ae:	602f      	str	r7, [r5, #0]
 80163b0:	e7b1      	b.n	8016316 <__sflush_r+0x1a>
 80163b2:	89a3      	ldrh	r3, [r4, #12]
 80163b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163b8:	81a3      	strh	r3, [r4, #12]
 80163ba:	e7ad      	b.n	8016318 <__sflush_r+0x1c>
 80163bc:	690f      	ldr	r7, [r1, #16]
 80163be:	2f00      	cmp	r7, #0
 80163c0:	d0a9      	beq.n	8016316 <__sflush_r+0x1a>
 80163c2:	0793      	lsls	r3, r2, #30
 80163c4:	680e      	ldr	r6, [r1, #0]
 80163c6:	bf08      	it	eq
 80163c8:	694b      	ldreq	r3, [r1, #20]
 80163ca:	600f      	str	r7, [r1, #0]
 80163cc:	bf18      	it	ne
 80163ce:	2300      	movne	r3, #0
 80163d0:	eba6 0807 	sub.w	r8, r6, r7
 80163d4:	608b      	str	r3, [r1, #8]
 80163d6:	f1b8 0f00 	cmp.w	r8, #0
 80163da:	dd9c      	ble.n	8016316 <__sflush_r+0x1a>
 80163dc:	6a21      	ldr	r1, [r4, #32]
 80163de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80163e0:	4643      	mov	r3, r8
 80163e2:	463a      	mov	r2, r7
 80163e4:	4628      	mov	r0, r5
 80163e6:	47b0      	blx	r6
 80163e8:	2800      	cmp	r0, #0
 80163ea:	dc06      	bgt.n	80163fa <__sflush_r+0xfe>
 80163ec:	89a3      	ldrh	r3, [r4, #12]
 80163ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163f2:	81a3      	strh	r3, [r4, #12]
 80163f4:	f04f 30ff 	mov.w	r0, #4294967295
 80163f8:	e78e      	b.n	8016318 <__sflush_r+0x1c>
 80163fa:	4407      	add	r7, r0
 80163fc:	eba8 0800 	sub.w	r8, r8, r0
 8016400:	e7e9      	b.n	80163d6 <__sflush_r+0xda>
 8016402:	bf00      	nop
 8016404:	20400001 	.word	0x20400001

08016408 <_fflush_r>:
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	690b      	ldr	r3, [r1, #16]
 801640c:	4605      	mov	r5, r0
 801640e:	460c      	mov	r4, r1
 8016410:	b913      	cbnz	r3, 8016418 <_fflush_r+0x10>
 8016412:	2500      	movs	r5, #0
 8016414:	4628      	mov	r0, r5
 8016416:	bd38      	pop	{r3, r4, r5, pc}
 8016418:	b118      	cbz	r0, 8016422 <_fflush_r+0x1a>
 801641a:	6983      	ldr	r3, [r0, #24]
 801641c:	b90b      	cbnz	r3, 8016422 <_fflush_r+0x1a>
 801641e:	f000 f887 	bl	8016530 <__sinit>
 8016422:	4b14      	ldr	r3, [pc, #80]	; (8016474 <_fflush_r+0x6c>)
 8016424:	429c      	cmp	r4, r3
 8016426:	d11b      	bne.n	8016460 <_fflush_r+0x58>
 8016428:	686c      	ldr	r4, [r5, #4]
 801642a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d0ef      	beq.n	8016412 <_fflush_r+0xa>
 8016432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016434:	07d0      	lsls	r0, r2, #31
 8016436:	d404      	bmi.n	8016442 <_fflush_r+0x3a>
 8016438:	0599      	lsls	r1, r3, #22
 801643a:	d402      	bmi.n	8016442 <_fflush_r+0x3a>
 801643c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801643e:	f000 f927 	bl	8016690 <__retarget_lock_acquire_recursive>
 8016442:	4628      	mov	r0, r5
 8016444:	4621      	mov	r1, r4
 8016446:	f7ff ff59 	bl	80162fc <__sflush_r>
 801644a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801644c:	07da      	lsls	r2, r3, #31
 801644e:	4605      	mov	r5, r0
 8016450:	d4e0      	bmi.n	8016414 <_fflush_r+0xc>
 8016452:	89a3      	ldrh	r3, [r4, #12]
 8016454:	059b      	lsls	r3, r3, #22
 8016456:	d4dd      	bmi.n	8016414 <_fflush_r+0xc>
 8016458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801645a:	f000 f91a 	bl	8016692 <__retarget_lock_release_recursive>
 801645e:	e7d9      	b.n	8016414 <_fflush_r+0xc>
 8016460:	4b05      	ldr	r3, [pc, #20]	; (8016478 <_fflush_r+0x70>)
 8016462:	429c      	cmp	r4, r3
 8016464:	d101      	bne.n	801646a <_fflush_r+0x62>
 8016466:	68ac      	ldr	r4, [r5, #8]
 8016468:	e7df      	b.n	801642a <_fflush_r+0x22>
 801646a:	4b04      	ldr	r3, [pc, #16]	; (801647c <_fflush_r+0x74>)
 801646c:	429c      	cmp	r4, r3
 801646e:	bf08      	it	eq
 8016470:	68ec      	ldreq	r4, [r5, #12]
 8016472:	e7da      	b.n	801642a <_fflush_r+0x22>
 8016474:	0801a394 	.word	0x0801a394
 8016478:	0801a3b4 	.word	0x0801a3b4
 801647c:	0801a374 	.word	0x0801a374

08016480 <std>:
 8016480:	2300      	movs	r3, #0
 8016482:	b510      	push	{r4, lr}
 8016484:	4604      	mov	r4, r0
 8016486:	e9c0 3300 	strd	r3, r3, [r0]
 801648a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801648e:	6083      	str	r3, [r0, #8]
 8016490:	8181      	strh	r1, [r0, #12]
 8016492:	6643      	str	r3, [r0, #100]	; 0x64
 8016494:	81c2      	strh	r2, [r0, #14]
 8016496:	6183      	str	r3, [r0, #24]
 8016498:	4619      	mov	r1, r3
 801649a:	2208      	movs	r2, #8
 801649c:	305c      	adds	r0, #92	; 0x5c
 801649e:	f7ff fde9 	bl	8016074 <memset>
 80164a2:	4b05      	ldr	r3, [pc, #20]	; (80164b8 <std+0x38>)
 80164a4:	6263      	str	r3, [r4, #36]	; 0x24
 80164a6:	4b05      	ldr	r3, [pc, #20]	; (80164bc <std+0x3c>)
 80164a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80164aa:	4b05      	ldr	r3, [pc, #20]	; (80164c0 <std+0x40>)
 80164ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80164ae:	4b05      	ldr	r3, [pc, #20]	; (80164c4 <std+0x44>)
 80164b0:	6224      	str	r4, [r4, #32]
 80164b2:	6323      	str	r3, [r4, #48]	; 0x30
 80164b4:	bd10      	pop	{r4, pc}
 80164b6:	bf00      	nop
 80164b8:	08016ebd 	.word	0x08016ebd
 80164bc:	08016edf 	.word	0x08016edf
 80164c0:	08016f17 	.word	0x08016f17
 80164c4:	08016f3b 	.word	0x08016f3b

080164c8 <_cleanup_r>:
 80164c8:	4901      	ldr	r1, [pc, #4]	; (80164d0 <_cleanup_r+0x8>)
 80164ca:	f000 b8c1 	b.w	8016650 <_fwalk_reent>
 80164ce:	bf00      	nop
 80164d0:	08016409 	.word	0x08016409

080164d4 <__sfmoreglue>:
 80164d4:	b570      	push	{r4, r5, r6, lr}
 80164d6:	1e4a      	subs	r2, r1, #1
 80164d8:	2568      	movs	r5, #104	; 0x68
 80164da:	4355      	muls	r5, r2
 80164dc:	460e      	mov	r6, r1
 80164de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80164e2:	f000 f993 	bl	801680c <_malloc_r>
 80164e6:	4604      	mov	r4, r0
 80164e8:	b140      	cbz	r0, 80164fc <__sfmoreglue+0x28>
 80164ea:	2100      	movs	r1, #0
 80164ec:	e9c0 1600 	strd	r1, r6, [r0]
 80164f0:	300c      	adds	r0, #12
 80164f2:	60a0      	str	r0, [r4, #8]
 80164f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80164f8:	f7ff fdbc 	bl	8016074 <memset>
 80164fc:	4620      	mov	r0, r4
 80164fe:	bd70      	pop	{r4, r5, r6, pc}

08016500 <__sfp_lock_acquire>:
 8016500:	4801      	ldr	r0, [pc, #4]	; (8016508 <__sfp_lock_acquire+0x8>)
 8016502:	f000 b8c5 	b.w	8016690 <__retarget_lock_acquire_recursive>
 8016506:	bf00      	nop
 8016508:	2000b96c 	.word	0x2000b96c

0801650c <__sfp_lock_release>:
 801650c:	4801      	ldr	r0, [pc, #4]	; (8016514 <__sfp_lock_release+0x8>)
 801650e:	f000 b8c0 	b.w	8016692 <__retarget_lock_release_recursive>
 8016512:	bf00      	nop
 8016514:	2000b96c 	.word	0x2000b96c

08016518 <__sinit_lock_acquire>:
 8016518:	4801      	ldr	r0, [pc, #4]	; (8016520 <__sinit_lock_acquire+0x8>)
 801651a:	f000 b8b9 	b.w	8016690 <__retarget_lock_acquire_recursive>
 801651e:	bf00      	nop
 8016520:	2000b967 	.word	0x2000b967

08016524 <__sinit_lock_release>:
 8016524:	4801      	ldr	r0, [pc, #4]	; (801652c <__sinit_lock_release+0x8>)
 8016526:	f000 b8b4 	b.w	8016692 <__retarget_lock_release_recursive>
 801652a:	bf00      	nop
 801652c:	2000b967 	.word	0x2000b967

08016530 <__sinit>:
 8016530:	b510      	push	{r4, lr}
 8016532:	4604      	mov	r4, r0
 8016534:	f7ff fff0 	bl	8016518 <__sinit_lock_acquire>
 8016538:	69a3      	ldr	r3, [r4, #24]
 801653a:	b11b      	cbz	r3, 8016544 <__sinit+0x14>
 801653c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016540:	f7ff bff0 	b.w	8016524 <__sinit_lock_release>
 8016544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016548:	6523      	str	r3, [r4, #80]	; 0x50
 801654a:	4b13      	ldr	r3, [pc, #76]	; (8016598 <__sinit+0x68>)
 801654c:	4a13      	ldr	r2, [pc, #76]	; (801659c <__sinit+0x6c>)
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	62a2      	str	r2, [r4, #40]	; 0x28
 8016552:	42a3      	cmp	r3, r4
 8016554:	bf04      	itt	eq
 8016556:	2301      	moveq	r3, #1
 8016558:	61a3      	streq	r3, [r4, #24]
 801655a:	4620      	mov	r0, r4
 801655c:	f000 f820 	bl	80165a0 <__sfp>
 8016560:	6060      	str	r0, [r4, #4]
 8016562:	4620      	mov	r0, r4
 8016564:	f000 f81c 	bl	80165a0 <__sfp>
 8016568:	60a0      	str	r0, [r4, #8]
 801656a:	4620      	mov	r0, r4
 801656c:	f000 f818 	bl	80165a0 <__sfp>
 8016570:	2200      	movs	r2, #0
 8016572:	60e0      	str	r0, [r4, #12]
 8016574:	2104      	movs	r1, #4
 8016576:	6860      	ldr	r0, [r4, #4]
 8016578:	f7ff ff82 	bl	8016480 <std>
 801657c:	68a0      	ldr	r0, [r4, #8]
 801657e:	2201      	movs	r2, #1
 8016580:	2109      	movs	r1, #9
 8016582:	f7ff ff7d 	bl	8016480 <std>
 8016586:	68e0      	ldr	r0, [r4, #12]
 8016588:	2202      	movs	r2, #2
 801658a:	2112      	movs	r1, #18
 801658c:	f7ff ff78 	bl	8016480 <std>
 8016590:	2301      	movs	r3, #1
 8016592:	61a3      	str	r3, [r4, #24]
 8016594:	e7d2      	b.n	801653c <__sinit+0xc>
 8016596:	bf00      	nop
 8016598:	0801a2bc 	.word	0x0801a2bc
 801659c:	080164c9 	.word	0x080164c9

080165a0 <__sfp>:
 80165a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165a2:	4607      	mov	r7, r0
 80165a4:	f7ff ffac 	bl	8016500 <__sfp_lock_acquire>
 80165a8:	4b1e      	ldr	r3, [pc, #120]	; (8016624 <__sfp+0x84>)
 80165aa:	681e      	ldr	r6, [r3, #0]
 80165ac:	69b3      	ldr	r3, [r6, #24]
 80165ae:	b913      	cbnz	r3, 80165b6 <__sfp+0x16>
 80165b0:	4630      	mov	r0, r6
 80165b2:	f7ff ffbd 	bl	8016530 <__sinit>
 80165b6:	3648      	adds	r6, #72	; 0x48
 80165b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80165bc:	3b01      	subs	r3, #1
 80165be:	d503      	bpl.n	80165c8 <__sfp+0x28>
 80165c0:	6833      	ldr	r3, [r6, #0]
 80165c2:	b30b      	cbz	r3, 8016608 <__sfp+0x68>
 80165c4:	6836      	ldr	r6, [r6, #0]
 80165c6:	e7f7      	b.n	80165b8 <__sfp+0x18>
 80165c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80165cc:	b9d5      	cbnz	r5, 8016604 <__sfp+0x64>
 80165ce:	4b16      	ldr	r3, [pc, #88]	; (8016628 <__sfp+0x88>)
 80165d0:	60e3      	str	r3, [r4, #12]
 80165d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165d6:	6665      	str	r5, [r4, #100]	; 0x64
 80165d8:	f000 f859 	bl	801668e <__retarget_lock_init_recursive>
 80165dc:	f7ff ff96 	bl	801650c <__sfp_lock_release>
 80165e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80165e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80165e8:	6025      	str	r5, [r4, #0]
 80165ea:	61a5      	str	r5, [r4, #24]
 80165ec:	2208      	movs	r2, #8
 80165ee:	4629      	mov	r1, r5
 80165f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80165f4:	f7ff fd3e 	bl	8016074 <memset>
 80165f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80165fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016600:	4620      	mov	r0, r4
 8016602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016604:	3468      	adds	r4, #104	; 0x68
 8016606:	e7d9      	b.n	80165bc <__sfp+0x1c>
 8016608:	2104      	movs	r1, #4
 801660a:	4638      	mov	r0, r7
 801660c:	f7ff ff62 	bl	80164d4 <__sfmoreglue>
 8016610:	4604      	mov	r4, r0
 8016612:	6030      	str	r0, [r6, #0]
 8016614:	2800      	cmp	r0, #0
 8016616:	d1d5      	bne.n	80165c4 <__sfp+0x24>
 8016618:	f7ff ff78 	bl	801650c <__sfp_lock_release>
 801661c:	230c      	movs	r3, #12
 801661e:	603b      	str	r3, [r7, #0]
 8016620:	e7ee      	b.n	8016600 <__sfp+0x60>
 8016622:	bf00      	nop
 8016624:	0801a2bc 	.word	0x0801a2bc
 8016628:	ffff0001 	.word	0xffff0001

0801662c <fiprintf>:
 801662c:	b40e      	push	{r1, r2, r3}
 801662e:	b503      	push	{r0, r1, lr}
 8016630:	4601      	mov	r1, r0
 8016632:	ab03      	add	r3, sp, #12
 8016634:	4805      	ldr	r0, [pc, #20]	; (801664c <fiprintf+0x20>)
 8016636:	f853 2b04 	ldr.w	r2, [r3], #4
 801663a:	6800      	ldr	r0, [r0, #0]
 801663c:	9301      	str	r3, [sp, #4]
 801663e:	f000 f969 	bl	8016914 <_vfiprintf_r>
 8016642:	b002      	add	sp, #8
 8016644:	f85d eb04 	ldr.w	lr, [sp], #4
 8016648:	b003      	add	sp, #12
 801664a:	4770      	bx	lr
 801664c:	20000020 	.word	0x20000020

08016650 <_fwalk_reent>:
 8016650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016654:	4606      	mov	r6, r0
 8016656:	4688      	mov	r8, r1
 8016658:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801665c:	2700      	movs	r7, #0
 801665e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016662:	f1b9 0901 	subs.w	r9, r9, #1
 8016666:	d505      	bpl.n	8016674 <_fwalk_reent+0x24>
 8016668:	6824      	ldr	r4, [r4, #0]
 801666a:	2c00      	cmp	r4, #0
 801666c:	d1f7      	bne.n	801665e <_fwalk_reent+0xe>
 801666e:	4638      	mov	r0, r7
 8016670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016674:	89ab      	ldrh	r3, [r5, #12]
 8016676:	2b01      	cmp	r3, #1
 8016678:	d907      	bls.n	801668a <_fwalk_reent+0x3a>
 801667a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801667e:	3301      	adds	r3, #1
 8016680:	d003      	beq.n	801668a <_fwalk_reent+0x3a>
 8016682:	4629      	mov	r1, r5
 8016684:	4630      	mov	r0, r6
 8016686:	47c0      	blx	r8
 8016688:	4307      	orrs	r7, r0
 801668a:	3568      	adds	r5, #104	; 0x68
 801668c:	e7e9      	b.n	8016662 <_fwalk_reent+0x12>

0801668e <__retarget_lock_init_recursive>:
 801668e:	4770      	bx	lr

08016690 <__retarget_lock_acquire_recursive>:
 8016690:	4770      	bx	lr

08016692 <__retarget_lock_release_recursive>:
 8016692:	4770      	bx	lr

08016694 <__swhatbuf_r>:
 8016694:	b570      	push	{r4, r5, r6, lr}
 8016696:	460e      	mov	r6, r1
 8016698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801669c:	2900      	cmp	r1, #0
 801669e:	b096      	sub	sp, #88	; 0x58
 80166a0:	4614      	mov	r4, r2
 80166a2:	461d      	mov	r5, r3
 80166a4:	da07      	bge.n	80166b6 <__swhatbuf_r+0x22>
 80166a6:	2300      	movs	r3, #0
 80166a8:	602b      	str	r3, [r5, #0]
 80166aa:	89b3      	ldrh	r3, [r6, #12]
 80166ac:	061a      	lsls	r2, r3, #24
 80166ae:	d410      	bmi.n	80166d2 <__swhatbuf_r+0x3e>
 80166b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80166b4:	e00e      	b.n	80166d4 <__swhatbuf_r+0x40>
 80166b6:	466a      	mov	r2, sp
 80166b8:	f000 fd2e 	bl	8017118 <_fstat_r>
 80166bc:	2800      	cmp	r0, #0
 80166be:	dbf2      	blt.n	80166a6 <__swhatbuf_r+0x12>
 80166c0:	9a01      	ldr	r2, [sp, #4]
 80166c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80166c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80166ca:	425a      	negs	r2, r3
 80166cc:	415a      	adcs	r2, r3
 80166ce:	602a      	str	r2, [r5, #0]
 80166d0:	e7ee      	b.n	80166b0 <__swhatbuf_r+0x1c>
 80166d2:	2340      	movs	r3, #64	; 0x40
 80166d4:	2000      	movs	r0, #0
 80166d6:	6023      	str	r3, [r4, #0]
 80166d8:	b016      	add	sp, #88	; 0x58
 80166da:	bd70      	pop	{r4, r5, r6, pc}

080166dc <__smakebuf_r>:
 80166dc:	898b      	ldrh	r3, [r1, #12]
 80166de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166e0:	079d      	lsls	r5, r3, #30
 80166e2:	4606      	mov	r6, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	d507      	bpl.n	80166f8 <__smakebuf_r+0x1c>
 80166e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	6123      	str	r3, [r4, #16]
 80166f0:	2301      	movs	r3, #1
 80166f2:	6163      	str	r3, [r4, #20]
 80166f4:	b002      	add	sp, #8
 80166f6:	bd70      	pop	{r4, r5, r6, pc}
 80166f8:	ab01      	add	r3, sp, #4
 80166fa:	466a      	mov	r2, sp
 80166fc:	f7ff ffca 	bl	8016694 <__swhatbuf_r>
 8016700:	9900      	ldr	r1, [sp, #0]
 8016702:	4605      	mov	r5, r0
 8016704:	4630      	mov	r0, r6
 8016706:	f000 f881 	bl	801680c <_malloc_r>
 801670a:	b948      	cbnz	r0, 8016720 <__smakebuf_r+0x44>
 801670c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016710:	059a      	lsls	r2, r3, #22
 8016712:	d4ef      	bmi.n	80166f4 <__smakebuf_r+0x18>
 8016714:	f023 0303 	bic.w	r3, r3, #3
 8016718:	f043 0302 	orr.w	r3, r3, #2
 801671c:	81a3      	strh	r3, [r4, #12]
 801671e:	e7e3      	b.n	80166e8 <__smakebuf_r+0xc>
 8016720:	4b0d      	ldr	r3, [pc, #52]	; (8016758 <__smakebuf_r+0x7c>)
 8016722:	62b3      	str	r3, [r6, #40]	; 0x28
 8016724:	89a3      	ldrh	r3, [r4, #12]
 8016726:	6020      	str	r0, [r4, #0]
 8016728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801672c:	81a3      	strh	r3, [r4, #12]
 801672e:	9b00      	ldr	r3, [sp, #0]
 8016730:	6163      	str	r3, [r4, #20]
 8016732:	9b01      	ldr	r3, [sp, #4]
 8016734:	6120      	str	r0, [r4, #16]
 8016736:	b15b      	cbz	r3, 8016750 <__smakebuf_r+0x74>
 8016738:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801673c:	4630      	mov	r0, r6
 801673e:	f000 fcfd 	bl	801713c <_isatty_r>
 8016742:	b128      	cbz	r0, 8016750 <__smakebuf_r+0x74>
 8016744:	89a3      	ldrh	r3, [r4, #12]
 8016746:	f023 0303 	bic.w	r3, r3, #3
 801674a:	f043 0301 	orr.w	r3, r3, #1
 801674e:	81a3      	strh	r3, [r4, #12]
 8016750:	89a0      	ldrh	r0, [r4, #12]
 8016752:	4305      	orrs	r5, r0
 8016754:	81a5      	strh	r5, [r4, #12]
 8016756:	e7cd      	b.n	80166f4 <__smakebuf_r+0x18>
 8016758:	080164c9 	.word	0x080164c9

0801675c <malloc>:
 801675c:	4b02      	ldr	r3, [pc, #8]	; (8016768 <malloc+0xc>)
 801675e:	4601      	mov	r1, r0
 8016760:	6818      	ldr	r0, [r3, #0]
 8016762:	f000 b853 	b.w	801680c <_malloc_r>
 8016766:	bf00      	nop
 8016768:	20000020 	.word	0x20000020

0801676c <_free_r>:
 801676c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801676e:	2900      	cmp	r1, #0
 8016770:	d048      	beq.n	8016804 <_free_r+0x98>
 8016772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016776:	9001      	str	r0, [sp, #4]
 8016778:	2b00      	cmp	r3, #0
 801677a:	f1a1 0404 	sub.w	r4, r1, #4
 801677e:	bfb8      	it	lt
 8016780:	18e4      	addlt	r4, r4, r3
 8016782:	f000 fcfd 	bl	8017180 <__malloc_lock>
 8016786:	4a20      	ldr	r2, [pc, #128]	; (8016808 <_free_r+0x9c>)
 8016788:	9801      	ldr	r0, [sp, #4]
 801678a:	6813      	ldr	r3, [r2, #0]
 801678c:	4615      	mov	r5, r2
 801678e:	b933      	cbnz	r3, 801679e <_free_r+0x32>
 8016790:	6063      	str	r3, [r4, #4]
 8016792:	6014      	str	r4, [r2, #0]
 8016794:	b003      	add	sp, #12
 8016796:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801679a:	f000 bcf7 	b.w	801718c <__malloc_unlock>
 801679e:	42a3      	cmp	r3, r4
 80167a0:	d90b      	bls.n	80167ba <_free_r+0x4e>
 80167a2:	6821      	ldr	r1, [r4, #0]
 80167a4:	1862      	adds	r2, r4, r1
 80167a6:	4293      	cmp	r3, r2
 80167a8:	bf04      	itt	eq
 80167aa:	681a      	ldreq	r2, [r3, #0]
 80167ac:	685b      	ldreq	r3, [r3, #4]
 80167ae:	6063      	str	r3, [r4, #4]
 80167b0:	bf04      	itt	eq
 80167b2:	1852      	addeq	r2, r2, r1
 80167b4:	6022      	streq	r2, [r4, #0]
 80167b6:	602c      	str	r4, [r5, #0]
 80167b8:	e7ec      	b.n	8016794 <_free_r+0x28>
 80167ba:	461a      	mov	r2, r3
 80167bc:	685b      	ldr	r3, [r3, #4]
 80167be:	b10b      	cbz	r3, 80167c4 <_free_r+0x58>
 80167c0:	42a3      	cmp	r3, r4
 80167c2:	d9fa      	bls.n	80167ba <_free_r+0x4e>
 80167c4:	6811      	ldr	r1, [r2, #0]
 80167c6:	1855      	adds	r5, r2, r1
 80167c8:	42a5      	cmp	r5, r4
 80167ca:	d10b      	bne.n	80167e4 <_free_r+0x78>
 80167cc:	6824      	ldr	r4, [r4, #0]
 80167ce:	4421      	add	r1, r4
 80167d0:	1854      	adds	r4, r2, r1
 80167d2:	42a3      	cmp	r3, r4
 80167d4:	6011      	str	r1, [r2, #0]
 80167d6:	d1dd      	bne.n	8016794 <_free_r+0x28>
 80167d8:	681c      	ldr	r4, [r3, #0]
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	6053      	str	r3, [r2, #4]
 80167de:	4421      	add	r1, r4
 80167e0:	6011      	str	r1, [r2, #0]
 80167e2:	e7d7      	b.n	8016794 <_free_r+0x28>
 80167e4:	d902      	bls.n	80167ec <_free_r+0x80>
 80167e6:	230c      	movs	r3, #12
 80167e8:	6003      	str	r3, [r0, #0]
 80167ea:	e7d3      	b.n	8016794 <_free_r+0x28>
 80167ec:	6825      	ldr	r5, [r4, #0]
 80167ee:	1961      	adds	r1, r4, r5
 80167f0:	428b      	cmp	r3, r1
 80167f2:	bf04      	itt	eq
 80167f4:	6819      	ldreq	r1, [r3, #0]
 80167f6:	685b      	ldreq	r3, [r3, #4]
 80167f8:	6063      	str	r3, [r4, #4]
 80167fa:	bf04      	itt	eq
 80167fc:	1949      	addeq	r1, r1, r5
 80167fe:	6021      	streq	r1, [r4, #0]
 8016800:	6054      	str	r4, [r2, #4]
 8016802:	e7c7      	b.n	8016794 <_free_r+0x28>
 8016804:	b003      	add	sp, #12
 8016806:	bd30      	pop	{r4, r5, pc}
 8016808:	20004b60 	.word	0x20004b60

0801680c <_malloc_r>:
 801680c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801680e:	1ccd      	adds	r5, r1, #3
 8016810:	f025 0503 	bic.w	r5, r5, #3
 8016814:	3508      	adds	r5, #8
 8016816:	2d0c      	cmp	r5, #12
 8016818:	bf38      	it	cc
 801681a:	250c      	movcc	r5, #12
 801681c:	2d00      	cmp	r5, #0
 801681e:	4606      	mov	r6, r0
 8016820:	db01      	blt.n	8016826 <_malloc_r+0x1a>
 8016822:	42a9      	cmp	r1, r5
 8016824:	d903      	bls.n	801682e <_malloc_r+0x22>
 8016826:	230c      	movs	r3, #12
 8016828:	6033      	str	r3, [r6, #0]
 801682a:	2000      	movs	r0, #0
 801682c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801682e:	f000 fca7 	bl	8017180 <__malloc_lock>
 8016832:	4921      	ldr	r1, [pc, #132]	; (80168b8 <_malloc_r+0xac>)
 8016834:	680a      	ldr	r2, [r1, #0]
 8016836:	4614      	mov	r4, r2
 8016838:	b99c      	cbnz	r4, 8016862 <_malloc_r+0x56>
 801683a:	4f20      	ldr	r7, [pc, #128]	; (80168bc <_malloc_r+0xb0>)
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	b923      	cbnz	r3, 801684a <_malloc_r+0x3e>
 8016840:	4621      	mov	r1, r4
 8016842:	4630      	mov	r0, r6
 8016844:	f000 fb2a 	bl	8016e9c <_sbrk_r>
 8016848:	6038      	str	r0, [r7, #0]
 801684a:	4629      	mov	r1, r5
 801684c:	4630      	mov	r0, r6
 801684e:	f000 fb25 	bl	8016e9c <_sbrk_r>
 8016852:	1c43      	adds	r3, r0, #1
 8016854:	d123      	bne.n	801689e <_malloc_r+0x92>
 8016856:	230c      	movs	r3, #12
 8016858:	6033      	str	r3, [r6, #0]
 801685a:	4630      	mov	r0, r6
 801685c:	f000 fc96 	bl	801718c <__malloc_unlock>
 8016860:	e7e3      	b.n	801682a <_malloc_r+0x1e>
 8016862:	6823      	ldr	r3, [r4, #0]
 8016864:	1b5b      	subs	r3, r3, r5
 8016866:	d417      	bmi.n	8016898 <_malloc_r+0x8c>
 8016868:	2b0b      	cmp	r3, #11
 801686a:	d903      	bls.n	8016874 <_malloc_r+0x68>
 801686c:	6023      	str	r3, [r4, #0]
 801686e:	441c      	add	r4, r3
 8016870:	6025      	str	r5, [r4, #0]
 8016872:	e004      	b.n	801687e <_malloc_r+0x72>
 8016874:	6863      	ldr	r3, [r4, #4]
 8016876:	42a2      	cmp	r2, r4
 8016878:	bf0c      	ite	eq
 801687a:	600b      	streq	r3, [r1, #0]
 801687c:	6053      	strne	r3, [r2, #4]
 801687e:	4630      	mov	r0, r6
 8016880:	f000 fc84 	bl	801718c <__malloc_unlock>
 8016884:	f104 000b 	add.w	r0, r4, #11
 8016888:	1d23      	adds	r3, r4, #4
 801688a:	f020 0007 	bic.w	r0, r0, #7
 801688e:	1ac2      	subs	r2, r0, r3
 8016890:	d0cc      	beq.n	801682c <_malloc_r+0x20>
 8016892:	1a1b      	subs	r3, r3, r0
 8016894:	50a3      	str	r3, [r4, r2]
 8016896:	e7c9      	b.n	801682c <_malloc_r+0x20>
 8016898:	4622      	mov	r2, r4
 801689a:	6864      	ldr	r4, [r4, #4]
 801689c:	e7cc      	b.n	8016838 <_malloc_r+0x2c>
 801689e:	1cc4      	adds	r4, r0, #3
 80168a0:	f024 0403 	bic.w	r4, r4, #3
 80168a4:	42a0      	cmp	r0, r4
 80168a6:	d0e3      	beq.n	8016870 <_malloc_r+0x64>
 80168a8:	1a21      	subs	r1, r4, r0
 80168aa:	4630      	mov	r0, r6
 80168ac:	f000 faf6 	bl	8016e9c <_sbrk_r>
 80168b0:	3001      	adds	r0, #1
 80168b2:	d1dd      	bne.n	8016870 <_malloc_r+0x64>
 80168b4:	e7cf      	b.n	8016856 <_malloc_r+0x4a>
 80168b6:	bf00      	nop
 80168b8:	20004b60 	.word	0x20004b60
 80168bc:	20004b64 	.word	0x20004b64

080168c0 <__sfputc_r>:
 80168c0:	6893      	ldr	r3, [r2, #8]
 80168c2:	3b01      	subs	r3, #1
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	b410      	push	{r4}
 80168c8:	6093      	str	r3, [r2, #8]
 80168ca:	da08      	bge.n	80168de <__sfputc_r+0x1e>
 80168cc:	6994      	ldr	r4, [r2, #24]
 80168ce:	42a3      	cmp	r3, r4
 80168d0:	db01      	blt.n	80168d6 <__sfputc_r+0x16>
 80168d2:	290a      	cmp	r1, #10
 80168d4:	d103      	bne.n	80168de <__sfputc_r+0x1e>
 80168d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168da:	f000 bb33 	b.w	8016f44 <__swbuf_r>
 80168de:	6813      	ldr	r3, [r2, #0]
 80168e0:	1c58      	adds	r0, r3, #1
 80168e2:	6010      	str	r0, [r2, #0]
 80168e4:	7019      	strb	r1, [r3, #0]
 80168e6:	4608      	mov	r0, r1
 80168e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <__sfputs_r>:
 80168ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168f0:	4606      	mov	r6, r0
 80168f2:	460f      	mov	r7, r1
 80168f4:	4614      	mov	r4, r2
 80168f6:	18d5      	adds	r5, r2, r3
 80168f8:	42ac      	cmp	r4, r5
 80168fa:	d101      	bne.n	8016900 <__sfputs_r+0x12>
 80168fc:	2000      	movs	r0, #0
 80168fe:	e007      	b.n	8016910 <__sfputs_r+0x22>
 8016900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016904:	463a      	mov	r2, r7
 8016906:	4630      	mov	r0, r6
 8016908:	f7ff ffda 	bl	80168c0 <__sfputc_r>
 801690c:	1c43      	adds	r3, r0, #1
 801690e:	d1f3      	bne.n	80168f8 <__sfputs_r+0xa>
 8016910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016914 <_vfiprintf_r>:
 8016914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016918:	460d      	mov	r5, r1
 801691a:	b09d      	sub	sp, #116	; 0x74
 801691c:	4614      	mov	r4, r2
 801691e:	4698      	mov	r8, r3
 8016920:	4606      	mov	r6, r0
 8016922:	b118      	cbz	r0, 801692c <_vfiprintf_r+0x18>
 8016924:	6983      	ldr	r3, [r0, #24]
 8016926:	b90b      	cbnz	r3, 801692c <_vfiprintf_r+0x18>
 8016928:	f7ff fe02 	bl	8016530 <__sinit>
 801692c:	4b89      	ldr	r3, [pc, #548]	; (8016b54 <_vfiprintf_r+0x240>)
 801692e:	429d      	cmp	r5, r3
 8016930:	d11b      	bne.n	801696a <_vfiprintf_r+0x56>
 8016932:	6875      	ldr	r5, [r6, #4]
 8016934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016936:	07d9      	lsls	r1, r3, #31
 8016938:	d405      	bmi.n	8016946 <_vfiprintf_r+0x32>
 801693a:	89ab      	ldrh	r3, [r5, #12]
 801693c:	059a      	lsls	r2, r3, #22
 801693e:	d402      	bmi.n	8016946 <_vfiprintf_r+0x32>
 8016940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016942:	f7ff fea5 	bl	8016690 <__retarget_lock_acquire_recursive>
 8016946:	89ab      	ldrh	r3, [r5, #12]
 8016948:	071b      	lsls	r3, r3, #28
 801694a:	d501      	bpl.n	8016950 <_vfiprintf_r+0x3c>
 801694c:	692b      	ldr	r3, [r5, #16]
 801694e:	b9eb      	cbnz	r3, 801698c <_vfiprintf_r+0x78>
 8016950:	4629      	mov	r1, r5
 8016952:	4630      	mov	r0, r6
 8016954:	f000 fb5a 	bl	801700c <__swsetup_r>
 8016958:	b1c0      	cbz	r0, 801698c <_vfiprintf_r+0x78>
 801695a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801695c:	07dc      	lsls	r4, r3, #31
 801695e:	d50e      	bpl.n	801697e <_vfiprintf_r+0x6a>
 8016960:	f04f 30ff 	mov.w	r0, #4294967295
 8016964:	b01d      	add	sp, #116	; 0x74
 8016966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801696a:	4b7b      	ldr	r3, [pc, #492]	; (8016b58 <_vfiprintf_r+0x244>)
 801696c:	429d      	cmp	r5, r3
 801696e:	d101      	bne.n	8016974 <_vfiprintf_r+0x60>
 8016970:	68b5      	ldr	r5, [r6, #8]
 8016972:	e7df      	b.n	8016934 <_vfiprintf_r+0x20>
 8016974:	4b79      	ldr	r3, [pc, #484]	; (8016b5c <_vfiprintf_r+0x248>)
 8016976:	429d      	cmp	r5, r3
 8016978:	bf08      	it	eq
 801697a:	68f5      	ldreq	r5, [r6, #12]
 801697c:	e7da      	b.n	8016934 <_vfiprintf_r+0x20>
 801697e:	89ab      	ldrh	r3, [r5, #12]
 8016980:	0598      	lsls	r0, r3, #22
 8016982:	d4ed      	bmi.n	8016960 <_vfiprintf_r+0x4c>
 8016984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016986:	f7ff fe84 	bl	8016692 <__retarget_lock_release_recursive>
 801698a:	e7e9      	b.n	8016960 <_vfiprintf_r+0x4c>
 801698c:	2300      	movs	r3, #0
 801698e:	9309      	str	r3, [sp, #36]	; 0x24
 8016990:	2320      	movs	r3, #32
 8016992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016996:	f8cd 800c 	str.w	r8, [sp, #12]
 801699a:	2330      	movs	r3, #48	; 0x30
 801699c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b60 <_vfiprintf_r+0x24c>
 80169a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169a4:	f04f 0901 	mov.w	r9, #1
 80169a8:	4623      	mov	r3, r4
 80169aa:	469a      	mov	sl, r3
 80169ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169b0:	b10a      	cbz	r2, 80169b6 <_vfiprintf_r+0xa2>
 80169b2:	2a25      	cmp	r2, #37	; 0x25
 80169b4:	d1f9      	bne.n	80169aa <_vfiprintf_r+0x96>
 80169b6:	ebba 0b04 	subs.w	fp, sl, r4
 80169ba:	d00b      	beq.n	80169d4 <_vfiprintf_r+0xc0>
 80169bc:	465b      	mov	r3, fp
 80169be:	4622      	mov	r2, r4
 80169c0:	4629      	mov	r1, r5
 80169c2:	4630      	mov	r0, r6
 80169c4:	f7ff ff93 	bl	80168ee <__sfputs_r>
 80169c8:	3001      	adds	r0, #1
 80169ca:	f000 80aa 	beq.w	8016b22 <_vfiprintf_r+0x20e>
 80169ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169d0:	445a      	add	r2, fp
 80169d2:	9209      	str	r2, [sp, #36]	; 0x24
 80169d4:	f89a 3000 	ldrb.w	r3, [sl]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	f000 80a2 	beq.w	8016b22 <_vfiprintf_r+0x20e>
 80169de:	2300      	movs	r3, #0
 80169e0:	f04f 32ff 	mov.w	r2, #4294967295
 80169e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169e8:	f10a 0a01 	add.w	sl, sl, #1
 80169ec:	9304      	str	r3, [sp, #16]
 80169ee:	9307      	str	r3, [sp, #28]
 80169f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80169f4:	931a      	str	r3, [sp, #104]	; 0x68
 80169f6:	4654      	mov	r4, sl
 80169f8:	2205      	movs	r2, #5
 80169fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169fe:	4858      	ldr	r0, [pc, #352]	; (8016b60 <_vfiprintf_r+0x24c>)
 8016a00:	f7e9 fc1e 	bl	8000240 <memchr>
 8016a04:	9a04      	ldr	r2, [sp, #16]
 8016a06:	b9d8      	cbnz	r0, 8016a40 <_vfiprintf_r+0x12c>
 8016a08:	06d1      	lsls	r1, r2, #27
 8016a0a:	bf44      	itt	mi
 8016a0c:	2320      	movmi	r3, #32
 8016a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a12:	0713      	lsls	r3, r2, #28
 8016a14:	bf44      	itt	mi
 8016a16:	232b      	movmi	r3, #43	; 0x2b
 8016a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8016a20:	2b2a      	cmp	r3, #42	; 0x2a
 8016a22:	d015      	beq.n	8016a50 <_vfiprintf_r+0x13c>
 8016a24:	9a07      	ldr	r2, [sp, #28]
 8016a26:	4654      	mov	r4, sl
 8016a28:	2000      	movs	r0, #0
 8016a2a:	f04f 0c0a 	mov.w	ip, #10
 8016a2e:	4621      	mov	r1, r4
 8016a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a34:	3b30      	subs	r3, #48	; 0x30
 8016a36:	2b09      	cmp	r3, #9
 8016a38:	d94e      	bls.n	8016ad8 <_vfiprintf_r+0x1c4>
 8016a3a:	b1b0      	cbz	r0, 8016a6a <_vfiprintf_r+0x156>
 8016a3c:	9207      	str	r2, [sp, #28]
 8016a3e:	e014      	b.n	8016a6a <_vfiprintf_r+0x156>
 8016a40:	eba0 0308 	sub.w	r3, r0, r8
 8016a44:	fa09 f303 	lsl.w	r3, r9, r3
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	9304      	str	r3, [sp, #16]
 8016a4c:	46a2      	mov	sl, r4
 8016a4e:	e7d2      	b.n	80169f6 <_vfiprintf_r+0xe2>
 8016a50:	9b03      	ldr	r3, [sp, #12]
 8016a52:	1d19      	adds	r1, r3, #4
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	9103      	str	r1, [sp, #12]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	bfbb      	ittet	lt
 8016a5c:	425b      	neglt	r3, r3
 8016a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8016a62:	9307      	strge	r3, [sp, #28]
 8016a64:	9307      	strlt	r3, [sp, #28]
 8016a66:	bfb8      	it	lt
 8016a68:	9204      	strlt	r2, [sp, #16]
 8016a6a:	7823      	ldrb	r3, [r4, #0]
 8016a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8016a6e:	d10c      	bne.n	8016a8a <_vfiprintf_r+0x176>
 8016a70:	7863      	ldrb	r3, [r4, #1]
 8016a72:	2b2a      	cmp	r3, #42	; 0x2a
 8016a74:	d135      	bne.n	8016ae2 <_vfiprintf_r+0x1ce>
 8016a76:	9b03      	ldr	r3, [sp, #12]
 8016a78:	1d1a      	adds	r2, r3, #4
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	9203      	str	r2, [sp, #12]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	bfb8      	it	lt
 8016a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a86:	3402      	adds	r4, #2
 8016a88:	9305      	str	r3, [sp, #20]
 8016a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b70 <_vfiprintf_r+0x25c>
 8016a8e:	7821      	ldrb	r1, [r4, #0]
 8016a90:	2203      	movs	r2, #3
 8016a92:	4650      	mov	r0, sl
 8016a94:	f7e9 fbd4 	bl	8000240 <memchr>
 8016a98:	b140      	cbz	r0, 8016aac <_vfiprintf_r+0x198>
 8016a9a:	2340      	movs	r3, #64	; 0x40
 8016a9c:	eba0 000a 	sub.w	r0, r0, sl
 8016aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8016aa4:	9b04      	ldr	r3, [sp, #16]
 8016aa6:	4303      	orrs	r3, r0
 8016aa8:	3401      	adds	r4, #1
 8016aaa:	9304      	str	r3, [sp, #16]
 8016aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ab0:	482c      	ldr	r0, [pc, #176]	; (8016b64 <_vfiprintf_r+0x250>)
 8016ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ab6:	2206      	movs	r2, #6
 8016ab8:	f7e9 fbc2 	bl	8000240 <memchr>
 8016abc:	2800      	cmp	r0, #0
 8016abe:	d03f      	beq.n	8016b40 <_vfiprintf_r+0x22c>
 8016ac0:	4b29      	ldr	r3, [pc, #164]	; (8016b68 <_vfiprintf_r+0x254>)
 8016ac2:	bb1b      	cbnz	r3, 8016b0c <_vfiprintf_r+0x1f8>
 8016ac4:	9b03      	ldr	r3, [sp, #12]
 8016ac6:	3307      	adds	r3, #7
 8016ac8:	f023 0307 	bic.w	r3, r3, #7
 8016acc:	3308      	adds	r3, #8
 8016ace:	9303      	str	r3, [sp, #12]
 8016ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ad2:	443b      	add	r3, r7
 8016ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ad6:	e767      	b.n	80169a8 <_vfiprintf_r+0x94>
 8016ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8016adc:	460c      	mov	r4, r1
 8016ade:	2001      	movs	r0, #1
 8016ae0:	e7a5      	b.n	8016a2e <_vfiprintf_r+0x11a>
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	3401      	adds	r4, #1
 8016ae6:	9305      	str	r3, [sp, #20]
 8016ae8:	4619      	mov	r1, r3
 8016aea:	f04f 0c0a 	mov.w	ip, #10
 8016aee:	4620      	mov	r0, r4
 8016af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016af4:	3a30      	subs	r2, #48	; 0x30
 8016af6:	2a09      	cmp	r2, #9
 8016af8:	d903      	bls.n	8016b02 <_vfiprintf_r+0x1ee>
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d0c5      	beq.n	8016a8a <_vfiprintf_r+0x176>
 8016afe:	9105      	str	r1, [sp, #20]
 8016b00:	e7c3      	b.n	8016a8a <_vfiprintf_r+0x176>
 8016b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b06:	4604      	mov	r4, r0
 8016b08:	2301      	movs	r3, #1
 8016b0a:	e7f0      	b.n	8016aee <_vfiprintf_r+0x1da>
 8016b0c:	ab03      	add	r3, sp, #12
 8016b0e:	9300      	str	r3, [sp, #0]
 8016b10:	462a      	mov	r2, r5
 8016b12:	4b16      	ldr	r3, [pc, #88]	; (8016b6c <_vfiprintf_r+0x258>)
 8016b14:	a904      	add	r1, sp, #16
 8016b16:	4630      	mov	r0, r6
 8016b18:	f3af 8000 	nop.w
 8016b1c:	4607      	mov	r7, r0
 8016b1e:	1c78      	adds	r0, r7, #1
 8016b20:	d1d6      	bne.n	8016ad0 <_vfiprintf_r+0x1bc>
 8016b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b24:	07d9      	lsls	r1, r3, #31
 8016b26:	d405      	bmi.n	8016b34 <_vfiprintf_r+0x220>
 8016b28:	89ab      	ldrh	r3, [r5, #12]
 8016b2a:	059a      	lsls	r2, r3, #22
 8016b2c:	d402      	bmi.n	8016b34 <_vfiprintf_r+0x220>
 8016b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b30:	f7ff fdaf 	bl	8016692 <__retarget_lock_release_recursive>
 8016b34:	89ab      	ldrh	r3, [r5, #12]
 8016b36:	065b      	lsls	r3, r3, #25
 8016b38:	f53f af12 	bmi.w	8016960 <_vfiprintf_r+0x4c>
 8016b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b3e:	e711      	b.n	8016964 <_vfiprintf_r+0x50>
 8016b40:	ab03      	add	r3, sp, #12
 8016b42:	9300      	str	r3, [sp, #0]
 8016b44:	462a      	mov	r2, r5
 8016b46:	4b09      	ldr	r3, [pc, #36]	; (8016b6c <_vfiprintf_r+0x258>)
 8016b48:	a904      	add	r1, sp, #16
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f000 f880 	bl	8016c50 <_printf_i>
 8016b50:	e7e4      	b.n	8016b1c <_vfiprintf_r+0x208>
 8016b52:	bf00      	nop
 8016b54:	0801a394 	.word	0x0801a394
 8016b58:	0801a3b4 	.word	0x0801a3b4
 8016b5c:	0801a374 	.word	0x0801a374
 8016b60:	0801a3d4 	.word	0x0801a3d4
 8016b64:	0801a3de 	.word	0x0801a3de
 8016b68:	00000000 	.word	0x00000000
 8016b6c:	080168ef 	.word	0x080168ef
 8016b70:	0801a3da 	.word	0x0801a3da

08016b74 <_printf_common>:
 8016b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b78:	4616      	mov	r6, r2
 8016b7a:	4699      	mov	r9, r3
 8016b7c:	688a      	ldr	r2, [r1, #8]
 8016b7e:	690b      	ldr	r3, [r1, #16]
 8016b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016b84:	4293      	cmp	r3, r2
 8016b86:	bfb8      	it	lt
 8016b88:	4613      	movlt	r3, r2
 8016b8a:	6033      	str	r3, [r6, #0]
 8016b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016b90:	4607      	mov	r7, r0
 8016b92:	460c      	mov	r4, r1
 8016b94:	b10a      	cbz	r2, 8016b9a <_printf_common+0x26>
 8016b96:	3301      	adds	r3, #1
 8016b98:	6033      	str	r3, [r6, #0]
 8016b9a:	6823      	ldr	r3, [r4, #0]
 8016b9c:	0699      	lsls	r1, r3, #26
 8016b9e:	bf42      	ittt	mi
 8016ba0:	6833      	ldrmi	r3, [r6, #0]
 8016ba2:	3302      	addmi	r3, #2
 8016ba4:	6033      	strmi	r3, [r6, #0]
 8016ba6:	6825      	ldr	r5, [r4, #0]
 8016ba8:	f015 0506 	ands.w	r5, r5, #6
 8016bac:	d106      	bne.n	8016bbc <_printf_common+0x48>
 8016bae:	f104 0a19 	add.w	sl, r4, #25
 8016bb2:	68e3      	ldr	r3, [r4, #12]
 8016bb4:	6832      	ldr	r2, [r6, #0]
 8016bb6:	1a9b      	subs	r3, r3, r2
 8016bb8:	42ab      	cmp	r3, r5
 8016bba:	dc26      	bgt.n	8016c0a <_printf_common+0x96>
 8016bbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016bc0:	1e13      	subs	r3, r2, #0
 8016bc2:	6822      	ldr	r2, [r4, #0]
 8016bc4:	bf18      	it	ne
 8016bc6:	2301      	movne	r3, #1
 8016bc8:	0692      	lsls	r2, r2, #26
 8016bca:	d42b      	bmi.n	8016c24 <_printf_common+0xb0>
 8016bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bd0:	4649      	mov	r1, r9
 8016bd2:	4638      	mov	r0, r7
 8016bd4:	47c0      	blx	r8
 8016bd6:	3001      	adds	r0, #1
 8016bd8:	d01e      	beq.n	8016c18 <_printf_common+0xa4>
 8016bda:	6823      	ldr	r3, [r4, #0]
 8016bdc:	68e5      	ldr	r5, [r4, #12]
 8016bde:	6832      	ldr	r2, [r6, #0]
 8016be0:	f003 0306 	and.w	r3, r3, #6
 8016be4:	2b04      	cmp	r3, #4
 8016be6:	bf08      	it	eq
 8016be8:	1aad      	subeq	r5, r5, r2
 8016bea:	68a3      	ldr	r3, [r4, #8]
 8016bec:	6922      	ldr	r2, [r4, #16]
 8016bee:	bf0c      	ite	eq
 8016bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016bf4:	2500      	movne	r5, #0
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	bfc4      	itt	gt
 8016bfa:	1a9b      	subgt	r3, r3, r2
 8016bfc:	18ed      	addgt	r5, r5, r3
 8016bfe:	2600      	movs	r6, #0
 8016c00:	341a      	adds	r4, #26
 8016c02:	42b5      	cmp	r5, r6
 8016c04:	d11a      	bne.n	8016c3c <_printf_common+0xc8>
 8016c06:	2000      	movs	r0, #0
 8016c08:	e008      	b.n	8016c1c <_printf_common+0xa8>
 8016c0a:	2301      	movs	r3, #1
 8016c0c:	4652      	mov	r2, sl
 8016c0e:	4649      	mov	r1, r9
 8016c10:	4638      	mov	r0, r7
 8016c12:	47c0      	blx	r8
 8016c14:	3001      	adds	r0, #1
 8016c16:	d103      	bne.n	8016c20 <_printf_common+0xac>
 8016c18:	f04f 30ff 	mov.w	r0, #4294967295
 8016c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c20:	3501      	adds	r5, #1
 8016c22:	e7c6      	b.n	8016bb2 <_printf_common+0x3e>
 8016c24:	18e1      	adds	r1, r4, r3
 8016c26:	1c5a      	adds	r2, r3, #1
 8016c28:	2030      	movs	r0, #48	; 0x30
 8016c2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016c2e:	4422      	add	r2, r4
 8016c30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016c34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016c38:	3302      	adds	r3, #2
 8016c3a:	e7c7      	b.n	8016bcc <_printf_common+0x58>
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	4622      	mov	r2, r4
 8016c40:	4649      	mov	r1, r9
 8016c42:	4638      	mov	r0, r7
 8016c44:	47c0      	blx	r8
 8016c46:	3001      	adds	r0, #1
 8016c48:	d0e6      	beq.n	8016c18 <_printf_common+0xa4>
 8016c4a:	3601      	adds	r6, #1
 8016c4c:	e7d9      	b.n	8016c02 <_printf_common+0x8e>
	...

08016c50 <_printf_i>:
 8016c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016c54:	460c      	mov	r4, r1
 8016c56:	4691      	mov	r9, r2
 8016c58:	7e27      	ldrb	r7, [r4, #24]
 8016c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c5c:	2f78      	cmp	r7, #120	; 0x78
 8016c5e:	4680      	mov	r8, r0
 8016c60:	469a      	mov	sl, r3
 8016c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c66:	d807      	bhi.n	8016c78 <_printf_i+0x28>
 8016c68:	2f62      	cmp	r7, #98	; 0x62
 8016c6a:	d80a      	bhi.n	8016c82 <_printf_i+0x32>
 8016c6c:	2f00      	cmp	r7, #0
 8016c6e:	f000 80d8 	beq.w	8016e22 <_printf_i+0x1d2>
 8016c72:	2f58      	cmp	r7, #88	; 0x58
 8016c74:	f000 80a3 	beq.w	8016dbe <_printf_i+0x16e>
 8016c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016c80:	e03a      	b.n	8016cf8 <_printf_i+0xa8>
 8016c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016c86:	2b15      	cmp	r3, #21
 8016c88:	d8f6      	bhi.n	8016c78 <_printf_i+0x28>
 8016c8a:	a001      	add	r0, pc, #4	; (adr r0, 8016c90 <_printf_i+0x40>)
 8016c8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016c90:	08016ce9 	.word	0x08016ce9
 8016c94:	08016cfd 	.word	0x08016cfd
 8016c98:	08016c79 	.word	0x08016c79
 8016c9c:	08016c79 	.word	0x08016c79
 8016ca0:	08016c79 	.word	0x08016c79
 8016ca4:	08016c79 	.word	0x08016c79
 8016ca8:	08016cfd 	.word	0x08016cfd
 8016cac:	08016c79 	.word	0x08016c79
 8016cb0:	08016c79 	.word	0x08016c79
 8016cb4:	08016c79 	.word	0x08016c79
 8016cb8:	08016c79 	.word	0x08016c79
 8016cbc:	08016e09 	.word	0x08016e09
 8016cc0:	08016d2d 	.word	0x08016d2d
 8016cc4:	08016deb 	.word	0x08016deb
 8016cc8:	08016c79 	.word	0x08016c79
 8016ccc:	08016c79 	.word	0x08016c79
 8016cd0:	08016e2b 	.word	0x08016e2b
 8016cd4:	08016c79 	.word	0x08016c79
 8016cd8:	08016d2d 	.word	0x08016d2d
 8016cdc:	08016c79 	.word	0x08016c79
 8016ce0:	08016c79 	.word	0x08016c79
 8016ce4:	08016df3 	.word	0x08016df3
 8016ce8:	680b      	ldr	r3, [r1, #0]
 8016cea:	1d1a      	adds	r2, r3, #4
 8016cec:	681b      	ldr	r3, [r3, #0]
 8016cee:	600a      	str	r2, [r1, #0]
 8016cf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016cf8:	2301      	movs	r3, #1
 8016cfa:	e0a3      	b.n	8016e44 <_printf_i+0x1f4>
 8016cfc:	6825      	ldr	r5, [r4, #0]
 8016cfe:	6808      	ldr	r0, [r1, #0]
 8016d00:	062e      	lsls	r6, r5, #24
 8016d02:	f100 0304 	add.w	r3, r0, #4
 8016d06:	d50a      	bpl.n	8016d1e <_printf_i+0xce>
 8016d08:	6805      	ldr	r5, [r0, #0]
 8016d0a:	600b      	str	r3, [r1, #0]
 8016d0c:	2d00      	cmp	r5, #0
 8016d0e:	da03      	bge.n	8016d18 <_printf_i+0xc8>
 8016d10:	232d      	movs	r3, #45	; 0x2d
 8016d12:	426d      	negs	r5, r5
 8016d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d18:	485e      	ldr	r0, [pc, #376]	; (8016e94 <_printf_i+0x244>)
 8016d1a:	230a      	movs	r3, #10
 8016d1c:	e019      	b.n	8016d52 <_printf_i+0x102>
 8016d1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016d22:	6805      	ldr	r5, [r0, #0]
 8016d24:	600b      	str	r3, [r1, #0]
 8016d26:	bf18      	it	ne
 8016d28:	b22d      	sxthne	r5, r5
 8016d2a:	e7ef      	b.n	8016d0c <_printf_i+0xbc>
 8016d2c:	680b      	ldr	r3, [r1, #0]
 8016d2e:	6825      	ldr	r5, [r4, #0]
 8016d30:	1d18      	adds	r0, r3, #4
 8016d32:	6008      	str	r0, [r1, #0]
 8016d34:	0628      	lsls	r0, r5, #24
 8016d36:	d501      	bpl.n	8016d3c <_printf_i+0xec>
 8016d38:	681d      	ldr	r5, [r3, #0]
 8016d3a:	e002      	b.n	8016d42 <_printf_i+0xf2>
 8016d3c:	0669      	lsls	r1, r5, #25
 8016d3e:	d5fb      	bpl.n	8016d38 <_printf_i+0xe8>
 8016d40:	881d      	ldrh	r5, [r3, #0]
 8016d42:	4854      	ldr	r0, [pc, #336]	; (8016e94 <_printf_i+0x244>)
 8016d44:	2f6f      	cmp	r7, #111	; 0x6f
 8016d46:	bf0c      	ite	eq
 8016d48:	2308      	moveq	r3, #8
 8016d4a:	230a      	movne	r3, #10
 8016d4c:	2100      	movs	r1, #0
 8016d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016d52:	6866      	ldr	r6, [r4, #4]
 8016d54:	60a6      	str	r6, [r4, #8]
 8016d56:	2e00      	cmp	r6, #0
 8016d58:	bfa2      	ittt	ge
 8016d5a:	6821      	ldrge	r1, [r4, #0]
 8016d5c:	f021 0104 	bicge.w	r1, r1, #4
 8016d60:	6021      	strge	r1, [r4, #0]
 8016d62:	b90d      	cbnz	r5, 8016d68 <_printf_i+0x118>
 8016d64:	2e00      	cmp	r6, #0
 8016d66:	d04d      	beq.n	8016e04 <_printf_i+0x1b4>
 8016d68:	4616      	mov	r6, r2
 8016d6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8016d6e:	fb03 5711 	mls	r7, r3, r1, r5
 8016d72:	5dc7      	ldrb	r7, [r0, r7]
 8016d74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016d78:	462f      	mov	r7, r5
 8016d7a:	42bb      	cmp	r3, r7
 8016d7c:	460d      	mov	r5, r1
 8016d7e:	d9f4      	bls.n	8016d6a <_printf_i+0x11a>
 8016d80:	2b08      	cmp	r3, #8
 8016d82:	d10b      	bne.n	8016d9c <_printf_i+0x14c>
 8016d84:	6823      	ldr	r3, [r4, #0]
 8016d86:	07df      	lsls	r7, r3, #31
 8016d88:	d508      	bpl.n	8016d9c <_printf_i+0x14c>
 8016d8a:	6923      	ldr	r3, [r4, #16]
 8016d8c:	6861      	ldr	r1, [r4, #4]
 8016d8e:	4299      	cmp	r1, r3
 8016d90:	bfde      	ittt	le
 8016d92:	2330      	movle	r3, #48	; 0x30
 8016d94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016d9c:	1b92      	subs	r2, r2, r6
 8016d9e:	6122      	str	r2, [r4, #16]
 8016da0:	f8cd a000 	str.w	sl, [sp]
 8016da4:	464b      	mov	r3, r9
 8016da6:	aa03      	add	r2, sp, #12
 8016da8:	4621      	mov	r1, r4
 8016daa:	4640      	mov	r0, r8
 8016dac:	f7ff fee2 	bl	8016b74 <_printf_common>
 8016db0:	3001      	adds	r0, #1
 8016db2:	d14c      	bne.n	8016e4e <_printf_i+0x1fe>
 8016db4:	f04f 30ff 	mov.w	r0, #4294967295
 8016db8:	b004      	add	sp, #16
 8016dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016dbe:	4835      	ldr	r0, [pc, #212]	; (8016e94 <_printf_i+0x244>)
 8016dc0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016dc4:	6823      	ldr	r3, [r4, #0]
 8016dc6:	680e      	ldr	r6, [r1, #0]
 8016dc8:	061f      	lsls	r7, r3, #24
 8016dca:	f856 5b04 	ldr.w	r5, [r6], #4
 8016dce:	600e      	str	r6, [r1, #0]
 8016dd0:	d514      	bpl.n	8016dfc <_printf_i+0x1ac>
 8016dd2:	07d9      	lsls	r1, r3, #31
 8016dd4:	bf44      	itt	mi
 8016dd6:	f043 0320 	orrmi.w	r3, r3, #32
 8016dda:	6023      	strmi	r3, [r4, #0]
 8016ddc:	b91d      	cbnz	r5, 8016de6 <_printf_i+0x196>
 8016dde:	6823      	ldr	r3, [r4, #0]
 8016de0:	f023 0320 	bic.w	r3, r3, #32
 8016de4:	6023      	str	r3, [r4, #0]
 8016de6:	2310      	movs	r3, #16
 8016de8:	e7b0      	b.n	8016d4c <_printf_i+0xfc>
 8016dea:	6823      	ldr	r3, [r4, #0]
 8016dec:	f043 0320 	orr.w	r3, r3, #32
 8016df0:	6023      	str	r3, [r4, #0]
 8016df2:	2378      	movs	r3, #120	; 0x78
 8016df4:	4828      	ldr	r0, [pc, #160]	; (8016e98 <_printf_i+0x248>)
 8016df6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016dfa:	e7e3      	b.n	8016dc4 <_printf_i+0x174>
 8016dfc:	065e      	lsls	r6, r3, #25
 8016dfe:	bf48      	it	mi
 8016e00:	b2ad      	uxthmi	r5, r5
 8016e02:	e7e6      	b.n	8016dd2 <_printf_i+0x182>
 8016e04:	4616      	mov	r6, r2
 8016e06:	e7bb      	b.n	8016d80 <_printf_i+0x130>
 8016e08:	680b      	ldr	r3, [r1, #0]
 8016e0a:	6826      	ldr	r6, [r4, #0]
 8016e0c:	6960      	ldr	r0, [r4, #20]
 8016e0e:	1d1d      	adds	r5, r3, #4
 8016e10:	600d      	str	r5, [r1, #0]
 8016e12:	0635      	lsls	r5, r6, #24
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	d501      	bpl.n	8016e1c <_printf_i+0x1cc>
 8016e18:	6018      	str	r0, [r3, #0]
 8016e1a:	e002      	b.n	8016e22 <_printf_i+0x1d2>
 8016e1c:	0671      	lsls	r1, r6, #25
 8016e1e:	d5fb      	bpl.n	8016e18 <_printf_i+0x1c8>
 8016e20:	8018      	strh	r0, [r3, #0]
 8016e22:	2300      	movs	r3, #0
 8016e24:	6123      	str	r3, [r4, #16]
 8016e26:	4616      	mov	r6, r2
 8016e28:	e7ba      	b.n	8016da0 <_printf_i+0x150>
 8016e2a:	680b      	ldr	r3, [r1, #0]
 8016e2c:	1d1a      	adds	r2, r3, #4
 8016e2e:	600a      	str	r2, [r1, #0]
 8016e30:	681e      	ldr	r6, [r3, #0]
 8016e32:	6862      	ldr	r2, [r4, #4]
 8016e34:	2100      	movs	r1, #0
 8016e36:	4630      	mov	r0, r6
 8016e38:	f7e9 fa02 	bl	8000240 <memchr>
 8016e3c:	b108      	cbz	r0, 8016e42 <_printf_i+0x1f2>
 8016e3e:	1b80      	subs	r0, r0, r6
 8016e40:	6060      	str	r0, [r4, #4]
 8016e42:	6863      	ldr	r3, [r4, #4]
 8016e44:	6123      	str	r3, [r4, #16]
 8016e46:	2300      	movs	r3, #0
 8016e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e4c:	e7a8      	b.n	8016da0 <_printf_i+0x150>
 8016e4e:	6923      	ldr	r3, [r4, #16]
 8016e50:	4632      	mov	r2, r6
 8016e52:	4649      	mov	r1, r9
 8016e54:	4640      	mov	r0, r8
 8016e56:	47d0      	blx	sl
 8016e58:	3001      	adds	r0, #1
 8016e5a:	d0ab      	beq.n	8016db4 <_printf_i+0x164>
 8016e5c:	6823      	ldr	r3, [r4, #0]
 8016e5e:	079b      	lsls	r3, r3, #30
 8016e60:	d413      	bmi.n	8016e8a <_printf_i+0x23a>
 8016e62:	68e0      	ldr	r0, [r4, #12]
 8016e64:	9b03      	ldr	r3, [sp, #12]
 8016e66:	4298      	cmp	r0, r3
 8016e68:	bfb8      	it	lt
 8016e6a:	4618      	movlt	r0, r3
 8016e6c:	e7a4      	b.n	8016db8 <_printf_i+0x168>
 8016e6e:	2301      	movs	r3, #1
 8016e70:	4632      	mov	r2, r6
 8016e72:	4649      	mov	r1, r9
 8016e74:	4640      	mov	r0, r8
 8016e76:	47d0      	blx	sl
 8016e78:	3001      	adds	r0, #1
 8016e7a:	d09b      	beq.n	8016db4 <_printf_i+0x164>
 8016e7c:	3501      	adds	r5, #1
 8016e7e:	68e3      	ldr	r3, [r4, #12]
 8016e80:	9903      	ldr	r1, [sp, #12]
 8016e82:	1a5b      	subs	r3, r3, r1
 8016e84:	42ab      	cmp	r3, r5
 8016e86:	dcf2      	bgt.n	8016e6e <_printf_i+0x21e>
 8016e88:	e7eb      	b.n	8016e62 <_printf_i+0x212>
 8016e8a:	2500      	movs	r5, #0
 8016e8c:	f104 0619 	add.w	r6, r4, #25
 8016e90:	e7f5      	b.n	8016e7e <_printf_i+0x22e>
 8016e92:	bf00      	nop
 8016e94:	0801a3e5 	.word	0x0801a3e5
 8016e98:	0801a3f6 	.word	0x0801a3f6

08016e9c <_sbrk_r>:
 8016e9c:	b538      	push	{r3, r4, r5, lr}
 8016e9e:	4d06      	ldr	r5, [pc, #24]	; (8016eb8 <_sbrk_r+0x1c>)
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	4604      	mov	r4, r0
 8016ea4:	4608      	mov	r0, r1
 8016ea6:	602b      	str	r3, [r5, #0]
 8016ea8:	f7e9 ff9a 	bl	8000de0 <_sbrk>
 8016eac:	1c43      	adds	r3, r0, #1
 8016eae:	d102      	bne.n	8016eb6 <_sbrk_r+0x1a>
 8016eb0:	682b      	ldr	r3, [r5, #0]
 8016eb2:	b103      	cbz	r3, 8016eb6 <_sbrk_r+0x1a>
 8016eb4:	6023      	str	r3, [r4, #0]
 8016eb6:	bd38      	pop	{r3, r4, r5, pc}
 8016eb8:	2000b95c 	.word	0x2000b95c

08016ebc <__sread>:
 8016ebc:	b510      	push	{r4, lr}
 8016ebe:	460c      	mov	r4, r1
 8016ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ec4:	f000 f968 	bl	8017198 <_read_r>
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	bfab      	itete	ge
 8016ecc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ece:	89a3      	ldrhlt	r3, [r4, #12]
 8016ed0:	181b      	addge	r3, r3, r0
 8016ed2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ed6:	bfac      	ite	ge
 8016ed8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016eda:	81a3      	strhlt	r3, [r4, #12]
 8016edc:	bd10      	pop	{r4, pc}

08016ede <__swrite>:
 8016ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ee2:	461f      	mov	r7, r3
 8016ee4:	898b      	ldrh	r3, [r1, #12]
 8016ee6:	05db      	lsls	r3, r3, #23
 8016ee8:	4605      	mov	r5, r0
 8016eea:	460c      	mov	r4, r1
 8016eec:	4616      	mov	r6, r2
 8016eee:	d505      	bpl.n	8016efc <__swrite+0x1e>
 8016ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef4:	2302      	movs	r3, #2
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	f000 f930 	bl	801715c <_lseek_r>
 8016efc:	89a3      	ldrh	r3, [r4, #12]
 8016efe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f06:	81a3      	strh	r3, [r4, #12]
 8016f08:	4632      	mov	r2, r6
 8016f0a:	463b      	mov	r3, r7
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f12:	f000 b869 	b.w	8016fe8 <_write_r>

08016f16 <__sseek>:
 8016f16:	b510      	push	{r4, lr}
 8016f18:	460c      	mov	r4, r1
 8016f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f1e:	f000 f91d 	bl	801715c <_lseek_r>
 8016f22:	1c43      	adds	r3, r0, #1
 8016f24:	89a3      	ldrh	r3, [r4, #12]
 8016f26:	bf15      	itete	ne
 8016f28:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f32:	81a3      	strheq	r3, [r4, #12]
 8016f34:	bf18      	it	ne
 8016f36:	81a3      	strhne	r3, [r4, #12]
 8016f38:	bd10      	pop	{r4, pc}

08016f3a <__sclose>:
 8016f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f3e:	f000 b8db 	b.w	80170f8 <_close_r>
	...

08016f44 <__swbuf_r>:
 8016f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f46:	460e      	mov	r6, r1
 8016f48:	4614      	mov	r4, r2
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	b118      	cbz	r0, 8016f56 <__swbuf_r+0x12>
 8016f4e:	6983      	ldr	r3, [r0, #24]
 8016f50:	b90b      	cbnz	r3, 8016f56 <__swbuf_r+0x12>
 8016f52:	f7ff faed 	bl	8016530 <__sinit>
 8016f56:	4b21      	ldr	r3, [pc, #132]	; (8016fdc <__swbuf_r+0x98>)
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	d12b      	bne.n	8016fb4 <__swbuf_r+0x70>
 8016f5c:	686c      	ldr	r4, [r5, #4]
 8016f5e:	69a3      	ldr	r3, [r4, #24]
 8016f60:	60a3      	str	r3, [r4, #8]
 8016f62:	89a3      	ldrh	r3, [r4, #12]
 8016f64:	071a      	lsls	r2, r3, #28
 8016f66:	d52f      	bpl.n	8016fc8 <__swbuf_r+0x84>
 8016f68:	6923      	ldr	r3, [r4, #16]
 8016f6a:	b36b      	cbz	r3, 8016fc8 <__swbuf_r+0x84>
 8016f6c:	6923      	ldr	r3, [r4, #16]
 8016f6e:	6820      	ldr	r0, [r4, #0]
 8016f70:	1ac0      	subs	r0, r0, r3
 8016f72:	6963      	ldr	r3, [r4, #20]
 8016f74:	b2f6      	uxtb	r6, r6
 8016f76:	4283      	cmp	r3, r0
 8016f78:	4637      	mov	r7, r6
 8016f7a:	dc04      	bgt.n	8016f86 <__swbuf_r+0x42>
 8016f7c:	4621      	mov	r1, r4
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f7ff fa42 	bl	8016408 <_fflush_r>
 8016f84:	bb30      	cbnz	r0, 8016fd4 <__swbuf_r+0x90>
 8016f86:	68a3      	ldr	r3, [r4, #8]
 8016f88:	3b01      	subs	r3, #1
 8016f8a:	60a3      	str	r3, [r4, #8]
 8016f8c:	6823      	ldr	r3, [r4, #0]
 8016f8e:	1c5a      	adds	r2, r3, #1
 8016f90:	6022      	str	r2, [r4, #0]
 8016f92:	701e      	strb	r6, [r3, #0]
 8016f94:	6963      	ldr	r3, [r4, #20]
 8016f96:	3001      	adds	r0, #1
 8016f98:	4283      	cmp	r3, r0
 8016f9a:	d004      	beq.n	8016fa6 <__swbuf_r+0x62>
 8016f9c:	89a3      	ldrh	r3, [r4, #12]
 8016f9e:	07db      	lsls	r3, r3, #31
 8016fa0:	d506      	bpl.n	8016fb0 <__swbuf_r+0x6c>
 8016fa2:	2e0a      	cmp	r6, #10
 8016fa4:	d104      	bne.n	8016fb0 <__swbuf_r+0x6c>
 8016fa6:	4621      	mov	r1, r4
 8016fa8:	4628      	mov	r0, r5
 8016faa:	f7ff fa2d 	bl	8016408 <_fflush_r>
 8016fae:	b988      	cbnz	r0, 8016fd4 <__swbuf_r+0x90>
 8016fb0:	4638      	mov	r0, r7
 8016fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb4:	4b0a      	ldr	r3, [pc, #40]	; (8016fe0 <__swbuf_r+0x9c>)
 8016fb6:	429c      	cmp	r4, r3
 8016fb8:	d101      	bne.n	8016fbe <__swbuf_r+0x7a>
 8016fba:	68ac      	ldr	r4, [r5, #8]
 8016fbc:	e7cf      	b.n	8016f5e <__swbuf_r+0x1a>
 8016fbe:	4b09      	ldr	r3, [pc, #36]	; (8016fe4 <__swbuf_r+0xa0>)
 8016fc0:	429c      	cmp	r4, r3
 8016fc2:	bf08      	it	eq
 8016fc4:	68ec      	ldreq	r4, [r5, #12]
 8016fc6:	e7ca      	b.n	8016f5e <__swbuf_r+0x1a>
 8016fc8:	4621      	mov	r1, r4
 8016fca:	4628      	mov	r0, r5
 8016fcc:	f000 f81e 	bl	801700c <__swsetup_r>
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d0cb      	beq.n	8016f6c <__swbuf_r+0x28>
 8016fd4:	f04f 37ff 	mov.w	r7, #4294967295
 8016fd8:	e7ea      	b.n	8016fb0 <__swbuf_r+0x6c>
 8016fda:	bf00      	nop
 8016fdc:	0801a394 	.word	0x0801a394
 8016fe0:	0801a3b4 	.word	0x0801a3b4
 8016fe4:	0801a374 	.word	0x0801a374

08016fe8 <_write_r>:
 8016fe8:	b538      	push	{r3, r4, r5, lr}
 8016fea:	4d07      	ldr	r5, [pc, #28]	; (8017008 <_write_r+0x20>)
 8016fec:	4604      	mov	r4, r0
 8016fee:	4608      	mov	r0, r1
 8016ff0:	4611      	mov	r1, r2
 8016ff2:	2200      	movs	r2, #0
 8016ff4:	602a      	str	r2, [r5, #0]
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	f7e9 fd08 	bl	8000a0c <_write>
 8016ffc:	1c43      	adds	r3, r0, #1
 8016ffe:	d102      	bne.n	8017006 <_write_r+0x1e>
 8017000:	682b      	ldr	r3, [r5, #0]
 8017002:	b103      	cbz	r3, 8017006 <_write_r+0x1e>
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	bd38      	pop	{r3, r4, r5, pc}
 8017008:	2000b95c 	.word	0x2000b95c

0801700c <__swsetup_r>:
 801700c:	4b32      	ldr	r3, [pc, #200]	; (80170d8 <__swsetup_r+0xcc>)
 801700e:	b570      	push	{r4, r5, r6, lr}
 8017010:	681d      	ldr	r5, [r3, #0]
 8017012:	4606      	mov	r6, r0
 8017014:	460c      	mov	r4, r1
 8017016:	b125      	cbz	r5, 8017022 <__swsetup_r+0x16>
 8017018:	69ab      	ldr	r3, [r5, #24]
 801701a:	b913      	cbnz	r3, 8017022 <__swsetup_r+0x16>
 801701c:	4628      	mov	r0, r5
 801701e:	f7ff fa87 	bl	8016530 <__sinit>
 8017022:	4b2e      	ldr	r3, [pc, #184]	; (80170dc <__swsetup_r+0xd0>)
 8017024:	429c      	cmp	r4, r3
 8017026:	d10f      	bne.n	8017048 <__swsetup_r+0x3c>
 8017028:	686c      	ldr	r4, [r5, #4]
 801702a:	89a3      	ldrh	r3, [r4, #12]
 801702c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017030:	0719      	lsls	r1, r3, #28
 8017032:	d42c      	bmi.n	801708e <__swsetup_r+0x82>
 8017034:	06dd      	lsls	r5, r3, #27
 8017036:	d411      	bmi.n	801705c <__swsetup_r+0x50>
 8017038:	2309      	movs	r3, #9
 801703a:	6033      	str	r3, [r6, #0]
 801703c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017040:	81a3      	strh	r3, [r4, #12]
 8017042:	f04f 30ff 	mov.w	r0, #4294967295
 8017046:	e03e      	b.n	80170c6 <__swsetup_r+0xba>
 8017048:	4b25      	ldr	r3, [pc, #148]	; (80170e0 <__swsetup_r+0xd4>)
 801704a:	429c      	cmp	r4, r3
 801704c:	d101      	bne.n	8017052 <__swsetup_r+0x46>
 801704e:	68ac      	ldr	r4, [r5, #8]
 8017050:	e7eb      	b.n	801702a <__swsetup_r+0x1e>
 8017052:	4b24      	ldr	r3, [pc, #144]	; (80170e4 <__swsetup_r+0xd8>)
 8017054:	429c      	cmp	r4, r3
 8017056:	bf08      	it	eq
 8017058:	68ec      	ldreq	r4, [r5, #12]
 801705a:	e7e6      	b.n	801702a <__swsetup_r+0x1e>
 801705c:	0758      	lsls	r0, r3, #29
 801705e:	d512      	bpl.n	8017086 <__swsetup_r+0x7a>
 8017060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017062:	b141      	cbz	r1, 8017076 <__swsetup_r+0x6a>
 8017064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017068:	4299      	cmp	r1, r3
 801706a:	d002      	beq.n	8017072 <__swsetup_r+0x66>
 801706c:	4630      	mov	r0, r6
 801706e:	f7ff fb7d 	bl	801676c <_free_r>
 8017072:	2300      	movs	r3, #0
 8017074:	6363      	str	r3, [r4, #52]	; 0x34
 8017076:	89a3      	ldrh	r3, [r4, #12]
 8017078:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801707c:	81a3      	strh	r3, [r4, #12]
 801707e:	2300      	movs	r3, #0
 8017080:	6063      	str	r3, [r4, #4]
 8017082:	6923      	ldr	r3, [r4, #16]
 8017084:	6023      	str	r3, [r4, #0]
 8017086:	89a3      	ldrh	r3, [r4, #12]
 8017088:	f043 0308 	orr.w	r3, r3, #8
 801708c:	81a3      	strh	r3, [r4, #12]
 801708e:	6923      	ldr	r3, [r4, #16]
 8017090:	b94b      	cbnz	r3, 80170a6 <__swsetup_r+0x9a>
 8017092:	89a3      	ldrh	r3, [r4, #12]
 8017094:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801709c:	d003      	beq.n	80170a6 <__swsetup_r+0x9a>
 801709e:	4621      	mov	r1, r4
 80170a0:	4630      	mov	r0, r6
 80170a2:	f7ff fb1b 	bl	80166dc <__smakebuf_r>
 80170a6:	89a0      	ldrh	r0, [r4, #12]
 80170a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80170ac:	f010 0301 	ands.w	r3, r0, #1
 80170b0:	d00a      	beq.n	80170c8 <__swsetup_r+0xbc>
 80170b2:	2300      	movs	r3, #0
 80170b4:	60a3      	str	r3, [r4, #8]
 80170b6:	6963      	ldr	r3, [r4, #20]
 80170b8:	425b      	negs	r3, r3
 80170ba:	61a3      	str	r3, [r4, #24]
 80170bc:	6923      	ldr	r3, [r4, #16]
 80170be:	b943      	cbnz	r3, 80170d2 <__swsetup_r+0xc6>
 80170c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80170c4:	d1ba      	bne.n	801703c <__swsetup_r+0x30>
 80170c6:	bd70      	pop	{r4, r5, r6, pc}
 80170c8:	0781      	lsls	r1, r0, #30
 80170ca:	bf58      	it	pl
 80170cc:	6963      	ldrpl	r3, [r4, #20]
 80170ce:	60a3      	str	r3, [r4, #8]
 80170d0:	e7f4      	b.n	80170bc <__swsetup_r+0xb0>
 80170d2:	2000      	movs	r0, #0
 80170d4:	e7f7      	b.n	80170c6 <__swsetup_r+0xba>
 80170d6:	bf00      	nop
 80170d8:	20000020 	.word	0x20000020
 80170dc:	0801a394 	.word	0x0801a394
 80170e0:	0801a3b4 	.word	0x0801a3b4
 80170e4:	0801a374 	.word	0x0801a374

080170e8 <abort>:
 80170e8:	b508      	push	{r3, lr}
 80170ea:	2006      	movs	r0, #6
 80170ec:	f000 f88e 	bl	801720c <raise>
 80170f0:	2001      	movs	r0, #1
 80170f2:	f000 f8b7 	bl	8017264 <_exit>
	...

080170f8 <_close_r>:
 80170f8:	b538      	push	{r3, r4, r5, lr}
 80170fa:	4d06      	ldr	r5, [pc, #24]	; (8017114 <_close_r+0x1c>)
 80170fc:	2300      	movs	r3, #0
 80170fe:	4604      	mov	r4, r0
 8017100:	4608      	mov	r0, r1
 8017102:	602b      	str	r3, [r5, #0]
 8017104:	f7e9 fcae 	bl	8000a64 <_close>
 8017108:	1c43      	adds	r3, r0, #1
 801710a:	d102      	bne.n	8017112 <_close_r+0x1a>
 801710c:	682b      	ldr	r3, [r5, #0]
 801710e:	b103      	cbz	r3, 8017112 <_close_r+0x1a>
 8017110:	6023      	str	r3, [r4, #0]
 8017112:	bd38      	pop	{r3, r4, r5, pc}
 8017114:	2000b95c 	.word	0x2000b95c

08017118 <_fstat_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4d07      	ldr	r5, [pc, #28]	; (8017138 <_fstat_r+0x20>)
 801711c:	2300      	movs	r3, #0
 801711e:	4604      	mov	r4, r0
 8017120:	4608      	mov	r0, r1
 8017122:	4611      	mov	r1, r2
 8017124:	602b      	str	r3, [r5, #0]
 8017126:	f7e9 fcf3 	bl	8000b10 <_fstat>
 801712a:	1c43      	adds	r3, r0, #1
 801712c:	d102      	bne.n	8017134 <_fstat_r+0x1c>
 801712e:	682b      	ldr	r3, [r5, #0]
 8017130:	b103      	cbz	r3, 8017134 <_fstat_r+0x1c>
 8017132:	6023      	str	r3, [r4, #0]
 8017134:	bd38      	pop	{r3, r4, r5, pc}
 8017136:	bf00      	nop
 8017138:	2000b95c 	.word	0x2000b95c

0801713c <_isatty_r>:
 801713c:	b538      	push	{r3, r4, r5, lr}
 801713e:	4d06      	ldr	r5, [pc, #24]	; (8017158 <_isatty_r+0x1c>)
 8017140:	2300      	movs	r3, #0
 8017142:	4604      	mov	r4, r0
 8017144:	4608      	mov	r0, r1
 8017146:	602b      	str	r3, [r5, #0]
 8017148:	f7e9 fc48 	bl	80009dc <_isatty>
 801714c:	1c43      	adds	r3, r0, #1
 801714e:	d102      	bne.n	8017156 <_isatty_r+0x1a>
 8017150:	682b      	ldr	r3, [r5, #0]
 8017152:	b103      	cbz	r3, 8017156 <_isatty_r+0x1a>
 8017154:	6023      	str	r3, [r4, #0]
 8017156:	bd38      	pop	{r3, r4, r5, pc}
 8017158:	2000b95c 	.word	0x2000b95c

0801715c <_lseek_r>:
 801715c:	b538      	push	{r3, r4, r5, lr}
 801715e:	4d07      	ldr	r5, [pc, #28]	; (801717c <_lseek_r+0x20>)
 8017160:	4604      	mov	r4, r0
 8017162:	4608      	mov	r0, r1
 8017164:	4611      	mov	r1, r2
 8017166:	2200      	movs	r2, #0
 8017168:	602a      	str	r2, [r5, #0]
 801716a:	461a      	mov	r2, r3
 801716c:	f7e9 fc94 	bl	8000a98 <_lseek>
 8017170:	1c43      	adds	r3, r0, #1
 8017172:	d102      	bne.n	801717a <_lseek_r+0x1e>
 8017174:	682b      	ldr	r3, [r5, #0]
 8017176:	b103      	cbz	r3, 801717a <_lseek_r+0x1e>
 8017178:	6023      	str	r3, [r4, #0]
 801717a:	bd38      	pop	{r3, r4, r5, pc}
 801717c:	2000b95c 	.word	0x2000b95c

08017180 <__malloc_lock>:
 8017180:	4801      	ldr	r0, [pc, #4]	; (8017188 <__malloc_lock+0x8>)
 8017182:	f7ff ba85 	b.w	8016690 <__retarget_lock_acquire_recursive>
 8017186:	bf00      	nop
 8017188:	2000b968 	.word	0x2000b968

0801718c <__malloc_unlock>:
 801718c:	4801      	ldr	r0, [pc, #4]	; (8017194 <__malloc_unlock+0x8>)
 801718e:	f7ff ba80 	b.w	8016692 <__retarget_lock_release_recursive>
 8017192:	bf00      	nop
 8017194:	2000b968 	.word	0x2000b968

08017198 <_read_r>:
 8017198:	b538      	push	{r3, r4, r5, lr}
 801719a:	4d07      	ldr	r5, [pc, #28]	; (80171b8 <_read_r+0x20>)
 801719c:	4604      	mov	r4, r0
 801719e:	4608      	mov	r0, r1
 80171a0:	4611      	mov	r1, r2
 80171a2:	2200      	movs	r2, #0
 80171a4:	602a      	str	r2, [r5, #0]
 80171a6:	461a      	mov	r2, r3
 80171a8:	f7e9 fc8a 	bl	8000ac0 <_read>
 80171ac:	1c43      	adds	r3, r0, #1
 80171ae:	d102      	bne.n	80171b6 <_read_r+0x1e>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	b103      	cbz	r3, 80171b6 <_read_r+0x1e>
 80171b4:	6023      	str	r3, [r4, #0]
 80171b6:	bd38      	pop	{r3, r4, r5, pc}
 80171b8:	2000b95c 	.word	0x2000b95c

080171bc <_raise_r>:
 80171bc:	291f      	cmp	r1, #31
 80171be:	b538      	push	{r3, r4, r5, lr}
 80171c0:	4604      	mov	r4, r0
 80171c2:	460d      	mov	r5, r1
 80171c4:	d904      	bls.n	80171d0 <_raise_r+0x14>
 80171c6:	2316      	movs	r3, #22
 80171c8:	6003      	str	r3, [r0, #0]
 80171ca:	f04f 30ff 	mov.w	r0, #4294967295
 80171ce:	bd38      	pop	{r3, r4, r5, pc}
 80171d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80171d2:	b112      	cbz	r2, 80171da <_raise_r+0x1e>
 80171d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80171d8:	b94b      	cbnz	r3, 80171ee <_raise_r+0x32>
 80171da:	4620      	mov	r0, r4
 80171dc:	f000 f830 	bl	8017240 <_getpid_r>
 80171e0:	462a      	mov	r2, r5
 80171e2:	4601      	mov	r1, r0
 80171e4:	4620      	mov	r0, r4
 80171e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171ea:	f000 b817 	b.w	801721c <_kill_r>
 80171ee:	2b01      	cmp	r3, #1
 80171f0:	d00a      	beq.n	8017208 <_raise_r+0x4c>
 80171f2:	1c59      	adds	r1, r3, #1
 80171f4:	d103      	bne.n	80171fe <_raise_r+0x42>
 80171f6:	2316      	movs	r3, #22
 80171f8:	6003      	str	r3, [r0, #0]
 80171fa:	2001      	movs	r0, #1
 80171fc:	e7e7      	b.n	80171ce <_raise_r+0x12>
 80171fe:	2400      	movs	r4, #0
 8017200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017204:	4628      	mov	r0, r5
 8017206:	4798      	blx	r3
 8017208:	2000      	movs	r0, #0
 801720a:	e7e0      	b.n	80171ce <_raise_r+0x12>

0801720c <raise>:
 801720c:	4b02      	ldr	r3, [pc, #8]	; (8017218 <raise+0xc>)
 801720e:	4601      	mov	r1, r0
 8017210:	6818      	ldr	r0, [r3, #0]
 8017212:	f7ff bfd3 	b.w	80171bc <_raise_r>
 8017216:	bf00      	nop
 8017218:	20000020 	.word	0x20000020

0801721c <_kill_r>:
 801721c:	b538      	push	{r3, r4, r5, lr}
 801721e:	4d07      	ldr	r5, [pc, #28]	; (801723c <_kill_r+0x20>)
 8017220:	2300      	movs	r3, #0
 8017222:	4604      	mov	r4, r0
 8017224:	4608      	mov	r0, r1
 8017226:	4611      	mov	r1, r2
 8017228:	602b      	str	r3, [r5, #0]
 801722a:	f000 f813 	bl	8017254 <_kill>
 801722e:	1c43      	adds	r3, r0, #1
 8017230:	d102      	bne.n	8017238 <_kill_r+0x1c>
 8017232:	682b      	ldr	r3, [r5, #0]
 8017234:	b103      	cbz	r3, 8017238 <_kill_r+0x1c>
 8017236:	6023      	str	r3, [r4, #0]
 8017238:	bd38      	pop	{r3, r4, r5, pc}
 801723a:	bf00      	nop
 801723c:	2000b95c 	.word	0x2000b95c

08017240 <_getpid_r>:
 8017240:	f000 b800 	b.w	8017244 <_getpid>

08017244 <_getpid>:
 8017244:	4b02      	ldr	r3, [pc, #8]	; (8017250 <_getpid+0xc>)
 8017246:	2258      	movs	r2, #88	; 0x58
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	f04f 30ff 	mov.w	r0, #4294967295
 801724e:	4770      	bx	lr
 8017250:	2000b95c 	.word	0x2000b95c

08017254 <_kill>:
 8017254:	4b02      	ldr	r3, [pc, #8]	; (8017260 <_kill+0xc>)
 8017256:	2258      	movs	r2, #88	; 0x58
 8017258:	601a      	str	r2, [r3, #0]
 801725a:	f04f 30ff 	mov.w	r0, #4294967295
 801725e:	4770      	bx	lr
 8017260:	2000b95c 	.word	0x2000b95c

08017264 <_exit>:
 8017264:	e7fe      	b.n	8017264 <_exit>
	...

08017268 <_init>:
 8017268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801726a:	bf00      	nop
 801726c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801726e:	bc08      	pop	{r3}
 8017270:	469e      	mov	lr, r3
 8017272:	4770      	bx	lr

08017274 <_fini>:
 8017274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017276:	bf00      	nop
 8017278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801727a:	bc08      	pop	{r3}
 801727c:	469e      	mov	lr, r3
 801727e:	4770      	bx	lr
